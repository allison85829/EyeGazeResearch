#4261 Comment 1:
Failing test are not related to th is issue. so I merge this
--------------------------------------------------------------
#4260 Comment 1:
Thanks for your work! Most of the conversion looks good. Concerning your questions:
1. The exporter and importer tests use a filename-based convention to find and check the tests. For example, 
https://github.com/JabRef/jabref/blob/57126659b4f8ff58c9403af0f4d6aabccf77058c/src/test/java/org/jabref/logic/exporter/ModsExportFormatTestFiles.java#L59-L66
finds all files that start with `Mods`. There are usually two files with the same name: one with `bib` ending and one with `xml`. The tests then should test that exporting the content of the bib file using the Mods-exporter give the contents of the `xml` file.
2. Yes, there is not yet a release of the new archunit. So, for now, the architecture tests can stay using Junit 4.
The mockito runner is not really needed. Its only purpose is to support the `@Mock` annotation, but you can always use `variable = mock(...)`. 
3. Currently, there is no neat way to handle this problem (see the open https://github.com/junit-team/junit5/issues/878).
4. Looks good.
5. I think, the problem is the setup in https://github.com/JabRef/jabref/pull/4260/files#diff-2e1fadfb1af8461d9d830981c338f225R64. The bib file should reside on the same level as the pdf folder (and not within).
#4260 Comment 2:
@tobiasdiez  Thanks for your answer! I'll have a try soon.
#4260 Comment 3:
@tobiasdiez Hi! I've done some improments. But I still have some questions.

1. I understand what you say. But when I try to enable this line 
`stream.forEach(n -> System.out.println(n));` with no other code changed, I still get nothing. Looks like there're no such files on my laptop. I suspect that it is the cause of this problem.

2. Done.

3. I'll keep those tests for the time being, as that kind of code is just frustrating. And of course, if you have any requirements, I'll use the "complicated" way to handle it.
 
4. Done.

5. I have a try, the `cleanupRelativePathsConvertAbsoluteToRelativePath()` test passed, but the `cleanupRenamePdfRenamesRelativeFile()` test still failed. So I was wondering if you can give me a further guide about this? It can be a big help.
![image](https://user-images.githubusercontent.com/25541992/44014458-9f8d8aca-9efe-11e8-9a5b-64a50af1756f.png)

BTW, the tests in `FileUtilTest.java` use `create()` method, which is totally not recommended in the API guide. So when migrating it to JUnit 5, I name a folder manually to imitate the original tests. And you can see this in the new version of `FileUtilTest.java`. If I do something wrong, tell me and I'll do my best to fix them soon.
#4260 Comment 4:
The failing architecture test is one thing I already experienced a  while ago. It's because it checks for public class.  I was so free to create a  simple patch which fixes this.
simply remove the .txt extension after download and execute 
` git am < 0001-fix-architecture-test-by-removing-check-for-public.patch`

[0001-fix-architecture-test-by-removing-check-for-public.patch.txt](https://github.com/JabRef/jabref/files/2283533/0001-fix-architecture-test-by-removing-check-for-public.patch.txt)

#4260 Comment 5:
The files are in `src\test\resources\org\jabref\logic\exporter` but for some reason the tests don't find them (even on travis) and thus fail. 
#4260 Comment 6:
@tobiasdiez Thanks for the previous comment! I've got a little bit about the "cannot find test files" problem. And I've fixed them in 2 commits. The first uses the origin JUnit 4, the second uses JUnit 5.
But some tests in `ModsExportFormatTestFiles.java` and `MSBibExportFormatTestFiles.java` failed. They failed both in the origin JUnit 4 and the version I write JUnit 5. Here is an example for `MSBibExportFormatTestFiles.java` .
![image](https://user-images.githubusercontent.com/25541992/44089397-320a7a34-9ff9-11e8-8002-8034da799d37.png)
![image](https://user-images.githubusercontent.com/25541992/44089412-46064ae0-9ff9-11e8-8e95-43068246a88f.png)

So is that OK just for the migrate task? Is there something else I can do to improve that?

And also a big thank for @Siedlerchr 's patch. ;)

----------------------------------------------------------

Hmmm, looks like I still got the wrong path...
#4260 Comment 7:
I remember that we had problems with this before, that some resources were not int he right folder. I will take a look at that.
#4260 Comment 8:
That now some of the exporter tests fail, were my fear. This probably needs further investigations and fixes for the exporter; thus it goes beyond the current PR. Thus, I propose to mark the tests as ignored/disabled for now and we will come back later to fix them. 
#4260 Comment 9:
I am just investigating this and I think I found the issue with the paths
#4260 Comment 10:
It's a classpath issue, for exmaple:
```
        Path path = Paths.get(MSBibExportFormatTestFiles.class.getResource("").toURI());
 => Returns E:\workspace\JabRef\jabref\bin\main\org\jabref\logic\exporter
``` 
although it should be bin/test
#4260 Comment 11:
Okay, I found the issue with the paths. I really wondered if it ever worked... But well, now it does. The key is to point to one existing resource. The rest can be found dynamically. 

And this leads us actually to some failing tests. But I would ignore that for the moment. That is a difference. 

@Metatronwings  You can use this patch as a start for all the related importer/exporter tests.

[0001-fix-resolving-of-paths-in-msbibexporterpath.patch.txt](https://github.com/JabRef/jabref/files/2287509/0001-fix-resolving-of-paths-in-msbibexporterpath.patch.txt)

#4260 Comment 12:
I'm very glad to see this issue will be resolved by us soon. Only a few more small questions: 

**1. Some tests have not been migrated yet.**
The `DBMSSynchronizerTest.java` and `SynchronizationTestSimulator.java` have not been migrated yet as there is no good way to handle chaos code after migration. (See example in `DBMSProcessorTest.java`)
Do I need to migrate them?
The `MainArchitectureTestsWithArchUnit.java` have not, too. As there is not yet a release of the new archunit.


**2. Since I didn't migrate them, how should I write the** `CHANGELOG.md` **?**

And thanks for all of you! 👍
#4260 Comment 13:
@Metatronwings  It's okay, we will sure find a way for them in the long run. Not that important.
You don't need to add a changelog entry, as this is only a code-quality issue which will not have any impact on the normal JabRef user. 

We hope you enjoyed it and if you want you can also further contribute. Looking to see more from you ;)
#4260 Comment 14:
I just converted the two other classes with the legacy file methods to use the nio stuff.
[0001-include-main-java-in-resources-as-well.patch.txt](https://github.com/JabRef/jabref/files/2290800/0001-include-main-java-in-resources-as-well.patch.txt)


#4260 Comment 15:
Sorry, but I must do that tomorrow morning because it's 12:00p.m. in my timezone. Thanks for the patch! 
--------------------------------------------------------------
--------------------------------------------------------------
#4258 Comment 1:
First of all thanks for your contribution! 👍  I just took a quick look at the code and it seems you're on a good way.
It would be really nice, if you convert the Temporary Folder Rule from junit4 to junit5 as well.
@tobiasdiez already implemented a sample conversion in a test:
https://github.com/JabRef/jabref/commit/3c6bbd2fc599ad4d24be4bdd62993cd5df4862e1

And in addition, it would ne also nice if you could migrate the reaming Parametrized tests (The old ones rely on the RunWith).  Examples for the parametrized test can be found in the exporters I think

I think we can get rid of the swing gui tests as they are merely obsolete.
#4258 Comment 2:
Now that another PR (#4260) was opened witch converts the tests from Junit 4 to 5, I would propose the following:
- You make this PR compile (i.e fix all the failing tests) in a minimal intrusive way (i.e. no further conversion of other tests)
- We merge this PR and then afterwards #4260 
- Everything that is still Junit 4 at this stage, can be converted in further PRs.
#4258 Comment 3:
Obsolete due to #4260
--------------------------------------------------------------
#4255 Comment 1:
Thanks for your contribution. The gradlew check often fails locally due to some platform specific encoding issues in the terminal. You don't reed to run it as it just takes time to run all the test.  We use Travis CI (Continous Integration) for testing.  As long as the Travis CI test does not show any errors, it's good!)
In case Travis fails just click on it and you can see where it exactly failed.
--------------------------------------------------------------
#4253 Comment 1:
Below are what we have done to the dialog Options->Preference. The left is the original.

![fc614eb383bd210d1852503555065eb](https://user-images.githubusercontent.com/36810099/43836844-3cedcc80-9b49-11e8-8926-30b00c68573c.png)
![c75201e95ecb9927765952a9bcc653e](https://user-images.githubusercontent.com/36810099/43836847-3ee3745e-9b49-11e8-8ced-c3f84a055206.png)
![cae239f92de3b1c952596cbf1a7bdce](https://user-images.githubusercontent.com/36810099/43836849-40d9978e-9b49-11e8-9e96-b2ec91849d65.png)
![02c337e56200c1496d4477377dedd76](https://user-images.githubusercontent.com/36810099/43836855-43e0cd44-9b49-11e8-954e-1f6d28e406f4.png)
![3c1f226f65035bda9d3482c106b2393](https://user-images.githubusercontent.com/36810099/43836858-456278ac-9b49-11e8-98d7-d70711f5ad22.png)
![f34b59245e53e45fda0eb1f36131d75](https://user-images.githubusercontent.com/36810099/43836861-47006ec6-9b49-11e8-9e7b-a163e4d79e82.png)

#4253 Comment 2:
I think it would be easier to rebase your changes in the branch on the current (upstream, the JabRef project master) master branch, so that would hopefully avoid that conflitcts.
https://git-scm.com/book/de/v2/Git-Branching-Rebasing


#4253 Comment 3:
Thanks for the advice, I am going  to fix it. @Siedlerchr  
#4253 Comment 4:
Are you using intellij or Eclipse? Many diffs see only related to the code style.  You should better import the correct code style.
https://github.com/JabRef/jabref/tree/master/config
#4253 Comment 5:
Thanks for the advice. I have imported the correct  code style, but I always forgot to check the code style after I made some changes @Siedlerchr 
#4253 Comment 6:
@1160300311  Regarding the code style: There are keybord shortcuts in Intellij /Eclipse for code formatting and + organizing imports. So before commit just hit the shortcut and no more build errors due to code style.
https://stackoverflow.com/a/17880058
In Eclipse it's ctrl + shift + f and ctrl + shift +o (the latter one for organiziung imports)
#4253 Comment 7:
Thanks for the advice. I still have a problem: The Travis CI build failed due to some test failures, but it goes ok when I run the test on my computer.  @Siedlerchr 
#4253 Comment 8:
It looks good now on Travis. It can sometimes happen that some tests relying on external data sources/websites fail, because they are executed too often and or are related to tempoary outages.
If it's not related to your changes it seems to work.

PS: Now you've screwed up the changelog format again, I think...
#4253 Comment 9:
Is BibtexKeyPatternPanel.java only used for generating a swing panel that used in the Preferences Dialog ? I am afraid other dialogs will go wrong if I removed the Swing controls. 
In addition, there are still some Swing controls in ExternalTab.java and PreviewPrefsTab.java, because there are some Swing controls I don't know how to convert.  @Siedlerchr  
#4253 Comment 10:
@1160300311 you can easily find this out by selecting the class name and by showing the Call Hierarchy of the class/constructor. That will allow you to find out to find where the class /method is actually used.

Before I forget, it would be nice if you could change the method  to Double.parseDouble instead of integer.parseInt in `org.jabref.gui.preftabs.TableColumnsTab.setValues(TableColumnsTab.java:415) `
Because when I start an older JabRef version and then the latest dev version,I will get an exception as the column sizes are not integers. So it would be nice if you could include that fix


In the case of the BibtexKeyPatternPanel it is used in two positions, in the Preferences and it's used in a dialog (Options -> BibTexKeyPattern).
If you convert the panel to a javafx Node in the method, you can simplify the dialog by doing sth like this:

```
 DialogService ds = new FXDialogService();
     DialogPane pane = new DialogPane();
                    pane.setContent(bibtexPane) //The converted javafx pane;
       ds.showCustomDialogAndWait(title, pane, buttonTypes)
```
There is an example for this somewhere in the PreviewPrefsTab.

Your second questoin: The main problem in PreviewPrefsTab seems to be the SwingWorker. The SwingWorker can be easily converted to our BackgroundTask: 

```
 BackgroundTask
                    .wrap(() ->  taskto execute ))
                    .onRunning(() -> do sth )
                    .onFinished(() ->  do sth))
                    .onSuccess( result-> {
                    do sth with result
                    })
                    .onFailure(dialogService::showErrorDialogAndWait)
                    .executeWith(taskExecutor);
```

And example for the method can be found in IdentifierEditorViewModel.
#4253 Comment 11:
Another wish I really would like to see, if you can port the Show Preferences to JavaFX as well and add a search field: #1019
But one step after the other ;)
#4253 Comment 12:
Thanks for the advice,  it may take me a few days to learn how to convert the SwingWorker to the BackgroundTask :(. I will change that ASAP after I finish this learning journey :). @Siedlerchr 
#4253 Comment 13:
No hassle! Take your time. In short the workers are there to execute (long running) tasks in the background thread so that the gui does not freeze /block. 

Feel free to ask if you need any help. 
#4253 Comment 14:
I found and fixed a bug regarding the storing of settings when you change the language.
I created a patch. You need to download the patch, and remove the .txt extension (github doesnt allow .patch), then apply the patch with 
`git am -3 < 0001-fix-storing-of-language-settings-bibtex.patch`

[0001-fix-storing-of-language-settings-bibtex.patch.txt](https://github.com/JabRef/jabref/files/2280871/0001-fix-storing-of-language-settings-bibtex.patch.txt)

#4253 Comment 15:
Thanks for the help. :) Done it @Siedlerchr 
#4253 Comment 16:
I have solved fix the NullPointerException in setting for External Application. Then I run the JabRefMain.java, it goes ok sometimes, like this  
![1cdff6dfb27e671db2cd6d05e045900](https://user-images.githubusercontent.com/36810099/44027298-86b4160c-9f28-11e8-82ad-3cecae63c43a.png)
but mostly, the program doesn't respond.
![d91d7626f487c9559c934a9357d3e47](https://user-images.githubusercontent.com/36810099/44027318-9d11a1a8-9f28-11e8-8d10-799edfad46b1.png)
Is that OK or I have messed sth up ? @Siedlerchr 
#4253 Comment 17:
It looks right so far. The Settings Dialog is still an old Swing dialog `PushToApplicationSettingsDialog` together with `PushToApplicationSettings`
 which will be displayed as modal and blocking. You have to first close the swing dialog to make the rest of the application work again. If the dialog is not visible, use Alt+Tab to switch to the window),

For the moment I would let this dialog stay as is and concentrate to convert the rest of the Panes as it is a bit out of scope of this PR:
I added this to the list in #3861 
You can embed Swing in JavaFX by using a [SwingNode](https://docs.oracle.com/javase/8/javafx/api/javafx/embed/swing/SwingNode.html) 
#4253 Comment 18:
I am sorry for forgetting this， done it. :) @Siedlerchr 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4249 Comment 1:
We convert part of the swing dialog to javafx. The dialog we are trying to change is Options->Preferences. 
#4249 Comment 2:
Oh wow, with the preferences you actually took the most complex of all dialogs ;-). From what I can see, you already made good progress. Nice! 
I would suggest you try to merge with the current master so that some of the code changes in master are no longer shown as differences and then I'll have a look and give you feedback.
#4249 Comment 3:
In addition to what Tobias says, in future please create a new branch for a feature or issue to work on and to commit to. This make it easier for you and us to review the changes. 
#4249 Comment 4:
What's the relation of this PR with https://github.com/JabRef/jabref/pull/4253? 
#4249 Comment 5:
They are the same. I just created a new branch, and pushed my changes to the branch. I will close this PR at once. @tobiasdiez 
--------------------------------------------------------------
#4248 Comment 1:
It is ok now?
--------------------------------------------------------------
#4246 Comment 1:
@tobiasdiez Thanks for your review! I will fix them soon.
#4246 Comment 2:
Hi, I reverted the change for `RemoveHyphenatedNewlinesFormatter` and `RemoveNewlinesFormatter`. I have also fixed the tooltip for marking summary.

**Before**
<img src="https://raw.githubusercontent.com/upupming/paste/master/img/20180803091540.png"/>
**After**
<img src="https://raw.githubusercontent.com/upupming/paste/master/img/20180803092209.png"/>

Now I'm going to add some unit tests!
#4246 Comment 3:
All done~ 😃 
#4246 Comment 4:
Thanks for the quick follow-up! Looking forward to your next PR ;)
--------------------------------------------------------------
#4245 Comment 1:
Lgtm 
#4245 Comment 2:
I am merging this now
--------------------------------------------------------------
#4240 Comment 1:
Thanks for your contribution
I just resolved the conflict in the changelog, so that the build runs on Travis. Check the Continous Interation Travis output (just click on it, in case it fails) 
#4240 Comment 2:
Thanks for the feedback. Yes, I agree with all of the fixes. Sorry about the two commits back to back. The first one stated it did not go through on my end as I needed to update HEAD. Also, I am not sure why I am failing both tests. the CI test seems to be related to GUI errors while the Codacy fail is from the extra space before importing items from slf4j.
#4240 Comment 3:
The Travis CI log raises a check style issue, so just some code formatting and the wrong import order. Although it might seem annoying, but it serves the purpose to have consistent code style and to avoid unnecessary conflicts between files 

 Both for intellij and Eclipse we provide the correct code format layout. In Eclipse hit ctrl + f to format and ctrl + o for the import order fix 
#4240 Comment 4:
No I agree. The project should be uniform in import and code style as it would look a mess without. Pushed the changes. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4227 Comment 1:
I am sorry for the bad naming fields, and Thank you for your advice, I will fix them later.
#4227 Comment 2:
@marisuki  you don't have to be sorry or take it personally ;) We really much appreciate your contribution
The reviews are meant to improve and maintain a clean code base, although they sometimes may seem a bit nitpicking.  Variable naming is one important part, ideally variables should be self-documenting, e.g. they should be meaningful. Here are some tips. https://dzone.com/articles/best-practices-variable-and
#4227 Comment 3:
Thank you for all the advice above :), and I changed the dialog based on GridPane also the "ViewModel", and modified the miss using of field names, finally deleted the ReplaceStringDialog.java, which is about the old style logic: Swing. I hope it would be better. :)
#4227 Comment 4:
Thank you for your comment !  :) @tobiasdiez , this time I changed the initial part of "view" and add the property bindings to make it a little more MVVM pattern alike ;-). I hope it would be better. 
#4227 Comment 5:
From my point of view this looks good. Just some minor code improvements. Let's see what @tobiasdiez   thinks about it
#4227 Comment 6:
I don't know why, but apparently you still have a conflict in the ReplaceStringDialog 
#4227 Comment 7:
Yeah, I tried every means to avoid the conflict ;-), but it does not work (caused by delete a file) . Does this conflict be inevitable ;-)?  Or, do you have any idea to solve it? Thank you.
#4227 Comment 8:
Okay, I tried around and found a solution:
just do `git rm src/main/java/org/jabref/gui/ReplaceStringDialog.java `
#4227 Comment 9:
Something like the following should work:
````bash
git pull upstream master (replace "upstream" by whatever you named the JabRef rep)
> git warns about merge conflict
git mergetool
> accept deletion of file
git commit
git push
````
#4227 Comment 10:
Thank you, I will give it a try! :)
#4227 Comment 11:
I think it works! :) this time I use "git pull git@github.com:jabref/jabref.git master" to merge and then remove and push again, there becomes no conflicts :). Thank you! But there shows a failure on build process, need I do something?  (Since I did not change the related files.)
#4227 Comment 12:
The Travis CI failed, because of the localiation test. If you click on the Traivs Details and then expand the railed build jpb, you will see the reason.  In this case you need to add the missing/remove the obsolete ones from the file. But first you have to add a % sign in front of every translatable label text
#4227 Comment 13:
Finally! I updated the properties in resources and make the "text" value linked with the file: Jabref_en.properties, also, I deleted the unused key-values (may generated from the previous replace string dialog) to make no obsolete item in the file. And thank you again for your help! :) @Siedlerchr @tobiasdiez 
#4227 Comment 14:
Thank you very much for your contribution! I think you just forgot one little string, if you add this again, then we can finally merge!
#4227 Comment 15:
As the faling test on Travis CI is not related to your changes I am going to merge it now.
#4227 Comment 16:
Thank you! :-)
#4227 Comment 17:
We have to thank for your contribution! 👍  That's a good start. I hope you are interested in contributing some more ;)
--------------------------------------------------------------
#4226 Comment 1:
If I remeber correctly this issue was now resolved with the other PR  https://github.com/JabRef/jabref/pull/4248
--------------------------------------------------------------
--------------------------------------------------------------
#4216 Comment 1:
I fixed all remainig issues. Error response 400 or 404 are logged in the error log.
#4216 Comment 2:
Ebook.de and Google Scholar work again. Chimbori fetcher is broken, but author is noticed and responded that it will be fixed soon.
--------------------------------------------------------------
#4213 Comment 1:
Mergin this but leaving the devcall tag. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4203 Comment 1:
I was so free to give your PR a try to see if the import inspection dialog is working again and made the search start on hitting enter.

#4203 Comment 2:
I am going to merge this now as it finally makes the web search functioning again!
--------------------------------------------------------------
#4200 Comment 1:
If you fix the checkstyle issue it's good
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4179 Comment 1:
Agreed! However, I'll not have so much time in the next 3 weeks, I'll merge now (to have a somewhat working version again).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4157 Comment 1:
Nice work! @LinusDietz will review this and merge soon!
#4157 Comment 2:
Fix the conflict and it's ready to go!
#4157 Comment 3:
Sorry for the merge conflicts and thanks again for your work!
#4157 Comment 4:
Nice work @florian-beetz 👍 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4144 Comment 1:
I always liked abstracts. Is there no other way to get them?
#4144 Comment 2:
No sadly the only way to get the abstracts is to visit the page of every citation and extract it from the HTML. Maybe contact ACM and ask them to include the abstract in the bibtex export?
--------------------------------------------------------------
--------------------------------------------------------------
#4141 Comment 1:
Why do you have a dependeny to gui in the logic?

>     org.opentest4j.AssertionFailedError: The following classes are not allowed to depend on org.jabref.gui ==> expected: <[]> but was: <[src/main/java/org/jabref/logic/importer/WebFetchers.java]>
#4141 Comment 2:
Forgot to move the fetcher to logic, good point. 
--------------------------------------------------------------
#4140 Comment 1:
You have some obsolete language keys now, which results in failing test. apart from that lgtm
--------------------------------------------------------------
#4139 Comment 1:
Should we really limit all fetchers to 20 results, even if they support more?
#4139 Comment 2:
same architecture violation as in your Springer fetcher
#4139 Comment 3:
We have to specify some number, the default used by the API is 10. I've now increased the limit to 30. Do you think that suffices?
#4139 Comment 4:
I mean this question is not about if it suffices but why we enforce limits if we could use pagination if needed. But I don't have a strong opinion here until one of our customers opens an issue.
#4139 Comment 5:
ok, I completely agree with this: we should support pagination at some point. However, it was not easy to integrate it in the current infrastructure and thus I left it out for the moment...
--------------------------------------------------------------
#4138 Comment 1:
Can't we just change the underlying GUI component from TextArea to TextField?
Also please use plain Java for making fields immutable or final,  not com.google.common.collect.ImmutableSet if possible.
#4138 Comment 2:
@stefan-kolb how about now?

I've added EditorTextField class, similar to EditorTextArea, and extracted addToContextMenu to interface (ContextMenuAddable). Also i had to change parameter type TextArea to TextInputControl in few places in order to use classes in generic way.
#4138 Comment 3:
That looks good so far for me! Haven't tested it yet, but codewise it looks good, (Although the final in front of method parameter is suerpfllous
#4138 Comment 4:
I use finals to avoid stupid bugs, like reassigning variable. With them my IDE automatically underlines such stuff. Another thing is that I've decided to make code more readable, so I've put new lines between SimpleEditor constructor parameters (because there was one long line), and now Codacy yells about that. Should I extract those parameters to another class, like SimpleEditorParameters or sth?
#4138 Comment 5:
Ping 😄 
--------------------------------------------------------------
--------------------------------------------------------------
#4136 Comment 1:
@LinusDietz with exception I mean that junit-pioneer does not get rejected, because it's only available as snapshot. Same applies to javax:inject

if you run ./gradlew dU it works correclty
#4136 Comment 2:
As this works as expected I merge this now,
--------------------------------------------------------------
--------------------------------------------------------------
#4133 Comment 1:
Merged too early. https://travis-ci.org/JabRef/jabref/jobs/393346860 
I think we would need your switch for all libraries except junit-pioneer. Maybe one can combine the rules?  e.g.  snapshot && not in (junit pioneer, javax inject?)

 Failed to determine the latest version for the following dependencies (use --info for details):
 - javax.inject:javax.inject
 - org.junit-pioneer:junit-pioneer
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4127 Comment 1:
If you fix the failing tests, it's good!
--------------------------------------------------------------
--------------------------------------------------------------
#4124 Comment 1:
Code loooks good. 👍 
PS: If you just enter # followed by the issue number here on github, the issue will be auto-linked and if you add sth like "Closes" or "Fixes" + # + issue number it will be auto closed when the PR is merged
--------------------------------------------------------------
#4123 Comment 1:
Yep that was my thought, too
--------------------------------------------------------------
#4121 Comment 1:
Thank you very much for your contribution! 👍  If it works without the BasePanel hack, it looks good to me. Our internal standards require a second dev to review your code until it will be merged. 
--------------------------------------------------------------
#4116 Comment 1:
Thanks for the feedback. Your solution was my initial idea but then went on to modify the `JournalRepository` because other (potential) callers of the repository also profit from the change. I wouldn't consider "Bioinformatics" abbreviated when it's also the full journal name (which is of course a question of definition).

In the end it's almost a question of taste and I'm also fine changing it to your solution (if you think the additional work is worth it ;-) ).
#4116 Comment 2:
That was exactly my thought too (that Bioinformatics is no abbreviation of bioinformatics), but then we should rather cleanup the list than the code?! But then I thought, ok they want to have this journal in there...
--------------------------------------------------------------
#4112 Comment 1:
Thank you very much for your contribution! 
--------------------------------------------------------------
#4111 Comment 1:
Yes, I also noted that this is enough to fix the shutdown issue. I nonetheless think that getting rid of most of the AWT stuff is desirable. It's good that you highlight the essential part of #4109 that fixes the shutdown problem but I don't think we need two PR's for this (especially since this leads to merge problems...).
#4111 Comment 2:
I am going to merge this now.
--------------------------------------------------------------
--------------------------------------------------------------
#4109 Comment 1:
I created a branch from master, cherry picked 39e30cc, and deleted all system.exit() calls. 
It works fine for me. For reference, I have created a PR to show the diff:  #4111
#4109 Comment 2:
Your PR caused this error now
```
 java.lang.ExceptionInInitializerError
        at org.jabref.gui.fieldeditors.LinkedFileViewModelTest.setUp(LinkedFileViewModelTest.java:55)
        Caused by:
        java.lang.IllegalStateException: This operation is permitted on the event thread only; currentThread = Test worker
            at com.sun.glass.ui.Application.checkEventThread(Application.java:443)
            at com.sun.glass.ui.ClipboardAssistance.<init>(ClipboardAssistance.java:40)
            at com.sun.javafx.tk.quantum.QuantumToolkit.getSystemClipboard(QuantumToolkit.java:1200)
            at javafx.scene.input.Clipboard.getSystemClipboardImpl(Clipboard.java:413)
            at javafx.scene.input.Clipboard.getSystemClipboard(Clipboard.java:178)
            at org.jabref.gui.ClipBoardManager.<init>(ClipBoardManager.java:41)
            at org.jabref.Globals.<clinit>(Globals.java:57)
            ... 1 more


```
https://travis-ci.org/JabRef/jabref/jobs/392180785
#4109 Comment 3:
And removing setting the font size without providing an alternative was not the good idea! 
#4109 Comment 4:
Just revert If necessary.

Christoph <notifications@github.com> schrieb am Do., 14. Juni 2018, 12:28:

> And removing setting the font size without providing an alternative was
> not the good idea!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/4109#issuecomment-397248131>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ACCtQ3fuo3W04385wQK074uTX3G36Wgeks5t8jqwgaJpZM4UcxAw>
> .
>

#4109 Comment 5:
Sorry, I was so used to failing tests against the maintable-branch that I ignored the red travis icon. Tests are now fixed in master.
--------------------------------------------------------------
--------------------------------------------------------------
#4106 Comment 1:
Done!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4100 Comment 1:
Added a test case
#4100 Comment 2:
I would vote for merging this, I refactored the tests and the migrations so that they no longer call  Globals.prefs. _ More mocking is not really possible.  
--------------------------------------------------------------
#4095 Comment 1:
Let me check if the fix is already included in _171
#4095 Comment 2:
https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8195830

Unfortunately this is only fixed in 8u172 b01.
Can't see v171 there tho.

Results:
=========
8u151: OK
8u152: OK
8u161: FAIL
8u162: FAIL
8u172 b03: OK
9.0.4: OK
10 ea b39: OK

Unfortunately, I cannot find any information about v171.
We porbably need to install and check it manually.
#4095 Comment 3:
For provenance: This downgrades the minimum Java version introduced at https://github.com/JabRef/jabref/pull/4058.
#4095 Comment 4:
Have you looked at the oracle changelog page for 171? Where you download the jdk there is a changelog linked. It could be that 171 only includes security fixes 
#4095 Comment 5:
For a quick try out: `choco install jre8`. This installs Java 8 171. See <https://chocolatey.org/packages/jre8>.

Deep link to the Changelog:

- 171: http://www.oracle.com/technetwork/java/javase/8u171-relnotes-4308888.html
- 172: http://www.oracle.com/technetwork/java/javase/8u172-relnotes-4308893.html

The Changelog of 172 shows:

> The changes made under JDK-8033530 introduced an inconsistency between the implementation for and the documentation of the following methods:

However, JDK-8033530 is not listed in the Changelog for 171. I would assume nevertheless that this issue is fixed in 171. See https://github.com/JabRef/jabref/pull/4058#issuecomment-394593243.

#4095 Comment 6:
Ok, I have also tried to reproduce the bug with v171 and the code from https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8195830. Cannot see any spikes right now. We cannot be 100% sure as it is not in the changelog, but maybe it is worth risking it until v172 is rolled out everywhere. i guess we should still force v172 later on.
#4095 Comment 7:
Backported to v4.x at https://github.com/JabRef/jabref/commit/3f73e9ecc05842ef1b2f2a31b51e8c168d7dfcc5.
--------------------------------------------------------------
#4094 Comment 1:
Do we need to configure or resync sth at crowdin?
#4094 Comment 2:
I paused the synchronization. At a resume, crowdin should obey the new setting. The latest crowdin PR https://github.com/JabRef/jabref/pull/4090 looks good from the side of `Menu_*.properties`.
--------------------------------------------------------------
#4091 Comment 1:
CircleCI runs perfectly: https://circleci.com/gh/JabRef/jabref/tree/fix%2Fgradle-dependencies-on-circleci
#4091 Comment 2:
Why do we need this? Is it faster than building?
#4091 Comment 3:
Yes. Second and all consecutive runs: no additional dependencies are fetched.
#4091 Comment 4:
I just merge. It will also help to update to CircleCI 2.0, because of the [1.0 sunset end of August](https://circleci.com/blog/sunsetting-1-0/)
--------------------------------------------------------------
#4090 Comment 1:
@tobiasdiez Do the deleted/added strings sound reasonable to you? I assume, we have to replace the `&` by `_`, don't we? (Refs https://stackoverflow.com/a/24500058/873282)
#4090 Comment 2:
Yes, the changes look reasonable to me. JavaFX does not use `&` or `_` to signal the hotkey and thus there shouldn't be any longer text that use them for this purpose. The translations still run through our own parsing engine, so I'm not sure how to properly encode `&`.
#4090 Comment 3:
According to https://stackoverflow.com/a/24500058/873282, the `_` can be used to signal the letter used for the <kbd>Alt</kbd> key, can't it?

![grafik](https://user-images.githubusercontent.com/1366654/40920343-89cd050e-680c-11e8-8a0c-f242ebdfa1cf.png)

--------------------------------------------------------------
#4085 Comment 1:
Please make sure that you manually execute the fetcher tests on your system to ensure that they are working. As the CI server is blocked,, some fetcher tests are disabled
#4085 Comment 2:
I have not run any tests, I even don't have any tools to build java apps installed. I only been opening the sites in a browser, and if that worked, I had added `s`.
#4085 Comment 3:
I really recommend setting up the workspace https://github.com/JabRef/jabref/wiki/Guidelines-for-setting-up-a-local-workspace
#4085 Comment 4:
In fact I have no plans being seriously involved into developing it, since it is written in Java, and I dislike Java and JVM. I may (I don't have time for that) either drop some python code (see https://github.com/open-source-ideas/open-source-ideas/issues/46 for my plans and the features I need, I guess it is partly implemented in JabRef, but there are many features it lacks, like reconstructing bookmarks tree from text (doing this requires classification the pieces of text into labels for their structure role, like "h1 header", "h2 header", I guess it can be solved by clustering fonts and then sorting them by size, and then extracting some features and [xgboosting](https://github.com/dmlc/xgboost))) in future, letting someone else to translate it into Java.
#4085 Comment 5:
Sorry to hear that you don't like Java, it's actually pretty neat once you are familiar with it. Don't let you fool by the guys who tell you it's not fast, since its beginnings Java has improved very well.

Have you tried the XMP importer/exporter for metadata and for pdfs, we also support annotations, e.g. comments. And we also want to soon extend the search to cover fulltext in pdfs.
For working with PDFs we use  pdfbox https://pdfbox.apache.org/


#4085 Comment 6:
>Sorry to hear that you don't like Java, it's actually pretty neat once you are familiar with it. Don't let you fool by the guys who tell you it's not fast, since its beginnings Java has improved very well.

Thank you for the info. But not now, for now I'm pretty busy.

>Have you tried the XMP importer/exporter for metadata and for pdfs

I have.

>And we also want to soon extend the search to cover fulltext in pdfs.

I guess there are more suitable projects for fulltext search.

For integration java (non-java brings some problems for now) modules into python code I can use jpype.
#4085 Comment 7:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4083 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4082 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4081 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4080 Comment 1:
I merged regardless of the test failing. I fixed it at 9b2fedc238d1ba64875c96cf8f59645f36a65635.
#4080 Comment 2:
Thank you. Could you make a release with this all?
--------------------------------------------------------------
#4079 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4077 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4076 Comment 1:
I didn't know that we have a bibsonomy scraper. Refs #2157.

Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4075 Comment 1:
Thank you for your pull requests. I know that it is hard work in addition to adding an `s` at one or two places, but could you add an entry to `CHANGELOG.md`, too?.

I see that you used GitHub's feature instead of using an IDE. You could use Eclipse Che (https://www.eclipse.org/che/) in your browser to bundle the updates of multiple files into one pull reuqest.
#4075 Comment 2:
>I know that it is hard work in addition to adding an s at one or two places, but could you add an entry to CHANGELOG.md, too?.

Please, do that yourself.
#4075 Comment 3:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4074 Comment 1:
Should also be backported to v4.x
#4074 Comment 2:
@stefan-kolb I certainly can test something, but what exactly should I look out for? With JabRef open, should my Macbook use the integrated graphics-card or the fast one? Or should I only test if JabRef works?
#4074 Comment 3:
It should use the integrated card.
#4074 Comment 4:
FYI: I just upgraded from Jabref 4.2 to 4.3.1. I had to correct the plist again to have jabref use the integrated graphics card, see [https://github.com/JabRef/jabref/issues/4070](https://github.com/JabRef/jabref/issues/4070). So I guess that we are just waiting for your corrections to be merged.
#4074 Comment 5:
It seems to work. My *Activity Monitor* says that JabRef does not require high-performance GPU. Is there anything else I should look out for?
#4074 Comment 6:
I guess that's it. @LinusDietz 
#4074 Comment 7:
I guess that is the correct indicator. I originally used gfxCardStatus to verify this, but I now also compared both cases (old and new) with activity monitor, and it is consistent.



> On 7. Jun 2018, at 15:16, Patrick Scheibe <notifications@github.com> wrote:
> 
> It seems to work. My Activity Monitor says that JabRef does not require high-performance GPU. Is there anything else I should look out for?
> 
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub <https://github.com/JabRef/jabref/pull/4074#issuecomment-395416335>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AFhuZMssUCntYIDOn1YyuabJ7aca1-1Uks5t6SetgaJpZM4UXrHK>.
> 


--------------------------------------------------------------
#4073 Comment 1:
Fetcher tests run through, so I merge. Thank you for the PR.
--------------------------------------------------------------
#4071 Comment 1:
Thank you very much for your contribution!
--------------------------------------------------------------
--------------------------------------------------------------
#4068 Comment 1:
Discussed this in the devcall. Consensus was the we don't like this quickfix, but would recommend to look at the underlying reason why the threads in questions don't terminate. 
#4068 Comment 2:
Can you please try if cherry-picking https://github.com/JabRef/jabref/pull/4109/commits/39e30cca85b79a4a1aa23a4742d06650203834a1 in 4.x solves the issue for you. The telemetry library had a bug that prevented some threads to stop https://github.com/Microsoft/ApplicationInsights-Java/issues/662.

#4068 Comment 3:
@tobiasdiez  Works fine! All threads are exited. I will directly push that to the 4.x branch so that we have it as back port. I will test if this is suffiient in master, too. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4061 Comment 1:
Merge this now for the sake of moving forward...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4058 Comment 1:
@JabRef/developers I worked a little bit with Jabref 4.2 and the new JDK and I feel like also the problems with duplicated entries in the search box and freezes are less frequent now.
Maybe the constant load provokes these issues even more.
Therefore, I vote to release a new JR version where we force the users to upgrade to the newest Java JRE/JDK!

Also refs #3989.
Fixes #3943.
#4058 Comment 2:
Let me finish #4015 today and we can go for a release. 
#4058 Comment 3:
As this really improves the situation (at least for me), I think we should definitly include this in our release.
#4058 Comment 4:
@stefan-kolb Which tool did you use for the CPU monitoring?

I tried `java version "1.8.0_171"` and it doesn't seem to cause high CPU load.

Focused entry editor:

![grafik](https://user-images.githubusercontent.com/1366654/40957997-e80feefc-6897-11e8-9c61-13a5e5543d56.png)

Unfocused entry editor:

![grafik](https://user-images.githubusercontent.com/1366654/40958029-0ae5cbfe-6898-11e8-8a8f-d45c041bc6da.png)


#4058 Comment 5:
I used the visualvm. It is actually not caused by the entry editor but by switching between programs.
Let me check v1.8.0_171.
--------------------------------------------------------------
--------------------------------------------------------------
#4056 Comment 1:
I would suggest you directly implement this on the maintable beta branch. Otherwise we will get the hell of merge conflicts and we would need to rework the AbstractWorker again.
Have a look at the functionality of  BackgroundTask.wrap(()


#4056 Comment 2:
Is there any possibility to extract and reuse actions in JavaFX, except from the Action in controlsfx?
#4056 Comment 3:
Sure,  we do this all the time. In the maintable-beta branch we use the `OpenXYZAction extends SimpleCommand ` class for the things in `org.gui.jabref.actions `
#4056 Comment 4:
This is also functionality from a beta framework....
#4056 Comment 5:
> We could use the FXDialogService but there is an additional checkbox for "Do not ask this question again" in the old dialog.

The DialogService has an option for this, where you can add a consumer? which then should store the property
#4056 Comment 6:
I've now extracted the code of the cite key generation of a single entry and extended it by a warning dialog that is shown if a previous key is about to be overwritten. 

With these changes, the buttons in the entry editor show now a button text instead of a single icon. Fixing this requires https://bitbucket.org/controlsfx/controlsfx/pull-requests/706 to be merged. Thus, in the current state this PR is not mergable but can nonetheless be reviewed.
#4056 Comment 7:
Thanks for your efforts! 
> With these changes, the buttons in the entry editor show now a button text instead of a single icon.

What does this mean? Why text?

#4056 Comment 8:
Instead of the icon, the text "Generate key" appears. This is due to a limitation of the controlsfx library that we use (hopefully, my PR there gets merged in the next few days).
https://bitbucket.org/controlsfx/controlsfx/pull-requests/706/add-overload-of-configurebutton-accepting/
#4056 Comment 9:
Can we merge this now? Is it released by controlsfx?
#4056 Comment 10:
Yes, my PR is finally integrated into the snapshot build of controlsfx and thus I'll merge it now.
--------------------------------------------------------------
#4054 Comment 1:
@stefan-kolb may I ask you to merge the master now also into the maintable-beta branch. You are more familiar with the changes to the startup code than me.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4047 Comment 1:
TL;DR: I guess we should use the second method. Let's see what the others think.

I guess the second solution is fine, if not, we will find out.
I think we could also extract some methods here for the initialization of the migrations, and then the preferences from the start method and afterwards instantiate the argument processor so the start method gets more clear.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4044 Comment 1:
Why not adding the methods implemented to the interface? 
#4044 Comment 2:
![grafik](https://user-images.githubusercontent.com/1366654/40347129-628a46f4-5d9f-11e8-9e79-82b8b1b2bfb7.png)

#4044 Comment 3:
Why not make `Formatter` an abstract class?
#4044 Comment 4:
If this get merged, please with normal merge. Then the target branch of #4045 has to be changed to `master` and then can be merged correctly. 😇 
#4044 Comment 5:
@stefan-kolb introduced the interface paradigma for formatters in 2015. The interface resides in our model package, whereas the concrete implementations reside in the logic package. In c09e4720, I changed the interface to an abstract class.
--------------------------------------------------------------
#4043 Comment 1:
You can directly use right click option -> Add braces around selected word 
#4043 Comment 2:
What happens to latex encoded titles? .e.g If i have some Unicode latex stuff in there
#4043 Comment 3:
I agree. This PR helps in updating a complete BibTeX database with more than 100 entries. I could go manually through it and tell others to do the same. However, I like automating things. This option offers a functionality requested to me multiple times by different persons. I could also explain the protected terms thing, but I do not want to force people to use JabRef in a certain way if there is an easy other way.
#4043 Comment 4:
In the default configuration, the formatter runs as last. Thus, the protection functionality comes at last. I tried it out:

![grafik](https://user-images.githubusercontent.com/1366654/40308081-502be426-5d05-11e8-90e5-b5307afb69fe.png)

    title = {Än interesting Historüüü}

becomes

    title = {{{{\"{A}}}n interesting Histor{\"{u}}{\"{u}}{\"{u}}}

Without the new formatter:

    title = {{{\"{A}}}n interesing Histor{\"{u}}{\"{u}}{\"{u}}}


#4043 Comment 5:
Okay good! From my point of view good
#4043 Comment 6:
It is [usually recommended](https://tex.stackexchange.com/questions/10772/bibtex-loses-capitals-when-creating-bbl-file) to only "protect" acronyms or proper names and leave the rest to the citation style. In the bibtex world, the citation style decides the general casing of content words. Thus, I'm not sure if we should add a formatter that encourages the non-standard approach. 
#4043 Comment 7:
I do not want to train 90% of the people to do the right thing we believe in. Sometimes, I just want to get a paper finished to the deadline and not spending time educating people in BibTeX. 😇 We could add a warning in the documentation to encourage other behavior.

Other stream of argumentation: None of us found time to work on the ProtectedTermsFormatter to include more words. This PR is a work around. 😇 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4037 Comment 1:
We then should merge this in the postgree fix 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4031 Comment 1:
Database test seems to be green. I will try to test this manually. 
There is still one checkstyle error left 
#4031 Comment 2:
We do not have any test for the remote database feature (refs #3282). There are free postgres hostings (see http://help.jabref.org/en/SQLDatabase#try-it-out) to try it out. It is important that at least two different JabRef instances are connected.
#4031 Comment 3:
@Siedlerchr It would be nice if you could try it out. In the forum it was said that this version does not work since postgre does not show up as an option. As I have absolutely no experience with the database-related code, I highly welcome help on this PR.
#4031 Comment 4:
17:44:13.731 [JavaFX Application Thread] INFO  org.jabref.logic.shared.DBMSConnection - PostgreSQL driver not available.

#4031 Comment 5:
So I managed to get the connection working. However, it's currently unusable due to the same error the importer has: (Just import a new bib file)

The problem is the "addTab" Method which creates a new basePanel and fails as the PreviewPanel is not on FX thread. However, I tried wrapping the call to it in the FXThread, but that did just lead to a complete freeze. I don't know how to solve this

```
18:11:22.467 [AWT-EventQueue-0] ERROR org.jabref.FallbackExceptionHandler - Uncaught exception occurred in Thread[AWT-EventQueue-0,6,main]
java.lang.IllegalStateException: Not on FX application thread; currentThread = AWT-EventQueue-0
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:279) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423) ~[jfxrt.jar:?]
	at javafx.scene.web.WebEngine.checkThread(WebEngine.java:1243) ~[jfxrt.jar:?]
	at javafx.scene.web.WebEngine.<init>(WebEngine.java:879) ~[jfxrt.jar:?]
	at javafx.scene.web.WebEngine.<init>(WebEngine.java:868) ~[jfxrt.jar:?]
	at javafx.scene.web.WebView.<init>(WebView.java:273) ~[jfxrt.jar:?]
	at org.jabref.gui.PreviewPanel.<init>(PreviewPanel.java:83) ~[main/:?]
	at org.jabref.gui.BasePanel.<init>(BasePanel.java:234) ~[main/:?]
	at org.jabref.gui.JabRefFrame.addTab(JabRefFrame.java:1206) ~[main/:?]
	at org.jabref.gui.shared.SharedDatabaseUIManager.openNewSharedDatabaseTab(SharedDatabaseUIManager.java:117) ~[main/:?]
	at org.jabref.gui.shared.ConnectToSharedDatabaseDialog.openSharedDatabase(ConnectToSharedDatabaseDialog.java:145) ~[main/:?]
```
#4031 Comment 6:
I would propose to merge this changes. And I am currently reworking the shared db dialog to  FX, so that the problem with the exception of the import should be solved 
--------------------------------------------------------------
#4030 Comment 1:
As I have tested this and already prepared an update to the help page I am going to merge this now.
--------------------------------------------------------------
--------------------------------------------------------------
#4019 Comment 1:
I merge this now, as this is a one-liner.
--------------------------------------------------------------
#4016 Comment 1:
I now moved trimming down to the concrete fetcher classes and added tests 
--------------------------------------------------------------
#4015 Comment 1:
The core problem is not the gui but that each exporter has a file type and this file type was also added for the custom exporter. These file type used the parse method to find a file type based on the extension. The file type class is used for the file filter chooser. And an exporter is matched on the file type description. 
But as this is an enum, it did not work for custom export as always one of the enum values was used, e.g the default HTML Export. 

The core changes are in the enum which now implemented an interface. 
In fact it's just a rename of the old enum and a simple interface which has the name of the old one

To avoid code duplicates in the anonymous class and the enum I moved them to private static methods. 
#4015 Comment 2:
ok, thanks for the explanation. I thought a bit more about this problem and came to the conclusion that the cleanest solution is probably to split the description from the "file type". If the later is only a list of extensions (xml, bib, txt, ...) and the importer/exporter itself contains the description, then you can easily create a `ExtensionFilter` for an importer/exporter (and don't need to pay special attention to custom exporters). What do you think?
#4015 Comment 3:
This would only work if the custom export follows the standard file types. If I want my exporter to have filetype xyz then this would not be possible.
What I did is to provide a set of standard file types and their descriptions which can be extended to support custom one. The standard file types are also used for the importer.

Another thing which just came to my mind was that we with this approach could also resuse the functionality for the ExternalFileType stuff. Than we could get rid of that completely.
#4015 Comment 4:
ok, good point. Do you want to improve the code around `ExternalFileType` as part of this PR or is this a follow-up?

I would still separate the file extension from the description text. 
#4015 Comment 5:
I would rather do this in a follow up on the maintable directly 
#4015 Comment 6:
@tobiasdiez  I now removed the exporter stuff from the FileTypes. So currently it's only used for the importers. The key problem with the importers is, that we have an "All available import formats" plus all the extensions. In this case I see no way to filter the importer without having a description in the extension format. 
#4015 Comment 7:
A shot in the blue: Instead of 
https://github.com/JabRef/jabref/blob/e32bdc8ef5731d41252eb53a50cefdf58ea2657d/src/main/java/org/jabref/gui/util/FileFilterConverter.java#L26-L29
try
````java
 private static FileChooser.ExtensionFilter convertImporter(Importer importer) { 
     return toExtensionFilter(importer.getDisplayName(), Collections.singletonList(importer.getFileType)); 
}
````
and at the same time change
https://github.com/JabRef/jabref/blob/e32bdc8ef5731d41252eb53a50cefdf58ea2657d/src/main/java/org/jabref/gui/util/FileFilterConverter.java#L39-L41
to
````java
 public static Optional<Importer> getImporter(FileChooser.ExtensionFilter extensionFilter, Collection<Importer> importers) { 
     return importers.stream().filter(importer -> importer.getDisplayName().equals(extensionFilter.getDescription())).findFirst(); 
} 
````

If `getImporter` returns an empty optional, you know that there is no specific importer, i.e. the user selected "any file" or "any import format".
#4015 Comment 8:
@tobiasdiez  I noticed that it was already possible. I just needed to create the Map with Description/Name  and FileType like I did for export. It is now analogous to export. I removed the not needed FileTypes.
However, there are still some import formats left which have more than one extension. However, I think it's not worth changing them, too.  Would make things a lot more complicated. 
We already have a good base for future expansions and for using this in combination with ExternalFileTypes. 
#4015 Comment 9:
If I understand correctly, this should go into `master` before merging https://github.com/JabRef/jabref/pull/3621.
#4015 Comment 10:
Yes definitely. 
#4015 Comment 11:
I've refactored a bit more (it was easier to hijack this PR than describe the refactorings in detail -sorry). If you are happy with these changes, feel free to merge; otherwise just revert my commits...
#4015 Comment 12:
Looks good so far.  If someone can merge this with co authoring ( i got this wrong last time)
--------------------------------------------------------------
--------------------------------------------------------------
#4011 Comment 1:
Thanks again for your contribution!
--------------------------------------------------------------
--------------------------------------------------------------
#4007 Comment 1:
You could add `eventdate` which is biblatex field with entry type  `proceedings`
#4007 Comment 2:
I would love to see a few more test for possible date values!
#4007 Comment 3:
In biblatex, there is also the field origdate.
#4007 Comment 4:
Thanks for the feedback!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4002 Comment 1:
I merge this now, and I will create a PR to remove that L&F stuff completely in maintable-beta
--------------------------------------------------------------
#3998 Comment 1:
please base your pr on maintable
#3998 Comment 2:
This is hard to review since it has merge conflicts and includes some unrelated commits.
#3998 Comment 3:
I s this PR still relevant or what was its purpose?
--------------------------------------------------------------
--------------------------------------------------------------
#3993 Comment 1:
remove unused imports and go
--------------------------------------------------------------
#3988 Comment 1:
I've merged your help file change and restarted the travis build. so the help pages related error should be gone now!
Thanks again for your contribution 🥇 
#3988 Comment 2:
All set, thanks for all of your help! I've learned a lot about the process, and hopefully won't be as needy next time :)
#3988 Comment 3:
Thank you for your contribution :smile: ! Hope to see more from you in the future!
--------------------------------------------------------------
#3987 Comment 1:
```
Could not find method logManager() for arguments [org.apache.logging.log4j.jul.LogManager] on task ':test' of type org.gradle.api.tasks.testing.Test.
```
#3987 Comment 2:
Otherwise looks reasonable.
#3987 Comment 3:
Some of the tests fail now...I've no idea why and sadly no time for further investigations in the next days. So any help is appreciated. 
#3987 Comment 4:
Normally the XML order should not play a role. Maybe that's why they fail? Or is it because of some missing xsd file again`?
#3987 Comment 5:
I think these tests were actually failing before but were not executed before...now they are.
#3987 Comment 6:
I now found time to fix the tests. For some reason these tests were not executed before. It's strange and I couldn't find a pattern but since also the code coverage jumped by +2% (with almost +10% logic) it really proves that some tests were not executed.

Since fixing these tests was straightforward and this PR already has two positive responses, I merge now.
--------------------------------------------------------------
--------------------------------------------------------------
#3984 Comment 1:
This fix is now included in the maintable-beta branch and I think there is no urgency to also include it in the latest master. Thus I'll close this PR now.
--------------------------------------------------------------
#3983 Comment 1:
Please have a look at the Travis output, regarding the checkstyle, there is still some error 
#3983 Comment 2:
Thank you, It's nice to work with all of you. I learn a lot.
--------------------------------------------------------------
--------------------------------------------------------------
#3979 Comment 1:
I'm not sure it really even needs the progress bar for the exporting because it is so fast, but I left it in for now since the importing has one. One change I didn't make is changing the list of files to Path type from File type. I left a note about that above. Let me know what you think.
#3979 Comment 2:
@jssander  Please pull before you continue to work on it. I merged master to fix conflicts due to our release today.
#3979 Comment 3:
How do I pull correctly? In IDEA when I go to pull I think I'm pulling from my forked master.
#3979 Comment 4:
I made some changes, but there is a conflict now in the changelog. I'm not sure how to resolve it.
#3979 Comment 5:
@jssander Just keep both lines. I did it for you using the GitHub web ui. Just pull and you are fine at your side, too.
#3979 Comment 6:
Great! Thank you so much.
--------------------------------------------------------------
#3977 Comment 1:
Closing, since we could merge master into maintable-beta. Functionality is included in https://github.com/JabRef/jabref/pull/3976
--------------------------------------------------------------
#3976 Comment 1:
I have done the modification as wished by @tobiasdiez.

@halirutan: I guess in the end we still have to develop something driven by our assumptions. If at some point in time we feel that the design is ready for evaluation, we can try to reach out to our users. 
But that would require something that the users can work with. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3967 Comment 1:
The ISBN fetcher tries ebook.de first and if no result is found, it switches to the chimbori/amazon fetcher. 
Is this still valid?
#3967 Comment 2:
Yes.
--------------------------------------------------------------
#3965 Comment 1:
Hi @florian-beetz, since you have been involved in the maintable migrations do you want to join tomorrow's Devcall at 11 am? Drop me a note by mail (linus@lynyus.de). Cheers, Linus
#3965 Comment 2:
Okay, merging this in order to move on. I have created another issue to track the tooltips. https://github.com/JabRef/jabref/issues/3973

Maybe @florian-beetz wants to continue with that as the next PR? (;
--------------------------------------------------------------
#3964 Comment 1:
Thank you for the work! I got a minor comment on the "January, 1st" hack: There should be a comment on that. Or a [MADR](https://github.com/adr/madr) linked via `// ADR(number)` 😀 . Can be done in leisure time 😃 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3954 Comment 1:
@tobiasdiez  Is this now okay? Then you could merge it with CO-Authors 
#3954 Comment 2:
@tobiasdiez  Fixed the issues you m entionend. 
#3954 Comment 3:
I fixed the remaining issues and I am going to merge this one now
--------------------------------------------------------------
--------------------------------------------------------------
#3950 Comment 1:
Does this swallow event before the delay or does it just execute the search at a later time one by one?
#3950 Comment 2:
@stefan-kolb  The timer is resetted when you type new chars 
--------------------------------------------------------------
--------------------------------------------------------------
#3947 Comment 1:
I think having a `PdfExporter` (maybe rename to `XmpPdfExporter`?) is a good idea, especially for the cli support we get in this way. However, I would keep the "Write XMP" action in the menu. Personally, I would never look under "Export" when I want to to add metadata to my pdfs, although you are of course right that technically it is an export of some kind. 
#3947 Comment 2:
I deleted the cli option -xmp (integrated with https://github.com/JabRef/jabref/pull/3756), because the new XmpPdfExporter now enables the cli interaction via the -o exporter mechanism.

Maybe, we can automize the writing to xmp via a preference setting. I discussed this yesterday with @stefan-kolb. Imagine a workflow, where I save my bib database and all changed entries are written to the linked pdfs. I would try to implement this in another PR.
#3947 Comment 3:
Please have a look at the faling exporter test. Then we can merge
--------------------------------------------------------------
#3944 Comment 1:
You should add a changelog entry 
#3944 Comment 2:
I need to work on the tests first before we can merge this!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3932 Comment 1:
AuthorList behaves correctly here. This is a problem of the PersonNamesChecker.
#3932 Comment 2:
@tobiasdiez I changed the implementation now and added additonal test.
--------------------------------------------------------------
#3931 Comment 1:
@Siedlerchr We do?!
--------------------------------------------------------------
#3927 Comment 1:
As this is not even a one-liner and I tested the changes I merged them directly in.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3913 Comment 1:
OO fixed in 5c8e3e9. Tested in the UI.

So, ready for review 😇 

#3913 Comment 2:
Since @Siedlerchr gave his "OK" and @tobiasdiez reviewed the intermediate steps, I'll fix the tests and merge to keep things moving.
--------------------------------------------------------------
#3912 Comment 1:
No time for fixing. I thought: better enable one test than doing nothing

Christoph <notifications@github.com> schrieb am Sa., 31. März 2018, 12:53:

> *@Siedlerchr* commented on this pull request.
> ------------------------------
>
> In
> src/test/java/org/jabref/gui/importer/fetcher/OAI2HandlerFetcherTest.java
> <https://github.com/JabRef/jabref/pull/3912#discussion_r178429307>:
>
> >
> +    @Test
> +    @Disabled
>
> Why not fix the test instead disabling it?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3912#pullrequestreview-108490105>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafmWXJN_grCsn0O51h0liUy2_6O2xks5tj2ANgaJpZM4TCa3S>
> .
>

--------------------------------------------------------------
#3911 Comment 1:
I would propose you take the maintable-beta branch as base branch, otherwise we will be getting tons of conflicts 
#3911 Comment 2:
For users of IntelliJ, there is a cool dialog helping to resolve conflicts. 🌞 I'll however based it again on the maintable-beta branch.

![grafik](https://user-images.githubusercontent.com/1366654/38162252-3ea59840-34de-11e8-8716-5442bd6b17c1.png)

#3911 Comment 3:
For merging I stick to http://meldmerge.org/
#3911 Comment 4:
Please fix conflict and checkstyle error:;
:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/org/jabref/logic/layout/format/CurrentDate.java:21: 'METHOD_DEF' has more than 1 empty lines before. [EmptyLineSeparator]
#3911 Comment 5:
I don't know, why Travis fails:

```
  JUnit Jupiter:LocalizationTest:testUnsetLanguageTranslation()
    MethodSource [className = 'org.jabref.logic.l10n.LocalizationTest', methodName = 'testUnsetLanguageTranslation', methodParameterTypes = '']
    => org.opentest4j.AssertionFailedError: expected: <&Groups> but was: <Groups>
       org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:52)
       org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:186)
       org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:181)
       org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:486)
       org.jabref.logic.l10n.LocalizationTest.testUnsetLanguageTranslation(LocalizationTest.java:95)
       sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
       sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
       sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
       java.lang.reflect.Method.invoke(Method.java:498)
       [...]
```

I think, I only changed comments?!
#3911 Comment 6:
The errors are from the maintable-beta branch (see https://travis-ci.org/JabRef/jabref/jobs/360715639). So, I just merge to move forward.
--------------------------------------------------------------
#3910 Comment 1:
OK, I only removed "VerticalLabelUI"
--------------------------------------------------------------
#3909 Comment 1:
I think for this build it's okay, in maintable-beta we already have it refactored 
#3909 Comment 2:
@Siedlerchr I hope, there won't be conflicts for the maintable-beta branch then. 😇 
--------------------------------------------------------------
--------------------------------------------------------------
#3907 Comment 1:
Can be removed after refactoring Stringutils anyway. Also, as we have a Guava dependency now, maybe we can replace a lot of our helper functions?
#3907 Comment 2:
We checked this approx half a year ago and none of these functions were present in Guava. They are IMHO mostly available in [Apache Commons Lang](https://commons.apache.org/proper/commons-lang/), but our "spirit" wants to remove this well-established library to the more modern Guava library (https://github.com/google/guava/wiki/StringsExplained).
#3907 Comment 3:
Well then you can move it anyway.
--------------------------------------------------------------
#3906 Comment 1:
I thought it would be a nice idea to auto-generate this file and fortunately someone created a  gradle plugin:
https://github.com/jk1/Gradle-License-Report
#3906 Comment 2:
Alphabetical sorting will more or less result in a context-sorting anyway, won't it? After all, the libraries have a url-style naming pattern and we can just add blank lines here and there to make the context stand out.
#3906 Comment 3:
In many cases yes. For a lot of JavaFX libraries unfortunately, no. I kept logging and JavaFX grouped for now. But this makes no real sense if we want alphabetical sorting in the future.
#3906 Comment 4:
Why not using that plug in I suggested?
Iz seems to auto generate such a list of dependencies to a file. We then need only invoke it then when deps changes 
https://github.com/jk1/Gradle-License-Report
#3906 Comment 5:
Have not tried it out yet.
#3906 Comment 6:
I added it. Run following command

    ./gradlew generateLicenseReport

Afterwards, find following files:

- build/reports/dependency-license/index.html
- build/reports/dependency-license/THIRD-PARTY-NOTICES.txt

Excerpt:

```

Dependency License Report for JabRef

Dependency License Report for JabRef 4.2-dev

1. Group: com.airhacks  Name: afterburner.fx  Version: 1.7.0

POM Project URL: http://afterburner.adam-bien.com

POM License: The Apache Software License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.txt

--------------------------------------------------------------------------------

2. Group: com.github.bkromhout  Name: java-diff-utils  Version: 2.1.1

--------------------------------------------------------------------------------

3. Group: com.github.tomtung  Name: latex2unicode_2.12  Version: 0.2.2

POM Project URL: https://github.com/tomtung/latex2unicode

POM License: Apache 2 - http://www.apache.org/licenses/LICENSE-2.0.txt
```

![grafik](https://user-images.githubusercontent.com/1366654/38215067-cc82ec5a-36c6-11e8-87fa-0471810bc3d1.png)

When it comes to embedded licenses, the text renderer is not that good:

```
--------------------------------------------------------------------------------

15. Group: com.microsoft.azure  Name: applicationinsights-core  Version: 2.0.2

POM License: The Apache Software License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.txt

Embedded license: 

                    ****************************************                    


                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
```

The HTML one is better in this case:

![grafik](https://user-images.githubusercontent.com/1366654/38215102-f4e7d7dc-36c6-11e8-822d-48a97f5c8fe1.png)

Since, the tool does not use [SPDX License Identifiers](https://spdx.org/licenses/), we need to make a PR to the tool proposing to use the accepted standard for identifying licenses.

We also need to provide an [importer](https://github.com/jk1/Gradle-License-Report#importers) for unknown licenses - or we need to contact these authors and ask for a proper license in the POM.

![grafik](https://user-images.githubusercontent.com/1366654/38215214-53634cce-36c7-11e8-8581-5e0a0c22eebc.png)

Comparison

| Field | external-libraries.txt | Gradle-License-Report |
| -- | -- | -- |
| Id | Y | Y |
| Project | Y | -  |
| Version | Y | Y |
| Project | Y | -  |
| URL| Y | only-if-embedded-in-the-POM  |
| License| Y | y  |
| Note | Y | -  |

That means, we skip the human readable project name (which is OK) and the project-URL (in most cases).

Sometimes, we have different project URLs:

```
Id:      de.undercouch.citeproc-java
Project: Citeproc-Java
URL:     http://michel-kraemer.github.io/citeproc-java/
Licence: Apache-2.0
```

vs.

```
25. Group: de.undercouch  Name: citeproc-java  Version: 1.0.1

POM Project URL: http://www.michel-kraemer.com

POM License: The Apache Software License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.txt
```

So, in summary, I think, it is OK to include the dependency, but we should use it only as cross-check for external-libraries.txt.

#3906 Comment 7:
I updated `external-libraries.txt` and an initial ADR-0003 reflecting this discussion.
#3906 Comment 8:
I grouped `external-libraries.txt` according to the groups of `build.gradle` (and added the group "Citation Style Language"). I removed all testing dependencies from `external-libraries.txt` as testing dependencies are not required to be re-packaged by linux distributions.

I also added following sections to `external-libraries.txt`:

    ## Transitive dependencies

    ## Dependencies included as JARs in the source tree
#3906 Comment 9:
Hm, so it doesn't look like we can make any use of the plugin right now? So I propose to remove it and sort all dependencies alphabetically. And keep the manual workflow for now.
#3906 Comment 10:
I like the grouping very much, because it eases packaging. Especially in the context of Debian (refs https://github.com/koppor/jabref/issues/135).

It is also helpful to have the plugin included in `build.gradle` so that maintainers working on `external-libraries.txt` don't have to modify `build.gradle` when working on that.
#3906 Comment 11:
Probably need to base this on the maintable-beta branch if we want to merge it. Otherwise, we end up with a lot of conflicts there.
#3906 Comment 12:
Decision: cherry-pick adr-003 into a new PR. Remainder: Leave as is.
--------------------------------------------------------------
#3904 Comment 1:
Yeah, I already thought about the same. Especially a way to indicate the current status would be nice. 
 So maybe an icon status somewhere. I also like these circle indicators from set theory. e.g.:
https://materialdesignicons.com/icon/set-center

@halirutan  As you are working on the design, any idea where to put such an icon for the groups?
#3904 Comment 2:
@Siedlerchr I think the header of the groups view is the best place. In IDEA this is similar. The view settings for the project tree is in the top right corner of this panel. So *for me* this would be the first place to look. If there are several of such view options, we probably need to make a button that opens a context menu. If there are only two buttons, they might fit into the existing header.
#3904 Comment 3:
I will create a new PR based on maintable beta.
--------------------------------------------------------------
#3903 Comment 1:
Please also check http://help.jabref.org/en/BibtexKeyPatterns
#3903 Comment 2:
Merge or squash? I leave the decision in your hand @koppor .
--------------------------------------------------------------
#3902 Comment 1:
Yeah sorry about that I saw that when I wanted to merge the master into maintable for you :(
--------------------------------------------------------------
--------------------------------------------------------------
#3900 Comment 1:
Interestingly Travis was green, but now it seems like there is some checkstyle 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3895 Comment 1:
I have a few question to the cli exporter.
If I read the code right, all exporters read a file through an importer and write a bib file.
So the syntax, that worked for me was: 
java -jar JabRef.jar -o export.bib import.pdf,xmp -n

So there is a xmp importer for the import of the metadata in pdf files. 
To import plain xmp and write xmp to bib, there is the need for another importer for plain xmp. Is this requested?

Another question is, if the discussed cli option is possible under the -o option (or if it is only possible under the -xmp tag) to generate a plain xmp file from a bib file? Or to generate multiple xmp files for every single entry in the bib file.
I don't know and see no option to plug-in such features in the current exporter. Maybe some of you have suggestions for me? :)

In this PR, there is an exporter, but this exporter is only accessible via the GUI. Is this sufficient?
#3895 Comment 2:
Doesn't `-o filename,xmp` (as documented at http://help.jabref.org/en/CommandLine#export-file--o-filenameexport-format) work? :)
#3895 Comment 3:
"If only filename is specified, **it will be exported in BibTeX format**. If the filename is followed by a comma and an export format, the given export filter will be used." (JabRef Help)

The functionality is an exporter, but only to .bib files and importes the exported entries from different sources (in my case reads the xmp metadata from a .pdf file and writes it to the .bib file)

-o export.bib import.pdf, xmp

I think, the requested option is not possible with the current architectuer under the -o option, if I didn't overlooked something. 
The easiest way for me is, to write a custom functionality for -xmp. Other opinions?
#3895 Comment 4:
Is it possible, that the help page is not up-to-date?
#3895 Comment 5:
Now, it worked for:
-o  output.xmp,xmp  test.bib  -n

There were a few strings and options, I configured the wrong way. 
An enrichment of the help page with examples would be beneficial :)
#3895 Comment 6:
@johannes-manner  Feel free to update the help page accordingly 
https://github.com/JabRef/help.jabref.org/blob/gh-pages/en/CommandLine.md
#3895 Comment 7:
@johannes-manner 
you have an architecture violation. Either you add an exception (not that good, or you find a way to pass the XMP Prefs from a gui class down to the exporter factory

>  => org.opentest4j.AssertionFailedError: The following classes are not allowed to depend on org.jabref.Globals ==> expected: <[]> but was: <[src/main/java/org/jabref/logic/exporter/ExporterFactory.java]>

Edit// You just need to pass the XMP Preferences here:
`    public static ExporterFactory create(JabRefPreferences preferences, JournalAbbreviationLoader abbreviationLoader) {`

#3895 Comment 8:
Ready for final review.

There is now also an option to generate single .xmp files for every entry in a .bib file. Commented in the help page - command line options :) (https://github.com/JabRef/help.jabref.org/pull/181)
#3895 Comment 9:
Shouldn't XMP be written with capital M and P?

![grafik](https://user-images.githubusercontent.com/1366654/38680723-42a71710-3e67-11e8-896b-0e7f63fcb2b6.png)

#3895 Comment 10:
Also wikipedia writes it with capital M and P. 
So we should write it also XMP.
In a former discussion, we decided to write the class prefixes "Xmp...". This is still valid?

A would suggest to merge the changes here and to merge the other pull request and fixing these issues later on. Maybe @koppor you can open a issue @jabref/koppor?
#3895 Comment 11:
@johannes-manner  Class Prefixes Xmp, but I think @koppor  is refering to the extension description 
#3895 Comment 12:
Yeah, the class is fine with "Xmp", because of Google Style Guide. The interface to the user should use the offical term. Same with URI, ...
#3895 Comment 13:
I will update the description with the fix for the mentioned issues :)
#3895 Comment 14:
Just one more question, what exactly does the dialog  Tools -> Writing XMP Data to Entry display?
You could take this as a change to rework that simple one to javafx, see #3861 
#3895 Comment 15:
@Siedlerchr 
Is there no general dialog for informing the user about an operation? 
Because the dialog only displays, if the operation suceeded or failed...

You mean Tools->Write XMP metadata to PDFs?
#3895 Comment 16:
I'll merge. The JavaFX thing and my XMP wishes can be done in a separate PR. 😇 . Thank you for the continuous work on that. Reading http://dublincore.org/documents/dc-xml-guidelines/ and https://github.com/CrossRef/pdfmark/blob/master/test-data/random-xmp-example.xmp and https://www.pdflib.com/de/knowledge-base/xmp-metadaten/kostenloser-xmp-validator/, this topic is not easy.

<blockquote class="twitter-tweet" data-lang="de"><p lang="en" dir="ltr">1. Release to customers twice as often.<br>2. Fix the problems.<br>3. Repeat.<br><br>(Maybe release one third as much stuff at a time, just to avoid, you know, going out of business. It&#39;s okay, because much of the second two thirds your customer didn&#39;t want anyway and now you&#39;ll know early.)</p>&mdash; Kent Beck (@KentBeck) <a href="https://twitter.com/KentBeck/status/984053793762373633?ref_src=twsrc%5Etfw">11. April 2018</a></blockquote>


#3895 Comment 17:
Yes, I wondered what there is displayed when I checked the dialogs
--------------------------------------------------------------
#3893 Comment 1:
Ok so we keep it the way it is. I merged it into the other branch but reverted the commits!
--------------------------------------------------------------
#3891 Comment 1:
That actually looks great. Especially, I like that you were stubborn enough to make the entry editor light. It really looks good. Here are some points that we definitely should address:

0. Why is the hover effect for the icons gone? I really liked this one.
1. The line below the main-table header and the All entries Group header cannot be of different width.
2. Can we manage anyhow that these two lines are on the same level? This doesn't look good
![img](http://i.imgur.com/2hnsT52.png)

3. We need a general decision about the hover/select highlight colors for main-table, group entries, and menu bar. I don't insist on my initial choice of yellow, but the blue tones introduce some issues. First, the gray text and the hover-blue don't work. The contrast is too low
![img](http://i.imgur.com/YlIPxyF.png)
The same is true for the color markings in the front of the main-table. They won't work together. I am still voting for having a very light hover and slightly darker select color. Especially, in the select state, the text should not be inverted. Even a gray-tone works very well.

4. The main menu entries hovering is not correct. It changes the color of the text instead of the background. This is unreadable for me when I hover over an entry (when you open a menu, and hover the list, it is correct on the sub-items though)

5. I am still very much for not using the big circles as row indicators in the groups view. I see now that they can be colored and my alternative choice of a small triangle was too small. How about the `PLAY` icon. It gives a much better impression on the indent-level and is slightly larger

![grp](http://i.imgur.com/QygNfvg.png)

6. When I hover a line on the main-table, all the small icons for read-status, print-status, etc are always visible, no matter their state

7. Why is the "rank" icon in the main-table not simply the little star that we use in the header? This icon is neither flat nor can do I have a clue what it should be.

8. The hover/select status in the main-table has currently 3 states: hover (light), click (darker), double click (really dark). Why is that?

9. The bottom bar of the groups-view is white and has a separator at the very bottom.
![img](http://i.imgur.com/Xoc2w20.png)
The separator doesn't look good and when we stick to having this bottom bar white, it should be clearly separated to another side panel (which has a gray header).

10. I liked my version of the selected tab-pane entry better, where even the text is colored in the theme color. There is no reason that the little icon in front of each entry editor tab is blue but the text is not. Additionally, hovering the little closing "X" throws a CSS error.

11. The little date-selector icon in the entry editor does not have theme color. Can we fix this?

12. Can we ensure that the highlight colors (like for priority, read status, etc) use the colors that are defined with the theme? (I haven't even looked where this is defined).

This is a pretty long list, but it covers most things that I saw.

#3891 Comment 2:
Looks nice 👍 
#3891 Comment 3:
I like the yellow highlighting. Regarding the group expand /collapse the play icon is not a good choice as it does not indicate the status. In every Tree control you have such an icon.
It's called caret 
#3891 Comment 4:
Personally, I hate dark themes, but I acknowledge that this is what many users want these days. Offering this theme would certainly be a coolness-boost for JabRef.

How do I switch between themes UI-wise? Switching the css files is not what most users would do. Some dialog in the preferences would be cool (but is not a must).
#3891 Comment 5:
Some more points that apply only to the light theme:

1. Right now, we use a grayish tone for all fonts. This is defined in `-fx-mid-text-color`. It is a bit too bright and should be `derive(-jr-base, -70%)`
2. More importantly, we then need to use the same color for the glyphs in the main-table (attachments, priority, etc..)
3. The same text-color has to be used in the BibTeX code editor. 
4. The menu items change its text-color when I hover them. Currently, the font gets 's lighter which does not make sense. The color should be the same on hover and only the background should be highlighted.
I have derived (in HSB color space) two colors from the main JabRef color we use as the theme that work more unobtrusively for the tables and the menu
![scr](http://i.imgur.com/aPLgi17.png)
The color definitions for these are:
```
    -jr-theme: #50618F;
    -jr-hover-color: #F0F2F7;
    -jr-select-color: #D4DDF7;
    -jr-accent: -jr-theme;
```
5. Using the theme color to highlight the currently selected text box is a bit heavy and too dark. I suggest, we use the brighter `-jr-select-color` above. It still clearly indicates which box is selected.
#3891 Comment 6:
As  you are in fixing some small glitches as well: 
Opening the event log produces some css warnings:
```
javafx.scene.CssStyleHelper calculateValue
WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet file:/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/errorconsole/errorconsole.css
Mar 28, 2018 11:00:32 AM javafx.scene.CssStyleHelper calculateValue
WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet file:/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/errorconsole/errorconsole.css
Mar 28, 2018 11:00:32 AM javafx.scene.CssStyleHelper calculateValue
WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet file:/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/errorconsole/errorconsole.css
Mar 28, 2018 11:00:33 AM javafx.scene.CssStyleHelper calculateValue
WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet file:/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/errorconsole/errorconsole.css

```



#3891 Comment 7:
I made some further changes to the light theme. Biggest discussion point is probably the colored toolbar/menu. If this is white (or very light gray) I find it too boring.
![image](https://user-images.githubusercontent.com/5037600/38055667-a1be2678-32da-11e8-8442-ce3e5a4c4d24.png)
I'm quite satisfied with the general look but not completely sold on the colors.

@halirutan you changed the hover color for the menu to be the `selected` color. Was this on purpose? In general, I don't understand the introduction of the variables `-jr-hover-color` and `-jr-select-color` since they seem to be the same as the same variables without the `color`-suffix.
We should also find a compromise for the group icon. Right now we are constantly reverting it back and forth ;-). I would prefer a slightly smaller filled circle but I'm open for everything as long as the color is clearly visible. 
#3891 Comment 8:
@tobiasdiez We should get the general feedback from all developers to decide the main discussion points.

## General information

We have reached a state, where UI colors can easily be adjusted. But there are some general points we need to decide. I admit that I have a strong opinion about most of my design choices which is why I'd like to capture some feedback. We will compare specific points of the two versions of the light theme we have right now:

- [Patrick's version](http://i.imgur.com/q7GRv8s.png) ([here with open menu](http://i.imgur.com/ESXZplB.png))
- [Tobias' version](https://user-images.githubusercontent.com/5037600/38055667-a1be2678-32da-11e8-8442-ce3e5a4c4d24.png)

I will ask for feedback on some specific points and give some insight into why I feel my choice is better :)
Each point is formulated so that choice 1 means that my argumentation is better and choice 2 means Tobias version is more sound.

To give feedback, you can use the following Doodle poll

- [Link to the Doodle poll](https://doodle.com/poll/bd267yqa6gfx96cb)

If you click an item it means you vote for choice 1.

## Overall look

Which version do you prefer?

1. Yes, I like Patrick's version better
2. No, I like Tobias' version better

## Toolbar/Menubar coloring

The question is, should the toolbar fit into the rest of the UI or should it stick out by having a color? My vote here is clearly for having it fit into the UI. Color only, where color is necessary because we should aim for an unobtrusive UI. It *doesn't* mean, that the toolbar must have the same gray-tone as the menubar like in my screenshot. It can stick out by being a bit brighter (which was my initial choice before it was changed in this branch).

My argument against the light blue of Tobias version is that it visibly decreases the contrast of the icons. Using a completely different color will make the UI even more inconsistent.

_Tobi's response:_ The blue in the above screenshot is only an example. It is easy to choose a combination of toolbar icons and background color that has a high enough contrast. Note that the contrast is also a problem when we use a darker gray as a background.

1. Yes, we only use UI gray tones for the background of the toolbar/menubar
2. No, we colorize them

##  Group-View Background

My version uses the same bright background color for the group-view that is used in the main-table and in the editor. My argument for this is that no portion of the UI should draw attention to a region when there is no reason for it. The group-view is certainly not more important than the main-table but making it dark, pushes a lot of visual weight to this side panel.

_Tobi's response:_ The navigation bar of an application should have a different background than the content to give the a visual hierarchy (I read this somewhere in the UI design guidelines of Microsoft, but cannot find the link right now). In our case, the groups determine what is shown in the main table and thus serve as a navigation. Moreover, all apps I've installed use a different color for the navigation: Spotify, OneNote, Outlook, Sublime,....

1. Yes, the group-view should have the same bright background as other panels too
2. No, the group-view should be dark

## Hover and Select colors

I derived these two colors in the following way: The select entry color has the same hue (color value) than the theme color but is brighter and less saturated. The hover color is the select color but even more desaturated, however, it has the same brightness. From the screenshot, you might believe that the hover color creates too less highlighting but when actually using it, this is not the case.
I'm not sure how Tobias picked his hover color but for me it doesn't fit well into the rest.

The important point here is that I'd like to use the darker select color for hovering over menus and indicate which text-area is selected as well as other things. It gives a consistent look and feel. Opposed to that, I believe the dark theme color that is used in Tobias' version to color the frame of the selected text-area in the Entry Editor  is too much.

_Tobi's response:_ I'm not really satisfied with the specific color choice in both screenshot. Patrick's is a bit to light for my taste (especially the focused text box in the entry editor, but also the row hover) and mine acknowledged has the problem of too many colors that don't really harmonize.  

1. Yes, I like Patrick's version better
2. No, I like Tobias' version better

## Group Item Indicator

A small point that is highly discussed. The group item indicator is the little icon that appears in front of each entry in the group view. I don't like the big gray circle. Instead, I like something that helps the user to visually to identify the indentation level. The triangle I used achieves that by being vertical on the left side and giving the user *a vertical line to follow*. Additionally, it is a bit smaller than the circles.

_Tobi's response:_ I agree that the circle might be a bit to large. However, we should choose some icon that is filled enough so that colored icons can easily be distinguished from gray ones. In Patrick's screenshot you have problems noticing the blue icon, while in mine even the lighter green and purple ones are clearly noticeable.

1. Yes, I too like the triangles better
2. No, ugly circles are perfect.

## Behavior and consistency of icon buttons

I created a hover effect for all icons to help users identify which things "can be pressed".

![hover mp4](https://user-images.githubusercontent.com/511683/38065265-98848dcc-3302-11e8-9007-cd612b49f636.gif)

It works on all icons in the toolbar, entry editor, group view. It even works on the little close "X" for tabs
and the `>>` button when the toolbar is too small to show all icons. I would like to have this consistently on all *icon buttons* if possible.

_Tobi's response:_ I don't know how to create a fancy gif but the hover effect I use is taken from Material Design Specs. [See here for a working example.](http://www.material-ui.com/#/components/flat-button). Since the icon really appears as a small button on hover, it makes it clear to the user that this something to click on. Moreover, the same effect can be used for flat text buttons as well. Moreover, I don't like that the dropshadow of Patrick's solutions blurs the icon so much (especially noticeable for the paste icon).

1. Yes, this is a good idea
2. No, it's not a good idea 

### Let's ping some people

@koppor 
@stefan-kolb 
@Siedlerchr 
@lenhard 
@AEgit

#3891 Comment 9:
Answered your poll, but I'm not sure about the hover effect. Need to try this out, tho I don't know where I can do this right now.
#3891 Comment 10:
@stefan-kolb 

> Need to try this out, tho I don't know where I can do this right now.

Use this branch and go one commit back to ef8c2b049ec9
#3891 Comment 11:
I've added a few remarks above as a response to have a more balanced argumentation in both directions. I also want to add that it is helpful if each developer not only answers the poll but also outlines a few points that he likes and dislikes about each solution. In my opinion, most of these points above are not solved really well in both versions.

You can also checkout Patrick's version in the current `maintable-beta` branch, while mine is here on `darkTheme` (@stefan-kolb). This is probably better than just judging based on screenshots. 

Let's begin the battle 😄 
#3891 Comment 12:
@tobiasdiez and @halirutan : Both of you did a great job, so it was hard to decide. I will give some minor comments below to explain my Doodle Poll choices. Keep in mind that I just decided based on the screenshots, as I currently do not have enough time for proper testing. Furthermore, my decision is solely based on the light theme version. The dark theme looks awesome, but I don't know, whether I would use it during my actual work (maybe yes, maybe not - I really don't know) - anyway, there does not exist a dark version of Patrick's attempt, so I choose to compare just the light themes.
1) Overall look: I prefer Patrick's version. There appear to be too many different colours in Tobi's version.
2) Toolbar/Menubar coloring: Same reasoning as for 1). Patrick's version looks less "crowded". But, as Tobi explains this might be different with a different colour scheme and/or if using the dark theme.
3) Group view background: Very difficult decision. I like both - I think I would prefer Tobi's version, but it is a bit too dark for me (= too much visual weight) so I went with Patrick's. But I could see Tobi's version working, if it is slightly less dark.
4) Hover and select colors: I think Tobi's version is better as the colours used by Patrick appear too light.
5) Group item indicator: I agree that the circle is too large and I guess with a deeply nested structure (not shown in the screenshot) it will look worse. To be honest, I also do not like the triangle that much, but I cannot come up with a better icon.
6) Behaviour and consistency of icon buttons: I like both, so this could go either way. It would be interesting to see, how this works with the dark theme. If Patrick's version works without any adjustments also with the dark theme, I have a very slight inclination for his version. Otherwise Tobi's version is probably better.

Overall both look great, so I will probably be happy with any of the two approaches.
#3891 Comment 13:
I really lke Patricks Version, I am not a big fan of dark themes.
- Icon Hover: As long as the tooltips are shown I don't care
- Group: Circles or Triangles in front: I would prefer just indentation, I don't think there is an icon necessary. Would like to see a screenshot
- Group background: Agree with @AEgit,  Here I would prefer that version of tobias from https://github.com/JabRef/jabref/pull/3891#issuecomment-377033693 (e.g. just the typical "control color" background

#3891 Comment 14:
1.  Toolbar/Menubar coloring: Toolbar should not use another color, I'm going with Patrick.
2. Group view background: I think Tobias version let's the main panel stand out more which is desirable for me as it is the main working area or area of information. I think it is fine if it is a little bit in the background color wise, needn't be that dark tho.
3. Hover and select colors: Tobias version is better as it is easier to use another color style and also I think the effect of shadows does not stand out enough for the buttons (altho it is pretty)
4. Group item indicator: Going for Patricks version
#3891 Comment 15:
There is still an odd behavior with the expansion: Xubuntu 16.10 with 2560x1335 (27" screen)

First of all, I would expect that as long as I have space, the icons fitting on the screen are displayed:
Second: If I click on that icon I would suspect that the icons are then moved to the left or shown below the search bar etc.
At least not outside the frame I have never seen that in any application.

Another little odd behaviour: When I click in the search field, it get's focus and expands a few cm to the right. When I then leave the field, the search bar goes back to its original size,

And there is too much space between the icons and the searchbar. The icons should be more closer to the search bar.


![oddscreemshot](https://user-images.githubusercontent.com/320228/38093680-fbd62750-336b-11e8-9362-82b46ec0397b.png)

#3891 Comment 16:
And Here is the screenshot with the search + icons
![jabreftoolbariconstowide](https://user-images.githubusercontent.com/320228/38094273-a309d8f4-336d-11e8-8492-189d46acd457.png)

#3891 Comment 17:
Another issue which should be treated in both themes:
The arrows and the X in the side pane are missing tooltipps. ( e.g. Move Panel up/down=
#3891 Comment 18:
I made some adjustments that include more prominent select/hover colors, gray group view, and icons additionally change their background when you hover them. I explain a bit further what I did in this video:

https://youtu.be/DJAJyr_6XQY

I won't push it right now, as I had to make changes that will definitely break the dark theme of Tobi.

@tobiasdiez I still don't know how I can test your dark theme! Simply using the `Dark.css` obviously doesn't work. Can you explain how you included the `Dark.css` so that it overwrites settings from `Base.css`?
#3891 Comment 19:
Nice video 😄  
Don't think we need to make the toolbar stand out in any way, as we already have the icons and the hovering animation. Also, while the brownish highlighting color is sound, I personally like the lighter blue color more. Reason: I think highlighting is a useful information but not that important that it needs to stick out that much.

Anyway, our UI really looks great compared to what we have right now. This is a huge step!
#3891 Comment 20:
Thanks @halirutan for the update. 

I now finished implementing the suggestions and the feedback we got on our two versions. Notably, I changed the sidepane color to a very light gray as suggested by @stefan-kolb and @AEgit.
![image](https://user-images.githubusercontent.com/5037600/38454055-28210c58-3a60-11e8-8420-5fc620da8d88.png)

In my opinion this works better than a pure white side bar without being too dark (as my version above was).
![image](https://user-images.githubusercontent.com/5037600/38454076-79dde9d0-3a60-11e8-8de0-938ec4fde52e.png)

So, in summary, this version looks really nice in my opinion. For the sake of moving forward, I'll merge this now. Of course, we can improve and change the look and feel in the future again. (For example, I'm not sure if the contrast on the selected row with blue background is good enough; moreover the current icon for the groups is to small to show the color).

We also need to add a preference to switch to the dark theme (as remarked by @lenhard), which for the moment is only possible from the command line. I don't have motivation right now to implement this and leave it for a new PR.
#3891 Comment 21:
Looks really nice! thumbsup
#3891 Comment 22:
> I changed the sidepane color to a very light gray

Well, it was a *light gray* before. Now, it is the darkest gray we have in the application and we can no longer distinguish the group header and the entry editor from the contents of the group view. Simply changing the tool-bar color *and* the group view color to the same value than the menu bar would have solved all issues. It would have given the group view a darker gray and makes it notably different from the headers.

But now that it is merged without discussion, I won't fiddle around any longer.

![img](http://i.imgur.com/bc4t2SH.png)
#3891 Comment 23:
@halirutan Sorry that I didn't noticed the light gray, but I'm pretty sure that I couldn't distinguish between the sidepane and the maintable in the previous version. 

Anyway, the reason of why I merge this PR is because its aim was to add a dark theme and 
>The dark theme was also a nice test because it revealed a few 1-px wide borders, shadows and other small stuff.

Since this is accomplished now and I got positive feedback on it, I'd merged it. (Similarly, how we merged your recent PR on the subject because it accomplished its goal to use consistent `jr-` colors everywhere). So this merge should definitely not be interpreted as the hammer marking the endpoint of design discussions. In the contrast, there are still many open points that needs to be fixed and discussed (e.g. every javafx dialog) and in the process of course also other design changes are possible. I'm sorry if my words and action made a different impression. 

I really enjoyed your feedback - it lead to a huge improvement over all my proposals so far! I'm really happy that you put so much energy and work in the design and hope to see further improvements coming from you in this regard. 
--------------------------------------------------------------
#3890 Comment 1:
Your commits 9aa9d6e17a35262ad975bf9d30f451eeb396b22c, 04cde602b4abc87c80fa349f3f78e7a06cde79e0, 43cd266f8b4749b85c3adda4e19ed846e8650090, 8dcf61458c514fee577b6f3d40e4d17256afc282, de48ec1ffbcf2057402723d50f84b180de10a520 were made using your gmail email address. Only ba24c126c523b663a444cb8aa17421ab829eeef3 was using your github noreply address.

See following output. Remove ` | sed "s/gmail.com/XXXXHIDDEN/` so see the really stored email adress.

```
$ git log | grep -i Rolf -C 2 | sed "s/gmail.com/XXXXHIDDEN/"

commit 9aa9d6e17a35262ad975bf9d30f451eeb396b22c
Author: Rolf Starre <rolf.starre@XXXXHIDDEN>
Date:   Mon Mar 20 16:21:16 2017 +0100

--

commit 04cde602b4abc87c80fa349f3f78e7a06cde79e0
Author: Rolf Starre <rolf.starre@XXXXHIDDEN>
Date:   Sat Mar 18 01:39:30 2017 +0100

--

commit 43cd266f8b4749b85c3adda4e19ed846e8650090
Author: Rolf Starre <rolf.starre@XXXXHIDDEN>
Date:   Fri Mar 17 22:31:33 2017 +0100

--

commit 8dcf61458c514fee577b6f3d40e4d17256afc282
Author: Rolf Starre <rolf.starre@XXXXHIDDEN>
Date:   Fri Mar 17 13:07:41 2017 +0100

--

commit ba24c126c523b663a444cb8aa17421ab829eeef3
Author: Rolf <RolfStarre@users.noreply.github.com>
Date:   Sun Mar 5 23:23:56 2017 +0100

--

commit de48ec1ffbcf2057402723d50f84b180de10a520
Author: Rolf Starre <rolf.starre@XXXXHIDDEN>
Date:   Fri Mar 3 10:49:04 2017 +0100
```

(See https://help.github.com/articles/about-commit-email-addresses/ for further reading.)

We had to add you to `.mailmap` since you commited once without lastname

    Rolf <RolfStarre@users.noreply.github.com>

Since you commited 5 times with your full name and email address, we assumed this was intentional.

(Side comment: That's why, I have a separate development email address.)

Two options to proceed:

A) Replace your mailmap entry by `Rolf Starre <RolfStarre@users.noreply.github.com>`.
B) Rewrite complete JabRef history to cleanup commits.

You did option A, since rewriting history is generally a bad thing.

#3890 Comment 2:
Thanks!

>Since you commited 5 times with your full name and email address, we assumed this was intentional.
>(Side comment: That's why, I have a separate development email address.)

Yes, that was my mistake. I didn't realize my email address wasn't set to private. 
I've since found the "Keep my email address private" option, which is also mentioned in the link you mentioned. So should be good from now on :smile:
--------------------------------------------------------------
--------------------------------------------------------------
#3887 Comment 1:
Since this PR is now ready for review over a month, I'll merge it despite not having any feedback so far...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3883 Comment 1:
Still leaves the problem with clear search and close both using esc
#3883 Comment 2:
@Siedlerchr This is also fixed with https://github.com/JabRef/jabref/pull/3883/files#diff-62258e748b1a855079c917bfbc5009d2R146
#3883 Comment 3:
But I think it will now have the effect that if you clear the search the entry editor will be closed  as well.
#3883 Comment 4:
No, it does not (just tried it out to make sure). `event.consume()` prevents the event from from bubbling up the tree and thus the control with focus gets closed and the other ones stay open.
#3883 Comment 5:
If you fix the checkstyle issuie it's a go for me
--------------------------------------------------------------
#3882 Comment 1:
@lenhard The SORT messages should not be there anymore. Do you have an old state of the PR?! Thanks for your review, will work that in.
#3882 Comment 2:
@stefan-kolb Yes, sorry, my bad. Pulling from master doesn't update the branches you had checked out before...

Tested again, the message is gone. It's also very nice how you can switch between entries during the download and the pdf is linked to the entry without killing the entry editor :)
#3882 Comment 3:
Ok guys, I think all of your suggestions are there now 😄 
--------------------------------------------------------------
#3881 Comment 1:
@tobiasdiez If that really matters, we could invokeAll and assign priorities to the fetchers or something like that. I'm not sure if the preprint (in reality) really differs (or how often) from the published paper.
Would still give us the parallelism.
And the more fetcher we have we can still keep the time complexity ~ N and not N*NumFetcher.
#3881 Comment 2:
Priorities or clustering in Authority, Journals and preprints would be a good solution in my opinion. 

I know a few instances where authors didn't update their arxiv preprint with the revised and published version. Since even the slightest changes could shift the equation or theorem numbering, having the published PDF is in general desirable. 
#3881 Comment 3:
I thought about this for a moment. 
The problem that still persists is that we
- have a time complexity of max(v_1,..., v_n) then instead of min(v_1,..., v_n)
- decision complexity goes up (clustering, invokingall, checking which highest rated authority has a url, downloading this URL (hopefully it succeeds then if not probably the download is broken all the time as it will always be the highest priority....)

What really annoys me is that the download takes so much time now.
Your priority might be to get the _right_ document.

Note sure which way to go here.
#3881 Comment 4:
At the moment we try the original publisher for 10 seconds via the DOIResolution.
Afterwards there might be _better_ alternatives like IEEE than GoogleScholar, but it will not be the original publisher site then anyhow!
Maybe we can risk it 😄 
#3881 Comment 5:
Maybe we can offer a switch? E.g. Prefer Official papers over Preprints? 
Google Scholar has maybe PDF but the bibtex data of it are worse than every other page
We maybe could also give semanticscholar a try: https://www.semanticscholar.org/
They link to the orgiinal paper
#3881 Comment 6:
I implemented a possible solution in #3882 
Not 100% sure if it is correct but it could be a step into the right direction.
Fetching should be a little faster now as all fetchers are queried in parallel.
I'm still not sure if I like it that way.

#3881 Comment 7:
Ok, these are good points. What do think about combining both approaches: we cluster the fetcher by trust level and run all fetchers in a cluster in parallel. Thus the performance is still `min` in each cluster.

Something like:
```java
for (TrustLevel trustLevel : TrustLevel.values()) {
    var tasks = fetchers.stream()
            .filter(fetcher::getTrustLevel == trustLevel)
            .map(fetcher -> () -> fetcher.fetch(entry))
            .collect(list());

     try {
         return executer.invokeAny(tasks);
     } catch( ExecutionException) {
          // No fetcher successful, continue in next trust level bracket
     } 
}
```
(`Fetcher.fetch` should throw an exception if no url could be found, otherwise the above code does not work).
#3881 Comment 8:
It's probably easier an more clear to just run all fetchers as it is now and then select the best authority. Don't see too much benefits running them after another except for multiple code loops then.
Not sure but most of the times we will get the PDF from the lowest authority which means we need to traverse the loop multiple times. I gues the average performance will be better when we run all of them in parallel then.
#3881 Comment 9:
Closed in favor of #3882
--------------------------------------------------------------
#3880 Comment 1:
By the way, here is a very simple example of a dialog that accepts input and provides a result: https://github.com/JabRef/afterburner.fx/blob/master/demo-app/src/main/java/com/airhacks/afterburner/demo/dialog/SimpleDialog.java
#3880 Comment 2:
Cool! Overall looks good. I would suggest we release our patched afterburner also on gradle/maven.
Could you outline the steps to create /convert the old dialogs to new ones? I think updating the wiki pages would be appropriate 

#3880 Comment 3:
I'm not sure what's behind this but a general remark.
I'm not so happy with changes that introduce additional abstraction layers.
1. Additional knowledge is needed to use them
2. If the logic behind the library is not 100% tested we get hard to trace errors again
Probably makes you the only one that can ever change the code 😄  
But you are the JavaFX expert so it's up to you to lead the way!
#3880 Comment 4:
`@Inject` is the key here? Then, we should definitively take it. 👍  Angular also uses that and we should train people in that.

I cannot do anything regarding the huge diffs. Git does it via heuristics. More reading:h ttps://git.wiki.kernel.org/index.php/GitFaq#Why_does_Git_not_.22track.22_renames.3F
#3880 Comment 5:
Injection has already been used for the whole time to inject deps
#3880 Comment 6:
@stefan-kolb You raise good points. In fact, one of the problems we have right now is that the afterburner.fx library has bugs that affect us but is no longer maintained. On the other hand, loading FXML files by hand using built-in classes is tedious and leads to repetitive code that would be needed for every dialog. In the end, the extracted library is very small and essentially only one class [ViewLoader](https://github.com/JabRef/afterburner.fx/blob/master/src/main/java/com/airhacks/afterburner/views/ViewLoader.java). Against my natural tendency, I tried to write as much documentation as possible so that it should be easy to understand and maintain it.

Since the PR only got positive feedback, I'll merge it now. The documentation in the wiki is adapted. The `AboutDialog` is easy enough to see which steps are required to setup a dialog (and have a look at the cleanup dialog or wiki page for dialog with return values).
--------------------------------------------------------------
#3878 Comment 1:
Lgtm 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3873 Comment 1:
Currently, there are logical groups inside the language file. Not everywhere, but sometimes. 

Because of "Words that should be translated consistently are close to each other" and because Words can also stay in the middle of translations, I vote for keeping the order in the language file.

The decision to have the ordering of the English file was taken in the context of https://github.com/JabRef/jabref/pull/1933.

Alphabetical ordering can be achieved by

- Using IntelliJ's alphabetical sorting functionality:
  ![grafik](https://user-images.githubusercontent.com/1366654/37762456-99bea84e-2dbc-11e8-85e7-9a2cbaec2d81.png)

- CrowdIn
  ![grafik](https://user-images.githubusercontent.com/1366654/37762535-d59106a0-2dbc-11e8-99a6-e28a70f9933e.png)

I agree that at first, alphabetically sorted files look "finish" whereas our current state seems to be confused. However, offering the possibility of the English file to be grouped, offers us to keep connected terms togeher.

See for instance "XMP metadata". It should be without hyphen in English (reviewers fault). Moreover, it is also translated differently in German. If these entries were kept together, the fix would be more easy!

    Create\ entry\ based\ on\ XMP-metadata=Eintrag aus XMP-Daten erstellen
    Do\ not\ write\ the\ following\ fields\ to\ XMP\ Metadata\:=Folgende Felder nicht in die XMP-Metadaten schreiben\:

Note in this example the term "XMP-metadata" appears NOT at the beginning, so alphabetical sorting destroys the connection between the translations.

I agree that these groups have to be created. Our tooling is ready to support us with the grouping, since our localization script sorts the non-English keys in the order of the English ones.

Other localization relevant PRs:

- https://github.com/JabRef/jabref/pull/2010
- https://github.com/JabRef/jabref/pull/2031

#3873 Comment 2:
+1 for alphabetic order. For me personally, the ordering is only relevant in one case: when one removes a localized string from the code and the corresponding language key has to be removed from the English file. This is easier with an alphabetic order.

Logical groups are a nice idea in principle but a) they are not really present right now since all new translations are almost always added at the end of the file b) it is more work to maintain the groups c) they only have diminishing returns in my opinion.
#3873 Comment 3:
@JabRef/translators, what do you think? You are the ones wanting
high-quality translations. Do you care for grouping to be able to check for
consistency easily?
#3873 Comment 4:
@tobiasdiez My XMP example shows that grouping would have helped to a) spell "XMP metadata" always as such in English keys and b) ensure consistent translation. I know that currently no one volunteers to reorder the file, but enforcing alphabetical ordering removes that option completely.
#3873 Comment 5:
Having a grouped file also offers the possibility to have the Menu entries first (they are allowed to contain `&` menu shortcuts= and the other language keys else. How can we otherwise check for invalid characters in the language keys?
#3873 Comment 6:
If we would group it, we have to enforce that this grouping is kept consistent, which means:
- Every developer needs to find the right group for the translations (Not easy)
- Every Reviewer needs to be aware and check this for the language files (even harder)

My reasoning is - all of your arguments are valid and nice - but simply won't happen. Therefore, I think sorting the stuff from time to time would be neat. 

But I have no strong opinion here as it doesn't matter that much.
#3873 Comment 7:
Well, for the maintable beta branch, we no longer need the menu keys with & signs. 
And often translations are reused, so the context is not always valid.

#3873 Comment 8:
For me grouping is unimportant: using Crowdin, and carrying out the translation often, untranslated keys are "naturally" grouped.
Grouping may be helpful for a new language. However, it will always remain difficult for some strings to get the suitable translation without the context. A full (approximate) translation will be improved later on by using JabRef.
#3873 Comment 9:
@Siedlerchr How do accelerator keys work then? How can I define the accelerator key for the translated keys? Think of `&File` vs. `&Datei`? Meaning: <kbd>Alt</kbd>+<kbd>F</kbd> opens the file menu in English JabRef and <kbd>Alt</kbd>+<kbd>D</kbd> the same menu in German. How can I (as developer) pre-configure that?
#3873 Comment 10:
Ask @tobiasdiez 
#3873 Comment 11:
https://stackoverflow.com/questions/24499500/javafx-menu-first-letter-underline-decoration

#3873 Comment 12:
I see, I am the only one. I will keep my sorted translations and merge updates manually back. 

I will try to work together with @Brainsucker92 to be able to have `JabRef_en-grouped.properties` locally being synced with `JabRef_en.properties` (the corresponding `JabRef_*-groupes.properties` will be created accordingly). In that way, we can have both: the alphabetically ordered, where you all guys are working with and the grouped one, where I intend to work with. The `-grouped.properties` is for a **quality day once a year**. New keys are sorted into the groups, keys are reviewed for consistency, and languages we know will be reviewed for consistency, too.
--------------------------------------------------------------
#3872 Comment 1:
I tweaked it a bit and I do no longer get any errors/freezes/weird behaviour in the maintable.
However: We have somehow to adjust the scrollbar height, that currently makes the code editor jumps around 
#3872 Comment 2:
@tobiasdiez  Could you figure out why the entry editor now jumps around in size?
#3872 Comment 3:
Okay, I got it working now. The problem was that the setting of the entry editor preferences was executed in the FX Thread. I now extracted it and tada it works
#3872 Comment 4:
I used the version during my productive work and did not find any issues. Therefore I would propose to merge this in.  When merging into maintable-beta we have to revert that.
--------------------------------------------------------------
#3871 Comment 1:
Grammar-based search is the advanced search. So, the magnifier should be cyan, when following search string is active:

    author=kolb and author=kopp

Taking examples from the documentation (https://help.jabref.org/en/Search#search-modes)

All of these are advanced, but they are not recognized as such:

    title|keywords = "image processing"

    (author = miller or title|keywords = "image processing") and not author = brown

Following is normal mode:

    progress “marine aquaculture”progress “marine aquaculture”

This is now with cyan. This is wrong.

Following is normal mode:

    progress

Correctly <s>recognized</s> displayed as normal mode with this patch.

#3871 Comment 2:
If so, the whole detection is wrong?!
#3871 Comment 3:
Only the beginning of the detection is somehow wrong. For complex terms it is right, but for single words, it is wrong. See the examples above. Maybe, we changed something when going from JabRef 3.6 to 3.7.
#3871 Comment 4:
Or maybe the detection never was entirely correct. If I have a lot of time on my hands, I might have a look at the detection algorithm. Otherwise we can close this PR and / or remove the coloring of the the search icon again. After all, what is the point of changing its color if the circumstances are incorrect?
#3871 Comment 5:
@lenhard If you indeed have time to look at the search algorithm, please replace it completely ;-) https://github.com/JabRef/jabref/issues/1975
#3871 Comment 6:
It worked in 3.6 and no one noticed that it broke at 3.7. So, the point is
to keep the idea and to fix it... The idea in other words: make users aware
of the feature and that the search might not work if the grammar based
search was intended, but not matched (typo in query)

Am 22.03.2018 19:53 schrieb "Jörg Lenhard" <notifications@github.com>:

Or maybe the detection never was entirely correct. If I have a lot of time
on my hands, I might have a look at the detection algorithm. Otherwise we
can close this PR and / or remove the coloring of the the search icon
again. After all, what is the point of changing its color if the
circumstances are incorrect?

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
<https://github.com/JabRef/jabref/pull/3871#issuecomment-375419286>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ABTafiYxOvx2TOF6vCt2ytpyzzRUWwEvks5tg_McgaJpZM4S1MHL>
.

#3871 Comment 7:
Actually there should be tests for it then, as this is not a UI feature but the detection is logic based...
#3871 Comment 8:
Did we update the antlr stuff after v3.6? Because the query "progress" actually is a valid grammar-based query that compiles with our antlr code. That's the reason for the "wrong" coloring. 

I have now added code that checks if a query consists only of word / whitespace characters and/or digits and uses a normal contains-based query for that. Thus, grammar-based searches are only executed when special symbols are used ALTHOUGH our grammar is more powerfull than that. The terms mentioned by @koppor above are now colored as expected. @koppor: I hope this limitation is what is wanted. Please do some testing to see if this matches your expectations.
#3871 Comment 9:
In general good. Minor issues - not sure whether they should be fixed separately.

`j` - OK:

![grafik](https://user-images.githubusercontent.com/1366654/38212666-ddff22e4-36be-11e8-90c4-e6647c6d0c1a.png)

`jö` - not OK:

![grafik](https://user-images.githubusercontent.com/1366654/38212682-ed37d40e-36be-11e8-81aa-0f50226aa906.png)

Minor issue:

When I clear the field using Ctrl+A and then Delete (after an advanced search), the marker is still advanced:

![grafik](https://user-images.githubusercontent.com/1366654/38212778-4a0ec2d2-36bf-11e8-8c36-42db1c9f8d6b.png)

Otherwise: LGTM :)

#3871 Comment 10:
Thanks for the comments @koppor 

I fixed all the glitches you described and this PR should now be ready.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3863 Comment 1:
Dev Calll decision: Postponed to when 5.0 will be master 
--------------------------------------------------------------
--------------------------------------------------------------
#3857 Comment 1:
I generated a [structure-diff](https://medium.com/clarity-bot/reading-structure-diffs-101-3b28134d7b8f) below from pulling ```a98341b``` **on JabRef:fix-fetcher**  into ```59b2469``` on **JabRef:master**.

![Structure Diff](https://api.clarity-bot.com/v1/github/diff/4tofHK3LrW6emgruhM07LuycuDQqZ5OwV9siFq3n1hKvObvA3dqWYK8RWd29WEYFGd8aEwEnfMA0mlma7PCTc467MpMLENwXStJ9XCTsvpTZdg8a7Y8zanmKy7R62vaDg6GNMjdc3vrP6SsCFWFR2eebrYggWlQt16MiTSgz6UvUXsdSXZKfHRWJsYACPgpdyPMvJw2oB8VDhFcHPNk8c8ZBgDnAgmy2fQPfOjGrsSFmW1InuhK3p75GgbN1irslLLiqzq40cd04uA7LKmmgAPdlWSJcF9yRBjzUdnm8R0UdwlTFtUyau7pZ0RUCfXUTaR39nAKMV21pdjvL8SziQryBxbOSZw3KHz3cSStL3Xg8TtFO6sr3j3QbTTqD8wusseYacbDGLnzITlrs6ham760JimOq4O43tgW1o3wyYtxvmgNZlswkcOhvgZfSisv8WVh1XWcWJ1KeoOvhe8is2XqYeK9KOn0oUAxnwV4ynUUgrIDOe24nszgchqQc09rc)
--------------------------------------------------------------
#3853 Comment 1:
How often are the translations created? Once a week would be fine as well...
#3853 Comment 2:
I configured auto sync. Otherwise, I have to manually trigger sync once a
week. We can do that if this PRs are disturbing...

Am 15.03.2018 18:32 schrieb "Stefan Kolb" <notifications@github.com>:

How often are the translations created? Once a week would be fine as well...

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
<https://github.com/JabRef/jabref/pull/3853#issuecomment-373460004>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ABTafnobJkkxFTbVYl8LXodGyetYIeMTks5teqWRgaJpZM4SsbRh>
.

#3853 Comment 3:
When is auto synch triggered?
#3853 Comment 4:
As soon as translator submits something (IMHO)

Am 15.03.2018 18:34 schrieb "Stefan Kolb" <notifications@github.com>:

> When is auto synch triggered?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3853#issuecomment-373460776>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafmPJ_y0YuKJH7eS7BGhr1G93uek3ks5teqYfgaJpZM4SsbRh>
> .
>

#3853 Comment 5:
I also agree that these PRs are creating a bit to much noise right now. Isn't it feasible to sync changes only before a release (and in the rare case somebody provides translations via github)?
#3853 Comment 6:
OK, I paused the sync on crowdin. When new translations from GitHub come in, one has to delete the integration and recreate it. For new translations from Crowdin, the sync just has to be resumed.

![grafik](https://user-images.githubusercontent.com/1366654/37511100-ea113226-28fd-11e8-976c-01c3bda211c7.png)

--------------------------------------------------------------
--------------------------------------------------------------
#3847 Comment 1:
I generated a [structure-diff](https://medium.com/clarity-bot/reading-structure-diffs-101-3b28134d7b8f) below from pulling ```d72e463``` **on JabRef:hotReloadCss**  into ```affca25``` on **JabRef:maintable-beta**.

![Structure Diff](https://api.clarity-bot.com/v1/github/diff/uFXmEzij0muvtxWMcMxNBiY9J7qHaCP6NRYxDAT7zHtUWwUpWzW6Dkkusf3kCRUPtT3aiYmEQ8NWiQhk4a0bkVivUgWrxPKKeOagYtb3alquN77JE3BACPHykzyfhz2ezxTOzvlBHttZZw5mra5Mcbjxk7xauvTVKcOLu3hwn27WTlqYCb7Hio5EzX8qG9rHV4wHCz4R4LjnWXBJ5ABdV56GUZjSd2HQ5wnlRO1dugolFaOVs2vNVWit641wGC6GbHQdZJhxrZffrhBoRJPV5xXwzx1Ia0baOVQppaaYVviNRUVfvbCjQlrtG35ySOw5SK2Ibe77NJnvK9qCTJKJF7X3U3UZmHjPh2zlmFBlKpMzDn4w3f3Bxft6nyaq5pTTZfYPqt2FGSRUYnqywVOiUWar4hQ6s7Z3OTeTEgPI7eKAnaYKlvDgkDjjR3TgsVe30obemVfYX1ZEbBXBXcFOKsUXEYwHAglQSjXbnaAiaAjy8ecUtE7D8RPjChIZKhg7)
#3847 Comment 2:
@stefan-kolb The idea was actually that external css files are also supported so that the user can edit them directly (in the hope that we can get one or two designers interested, which create a nice theme for us - similar to the dozen of different color schemes for IDEs). The overhead of the change listener should be almost non-existing (and we don't have a method to test for production code, do we?)
#3847 Comment 3:
We could still use external css files without polling for changes all the time. I don't think its valuable except for debugging/designing purposes. A simple restart of the app if one wants a new CSS theme would totally be standard behavior.
#3847 Comment 4:
When you use ScenicView it has the ability to hook into the  css files and you can then achieve the same effect.
Agree with @stefan-kolb that constant polling for a file which does not get changed by most users is useless and produces uncessary IO.
#3847 Comment 5:
I also think polling all the time for CSS changes is too much and I would not expose this feature directly to the user (at least not all the time). However, wouldn't it be possible to merge it anyway, but make the polling turned on by e.g. a command-line switch or a Java environment variable? This would have no impact on the performance of the release version and it would help us and possibly non-existent godlike UI designers with too much time :)

@Siedlerchr Have you actually tried this with JabRef and ScenicView? For inspecting the tree-nodes, it is OK, but changing the style is a pain. It is much more convenient to work in the CSS files, at least with my current experience.

I would really like to see this happen and as long as we only do polling on demand, it should not have a performance impact. @tobiasdiez Do you agree that there is no performance drop without polling?
#3847 Comment 6:
The file monitor is now only activated if the css file exists as a direct physical file, i.e. is not bundled in the jar. You guys are of course right that there is no need to monitor a css file in the bundled jar archive. 

By the way, if I understand it correctly, then the [Watcher](https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html) does not poll the file for changes but actually registers listeners that fire upon changes (at least for modern OSs). Thus it is very performative and scales to thousands of active file listeners (and the limit lies more in the IOPS needed for registering the listeners). There shouldn't be any noticeable overhead for a few files.
#3847 Comment 7:
I tested the live reloading from IDEA and it was inconvenient because the watched `Main.css` was the one from the build folder. I introduced the `-Djabref.main.css` property that lets you specify the path to the CSS file. In addition, I made it mandatory that the `-Djabref.main.css` needs to be defined to turn on file polling. Just giving `-Djabref.main.css` without a parameter, will turn on polling as the version of @tobiasdiez did.

I wanted it to be as convenient for *me* as possible and I would like to change the source `Main.css` and not the one in the build folder. If one of the expert designers we expect to arrive soon (:smile:) wants to play with the style, he/she can then use the `JabRef.jar` and just place a copy of the `Main.css` wherever he likes. Simply starting

```
java -Djabref.main.css="/path/to/Main.css" -jar JabRef.jar
```

lets them turn on live styling.

I have tested this version both from the IDE and from command-line and it seems to work as expected. Can we merge this into the maintable-beta so that I can pull it into my other branch?
#3847 Comment 8:
If you fix the checkstyle issue (constant names must be uppercase with underscore), we can merge
#3847 Comment 9:
@Siedlerchr Thanks! I usually use this format as well, but Tobi used CamelCase and I wasn't sure anymore how we handle this.
--------------------------------------------------------------
#3841 Comment 1:
No idea. I was blindly assuming that crowdin does the right thing, especially since the build passed. 

Maybe it conflicts with localizations that are added directly via a PR? Should I just re-add the removed translations on master?

#3841 Comment 2:
After merging such PRS, the JabRef crowidn admins (me, @siedlerchr) habe to
push "stop sync" and "start sync" to trigger an import

Am 13.03.2018 16:53 schrieb "Jörg Lenhard" <notifications@github.com>:

> No idea. I was blindly assuming that crowdin does the right thing,
> especially since the build passed.
>
> Maybe it conflicts with localizations that are added directly via a PR?
> Should I just re-add the removed translations on master?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3841#issuecomment-372715596>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafn7KQY83eAEn9Kwmil3xhZ8MNydXks5td-uKgaJpZM4SoEXW>
> .
>

#3841 Comment 3:
That's why I was waiting with merging the Spanish PR as I was unsure if crowdin gets the changes.
Good to know that in such cases we have to re-trigger the sync
--------------------------------------------------------------
#3839 Comment 1:
I played around with the UI a little and I like it. I like the fact that the menu and tool bars are a little less color-intense than in the current maintable-beta.

You have my +1 for continuing with this line of work.
#3839 Comment 2:
I made further improvements to the custom icons and they look at least acceptable now if put on the toolbar:

![toolbar](https://camo.githubusercontent.com/3ffdb9648c42eb754097ccb41238a5cc5b95cf97/687474703a2f2f692e696d6775722e636f6d2f6a516234624d782e706e67)

For more information on this view issue https://github.com/JabRef/jabref/issues/3868. I pulled the latest changes from maintable-beta. I'm giving this free for review now. Note that there are still a lot of commented lines in the code to easily see what I have adjusted. Once we agree on something, I'll clean everything up.
#3839 Comment 3:
I've now merged this PR. We can fine-tune the design later and I'll provide a proposal for a dark theme in a new PR.
--------------------------------------------------------------
--------------------------------------------------------------
#3834 Comment 1:
Find this behaviour also more useful. You shoudl also cherry-pick that commit in maintable-beta
#3834 Comment 2:
Why cherry-pick? I thought we agreed to merge master regularly into maintable?
--------------------------------------------------------------
#3833 Comment 1:
Thank you very much for your contribution! Btw, did you know that you can also contribute more easily via crowdin?  https://crowdin.com/
It has the advantage that you can search all previously translated strings and also get suggestions from previously translations and automated machine translations (e..g bing translate)
#3833 Comment 2:
@Siedlerchr Thanks for the suggestion. I would like to try it out. Does it have a free plan for open source or something the like? I can't find that on their website. 
#3833 Comment 3:
As a User/translator you don't have to pay anything. Just login, go to the project and start translating.

For projects:
They offer free plans for OpenSource Projects https://crowdin.com/page/open-source-project-setup-request



--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3827 Comment 1:
Gradle uses Groovy, which is similar to Java. You can use the normal Java
classes there. Appending with Java shouldn't be that hard, is it? 😇

Am 10.03.2018 15:25 schrieb "Christoph" <notifications@github.com>:

> *@Siedlerchr* commented on this pull request.
> ------------------------------
>
> In config/Eclipse Code Style.epf
> <https://github.com/JabRef/jabref/pull/3827#discussion_r173623773>:
>
> > @@ -0,0 +1,328 @@
> +#Fri Mar 09 22:05:27 CET 2018
>
> Yes, as a reference file. And this file can still be imported manually.
> Mabye someone more experienced in gradle/scripting can create a simple
> script to copy the things from that file to the workspace
> org.eclipse.jdt.ui.prefs file
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3827#discussion_r173623773>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafnxUchrgoRdb1CEIxkah0jpKxJR7ks5tc-J2gaJpZM4SkotL>
> .
>

#3827 Comment 2:
I merge this for the moment. As we don't change our code style that often we can postpone the automatic creation of the prefs
--------------------------------------------------------------
--------------------------------------------------------------
#3825 Comment 1:
This is not required any more. Crowdin took care at https://github.com/JabRef/jabref/pull/3828.
--------------------------------------------------------------
#3824 Comment 1:
If you fix checkstyle we can merge
#3824 Comment 2:
I generated a [structure-diff](https://medium.com/clarity-bot/reading-structure-diffs-101-3b28134d7b8f) below from pulling ```19945df``` **on JabRef:downloadLinks**  into ```988fb54``` on **JabRef:master**.

![Structure Diff](https://api.clarity-bot.com/v1/github/diff/a0IWgZDpCdBzCsQdSvLfyHkbi05fQx8AW2mBOEvRHetByChk4EDZjTEG6MWXzWIo1hqW7msRreohcOQSdh9Q1z6B2g9Rhcvd3vbcRHqBHPfOB1cbpIxpk9MP95sNaMChNvEyg0ncYAsQndSJDFj341vTy8BAYs4IKEI3oZZWKehEkBHlcFb5FwRHIx4g6ywoh2Cdj3JZUH6dl5o42sJ5YHMi2WgxJYKAtAn466ZPFVO7iewTzdYHLChOanHvwp5yO4ebK2lKmDhcTw1uhaJr8QzMYimCjqcJ9KUXjWQfYtn2P7uaGBZ8cvRTukoNGrO8gXWIhral9P5qDx1dh3WlNOxNyszBqWYbSTyVLlkJY7edwsEmLTj2R0OFZV3wHaWdCapC9na05oqlT54Tdt5MPsa9Qv5id1oJ7uRJgx7xMvzw1PUZhBPOH6X5Ar4dWbmdBp5Z3V4Snvxf3pvlxGZNLFOrSREnZnM7zUVciqWaHYFP6XakMvVkE6k0X6CV7H0g)
--------------------------------------------------------------
#3821 Comment 1:
travis fails for some timeout reason not related
--------------------------------------------------------------
#3820 Comment 1:
I think you should base that on master so that we can see it working and then we can cherry pick the commit into maintable-beta
#3820 Comment 2:
cherry-picked in master.
--------------------------------------------------------------
#3808 Comment 1:
As @halirutan  is working on a new color version/theme I will merge this PR.
--------------------------------------------------------------
--------------------------------------------------------------
#3806 Comment 1:
Seems like xmpUtil s has a wrong import for StringUtils.
#3806 Comment 2:
According to their changelog, the issues that prevented an upgrade are now fixed. Let's merge this and I'll have a look at the logs in a few days to check that the telemetry is indeed working as expected.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3801 Comment 1:
Let's merge this before the size escalates ;-). Thanks a lot for your time and good work @Siedlerchr!
--------------------------------------------------------------
--------------------------------------------------------------
#3798 Comment 1:
With https://github.com/JabRef/jabref/pull/3820 included, we can go back to our normal Crowdin workflow. I fixed the conflicts by using `git merge master -Xours`.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3790 Comment 1:
I think you have selected the wrong base branch or did you intend to merge it into the telemetry branch?

#3790 Comment 2:
Ah this should fix some open issues (or at least one)?!
#3790 Comment 3:
@Siedlerchr yeah, my bad. I now changed it to the correct base branch (and now the telemetry commit pops up as a new change...Tobi and git).
@stefan-kolb good observation, I was not aware that this was reported previously. Yes, this PR should fix https://github.com/JabRef/jabref/issues/3410. I'll add it to the changelog in #3621 as soon as this PR gets merged.
--------------------------------------------------------------
--------------------------------------------------------------
#3786 Comment 1:
This was done by @Siedlerchr at https://crowdin.com/translate/jabref/324/en-de#q=the+conflicting. I fixed both.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3783 Comment 1:
Can I still change the order and width in the settings?
#3783 Comment 2:
@Siedlerchr Yes, this should still work.
--------------------------------------------------------------
#3779 Comment 1:
Hm, good question. I will take a look at that. 
#3779 Comment 2:
As far as I see the panel is only used to add the PreviewPanel which does not provide a way to input content. So we can safely remove that.
#3779 Comment 3:
Ok, but we may still need it in the future for example when the preferences are migrated pane by pane. If the library makes problems with Java 9, then I'm OK with merge. Otherwise I would keep it for the moment until the majority of the dialogs is also converted.
#3779 Comment 4:
So, is our custom fx hack a problem for java 9 or not? In the latter case I would vote for closing this PR; otherwise just merge it.
#3779 Comment 5:
I want to get rid of the class completely, it can be safely removed as JavaFX is our first class citizen.
For swing content we need to embed we can now use Swing Node 

I will update the PR to convert the remaining usage to fx
#3779 Comment 6:
I now converted the Preamble Editor to javafx. This was the only critical thing which remained and had a TextArea as input field.
All other cases where Customjfxpanel is used is uncrictical and only the previewpanel in the External Changes Dialog.

#3779 Comment 7:
@tobiasdiez Well, we can simply do it the other way round then. We wrap it in javafx by using a SwingNode. 
I did this with the cleanup operations already

--------------------------------------------------------------
#3778 Comment 1:
You could take this as an opportunity to reword the question/dialog. Asking questions for yes/no answers is never a good idea https://github.com/JabRef/jabref/wiki/Code-Howtos#designing-gui-confirmation-dialogs
#3778 Comment 2:
@Siedlerchr Why not ask a question when you mean to ask one? In the stackoverflow thread that is linked in our wiki, the "never ask questions" rule is not mentioned and the examples discussed there actually show dialogs with questions. Microsoft seems to have the same opinion: https://msdn.microsoft.com/en-us/library/windows/desktop/dn742470.aspx
#3778 Comment 3:
It's better to state the actions in a user centric way. Just say sth like. You are about to delete the xxxx. Look at the file deletion dialog in the general tab. 

https://www.nngroup.com/articles/confirmation-dialog/

Here is a good explanation about asking questions in dialogs 

https://books.google.de/books?id=e75G0xIJju8C&pg=PA217&lpg=PA217&dq=ask+question+in+confirmation+dialog&source=bl&ots=6SLQCqcUBg&sig=dq2aJhgEcxrsWAnEJwVuXd6GFKo&hl=de&sa=X&ved=2ahUKEwjK8t2P98PZAhUICewKHfMiAvUQ6AEwCHoECAQQAQ#v=onepage&q=ask%20question%20in%20confirmation%20dialog&f=false


#3778 Comment 4:
I now changed the buttons from Yes/No to Delete entry / Keep entry. However, both links couldn't convince me that questions are bad. In the contrary, the first link even contains the standard Microsoft delete file dialog as a good example (and generally references the microsoft guidelines, which are full of "Do you really want..." questions). I see the reasoning why actions are usually better than questions, but in this case we really want to ask for confirmation. Anyway, the aim of this PR is not this dialog but actually fixing the delete function.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3769 Comment 1:
This PR is now ready for review.
#3769 Comment 2:
I'll merge this PR now since it already has one positive review and is finished for over a week.
--------------------------------------------------------------
#3767 Comment 1:
For the MySQL fans, I really need the two buttons for the shared database if a connection to a MySQL is established in the current database. 😇  (not for PostgreSQL and Oracle Database).
#3767 Comment 2:
@koppor: I find two actions in the code: `StandardActions.CONNECT_TO_SHARED_DB` and `StandardActions.PULL_CHANGES_FROM_SHARED_DB`.

So if a connection to mysql database is established, you want both of these buttons to show and otherwise just the pull/push button?
#3767 Comment 3:
oh, only the second :) - that is needed for mysql (only)

The former one is not needed at all, currently no clue what it is useful for.
#3767 Comment 4:
Decision in devcall:
- Separate social network buttons from the rest
- Add tracking for user actions and evaluate in the future which buttons should be displayed
#3767 Comment 5:
@lenhard An FYI from me and please don't feel pressured: You might have seen that I want to make a consistent layout for all panels, toolbars, etc ([issue here](https://github.com/JabRef/jabref/issues/3678#issuecomment-367973471)). I'm going to wait with this until your PR here is pushed. Then I will merge the maintable-beta again into my local branch and incorporate all changes. I really would like to have more icons on the toolbar to get a better feeling for the look.

#3767 Comment 6:
I grabbed the template from the Material Design Icons and started to convert some of the icons we don't have in this style. As an example Emacs, TeXStudio, and Vim. 

![emacs](https://user-images.githubusercontent.com/511683/36882887-c06c4910-1dd6-11e8-9830-b07ddf131207.png) ![texstudio](https://user-images.githubusercontent.com/511683/36882888-c08829be-1dd6-11e8-8406-ddf0f8ac94c7.png) ![vim](https://user-images.githubusercontent.com/511683/36882889-c0a2abf4-1dd6-11e8-881f-fd83e8fce2d4.png)

Would it be of interest if I pursue this further? If yes, does someone know if we can include them as a vector font so that we have those icons scalable to whatever resolution we need? I'm worrying about retina displays or other 4k devices where 32x32, let alone 16x16 icons look not good.

#3767 Comment 7:
@halirutan I would suggest you contribute that upstream. Read more at https://github.com/Templarian/MaterialDesign/blob/master/CONTRIBUTING.md.

There are also the [academic icons](https://jpswalsh.github.io/academicons/). However, there is none for tools, but some for DOIs, PubMed.
#3767 Comment 8:
@koppor I might be wrong, but the README there reads in its final paragraph:

> Please note that, at this time, the only brand icons we accept requests for are popular social media sites/apps and widely used products/software. Thanks for understanding.

In fact, I have searched for Vim and Emacs on the site first and was stunned that such widely used apps cannot be found. It doesn't matter, I have successfully searched for a way to create our own ttf font for the icons. In this way, we can stay consistent with our design and we can adjust the icons as we like.
#3767 Comment 9:
@halirutan I would agree that emacs and vim are widely used. In case there is no PR yet, why not creating a PR? I have to admit that other software is not that popular.

Maybe, we should start another font project? Maybe, we fit into the [academic icons](https://jpswalsh.github.io/academicons/). At least, I would try. 😇 Thus, also the latex users would benefit from your work: https://ctan.org/pkg/academicons


#3767 Comment 10:
Why not forking academic icons and proposing our latex-related to them?
//Edit:: Regading vim and emacs, you might find them here:
https://github.com/ryanoasis/nerd-fonts

//Edit2: they also provide a font patcher
#3767 Comment 11:
I think, there is no real need to use a font-based icon. svg images can be included more easily in JavaFX than font-based icons, like this:
https://github.com/JabRef/jabref/blob/403986f1c244723911cafadeb369064ec2f551cd/src/main/java/org/jabref/gui/IconTheme.java#L276-L282
The only exception is if the font can be accessed via [FontAwesomeFX](https://bitbucket.org/Jerady/fontawesomefx/overview). 
#3767 Comment 12:
@tobiasdiez I haven't looked at this to be honest. What about scaling? For some icons we set the size by giving the font-size like in the `EntryEditor.css`

```
.tool-bar .glyph-icon {
    -glyph-size: 18px;
    -fx-font-size: 2em;
}
```

Can we achieve consistent sizes when we use partly svg icons? I mean, I see that we used `px` here but will this be the same when not used as a font?
#3767 Comment 13:
Good point. The file-based icons are shown using 
https://github.com/JabRef/jabref/blob/403986f1c244723911cafadeb369064ec2f551cd/src/main/java/org/jabref/gui/IconTheme.java#L359-L361
`ImageView` does provide some scale mechanisms, but these are probably not accessible via css. In general, I agree that a font-based solution is desirable. My comment should just serve as a warning, that it might be not so easy to include an arbitrary font as icon sources and it may be easier to include the svg directly.
#3767 Comment 14:
Hi all. Thanks for the comments. I am currently in the process of relocating myself and my family to another country. As you can imagine, I don't have any free time on my hands, so please don't expect action here soon. If this blocks progress somewhere else, I have no problem if someone else takes over and rounds this off.
#3767 Comment 15:
Of course, no problem, @lenhard. Since the only thing missing in this PR is the additional push to shared icon, I merge now. 

I'm looking forward to see more PRs incoming as soon as your PC is relocated ;-).
--------------------------------------------------------------
--------------------------------------------------------------
#3765 Comment 1:
Cool that you have a look at the drag'n'drop functionality. It's indeed one of the major things missing in the new maintable.
I think, there are generally three different scenarios:
- Source outside of JabRef, Target maintable: This may be a pdf file (-> import as new entry), some string (-> try to parse/import) or a bib file (-> import and if target is not the maintable but the tab pane -> open as new library). 
- Target outside of JabRef, Source maintable: For this a string representation is needed (since no external application can handle BibEntries) but I'm not sure what we should serialize. The bibtex code seems like the logical choice but also the preview format (e.g. drag'n'drop to email program) or `\cite{key}` (target latex editor) makes sense. Maybe add a user preference?
- Target and source are JabRef nodes: Then it is in general desirable to not serialize the entry but pass it by reference. For example, drag an entry from the maintable to the group pane; one would need the original entry to modify the `groups` field. Not sure if we need drag'n'drop from maintable to maintable (what's the use for this?). For the implementation of these local operations by reference, I would use the following code as a starting point: https://community.oracle.com/message/10909582#10909582 (slightly modified to use Optionals instead of nulls).

#3765 Comment 2:
I implemented drag and drop a while ago for the Linked Files editor, so I know now to add serialization. Drag and drop from and to maintable could be used for reordering entries. But not sure if that makes sense. I just implemented it to test if it works in general 
#3765 Comment 3:
I agree with everything that @tobiasdiez writes. But just for the record: Turning `BibEntry` serializable is trivial. It's just a marker interface and there is no functionality to add. Just a few attributes should be marked as `transient` and that's it. Nevertheless, I think it's better to serialize the BibTeX String representation.
#3765 Comment 4:
@lenhard  In theory es, but in practice I now stumbled across the problem (again) that those javafx ObservableMaps/List/Sets etc can't be serialized. So I tried adding custom readObject/writeObject methods, but still can't serialize it, so I would prefer sticking with the parser/serialization.

Ideally we would have a method which is the exact opposite of the serializeAll() - e.g. deserialzeAll() without having to use the parser overhead. Or maybe a simple toString() - reverse 

And I come to the conclusion that this is not the best idea and we should use some trans 
#3765 Comment 5:
Yes, the javafx properties are never serializable because you cannot serialize listeners (they same applies to the event bus). But as I argued above, the best is to never serialize any Java object if drag'n'drop happens between nodes in JabRef itself. Just store a reference to the objects that are dragged.  
#3765 Comment 6:
Okay, I will try with that LocalClipboard/DragBoard Implementation
Refs #121 
#3765 Comment 7:
@Siedlerchr I added "`.bib` files to maintable. - Current behavior: dropping to tab bar works, but that just reorders the tab bar, but does not open the `.bib` file.".
#3765 Comment 8:
I'll take a look. currently I only check for files in maintable. So when I drop a bib file to the maintabe it should openn in a new tab?
#3765 Comment 9:
Yes :)

#3765 Comment 10:
If you drop onto the maintable it should import the content of the bib file into the current database. If the drop target is the tab bar, it should open the bib file as a new tab.
#3765 Comment 11:
@koppor  You might want to check out the updated description in the issue and test the current version.  In Windows, the default drag and drop  is move which also applies when using the SHIFT key. So, both result in the same event
#3765 Comment 12:
It would be nice to give visual feedback about the drop action: https://docs.oracle.com/javase/8/javafx/events-tutorial/drag-drop.htm#BABFACBF (instead of changing the color in code, add/remove a pseudo-class and style it using css).
#3765 Comment 13:
The following two issues might be relevant to this as well:

https://github.com/JabRef/jabref/issues/3258
https://github.com/JabRef/jabref/issues/2869
#3765 Comment 14:
@tobiasdiez  The main feedback I wanted was about the functionality of the modifiers and the options. 
Regarding the log statements, of course they will be deleted in final commit. 

Regarding the Local Dragboard,  the current implementation is essentially a static guaranteed thread safe singleton 
I see no advantage over initializing this as a static field which would suffer from potential thread safety on initialization, especially in the drag and drop functionality. 
#3765 Comment 15:
As we try to get ride of all singletons and static fields in `Globals`, both solutions are not perfect. But using a static field and dependency injection as much as possible should be easier to refactor than a singleton that is used everywhere directly. Threading should not be an issue as every drag & drop event should be thrown in the JavaFX thread anyway.
#3765 Comment 16:
I tested and updated the results with my observance under Xubuntu. No modifier under Ubuntu equls TransferMode.Copy
Shift on Xubuntu:  Transfermode.Move

Windows: No modifier and or shift: Transfermode.Move
CTRL Modifier : Transfermode Copy
#3765 Comment 17:
@tobiasdiez  I still don't really get how I the NewDroppedFileHandler could be changed, because they all act on dropped files. Either they import the entries or if no entries are found the file is added. So I need both methods, or if I extract the latter ones to a new class, I still would need to call the methods for moving files. Maybe you have a better idea
#3765 Comment 18:
My proposal was to split it as follows:
- `EntryFileLinker`: provides a bunch of methods that allow to move/copy/link files to a given BibEntry (which was passed as a constructor argument)
- `DatabaseFileLinker`: allows to add files to a given database (passed as constructor argument) and generate BibEntries out of the content. You are of course allowed to reuse `EntryFileLinker` if this is convenient.
- GUI stuff for the dialogs

(the names for the classes are not very good). The first two classes should reside in logic. But maybe I miss something why such a splitting is not possible. 
#3765 Comment 19:
Thanks for the quick follow-up. Merging, since I'm somewhat trigger happy right now ;-) 
--------------------------------------------------------------
--------------------------------------------------------------
#3762 Comment 1:
Oh, JabRef should inform that something happend. Otherwise, it is not
clear, why there is a star. JabRef currently does not have the power to
show what it has changed... This is strange in the case of save actions,
but this can be explained.

IMHO consistency in the UI is an important feature. In the case of pdf/ps
fields, we show a popup. I can agree that we do not support "no migration"
and prevent users of creating bibtex entries with "comment". However, the
tool itself should communicate that it changed the database!

On Feb 21, 2018 7:40 PM, "Tobias Diez" <notifications@github.com> wrote:

> *@tobiasdiez* approved this pull request.
>
> I'm happy with the current solution (i.e., only show when fields are
> merged and use warning icon).
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3762#pullrequestreview-98312196>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafvyUW7Vdo8wSLxzL43f1zCrikmhlks5tXGMFgaJpZM4SN53y>
> .
>

#3762 Comment 2:
![grafik](https://user-images.githubusercontent.com/1366654/36524309-d91c997e-17a5-11e8-9e12-3284ac39f424.png)

OK, the text might have to be adapted. Maybe, the first line could read: "Your bibliography contains review fields and possibly comment fields."
--------------------------------------------------------------
#3761 Comment 1:
This does not help, because IN THE MIDDLE the newlines are deleted. 

```
@Article{AHP1996,
  author    = {R. Alur and G. J. Holzmann and D. Peled},
  title     = {An analyzer for Message Sequence Charts},
  journal   = {Software - Concepts and Tools},
  year      = {1996},
  pages     = {70–77},
  volume    = {17},
  number    = {2},
  keywords  = {TODO, race conditions},
  owner     = {koppor},
  review    = {TSE cites it as THE definition of "race conditions" (page 27)

In the literature about MSCs, the possibility that messages may be received in a different order than the one specified is usually called a race condition [2].},
  timestamp = {2011.04.17},
}
```
#3761 Comment 2:
I reverted the revert of trimming. I think, that is a good thing to do!
#3761 Comment 3:
I'm approving this as well. Whoever merges, don't squash so @koppor gets credit as well!
#3761 Comment 4:
I treat this at hotfix. I copied the comment by @tobiasdiez to https://github.com/koppor/jabref/issues/314
#3761 Comment 5:
@LinusDietz I used the Co-authored-by: feature: https://github.com/blog/2496-commit-together-with-co-authors
--------------------------------------------------------------
#3760 Comment 1:
No activity. @tobiasdiez or @Siedlerchr please take over or just close this PR.
--------------------------------------------------------------
#3759 Comment 1:
Sorry for the mishap. Tried to update the javafxGlobalEverything branch on my fork and switched the bases by accident. Please ignore.
#3759 Comment 2:
You should now use the maintable beta branch. Do a git fetch upstream to fetch the latest version of the branch. It will tell you if your branch is even or not 
--------------------------------------------------------------
#3758 Comment 1:
I agree with Christoph, please put the Changelog entry to the top. After all, no Changelog entry is a blocker for merging most of the time, whereas a missing screenshot is not.
#3758 Comment 2:
And added tests are more important than manually tried it in JabRef ;-)
--------------------------------------------------------------
#3756 Comment 1:
Regarding integration in JabRef: In https://github.com/JabRef/jabref/pull/3704, I separated the main method completely to be able to offer a non-fat jar...

However, I would agree to integrate everything in our normal CLI and then, in the context of the Java 9 refactorings (https://github.com/JabRef/jabref/pull/3421) create finer-grained compilation units.
#3756 Comment 2:
I integrated the xmp functionality in the CLI infrastructure :)

After exiting my tool with '0' the graphical user interface starts... 
@Siedlerchr  How can I suppress the GUI?

#3756 Comment 3:
When I am right, you just need to call Platform.exit() (at least when it's the javafx application thread start )
Otherwise System.exit(0) (shuts down the Java vm and signals a success)
#3756 Comment 4:
Platform.exit() does not work. Therefore I used the other option System.exit(0).

The implementation is now ready for review. 
Where can I write the help entry for the http://help.jabref.org/en/CommandLine webpage?
#3756 Comment 5:
@johannes-manner  Okay, good to hear! Help files are all in their own Repo. Either you click on that Octocat Github thing in the right corner, or you go to that repo:
https://github.com/JabRef/help.jabref.org/blob/gh-pages/en/CommandLine.md
--------------------------------------------------------------
--------------------------------------------------------------
#3753 Comment 1:
on hold to mitigate merge conflicts in other PRs.
#3753 Comment 2:
@LinusDietz You can also use the maintable-beta branch as the base for this PR. 
#3753 Comment 3:
Rebasing this on maintable-beta sounds like a fine idea! And if you want to do more Codacy PRs on master, just make sure that they are limited to model or logic.
#3753 Comment 4:
@tobiasdiez I have merged maintable-beta into this to fix the conflicts. I think it can be merged now. The failing tests are the same as in the base branch.
#3753 Comment 5:
You could just fix the one checkstyle issue in the ActionFactory (unused import)
#3753 Comment 6:
@Siedlerchr That was part of the base branch. I fixed it there.
#3753 Comment 7:
I guess here we can squash them.
--------------------------------------------------------------
#3751 Comment 1:
Note that the screenshot shows "java" on the top left, because I run from IntelliJ. If you install JabRef from a .dmg it should show "JabRef".
#3751 Comment 2:
Nice! 
--------------------------------------------------------------
--------------------------------------------------------------
#3748 Comment 1:
What about putting it in the "Contributing" section? But not so prominently, the stuff written on this page is not that important (except the help which nobody updates except us and the translation stuff which works quite well).

By the way, why are some links with http and others with https? I noticed this recently with the donations link which only works for http.
#3748 Comment 2:
It is in the contributing section: 😇 

![grafik](https://user-images.githubusercontent.com/1366654/36400999-c2360312-15d4-11e8-91c7-7f4b60ea0d9b.png)

#3748 Comment 3:
ah sorry, its late. The location and style is fine with me. Maybe hide the url, e.g. "[We also need help with other things](contributing)".
#3748 Comment 4:
![grafik](https://user-images.githubusercontent.com/1366654/36410010-0d0fcdd4-160f-11e8-82f2-203596e48570.png)

#3748 Comment 5:
How about: "Not a Programmer? Learn how you can help."?
#3748 Comment 6:
![grafik](https://user-images.githubusercontent.com/1366654/36416028-290ee90c-1628-11e8-828f-2aaa975cd205.png)

--------------------------------------------------------------
#3747 Comment 1:
Thank you very much for your contribution! Codewise looks good!
But as we are in the migration to JavaFX, would you mind trying to implement this on top of the maintable-beta branch/javafxgloba everything? 
(I think you better open a new PR for that javafx part then)
#3747 Comment 2:
Will do, no worries. Are both branches _maintable-beta_ & _javafxGlobalEverything_ equivalent or should I choose one over the other?
#3747 Comment 3:
Please base it at `javafxGlobalEverything`, there were some major changes to the menu and toolbar as @Siedlerchr said. Thanks!
#3747 Comment 4:
@mohamean I just merged the globalEveryThing branch into "maintable-beta" thus you can now use the latter as the base. 
--------------------------------------------------------------
--------------------------------------------------------------
#3745 Comment 1:
The documentation says
> Note: If there is no author (as in the case of an edited book), then all of the above [auth...] markers will use the editor(s) (if any) as a fallback. Thus, the editor(s) of a book with no author will be treated as the author(s) for label-generation purposes. If you do not want this behaviour, i.e. you require a marker which expands to nothing if there is no author, use pureauth instead of auth in the above codes.

Thus the important property of `pureauth` is that nothing is printed when no author is specified. Could you please add a test for this too. Thanks!
#3745 Comment 2:
Side note: https://github.com/koppor/jabref/issues/74 is only partially fulfilled by this pull request. Before closing that issue there should also be tests for [pureauthors3]. But that doesn't affect this PR.

However, @krausese  if you want to do a follow-up PR, feel free to go ahead (;
#3745 Comment 3:
This one should be carefully reviewed if pureauth really brings the correct results. Only from the diff, I cannot do it. This PR is a good start and it should continued to work on.
#3745 Comment 4:
The test missed a non-set author, but a set editor. I added such a test, which showed that `pureauth` did not work. I fixed it at https://github.com/JabRef/jabref/pull/3903.

I close this PR as https://github.com/JabRef/jabref/pull/3903 is the follow up.
--------------------------------------------------------------
#3744 Comment 1:
This PR did not go into deep into the issue. Therefore, I close it.
--------------------------------------------------------------
#3743 Comment 1:
Thanks a lot!
#3743 Comment 2:
## Escapings

Look at this:

![grafik](https://user-images.githubusercontent.com/1366654/36382792-76f3ef62-158a-11e8-984d-3a1cd74c3176.png)

English file:

    Executing\ command\ \"%0\"...=Executing command \"%0\"...
    The\ marked\ area\ does\ not\ contain\ any\ legible\ text!=The marked area does not contain any legible text!

I think, one has to rewrite the English file to NOT escape `!` and `"`.

## Empty Translations

Empty strings must not be added, because of the new Crowdin workflow.

Alternative: Add English as default  (and not the empty ones)


#3743 Comment 3:
Does this run with jython?
#3743 Comment 4:
All of the code related to python 3 is within a try block. This keeps it's compatibility to python2, so it should be no problem to run it with jython.

By the way there is already a repository for a jython version which is compatible to python 3.5 here:
https://github.com/jython/jython3
But since it's not a stable version at all, I wouldn't recommend switching to jython3.
#3743 Comment 5:
@koppor In order to fix the issue with the escapings, I think I have to rework the logging output first. The output is currently not helpful at all, which is just printing a lot of unreadable spam into the console. Once this is fixed it will be much easier to see which keys are causing some trouble during the merging process.
#3743 Comment 6:
Quick update:
Today I've been working on the command-line interface using the [argparse ](https://docs.python.org/2/library/argparse.html) library. This took me way longer than I expected. Next step will be to rework the logging output, as mentioned before.
#3743 Comment 7:
@koppor I think the script is now good to go. Due to my changes in the logging functionality, I found out all malformed strings will be replaced by the correct ones but they have to be translated again, unless the formatting is corrected manually (I think there are "only" 5 malformed keys in the german file, which should be done quickly).

The command-line options are still working exactly the same as before but I also added a new option called **print**. This option allows to print specific status information for one particular file.

Examples:
`syncLang.py print missing -file JabRef_de.properties` Prints missing keys of the JabRef_de.properties file
`syncLang.py print obsolete -file JabRef_de.properties` Prints obsolete keys of the JabRef_de.properties file
`syncLang.py print duplicates -file JabRef_de.properties` Prints duplicate keys of the JabRef_de.properties file

Would you mind testing the latest version and let me know if you still want to have any changes?
#3743 Comment 8:
That comes right in time for checking the localization on the maintable beta branch!
#3743 Comment 9:
- [ ] Would it be possible that `print missing` can also go through a complete directory and check all files at once? As default, it should use the directory `src/main/resources/l10n` so that `print missing` works without any additional options.

- [ ] It should output if nothing is found -- oh, it does not output if there was something. The `status` output missing keys

    > python scripts\syncLang.py print missing -f src\main\resources\l10n\JabRef_de.properties
    INFO:root:Unable to use PathFinder class.

Otherwise, it looks good to me. Have to change the Crowdin config then. @JabRef/developers JabRef will now contain values (the english text!) for each translation in the non-English files. This is supported by Crowdin.
#3743 Comment 10:
Ok, I changed the print command. The file argument is no longer required for all subcommands (missing, obsolete, duplicates).

You can now use `syncLang.py print missing`. But keep in mind, this might be a little spammy
#3743 Comment 11:
@koppor I have the vague memory that we already discussed the problematic of having English as the default value for the other language and decided against this option because it would make the established way of editing the language files directly more difficult. Not sure how relevant this still is because every translation contribution now seems to come through crowdin.
#3743 Comment 12:
@tobiasdiez I think, it was only because we could not recognize easily with the script that the keys have been translated. For instance, following line

    OK = OK

Is this translated or not? (In German yes, in Chinese not.)

IMHO this is the edge case. With the change that the English values come into the other language files we enable the guys NOT working with Crowdin to be able to translate. For instance, @josephace135 wants to use GitHub to get rewarded via https://utopian.io.
#3743 Comment 13:
@Brainsucker92 Is it easily possible to add test cases for Python?

It would be really great to test following:

Translated:

```
Action=Aktion
%0\ contains\ the\ regular\ expression\ <b>%1</b>=%0 enthält den regulären Ausdruck 
<b>%1</b>
The\ marked\ area\ does\ not\ contain\ any\ legible\ text\!=Der markierte Bereich enthält keinen lesbaren Text\!
Generating\ BibTeX\ key\ for=Erzeuge BibTeX-Key für
Hint\:\ To\ search\ specific\ fields\ only,\ enter\ for\ example\:<p><tt>author\=smith\ and\ title\=electrical</tt>=Hinweis\: Um ausschließlich bestimmte Felder zu durchsuchen, geben Sie z.B. ein\:<p><tt>author\=smith and title\=electrical</tt>
```

Not translated:

```
Action=Action
%0\ contains\ the\ regular\ expression\ <b>%1</b>=%0 contains the regular expression <b>%1</b>
The\ marked\ area\ does\ not\ contain\ any\ legible\ text!=The marked area does not contain any legible text!
Generating\ BibTeX\ key\ for=Generating BibTeX key for
Hint\:\ To\ search\ specific\ fields\ only,\ enter\ for\ example\:<p><tt>author\=smith\ and\ title\=electrical</tt>=Hint: To search specific fields only, enter for example:<p><tt>author=smith and title=electrical</tt>
```
These are the strings, I would look up manually and think whether they work. One can document code by adding test cases. And it would be really great if we had that for our syncLang.py script, too.
#3743 Comment 14:
@koppor Yes, those test cases are possible for sure, by using the [unittest](https://docs.python.org/2/library/unittest.html) library.
I might add another python file with sone test cases later.

By the way, I will be at Stuttgart University at 3:15 pm today
#3743 Comment 15:
@Brainsucker92 forget about that test cases.

We keep the non-translated strings removed. Reason: IntelliJ can perfectly deal with it:

![grafik](https://user-images.githubusercontent.com/1366654/36629586-ca241d44-1957-11e8-9c21-89fd7d074cdf.png)

#3743 Comment 16:
@Brainsucker92 I am sorry to say, but could you remove the functionality to add missing keys in the other language files? Reporting etc. is OK, but not the addition...

Reason: I find non-existing lines better than existing lines with strings from other languages.
#3743 Comment 17:
Sure, I can do that. But i think i'll do some other changes as well. The  `__update_properties` method seems to be way to overloaded by things that should be moved to external methods. 
#3743 Comment 18:
Sorry for the delay. I was working on another improvement of the script but due to upcoming exams I think I won't be able to complete the improvement any time soon. So I simply uploaded the change you requested.
#3743 Comment 19:
Hi, I just tried to run your script from gradle under Windows and got (apart for the missing python 3 exception):
I tried to run that on a new empty property file for #3776 

Actually it fails already with da_properties

```
$ ./gradlew localizationUpdateExtended
Task :jmh Last added: null
:localizationUpdateExtendedINFO:root:Unable to use PathFinder class.
Traceback (most recent call last):
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 660, in <module>
    main()
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 656, in main
    parsed_args.func(parsed_args)
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 594, in update_command
    syncer.update_properties()
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 296, in update_properties
    self.__update_jabref_properties()
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 303, in _SyncLang__update_jabref_properties
    self.__update_properties(main_property_file=self.main_jabref_preferences, other_property_files=self.__other_jabref_properties())
  File "E:\workspace\JabRef\jabref\scripts\syncLang.py", line 460, in _SyncLang__update_properties
    if keys[key] != "":
KeyError: u'What\\ is\\ Mr.\\ DLib?'
 FAILED
```



#3743 Comment 20:
Thanks for the hint. Should be fixed now, try again.
#3743 Comment 21:
I fixed it myway (I switched to my Pyhton 3 installation)

```python
         if key is not None:
                    # Do not write empty keys
                    if keys.get(key) != "" and keys.get(key) is not None:
                        other_lines_to_write.append(Keys.format_key_and_value(key=key, value=keys[key]) + "\n")
                else:
```

That worked for me. However, no keys are copied to my empty properties. Only newlines and comments.
```
INFO:root:Processing file 'Menu_tl.properties' with 0 Keys
INFO:root:	added 110 missing keys
```

Just create a new empty property file:
Menu_tl.properties
JabRef_tl.properties

=> No keys are inserted Or is this expected and managed by crowdin?

https://stackoverflow.com/questions/33727149/dict-object-has-no-attribute-has-key
#3743 Comment 22:
Yes, because that's what @koppor requested to change. 

> could you remove the functionality to add missing keys in the other language files?

That's what I did.

All you have to do to revert this change is to uncomment lines 448 and 450.
#3743 Comment 23:
Okay: I have an idea. After I found out that missing properties make JabRef crash (Those keys that are used in the fxml files) it would be wise to either auto add these ones. Or you just could add an additional gradle task to add the missing keys.
#3743 Comment 24:
To be honest: In my opinion we should seriously consider rewriting the whole script to java, if there is no specific reason not to do this. The more changes are made on the script and the more functionality we add, the more complex the script becomes. And at some point python is no longer a viable language because it's primarily well suited for small and simple code which is slowly but surely overextended. Rewriting into Java would also solve any compatibility problems with py2.x and py3, and also get rid of any jython requirement for the whole JabRef project (if there is no other python code in use).
#3743 Comment 25:
Yes, that sounds like a valid reasonable thing. I think for the moment we can keep it as is and we should discuss this in the next devcall.
#3743 Comment 26:
@tobiasdiez Is it really true that JabRef crashes due to missing keys? I thought, you wrote a comment at some other place that this is not really the case and this can be fixed. I would like to keep the files clean. Now that [utopian](https://utopian.io/) allows for having [crowdin](http://crowdin.com/) as platform to get [Steem Coins](https://bitcoinblog.de/2016/07/19/steem-die-kryptowaehrung-die-nicht-durch-mining-sondern-durch-content-entsteht/), I would say, we do not need to change our workflow and let the language files be lean and clean. Especially because of the issue `OK=OK`. Is this translated or not (see https://github.com/JabRef/jabref/pull/3743#issuecomment-367748764)
#3743 Comment 27:
I tried to collect the options using [MADR 2.0.1](https://adr.github.io/madr/)

# Only translated strings in language file

## Context and Problem Statement

JabRef has translation files `JabRef_it.properties`, ...
There are translated and unstranslated strings.
Which ones should be in the translation file?

## Decision Drivers

* Translators should find new strings to translate easily
* New strings to translate should be written into `JabRef_en.properties` to enable translation by the translators
* Crowdin should be kept as translation platform, because 1) it is much easier for the translators than the GitHub workflow and 2) it is free for OSS projects.

## Considered Options

* Only translated strings in language file
* Translated and untranslated strings in language file, have value the untranslated string to indicate untranslated
* Translated and untranslated strings in language file, have empty to indicate untranslated

## Decision Outcome

Chosen option: "Only translated strings in language file", because comes out best (see below.

## Pros and Cons of the Options

### Only translated strings in language file
* Good, because Crowdin supports it
* Bad, because translators need tooling to see untranslated strings
* Bad, because issues with FXML (https://github.com/JabRef/jabref/issues/3796)

### Translated and untranslated strings in language file, have value the untranslated string to indicate untranslated
* Good, because no issues with FXML
* Good, because Crowin supports it
* Bad, because untranslated strings cannot be identified easily in latin languages

### Translated and untranslated strings in language file, have empty to indicate untranslated
* Good, because untranslated strings can be identified easily
* Good, because works with FMXL (?)
* Bad, because Crowdin does not support it

#3743 Comment 28:
I just merged to move things forward, but the discussion on the options is not finalized.
#3743 Comment 29:
I think, we need the script if Crowdin changes its policy or vanishes from the market. In all other cases, our current workflow should be "good enough"? We can add new English language keys (by following the output of the failing tests). These are then synced to Crowdin. After a translator translated something, it goes into JabRef as pull request.

Nevertheless, it is nice to have and other projects may benefit from it. Thus, a pip package (and thus a separate repo) might be the way to go.
#3743 Comment 30:
Regarding the FXML issues, @tobiasdiez  fixed that in #3820 
--------------------------------------------------------------
#3742 Comment 1:
Changelog? And it looks like this is the same PR as  #3731
#3742 Comment 2:
I didnt read it so the #3731 but yes the idea is the same now that i gave a look.
#3742 Comment 3:
Could you add a screenshot so that we can decide which one looks better? Codewise, this is beter than #3731.
#3742 Comment 4:
Yep but after i fix a couple of things because i read the #3731 and need to implement the "deselect all changes" ChoiceBox and maybe i had an other idea. I'll post it as soon as i finish.
--------------------------------------------------------------
--------------------------------------------------------------
#3740 Comment 1:
We have combined our two efforts in inlining and updating the MODS XSD files.

This PR fixes https://github.com/JabRef/jabref/issues/3737 and https://github.com/koppor/jabref/issues/307
--------------------------------------------------------------
#3739 Comment 1:
@Siedlerchr please decide whether you take over or just close the PR.
--------------------------------------------------------------
--------------------------------------------------------------
#3734 Comment 1:
Please merge JabRefs' branch `master` (should be available at `upstream/master`) to resolve conflicts in CHANGELOG.md
#3734 Comment 2:
The tests are still failing. From looking at the code, I think that "Mär" is not parsed correctly. Could you please investigate this?

Once all tests are passing on travis, I think we can merge this.
#3734 Comment 3:
I'll merge into `wip`, finish the PR and merge it into `master`.
#3734 Comment 4:
I fixed the issues at https://github.com/JabRef/jabref/pull/3742

1. The java files had the wrong encoding (UTF8 was not used)
2. The implementation for "mär" and "märz" was missing.
--------------------------------------------------------------
#3733 Comment 1:
Why logic.importer.migrations? Sure it would not be in a wrong place, but we put it in a top-level package on purpose as this should be immediately evident that this is caused by JabRef design decisions and not hidden inside logic.importer where standard formats should be put. Not sure what others think.
#3733 Comment 2:
Agree with @stefan-kolb  What has a migration to do with import?
Top level logic.migrations should be the way to got
#3733 Comment 3:
+1 for logic.migrations
#3733 Comment 4:
The failing test is probably due to caching on travis and a result from #3713.
I cleared the cache in travis for master and this build. Hope that's enough.,
If not, delete it again: https://travis-ci.org/JabRef/jabref/caches 
--------------------------------------------------------------
#3732 Comment 1:
I don't see new translations, only removed lines?! Close?!
#3732 Comment 2:
This seems to be a revert of https://github.com/JabRef/jabref/pull/3719

If this happends more often, we have to debug:

1. What change was in `JabRef_en.properties` since the previous PR of Crowdin
2. What did Change at Crowdin's side?
--------------------------------------------------------------
--------------------------------------------------------------
#3726 Comment 1:
For future PRs you should specify a short title describing the content of the PR.
(github takes the title from the first line of the commit) 
In the body of the PR you should add Fixes #xxx then github will close the corresponding issue (if it's in the main repo) automatically 
#3726 Comment 2:
After merging, I realized that this PR did not build on master. The branch this built on will eventually also be merged into master, which will get the change in. Nevertheless, with an issue like this there is no reason to base on a branch different from master.

Next time, please make sure that you base on master.
#3726 Comment 3:
The changelog should be

    ... [koppor#298](https://github.com/koppor/jabref/issues/298)

No space and `koppor` in front. We will fix that in master as soon as comment-tab is merged :)

Nevertheless thank you for the quick action taken @grotepfn. Hope to see another issue fixed.
--------------------------------------------------------------
--------------------------------------------------------------
#3724 Comment 1:
@lenhard well that's why I have added microcommits with the corresponding messages
#3724 Comment 2:
Point taken :) You just don't see these messages when you go to the code page of the PR 
--------------------------------------------------------------
--------------------------------------------------------------
#3721 Comment 1:
@Brainsucker92 I added `Fixes #2831` to your PR description. Otherwise, GitHub does not link the issue properly. --> GitHub has no linking functionality in the header
#3721 Comment 2:
Alright, I made a couple of changes. Hopefully everything seems to be better and runs nice and smoothly.
#3721 Comment 3:
Actually I'm thinking if it makes sense to rename the `executeAndReturn` method in the ExecutorService simply to `execute` which overloads the execute method and allows to execute tasks with returning values and without returning value.
#3721 Comment 4:
@Brainsucker92 If I understand correctly, you are searching for a feature not available in Java: https://stackoverflow.com/a/2439798/873282
#3721 Comment 5:
It will work perfectly, because both parameter lists of the functions are different. This allows to create two methods with different returning values. Just tested it in my IDE and everything is just fine.
#3721 Comment 6:
Sorry, one more thing:

- [x] Change in CHANGELOG.md described

And, is that possible without huge effort? 😇 

- [x] Manually tested changed features in running JabRef

#3721 Comment 7:
For testing the abbreviation I have to have a fairly large sized BibTeX database, which I currently don't have, right? So where to get any random database in order to test these changes?
#3721 Comment 8:
@Brainsucker92 I have to confess that we don't have a huge bibtex file. Could write a generator? 😇 This would help us so much for testing huge databases.
#3721 Comment 9:
@koppor  We have some script in /scripts/bib-file-generator.rb
Generates 100,000 times the same entry 
#3721 Comment 10:
sorry for being picky, since I didn't have a ruby interpreter installed, I quickly wrote a generator script myself using python.
#3721 Comment 11:
I think we tortured @Brainsucker92 long enough 😈 
#3721 Comment 12:
@brainsucker92 Thank you for the PR, the quick reactions and the patience! We would love to see more PRs from you! Especially your Python skills are interesteing. :innocent: our syncLang.py script needs updates cause of our migration to crowd in...
#3721 Comment 13:
@koppor Thanks a lot for your appreciation! Of course I'd like to continue contributing to this project in future. Unfortunately, my skills in python are pretty rusty because last time I actively coded in python was back then with py2.5. Thus I don't have that much experience with modern Python3.X programming. But if there are some minor changes to make I'll give it a shot to do so. I had a quick look at syncLang.py and code quality seems to be pretty good in the script.
#3721 Comment 14:
The sync lang python script is still 2.x because it's executed with jython which does not work with python 3.x (we learned that the hard way... 😯) 
#3721 Comment 15:
@Brainsucker92 One has to think into the aims what the script does. I think, it currently does not handle escapes the way as [Crowdin](http://crowdin.com/) does. Maybe, you can run the script and check what it modifies and which errors it reports. See https://github.com/JabRef/jabref/issues/3573#issuecomment-357653588 for a discussion. You can follow up there in case you want to dive into this thing.
#3721 Comment 16:
@Brainsucker92 Could you write a short personal email so that I have your contact data?
#3721 Comment 17:
@koppor sure, just sent a mail to kopp.dev@gmail.com
--------------------------------------------------------------
#3720 Comment 1:
Ok, I tried to extract the static dependency to the ProtectedTermsLoader. Doing this via method parameters is insane change propagation. It goes from the formatters to the cleanups to the BibTexParser and then you have to change practically the entire logic package. This is similar to the FileUpdateMonitor and not a feasible path of action. We don't want to insert ten parameters into every method in logic because something down in the stack might need it.

Instead I did something else: The ProtectedTermsFormatter does implement the Formatter interface, but it does not fit into the Formatter framework. It is the only formatter that is dependent on external configuration and preferences. Because of this, I took it out of the framework classes and add it in the GUI, in those classes that actually need it and that have the necessary information to construct an instance of it. This results in little code changes. That's much better than propagating method parameters everywhere.

This PR is again ready for review.
#3720 Comment 2:
From my pov it's a go now..I think we can merge it.
--------------------------------------------------------------
#3719 Comment 1:
This is not really a change. Do we need to merge it anyways?
#3719 Comment 2:
Yes, we have to. Did our english language file change somehow.
--------------------------------------------------------------
#3718 Comment 1:
Ok, I've taken out the conversion of ß and documented this in the code. If there are no other characters that we want to exclude then this PR should be good to go.
--------------------------------------------------------------
#3717 Comment 1:
Kgtn
#3717 Comment 2:
Lgtm 
#3717 Comment 3:
Hello,
thanks for the quick code review! Sorry for the inconvenience with the code formatting. I changed my formatting options within the IDE and pushed the correctly formatted version again.
#3717 Comment 4:
Does this fix #2831?
#3717 Comment 5:
@Brainsucker92 Perfect, this looks much better!

@koppor: No, it does not. To do so, you would have to replace lines 57-60 in this PR with actual parallelism.

This could be tried as part of this PR, but it can also be taken in a new one. @Brainsucker92 Are you interested in parallelizing the abbreviation as part of this PR? If so, please let us know and go ahead. Otherwise we can merge this. 
#3717 Comment 6:
Unfortunately I'm not completely familiar with parallel programming yet. Although it's a quite interesting topic. I might give it a shot, hopefully I won't mess up anything.
#3717 Comment 7:
Ok, so I merge this PR now and you are welcome to open a new one for the changes concerning parallelism. 
--------------------------------------------------------------
#3715 Comment 1:
Ok, with these changes the code is good to merge and, thus, we have positive reviews from two developers. So, I'll merge the PR. Once again, thanks for your contribution!
#3715 Comment 2:
@Escoul Thank you for working on that and giving good answers to the questions. What would you think to add an architectural decision on your conditional if? https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#when-making-an-architectural-decision

All in all, we would be happy to see more contributions from your side. We use the label [good-first-issue](https://github.com/JabRef/jabref/labels/good%20first%20issue), where more issues will be tagged. You can also have a look at https://github.com/koppor/jabref/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22. Or hop by at my office in V38 in Stuttgart. 😇 
--------------------------------------------------------------
--------------------------------------------------------------
#3713 Comment 1:
@Siedlerchr Can you please try to import the test file in Linux. The user reports that JabRef freezes after he confirms the import dialog but I can't reproduce the problem here on Windows. Thanks.
#3713 Comment 2:
Xubuntu 16.04 works fine. No issues. 
#3713 Comment 3:
The problem is that in the xml file from the user there are records in which apparently many fields are null and thus result in an NPE.
I fixed some of them.

The root problem I see here is that this thing like Titles etc all are serialized to their own object and not to collections  and some of them might be null.
If it were mapped to collections we could just initalize it with empty collections and avoid the null shit. 
Maybe this approach helps:
http://blog.bdoughan.com/2012/11/creating-generic-list-wrapper-in-jaxb.html
#3713 Comment 4:
I think I found an idea:
First we generate an XSD file from a concrete xml file and then use that as input for xjc. This should hopefully be able to generate lists from what I read.. Or we convert the dtd to xsd first.

#3713 Comment 5:
Coday is just complaining about the juntit 5 annotations, but that's not your fault. Otherwise from my side code is good as well.
--------------------------------------------------------------
#3712 Comment 1:
Fix for #2796 
#3712 Comment 2:
Thanks for your contribution, codewise looks good. Please have a look at the checkstyle issues (just click on the failing Travis test to see details)
#3712 Comment 3:
I am confused about why the test is failing. I don't I think I have touched any of that functionality.
#3712 Comment 4:
Yes, the test is completely unrelated to this PR. I'll merge now. Thanks again for your contribution.
#3712 Comment 5:
@cerrisantos Thank you for your contribution. We would be happy to see more contributions from your side. We use the label good-first-issue, where more issues will be tagged. You can also have a look at https://github.com/koppor/jabref/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22. Or hop by at my office in V38 in Stuttgart. 😇
--------------------------------------------------------------
#3711 Comment 1:
I am not sure If I should merge this or wait for #3704 
@koppor  Merge or wait for #3704 ?
#3711 Comment 2:
I am still struggling with Install4J. Not sure, when I'll have one that fight.
--------------------------------------------------------------
#3710 Comment 1:
This pull request is ready for the final review and for merging into master :)
#3710 Comment 2:
For my general understanding and my newbie state:

```
 public static void writeXMP(Path path,
            Collection<BibEntry> bibtexEntries, BibDatabase database,
            boolean writePDFInfo, XMPPreferences xmpPreferences) throws IOException, TransformerException {

        Collection<BibEntry> resolvedEntries;
        if (database == null) {
            resolvedEntries = bibtexEntries;
        } else {
            resolvedEntries = database.resolveForStrings(bibtexEntries, false);
        }

        try (PDDocument document = PDDocument.load(path.toFile())) {
            if (document.isEncrypted()) {
                throw new EncryptedPdfsNotSupportedException();
            }

            if (writePDFInfo && (resolvedEntries.size() == 1)) {                // 1
                XMPUtilWriter.writeDocumentInformation(document, resolvedEntries
                        .iterator()
                        .next(), null, xmpPreferences);
                XMPUtilWriter.writeDublinCore(document, resolvedEntries, null, xmpPreferences);
            }

            PDDocumentCatalog catalog = document.getDocumentCatalog();
            PDMetadata metaRaw = catalog.getMetadata();`
```

For me, it makes no sense to write more than one BibEntry to the metadata of a PDF file.  Currently the implementation in XMPUtilWriter is also limited to a single element, but implemented as a list. (See line 260 and 110).

Can I drop the list?

@Siedlerchr 
@koppor 
@tobiasdiez 
#3710 Comment 3:
I have no real idea concerning your question about the list. I would say you could safely remove it, but I'm not sure. What happens if multiple entries have the same file linked and write their metadata into it (e.g. the pdf is a book and I have a bunch of `bookchapters` as separate entries)?
#3710 Comment 4:

XMPUtilWriter, line 147,148

Before new metadata is written to the PDF, all DublinCoreSchemas are removed. So I think, that there is currently no option to write more than one metaschema.
In your case, I would assume that the last written data is visible (others lost).

#3710 Comment 5:
Well, does the Dublin core schema specify. Multiple entries? 
#3710 Comment 6:
Specifications are available at. http://dublincore.org/specifications/. The abstract model is there: http://dublincore.org/documents/abstract-model/

![grafik](https://user-images.githubusercontent.com/1366654/36341139-e8883824-13e9-11e8-8101-7c1db9b4a86f.png)

In case, I interpret that correctly, one record contains one description, which may contain multiple record sets.

This is the edge case, where one wants to write XMP to a proceedings.

Example:

- One chapter: https://link.springer.com/chapter/10.1007/978-3-540-79230-7_4
- Full proceedings: https://link.springer.com/book/10.1007/978-3-540-79230-7
#3710 Comment 7:
I considered all comments to the source code and refactored my code. 

The last commit alters the behavior of the XMP import:
The previous implementation only imports the first entry and drops the others. The current implementation imports all metadata entries. My thoughts are as follows: It is easier to import additional entries and delete not needed ones compared to importing single entries by hand, if the needed entry is not the first one. 

--------------------------------------------------------------
--------------------------------------------------------------
#3708 Comment 1:
Screenshot: 
![grafik](https://user-images.githubusercontent.com/1366654/36230180-d60d2df6-11d9-11e8-99b5-d01f8055d960.png)

There is a space between the other icons. Until the cool solution from https://github.com/JabRef/jabref/issues/3535#issuecomment-352068826 is implemented, I am in favor of using this approach. Reason: This makes the JabRef feature explicit.

![papers search](http://s3.amazonaws.com/mekentosj-papers3-support-images/KnowledgeBase/Papers%203%20for%20iOS/advanced_search7_p3ios.PNG).
#3708 Comment 2:
Well, if @koppor really wants this I'm fine with it although I bet that more users get confused by a cyan-highlighted icon than they are getting enlighted by it.

--------------------------------------------------------------
#3704 Comment 1:
The fxml and css files should lie in the same folder as the view `GroupTreeView`
#3704 Comment 2:
@koppor Please don't move the fxml and css files from source to resources if this somehow possible! These files function as code (in the sense that you could alternatively define everything in java if you want) and it is very convenient to have them right next to the java classes (controller, view model) since you usually edit them in parallel. 
#3704 Comment 3:
`AbstractDialogView.class.getResource("Main.css")` returns `null` with the current multi-module build. I have no clue how to convince the JRE (?) to also search next to the class files. Maybe, I have to manually adapt the gradle file to copy all files not ending with `.java` to the output.
#3704 Comment 4:
Mhhh, ok...so far it worked with
https://github.com/JabRef/jabref/blob/6283bd542f82c852a70fb796f623e6345e8e9633/build.gradle#L68-L70
#3704 Comment 5:
**Solved via https://github.com/JabRef/jabref/pull/3704/commits/9bfea572ec15ab80e11e6405cd39e04d75f4430f**

Current state: Compiles fine on Windows, but on Linux:

```
FAILURE: Build failed with an exception.

* Where:
Build file '/home/ubuntu/jabref/org.jabref.logic/build.gradle' line: 73

* What went wrong:
Execution failed for task ':org.jabref.logic:processResources'.
> No signature of method: static org.gradle.api.Project.getRootProject() is applicable for argument types: () values: []
```

Reproducible via

    docker run -it --rm --name my-maven-project -v "d:/git-repositories/jabref/jabref:/usr/src/mymaven" -w /usr/src/mymaven jabref/javafx ./gradlew release

#3704 Comment 6:
This will be frozen until https://github.com/JabRef/jabref/pull/3733 is merged. Reason: That PR also does huge refactorings.
#3704 Comment 7:
I close this PR as this is unfinished.

I created https://github.com/JabRef/jabref/pull/3913 as follow up. The small changes are filed as PRs https://github.com/JabRef/jabref/pull/3907, https://github.com/JabRef/jabref/pull/3908, https://github.com/JabRef/jabref/pull/3909, https://github.com/JabRef/jabref/pull/3910, https://github.com/JabRef/jabref/pull/3911, https://github.com/JabRef/jabref/pull/3912

The only thing not followed-up is the gradle multi-module-build (Co-Authored-By @stefan-kolb). I propose to leave it to @florian-beetz to investigate the gradle scripts and see whether they help him to get JabRef ready for Java9.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3698 Comment 1:
Closed in favor of #3701
--------------------------------------------------------------
#3697 Comment 1:
Ohoh... Have they gotten you too to waste... Ehr... Spent some of your precious time on JabRef?! 😉
#3697 Comment 2:
Welcome. Your PhD time was just extended by several months. (;
--------------------------------------------------------------
--------------------------------------------------------------
#3695 Comment 1:
The XML files are generated for the test cases. Please adopt `.editorconfig` to match the formatting of the files and not the other way round.
--------------------------------------------------------------
#3694 Comment 1:
Thanks for your contribution!
Regarding your questions, I can only answer some of them. 
1, I currently are on my mobile so I can't dig into that much but sounds like an idea. 
You could look what the biblatex manual says about the possibile contents of the field. That's our reference when in doubt about a field 

2, maybe also a good idea
3 could make sense if the same 
4 sure, code improvement is always good if it's within the scope of the implementation Regarding of finals, you can omit  them in parameters


Regarding test, you could migrate them to junit 5 if not already done. For examples you can look at the fetcher tests. Just a bit different Syntax 
#3694 Comment 2:
Ok, so I added some more tests and PAGES field checks. Nevertheless I don't know how to upgrade tests to JUnit5 (I mean that there is something more to to than import BeforeEach instead of Before and I have no idea what it is). Any tips?

@tobiasdiez - in that case compareSingleField would return for example EMPTY_IN_ONE constant, where my if statement require 'NOT_EQUAL' so there is no problem :) anyway I've added test to cover that case

Also I've made some cleanup and refactor. I know, a lot of finals, but imo it prevents silly mistakes like reassigning values to function parameters (especially error prone in constructors).

And I've merge master into my branch.

So... How about now?

----------------

EDIT: Codacy/PR Quality Review yells that there is something wrong, but when I click 'Details' there is website with 'Request error: Missing parameter: prid' message :/
#3694 Comment 3:
Thank you for your contribution 😄 👍 
--------------------------------------------------------------
--------------------------------------------------------------
#3691 Comment 1:
Is this fix also needed for the new maintable? I would prefer if you push such fixes directly onto this new branch. 
#3691 Comment 2:
@tobiasdiez  There the fix is already present, the whole method is wrapped in the FX Thread in that branch
--------------------------------------------------------------
#3690 Comment 1:
Thanks for your contribution! I have tested the changes locally and it works as expected.
A little step for you, a great step for ~~humanity~~ JabRef users ;)
Just add the suggestions by  @tobiasdiez  and we can merge it in. 

PS: If you include the word  `Fixes #xxxx` then the corresponding issue will be closed automatically when the PR is merged. 
#3690 Comment 2:
Thank you for your pointers! I have locally added `ButtonData.YES`, and now I will attempt to prepare a test suite for the `remove()` method at least, and push everything out when it's ready. :smile: 
#3690 Comment 3:
Okay, I pushed out the changes. Adding the button data restored the original button order (at least on Linux), but the remove button is now clearly the default, and as far as I can tell from [JavaFX docs](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ButtonBar.html) this is the desired behaviour.

The test code I'm not too proud of -- there's some weird hacking going on there to get the tests running, and I had to balance between not making them brittle and not worsening the implementation's readability just for tests' sake. If you have ideas for improvements, I'd be happy to go back and fix the ugliness.
#3690 Comment 4:
Well, if I'm this close, might as well try and make this PR as good as possible!

I've added the suggested changes. However, I did leave some of the parentheses as they were -- near those long mock setup calls to be precise, because I couldn't make them look decent otherwise.
#3690 Comment 5:
Nice, thanks again for your contributions. We are looking forward to see more PRs from you 😄 .
--------------------------------------------------------------
#3689 Comment 1:
It would be nice if you could take a look at this, too: I have no idea if its a stylesheet issue
https://github.com/JabRef/jabref/issues/3639
--------------------------------------------------------------
#3688 Comment 1:
A native solution is avaiable with JDK 10: https://bugs.openjdk.java.net/browse/JDK-81870747
Further features (e.g. dragging to another tab pane or to a non fx thing will be avaiable in version 11:
https://bugs.openjdk.java.net/browse/JDK-8092098
#3688 Comment 2:
This PR is now ready for review.
--------------------------------------------------------------
#3685 Comment 1:
Thanks for spotting the typo! Indeed we don't elect a mayor  when we are talking about major code changes  ;)
--------------------------------------------------------------
#3684 Comment 1:
Xbuntu 16.04
![image](https://user-images.githubusercontent.com/320228/35766756-02f75a6c-08de-11e8-9e02-90122640e0e7.png)

#3684 Comment 2:
@Siedlerchr Thanks a lot for the active support! Only four more menus to go...
#3684 Comment 3:
@tobiasdiez  What do we do with the actions that require a BasePanel instance? For Example the Content Selector Dialog
#3684 Comment 4:
For these actions that work against the currently open database, I wrote a small wrapper `OldDatabaseCommandWrapper`. This is a bit ugly and should be changed in the long term but I didn't had the motivation to change all actions in `BasePanel`. So for the content selectors, you just pass `Actions.MANAGE_SELECTORS`.
#3684 Comment 5:
I now converted the tools menu - only Push to external files and OpenOffice is missing. For the latter I was not sure how I should show that side pane (same applies to Web Search as well)
#3684 Comment 6:
This is the current state:
![image](https://user-images.githubusercontent.com/5037600/36317375-31da9452-133d-11e8-8a8a-d963c012e13e.png)

Everything you see is JavaFX and only two menus are missing. Concerning the color, we still have to experiment a bit (you are welcome to do so, just play around with `fx-theme-base` in `main.css`). Here in a typical business-blue:
![image](https://user-images.githubusercontent.com/5037600/36317200-c1cc7266-133c-11e8-8822-82eb5a37e9e2.png)

#3684 Comment 7:
Yeah! Which menus are missing? Then I could try to work on that
#3684 Comment 8:
Library and Quality are the only ones missing.
#3684 Comment 9:
I tried to convert some more actions, but still getting some NPE when I try to call frame.getCurrentBasePanel() inside the action...
That's the only showstopper atm. 
#3684 Comment 10:
This PR is now ready for review.
However, it is big enough to be completely unreviewable. Sorry for this, but converting the menu was not possible in smaller steps. I thus would propose to merge it (into the javafx branch) and let our users test it thoroughly. I clicked on every menu item to see if something happens and no exception is directly thrown. But of course is only a very shallow test and I'm pretty sure some functionality is broken with this PR.

Btw, nice side-effect: JabRefFrame has a 30% size decrease (-800 lines net, but still sits at 1700).

Thanks @Siedlerchr for the help! @person who merges: please don't squash the commits.
#3684 Comment 11:
I will do play around with the menu items tomorrow and see if I encounter any erros.
Edit// When you open a dabatase for the first time, the group side pane covers nearly the width of the whole window. Seems like to be sth wrong with the pref sizes
#3684 Comment 12:
I did an extensive test and fixed some issues I encountered.
The rest works as expected.
The only issue I have is staring:; The group panel pref? size is set to half of the window.
Resizing the window to the right makes the groups Panel to increase it's size, too. 
Oh, and when I decrease the window width from right to left, the groups panel seems to keep it's size

![grafik](https://user-images.githubusercontent.com/320228/36397292-7659cfa8-15c2-11e8-9934-756c7ba7baee.png)
After resize: 
![grafik](https://user-images.githubusercontent.com/320228/36397296-7d84f92e-15c2-11e8-8c03-7e9fd1ba6fb3.png)


A more general thing which currently fails: Undo.
````
22:09:49.572 [JavaFX Application Thread] ERROR org.jabref.gui.BasePanel - runCommand error: field value must not be null
java.lang.NullPointerException: field value must not be null
	at java.util.Objects.requireNonNull(Objects.java:228) ~[?:1.8.0_162]
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:396) ~[main/:?]
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:442) ~[main/:?]
	at org.jabref.model.entry.BibEntry.setCiteKey(BibEntry.java:189) ~[main/:?]
	at org.jabref.gui.undo.UndoableKeyChange.undo(UndoableKeyChange.java:39) ~[main/:?]
	at javax.swing.undo.CompoundEdit.undo(CompoundEdit.java:63) ~[?:1.8.0_162]
	at javax.swing.undo.UndoManager.undoTo(UndoManager.java:335) ~[?:1.8.0_162]
	at javax.swing.undo.UndoManager.undo(UndoManager.java:413) ~[?:1.8.0_162]
	at org.jabref.gui.undo.CountingUndoManager.undo(CountingUndoManager.java:30) ~[main/:?]
	at org.jabref.gui.BasePanel$UndoAction.action(BasePanel.java:1969) ~[main/:?]
	at org.jabref.gui.BasePanel.runCommand(BasePanel.java:972) ~[main/:?]
	at org.jabref.gui.actions.OldDatabaseCommandWrapper.execute(OldDatabaseCommandWrapper.java:37) ~[main/:?]
	at org.jabref.gui.actions.JabRefAction.lambda$2(JabRefAction.java:23) ~[main/:?]
	at org.controlsfx.control.action.Action.handle(Action.java:419) ~[controlsfx-8.40.15-SNAPSHOT.jar:8.40.15.SNAPSHOT]
	at org.controlsfx.control.action.Action.handle(Action.java:64) ~[controlsfx-8.40.15-SNAPSHOT.jar:8.40.15.SNAPSHOT]
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
	at javafx.scene.control.MenuItem.fire(MenuItem.java:462) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ContextMenuContent$MenuItemContainer.doSelect(ContextMenuContent.java:1405) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ContextMenuContent$MenuItemContainer.lambda$createChildren$343(ContextMenuContent.java:1358) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
```
#3684 Comment 13:
For some reason, I am getting localization warnings when executing this branch, e.g.:
```
14:50:52.075 [JavaFX Application Thread] WARN  org.jabref.logic.l10n.Localization - Warning: could not get menu item translation for "Library" for locale en
```
Apart from that, a bigger thing that is still missing imho are most of the toolbar items.

We definitely should do one more release, before we merge this. Imho, this might even justify upgrading the version number to JabRef 5.0
#3684 Comment 14:
@lenhard Which toolbar icons do you miss? I added all which I found reasonable to be placed that prominently (e.g., actions that the user does on a regular basis). Better have too few icons than too many, in my opinion.
#3684 Comment 15:
I tried to merge master into this and hope I did not break too many features on the way. Feel free to revert if it doesn't work out. We really need more frequent synchronization, otherwise there is no change of getting this together. Imho, this branch should be synced very urgently.

Here's the toolbars of this branch and master:
![toolbar](https://user-images.githubusercontent.com/1515701/36431787-c2014bca-1658-11e8-998d-894ef8edadc2.png)
That is a HUGE difference in available functionality. I think if we drop nearly all toolbar items, then many users will be pissed.

Added to that: The Web search sidebar needs to be rewritten as well. At the moment it basically crashes when you resize.

#3684 Comment 16:
New toolbar:

![grafik](https://user-images.githubusercontent.com/1366654/36431800-ca829e70-1658-11e8-8af8-89ffecaff8f2.png)

Way too empty for me!!

Old toolbar:

![grafik](https://user-images.githubusercontent.com/1366654/36431925-2e72ba5a-1659-11e8-8f21-739b93f58e40.png)

I marked the things absolutely necessary for me (refs https://github.com/JabRef/jabref/pull/3636). I don't use the other buttons. I toggle the interfaces via the full menu or via shortcut. copy and paste also not via these menus. Navigation also not via the toolbar.

As "good developers" we could have a user voting.

Or do we have Azure Analytics in place saying us which buttons are used?

Current opinion: Add my loved buttons and install Azure Analytics in parallel for that. Release 4.2 and collect statistics for JabRef 4.3.

#3684 Comment 17:
@lenhard Thanks for merging with master, however, this PR is based on the other maintable migration branch. Now all those other changes in master occur as diff for this PR. Does everything work fine if we merge this PR now into the maintable branch?

Are the buttons for the shared databases needed? I always thought that changes are synced completely automatically. What extra value does the user gets from a facebook or github icon in the toolbar? How many users regularly open the terminal through JabRef? 
Probably we need an option to allow the users to decide if he wants some buttons or not.

In general, I'm hugely in favor of a data-based decision. 
We have some data about which dialogs are used how often. However, not every action is currently tracked (e.g. new library just opens a os-file dialog and is thus not captured in the list below; but also a few of our own dialogs are not tracked for some reason - for example the cleanup dialog).
The results below are nonetheless relatively clear and point in one direction: the majority of the users does not use any of our dialogs, except the "new entry" one and a few dialogs that are triggered automatically (import, duplicates, ...).

So I would propose to try-out a as minimal as possible version and then slowly add buttons as the users ask for them and/or our data shows that many users click on a certain action in the menu quite often.

name | count
-- | --
org.jabref.gui.EntryTypeDialog | 2640
org.jabref.gui.importer.ImportInspectionDialog | 1251
org.jabref.gui.DuplicateResolverDialog | 516
org.jabref.gui.mergeentries.MergeFetchedEntryDialog | 260
org.jabref.pdfimport.ImportDialog | 138
org.jabref.gui.preftabs.PreferencesDialog | 122
org.jabref.gui.groups.GroupDialog | 75
org.jabref.gui.collab.ChangeDisplayDialog | 40
org.jabref.gui.StringDialog | 26
org.jabref.gui.importer.FetcherPreviewDialog | 26
org.jabref.gui.mergeentries.MergeEntriesDialog | 24
org.jabref.gui.ReplaceStringDialog | 24
org.jabref.gui.help.NewVersionDialog | 22
org.jabref.gui.shared.ConnectToSharedDatabaseDialog | 20
org.jabref.gui.dbproperties.DatabasePropertiesDialog | 19
org.jabref.gui.customentrytypes.EntryCustomizationDialog | 16
org.jabref.gui.preftabs.FontSelectorDialog | 14
org.jabref.gui.GenFieldsCustomizer | 13
org.jabref.gui.MergeDialog | 12
org.jabref.gui.preftabs.PreferencesFilterDialog | 9
org.jabref.gui.externalfiles.SynchronizeFileField$OptionsDialog | 8
org.jabref.gui.auximport.FromAuxDialog | 8
org.jabref.gui.FindUnlinkedFilesDialog | 7
org.jabref.gui.plaintextimport.TextInputDialog | 7
org.jabref.gui.exporter.ExportCustomizationDialog | 6
org.jabref.gui.openoffice.StyleSelectDialog$AddFileDialog | 3
org.jabref.gui.externalfiletype.ExternalFileTypeEditor | 3
org.jabref.gui.externalfiles.WriteXMPAction$OptionsDialog | 2
org.jabref.gui.contentselector.ContentSelectorDialog | 2
org.jabref.gui.exporter.CustomExportDialog | 2
org.jabref.gui.importer.ImportCustomizationDialog | 1


Since I was playing with the data, here the distribution of new entries (not really surprising):
![image](https://user-images.githubusercontent.com/5037600/36434479-63eafd72-165f-11e8-95f1-50bbb5a2d503.png)


#3684 Comment 18:
We should discuss this in a devcall and maybe do a user survey?
From my point of view:
Cleanup, Generate BibtexKeys, Toogle Groups, Preview, WebSeach etc, push to application. 
Donate button. Help. Search field and Search mode changing
Save/Save All
#3684 Comment 19:
You can easily merge it to the other branch. Git automatically recognizes existing commits of other branches.

- Social media: My aim is to get followers at these profiles. So I want to make it easy for users to follow us.
- Database: MySQL does not offer pub/sub, so you have to pull changes manually as outlined at http://help.jabref.org/en/SQLDatabase#usage
- Console: Wished by @simonharrer at https://github.com/JabRef/jabref/issues/462

I am unsure whether this is a chicken/egg thing. What happens if I start writing blog posts advertising our features? I think, most features are unused, because people just do not know about it.

Will be a good discussion at the devcall.

#3684 Comment 20:
I merged this PR now to have a somewhat workable maintable-beta branch again, that is also head-to-head with the current master (thanks @lenhard !).

You all raised good points concerning the toolbar. I think this will be lively discussion in the next dev-call. I marked the related issue https://github.com/JabRef/jabref/issues/3678 with the corresponding label so that we don't forget it. 

@Siedlerchr Can you please open a new issue for the undo problem. This appears to be independent of the changes in this PR but not a proper handling of empty cite keys in the undo code. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3681 Comment 1:
I have been playing around with a running JabRef. Pasting entries from external sources worked, cutting and pasting from the table as well. I was doing this for a while:
 - Cut entry (CTRL+X) from the table
 - Click to some position in the table
 - Hit paste (CTRL+V)

Then suddenly, all content in my table disappeared and I was unable to make it re-appear again. I was able to paste (which opened an entry editor with the pasted data), but nothing was shown in the main table. I could continue pasting and watch as the entry number increases in the group panel, but nothing got shown in the main table. Switching between databases did not help. Only closing and reopening the broken database helped. Then I could continue to just hit Cut+Paste, Cut+Paste, Cut+Paste, until eventually all content disappeared from the main table again and it said "No content in table" again. Unfortunately, there is nothing in the log to report.
#3681 Comment 2:
Thanks for the feedback.
@lenhard I followed your steps and eventually also had an empty table. The reason, however, is not a bug with the pasting/cutting code, but a focus problem: at some point the search bar steals the focus and thus you paste the bibtex code into the search bar. This filters the maintable and finds no entry.

I'll add this focus problem to the list of open problems and hope it resolves itself when the search bar is fully migrated to JavaFX.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3675 Comment 1:
Test cases will hopefully come in another PR ^^
--------------------------------------------------------------
#3674 Comment 1:
@lenhard Thanks for your review. Have performed a merge so hopefully that should be fixed now.
#3674 Comment 2:
The build still fails but so does the master (with the same failing tests). I thus merge this PR now. Thanks for your contribution!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3668 Comment 1:
I'll merge this PR now since these changes seem uncontroversial (and we are currently a bit low on review capacities).
--------------------------------------------------------------
#3666 Comment 1:
> Copy linked files to folder: moved to Tools menu
Already presend in the File menu
Open File PDF icon is missing
#3666 Comment 2:
@Siedlerchr Thank you for the feedback. I implemented your suggestions accordingly.
#3666 Comment 3:
Can't we have an "Edit" submenu here containing all the edit actions available?

For me, this conforms to "Lernförderlichkeit" and "Erwartungskonformität" from [EN ISO 9241-110 Grundsätze der Dialoggestaltung](https://de.wikipedia.org/wiki/EN_ISO_9241#EN_ISO_9241-110_Grunds%C3%A4tze_der_Dialoggestaltung). Especially the "Erwawrungskonformität", because I expect that all actions available for the current entry are available in the context menu.
--------------------------------------------------------------
#3665 Comment 1:
@tobiasdiez Thanks a lot for the feedback!

 - Regarding test arguments: I don't really see the point in splitting the single argument into two. We have used the convention that the `.bib` and `.importerFormat` files have the same name and why not keep leveraging that? Also, I find it better to do the path conversion in one place only, but if we want to pass a stream of paths we always have to do that beforehand
 - Regarding unification of importer tests: I have refactored around a little and arrived at a solution that should work for all importers. I quite like how that condenses the `RISImporterTestFiles` class.

Fun fact: I may have used JUnit 5 paramterization, but so far the assertions were still JUnit 4. I'll change that in the following.
#3665 Comment 2:
The importer tests where running for each file, but that seems to have been ignored in the migration process by the junit 5 comp.
I looked at this, too but didn't find a way to get it to work again.
#3665 Comment 3:
Yes, indeed. I'll gradually go through all parameterized importer tests and try to get them working in JUnit 5 syntax again as part of this PR.
#3665 Comment 4:
Turns out, quite a lot of tests for different importers (BibTexML, Medline tested so far) actually fail and this is down to the implementations of the importers. Seems like these tests have never been executed before...

I am not sure what to do about this here. The point of this PR was a refactoring of the testing code, not a repair of broken importers.
#3665 Comment 5:
I would merge this if all tests are at least executed. Or better you merge this in a new branch where we will fix the importer then

#3665 Comment 6:
I converted and fixed some fetcher tests in another PR. I found that the GVK Test would also be a goo candidate for using the same schema as here 
#3665 Comment 7:
I have now migrated the complete importer tests to JUnit5 syntax.

Sadly, they are in a dire state. A lot of them are actually failing and seemed to have never been executed anyway. And even except from the refactorings that I have already done, there as a lot of things that can still be improved.

I think it's best if we take the current (failing) state and try to repair each importer and its tests here in the PR. This might be some work, but the importer tests cannot really continue as broken as they are now. Help on this is very much appreciated and should be possible without conflicts.
#3665 Comment 8:
You can ignore the failing fetcher test, this is already fixed. But I wonder why there is now an NPE with the Method Source
#3665 Comment 9:
I should have more meetings, so that I get more programming done :)

I think I have repair all importers and their tests now. I'll see what travis says and I'll also do one more round of refactoring on the code (not now). When I am done, this can hopefully be merged.
#3665 Comment 10:
LGTM!, if you merge master in your branch you will get the fetcher test fixed as well
#3665 Comment 11:
Ok, this can be merged from my point of view.

Although this is already a huge refactoring of the existing tests, there's certainly more that can be improved. I have a few things in mind, but I would rather keep them out of this already big PR. I'll tackle them later when this is merged.
#3665 Comment 12:
That looks weird indeed. Looking at the first one: https://codecov.io/gh/JabRef/jabref/src/migrate-parameter-tests/src/main/java/org/jabref/logic/importer/fileformat/BibTeXMLImporter.java the `importDatabase` method is recorded as not covered, but when I execute the tests in Intellij there are twenty test files for that method alone. 

The key seems to be that the missing methods are the ones that use JUnit5 parameterized tests. It seems that Codecov does not record the coverage of these tests, but they are the core tests of the whole package.

But maybe the problem is still travis? How do I see from our travis output that the tests are really executed? I can push a failing test deliberately, but there surely is a better way?
#3665 Comment 13:
Since the travis log contains statement like 
>13:43:57.686 [main] WARN  org.jabref.logic.msbib.MSBibDatabase - Could not parse document

I suppose the tests are correctly invoked (in fact, the travis log exploded even more). Probably there is a problem with the gradle task `jacocoJunit5TestReport` (but there is no need to fix this in this PR...)
#3665 Comment 14:
I would merge this in and I think tthere might be a solution for the reports:
https://github.com/junit-team/junit5/issues/1024
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3659 Comment 1:
All tests are green. Thus, this PR is good to go? Is something left?
#3659 Comment 2:
The dependeny update still fails
#3659 Comment 3:
@Siedlerchr  And I don't know why... These native gradle plugins are quite hard to configure. Locally, the gradle task even succeeds... :/
#3659 Comment 4:
Can't we just add an exception rule for this jacoo stuff?
#3659 Comment 5:
yeap, but is that a solution? (;
#3659 Comment 6:
If I understand https://github.com/ben-manes/gradle-versions-plugin/issues/92 correctly, then the jacoco dependency should actually be hidden by default (but is shown sometimes, which is a bug). Thus I would vote to simply hide the update (it's not an important dependency anyway).
#3659 Comment 7:
Current Status: No Dependencies found, since the [gradle-versions-plugin](https://github.com/ben-manes/gradle-versions-plugin) only provides support until gradle 4.3.
#3659 Comment 8:
We can go back to gradle 4.3. I don't see any advanced features. We should, however, document it, why we don't keep our build system updated ^^.
#3659 Comment 9:
Create an issue at their repo. 
#3659 Comment 10:
I don't know how to test an self-made update of the script. When going to gradle 4.3, it was easy: https://github.com/ben-manes/gradle-versions-plugin/commit/e39a84307cea47892149f576461c80fdb3b95d2f
#3659 Comment 11:
We merge this now and will revisit the jacoco dependency at a later point.
--------------------------------------------------------------
#3658 Comment 1:
@tobiasdiez I did not change the field name to ensure backwards compatibility. (otherwise we would have to write a migration)
Is this a good  (enough) argument?

Second, the Tab is not an own class, but a Custom Tab, initialized here: https://github.com/JabRef/jabref/blob/cf8e6aac8263ce30eb2b042c8aacf2d88bbac4c8/src/main/java/org/jabref/preferences/JabRefPreferences.java#L978
#3658 Comment 2:
Yeah, backwards compatibility is a good point but on the other hand I also find it confusing that the content of the "comments" tab is stored in the field `review`. I don't know how to proceed. Maybe we should indeed write a migration...
#3658 Comment 3:
Well, I just realized that the Comments field is also displayed in the General tab. :/ Thus, is might be that users have both the Review field and the Comments field filled.
Anyways, this makes it clear that the solution as it is right now cannot be used and we definitely have to write a migration if we want to rename this tab.

Proposed migration: Concatenate the Review to the Comment field, afterwards delete the Review field.
The Comment field should go from the General Tab to the Comments tab.
#3658 Comment 4:
So as discussed this PR does the following:
- [x] Rename the Review Tab into Comments Tab
- [x] Remove the Comment Field from the General Tab
- [x] Migrate the Review Field into Comment according to https://github.com/JabRef/jabref/pull/3658#issuecomment-359502131
#3658 Comment 5:
I think this PR is quite ready now
#3658 Comment 6:
@lenhard I have incorporated your suggestions. The solution I used for remembering the change in the database was to add a field in the ParserResult class and check that when instantiating the BasePanel.
#3658 Comment 7:
Thanks for all the feedback! I'll merge this now and start with the refactoring in the next PR.
--------------------------------------------------------------
#3656 Comment 1:
I tried to revert all changes to our build script and see if this fixes the problem with install4j (so that we may locate the problematic change). However, there were quite a few changes and I don't have the time right now to pursue this line of attack further. Feel free to keep working on this.
--------------------------------------------------------------
#3655 Comment 1:
Code examples may be better than words, but only if they are really really obvious ;-) To be honest, I don't get why the new style is strictly better. I have nothing against it, but I also don't see any obvious benefit. To me, it just doesn't matter.

Could you convince me with words?
#3655 Comment 2:
Well, there are of course no real benefits. We will not perform 200% more efficient because of this change. It's just a matter of taste and for me fluent code (with builders or the stream api) does not look "nice". But of course this is a subjective opinion. For example, why is `map` indented (with respect to `getValues`) but `collect` is on the same level as `map`? It just feels unlogical.
````java
return field.getValues().stream()
                .map(SpecialFieldValueViewModel::new)
                .collect(Collectors.toList());
````
The reformatted 
````java
return field.getValues().stream()
            .map(SpecialFieldValueViewModel::new)
            .collect(Collectors.toList());
````
is easier to read and to "parse" in my opinion. Get values, map them, collect. Finish.
#3655 Comment 3:
Ok, I am buying into that :-) Could we do the same configuration for Eclipse here as well (as requested by @Siedlerchr ). Just to ensure that there is no constant reformatting of the code with different IDEs.
#3655 Comment 4:
https://stackoverflow.com/questions/6275785/wrapping-chained-method-calls-on-a-separate-line-in-eclipse-for-java
will try to check that the next days
--------------------------------------------------------------
#3654 Comment 1:
Ok, I'll merge right away. But indeed, why does this break the build? Is it not sorted into the fetcher tests?
--------------------------------------------------------------
#3653 Comment 1:
The breaking build is still from the test I fixed in the other pr
#3653 Comment 2:
Thank you for using [MADR](https://adr.github.io/madr/) 🎉. 
#3653 Comment 3:
Switching to logback could maybe solve https://github.com/JabRef/jabref/pull/3511?
#3653 Comment 4:
Codacy still complains about an unused import, but this is a false positive, right? Otherwise, checkstyle would complain. If this is not a problem, then this PR can be merged.
#3653 Comment 5:
Interesting case. the import was only used because it was referenced in an javadoc comment. So I removed it.
--------------------------------------------------------------
#3652 Comment 1:
OK for me. Typically, we update the Java version short before a new release to keep the number of files to be kept at `files.jabref.org` low.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3642 Comment 1:
@tobiasdiez Thanks a lot! I didn't have biblatex in mind when setting the fields. Your comments are all integrated.
#3642 Comment 2:
Is the `RISImporterTestFiles` class not executed during the travis build? Because those tests were actually partly broken. Anyway, I adapted them to the new import structure (which changes a few fields) and I added the RIS code from  #3634 as a new test case.
#3642 Comment 3:
Regarding the test, seems to be a general problem with the parameterized tests and the new junit ä.
I noticed the same with the office XML tests
#3642 Comment 4:
Ok, then this is something that really needs fixing. I'll open an issue for it. Otherwise this PR is ready to merge from my point of view.
#3642 Comment 5:
In the spirit of getting things done and because all reviewer comments have been addressed, I'll merge this now.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3635 Comment 1:
The current state in `master` was confusing. So, I merged to keep things flowing. https://github.com/JabRef/jabref/issues/3573 is still open to track issues with the `localizationUpdate` task. That task won't be necessary for all contributors, only for maintainers wanting to cleanup the files (like sorting, ...). However, this is not absolutely necessary anymore since Crowdin basically takes care.
--------------------------------------------------------------
#3633 Comment 1:
I made two little suggestions, in general I like it 👍 
#3633 Comment 2:
I also did a round of proof-reading. Lets wait for @koppor's opinion, then we can merge.
--------------------------------------------------------------
#3632 Comment 1:
As the feedback was okay I merge this in
--------------------------------------------------------------
--------------------------------------------------------------
#3630 Comment 1:
Since testing gitter has been tentatively decided at the devcall, I'll merge this right away.
#3630 Comment 2:
The gitter chat is meant as a platform to discuss developer's question and not to give user support, right? In this case, I would suggest to follow the [rails example](https://github.com/rails/rails#contributing) and create a `contributing` section in the readme with the two badges "code helpers" and "gitter" to make the context clear. In this new section, we could also add links to the contributing FAQ and the related wiki pages to make contributing even easier.
#3630 Comment 3:
Yes, you are right: gitter is for developer's questions. Maybe I was to quick with merging, apologies!

--------------------------------------------------------------
#3627 Comment 1:
Thanks!
#3627 Comment 2:
Please delete the branch after the merge. Crowdin recreates it.
#3627 Comment 3:
Ok, I wasn't sure about that. Next time I will.
--------------------------------------------------------------
#3624 Comment 1:
Please **do not** add new keys in the other language files. See https://github.com/JabRef/jabref/issues/3573#issuecomment-355519302.

I think, I have added a test for that case (refs https://github.com/JabRef/jabref/pull/3479#issuecomment-350645245).

Currently, the build fails because of errorprone:

```
/home/travis/build/JabRef/jabref/src/main/java/org/jabref/logic/citationstyle/CitationStyle.java:157: error: [StreamResourceLeak] Streams that encapsulate a closeable resource should be closed using try-with-resources
                List<Path> allStyles = Files.find(jarFs.getRootDirectories().iterator().next(), 1, (file, attr) -> file.toString().endsWith("csl")).collect(Collectors.toList());
                                                 ^
    (see http://errorprone.info/bugpattern/StreamResourceLeak)
  Did you mean 'List<Path> allStyles ;'?
```

Thus, we have to put our energy in https://github.com/JabRef/jabref/pull/3623 to get Travis into a stable state again.
#3624 Comment 2:
AS the other build is now fixed, I merge it in
--------------------------------------------------------------
#3623 Comment 1:
@tobiasdiez @Siedlerchr Can you have a look if the exception handling is correct now? see c93ae63 for that
#3623 Comment 2:
@LinusDietz Thanks, the code looks good to me!
--------------------------------------------------------------
#3621 Comment 1:
Here's a little present for you. I fixed the "Changes to entries don't mark database as changed." problem.

As much as I hate adding to `BasePanel`, it is probably the best if the panel decides on its own whether it should be marked or not.
#3621 Comment 2:
Currently the File Annotation Tab throws an Exception:

```
17:18:39.294 [JavaFX Application Thread] ERROR org.jabref.gui.DefaultInjector - Cannot instantiate dependency: interface org.jabref.model.util.FileUpdateMonitor
java.lang.InstantiationException: org.jabref.model.util.FileUpdateMonitor
	at java.lang.Class.newInstance(Class.java:427) ~[?:1.8.0_162]
	at org.jabref.gui.DefaultInjector.createDependency(DefaultInjector.java:43) ~[main/:?]
	at com.airhacks.afterburner.injection.Injector.instantiateModelOrService(Injector.java:114) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.injection.Injector.injectMembers(Injector.java:147) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.injection.Injector.injectMembers(Injector.java:132) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.injection.Injector.injectAndInitialize(Injector.java:125) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.injection.Injector.registerExistingAndInject(Injector.java:105) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.injection.Injector.instantiatePresenter(Injector.java:57) ~[afterburner.fx-1.7.0.jar:?]
	at org.jabref.gui.DefaultInjector.instantiatePresenter(DefaultInjector.java:58) ~[main/:?]
	at com.airhacks.afterburner.views.FXMLView.lambda$loadSynchronously$1(FXMLView.java:96) ~[afterburner.fx-1.7.0.jar:?]
	at javafx.fxml.FXMLLoader$ValueElement.processAttribute(FXMLLoader.java:929) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader$InstanceDeclarationElement.processAttribute(FXMLLoader.java:971) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader$Element.processStartElement(FXMLLoader.java:220) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader$ValueElement.processStartElement(FXMLLoader.java:744) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.processStartElement(FXMLLoader.java:2707) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2527) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2441) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.load(FXMLLoader.java:2409) ~[jfxrt.jar:?]
	at com.airhacks.afterburner.views.FXMLView.loadSynchronously(FXMLView.java:99) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.initializeFXMLLoader(FXMLView.java:125) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.getView(FXMLView.java:137) ~[afterburner.fx-1.7.0.jar:?]
	at org.jabref.gui.AbstractView.getView(AbstractView.java:28) ~[main/:?]
	at org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.bindToEntry(FileAnnotationTab.java:29) ~[main/:?]
	at org.jabref.gui.entryeditor.EntryEditorTab.lambda$0(EntryEditorTab.java:36) ~[main/:?]
	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_162]
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294) ~[jfxrt.jar:?]
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]
Caused by: java.lang.NoSuchMethodException: org.jabref.model.util.FileUpdateMonitor.<init>()
	at java.lang.Class.getConstructor0(Class.java:3082) ~[?:1.8.0_162]
	at java.lang.Class.newInstance(Class.java:412) ~[?:1.8.0_162]
	... 30 more
17:18:39.348 [JavaFX Application Thread] ERROR org.jabref.FallbackExceptionHandler - Uncaught exception occurred in Thread[JavaFX Application Thread,5,main]
java.lang.IllegalStateException: Cannot load org.jabref.gui.entryeditor.fileannotationtab.fileannotationtab
	at com.airhacks.afterburner.views.FXMLView.loadSynchronously(FXMLView.java:101) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.initializeFXMLLoader(FXMLView.java:125) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.getView(FXMLView.java:137) ~[afterburner.fx-1.7.0.jar:?]
	at org.jabref.gui.AbstractView.getView(AbstractView.java:28) ~[main/:?]
	at org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.bindToEntry(FileAnnotationTab.java:29) ~[main/:?]
	at org.jabref.gui.entryeditor.EntryEditorTab.lambda$0(EntryEditorTab.java:36) ~[main/:?]
	at com.sun.javafx.application.PlatformImpl.lambda$null$172(PlatformImpl.java:295) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_162]
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$173(PlatformImpl.java:294) ~[jfxrt.jar:?]
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication.lambda$null$147(WinApplication.java:177) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]
Caused by: javafx.fxml.LoadException: 
/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/entryeditor/fileannotationtab/fileannotationtab.fxml:21

	at javafx.fxml.FXMLLoader.constructLoadException(FXMLLoader.java:2601) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2579) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2441) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader.load(FXMLLoader.java:2409) ~[jfxrt.jar:?]
	at com.airhacks.afterburner.views.FXMLView.loadSynchronously(FXMLView.java:99) ~[afterburner.fx-1.7.0.jar:?]
	... 12 more
```
#3621 Comment 3:
If someone has a little time on his hands, it would be good if this were re-aligned with master. I just wanted to try cherry-picking something into this branch as suggested here https://github.com/JabRef/jabref/issues/3730#issuecomment-366454513 but it's not possible to do that, because of the current divergence.
#3621 Comment 4:
I just tested #3730 on this branch and both bugs reported (entry type change crashes entry editor; toggling quality assurance crashes entry editor) seem to be fixed.

However, I could no longer save the file anymore and got the usual non-informative stack trace instead, i.e. `java.lang.IllegalStateException: Not on FX application thread; currentThread = AWT-EventQueue-0` (I'll add this to the list of known bugs here).

A number of tests are still failing. I would be cool if we could get the build back into a working state and then go on fixing the remaining bugs.
#3621 Comment 5:
Some of the failing tests are due to language keys no longer needed/missing. I will take a look at that later 
#3621 Comment 6:
I started removing some obsolete language keys yesterday but then stopped since I'm not sure which of those are still needed when we readd some of the toolbar buttons. Thus I would wait with the language keys until after the devcall. 
Speaking of language keys, @koppor can already start contemplating how we merge the menu and usual language files using Crowdin. JavaFX does not the special treatment for menu titles and thus the separation is obsolete.
#3621 Comment 7:
@tobiasdiez Finally we can get rid off these two different files.  Better we structure the files inside: First the menu entries then the other keys...
#3621 Comment 8:
I finally fixed the weird NPE that was haunting me today with the FileAnnotationTab. Apparenlty an Instance of the DefaultFileUpdateMonitor was injected and not the interface. The previously instance was just initialized without starting the watching thread. Therefore the watcher threw an NPE.

#3621 Comment 9:
Current status: This branch still not starts the GUI under MacOS.
```
> Task :run
AI: INFO 23-02-2018 14:26, 18: Configuration file has been successfully found as resource
14:26:28.416 [AWT-EventQueue-0] INFO  org.jabref.logic.importer.OpenDatabase - Opening: /Users/dietzl/git/literature/master.bib
<===========--> 87% EXECUTING [1m 43s]
> :run
```
#3621 Comment 10:
@LinusDietz but it works if you start it from the IDE? 
#3621 Comment 11:
@tobiasdiez Sorry, false alarm! I guess I switched branches too often. After a clean task everything is working again.
#3621 Comment 12:
1. As mentioned in the dev-call, the headers of the maintable act weird during resizing. I made [a small video showing it](https://youtu.be/wCWEQdzq40k). The behavior was reproduced on Linux and Mac. I hate to say it, but we should implement it as it works in excel:
- the separator that is grabbed only influences the cell to the left making it larger or smaller
- all cells right to the separator retain their size and are simply moved (possibly out of the view, but that's what scrollbars are for)

2. the separators on Linux are not visible. On Mac they appear as soon as I hover over the header. This should be addressed when we make the design consistent.

3. Another issue is that the search-bar is connected to the splitter between main-table and the left side bar. When I resize the main-table, it is possible to move the search-bar over the toolbar icons:
![screen shot 2018-02-27 at 11 24 05](https://user-images.githubusercontent.com/511683/36723562-eeffad58-1bb0-11e8-9312-870b7cbdb4bf.png)

4. When closing the sidebar, the main-table is not maximized anymore. As can be seen in the image above, we end up with a gray area where the side-bar was.

5. Assume having only one library open and the group view is visible. When I close the library, the group-view still shows the groups of the closed library which does not make sense.

I guess that's all I found atm.
#3621 Comment 13:
@halirutan Thanks for the report. PRs #3784 and #3785 should fix the issues 3-5. I cannot reproduce the first two problems on Windows and would like to ask one of the Linux/Mac developers to have a look at them.
#3621 Comment 14:
- [ ] merge `append library ` and `import into current library`? Where is the difference? Think we agreed to merge this and include all strings etc pp?!
- [ ] no status bar anymore?
- [ ] empty space for gorups interface web search etc is shown to me somwtimes. Can only be removed by making any view plane visible and clicking the close button then
- [x] search bar moves with the main table. not sure if the toolbar should better be independent from the other views -> by design
- [x] Entry preview cannot be closed anymore. maybe we want to be able to hide this too when only searching in a big database. to be honest for me the entry preview never had a big value except maybe a better readability than directly in the main table rows. -> fixed by https://github.com/JabRef/jabref/pull/3883
#3621 Comment 15:
I have tested @Siedlerchr's JavaFX dialog and this work. The placement and role of the search-bar, however, is still questionable in my view. With JabRef having a size of almost my entire MacBook screen, the icons to the right are still not visible

<img width="1421" alt="screen shot 2018-03-03 at 13 45 33" src="https://user-images.githubusercontent.com/511683/36934425-701208ba-1ee9-11e8-8757-36853cacec48.png">

Is there really a sound reason to make the search-bar the central and most prominent part of our toolbar? Why not keep it in the upper right corner as we already did and as it is done in the Windows Explorer, in OSX Finder, and in most applications as well?

Although I acknowledge that many people seem to find the search-bar terrific, I find it truly unconvincing that it dictates the complete toolbar.

Additionally, in the current design, the little `>>` button to open the hidden icons show me white icons on white background

<img width="579" alt="screen shot 2018-03-03 at 13 49 21" src="https://user-images.githubusercontent.com/511683/36934640-34c0e048-1eed-11e8-9dfd-18b2f9ec3de3.png">

and the search bar text and the number of found results is hardly readable. But this can be fixed when we work on the colors.

Finally, Lenards re-instantiation of the tooltips on the toolbar-icons does not work on OSX. It throws an exception and crashes JabRef. It is caused by the `setTooltip` call in `org.jabref.gui.actions.ActionFactory#createIconButton`. The stacktrace can be found below.

<details>

Exception:

```
Exception in Application start method
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.sun.javafx.application.LauncherImpl.launchApplicationWithArgs(LauncherImpl.java:389)
	at com.sun.javafx.application.LauncherImpl.launchApplication(LauncherImpl.java:328)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.launcher.LauncherHelper$FXHelper.main(LauncherHelper.java:767)
Caused by: java.lang.RuntimeException: Exception in Application start method
	at com.sun.javafx.application.LauncherImpl.launchApplication1(LauncherImpl.java:917)
	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication$155(LauncherImpl.java:182)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.RuntimeException: Button.tooltip : A bound value cannot be set.
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:142)
	at javafx.beans.property.ObjectProperty.setValue(ObjectProperty.java:69)
	at javafx.scene.control.Control.setTooltip(Control.java:366)
	at org.jabref.gui.actions.ActionFactory.createIconButton(ActionFactory.java:62)
	at org.jabref.gui.JabRefFrame.createToolbar(JabRefFrame.java:662)
	at org.jabref.gui.JabRefFrame.initLayout(JabRefFrame.java:584)
	at org.jabref.gui.JabRefFrame.init(JabRefFrame.java:266)
	at org.jabref.gui.JabRefFrame.<init>(JabRefFrame.java:219)
	at org.jabref.JabRefGUI.openWindow(JabRefGUI.java:96)
	at org.jabref.JabRefGUI.<init>(JabRefGUI.java:65)
	at org.jabref.JabRefMain.start(JabRefMain.java:184)
	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$162(LauncherImpl.java:863)
	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$175(PlatformImpl.java:326)
	at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
Exception running application org.jabref.JabRefMain
```
</details>


#3621 Comment 16:
The error with the tooltip should be fixed now. 
#3621 Comment 17:
I can confirm that the toolbar with the addtional icons is hovering outside the main window on Win10:

![grafik](https://user-images.githubusercontent.com/320228/36945140-c3ec37a6-1fa9-11e8-860a-adc932f5e89f.png)

#3621 Comment 18:
To fix the size issues, I would propose to reduce the number of toolbar icons 🏃 

@halirutan I think it is ok that the search field occupies the majority of the space for big screens. There is no harm in it. But clearly it was too aggressive for smaller windows sizes. This should be fixed now.
For me, this is now the point where the toolbar icons disappear:
![image](https://user-images.githubusercontent.com/5037600/36987932-ca5af998-209d-11e8-9d41-22f792140b42.png)


#3621 Comment 19:
With the new FXDialogs: Ensure you have a bibliography with a `.sav` file next to it. Either go to Open or Open Recent and try to open this database. I'm getting an exception because the FX Dialog that wants to pop up cannot be started from a non-FX thread

<details>
Stacktrace:

```
java.lang.IllegalStateException: Not on FX application thread; currentThread = JabRef CachedThreadPool
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:279) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423) ~[jfxrt.jar:?]
	at javafx.stage.Stage.<init>(Stage.java:241) ~[jfxrt.jar:?]
	at javafx.stage.Stage.<init>(Stage.java:227) ~[jfxrt.jar:?]
	at javafx.scene.control.HeavyweightDialog$1.<init>(HeavyweightDialog.java:52) ~[jfxrt.jar:?]
	at javafx.scene.control.HeavyweightDialog.<init>(HeavyweightDialog.java:52) ~[jfxrt.jar:?]
	at javafx.scene.control.Dialog.<init>(Dialog.java:263) ~[jfxrt.jar:?]
	at javafx.scene.control.Alert.<init>(Alert.java:245) ~[jfxrt.jar:?]
	at javafx.scene.control.Alert.<init>(Alert.java:223) ~[jfxrt.jar:?]
	at org.jabref.gui.FXDialog.<init>(FXDialog.java:48) ~[classes/:?]
	at org.jabref.gui.FXDialog.<init>(FXDialog.java:38) ~[classes/:?]
	at org.jabref.gui.FXDialogService.createDialog(FXDialogService.java:63) ~[classes/:?]
	at org.jabref.gui.FXDialogService.showConfirmationDialogAndWait(FXDialogService.java:178) ~[classes/:?]
	at org.jabref.gui.dialogs.BackupUIManager.showRestoreBackupDialog(BackupUIManager.java:27) ~[classes/:?]
	at org.jabref.gui.importer.actions.OpenDatabaseAction.openTheFile(OpenDatabaseAction.java:217) ~[classes/:?]
	at org.jabref.gui.importer.actions.OpenDatabaseAction.lambda$openFiles$1(OpenDatabaseAction.java:157) ~[classes/:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_162]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_162]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]
```


</details>
#3621 Comment 20:
@halirutan  The exception should be fixed.  I also found another issue. We should asap convert the Cleanup Panel, because currently due do my fix executing it in Swing Thread, it is shown in backround.
Maybe we could wrap it in a JFXPanel?
#3621 Comment 21:
I now embedded the cleanup dialog in a SwingNode so it can be displayed on top.
#3621 Comment 22:
It would be nice if you could just click around the toobar and menu actions to see if all is working, especially after I converted the dialogs to JavaFX, If you encounter a not in FX Thread issue, it is most probably coming from an `AbstractWorker` which is swing only
#3621 Comment 23:
Import Inspection Dialog throws Illegal STate Exception;
- Do a web search
- Select an entry in the inpsection window
- Click ok:
```
Mar 07, 2018 11:09:50 PM com.google.common.eventbus.EventBus$LoggingHandler handleException
SEVERE: Exception thrown by subscriber method listen(org.jabref.model.database.event.EntryAddedEvent) on subscriber org.jabref.gui.BasePanel$SearchListener@6974826b when dispatching event: org.jabref.model.database.event.EntryAddedEvent@6d92c0e8
java.lang.IllegalStateException: This operation is permitted on the event thread only; currentThread = AWT-EventQueue-0
	at com.sun.glass.ui.Application.checkEventThread(Application.java:443)
	at com.sun.glass.ui.View.finishInputMethodComposition(View.java:660)
	at com.sun.javafx.tk.quantum.ViewScene.finishInputMethodComposition(ViewScene.java:151)
	at javafx.scene.Scene$KeyHandler.setFocusOwner(Scene.java:3920)
	at javafx.scene.Scene$KeyHandler.requestFocus(Scene.java:3971)
	at javafx.scene.Scene$KeyHandler.access$1900(Scene.java:3910)
	at javafx.scene.Scene.requestFocus(Scene.java:2044)
	at javafx.scene.Node.requestFocus(Node.java:7881)
	at org.jabref.gui.search.GlobalSearchBar.focus(GlobalSearchBar.java:296)
	at org.jabref.gui.search.GlobalSearchBar.clearSearch(GlobalSearchBar.java:313)
	at org.jabref.gui.search.GlobalSearchBar.performSearch(GlobalSearchBar.java:328)
	at org.jabref.gui.BasePanel$SearchListener.listen(BasePanel.java:1821)
	at sun.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:87)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:144)
	at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:72)
	at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:398)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:67)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:108)
	at com.google.common.eventbus.EventBus.post(EventBus.java:212)
	at org.jabref.model.database.BibDatabase.insertEntries(BibDatabase.java:224)
	at org.jabref.model.database.BibDatabase.insertEntry(BibDatabase.java:200)
	at org.jabref.model.database.BibDatabase.insertEntry(BibDatabase.java:188)
	at org.jabref.gui.importer.ImportInspectionDialog.generateKeys(ImportInspectionDialog.java:499)
	at org.jabref.gui.importer.ImportInspectionDialog.access$8(ImportInspectionDialog.java:476)
	at org.jabref.gui.importer.ImportInspectionDialog$OkListener.actionPerformed(ImportInspectionDialog.java:760)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.Component.processMouseEvent(Component.java:6533)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6298)
	at java.awt.Container.processEvent(Container.java:2237)
	at java.awt.Component.dispatchEventImpl(Component.java:4889)
	at java.awt.Container.dispatchEventImpl(Container.java:2295)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4889)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4526)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4467)
	at java.awt.Container.dispatchEventImpl(Container.java:2281)
	at java.awt.Window.dispatchEventImpl(Window.java:2746)
	at java.awt.Component.dispatchEvent(Component.java:4711)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:760)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:90)
	at java.awt.EventQueue$4.run(EventQueue.java:733)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:730)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
```
#3621 Comment 24:
I saw something unexpected. When you open the entry editor, go to related articles and close the editor again, then each time I navigate in the main-table, MrDLib still fetches in the background. I noticed this because I had a `printf` for debugging in there. Is this supposed to be this way?

Furthermore, open the entry editor and then click on "View -> Toggle Entry Preview". The editor closes but the preview is not opened. This happens when the preview was open before you opened the editor. I guess it can be argued that this is the correct way, but still kind of unexpected.

I'm working on the colors and the redesign. I have something that is a good start ([latest screenshot](http://i.imgur.com/kOSJWNW.png)) and I'm waiting for Tobi to look over it. The improvement is not so much the specific colors, but the consistent derivation of most things from a few basic theme colors. I pushed it to the [consistent-fxcolors branch](https://github.com/JabRef/jabref/tree/consistent-fxcolors). This means if possible don't touch the CSS if not absolutely necessary until we come to a conclusion.

Finally, please note [this issue](https://github.com/JabRef/jabref/issues/3816) if you haven't seen it. I'd like to make the Related Articles and the Preview use fonts as close to the overall L&F as possible.

And really finally, I successfully included my own TTF font with only minor code changes. I'm discussing this with Tobi and if it works, we can basically add all icons we want in exactly the same style as the material design icons. See [here for the discussion](https://gitter.im/JabRef/jabref?at=5aa09ba96f8b4b9946001087) and here is a screenshot showing a new open-office icon

![toolbar](http://i.imgur.com/7vhQ7qq.png)
#3621 Comment 25:
@halirutan It is kind of expected that mr dlib still fetches information in the background. As of now, the entry editor gets told when the user selects a new entry and then updates its view accordingly. This happens regardless of the visual state of the entry editor (shown / hidden). This is a bit of overhead but makes the code easier.

I think, the issue with "toggle entry preview" is the same as the one reported by @stefan-kolb above.

The color unification looks really good now and your new font is awesome! Please open PRs for both improvements.

#3621 Comment 26:
Some more notes:

1. The search-bar is extremely sluggish for large databases. I suggest we implement the same feature I proposed for the GroupView: Typing should be decoupled from the actual search and the autocompletion values.
2. The number of found hits for the search can be included simply as a number in e.g. braces inside the search-bar itself. There is enough space and I believe the sentence "Found XXX results." takes to much space. At the moment, the spacing between the bar and the number of hits is not correct:
![img](http://i.imgur.com/VqUDhe0.png)
3. When I restart JabRef, I'm still able to get into a state where the GroupView is not open, but still, the main-table is not maximized. Then, the spacing between the icons left and the search-bar is incorrect.
![img](http://i.imgur.com/mW5nnyx.png)
4. There is a minor bug in the tooltip of the search bar. It repeats the first sentence (Christoph found this PR that seems related https://github.com/JabRef/jabref/pull/3443).
Finally, especially for the long description in the tooltip of the search-bar, it is inconvenient, that the tooltip vanishes automatically after 2 seconds or so.
#3621 Comment 27:
Try the following: Open JabRef and create a new DB. Try to save the DB. This gives here the following exception

<details>

Trace:

```
04:40:31.427 [JavaFX Application Thread] ERROR org.jabref.gui.collab.DatabaseChangeMonitor - Error while getting file information
java.nio.file.NoSuchFileException: /home/patrick/tmp/crash.bib
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) ~[?:1.8.0_152]
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) ~[?:1.8.0_152]
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) ~[?:1.8.0_152]
	at sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55) ~[?:1.8.0_152]
	at sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:144) ~[?:1.8.0_152]
	at sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99) ~[?:1.8.0_152]
	at java.nio.file.Files.readAttributes(Files.java:1737) ~[?:1.8.0_152]
	at java.nio.file.Files.getLastModifiedTime(Files.java:2266) ~[?:1.8.0_152]
	at org.jabref.gui.collab.DatabaseChangeMonitor.lambda$markAsSaved$3(DatabaseChangeMonitor.java:143) ~[JabRef-4.2-dev-fat.jar:?]
	at java.util.Optional.ifPresent(Optional.java:159) ~[?:1.8.0_152]
	at org.jabref.gui.collab.DatabaseChangeMonitor.markAsSaved(DatabaseChangeMonitor.java:141) ~[JabRef-4.2-dev-fat.jar:?]
	at org.jabref.gui.collab.DatabaseChangeMonitor.markExternalChangesAsResolved(DatabaseChangeMonitor.java:137) ~[JabRef-4.2-dev-fat.jar:?]
	at java.util.Optional.ifPresent(Optional.java:159) ~[?:1.8.0_152]
	at org.jabref.gui.BasePanel.markExternalChangesAsResolved(BasePanel.java:1604) ~[JabRef-4.2-dev-fat.jar:?]
	at org.jabref.gui.exporter.SaveDatabaseAction.run(SaveDatabaseAction.java:169) ~[JabRef-4.2-dev-fat.jar:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_152]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_152]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_152]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_152]
	at spin.Invocation.evaluate(Invocation.java:175) ~[JabRef-4.2-dev-fat.jar:?]
	at spin.off.SpinOffEvaluator.evaluate(SpinOffEvaluator.java:120) ~[JabRef-4.2-dev-fat.jar:?]
	at spin.ProxyFactory.evaluteInvocation(ProxyFactory.java:85) ~[JabRef-4.2-dev-fat.jar:?]
	at spin.JDKProxyFactory$SpinInvocationHandler.invoke(JDKProxyFactory.java:102) ~[JabRef-4.2-dev-fat.jar:?]
	at com.sun.proxy.$Proxy33.run(Unknown Source) ~[?:?]
	at org.jabref.gui.BasePanel.runWorker(BasePanel.java:253) ~[JabRef-4.2-dev-fat.jar:?]
	at org.jabref.gui.BasePanel.runCommand(BasePanel.java:851) ~[JabRef-4.2-dev-fat.jar:?]
	at org.jabref.gui.actions.OldDatabaseCommandWrapper.execute(OldDatabaseCommandWrapper.java:37) ~[JabRef-4.2-dev-fat.jar:?]
	at org.jabref.gui.actions.JabRefAction.lambda$new$2(JabRefAction.java:28) ~[JabRef-4.2-dev-fat.jar:?]
	at org.controlsfx.control.action.Action.handle(Action.java:419) ~[JabRef-4.2-dev-fat.jar:?]
	at org.controlsfx.control.action.Action.handle(Action.java:64) ~[JabRef-4.2-dev-fat.jar:?]
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
	at javafx.scene.control.MenuItem.fire(MenuItem.java:462) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.ControlAcceleratorSupport.lambda$doAcceleratorInstall$12(ControlAcceleratorSupport.java:165) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.KeyboardShortcutsHandler.processAccelerators(KeyboardShortcutsHandler.java:347) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.KeyboardShortcutsHandler.dispatchBubblingEvent(KeyboardShortcutsHandler.java:163) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
	at javafx.scene.Scene$KeyHandler.process(Scene.java:3964) ~[jfxrt.jar:?]
	at javafx.scene.Scene$KeyHandler.access$1800(Scene.java:3910) ~[jfxrt.jar:?]
	at javafx.scene.Scene.impl_processKeyEvent(Scene.java:2040) ~[jfxrt.jar:?]
	at javafx.scene.Scene$ScenePeerListener.keyEvent(Scene.java:2501) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:217) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$KeyEventNotification.run(GlassViewEventHandler.java:149) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_152]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleKeyEvent$352(GlassViewEventHandler.java:248) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleKeyEvent(GlassViewEventHandler.java:247) ~[jfxrt.jar:?]
	at com.sun.glass.ui.View.handleKeyEvent(View.java:546) ~[jfxrt.jar:?]
	at com.sun.glass.ui.View.notifyKey(View.java:966) ~[jfxrt.jar:?]
	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$48(GtkApplication.java:139) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_152]
```
</details>

#3621 Comment 28:
The database file is not saved on disk and therefore the exceptions occurs, because the database has an associated file, but its definetly not on disk. Only a bib.sav file is created.

Current master version works fine
#3621 Comment 29:
The generated structure-diff was too large, and will not be displayed.
#3621 Comment 30:
The error from @halirutan  should be fixed now. 
But I found another weird thing:
Open JabRef without any database:  And when you quit it there is still a Thread? running in the background
![grafik](https://user-images.githubusercontent.com/320228/37364395-b63a19f4-26fa-11e8-80a3-e4ec2e9eed6b.png)

#3621 Comment 31:
The generated structure-diff was too large, and will not be displayed.
#3621 Comment 32:
The generated structure-diff was too large, and will not be displayed.
#3621 Comment 33:
> Some more notes:
> 
>     The search-bar is extremely sluggish for large databases. I suggest we implement the same feature I proposed for the GroupView: Typing should be decoupled from the actual search and the autocompletion values.

Note, that this might be related to an actual performance problem of the maintable branch so it is probably not necessary to implement a delay for the actual search (if that is, what you are suggesting). See comments here:
https://github.com/JabRef/jabref/issues/1513#issuecomment-361528430
https://github.com/JabRef/jabref/issues/3373#issuecomment-367317463

Note, that the performance problems do not appear in the current master branch (see again https://github.com/JabRef/jabref/issues/3373#issuecomment-367317463).

It is recognised as an issue with the maintable branch:
https://github.com/JabRef/jabref/pull/3621#issue-161861853
#3621 Comment 34:
I fixed the keybinding ESC closes Entry Editor and it should also clear the search, but that is not working due to the fact that we have the same KEYCODE multiple times and it only returns the first:
https://github.com/JabRef/jabref/blob/cf8e6aac8263ce30eb2b042c8aacf2d88bbac4c8/src/main/java/org/jabref/gui/keyboard/KeyBindingRepository.java#L104-L106
#3621 Comment 35:
Either it's a merge problem in  #3005  or there is sth wrong: I no longer see any icons in JabRef, they are all displayed as squares. Already did a clean
#3621 Comment 36:
@tobiasdiez  @halirutan  any idea why no longer icons are shown?
![grafik](https://user-images.githubusercontent.com/320228/37925628-54ea38d8-3135-11e8-9a77-0df11d90187e.png)

#3621 Comment 37:
@Siedlerchr @tobiasdiez I don't see the standard MD icons either anymore. I believe the conflicting commit is a7639aa where Tobi created an IconView so that we can use icon names (rather than glyph names) in FXML files. I'm not sure why exactly this happens, but it *seems* the MDI font is not loaded anymore. When you include it explicitly in that `static` block in  `IconTheme`

```java
try (InputStream stream = getMaterialDesignIconsStream()) {         
    javafx.scene.text.Font.loadFont(stream, 7);                     
} catch (IOException e) {                                           
    LOGGER.error("Error loading Material Design Icons TTF font", e);
}                                                                   
```

it works for me. But Tobi should really look over this and judge why it worked before and doesn't work now. When I see this right, we didn't load the MDI font explicitly before either. We only created an AWT font for the swing parts.

I'm pushing this small commit because, in the current version, the new `JabRefMaterialDesignIcons` are in the wrong package after the merge and the code doesn't even compile.
#3621 Comment 38:
Strange, it works for me right now without any code changes... could you please provide a PR with your fix, @halirutan. Thanks.
#3621 Comment 39:
@tobiasdiez My fix is already committed since last night. See 588ca0204

Can you specify your operating system? Why does it work for you? 
#3621 Comment 40:
Preferences Dialog does not close on clicking Save 
#3621 Comment 41:
- [x] PDF comments text size too big
![image](https://user-images.githubusercontent.com/2141507/38310169-2a19d436-381c-11e8-8857-e6c883a5d569.png)
- [ ] toolbar needs a total rework, wrong button for new entry
- [ ] search bar extension animation is arbitrary
- [x] what does view-show document viewer do?
- [ ] About dialog looks broken, but may be because templates are not replaced? 
![image](https://user-images.githubusercontent.com/2141507/38335475-b23996f2-385e-11e8-8611-16587d339369.png)
- [ ] Library - open database properties freezes for me
- [x] Error dialog warning
`WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet file:/C:/Users/stfn/Desktop/Github/jabref/out/production/resources/org/jabref/gui/errorconsole/errorconsole.css`
- [ ] getBibtexdata from doi not working:
```
Opening: C:\Users\stfn\Desktop\Vorlesungen\Promotion\Paper\master.bib
Uncaught exception occurred in Thread[AWT-EventQueue-0,6,main]
java.lang.IllegalStateException: Not on FX application thread; currentThread = AWT-EventQueue-0
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:279)
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423)
	at javafx.scene.web.WebEngine.checkThread(WebEngine.java:1243)
	at javafx.scene.web.WebEngine.<init>(WebEngine.java:879)
	at javafx.scene.web.WebEngine.<init>(WebEngine.java:868)
	at javafx.scene.web.WebView.<init>(WebView.java:273)
	at org.jabref.gui.PreviewPanel.<init>(PreviewPanel.java:85)
	at org.jabref.gui.mergeentries.MergeEntries.initialize(MergeEntries.java:181)
	at org.jabref.gui.mergeentries.MergeEntries.<init>(MergeEntries.java:132)
	at org.jabref.gui.mergeentries.MergeFetchedEntryDialog.init(MergeFetchedEntryDialog.java:63)
	at org.jabref.gui.mergeentries.MergeFetchedEntryDialog.<init>(MergeFetchedEntryDialog.java:55)
	at org.jabref.gui.mergeentries.FetchAndMergeWorker.done(FetchAndMergeWorker.java:66)
	at javax.swing.SwingWorker$5.run(SwingWorker.java:737)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(SwingWorker.java:832)
	at sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(SwingWorker.java:842)
	at javax.swing.Timer.fireActionPerformed(Timer.java:313)
	at javax.swing.Timer$DoPostEvent.run(Timer.java:245)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
```
#3621 Comment 42:
@tobiasdiez  When opening the document viewer I still get a CSS warning:

And I noticed some odd thing with the group background:
- When I select an entry, the whole group side pane has the greyish color
- When I select a group, there appears some white space @halirutan 
![grafik](https://user-images.githubusercontent.com/320228/38460333-0e36b1be-3ab8-11e8-9970-7562dc948922.png)


```
WARNING: Could not resolve '-fx-accented-background' while resolving lookups for '-fx-background-color' from rule '*#mainPane' in stylesheet file:/E:/workspace/JabRef/jabref/bin/main/org/jabref/gui/documentviewer/documentviewer.css
```

#3621 Comment 43:
- [ ] Copy Paste to a new library gives an NPE in the EditAction in BasePanel, because the Globals.getFocusListener().getFocused() seems to be null.
#3621 Comment 44:
I propose the following 2 changes:

1. Change the font-smoothing of `.glyph-icon` to `-fx-font-smoothing-type: gray`. As discussed in length, we use this setting for fonts as well because otherwise, they look pixellated on Linux. (Pay attention to the copy and past buttons in the screenshots below).
2. Change `-jr-sidepane-background` to `-jr-toolbar` to make the side-pane headers and footers stand out from its contents, and make to make the a visible border to the entry editor toolbar.

Compare the following screenshots in full size:

![img](http://i.imgur.com/oBZxcGt.png)

![img](http://i.imgur.com/HfgPB2K.png)
#3621 Comment 45:
@halirutan The first change you propose is of course fine! Concerning the background color of the group pane, the second screenshot is "too white" for my taste (that probably comes as a big surprise for you ;-)). There is almost no visual distinction between the maintable, the group pane and the entry editor although one has a natural hierarchy group pane > maintable > entry editor of elements that determine what is shown in the other one. 
#3621 Comment 46:
I'm not sure this is the right place to report this, please let me know if not:

* If I select "Import into currently Library":
The dialogue to select a file pops up, I can select a .bib file and click open. The dialogue closes but the entry is not added to the library.

* If I select "Import into new Library":
The dialogue to select a file pops up, I can select a .bib file and click open. The dialogue closes and JabRef hangs.

Tested on:
JabRef 4.3-dev--snapshot--2018-05-07--maintable-beta--35b068386
Mac OS X 10.13.4 x86_64 
Java 1.8.0_172


#3621 Comment 47:
So I now fixed the language tests as well as some other failing tests. This is now good to go as our now master branch. @koppor please be so kind and do the git magic!

@JabRef/developers please go through the issues you reported and check whether they still exists in the most recent version and if yes please create a normal issue for them (or immediately fix them).
#3621 Comment 48:
Depends on #4015

(Trying out https://github.com/ahmed-taj/dep)
#3621 Comment 49:
Since there are conflicts, I did the following:

1. `git fetch origin --prune` - to ensure I have the latest commits
2. `git checkout master` - to be on the master branch
3. `git pull` - to ensure I have the latest updates at the master branch
4. `git merge origin/maintable-beta` - to merge this PR
5. Open IntelliJ
6. Wait for indexing being finished
7. VCS -> Git -> Resolve conflicts
  ![grafik](https://user-images.githubusercontent.com/1366654/40891405-31306260-6785-11e8-93cb-508613d04435.png)
8. Double click each file
  ![grafik](https://user-images.githubusercontent.com/1366654/40891411-3fde542a-6785-11e8-9f71-a9ef83817bc3.png)
9. At each file
  1. Apply all non-conflicting changes
    ![grafik](https://user-images.githubusercontent.com/1366654/40891417-59758a16-6785-11e8-9eeb-48e382382d7c.png)
  2. Resolve conflicts manually

Notes of important things I did during the merge:

1. Restored `ExportAction.java`. (But id not wire it into the existing code. Maybe, it can be deleted?)
  - Modified in the PR #4015 
  - Deleted in commit de4b416124f30c05bcf868081c935404521f1f2d
2. Kept the deletion of `gui/importer/ImportFormats.java`
  - I think, the commits 71fcea568fa35ac9da131e0cb85f5bb0e3614628, 576588ae8f72d39134f479e9d6e19def42abddca, and 2f5f2e5bbe2b42319736bd735791b0b3039096f6 for `ImportFormats.java` have to be ported to a certain place somehow. One can do `git checkout 2f5f2e5bbe2b42319736bd735791b0b3039096f6`, then `gitk --all src/main/java/org/jabref/gui/importer/ImportFormats.java&`, then `git checkout master` to a) see what changed in that file and b) to continue working
3. I had to do some compile fixes:
  - 55c3626de6be6db235c749f43a6a
  - 30443500d56657d79456dfe89edfc8dc9f8d6bc7

To create the new branch `v4.x`, I checkout 9b2fedc238d1ba64875c96cf8 (`git checkout 9b2fedc238d1ba64875c96cf8`), created a new branch v4.x (`git checkout -b v4.x`) and made it known to our GitHub repo: `git push --set-upstream origin v4.x`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3610 Comment 1:
I've now added the missing UI elements. I am not 100% sure about the localization. Let us see what the travis build says and then this might be ready for merging.
#3610 Comment 2:
Thanks @lenhard for the help! The build passes so I'll merge it now.
--------------------------------------------------------------
--------------------------------------------------------------
#3604 Comment 1:
According to https://github.com/JabRef/jabref/issues/3587#issuecomment-356100184, even the downgrade of install4j (9ec81c0) does not help.
  
#3604 Comment 2:
As apparently thid did not help I close the PR
--------------------------------------------------------------
#3603 Comment 1:
I merge this now so that it can serve as the base for https://github.com/JabRef/jabref/pull/3623.
--------------------------------------------------------------
--------------------------------------------------------------
#3601 Comment 1:
Hi, thanks for your interest! Your idea sounds nice. Let's see what the other @JabRef/developers  say about htis
--------------------------------------------------------------
--------------------------------------------------------------
#3597 Comment 1:
I refactored the list where possible.  This can be further improved if this rather simple dialog is ported to javafx (for example, getting rid of the glazedcel EventListl dependency)
--------------------------------------------------------------
#3591 Comment 1:
Cool! Could you point me to new implementation? In your large commit I see only a lot of Icon changes
#3591 Comment 2:
Oh, sorry - I forgot to commit all files. The main changes are in the `gui.maintable` package.
#3591 Comment 3:
While you are working on this, you might also take a look at #3356  
We could use the Latex2Html converter and then convert that HTML formatting to the TextFlow which was done in the search component tooltips
#3591 Comment 4:
Yes, this issue is already fixed merely by switching to JavaFX - the unicode is correctly displayed (see above the second entry in the table, the first screenshot shows the boxes while the correct string is shown in the second screenshot).
#3591 Comment 5:
One more step in the right direction. This PR has the potential to fix a lot of display bugs and we should be able to get rid of the annoying and unmaintained glazed lists library.

Nevertheless, I need to add a word of caution: We cannot allow the same situation as for the entry editor again. We've spent almost half a year in un-releaseable limbo because of that. The replacement for the main table needs to be absolutely bullet proof. However, the amount of  lines of code in this PR is too much for a meaningful review, so we need A LOT of manual testing by basically all developers.

I've played around a bit and I like the new layout of the maintable. What's a little strange is that every second row is highlighted differently. This should change for the final version. 

EDIT: Things that should be fixed with this PR ;) https://github.com/JabRef/jabref/issues?q=is%3Aissue+is%3Aopen+label%3Amaintable
#3591 Comment 6:
@Siedlerchr Thanks for the feedback. I'll improve the code accordingly.

@lenhard I completely agree! We should find a way to have a realeasable version while still work on the migration to JavaFX. The main problem is that the code is tightly coupled to the maintable (i.e. there is no abstraction layer before the BasePanel/MainTable that used in the other Swing dialogs). This has the potential upset that every single dialog may now trigger a bug (for example because it runs some code not on the JavaFX thread). So, even through I will try to thoroughly test the new code before marking it as "ready-for-review", there might still be countless bugs left which we need to find (and fix) in teamwork. Moreover, for the same reason, I think we also need to release a beta again.

That being said, the immediate question is: how much functionality should I try to migrate in this PR and what should follow as new PRs? As you said, the size of the changes makes the PR already unreviewable. But I would really like to have your feedback about some design questions. Especially since our aim should be not just to improve the gui but also decouple the code and make it more reusable.

Currently the new maintable is in a state where the very basic functionality works and the code is decoupled enough to actually write unit gui tests for it. There are still some bugs/feature that definitely need to be fixed before a users touches it (e.g. restore column width, context menus for the icons, a few display bugs). Then there are a few features that are not essential and rather isolated (e.g. "marking of entries"). These are probably good candidates for follow-up PRs. And finally there are features that I don't really see any benefit in reimplementing (e.g. coloring of table cells when the field is optional/required) or that are not really possible to implement with JavaFX (e.g. ["float search"](https://bugs.openjdk.java.net/browse/JDK-8091326)). Finally, the possible bug fixes @lenhard mentions should also follow as new PRs.

Any thoughts on this? (Sorry for the long text).
#3591 Comment 7:
I think we could have a separate main Table Beta Test-Release in an additional branch highly experimental and let some users test this functionality who are interested. Especially we would need some Mac/Linux guys 

#3591 Comment 8:
We can create a `javafx` branch, where we can integrate not ready features, but completed work packages (such as a basic entry table in JavaFX)

The master branch must be release-ready at all times. Release-ready means: all features of the old versions should be working (or the dev team decided to remove/disable a feature, such as the auto completion).
#3591 Comment 9:
So, I used this version now in production during the past few days and fixed a lot of bugs. Although not all features are yet migrated (see list above), I mark this PR now as ready for review. All further changes are coming as extra PRs onto this branch. 

I would suggest that you try this version out and if nothing serious pops up, I would create a post in the forum advertising this PR and ask users about their opinion (something like a very early access program instead of several beta releases). What do you think?
#3591 Comment 10:
I would be really cool if you could provide a table that lists all features related to the maintable that were present in the Swing version, e.g. sorting options, right click options, entry drop, column sorting, and could indicate if these features are working in the new version. Then we would have an overview of what features actually exist in the main table and we could have a meaningful discussion about which features we want to drop.

Personally, I don't really have an overview of all the things that the maintable can do. Could you perhaps provide this overview? I guess also @koppor know a thousand maintable features that I do not know.
#3591 Comment 11:
I changed the base branch to "maintable-beta". I would propose to proceed as follows:

1. @JabRef/developers review
2. Work-in review comments
3. Merge into `maintable-beta`.
4. Ask users to feedback to `maintable-beta`
5. Add new PRs on `maintable-beta`

Why? 

1. I think, PRs should be short and be closed fast. Not left open as the ones of @koppor. So, we can move on quickly. And we can also link to comments of this PR if necessary.
2. The discussions here are mixed on the implementation details and overall issues. I think, we should focus on implementation details 😇 

In case we need a overview-pr, we can create a PR from `maintable-beta` to `master` and describe the overall status there.
#3591 Comment 12:
I am *very* used to the floating search. See screenshots at https://github.com/JabRef/jabref/issues/3618.
#3591 Comment 13:
@lenhard I updated the first post to also include the features that are already migrated (it is only the very basic functionality). Right now we do not need to decide what features should be dropped since there is still a lot fundamental functionality to migrate (but we should speak about it in the next devcall). I just don't want this PR to explode even more and get feedback about some of the other refactorings / changes. Thus the early ready-for-review. 

@koppor Sounds like a good plan. 
#3591 Comment 14:
I fixed the Close Entry Editor with Escape bug
#3591 Comment 15:
@lenhard @Siedlerchr Is this architecturally OK? Then, I would propose to merge it into `maintable-beta` to reduce the size of PRs.

Note: The "real" PR of getting this into JabRef is https://github.com/JabRef/jabref/pull/3621 - there, code updates are only made as PRs to that branch.
--------------------------------------------------------------
#3588 Comment 1:
Thanks for the fix. I'll merge directly since this is only a minor change.
--------------------------------------------------------------
--------------------------------------------------------------
#3583 Comment 1:
Only a read timeout for log4j, fetcher tests passed
--------------------------------------------------------------
#3581 Comment 1:
@lenhard It is only a fulltext fetcher. Thus it never appears in the GUI but is used when you click the "fetch fulltext" button in the entry editor. It looks for an URL for the paper based on the information in the entry (such as DOI). 
--------------------------------------------------------------
#3580 Comment 1:
LGTM. Since this is only a minor thing, I'll merge directly.
--------------------------------------------------------------
#3579 Comment 1:
@JabRef/developers  A second review needs to be done
#3579 Comment 2:
@PJozeph Thanks for the quick follow-up and a Happy New Year!
--------------------------------------------------------------
#3578 Comment 1:
Some mior things, The only thing we should discuss is the renaming of the FileExtensions to FileType.
For me FileType would include actual information about the type, or a specific class., but in this case it's solely the extension
#3578 Comment 2:
@Siedlerchr Thanks for the feedback. I now changed the code accordingly.

Why don't you like the name `FileType`? The class currently contains a description and a list of extensions (e.g., "BibTeX library" with ".bib"). This is a bit for information than just extensions (which would be just a `Set<FileExtension>`). But I have no strong opinion about the name (the rename was triggered by the code `importer.getExtensions().getExtensions()`).
--------------------------------------------------------------
#3577 Comment 1:
For the next time, you should better create a branch where you commit the changes, so you don't have all the changes from your previous work. 

You should include a short description and to make your and our life easier, please use the issue in the description. In the title github can't find it.
See here for general information for a PR.
https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md
#3577 Comment 2:
next time i will proceed like that 
#3577 Comment 3:
or do you want to me to resubmit this, as it is needed ? 
#3577 Comment 4:
Yes, please resubmit the PR or at least remove the previous changes related to the file extensions. You can use [git cherry-pick](https://git-scm.com/docs/git-cherry-pick) to reuse your commit, so this should be easy.
--------------------------------------------------------------
--------------------------------------------------------------
#3574 Comment 1:
I'll merge this PR now so that I can continue working on the JavaFX migration. If you have further remarks, I'm happy to implement your suggestions.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3567 Comment 1:
Then add the Name in front additionally:

name mail mail

Am 22.12.2017 19:19 schrieb "Linus Dietz" <notifications@github.com>:

> *@LinusDietz* commented on this pull request.
> ------------------------------
>
> In .mailmap
> <https://github.com/JabRef/jabref/pull/3567#discussion_r158537626>:
>
> > @@ -90,9 +90,9 @@ Ulrik Stervbo <ulriks@users.sourceforge.net>
>  Stefano Gariazzo <steog88@gmail.com>
>  Lee Patton <lpatton@users.sourceforge.net>
>  Jörg Lenhard <joerg.lenhard@kau.se>
> -<joerg.lenhard@kau.se> <joerg@lenhard.info>
>
> okay, the problem is just, that now if I run the generate-authors script
> a new name Joerg Lenhard appears. How can I do that properly?
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3567#discussion_r158537626>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafo_s2PD9MlRNuOLJQD0FDKTDDXQoks5tC_KcgaJpZM4RK-_x>
> .
>

--------------------------------------------------------------
--------------------------------------------------------------
#3564 Comment 1:
okay, sorry for my  dummy things guys, now it works fine. I would like to resubmit #2772  issue 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3559 Comment 1:
Fixes https://github.com/JabRef/jabref/issues/3561
--------------------------------------------------------------
#3558 Comment 1:
As a follow up to https://github.com/JabRef/jabref/pull/3530, this PR deleted the non-existing translations.

Now the whole workflow should be stable.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3553 Comment 1:
@tobiasdiez 

> The creation of nodes is expensive since the hit counter triggers a run over all entries. @halirutan based on your experience with the performance investigation, is my observation correct?

I guess, this is what I saw this morning in the profiler. I didn't investigate further, but I was surprised that I saw constructor-hits. I thought the group-tree is static until it is changed by adding/deleting nodes but instead it seems the tree is rebuilt. I haven't worked through the whole implementation because there is a lot of stuff in it I haven't worked with before JabRef. This is another reason why I had the hope someone could join on this branch because I don't feel confident to implement a good fix for this fundamental flaw in the design.
#3553 Comment 2:
Ok, I think I found a solution which reuses the children, does not need to store the predicate but nonetheless has a good performance.
#3553 Comment 3:
@lenhard Have you seen the comment in the issue this PR should solve?

> @tobiasdiez Unfortunately the new version is not working as expected. While it still filters the groups, when a filtered group is selected, the associated entries are not updated accordingly in the main table view. This was not the case with the previous version..
#3553 Comment 4:
@halirutan Sorry, I did not look at the issue again and just tested for performance, not correctness. Of course that bug should be fixed before merging.
#3553 Comment 5:
Bug fixed -> merge! 😃 
#3553 Comment 6:
Great!
--------------------------------------------------------------
#3552 Comment 1:
okay, sorry i started travis  again, i will fix it and will come back 
#3552 Comment 2:
Good start, you should also take a look at the export dialog where the export formats are used to see if it can be changed there, too
#3552 Comment 3:
Changeed the string to FileExtensions at all places.
#3552 Comment 4:
How can i check in Travis where i broke the  code ? 
#3552 Comment 5:
@PJozeph  Select one of the travis jobsm e.g. modernizer and click on it it out:
Seems like you forgot some pieces of code. Eclipse should have already warned you about build errors,
But the error log on travis looks odd. I restarted the job
https://travis-ci.org/JabRef/jabref/jobs/319061181
#3552 Comment 6:
There is still a problem with the imports. try running `./gradlew check` on your local computer to avoid the delay through travis
#3552 Comment 7:
In Eclipse you can run CTRL+Shift+O to organize your imports 
#3552 Comment 8:
that's right,but  since the project  does not have org.jabref.logic.importer.fileformat.bibtexml folder the  CTRL+Shift+O will remove those imports @Siedlerchr 
#3552 Comment 9:
Then you have messed up sth. I will take a look at your branch
#3552 Comment 10:
Ah okay, you have an import name clash. If you simply remove the first import of java.io.File it should work again. (I tested it locally)


#3552 Comment 11:
I dont understand this. The ModsExportFormat and BibTeXMLExportFormat with full of compiler error there are many Classes that cannot be resolved. I still dont have org.jabref.logic.importer.fileformat.bibtexml package.

Removed the first java.io.File in the ModsExportFormat and BibTeXMLExportFormat class but got the same issue. 

What i see after running .**_/gradlew check_**  is that the build fails due to this compiler errors.  


![jabref2](https://user-images.githubusercontent.com/23094656/34206284-38c1abc8-e586-11e7-8610-0daf3e856683.png)
t the same issue. 
![jabref](https://user-images.githubusercontent.com/23094656/34206177-b1245a94-e585-11e7-8cad-a3165119c47a.png)

#3552 Comment 12:
![jabrefgradlewcheck](https://user-images.githubusercontent.com/23094656/34206721-053a721a-e588-11e7-9b54-6351eeb80a5a.png)

#3552 Comment 13:
I created a patch file which fixes the imports and your build:
[0004-fix-imports.patch.txt](https://github.com/JabRef/jabref/files/1576371/0004-fix-imports.patch.txt)

To import it, remove the .txt extension and do:
`git am < 0004-fix-imports.patch`

#3552 Comment 14:
unfortunately , no it does not 


![jabrefpatch](https://user-images.githubusercontent.com/23094656/34220206-1654ffee-e5b4-11e7-985b-e08a0e92f1a1.png)

#3552 Comment 15:
This really looks like a problem with your setup. The code in question (bibtexml/...) is automatically generated if I'm not mistaken. Can you try to run `./gradlew cleanEclipse`, `./gradlew eclipse` and `./gradlew generateSource`?
#3552 Comment 16:
i decided to rebuild the working environment. But the build failed  and i got a  exception as :   Execution failed for task ':junitPlatformTest'.
> Process 'command '/usr/lib/jvm/java-8-oracle/bin/java'' finished with non-zero exit value 1

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3543 Comment 1:
I have added a new gradle task for automatically checking if there is an outdated dependency:
```
$ gradle checkOutdatedDependencies
[...]
FAILURE: Build failed with an exception.

* Where:
Build file '/Users/dietzl/git/jabref/build.gradle' line: 219

* What went wrong:
A problem occurred evaluating root project 'JabRef'.
> There are outdated dependencies in build.gradle!
   Run ./gradlew dependencyUpdates to see which. Expression: (dependencyReport.outdated.count == 0)
```

This is actually reliable, since I have added our 'special' out-of date dependencies as exceptions the the dependency script.
--------------------------------------------------------------
#3542 Comment 1:
I can be updated/it has been replaed by a sucessor, but I could not get it to work, resulting in the same bug as https://github.com/javaee/jaxb-v2/issues/1144
https://github.com/javaee/jaxb-v2
#3542 Comment 2:
yeah, thats why I just added this comment after trying to get it to work for some time
#3542 Comment 3:
I have created an issue at https://github.com/koppor/jabref/issues/276 to keep track of this task
--------------------------------------------------------------
#3541 Comment 1:
What about adding some round-trip integration tests where a bibtex entry is converted into biblatex and back asserting that nothing has changed?
This would give us a bit more confidence, that all of this is working fine. You could start with the example from the forums http://discourse.jabref.org/t/convert-back-from-biblatex-to-bib/955/6

#3541 Comment 2:
@LinusDietz good suggestion. I now added round-trip tests in both directions.
#3541 Comment 3:
@lenhard Thanks for the review and the suggestion to improve the UI. I now made the checkboxes modal. 

I'll merge this PR now since it has 1.5 positive reviews and was on "ready-for-review" for almost a month. 
--------------------------------------------------------------
--------------------------------------------------------------
#3539 Comment 1:
Can you please explain the reason for the bug? In general, the string converter should not modify the source or target map.
#3539 Comment 2:
The reason for the bug is that the fromString method does a lookup in the map with the current txt in the field. If you enter a non predefined String into it, the map lookup returns null because not found.  
--------------------------------------------------------------
#3536 Comment 1:
I wasn't sure, cause this seemed a seldom case. I can move it there.

#3536 Comment 2:
Superseeded by #3734 
--------------------------------------------------------------
#3533 Comment 1:
@lenhard @tobiasdiez Thanks for the fast review. Here are to comments to Lenhard's first message:

> In that case, the configured citation style can be used, but I cannot select a new one in the preferences dialog. There, the list is empty.

Yes. I did not consider this case. I assume the fat-jar contains the styles still packed as jar. I'm sure I can fix this.

> Then, when trying to preview items I get exceptions. But these exceptions happen reliably for certain bib items, so it seems just like a bad combination of the randomly selected style I used for testing (ACM SIG 3+ authors) and the bib items.

Took a while, but I could pin it down. I'm not sure I caught the exception before but now you will see "Cannot create preview" and the exception appears in the log as usual. The error comes from your BibEntry. When you look at your BiBTeX code, you see

```
month     = {December 17-19},
```

If this is indeed valid BibTeX, then our CSL converter does not handle it correctly. You can find [the Json format](https://hastebin.com/udibubehiw.json) of what `org.jabref.logic.citationstyle.CSLAdapter#bibEntryToCSLItemData` makes from your code. It's so short that you spot the error easily. CSL is choking on the invalid date-parts.
As soon as you remove the days, the item is rendered correctly.

This error should have happened before as I did not touch that part. I'm not sure how this can reliably be fixed as we only extract the latex-free fields and turn them into strings. That should probably be a different PR.
#3533 Comment 2:
@halirutan Thanks for the investigation and I hope you did not waste too much time on that. That is not correct bibtex (well bibtex is very open and relaxed and of course you can write it in this way, but this is not how the content of the month field is expected), I just opened an old bib file and clicked around, not caring too much about the actual data. You can ignore that error in your PR here.

I think a viable strategy would actually be to absorb the exception completely. Exceptions in JabRef's log should indicate problems in JabRef. This is not a problem of JabRef, but of user data and the citation styles library. Therefore, I think it would be sufficient to create a log entry stating that the attempt to parse an entry results in an error from the citation styles library. But this can be part of a different PR.
#3533 Comment 3:
Things that need to work:

1. Fast scrolling through the entry liest with preview open
2. Edit -> Copy Preview for single and many items
3. On a selection right click and Copy citation

@lenhard I cannot reproduce that the styles are not found with the fat jar. Can you try to delete and rebuild it and show exactly what you try? I see all styles and I can switch them as usual. The fat jar has the same structure as the normal jar with all styles included as files.
#3533 Comment 4:
I am doing the following:
 - Execute `gradlew build`
 - cd to `build/libs`
 - execute `java -jar JabRef-4.1-dev.jar`
 - For some reason there is nothing available to select in the preview panel (see picture), although the CSL files are contained in the fat jar (not as a jar, but as the single .csl files right in the root of the jar). The log says 
```
Opening: C:\Users\joerg\Desktop\jl-main\diss\tex\references.bib
something went wrong while adding the discovered CitationStyles to the list 
```
![preview](https://user-images.githubusercontent.com/1515701/34074258-bcdc0de6-e2ab-11e7-8c2d-d9fba3636aea.png)

Furthermore, I am getting several warnings on the console:

```
Dec 16, 2017 10:02:18 PM javafx.scene.CssStyleHelper calculateValue
WARNING: Could not resolve '-fx-info' while resolving lookups for '-fx-text-fill' from rule '*.log' in stylesheet jar:file:/C:/workspaces/jabref/build/libs/JabRef-4.1-dev-fat.jar!/org/jabref/gui/errorconsole/ErrorConsole.css
```

After these warnings I updated my current installation from Java 1.8.0_144 to Java 1.8.0_152 and the warnings were gone, but the rest stays the same (no citation styles in the list). My configuration is now

```
JabRef 4.1-dev
Windows 10 10.0 amd64 
Java 1.8.0_152
```
#3533 Comment 5:
I tested it and I found there is a problem with how you get the path. Will commit a fix.
#3533 Comment 6:
@halirutan  @lenhard  I fixed the path handling and improved the code for searching inside the jar file.
For me it works now when I directly run JabRef Main in Eclipse 🙌 😃 
#3533 Comment 7:
@Siedlerchr Can you point out what exactly went wrong with the path so that I don't make the mistake in the future? Otherwise nice clean up! I removed your `println`, I guess you simply forgot this and I renamed `jarfs` to `jarFs` to satisfy my spell check (I like to have absolutely no warning if possible :smiley: ).

@lenhard Can you test it again. Your approach is basically what I did too and here it worked.
--------------------------------------------------------------
#3530 Comment 1:
Test fails because of

    java.io.IOException: Server returned HTTP response code: 503 for URL: http://ieeexplore.ieee.org/document/7421926/
--------------------------------------------------------------
#3529 Comment 1:
Sadly updates to the group tree in general are ignored, see e.g. https://github.com/JabRef/jabref/issues/3189. Normally, one would like that all changes are automatically propagated using the event bus / javafx binding, but for some reason this does not work (sorry, I forgot the details).
#3529 Comment 2:
Ok, thanks for clarifying. I am not sure what to do with this PR then. Under the hood it works (avoids the exceptions), but all of this is not visible to the user. Right now it requires a restart of the application.
#3529 Comment 3:
Is the view updated when you switch between databases? This always worked for me so far. I would say merge this PR here (since it fixes the NPE) and comment in the above issue that there are more update problems. I'll have a look at this problem, but not right now as this week is kind of a hell for me.
#3529 Comment 4:
Yes, it is updated when switching between databases, e.g. all groups are removed and the all entries group is displayed when I remove the group statement. A rename of the group in the file doesn't carry over, so there are probably deeper problems.

I still have the problem that it tends to display the groups tree of the wrong database, but at least the change is reflected somehow.
#3529 Comment 5:
Can this be merge now?
#3529 Comment 6:
Sure, go ahead.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3523 Comment 1:
This refs https://github.com/JabRef/jabref/issues/110. I am still planning to work on that as I want to provide our logic package as standalone library.
#3523 Comment 2:
@koppor Ah, I was looking for that issue :) Maybe we should re-open it, since we now have a tangible use case (the new Java module system). Once the model package is modularized, the logic package will not be far off.
#3523 Comment 3:
@JabRef/developers With another review, this could be merged.
--------------------------------------------------------------
#3521 Comment 1:
This PR does three things

1. Unify translations. If there are two different translations in Menu.properties and JabRef.properties, the one from Menu.properties is written into JabRef.properties: Eintragstabelle fokussieren -> Fokus auf Tabelle setzen. This is also the case if the key does not contain an ampersand, but the value does.
2. If current translation is empty, the English key is copied in
3. Exclamation marks, double colons, and equal signs are escaped again

I could invest time to reduce the size of the diff. However as there are only very little number of cases where there changes in the case of 2, I would let it go through to finally enable and test Crowdin.

If the experiment has other drawbacks, we can a) just turn off crowdin or b) turn off crowdin and revert this PR!
#3521 Comment 2:
Looks okay from my side. 
Do I have to add these escapes in Crowdin manually? E.g. for colons?

#3521 Comment 3:
Crowdin adds the escapes by itself.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3512 Comment 1:
Search bar appears here. I think, @j0hannes  should run the build at his system. Currently, one has to checkout the code and execute `./gradlew run` as we currently have issues with our code signing certificate.
#3512 Comment 2:
@koppor I just rebuilt the package from git and the search bar is still not there.
#3512 Comment 3:
@j0hannes did you checked-out the branch `fix3505` or still used the master? Since this PR is not yet merged, the fix is not included in the master branch. If you used the correct branch to build, is the same error message still there?
#3512 Comment 4:
Anyway, I merge this now since the code still works under normal conditions and might help in others. So a new checkout of the master branch should work now.
#3512 Comment 5:
@tobiasdiez Now it's back. The package will certainly only use the master branch; I though it was already merged there.
#3512 Comment 6:
@j0hannes thanks for the feedback and your help debugging this issue! Much appreciated. 
--------------------------------------------------------------
#3511 Comment 1:
For travis this is ok, but with this configuration no errors and warnings are reported during debug sessions of tests, right?
#3511 Comment 2:
@tobiasdiez  This only applies if you run the tests through gradle. If you manually debug the test in the IDEA, it should be normal behaviour
#3511 Comment 3:
I just tried it and sadly it does not work in IntelliJ. For example, the method `FileUtilTest.testRenameFileWithFromFileExistAndOtherToFileExist` currently prints an error, while with the proposed configuration nothing is displayed in the console. 
#3511 Comment 4:
So what about this PR? It is marked as ready-to-review, but it seems it is not functional?
#3511 Comment 5:
Can we get some progress here? The travis log is really annoying at the moment. I'll add this to jabcon in the hope that it gets done then.
#3511 Comment 6:
I think I have an idea: I commit my changes and add the files to .gitignore So it won't overwrite @tobiasdiez  changes on merge/pull right?
#3511 Comment 7:
https://blog.turingg.com.au/configuring-how-exception-stack-traces-appear-in-log-entries-using-log4j2-e3a3dc5e48bc
--------------------------------------------------------------
#3509 Comment 1:
How does this relate with the preferences?

![grafik](https://user-images.githubusercontent.com/1366654/33819590-8f48cb6c-de4b-11e7-80a2-993c8a1396c3.png)

Documentation at http://help.jabref.org/en/FileLinks#auto-linking-files

Are these settings still respected?
#3509 Comment 2:
@koppor Yes, these settings are still valid. The fix applies only if you select the first option "Auto link files that start with the BibTeX key". 
#3509 Comment 3:
@koppor Why did you removed the "ready-for-review" flag and marked this PR as WIP? I was and I am still waiting for a second review, otherwise this PR is ready from my point of view. The minor issues pointed-out by @Siedlerchr are now also fixed.
#3509 Comment 4:
Think, because I watched this PR, liked it and just wanted others to focus on other PRs.
--------------------------------------------------------------
#3508 Comment 1:
That's a nice solution. Btw, do you have any idea why the second file in the listvie does not indicate the blue selection ? Although it is selected
#3508 Comment 2:
@lenhard The beauty of JavaFX! 
@Siedlerchr No idea. Similarly, there are these annoying padding problems of the first row. The "beauty" of JavaFX! 😄 
--------------------------------------------------------------
#3507 Comment 1:
+1 or not showing the dialog at all. We have the undo possibility and I would not think that users accidently press <kbd>Del</kbd>. Would be nice if I could quickly delete attachments if JabRef goes crazy ^^
--------------------------------------------------------------
#3506 Comment 1:
@lenhard I manually tested most use cases, where the code changes (except OpenOffice since I don't use it). What are our current plans for the 4.1 release? When do we want to release? If there is still some time before the release I would prefer if this PR is merged before the release. 
#3506 Comment 2:
You may want to add the percent sign and the ampersand (&), which is problematic as it creates a problem with biber/biblatex 
#3506 Comment 3:
Should this still go into 4.1?
#3506 Comment 4:
@tobiasdiez When you fix the checkstyle issues and conflicts then this PR can be merged.
--------------------------------------------------------------
#3504 Comment 1:
@tobiasdiez @lenhard I hacked a version of the `CitationStyleGenerator` that manages a static instance of `CSL`. You find it in this [gist](https://gist.githubusercontent.com/halirutan/b9d74d414524edf9e534aea2307f4628/raw/393a1c3c05d58938401de818c6b45c1bcbaae488/CitationStyleGenerator.java). It vastly improves performance and memory footprint. The only sad thing is, that `CSL` itself needs so much memory, even for one single instance. I find over 500MB not acceptable even if many machines nowadays are equipped with at least 8GB, laptops might not.

Remarks: `CSL` is in general not threadsafe, but I'm not sure this is a problem with our current implementation. I tried to use `ThreadLocal` as well, but we have an armada of worker threads and `doInBackground` selects one. This means that several thread-local `CSL` instances are created which is not helping much.

The current behavior is that the first Preview takes as long as it took and until the style or the output format is changed, all follow-up calls are cheap, fast and don't use much memory. In numbers this means that while before one call to create the preview text needed 70.000 ms under profiling, it now takes on average about 800ms. The memory is better as well. Before we had about 85MB per preview and now 100 previews need 125MB (including the first expensive call).

Btw: Don't be confused when I say it needs over 500MB and it needs 85MB. The profiler does not count all objects and makes certain estimates. So the profiling memory will usually be smaller than what you see in your memory monitor.
#3504 Comment 2:
@halirutan From my point of view, we could just scrap the CSLs again and remove them from JabRef completely. But I think @koppor has a strong opinion on it. 

Maybe the right way to go is to have them improve their implementation and I've seen that you've already opened an issue for that https://github.com/michel-kraemer/citeproc-java/issues/40 Let's hope they react.
#3504 Comment 3:
Yeah, CSL was wished by many users and is a strong selling point 😇

To improve speed, we added the CSL cache. Think, with JavaScript V8, it
also can get much better. Maybe, we should put energy in that...

Reimplementing csl-proc in Java is also possible, but much effort...

#3504 Comment 4:
I checked out this branch and I would have included my fix in here, but we still have the big problem, that UTF8 fonts are not displayed correctly. This might be related to [this question I asked recently](https://stackoverflow.com/questions/46954858/display-unicode-characters-in-a-jlabel-on-os-x) although now it's for JavaFX and I'm on Linux.

Anyway, in the old preview, if an entry contains e.g. `textit{..}`, it looks like this in the preview

![img](http://i.imgur.com/L8p3jYP.png)

In the JavaFX preview from this branch, the same entry displays like this

![img](http://i.imgur.com/DzcdTjL.png)

If you like to try this out, here is the shortened entry

```
@PhdThesis{deBraga2001,
  author    = {Michael deBraga},
  title     = {{The postcranial anatomy of \textit{Procolophon} (Parareptilia: Procolophonidae) and its implications for the origin of turtles}},
  school    = {Department of Zoology, University of Toronto},
  year      = {2001},
  type      = {PhD thesis},
  address   = {Canada},
  note      = {303 pp.}
}
```

My PR for the CSL performance should be almost unrelated to this here and can later easily be merged if we find it works acceptably.
#3504 Comment 5:
Thanks for the feedback. I revised the code accordingly. 

@halirutan I couldn't replicate the problem with `textit` but I only tested it for the default preview layout (not cls). I would like to revisit this problem as soon as your PR with the simplified cls inclusion is merged so that testing gets easier. According to google, the problem occurs when custom fonts are used (see e.g. [stackexchange](https://stackoverflow.com/questions/44116125/javafx-webview-doesnt-render-jsf-page-correctly-symbols-instead-of-values-from?noredirect=1&lq=1))
#3504 Comment 6:
<s>latex2unicode uses the math alphabet instead of the normal alphabet for `textit`. Note hat in mathematics, `mathit` is the command for italics text, not `textit`.

See https://github.com/tomtung/latex2unicode/blob/a3610c3b8161b5d2e604e1bebc9a1a1d780e4474/src/main/scala/com/github/tomtung/latex2unicode/helper/Unary.scala#L647

and compare 𝐻 with 𝘏:
</s>

Everything wrong above. There is only one italics H. I totally misunderstood the comment at <https://stackoverflow.com/q/46954858/873282>:

--cut - emphasize is mine --
Yes. I thought those characters were just your example of supplementary characters. If your goal is simply to show bold and/or italic text, **you should never use the Mathematical Alphanumeric Symbols block of Unicode to accomplish that**. That Unicode block has a specific purpose, related to mathemtical formulae; any other use is abuse of the characters. You don’t even need fonts; just use "<html><body>This is a <i>test for italics</i> and <b>a test for bold</b></body></html>". See also meta.stackoverflow.com/questions/342024
--end--


#3504 Comment 7:
From what I read, the mathematic area is the only font which provides italics. And I am unsure whether we really should support that. 
#3504 Comment 8:
Question: If there was a mystical `latex2html`, could this be a replacement for all usages of the latex2unicode converter?

For the Mathematica plugin, I had to transform the doc of built-in function to html. Fortunately, I could even use MathML and now the function docs contain everything from italics, simple formulas, and integrals. 
#3504 Comment 9:
@halirutan  There is a latex2html converter. But not all cases should be handled by this, for example you typically want names with accents or other weird characters to be displayed as Unicode.
#3504 Comment 10:
I propose the following which may make our life a lot easier:
- Main Table is a swing component which uses HTML
- The entry preview is soon a WebView Component, so it's also HTML
- CSL gets also written to HTML, if I am right

So why don't we use the latex2html converter on both of them?
This would make our life a lot easier.
Maybe we should discuss this in a devcall?
#3504 Comment 11:
@Siedlerchr That was the reason behind my question. I ran several times into this issue on both Linux and OS X and it was the reason for the [question on SO](https://stackoverflow.com/questions/46954858/display-unicode-characters-in-a-jlabel-on-os-x). There, it was also suggested to use HTML and I'm also confident, that it would make life easier.

In addition to "it is rendered at all" we hopefully get a better quality. On Linux the italics look so ugly that it is almost not bearable. Therefore, if easily possible, I vote for using HTML for rendering LaTeX.
#3504 Comment 12:
One reason for using latex2unicode was that our own custom conversion was relatively incomplete and partly broken. I am not sure on the state of the html conversion, but I wouldn't presume that it's perfect. So if we go for displaying html everywhere (which is perfectly fine in my point of view), it would also be cool if we had a robust Java library that does the LaTeX to html conversion. I am not sure if such a library exists, though, and then we will have to make do with the current conversion.

The main reason for latex2unicode was to enable a proper search of entries independent of LaTeX commands. As far as I understand, this shouldn't conflict with displaying html and can be kept as is.
#3504 Comment 13:
So how do we want to proceed with this PR? The discussion concerning latex2unicode/html is a bit decoupled from the actual purpose of this PR (which is just to move forward with the migration to JavaFX). Maybe it also makes sense to extract our latex2html code and merge it into the latex2unicode library we use.
#3504 Comment 14:
I remember the discussions with @oscargus who argued that our latex2html converter is the most complete one. Maybe, we should offer it as library? Refs #110 
#3504 Comment 15:
@tobiasdiez I really would like to concentrate on the JavaFX part of this PR as well, but until the unicode issue is resolved, this breaks preview for entries that contain any LaTeX on my machine. As long as I'm not the only one where this happens, I see no way we could merge this PR without annoying a lot of users. Therefore, we need to discuss the latex2XXX issue somewhere first. Do you have a suggestion how we should proceed?
#3504 Comment 16:
+1 for switchting to latex2html in this case (entry preview). Thus, moved to v4.2 and not for v4.1 release.
#3504 Comment 17:
I now used latex2html for the preview and it seems to work fine. I also implemented the citation style provider as discussed with @halirutan in his recent PR.

Sadly, I made some mistakes with while checking out my code and now cannot push to this branch anymore (git claims "everything is up-to-date" - well it isn't). So continued at https://github.com/JabRef/jabref/pull/3574.
#3504 Comment 18:
@tobiasdiez  in that case you have to do a force push, e.g. when amending your last commit. 
#3504 Comment 19:
@tobiasdiez Only regarding the

> Sadly, I made some mistakes with while checking out my code

When you merge updates into this branch and you use rebase, then you cannot push it again. If you are sure no one else has used your branch, you have to make a force push and everything is fine. Rebasing your (local) branch looks nicer because you don't get a cluttered history wich merge commits, but it should only be used you are working on a local branch.


#3504 Comment 20:
Thanks for the help but the problem was not about the rebase/force pushed. I created the branch on another pc and used the github gui tool to check it out on a new one. For some reason git now thinks the remote branch associated to my local code is `JabRef/javafxPreview` instead of just `javafxPreview`. I could probably remove/readd the remote branch but it was easier to just create a new PR.
#3504 Comment 21:
You can edit .git/config directly for changing branch config. You can also
use gitk --all to check, what's going on.

Finally, git push -f origin HEAD:BranchNameAtOrigin always works;
regardless of your local branch name. No need to create a new PR then...

Am 23.12.2017 22:22 schrieb "Tobias Diez" <notifications@github.com>:

> Thanks for the help but the problem was not about the rebase/force pushed.
> I created the branch on another pc and used the github gui tool to check it
> out on a new one. For some reason git now thinks the remote branch
> associated to my local code is JabRef/javafxPreview instead of just
> javafxPreview. I could probably remove/readd the remote branch but it was
> easier to just create a new PR.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3504#issuecomment-353748965>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafhu0cSaLVRCdGZVkQx8EhjmoDjIpks5tDW8dgaJpZM4Q7wk4>
> .
>

--------------------------------------------------------------
#3503 Comment 1:
It seems we're having a bit of a shortage of reviewers at the moment ;)

Since this is such a small one-line change that actually fixes a bug, I'll merge this now even if there's only one review.
--------------------------------------------------------------
#3502 Comment 1:
Hmmmm that's odd, for me it worked. Will take a look at it
#3502 Comment 2:
Okay, I tested things again and I cannnot reproduce your error. Works fine on my side
#3502 Comment 3:
Tested again, still same error, regardless of how I configure the fetcher in the UI.

It seems that someone else should be testing this as well.
#3502 Comment 4:
Is this the right test setting? --> Works here.

![grafik](https://user-images.githubusercontent.com/1366654/33819800-8ea24d90-de4c-11e7-9122-f350bfc5aa18.png)

#3502 Comment 5:
I get the same error on current master, so this is probably unrelated to this PR. 

Seems what I get back from acm is Chinese instead of a web page, which probably means some encoding problem:
![acm](https://user-images.githubusercontent.com/1515701/33823198-80585eec-de5a-11e7-8be0-9e86afe67838.png)

This shouldn't block the current PR, which I am merging now.

--------------------------------------------------------------
#3499 Comment 1:
This is a screenshot on MacOS if you try to install a binary **WITHOUT** code signing. It's not possible.
![screen shot 2017-12-08 at 15 25 18](https://user-images.githubusercontent.com/1254003/33769941-3e516c1c-dc2c-11e7-99d2-a72825da9862.png)
![screen shot 2017-12-08 at 15 25 23](https://user-images.githubusercontent.com/1254003/33769923-2d92e55e-dc2c-11e7-95c6-38bc93a96957.png)
#3499 Comment 2:
This is a screenshot (thanks @Siedlerchr ) when you try to install an entirely unsigned .exe on windows.
![64d45a4b-96a7-4f8d-a065-e4f17b092be3](https://user-images.githubusercontent.com/1254003/33770026-8021bed0-dc2c-11e7-86eb-88df88ae7fa8.jpg)

#3499 Comment 3:
I'll close this now, as the certificate does not seem to be accepted by the major operating systems.
--------------------------------------------------------------
#3497 Comment 1:
Seems like this could be a LInux thing and related to our customjfx panel, see also the log in #3500 
#3497 Comment 2:
I merge it now since it is still a slight improvement over the existing code. I'll have a look at the azure reports if a similar exception gets reported in the next days.
--------------------------------------------------------------
#3496 Comment 1:
I didn't test it but I trust you (and even more so the newly added test 😄 ). Thus direct merge.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3487 Comment 1:
Add one more symbol. Related to #3307 
#3487 Comment 2:
Thanks, perfect now :) I'll merge directly.
--------------------------------------------------------------
#3486 Comment 1:
This should be fixed now, I reverted to my initial idea. I heavily clicked around and switched tabs in the entry editor and randomly selected things in the main table and in the integrity check table. No longer exception
#3486 Comment 2:
I have tested it locally and can confirm that it is working now.
--------------------------------------------------------------
#3484 Comment 1:
What is the current status of this PR? Will you be working on this in the near future?
#3484 Comment 2:
According to requests from Tobias this PR is deprecated.

On Tue, Feb 6, 2018 at 1:04 PM, Stefan Kolb <notifications@github.com>
wrote:

> What is the current status of this PR? Will you be working on this in the
> near future?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3484#issuecomment-363402610>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ALp4qjesqCTvQIeGqJfIKFx86uX25Ea1ks5tSD_ngaJpZM4Q0e8f>
> .
>

#3484 Comment 3:
We generally like the idea and think, it will help users to work with JabRef more efficently. In the context of our JavaFX migration, it would be nice to have the dialog in JavaFX. Moreover, some nasty details (as outlined by @tobiasdiez) should be treated. @mpele would you be so nice to invest the energy to work on that?
#3484 Comment 4:
First of all, due the some deadlines that I have, I am not able to promise
that it will be finished in next few weeks.
And most important, I am not sure what is expected to be done. According to
yours opinion what should be the context of the dialog and what choices
should be offered to user?

On Fri, Feb 23, 2018 at 5:28 PM, Oliver Kopp <notifications@github.com>
wrote:

> We generally like the idea and think, it will help users to work with
> JabRef more efficently. In the context of our JavaFX migration, it would be
> nice to have the dialog in JavaFX. Moreover, some nasty details (as
> outlined by @tobiasdiez <https://github.com/tobiasdiez>) should be
> treated. @mpele <https://github.com/mpele> would you be so nice to invest
> the energy to work on that?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3484#issuecomment-368060332>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ALp4qtsOMoYzYiYrifM3aAsgZD-CuFybks5tXuc8gaJpZM4Q0e8f>
> .
>

#3484 Comment 5:
Ping 😄 
--------------------------------------------------------------
#3482 Comment 1:
Thanks for your contribution!
--------------------------------------------------------------
#3481 Comment 1:
Maybe add the rule to reject release candidates as described at https://github.com/ben-manes/gradle-versions-plugin#revisions?

Maybe, we run this task as travis cron job, which fails if dependencies are outdated?
#3481 Comment 2:
Failure is not a good idea, as we don't use the latest Version of some libs that only work with java 9
#3481 Comment 3:
Cronjob on a branch. No impact on master. Or maybe only on master. Not on
PR. Remember that our  binaries are built on CircleCI.

Maybe store the old result and if there is a diff, error.

I am searching for a way to mimic the behavior of versioneye somehow!

Am 03.12.2017 23:52 schrieb "Christoph" <notifications@github.com>:

> Failure is not a good idea, as we don't use the latest Version of some
> libs that only work with java 9
>
> —
> You are receiving this because your review was requested.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3481#issuecomment-348824523>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafnx-rcZKafsdG7SFQ66hFc5IDV-Rks5s8yZAgaJpZM4Qzq2T>
> .
>

#3481 Comment 4:
You may find https://github.com/y-yagi/gradle-update-notifier helpful. It creates a github issue when updates are detected. I haven't used it, though.
#3481 Comment 5:
We will integrate it into master
#3481 Comment 6:
Reading https://github.com/ben-manes/gradle-versions-plugin#report-format, we don't need any change in the gradle config. I enabled CircleCI.
#3481 Comment 7:
I merged to prepare the check. However, we have to fix our certificate issue until we can build on CircleCI again. I am in contact with a certificate vendor.
--------------------------------------------------------------
#3479 Comment 1:
Doesn't work otherwise in the keys, because white spaces are treated as delimiter between key and value.
https://de.m.wikipedia.org/wiki/Java-Properties-Datei

Using underscore was a JabRef proprietary way. Using escapes seems to be
the usual way.

Also note that all the escaping in the value field got optional!

#3479 Comment 2:
- [x] adapt script to handle new entries also with `\ `

DevCall: merge after that is fixed.


#3479 Comment 3:
OK, `org.jabref.logic.l10n.LocalizationConsistencyTest#findMissingLocalizationKeys` now works also with the value vield:

```
java.lang.AssertionError: DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH LANGUAGE FILE
1. PASTE THESE INTO THE ENGLISH LANGUAGE FILE
2. EXECUTE: gradlew localizationUpdate
[
No\ more\ escaped\ characters\ in\ the\ value\ field=No more escaped characters in the value field
] 
Expected :[]
```
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3475 Comment 1:
For future contributions, please always update the existing PR (except you messed up) . That makes it easier to follow and review your code. On merge all commits will be squashed into one
#3475 Comment 2:
I am sorry. I am a beginner. This is my first pull request and I did mess up my whole JabRef program. I rebuilded the whole program. Thank you for your advise.
#3475 Comment 3:
Thanks again for your contribution!
#3475 Comment 4:
@tobiasdiez @lenhard @Siedlerchr Thank you all for your help. Our first time contributing to an open source project was a good experience thanks to your feedback. 
#3475 Comment 5:
@weidafan We are about to release a new Version of JabRef and would like to attribute you with your full name. Can you tell us your name, so we can include it?
#3475 Comment 6:
Hello, thank you for you invitation. My full name is Weida Fan.

On Dec 22, 2017 7:20 AM, "Linus Dietz" <notifications@github.com> wrote:

> @weidafan <https://github.com/weidafan> We are about to release a new
> Version of JabRef and would like to attribute you with your full name. Can
> you tell us your name, so we can include it?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3475#issuecomment-353587792>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AeRaTxM_X6BZLhlCDlgl27RmFEdYofjKks5tC56FgaJpZM4Qxrvm>
> .
>

--------------------------------------------------------------
--------------------------------------------------------------
#3473 Comment 1:
Hi,
I think the html parsing is not really a problem. We already use that in other cases as well. You could also take a look at jsoup for parsing html contents/finding dat between elements (should be already included in our deps)
#3473 Comment 2:
The problem with using libraries to retrieve the information from html is that their html seems to be somewhat buggy (using `<p />` for example).
#3473 Comment 3:
From my point of view, the fetcher with its core features is finished.
The additional features mentioned in the initial comment are something I might tackle later on.
#3473 Comment 4:
I just ran some "manual" tests for very old eprints and discovered that they indeed changed something in 2000 - up to 2000, the eprints don't have versions and the date format is a bit different.
I made this "WIP" again and am working on also supporting these old entries.
#3473 Comment 5:
I implemented support for pre-2000 entries; also added some tests for these as the pre-2000 entries don't seem to really have a "strong" standard format.
Luckily there aren't too much of these (about 65), so the tests just cover all of them.

I will now do some more "manual" testing, but I think everything will be finished in the next few hours.
#3473 Comment 6:
I took a look at the `IdBasedParserFetcher` and if you insist, I could use it - but this fetcher works slightly different in that it requests *two* different URLs and builds the resulting entry with information from both those URLs.
#3473 Comment 7:
ok, then leave it like that. It was just a suggestion that came to my mind while browsing the code.
#3473 Comment 8:
@lenhard I see your point - I haven't thought about that as I usually only use the "New entry" -> "ID based" way to fetch entries.
After looking into it, I don't think it belongs in the web search side bar as it only searches based on the ID of a paper; the DOI fetcher isn't in the side bar either. This makes sense from my point of view, as the web search side bar doesn't give any clues that it expects an ID. But if you think it makes sense to add it there, I can do that.
#3473 Comment 9:
@derTimme Thanks for the explanation! What you write makes sense. There's no need to add the fetcher to the web search side bar as well. 

Unfortunately, there are some merge conflicts in the language files now. Could you please resolve those and then this is ready to go into master.
#3473 Comment 10:
I'm really confused right now... I tried to merge in master and apparently it worked - in my local repo, the localization files look fine and I can do
```
git checkout master
git merge iacr_eprint_fetcher
```
without any conflicts...
#3473 Comment 11:
@derTimme  You have to first configure the JabRef/jabref repo as remote repository. Your master branch is still on the version when it was first forked. It does not get synced automatically.

[Gitbub Help on adding a cloned repo with a remote one](https://help.github.com/articles/fork-a-repo/#step-3-configure-git-to-sync-your-fork-with-the-original-spoon-knife-repository)

Add JabRef as remote repo:

```
git remote add upstream https://github.com/JabRef/jabref.git
git checkout <your branch>  
git merge upstream/master 
```

The last one merges the changes from the upstream repo (in this case the JabRef/jabref main repo) 
#3473 Comment 12:
Okay, as all conflicts are resolved and the reviews are okay, I merge it now into master!
Thank you very much for your contribution! We hope you continue your contribution ;)
#3473 Comment 13:
I'll merge this now before you have to cope again with changes on the master branch. I'm sorry for the inconvenience caused by our recent change to the language files. Thanks for your contribution!

Edit: ok @Siedlerchr was quicker :-)
#3473 Comment 14:
Thank you :)
--------------------------------------------------------------
#3470 Comment 1:
One reason for the failure are the missing underscores in the translation of german, e.g Prüfe Integrität
#3470 Comment 2:
We should get rid off the underscores anyway... Seem, they are an old
relict!

Am 29.11.2017 20:40 schrieb "Christoph" <notifications@github.com>:

> One reason for the failure are the missing underscores in the translation
> of german, e.g Prüfe Integrität
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3470#issuecomment-347972957>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTaftSXfC8RbfpQ2JT9PtmAmNvCOulAks5s7bMqgaJpZM4Qu5ty>
> .
>

#3470 Comment 3:
I'm fine with the change and the translation ui of crowdin looks nice. But in the end, the @JabRef/translators have to work with it. What is your opinion about this proposed change? 
#3470 Comment 4:
To my great shame, I have not updated the Danish translation for years (but hope I might get time for it again). To the extent that I still have any say in this, I vote for Crowdin. I was never that happy about popeye anyway. I remember experiencing problems with the Danish letters æ, ø, å (I haven't checked, but I hope Crowdin is better at that).
Two things I have not understood yet:
- Does Crowdin still use/generate the `.properties` files?
- Is it OK to just use spaces in strings instead of dealing with the horrible underscores?
#3470 Comment 5:
My comments:
- Nice and convenient interface 
- While translators will not require a login at GitHub, they seem to require one at Crowdin. What about anonymous contributions through Crowdin? Possible? 
- I hope that review can be skipped (or at least that translations do not need to be reviewed one-by-one).
- Since the current Github workflow will continue to work, we can try out Crowdin and see if it helps to get better localizations of JabRef.
#3470 Comment 6:
- `.properties`: Yes, no change. Therefore, the GitHub workflow still works.
- Yes, I will work on removing these underscores - I *hate* them 😇 
- Translators also need a login at GitHub. Otherwise, the pul requests don't work.
- I did not see a way to skip the reviews, but this is a one-click thing. We can do it always before/after each devcall or when an email comes in. Think, this is not a show stopper

#3470 Comment 7:
I close this PR, but we can continue discussing here. I will have to create some more PRs to get this thing running...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3466 Comment 1:
Everyone can now translate JabRef. See https://crwd.in/jabref

I see the drawback that now `\uXXXX` is used instead of the real UTF-8 characters. I have contacted support.
--------------------------------------------------------------
#3465 Comment 1:
We also see that the continuous build failed? I'm not sure how adding a small class could break it, so we'll look into this. If anyone sees an issue as well please let us know. Thanks
#3465 Comment 2:
Hi, you simply forgot to add a languagefile entry (from the end of the travis log)
```
    => java.lang.AssertionError: DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH LANGUAGE FILE

1. PASTE THESE INTO THE ENGLISH LANGUAGE FILE

2. EXECUTE: gradlew localizationUpdate

[
Clear_text=Clear_text
] expected:<[]> but was:<[Clear_text (src/main/java/org/jabref/gui/fieldeditors/contextmenu/ClearField.java LANG)]>
```

--------------------------------------------------------------
#3460 Comment 1:
I have to confess, when I start to prepare pull requests, I push my current developments and check whether travis fails every now and then. But this is not a show-stopper.

![grafik](https://user-images.githubusercontent.com/1366654/33515123-406f7a06-d75f-11e7-8678-b641f3172c9c.png)

#3460 Comment 2:
DevCall: PR build merges master before and then builds. Thus, it really makes sense to build both.
#3460 Comment 3:
Some more explanation: In rare case there is a justification for both builds, namely when the combination of PR and master breaks. This doesn't happen often, but I recall at least one case where this happened to me. There's no real cost for us in executing two builds. That's why we decided to close this PR.

EDIT: Turns out it's the other way round :) Then it makes sense to integrate this.
#3460 Comment 4:
Note: This PR still builds PRs, but not the respective branch.
#3460 Comment 5:
The time saving is relevant short before a release, when we run into travis limits.
#3460 Comment 6:
We include it until someone gets upset in his workflow

We accept: "local builds of incompatible things are not built any more."


#3460 Comment 7:
@JabRef/developers It seems that we are now no longer getting builds for PRs on builds.jabref.org That's sad, because we can no longer point users to test a particular release. 

I think we should revert this PR.
#3460 Comment 8:
@lenhard  Nope, this is because of #3499.
#3460 Comment 9:
Oh well, people keep finding reasons why my perception of this PR is wrong ;-) 

Let's get the darn code signing fixed...
--------------------------------------------------------------
#3459 Comment 1:
As I said in the linked issue, I'm in favor of a list-like design. Lets see what the other @JabRef/developers think (I marked this PR as "ready-for-review" so that it gets attention).
Sorting would be indeed a nice to have feature. I second your idea of a drop-down menu. Maybe hide it behind [a sort icon](https://materialdesignicons.com/icon/sort) and open the drop-down choices on click, similar to [here](http://www.freeemailtutorials.com/windowsLiveHotmail/hotmailTipsAndTricks/i/img5B.jpg) (my suggestion would be to replace the "sort by subject" in the screenshot with the sort icon).
#3459 Comment 2:
@tobiasdiez Are you talking about the following? (https://github.com/JabRef/jabref/issues/3109#issuecomment-346700105)

![with_annotations_new_layout](https://user-images.githubusercontent.com/33424784/33188858-cac147ca-d09d-11e7-81a4-6c623732a356.jpg)

I like that and I assume that I can use the cursor keys (cursor-up, cursor-down) to go through the table.
#3459 Comment 3:
@koppor Yes, this is the right screenshot. The question is if we want a real table on the left side or go for a list-like solution similar to the current layout
![pic](https://user-images.githubusercontent.com/1254003/29355327-ed07cbb8-8270-11e7-8f1e-b61459f63f1e.png)

Navigation with keys should work in both cases. 
#3459 Comment 4:
Hi, your build fails, because you have an localization error:

```

  JUnit Vintage:org.jabref.logic.l10n.LocalizationConsistencyTest:findObsoleteLocalizationKeys

    MethodSource [className = 'org.jabref.logic.l10n.LocalizationConsistencyTest', methodName = 'findObsoleteLocalizationKeys', methodParameterTypes = '']

    => java.lang.AssertionError: Obsolete keys found in language properties file: [Copy_to_clipboard]

1. CHECK IF THE KEY IS REALLY NOT USED ANYMORE

2. REMOVE THESE FROM THE ENGLISH LANGUAGE FILE

3. EXECUTE: gradlew localizationUpdate

 expected:<[]> but was:<[Copy_to_clipboard]>
```
#3459 Comment 5:
Hey there, 
I do not really understand how to fix these two failed checks, can anybody give me a hint?

**First failed check:**
> Wrong order for 'javafx.scene.layout.ColumnConstraints' import.
> 20
> import javafx.scene.layout.ColumnConstraints;

I changed the order of the import statements but this error still occurs.

----
**Second failed check:**
> 13411.1  no language set  TEST_SUITE=check OPTIONS=modernizer   11 min 40 sec
> 13411.4  no language set  TEST_SUITE=checkstyle  6 min 9 sec
> 13411.5  no language set  TEST_SUITE=fetcherTest  12 min 31 sec


#3459 Comment 6:
Hey, for the import statement it's probably a space  between the packages missing or one too much.
The best is to use the code format settings we provide for eclipse and intellij 
https://github.com/JabRef/jabref/blob/master/config/README.md
#3459 Comment 7:
If you use eclipse simply execute gradlew eclipse and With ctrl+o you can sort the imports.
That is the only error. The no language set is just some Travis job thing. Not relevant
#3459 Comment 8:
Great! The build is fixed! I'll check the changes soon, so we can decide if this Pull Request is ready to be merged.
#3459 Comment 9:
@muntrob What is the status of this PR? It's been a month since the last updates. Any chance of moving this forward?
#3459 Comment 10:
Thanks for your contribution, we are trying to get this in now in #3701.

Therefore, I am closing this PR.
--------------------------------------------------------------
#3458 Comment 1:
Can't incorporating this new L&F in 4.1 give us a huge user-base to test? 4.1 will be a release with christmas colors and then we will release 4.2 somewhere around 6th january with the default colors again. - Hoping that this works with the new color configuration ^^.
#3458 Comment 2:
This is how JabRef looks after upgrading:

![grafik](https://user-images.githubusercontent.com/1366654/33439598-2027dce2-d5ee-11e7-823b-06dab455ca86.png)

@LinusDietz could you provide a Linux screenshot?

#3458 Comment 3:
To be honest, I wouldn't spend to much time on swing look and feels. They disappear as soon as we finish migrating (most) of the ui to JavaFX.
#3458 Comment 4:
@koppor: For me JabRef looked like this all the time ;-) I have been using the windows landf all along. The big difference in look might rather be on Linux.
#3458 Comment 5:
Okay, here are some linux screenshots:
Xubuntu 16.10,  Theme: Greybird 
Plastic Look and Feel - jgoodies (seems like the same as metal?)
![linuxplasticxubuntu](https://user-images.githubusercontent.com/320228/33482185-1ea5e59e-d698-11e7-9cd4-8ceb7a1d4551.png)

Nimbus L&F
![linuxnimbusxubuntu](https://user-images.githubusercontent.com/320228/33482237-5d156066-d698-11e7-8266-6b41b7ef31d0.png)

Metal L&F
![linuxmetalxubuntu](https://user-images.githubusercontent.com/320228/33482242-6484bacc-d698-11e7-838c-e0b40a7e0b62.png)

GTK L&F (broken)
![linuxgtkxubuntu](https://user-images.githubusercontent.com/320228/33482260-6fb142a8-d698-11e7-8b4b-c94cac6851f0.png)



#3458 Comment 6:
Since 4.1 is released, we can merge this as agreed.
--------------------------------------------------------------
#3457 Comment 1:
Good question! IntelliJ warned about it and this is why I changed it. If you look that the examples from the JUnit team, they also always use the default visibility (e.g. [here](http://junit.org/junit5/docs/current/user-guide/#writing-tests-standard)). 
With junit 4 all tests had to be public and this restriction was removed in the new version.

I have no strong opinion about this. 
#3457 Comment 2:
In that case, I'd say we go for default visibility in all JUnit5 tests, regardless of whether they're new or migrated from a JUnit4 tests.
#3457 Comment 3:
Ok, I now used the default visibility everywhere.
#3457 Comment 4:
Default Visibility is normally considered an anti pattern and is marked by coday:
DefaultPackage

Since: PMD 3.4

Use explicit scoping instead of the default package private level. 
--------------------------------------------------------------
#3456 Comment 1:
It is working now: https://codecov.io/gh/JabRef/jabref/tree/d3e33b8f42849d2d2ba0c14d65655eb9edaadf09/src/main/java
I extracted the code coverage calculation to a separate job, to speed up the main task a bit (it no longer runs the database and fetcher tests which was required to calculate the code coverage for them).
--------------------------------------------------------------
--------------------------------------------------------------
#3454 Comment 1:
Yeah! Cool, pretty good work! 
#3454 Comment 2:
> There's one bigger change, though, that I happen to like very much: The side panes are no longer exclusive, you can display them together. That means that I can have the web search and the groups panel open at the same time.

This was already possible before 😉
#3454 Comment 3:
Huh? Good to know, then at least no one can blame it on me when something related to that breaks ;-)
--------------------------------------------------------------
#3451 Comment 1:
Merci!
--------------------------------------------------------------
#3450 Comment 1:
If it is not possible to fix the tests on MacOS, I propose to use the following method to disable those tests on MacOS: https://blog.codefx.org/libraries/junit-5-conditions/
#3450 Comment 2:
I have finally finished this PR. I had a look at @tobiasdiez suggestion, however this functionality is not available from maven and the license is unclear. Furthermore, I think it's a bit overkill.

So what I did in the end is to disable the 5 tests on MacOs by adding an assumtion in the first line of the test:
```
assumeFalse(OS.OS_X);
```
This aborts the test without letting it fail.
#3450 Comment 3:
@LinusDietz Why did you request a review from me? I do not have a Mac and cannot meaningfully test this.
#3450 Comment 4:
Well you can believe me that the tests succeed in MacOs, I rather wanted your opinion if the way I selectively disabled the tests using `assumeFalse(OS.OS_X);` is okay.
#3450 Comment 5:
The quesition would be rather, why the specific tests do not suceed under Mac?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3447 Comment 1:
Requires java 9:
`    => java.lang.UnsupportedClassVersionError: de/jensd/fx/glyphs/materialdesignicons/MaterialDesignIconView has been compiled by a more recent version of the Java Runtime (class file version 53.0), this version of the Java Runtime only recognizes class file versions up to 52.0`
--------------------------------------------------------------
#3445 Comment 1:
merging to fix build
--------------------------------------------------------------
#3444 Comment 1:
Regarding the File  Directory stuff: We have a method: getFirstExistingFileDir which gives you the file directoy (either main file idr, bib file or library setting=
#3444 Comment 2:
@Siedlerchr thanks! Do you think it makes sense to apply the same rules for the aux files as for pdf files when it comes to relative paths? 
#3444 Comment 3:
The architecture is not set in stone, we can always decide to change it. Having said that, I still think that the current separation of model and logic makes sense and I think that the tests are useful. Through the tests, we always get a notification about changes that easily turn into circular dependencies and we have an opportunity to discuss them. If we don't have that, then the code will just silently turn into a big ball of mud with circular dependencies everywhere.

Looking at the code, I don't really see an architectural problem. Right now, you are computing the `Set<String> keysUsedInAux` on demand in a call to `contains()`. You can just do that when you create the group and pass the set into the constructor, dependency problem solved.

When you want to recognize changes in the aux file, you will need to monitor the file (which is functionality that is located in the higher layers anyway). Then, you could add a setter to the group that resets the keys when a file change happens.


#3444 Comment 4:
@lenhard I now used your approach: the TeX group class only relies on interfaces (defined in model), while the concrete implementation of these interfaces resides in logic. 

This PR is now ready-for-review. We should really consider using a dependency injection framework...most of the line changes are just propagating the file monitor from Globals to the TeX group.
#3444 Comment 5:
In order to somewhat keep the momentum up and reduce the number of open PRs, I'll merge this now.
--------------------------------------------------------------
#3443 Comment 1:
First of all thanks for your contribution! Moving all logic code to gui seems like the only option here, but in general should be avoided.  What about having a different approach: Keepiing all stuff string based in logic and in the GUI you have a helper method for converting the HTML tags (are only a few) from the localization into the RTF equivalent and by adding it to a textflow. I see no reason why this should not work.

If you look into the localization stuff, you see there are only a couple of `<BR> and <b>/<i>` tags, so nothing really advanced. 
https://github.com/JabRef/jabref/blob/master/src/main/resources/l10n/JabRef_en.properties
#3443 Comment 2:
After thinking a little longer about the package problem. I think the architecture is actually not right if the SearchDescribers generate HTML code and stay in the logic package. Because HTML code is only usable in a GUI use case and has not really anything to do with logic. So maybe they were not really in the right package to begin with if their only purpose is to create a structured text for the gui?

I think the SearchQuery objects should not hold a description stored. If it is removed, there is no further moving of classes necessary. At the places the description member of SearchQuery is used, it can be generated with the SearchDescribers class like in the SearchQuery class at the moment.

IMHO the package structure would be most honored that way

It would save the translations if the SearchDescriber creates an HTML string which can be converted later to a textflow like you said. But if the project really is moving towards javafx it seems wrong to me to keep html strings for structuring text because in javafx this is the task of a TextFlow. I would try to look into removing the HTML tags from the translations to not lose them and make a step forward using javafx
#3443 Comment 3:
Also a big thanks from me! I don't have much time at the moment, so just a short remark concerning your point 2. I think it should be possible to completely remove the `description` field from the `SearchQuery` class. Just expose the `rule` (and `query`) via getters and then call the ̀ SearchDescriptor.getDescriptionFor(...)` every time you need the description in the gui. In this way, the description completely disappears from the logic package.

(Concerning 4: You can also embed JavaFX controls in swing, which is probably easier to do then creating a conversion to html)
#3443 Comment 4:
Status update:
* I removed the description from the SearchQuery class so it can remain in the logic package
* I recreate an html string in the GroupDialog class for compatibility (was very easy this way)
* modified the Tests for the SearchDescriber Implementations to properly check the TextFlow description
* created Tests for the utility class I created

Now there is only one problem left: the broken localizations.
I looked into the localization files and it could be possible to rescue a lot of translations by just manually deleting the html tags from the translations (when they are at the beginning or end). But in some cases, after translating the text, the tags are positioned in the middle of words. There it would be necessary to create a new translation because I'm not able to just delete the tag from the beginning or end.

The only other alternative i see is using the old html strings for the localization and then break them up and convert them into javafx texts.. IMHO this would be really ugly and not a good readable solution

What do you think? Any other possible solutions?
#3443 Comment 5:
When I see it right, you only need to replace the html tags for the Search Descriptions, right`?
So the rest of the translations can and should stay as it is.
Can't it be possible to strip/replace the tags on the fly? So if I encounter a <b> in my text, I have to switch to bold face at that position?
#3443 Comment 6:
Sadly its not so simple with TextFlows. They consist of multiple Text objects and you can set the font on each Text. So if there is a String like this:
XXX XXX XXXX <b>XX</b> 
that translates into:
XX XXX <b>XXX</b> XX XXXX
Then there are three Text objects needed: Text("XX XXX"), Text("<b>XXX</b>"), Text("XX XXXX")

I will try to find an acceptable abstraction so the code will not be completely unreadable and the old translations can be used 
#3443 Comment 7:
So, now the old strings are used and the localization is working again. I tried to make it as readable as possible. 

What do you think now? Any more things to do? Anything else I should have considered?
#3443 Comment 8:
So, I think I made all your requested changes, it now looks like this with the new styling:
![screenshot-2017-11-27--17 49 24](https://user-images.githubusercontent.com/4948016/33278295-625ea62c-d39b-11e7-9133-e5b80614af08.png)

#3443 Comment 9:
Thank you very much for the quick follow-ups and, of course, for your contribution in general. We are looking forward to see more PRs from you 😉 
#3443 Comment 10:
Your Welcome! :grin:
--------------------------------------------------------------
--------------------------------------------------------------
#3441 Comment 1:
@Siedlerchr I can only test it on Linux and Mac and there it works. Since this is the `install4j` branch, can we try to include a fix for https://github.com/JabRef/jabref/issues/3440? :smile: 

I compared the master branch (where the dmg doesn't work) with the one you mentioned. I could not find any relevant difference. The building of the dmg is done by install4j as well, correct? How is it possible that this breaks, when we haven't changed anything the `install4j` settings? :confused: 
#3441 Comment 2:
Regarding the broken dmg, I absolutely have no idea. Maybe it's Firefox who corrupts the file? Another reason could be that our code signing certificate no longer is valid. 
The dmg is built with the installer as well on circle CI, I checked the logs, but could not see anything regarding this
#3441 Comment 3:
@Siedlerchr What's got Firefox (the browser?) to do with it? 
#3441 Comment 4:
As the mac problem is indepentend of this, I merge in now.
--------------------------------------------------------------
#3439 Comment 1:
Good idea. We have too many issue reports that still use 4.0 and report things that are already fixed. I think at the current pace of changes that are made, working towards a big 4.1 release is not the best course of action. We have reworked so many things. Shouldn't we push an update soon?
#3439 Comment 2:
Actually, I'm against this.
The underlying problem is, that we have introduced too many bugs in our major releases lately which were, of course, reported quite often.

As @halirutan said, we should release more often and the problem should go away again.

#3439 Comment 3:
Even when the release is stable, the dev Version could already contain a bug fix for an issue present in release. Therefore it makes sense to check the latest dev before
#3439 Comment 4:
I'm definitely in favor of this as well. It is a good thing to ask users "hey, have you checked our latest dev release?" Especially, since some of them might not even be aware of that there is an active develop-version that they can try.
--------------------------------------------------------------
#3438 Comment 1:
Made the requested changes.
#3438 Comment 2:
Thanks @tobiasdiez for pointing that out - fixed it.
--------------------------------------------------------------
#3433 Comment 1:
Regarding the usage of JabRefPreferences: Even though we used the preferences correctly (thank you for clearing that up), the test concerning illegal dependencies still fails. This is the reason the [travis check fails](https://travis-ci.org/JabRef/jabref/jobs/302209370#L539). Is there something we can/should do about this?

Furthermore, we have a general question: How should we update this pull request (or pull requests in general)? Should we
1. create additional commits to implement the changes and just add them to this pull request,
2. create a new pull request with updated versions of our changes,
(And what if changes are requested for the new pull request as well/multiple times? Should each adjustment request of the (new) pull request warrant another pull request?)
3. force push amended versions of the existing commits,
4. or proceed in another fashion we did not think of?
#3433 Comment 2:
You just update your PR with new commits until all issues/conments are resolved On a merge all commits will be squashed into a single one.
Github auto hides outdated comments on previous commits 
#3433 Comment 3:
@lenhard 
> When you do that you can also categorize the test class as a gui test using @Category(GUITests.class).

A test flagged with this category actually means that the test starts JabRef, clicks a few buttons and checks the resulting behavior. This is not the case here; it only tests a class in gui.

#3433 Comment 4:
@tobiasdiez Thanks for clarifying!

@tobous In that case, there's no need to use the category.
#3433 Comment 5:
Moving the test into the "org.jabref.gui" package did not resolve the issue with the dependency check. I had a look at other tests using JabRefPreferences but did not see any special set-up to avoid the issues. Other tests using it are located in the packages
- "org.jabref" (JabRefPreferencesTest)
- "org.jabref.migrations" (PreferencesMigrationsTest)
- "org.jabref.preferences" (LastFocusedTabPreferencesTest)

I also have a more general question:
Is it possible that using the JabRefPreferences object held in Globals directly (instead of always using "Globals.prefs" to access the preferences object) could cause any problems.
Or more directly: Is it possible that the JabRefPreferences object held by Globals changes, thereby invalidation the previously held object (that would still be used by the UpdateTimestampListener)?
#3433 Comment 6:
I also had another look at the failing test. It looks like the other tests using JabRefPreferences were either situated in the package "org.jabref.preferences" ([LastFocusedTabPreferencesTest](https://github.com/JabRef/jabref/blob/master/src/test/java/org/jabref/preferences/LastFocusedTabPreferencesTest.java)) or was [manually added as an exception in the test](https://github.com/JabRef/jabref/blob/master/src/test/java/org/jabref/architecture/TestArchitectureTests.java#L38).

I could just add UpdateTimestampTest to the exceptions, but I don't know if this would be an acceptable solution.
#3433 Comment 7:
I will have a look at your code later and will look into the updating issue
#3433 Comment 8:
For whatever reason, the first merge with the master was not recognized by GitHub and therefore did not trigger a travis build. The second merge commit does absolutely nothing but GitHub now recognizes that the conflict has been resolved.
As the merge of this pull request should just squash all the commits, this should hopefully not really matter.
#3433 Comment 9:
As I have no access to your repo, I created a patch with some changes.
 Regarding the timestamp issue, a restart is required. That's a thing I don't see a solution for.
[0001-Use-TimestampPreferences-and-rename-fields.patch.txt](https://github.com/JabRef/jabref/files/1491039/0001-Use-TimestampPreferences-and-rename-fields.patch.txt)

Maybe another one @JabRef/developers  has an idea?



#3433 Comment 10:
The restart could be avoided if the JabRefPreferences object held in Globals.prefs is used. This object is updated when the preferences are changeg.
In other words: the restart is not required with the current implementation

And I still don't get why the dependency on JabRefPreferences is a problem. Could somebody explain this to me?

And even if the dependency were a problem, I think it is important how the issue/problem compares to the restrictions we would create by avoiding it. In my opinion, a solution that requires a restart of the application to apply changed settings diminishes the usability of the feature.

Thanks for your suggested changes. I will have a look at them later today. But I would like to further discuss the usage of TimestampPreferences before I integrate it into the pull request.
#3433 Comment 11:
I like the current solution. There is nothing inherently bad in directly using JabRefPreferences. I would vote for adding an exception to the architecture test.
#3433 Comment 12:
I have had a closer look at `TestArchitectureTests`. I think they are wrong/incomplete. If gui classes are allowed to use the preferences in the main source, why shouldn't that be the case for the tests as well?

I think it would be best to add the complete gui package as an exception here. This requires a refactoring of that test class, because exceptions are specified on class names only so far. But a similar structure is present in `MainArchitectureTests`.
#3433 Comment 13:
@lenhard We did this, to prevent unexpected side effects when using Preferences in the tests=> They always modified the "real" preferences. They only should be mocked, so I think this is no longer a valid
#3433 Comment 14:
@Siedlerchr But that is not what the tests are testing, right? Even when you mock the preferences, you will need to reference them, which makes the test fail. That's exactly what happens in this PR.

What is your suggestion to solve this?
#3433 Comment 15:
What about adding exceptions case by case, so that you really have to think if you want to use the preferences in the tests? Not perfect but maybe the "easiest" solution?
#3433 Comment 16:
@tobiasdiez Not optimal, but I guess that's the pragmatic way to move forward. It would be ok for this PR from my point of view.
#3433 Comment 17:
Ok, should I add the class "UpdateTimestampListenerTest" to the exceptions in the `TestArchitectureTests` then?

@Siedlerchr The txt file you posted contains a lot of changes dealing with lots of classes. I didn't have the time to have a more detailed look at all of them, sorry.

The stuff with the `TimestampPreferences` should be solved/avoided if the Tests are added as an exception to the architecture test.

Concerning the restructuring of the test cases: I would prefer to keep it the way it is (with the constants being a part of each test case to better show which values are used and with each test having its own mock object instead of one shared static object). But as this is not my project, you guys have the last say with this.

The rest of the changes deal with timestamps in other parts of the code. Is this something that is important for **this** fix, something that should be changed but is not tied to this fix, or something that was a consequence of using `TimestampPreferences`?
#3433 Comment 18:
Yes, add an exception to the architecture test! Please also use camelCase for the constants in the tests (instead of pure upper case) and then we can merge!
#3433 Comment 19:
Since @lenhard and @Siedlerchr already gave their ok (kind of) and I'm trigger happy today, I will merge this PR now.

Thank you very much for your contribution and your patience. Sorry that it took us a bit longer to sort out how to handle the issue with the architecture tests. Looking forward to see more PRs from you in the future!
--------------------------------------------------------------
#3430 Comment 1:
Well, migrating to Junit 5 is more than a bit of search and replace, as there have been some more complex api changes.... We should agree on a roadmap for migrating junit 5.

For the time being... how well can junit 4 and junit 5 tests coexist in our CI-pipeline?
#3430 Comment 2:
@LinusDietz Yes, of course, there were some API changes - but mostly the tests run without any big changes (main exception: assertEquals with custom messages and parametrized tests).

~~@JabRef/developers Apparently the filtering by categories (or tags as they are now called) does not work for old-style tests. Thus, all fetcher, database and gui tests have to be migrated to junit 5 immediately. Overall our tests seem to pass when run with the vintage engine. Thus there is no need to migrate everything at once.~~
#3430 Comment 3:
So I managed the build to pass successfully, hence this PR is now really ready for review.
#3430 Comment 4:
I removed the plural s from the categories since this is apparently the naming convention for "tags" in junit 5 (probably because you now can mark a single test with a certain tag).
#3430 Comment 5:
@tobiasdiez that removal of the plural 's' was not applied to  the merge commit. I made a quickfix: https://github.com/JabRef/jabref/commit/ee10e82823c794a57ace144109f6dcf3b69a3890
#3430 Comment 6:
Ah thanks! Should have waited until the build from the merge commit was completed. Mea culpa.
--------------------------------------------------------------
#3428 Comment 1:
@tobiasdiez I'm not exactly sure how this would have been possible here. For some sub-test sure, but would it have been possible to make nested loops where I test all java8 versions against all java9 version when I provide them as parameter test?
#3428 Comment 2:
Yes, I think that is possible. The junit 5 documentation contains the code
````java
@ParameterizedTest
@MethodSource("stringAndIntProvider")
void testWithMultiArgMethodSource(String first, int second) {
    assertNotNull(first);
    assertNotEquals(0, second);
}

static Stream<Arguments> stringAndIntProvider() {
    return Stream.of(Arguments.of("foo", 1), Arguments.of("bar", 2));
}
````
By changing `stringAndIntProvider` you can generate every possible combination of java 8 and java 9 version strings. Anyway, no need to change it for this PR. Was just a remark for the next time.

#3428 Comment 3:
Can this be merged? If yes, would some of the veterans do this?
#3428 Comment 4:
@halirutan  If you are ready, add the label "ready for review". From my point of view it's good now. 
--------------------------------------------------------------
#3427 Comment 1:
To be honest I do not really use that left toolbar, but in general I appreciate the layout. I typically use generate bibtex key on the main table
#3427 Comment 2:
Your comment about the bugs in the entry editor would be funny if I wouldn't suspect that you are actually serious about that ;-)

This PR is the logical next step in the JavaFX migration. Most of the entry editor is in FX now, so this should be as well. Your arguments regarding button placement are reasonable and you have my Go for most of it. I think the XMP-generation button is fine at the file field, but maybe @koppor (who actually uses the feature) disagrees and wants to keep it? Your main challenge will probably be to make sure that the file field does not get too cramped with all the buttons.

Personally, I don't see why the help button should go. Does it make the toolbar so much more ugly?

There's one thing with the buttons in all of the entry editor that you could address here: The button icons do not follow the color scheme of JabRef, but are always black. Could you align that to the color scheme?

Code-wise, the PR is fine. The best part is probably that the `UndoManager` seems to make a come back in several places. My only concern is performance (since we just repaired this). I know you like FXML files, but adding `BibtexKeyEditor.fxml` means that it will be loaded every time the required fields tab is rebuilt, right? Isn't that a potential problem? 
#3427 Comment 3:
- About ``the "find linked files" button was removed completely (it was not working anyway, and nobody complained)``: it worked in version 4.0 (that may explain the lack of complains ;-) ). Could it be moved to the file field?
- I feel like the need to do a right click on the entry type to change the type (e.g. article --> book) is not intuitive and not consistent: I cannot find another example of this behaviour in JabRef. A suggestion: same look and behavior as the "insert entry" button (in the main menu), i.e. a "little v" next to it, and an activation by a left click.
Just my 2 cents.
#3427 Comment 4:
I finally had time to continue working on it today. I updated the description above and the PR is now officially ready for your opinion.

@lenhard Personally, I'm in favor of keeping the buttons black. 

@lenhard With the refactoring, two fxml files were introduced: one for the whole entry editor and a second for the bibtex key field. The first one is loaded at the very start of jabref and the second every time the required fields tab is shown. Admittedly, parsing and instantiating fxml files has an overhead; but it should be negliable as long as you don't load to many fxml files at the same time (e.g. like last time where every editor field was in a separate fxml and a refresh loaded >100 of them). I didn't noticed any performance-degradation with this PR.

@mlep Good points! The "change entry type" pop-up is now shown on a normal right click.
#3427 Comment 5:
Since this PR was now ready for review for nearly one month, I'll merge it. If you have further remarks concerning the code and the changes, I'll of course revisit the PR and implement your feedback.
--------------------------------------------------------------
#3425 Comment 1:
There is also a nice gradle plugin, see  #3421
I also created a module-info
#3425 Comment 2:
I just stumbled upon https://github.com/junit-team/junit5/commit/7954ab6a68286407a13e3154ba94c215069b1056, where they use the build matrix feature to compile junit 5 with jdk 8, 9 and 10. Maybe helpful.
#3425 Comment 3:
Superseeded by #3421
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3420 Comment 1:
I tested it locally and it works for me as well. Can we merge this to master so that other work is not stalled?
--------------------------------------------------------------
#3418 Comment 1:
When I remember correctly, that *lgtm analysis thing* failed on every single PR I submitted so far..
#3418 Comment 2:
OK, after understanding the whole situation, I think this PR would have only one advantage: It could check if the user uses an old built of 1.8. Since JabRef doesn't even start for 1.6 or 9 or with missing FX, the Java check would fail to act on most of its target audience. The Java check needs to be run separately with a small program that runs on all JVMs.

On Skype @Siedlerchr suggested to put it in the installer. However, what happens if someone installs JabRef with an OK JVM and then upgrades Java to 9? Maybe this is acceptable but I wanted to point it out. In any case, as it stands the PR doesn't make sense. I will close this but leave the branch alive.

If someone is going to work on putting a check into the installer or in a small check program that is started prior JabRef, we have a starting point and `JavaVersion` doesn't need to be re-implemented completely.
#3418 Comment 3:
I think this PR is already a huge step in the right direction. Even if the current version don't catch a missing OpenFX or Java9, it does report an error in case somebody still uses an older Java8 version like 1.8.31 that is known to cause bugs in JabRef. Thus I would like to get this PR merged.

I agree it would be also nice to handle the OpenFX & Java9 cases, but since this requires additional overhead (as you wrote, a small luncher that then starts JabRef) I don't think this will happen soon. 
#3418 Comment 4:
@tobiasdiez Then, I could rework the Dialog to be replaced by an FX version. The question for the correct Java version we want to enforce still stands. I currently used 1.8.0_144 which is not the latest one but quite new. I additionally checked many issues to see which version reporters use. Many indeed use _152 while one guy still had _76 (or something close to that).

The big question that cannot be answered is, what version is recent enough to not present issues.. hmm..
#3418 Comment 5:
Yes, 1.8.0_144 should be fine (at least I'm not aware of any bug that affects us but was fixed in a later java version). So please convert the dialog to JavaFX and this can be merged in my opinion.
#3418 Comment 6:
@Siedlerchr @tobiasdiez  Quick question. If I use the FX Dialog at this point, I have to run it in the FX thread with 

```
FXDialogService dialogService = new FXDialogService();                                           
DefaultTaskExecutor.runInJavaFXThread(                                                           
        () ->                                                                                    
        dialogService.showErrorDialogAndWait(Localization.lang("Error"), versionError.toString())
);
```

This, however, shows the dialog but doesn't wait for it to be closed and resumes to start JabRef. Additionally, it throws an exception

```
java.lang.NullPointerException: null
	at org.jabref.gui.FXDialog.setLocationRelativeToMainWindow(FXDialog.java:137) ~[JabRef-4.1-dev.jar:?]
	at org.jabref.gui.FXDialog.lambda$new$1(FXDialog.java:98) ~[JabRef-4.1-dev.jar:?]
...
```
since the rest of FX is not set up at this point. Any tips?
#3418 Comment 7:
Yes, just keep the current swing dialog 😄  If it would work instantaneously, then using JavaFX is of course preferable.  
#3418 Comment 8:
Oh okay, then stick to the Swing stuff. No problem. 
--------------------------------------------------------------
#3416 Comment 1:
Just a quick remark from the Off as I do Not have the time to check.

I think due to a proposal by @koppor we intentionally moved the columns from the left to the far right side... We should check that
#3416 Comment 2:
Let us discuss the positioning of the special fields among the developers during the next devcall.
#3416 Comment 3:
I think, we discussed that two years ago, but I don't remember. For me, moving it to the front is OK. But that might disturb new users of JabRef, because they first see the stars...

Do we need an additional preference? ^^
#3416 Comment 4:
I could be nice to have the choice/option to either insert them in the beginning or end of the table .  Another solution would be splitting the special columns and move only the stars/rating to the end of table.
#3416 Comment 5:
@devBeginner We've now talked this through among the core developers.

Unfortunately, we've decided against this solution. Moving the fields to the front for all users is just too strong a thing to do and might upset users. After all, there might be people who are very happy with having them on the right side. A fixed hard-coded moving of the special fields is not the way to go.

This should be solved in an alternative way, either:
- Fixing the bug that prevents the manual resorting of special fields to be stored and saved among different sessions of JabRef
- Introducing a new preference option that manages the order of special fields as suggested by @koppor 

We know that these things are not trivial, but ultimately they are a better way to address the underlying problem.

You're very welcome to take one of these directions and you can do so in this PR if you want.
#3416 Comment 6:
@devBeginner Sorry not to hear any feedback from you. We will close this, but hope, you will continue working on it --> we will be happy to reopen then.
--------------------------------------------------------------
#3415 Comment 1:
I just checkout this branch, ran `./gradlew localizationUpdate` and got the following error:
```
FAILURE: Build failed with an exception.                       
                                                               
* Where:                                                       
Build file 'C:\workspaces\jabref\jabref\build.gradle' line: 30 
                                                               
* What went wrong:                                             
A problem occurred evaluating script.                          
> A problem occurred starting process 'command 'python3''      
```
So this seems to not to be working yet. 

Oh and here is the exception:
```
* Exception is:                                                                 
org.gradle.api.GradleScriptException: A problem occurred evaluating script.     
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptR
unnerImpl.run(DefaultScriptRunnerFactory.java:92)                               
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl$
2.run(DefaultScriptPluginFactory.java:209)                                      
        at org.gradle.configuration.DefaultScriptTarget.addConfiguration(Default
ScriptTarget.java:74)                                                           
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.
apply(DefaultScriptPluginFactory.java:214)                                      
        at org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperat
ionScriptPlugin.java:61)                                                        
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(De
faultBuildOperationExecutor.java:199)                                           
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(Defaul
tBuildOperationExecutor.java:110)                                               
        at org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperat
ionScriptPlugin.java:58)                                                        
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.appl
yScript(DefaultObjectConfigurationAction.java:109)                              
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.acce
ss$000(DefaultObjectConfigurationAction.java:38)                                
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction$1.ru
n(DefaultObjectConfigurationAction.java:68)                                     
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.exec
ute(DefaultObjectConfigurationAction.java:143)                                  
        at org.gradle.api.internal.project.AbstractPluginAware.apply(AbstractPlu
ginAware.java:46)                                                               
        at org.gradle.api.internal.project.ProjectScript.apply(ProjectScript.jav
a:34)                                                                           
        at org.gradle.api.Script$apply.callCurrent(Unknown Source)              
        at build_d7rpqa8h34dp26tukemi60cd3.run(C:\workspaces\jabref\jabref\build
.gradle:30)                                                                     
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptR
unnerImpl.run(DefaultScriptRunnerFactory.java:90)                               
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl$
2.run(DefaultScriptPluginFactory.java:209)                                      
        at org.gradle.configuration.ProjectScriptTarget.addConfiguration(Project
ScriptTarget.java:77)                                                           
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.
apply(DefaultScriptPluginFactory.java:214)                                      
        at org.gradle.configuration.BuildOperationScriptPlugin$1.run(BuildOperat
ionScriptPlugin.java:61)                                                        
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(De
faultBuildOperationExecutor.java:199)                                           
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(Defaul
tBuildOperationExecutor.java:110)                                               
        at org.gradle.configuration.BuildOperationScriptPlugin.apply(BuildOperat
ionScriptPlugin.java:58)                                                        
        at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildSc
riptProcessor.java:41)                                                          
        at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildSc
riptProcessor.java:26)                                                          
        at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.eva
luate(ConfigureActionsProjectEvaluator.java:34)                                 
        at org.gradle.configuration.project.LifecycleProjectEvaluator.doConfigur
e(LifecycleProjectEvaluator.java:64)                                            
        at org.gradle.configuration.project.LifecycleProjectEvaluator.access$100
(LifecycleProjectEvaluator.java:34)                                             
        at org.gradle.configuration.project.LifecycleProjectEvaluator$ConfigureP
roject.run(LifecycleProjectEvaluator.java:110)                                  
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(De
faultBuildOperationExecutor.java:199)                                           
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(Defaul
tBuildOperationExecutor.java:110)                                               
        at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(L
ifecycleProjectEvaluator.java:50)                                               
        at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProjec
t.java:656)                                                                     
        at org.gradle.api.internal.project.DefaultProject.evaluate(DefaultProjec
t.java:135)                                                                     
        at org.gradle.execution.TaskPathProjectEvaluator.configure(TaskPathProje
ctEvaluator.java:35)                                                            
        at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(Task
PathProjectEvaluator.java:60)                                                   
        at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuil
dConfigurer.java:38)                                                            
        at org.gradle.initialization.DefaultGradleLauncher$ConfigureBuild.run(De
faultGradleLauncher.java:249)                                                   
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(De
faultBuildOperationExecutor.java:199)                                           
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(Defaul
tBuildOperationExecutor.java:110)                                               
        at org.gradle.initialization.DefaultGradleLauncher.configureBuild(Defaul
tGradleLauncher.java:167)                                                       
        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(Default
GradleLauncher.java:126)                                                        
        at org.gradle.initialization.DefaultGradleLauncher.executeTasks(DefaultG
radleLauncher.java:109)                                                         
        at org.gradle.internal.invocation.GradleBuildController$1.call(GradleBui
ldController.java:78)                                                           
        at org.gradle.internal.invocation.GradleBuildController$1.call(GradleBui
ldController.java:75)                                                           
        at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultW
orkerLeaseService.java:152)                                                     
        at org.gradle.internal.invocation.GradleBuildController.doBuild(GradleBu
ildController.java:100)                                                         
        at org.gradle.internal.invocation.GradleBuildController.run(GradleBuildC
ontroller.java:75)                                                              
        at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(Exe
cuteBuildActionRunner.java:28)                                                  
        at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildA
ctionRunner.java:35)                                                            
        at org.gradle.tooling.internal.provider.ValidatingBuildActionRunner.run(
ValidatingBuildActionRunner.java:32)                                            
        at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$1.run(R
unAsBuildOperationBuildActionRunner.java:43)                                    
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBu
ildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)              
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(De
faultBuildOperationExecutor.java:199)                                           
        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(Defaul
tBuildOperationExecutor.java:110)                                               
        at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner.run(Run
AsBuildOperationBuildActionRunner.java:40)                                      
        at org.gradle.tooling.internal.provider.SubscribableBuildActionRunner.ru
n(SubscribableBuildActionRunner.java:51)                                        
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProce
ssBuildActionExecuter.java:47)                                                  
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProce
ssBuildActionExecuter.java:30)                                                  
        at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(Bu
ildTreeScopeBuildActionExecuter.java:39)                                        
        at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(Bu
ildTreeScopeBuildActionExecuter.java:25)                                        
        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.ex
ecute(ContinuousBuildActionExecuter.java:80)                                    
        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.ex
ecute(ContinuousBuildActionExecuter.java:53)                                    
        at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter
.execute(ServicesSetupBuildActionExecuter.java:57)                              
        at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter
.execute(ServicesSetupBuildActionExecuter.java:32)                              
        at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.
execute(GradleThreadBuildActionExecuter.java:36)                                
        at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.
execute(GradleThreadBuildActionExecuter.java:25)                                
        at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildAct
ionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:43)        
        at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildAct
ionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:29)        
        at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecu
ter.execute(StartParamsValidatingActionExecuter.java:64)                        
        at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecu
ter.execute(StartParamsValidatingActionExecuter.java:29)                        
        at org.gradle.tooling.internal.provider.SessionFailureReportingActionExe
cuter.execute(SessionFailureReportingActionExecuter.java:59)                    
        at org.gradle.tooling.internal.provider.SessionFailureReportingActionExe
cuter.execute(SessionFailureReportingActionExecuter.java:44)                    
        at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execu
te(SetupLoggingActionExecuter.java:45)                                          
        at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execu
te(SetupLoggingActionExecuter.java:30)                                          
        at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBu
ild.java:67)                                                                    
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(Build
CommandOnly.java:36)                                                            
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(
WatchForDisconnection.java:37)                                                  
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute
(ResetDeprecationLogger.java:26)                                                
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.
execute(RequestStopIfSingleUsedDaemon.java:34)                                  
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(Forw
ardClientInput.java:74)                                                         
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(Forw
ardClientInput.java:72)                                                         
        at org.gradle.util.Swapper.swap(Swapper.java:38)                        
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(For
wardClientInput.java:72)                                                        
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogA
ndCheckHealth.java:55)                                                          
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClien
t.java:62)                                                                      
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(Build
CommandOnly.java:36)                                                            
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBu
ild(EstablishBuildEnvironment.java:82)                                          
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(Build
CommandOnly.java:36)                                                            
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(
DaemonCommandExecution.java:122)                                                
        at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.
run(StartBuildOrRespondWithBusy.java:50)                                        
        at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(Daemon
StateCoordinator.java:295)                                                      
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.
onExecute(ExecutorPolicy.java:63)                                               
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecu
torImpl.java:46)                                                                
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnabl
e.run(ThreadFactoryImpl.java:55)                                                
Caused by: org.gradle.process.internal.ExecException: A problem occurred startin
g process 'command 'python3''                                                   
        at org.gradle.process.internal.DefaultExecHandle.execExceptionFor(Defaul
tExecHandle.java:222)                                                           
        at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(Default
ExecHandle.java:202)                                                            
        at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandl
e.java:342)                                                                     
        at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.jav
a:86)                                                                           
        at org.gradle.internal.operations.BuildOperationIdentifierPreservingRunn
able.run(BuildOperationIdentifierPreservingRunnable.java:39)                    
        ... 3 more                                                              
Caused by: net.rubygrapefruit.platform.NativeException: Could not start 'python3
'                                                                               
        at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(Def
aultProcessLauncher.java:27)                                                    
        at net.rubygrapefruit.platform.internal.WindowsProcessLauncher.start(Win
dowsProcessLauncher.java:22)                                                    
        at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(Wra
pperProcessLauncher.java:36)                                                    
        at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.jav
a:68)                                                                           
        ... 4 more                                                              
Caused by: java.io.IOException: Cannot run program "python3" (in directory "C:\w
orkspaces\jabref\jabref"): CreateProcess error=2, The system cannot find the fil
e specified                                                                     
        at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(Def
aultProcessLauncher.java:25)                                                    
        ... 7 more                                                              
Caused by: java.io.IOException: CreateProcess error=2, The system cannot find th
e file specified                                                                
        ... 8 more                                                              
```
#3415 Comment 2:
Well, do you have python3 installed?I know, the solution before with jython was more elegant.The problem is: it doesn't support python3, meaning that it must be pre installed on the user's machine. If this is an infeasible option, I would have to Port it back to a jython-supported version.
#3415 Comment 3:
Ok, I wasn't aware of that. In that case, I am strongly for reverting the changes and going back to the old localization script. Forcing people to install additional dependencies defeats the whole point of using a build system. Everything should be doable with only Java installed so that you can run gradle.

This would also make contributions for new users so much harder.

@JabRef/developers We need a decision on this.
#3415 Comment 4:
Check out #3420 in favor of this. 
--------------------------------------------------------------
--------------------------------------------------------------
#3412 Comment 1:
Agreed, this is much more concise :) Good work!

When the test is there we can merge.
#3412 Comment 2:
DevCall decision: There won't be tests coming, but we need the fix. We merge to have it in the 4.1 release.
#3412 Comment 3:
Not optimal, but if that was the decision during the call, then fair enough.

This is mergeable, I'll merge it now. Since @Siedlerchr only merged master and added a changelog entry, I guess it's ok to do a squash.
--------------------------------------------------------------
--------------------------------------------------------------
#3407 Comment 1:
Finally, the entry editor is again functional and performing well enough to take care about a better structuring of the displayed fields :)

The PR is good to go. Actually the build failure comes from a broken PR merged into master that is already fixed. I am merging directly.
--------------------------------------------------------------
#3405 Comment 1:
Seems like you have forgotten to replace a list with a set in the test.otherwiese lgtm 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3400 Comment 1:
The PR looks OK to me, although it's only cosmetics and not necessary. I just wanted to point out that these static texts should correctly be translated after my localization PR that cached the messages. The idea behind statically caching all messages was that it's anyway not possible to make a complete language change in the GUI without restarting JabRef. We always had the warning for the user to restart JabRef after setting a new language.

Back then, I saw these static initializations as well and the main issue with them was, that they were initialized before the localization framework was initialized with the correct language. Therefore, in former times there was a hidden, but non-critical bug. In main:

1. The preferences were initialized. In them, at least one of the files you fixed was statically instantiated.
2. Since the localization was not ready at this point, it used English as fallback
3. Therefore, these things were statically initialized with English everytime no matter of the user language

I, therefore, reordered the init phase so that the language and localization were ready when the first access to it happened. This ensures correct language for the static things I found.

Nevertheless, this is a good PR and although I haven't tested it, it looks correct. If you like, you can refactor the initialization phase again which means moving

```
Localization.setLanguage(prefs.get(LANGUAGE, "en"));
```

from `org.jabref.preferences.JabRefPreferences#JabRefPreferences` back to line 71 in `JabRefMain`.
--------------------------------------------------------------
#3399 Comment 1:
And please have a look at the errors, you need a BasePanel 
#3399 Comment 2:
I think, it does not need any XServer running etc? Thus, I lean towards not including it in our existing GUI tests, but eitehr keep it in the main testing block or create a new category javafxguitests.
#3399 Comment 3:
It now compiles. However, I need to use the preferences in the test and thus had to add an exception to the architecture tests. Since this is often a critical area of discussion, I would like to have another reviewers' ok before merging. Thanks.
#3399 Comment 4:
As before, I need this PR to continue working on the javafx migration of the maintable. Thus I merge this now but, of course, implement further feedback on how to improve the code. (For some reason the build on travis does not started for the merge commit...but it was green before..so hopefully the build still passes).
--------------------------------------------------------------
#3398 Comment 1:
Looks good to be, however I am wondering why the javafx thread check did not work as specified?
#3398 Comment 2:
It worked...if the call were made on the javafx thread, then the runnable was send to the executor. However, the executor starts a new thread for each submitted task.
#3398 Comment 3:
I tested it locally and apart from getting any error hint on invalid bibtex (which is simply reverted) it works as expected. So I merge this in now
--------------------------------------------------------------
#3395 Comment 1:
@lenhard Thanks for your review! Totally agree, have made changes as requested and updated some of the old stuff to match.
#3395 Comment 2:
@ethanwharris nice! We'll merge this as soon as another maintainer approves.
#3395 Comment 3:
@lenhard Thank you for your feedback. Have now updated the menu localization to retain original translation, have also reflected this in the JabRef localization.
#3395 Comment 4:
@ethanwharris Ok, perfect! I've looked at the code again and this seems to be ready for merge now (which is what I will do right away).

Thank you very much for your contribution! Feel very much invited to contribute more :-)
--------------------------------------------------------------
#3394 Comment 1:
Thanks for your contribution, it is no longer required to rebase your committs into one, as github can Show all changes across commits and on merge we typically squash all commits into one (automatically done by github)

Make sure to look at the Travis Ci log to see why the build failed, just click on it 
#3394 Comment 2:
@sudoHackIn Please know that closing and removing this PR is the worst outcome for all of us. I checked your GitHub account and it seems you weren't active for a long time and now you jump in solely for the purpose of helping JabRef. We highly appreciate this!

I know that the language in review comments sounds sometimes harsh to the unaccustomed ear. Please, never take it personally because behind every username there is indeed a friendly human (as unbelievable as this sometimes seems). Unfortunately, we all lack one thing and this is time. That's why we try to communicate as clearly as possible which is the best way to communicate issues but clearly not the best way to communicate to a person. 

If you feel lost since you don't know how to respond or resolve things like

> Thats a bit ugly: you need to know that the cleanup url menu item is the first one returned. 

Comment on this and say that you don't have an idea how to solve this and whether someone can help or tip you off. Additionally, I'm aware that the code-style issues are sometimes a pain but if you are using IDEA, it can sort everything out for you. We have an [IDEA codestyle config](https://github.com/JabRef/jabref/tree/master/config) readily available so that you don't have to deal with e.g. `.*` imports yourself. Finally, did you see that the `gradle.build` provides tasks for checking the style? 

Although I just skimmed over your code, I see that you have added to CHANGELOG, wrote a test, etc. So this is in my humble opinion no PR that should be closed without a very definite reason. Is there a way to convince you to comment on why you did close this?
#3394 Comment 3:
Hi @halirutan! Thank you for your kind feedback. Everything is ok) Sorry, that i confused you all with this situation. I will take all of yours remarks into consideration and again create PK. This happens just because i made so big mess in git repo with rebasing and force pushing :(  So the easiest solution for me looks like try forking jabref again and repeat this changes.
So i'll return soon with PK and changes that you advised to do) Again sorry for this confused situation..
--------------------------------------------------------------
--------------------------------------------------------------
#3390 Comment 1:
I just tested this locally in a few settings and I have not experienced exceptions or freezes. The problem described in 2. here still persists https://github.com/JabRef/jabref/pull/3366#issuecomment-341096859 When you open the source tab and click somewhere, the cursor seems to stay at the initial position. But when you enter the text, the text is inserted at the position you clicked. So it seems that the cursor has indeed moved, but is just not displayed at the right position. That is ugly, but not as bad as the freezes. So if this PR really solves the freezes, then I am in favor of merging.

It would be great if sthe users who reported problems with the source tab in the prior PR could give this branch some testing. @jonasstein @sambo57u could you please give the source tab a try with the version available here: http://builds.jabref.org/storeSourceFix/
#3390 Comment 2:
@lenhard this version does not freeze, if I drag an article in a group. 

The source tab does sometimes not move the curser, where I click the mouse to. I can not reproduce when this happens. I click on the 2nd line in the bib code and it fails. Then I click around in the tabs on the bottom try again and it works. Then I click around in the tabs on the bottom try again and it eventually fails again. 

Removing {\hspace{0.167em}} from the authors in https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.119.177201 works now too. 

```
JabRef 4.1-dev--snapshot--2017-11-02--storeSourceFix--598abe18d
Linux 4.12.12-gentoo+ amd64 
Java 1.8.0_152
```
#3390 Comment 3:
@jonasstein Thanks for reviewing! This version does not freeze when you drag an article in a group?!?! That sounds good, but the code changes here have no relation whatsoever to the groups panel. I am unsure what to make of this observation.
#3390 Comment 4:
The 4.0 release freezes. Did you expect that this version freezes too?
#3390 Comment 5:
From your comments in other issues, I thought that the master version also freezes. I am glad to hear that this was a misunderstanding.
#3390 Comment 6:
After playing around some more, I have discovered a problem: Pasting into the source pane does not work. Also marking text through keeping the mouse pressed or hitting ctrl+a does not work. It actually marks all text, but that is not visible.

The real problem is this: 
1. When I mark all text in the source tab 
2. and paste a valid entry into it, 
3. the pasted entry is displayed, but the database is not marked as changed 
4. and as soon as I switch to something else, all changes in the source tab are lost (even if I saved the database in between). 

Somehow it seems that the source tab does not register that text has changed through the paste. @tobiasdiez Any chance of looking into this as part of this PR?
#3390 Comment 7:
@lenhard Both of these issues seem to also be present in the current master. Since I'm not sure when I'll find the time to fix them (and the indexoutofbounds exceptions are really a pain in the *** for the user), I would prefer if this PR could be merged with its current scope.
#3390 Comment 8:
Ok, I understand. Looks like there are still some errors left, e.g. https://github.com/JabRef/jabref/pull/3366#issuecomment-341705504 

We could merge this, since it is at least an improvement. The source tab is still not bug-free, though.

@JabRef/developers Could a second person please give this a review?
#3390 Comment 9:
Actual fix comes in https://github.com/JabRef/jabref/pull/3398
--------------------------------------------------------------
#3388 Comment 1:
Thanks for fast response. I fixed the problems.
#3388 Comment 2:
Thanks for your contribution! I tested the changes locally and it works fine! Feel free to look at other issues as well!

--------------------------------------------------------------
--------------------------------------------------------------
#3386 Comment 1:
I still get the exception, for example when 
1. adding a new entry 
2. moving to the source tab
3. moving back to the required tab and typing something in the key field
4. exception occurs, source tab is not updated and becomes nonfunctional.

To be honest, this looks as if the binding is broken. I guess until this get fixed, the source tab will be a blocker for a 4.1 release.
```
09:31:05.737 [JavaFX Application Thread] ERROR org.jabref.FallbackExceptionHandler - Uncaught exception occurred in Thread[JavaFX Application Thread,5,main]
java.lang.IndexOutOfBoundsException: 10 not in [0, 1]
        at org.reactfx.util.Lists.checkPosition(Lists.java:110) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.util.Lists.checkPosition(Lists.java:105) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.util.FingerTree$NonEmptyFingerTree.locateProgressively(FingerTree.java:51) ~[reactfx-2.0-M5.jar:?]
        at org.fxmisc.richtext.model.ReadOnlyStyledDocument$Pos.offsetBy(ReadOnlyStyledDocument.java:448) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.model.ReadOnlyStyledDocument.offsetToPosition(ReadOnlyStyledDocument.java:265) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.model.GenericEditableStyledDocumentBase.offsetToPosition(GenericEditableStyledDocumentBase.java:119) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.model.SimpleEditableStyledDocument.offsetToPosition(SimpleEditableStyledDocument.java:10) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.GenericStyledArea.offsetToPosition(GenericStyledArea.java:952) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.CaretImpl.lambda$new$1(CaretImpl.java:104) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.reactfx.value.Val$2.computeValue(Val.java:705) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.ValBase.getValue(ValBase.java:17) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.ValBase.newObserver(ValBase.java:40) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.ValBase.newObserver(ValBase.java:8) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:110) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addInvalidationObserver(Val.java:52) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addListener(Val.java:70) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.observeInvalidations(Val.java:432) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.MappedVal.connect(MappedVal.java:28) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.ValBase.observeInputs(ValBase.java:26) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:108) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.observe(ObservableBase.java:100) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.observeInvalidations(Val.java:61) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val$1.observeInputs(Val.java:104) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:108) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.observe(ObservableBase.java:100) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.EventStream.subscribe(EventStream.java:53) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.SuspendableBase.observeInputs(SuspendableBase.java:49) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:108) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addInvalidationObserver(Val.java:52) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addListener(Val.java:70) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val$2.connect(Val.java:693) ~[reactfx-2.0-M5.jar:?]

        at org.reactfx.value.ValBase.observeInputs(ValBase.java:26) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:108) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addInvalidationObserver(Val.java:52) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.value.Val.addListener(Val.java:80) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.EventStreams$3.observeInputs(EventStreams.java:106) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.addObserver(ObservableBase.java:108) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.ObservableBase.observe(ObservableBase.java:100) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.EventStream.subscribe(EventStream.java:53) ~[reactfx-2.0-M5.jar:?]
        at org.fxmisc.richtext.GenericStyledArea.createCell(GenericStyledArea.java:1299) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.richtext.GenericStyledArea.lambda$new$9(GenericStyledArea.java:658) ~[richtextfx-0.8.1.jar:0.8.1]
        at org.fxmisc.flowless.CellPool.getCell(CellPool.java:28) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.CellListManager.cellForItem(CellListManager.java:86) ~[flowless-0.6.jar:?]
        at org.reactfx.collection.MappedList.get(MappedList.java:27) ~[reactfx-2.0-M5.jar:?]
        at org.reactfx.collection.MemoizationListImpl.get(MemoizationList.java:99) ~[reactfx-2.0-M5.jar:?]
        at org.fxmisc.flowless.CellListManager.getCell(CellListManager.java:69) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.CellPositioner.getSizedCell(CellPositioner.java:217) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.CellPositioner.placeStartAt(CellPositioner.java:127) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.Navigator.placeStartAtMayCrop(Navigator.java:201) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.Navigator.visit(Navigator.java:129) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.StartOffStart.accept(TargetPosition.java:85) ~[flowless-0.6.jar:?]
        at org.fxmisc.flowless.Navigator.layoutChildren(Navigator.java:78) ~[flowless-0.6.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1087) ~[jfxrt.jar:?]
        at org.fxmisc.flowless.VirtualFlow.layoutChildren(VirtualFlow.java:257) ~[flowless-0.6.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1087) ~[jfxrt.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1093) ~[jfxrt.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1093) ~[jfxrt.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1093) ~[jfxrt.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1093) ~[jfxrt.jar:?]
        at javafx.scene.Parent.layout(Parent.java:1093) ~[jfxrt.jar:?]
        at javafx.scene.Scene.doLayoutPass(Scene.java:552) ~[jfxrt.jar:?]
        at javafx.scene.Scene$ScenePulseListener.pulse(Scene.java:2397) ~[jfxrt.jar:?]
        at com.sun.javafx.tk.Toolkit.lambda$runPulse$30(Toolkit.java:355) ~[jfxrt.jar:?]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_121]
        at com.sun.javafx.tk.Toolkit.runPulse(Toolkit.java:354) ~[jfxrt.jar:?]
        at com.sun.javafx.tk.Toolkit.firePulse(Toolkit.java:381) ~[jfxrt.jar:?]
        at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:510) ~[jfxrt.jar:?]
        at com.sun.javafx.tk.quantum.QuantumToolkit.pulse(QuantumToolkit.java:490) ~[jfxrt.jar:?]
        at com.sun.javafx.tk.quantum.QuantumToolkit.lambda$runToolkit$404(QuantumToolkit.java:319) ~[jfxrt.jar:?]
        at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
        at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191) ~[jfxrt.jar:?]
        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]
```
#3386 Comment 2:
Ok, I reported the issue https://github.com/FXMisc/RichTextFX/issues/637, maybe they already know whats going on and how to fix it. I don't have time at the moment to provide a minimal non-working example, so feel free to update the issue there with more details. 

We can nonetheless update to the latest version, so I'll merge this PR now.
--------------------------------------------------------------
--------------------------------------------------------------
#3370 Comment 1:
I think you included your autoset link fixes by accident.
--------------------------------------------------------------
#3368 Comment 1:
@tobiasdiez  I now moved the common code to an own method in a class in the gui.
It can't be moved to logic because it depends on ExternalFileType
I tried adding a test for it, but even with extensive mocking, ExternalFileTypes are again the problem - Because it's a singleton class...Mockito is not able to mock it.
#3368 Comment 2:
Thanks for the further refactoring. The code looks better now!

Concerning the tests, you should be able to extract `ExternalFileTypes.getInstance()` to a method parameter and then simply pass a `mock(ExternalFileTypes.class)` in the test.
#3368 Comment 3:
Thanks for the hints. I was no able to create a test and to faciliate the code
--------------------------------------------------------------
#3366 Comment 1:
I have several issues with this on my machine. 

1. Open Entry go to source tab and invoke Generate Key button or Quality -> Autogenerate BibTeX keys throws an exception and leaves everything in an undefined state where the source editor doesn't work anymore (likewise each external change like Clean Entry, Mark Entry, will do this)
2.  Using Change Entry Type button doesn't update the source view
3. Changing source to something invalid and moving to a different tab or entry silently reverts the entry to its original content (which would be OK for me and which makes life so much easier)
4. Undo doesn't work correctly. It kind of mixes reverting things I did earlier and throws an exception. In the end, it clears the source editor

Some of the things might be older issues but leaving the source editor unusable should be introduced by this PR.
#3366 Comment 2:
@halirutan Thank you for the intensive testing. 

- 1+4: Oh yes, again one of these "not on JavaFX thread"-related issues. Should be fixed now
- 2: Changing the entry type indeed does not update the source code. However, this also didn't worked before if I'm not mistaken.
- 3: I don't want to store invalid input. This would really complicate things.
#3366 Comment 3:
@lenhard Also thanks to you for the intensive testing! I've not realized how many bugs this PR actually fixes. The exception you get is also present in the current master https://github.com/JabRef/jabref/issues/3375. I actually cannot reproduce it, so its not possible for me to solve or analyze it (however: it seems to be a problem with the code editor itself, `flowless` is the library that provides the editor).
Thus I'm taking the liberty to merge the PR after the build is successful.

Sidenote: you are right, debugging these bindings is a nightmare...on the other hand, they are really powerful and make things easier (as the 2-way binding in this PR shows; setting up something similar with our event system would be way harder).

@halirutan I'm really sorry that my changes overlapped with your's. I read it to late that you already had a solution for some of these issues. Feel free to work on the editor, I'll stay put and work at other things now. (A more detailed communication on these matters is hard at the moment since my skype is not working due to the great firewall and vpn issues...)
#3366 Comment 4:
I just tried testing the latest build which I believe includes this change. Changes now a properly saved
in the entry editor except when one tries to put a curly bracket, e.g. for capital letters, I am getting an
what seems to be an inconsequential error message saying that "unable to parse the entry ....".
I think as soon as you type in a { if this is going to be stored then there is a mismatch in brackets.
#3366 Comment 5:
I tried this release too, here (#3383) it even "destroys" the source field until I restart Jabref. In the Example I documented there is also a `{` perhaps this is the root of evil.
#3366 Comment 6:
@sambo57u Thank you very much for trying the new build. If you add an additional { jabref can no longer parse the entry successful and thus does not stores the changes. But as soon as you close the bracket } JabRef should start to update the entry again. I just pushed a fix to the newest development version that makes the error message at the bottom disappear as soon as the code can be parsed again.
#3366 Comment 7:
Trying 4.1dev build 2017-11-01 04:42
There seems to be other problems creeping into the entry editor:
1. Changes are not saved at all
2. When the source editor is invoked by double clicking on an entry the clicking the mouse cursor somewhere in the source has no effect of moving the cursor (remains at the top left position). But actually it seems to have moved because if you type a letter it types it where you clicked the cursor and
at that point cursor also moves.
#3366 Comment 8:
@tobiasdiez It seems that several other people are experiencing problems with the source tab that are affecting the complete entry editor, e.g. also https://github.com/JabRef/jabref/issues/3217#issuecomment-341149456 I guess the binding as it stands here does not work properly.

I think the merge of this might have been a little too early. Could you please investigate this issue (sort of soon, sorry), because the master branch is kind of broken at the moment. I am not sure, but maybe an alternative would be to revert the merge, reopen the closed issues linked above, and go for a new PR. After all, it might be better to have no sync between source tab and other tabs than to have no entry editor at all. But maybe the whole problem is easily fixed soon in a follow-up PR and then reverting would not be necessary.
#3366 Comment 9:
@lenhard Yes, sorry for merging a bit to early. I thought that since the index out of bounds exception was already a known issue, I did not introduce a new bug and thus everything is fine. But, as we learned now, the fixes in this PR actually make it so that users hit the IndexOutOfBounds bug way more often (since now the external updates actually work...). 

Hopefully https://github.com/JabRef/jabref/pull/3390 provides a temporary fix until https://github.com/FXMisc/RichTextFX/issues/637 is solved.
#3366 Comment 10:
@tobiasdiez Thanks for the quick action :) I'll try to review the new PR as soon as possible and then we will hopefully be back in a working state soon.
#3366 Comment 11:
I am only seeing the 11-01 12;11 build on master. Testing that two problems remain, the mouse movement and nothing is saved. Even after making a change one does ctrl+s and sees a message that the bib file is saved, it is really not saved.
#3366 Comment 12:
As of 4.1dev 2017-11-03 07:17 version no change in the source editor is saved, plus the cursor issue.
#3366 Comment 13:
@sambo57u As of now, the fix is not yet merged into master, so this is expected. If you want to try out the current version of the fix that seems to repair the saving, you can get it here: http://builds.jabref.org/storeSourceFix/
#3366 Comment 14:
Hi, unfortunately the version from http://builds.jabref.org/storeSourceFix/ have the same problem. This was fixed at some point except the issue of getting an error message when one tried to enter a curly bracket. At this point no changes are saved in my test.
#3366 Comment 15:
Ok, I also have some update problems in that left. Looks like they won't get fixed as part of that PR. Well have to see if someone addresses them.
--------------------------------------------------------------
--------------------------------------------------------------
#3364 Comment 1:
yes, agree, good point  I readded it in the other PR
--------------------------------------------------------------
#3362 Comment 1:
Updated. Please have a look.
--------------------------------------------------------------
#3361 Comment 1:
Sorry, but adding a changelog entry in a PR seems like a desperate attempt to get enough PRs for hacktoberfest ;-) You still have developer rights. Please close this PR and add the changelog entry directly.
--------------------------------------------------------------
#3360 Comment 1:
To give some feedback and to spare you unnecessary work. I had already rewritten this yesterday and I'm sorry for not saying that I look over this. When I saw that you started this too, I fetched your branch and my initial idea was, just to provide the functionality to make `Ctrl+S` work.

However, I believe the information flow for the `EntryEditor` is extremely confusing so I ended up rewriting this completely. The main idea is to make the `EntryEditor`implement [`EntryEditorInfo`](https://gist.github.com/halirutan/d6386973d7939fd6e2d721673b6139ce) that provides access for each tab. Therefore, we don't pass entries, entry-types, contexts, etc. between the editor and its tabs, instead, each tab accesses the information when it needs it. This let me through out all the methods that pass things and the tabs are only *notified* when they get focus or when a new entry is set by the `EntryEditor`. This makes things much more localized and easier to follow.

I would like to push this on a new branch and test it carefully. It will include the changes you made here. The issue with `Ctrl+S` can be resolved by putting this in the `setupKeyBindings()` for the EntryEditor where we act on (but don't consume) that save/saveAll events:

``` java
switch (keyBinding.get()) {             
    case CUT:                           
    case COPY:                          
    case PASTE:                         
    case CLOSE_ENTRY_EDITOR:            
    case DELETE_ENTRY:                  
    case SELECT_ALL:                    
    case ENTRY_EDITOR_NEXT_PANEL:       
    case ENTRY_EDITOR_NEXT_PANEL_2:     
    case ENTRY_EDITOR_PREVIOUS_PANEL:   
    case ENTRY_EDITOR_PREVIOUS_PANEL_2: 
        e.consume();                    
        break;                          
    case SAVE_ALL:                      
    case SAVE_DATABASE:                 
    case SAVE_DATABASE_AS:              
        sourceTab.saveCurrentSource();  
        break;                          
    default:                            
        //do nothing                    
}                                       
```

The things I tested worked but there is one complicated situation: User edited the bibtex source and made a syntax error in it. Then he clicks on a different entry in the main table. Besides that the current "let me edit my wrong code" does not work as it stands (exception is not caught), there is a deeper problem: The main table is already on a different entry and the `EntryEditor` has already fetched the new entry. To make a successful *revert&edit* we need to tell the main table to jump back to the erroneous entry and set it in `EntryEditor`. 

@lenhard Shall I put my changes on a different branch? In this way we have a quick fix with your PR and can test things carefully.
#3360 Comment 2:
@halirutan Thanks for your input! What you write sounds reasonable and I agree that the information flow in the entry editor is crying for a larger refactoring.

I have just pushed a fix to repair the build here and when it has passed we could merge this already. You can do your changes on a different branch, then. And we can give it a thorough look and testing.

Just be aware that even more problems apart from syntax error correction might come up. The tabs are not only dependent on the entry editor, but also partly dependent on each other. E.g. if a field value changes in the source tab, it should be changed in another tab as well and vice versa (not so hard) and if I add a new optional field in the source tab, it should make the optional tab make appear (somewhat harder).
#3360 Comment 3:
@lenhard 

> if I add a new optional field in the source tab, it should make the optional tab make appear (somewhat harder).

yes, even this works already.
#3360 Comment 4:
Perfect! Then I'll merge this directly so that we have a quick fix to the issue and you can go ahead with your larger refactoring.
--------------------------------------------------------------
--------------------------------------------------------------
#3353 Comment 1:
Even if this is not as big a refactoring as it could have been, I appreciate it very much. At least it is moving the package structure a little more in the direction in which we intend to be going. After the refactoring, the `pdfimport` and `shared` packages are the last problematic parts. Especially the `shared` package is a real problem, because it introduces a transitive dependency from `model` into `gui`, but that is a different topic.

I have played around with a running JabRef instance. Regardless of what external change I do, it notifies me of an additional change in the meta data (but the change is empty). That is probably related to the unnecessary notifications you mention above. I don't care too much if JabRef notifies me when external changes do not actually change file content, but it is annoying that it notifies me of a meta data change, when I just change an entry. Could you please look into this?
#3353 Comment 2:
Previously: an external change occurs, the Change Monitor occures and notifies. However, even after accepting all changes and saving, the change monitor would kick in again. So I would suggest to handle that case somewhere that when I accepted my external changes and press save that I don't get that dialog again
#3353 Comment 3:
@lenhard good observation! The content selectors didn't had a proper equals method and thus were always reported as a difference (this problems should have occurred also before the refactoring since I didn't change anything in the metadata comparison). I now fixed it and even added a test covering it.

@Siedlerchr this sounds like a reasonable thing to do. However, this PR is only about the refactoring and as I said above I'll try to not touch the functionality. Thus I will leave this to a follow-up.
--------------------------------------------------------------
#3351 Comment 1:
Welcome back and thanks for the PR :)
--------------------------------------------------------------
#3350 Comment 1:
Yeah, @simonharrer is back! 😄 
--------------------------------------------------------------
#3349 Comment 1:
Thanks for the update!
#3349 Comment 2:
@igorsteinmacher  - Did you sign up for https://hacktoberfest.digitalocean.com/?
#3349 Comment 3:
Done! @koppor ;) Thanks 👍 
Coming back to the community slowly. Wait to hear more from me soon 
--------------------------------------------------------------
#3348 Comment 1:
Thanks again!
--------------------------------------------------------------
--------------------------------------------------------------
#3340 Comment 1:
Nice work @halirutan Anytime your PRs are ready for review please add a 'ready-for-review' label.
#3340 Comment 2:
@stefan-kolb At the moment, I'm not sure I'm allowed to do this.
#3340 Comment 3:
@halirutan Oops, ok I thought you already have access 😄 
#3340 Comment 4:
@lenhard I wanted to comment on this

> Here's my memory profile of the keydown behavior:

The keydown behavior is a good general indicator, but there are some drawbacks. The main issue with it is that it can be heavily misleading. Assume for a moment that we ignore everything else and look only at the impact of showing the entry editor. When we have fixed an issue like the one in this PR that does not only affect memory but performance as well, then the speed of creating the entry editor will improve. That directly impacts how many entries you can visit on holding the key down.

Now assuming that we could speed up things by 50% but couldn't reduce the memory impact, then your memory monitor will make the impression if things had gone worse because it will fill the memory faster. That was the main reason why I reported both the memory and the performance separately under controlled circumstances (visiting exactly 50 entries).

What we would need (maybe we already have this) are what we call [model level functional tests](https://www.jetbrains.org/intellij/sdk/docs/basics/testing_plugins.html) in IDEA plugin development. So, for instance, a test that visits n entries and simulates a click or starts JabRef and performs a search.

Those tests shouldn't be run by travis but they should be available for profiling to clearly pinpoint if we have a regression or a speedup.

#3340 Comment 5:
@halirutan You are right of course.

We have some GUI tests in `jabref/src/test/java/org/jabref/gui/`  but they are run on travis only, because they are rather annoying to run locally. Also, they are not focused on performance at all.

We also have a few performance tests in `jabref/src/jmh/java/org/jabref/benchmarks/`
 but they are not related to the GUI and this is where our major performance problems are at the moment.

It would be good to have the tests you describe and, as usual, it depends on someone being willing to put the effort into. Most people (including myself) are a little shy when it comes to UI testing in JabRef, because the user interface has been heavily changed in the last year, meaning you have to re-write the tests all the time. If you are interested in doing something here, I would suggest you have a look at the current GUI tests, but if you want to use a better framework for building such tests, be my guest!

A new minor release of JabRef is imminent. Since I definitely want to have this in, I'll merge it right now. It is complete as far as I can see (the other refactoring I proposed does not work, as we have discussed).

Thank you for your contribution.
#3340 Comment 6:
@halirutan - Did you sign up for https://hacktoberfest.digitalocean.com/?
#3340 Comment 7:
@koppor I've seen it but I thought it was a JabRef internal thing. After all, many of the contributors are located in Germany and I thought it was a fun way of dedicating a month to pushing things forward.
--------------------------------------------------------------
--------------------------------------------------------------
#3337 Comment 1:
Thanks, @mlep!
--------------------------------------------------------------
#3336 Comment 1:
since this is rather trivial I'll merge this rightaway.
--------------------------------------------------------------
#3334 Comment 1:
Why don't we create a fork of the original project and include other fixes as well, e.g. the system errr output (there is already a Pr regarding that)
@JabRef/developers  WDYT about this, forking the original code and maintaining it
#3334 Comment 2:
The problem here is the license. We cannot just copy the code and use it here, because it is licensed differently. We will need to go for a fork / separate library.

@koppor will contact the author of afterburner per mail. Maybe this wakes him up.
#3334 Comment 3:
I really like license problems :-). I would actually help Adam Bien to maintain this library. I think, of now JabRef is one of the main users of afterburner and thus we should be interested in having a stable and working platform. (I don't like a separate fork).
--------------------------------------------------------------
#3333 Comment 1:
Nice! I pulled your branch and I'm looking over it. One thing up front: As expected, the memory consumption went again down drastically and the same run through the 209 entry example was now possible even without the GC kicking in

![img](http://i.imgur.com/6KCLOVY.png)

I see here only 240MB of RAM that was needed and the speed is awesome.
#3333 Comment 2:
> With the changes, tabs no longer fly-in but for some reason, the order is not preserved.

This is just horrible. The sorting of the observable list `tabbed.getTabs()` is correct all the time. The *some reason* for the reordering is in `com.sun.javafx.scene.control.skin.TabPaneSkin`. `SetAll` in your code works so smoothly since the skin does not really set the list. It maintains a *to be removed* and *to be added* list and unfortunately, it inserts new elements, like the `FileAnnotation` tab that is often not accessible at the front.

Even more unfortunate is that the `TabPaneSkin` is an almost completely inaccessible class. Everything important is `private`. I guess we will have to do the removing and insertion of tabs ourselves. 

I thought maybe we can simply have all tabs in `tabbed` and close and open them. Therefore, 
I looked into what *closing* a tab means but it's really just removing the tab from the list. See `com.sun.javafx.scene.control.behavior.TabPaneBehavior#closeTab` for details. That's the reason why you don't find a *open tab* there.

The best solution from the developer's point of view is `disabling` the tabs. We wouldn't even have to keep a `tabs` variable then. If this is absolutely no way to go, then we need to write a small algorithm that (a) removes unwanted tabs from the existing list and (b) inserts new tabs that were not in there at the right position.
#3333 Comment 3:
I don't have push access, but [here is the patch](https://hastebin.com/erihedisaj.diff) for manually changing the tabs list without removing everything and re-adding all tabs. In IDEA you can try it out by using VCS -> Apply Patch.
#3333 Comment 4:
Thanks @halirutan for the feedback and the patch. I took your ideas but implemented it somewhat different (the outcome should be the same). Everything seems to work now, so this PR is ready for review.
#3333 Comment 5:
Great job overall. The code looks fine. I have nothing to criticize expect my usual stuff: Please add a changelog entry :-)

Here's an example of when I really try to push the entry editor to the limits with having key down pressed in the main table:
![keydown](https://user-images.githubusercontent.com/1515701/31888286-b5a4e71c-b7fb-11e7-9911-f08dd7648c49.png)
That is excellent, I am not getting JabRef above 800 MB. I also have the impression that GC is kicking in much more frequently. Here is also a diagram of some "longer" development:
![longer](https://user-images.githubusercontent.com/1515701/31888340-edd9648c-b7fb-11e7-846f-9d72d6b668a5.png)
You can see the initial spikes. Then during idle time, memory stays up and it takes some time for GC to start. What annoys me is that JabRef does not free more unused heap, but I would probably have to wait longer for that and in the end it is a different issue.

What I haven't tested extensively is that *the entry editor actually works*, i.e. that updates in the entry editor go to the right entry. I was surprised that I don't see many changes in the update structure in the code in this PR, but maybe it was simpler to achieve than I expected. I wouldn't be surprised if we find update bugs after merging this.

TL&DR: Very cool PR. It is almost ready to merge in my point of view. 

#3333 Comment 6:
@lenhard We already have a changelog entry for the performance improvements, so I didn't added anything there in addition.

@koppor I expect at least few beers from you for everybody at the next JabCon for bearing the constant annoying stylecheck complains 😺 
#3333 Comment 7:
@tobiasdiez ...if you join ...

Am 23.10.2017 15:47 schrieb "Tobias Diez" <notifications@github.com>:

@lenhard <https://github.com/lenhard> We already have a changelog entry for
the performance improvements, so I didn't added anything there in addition.

@koppor <https://github.com/koppor> I expect at least few beers from you
for everybody at the next JabCon for bearing the constant annoying
stylecheck complains 😺

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub
<https://github.com/JabRef/jabref/pull/3333#issuecomment-338664070>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ABTafovGcpIBAL_WTbi64VuVCGT7FJgYks5svJjGgaJpZM4QByqk>
.

#3333 Comment 8:
@tobiasdiez Alright, I am fine with that. I have removed the [WIP] part in the title, since this is no longer work in progress, I guess.

We're practically good to go here, right? @Siedlerchr wanted to do some more testing and then we can merge.
#3333 Comment 9:
Tried around, works amazingly fast! Did not find any issue so far, so I would merge it now! 
Thanks all contributors!
--------------------------------------------------------------
#3332 Comment 1:
Na, I am acutally happy getting this emails!
#3332 Comment 2:
I don't have a strong opinion on this.
#3332 Comment 3:
Ok, if you guys like these notifications...
I just added an "automatic delete mails from travis" rule to my mail program.
--------------------------------------------------------------
#3331 Comment 1:
As discussed in the prior PR, I am very much in favor of this. To me, this change alone and the implications it has on performance would justify the release of a 4.1. I have tested it locally and the reduced memory consumption is awesome. Could you add a changelog entry regarding lazy initialization in the `Changed` section?

The next step would be, as you say, to avoid the recreation of the tabs. I would like to work on this, but my schedule for the weeks to come is a bit crazy, so I cannot promise anything.

Regarding the sliding tab problem, we cannot really fix the number of tabs without annoying users. It would be a reduction in functionality and I would like to avoid that. Maintaining a list of tabs and selectively showing the ones that need to be shown seems like the most reasonable solution to me at the moment, but we will see when we proceed with the implementation.
#3331 Comment 2:
Looks good to me, just take a look at the codacy issue, is probably just about the region variable
#3331 Comment 3:
@lenhard I'm making a note in the changelog. 

> I would like to work on this, but my schedule for the weeks to come is a bit crazy,

No problem, I have a lot of different things I can/should/have to work on as well. You seemed to have written a great deal of the code there and that's why it would be nice if you would help with the basic restructuring so that I don't overlook some dependency on the global preferences or on other things and have to start over. Once we have the basic structure, I'm sure I can help.

@Siedlerchr codacy is just complaining

> FieldsEditorTab.java is often changed in this project

Well, I hope it's going to complain a lot in the future.

#3331 Comment 4:
Perfect, I'll merge now.

Actually, most of the code in the current entry editor was written by @tobiasdiez (who might also have some valuable hints on this). I just contributed with a number of bug fixes over the past months. Anyway, it would be cool to get all this done for 4.1. We'll see.
--------------------------------------------------------------
--------------------------------------------------------------
#3329 Comment 1:
master branch is protected from force pushing. Otherwise seems like you have  not the latests changes from the master. git fetch upstream --prune && git merge upstream/master should do it (If the jabref repo is your upstream)
--------------------------------------------------------------
--------------------------------------------------------------
#3327 Comment 1:
I fixed the issues. Is there a nicer way to create a `HashMap` from the `Collectors.toMap` than simply wrapping it around?

#3327 Comment 2:
Unfortunately there is no simpler solution for the Map thing. 
Looks good to me, but you have still some checkstyle issues, here is a template? for Intellij:
https://github.com/JabRef/jabref/tree/master/config
#3327 Comment 3:
Since the checkstyle problems are fixed, I'll merge this now.

Thanks a lot for your contribution!
--------------------------------------------------------------
#3325 Comment 1:
The changes are a bit hard to review, but I have tested it locally and the annotations are refreshed as desired.

I have another point, though, one that might entail some work. Since you are already touching this code, do you see a change of refactoring the complete `collab` package, so that it fits better to our architecture? If we just take the current dependencies in the package, then the whole thing would basically go into gui. This already would be an improvement, because the source code packages in root would already look a little more like where we want to go.

But to be honest, I do not get why file monitoring functionality should belong into the gui part. At least part of that should be extractable into a non-GUI part and should be movable into logic. If I look at `ChangeScanner`, then basically everything from line 164 downwards is GUI-independent code.  I also don't see why `Change` and its subclasses should be so heavily tied to UI code. As far as I can see this is only, because the code is tied so strongly to the undo framework. Couldn't we extract that part and move the `Change` classes to a deeper layer?
#3325 Comment 2:
Ok, I'll merge this now and will have a look at the collab package later. I second your concerns @lenhard, much of the code their should actually reside in logic. This would also help @Siedlerchr in his endeavor towards sharelatex integration.
--------------------------------------------------------------
--------------------------------------------------------------
#3320 Comment 1:
Yes, the weights were previously used to determine the size of the field editors. I think our new approach is superior since now the model does not need to know anything about an entry editor at all and the size of the fields is determined in the gui, as it should be.

I'll merge this now. 
--------------------------------------------------------------
--------------------------------------------------------------
#3317 Comment 1:
Yes, the 1.0.10 version is really buggy and does not send any telemetry (page views / exceptions) at all. See https://github.com/JabRef/jabref/issues/3313. Thus I downgraded it to 1.0.9. A new version 1.0.11 should be released soon and we can hopefully upgrade without problems.
--------------------------------------------------------------
--------------------------------------------------------------
#3312 Comment 1:
Danke!
--------------------------------------------------------------
--------------------------------------------------------------
#3305 Comment 1:
I would have provided localization, but it seems this is done on Windows and when I run `localizationUpdate`, all property files will be changed because the line separator is different. I can provide descriptions for English and German:

```
Tweak_font_rendering_for_entry_editor_on_Linux=Tweak_font_rendering_for_entry_editor_on_Linux
Tweak_font_rendering_for_entry_editor_on_Linux=Verbessertes_Schrift-Rendering_für_Linux
```
#3305 Comment 2:
Are you sure that the screenshots are correctly named? I find http://i.imgur.com/BsFhpmk.png way better, however you state that font tweaking is OFF in this version.
#3305 Comment 3:
Regarding the line endings, check out this post which explains the configs:
https://stackoverflow.com/questions/10418975/how-to-change-line-ending-settings
#3305 Comment 4:
First, @Siedlerchr: thanks for the link. I will look into it. For this PR, I will fix the line endings manually, but maybe it is possible to put [something like `-crlf`](https://stackoverflow.com/a/2517442/1078614) into `.gitattributes` for the property files under l10n.

@lynyus I will do the refactoring and include the localization. 

> Are you sure that the screenshots are correctly named?

Yes, I'm very sure, but I admit that I might be very pedantic about something like this as I'm working in image processing. However, I'm happy to give a demonstration: First, a screenshot from the swing text. which render OK (not as great as in OSX or Windows, but hey, it's Linux):

![swing](http://i.imgur.com/Q0fegOz.png)

You see that the antialiasing creates colors around the characters. Now, close your eyes *almost* completely to create a *blurred impression*. You'll notice that despite the color-antialiasing, the font appears consistent meaning no character sticks out.

Let's take a small portion from the FX fonts in the bottom

![fx1](http://i.imgur.com/pzZ20rN.png)

No matter how hard you will try, the vertical lines of the I, H, and the first vertical of the M feel too heavy compared to the extremely thin and sharp last vertical line of the M. When working, these things give the Entry Editor font a very inconsistent feeling.

Let's look at the same portion with the FX-tweak turned on.

![fx2](http://i.imgur.com/w2mY0Tz.png)

Not completely awesome, but definitely closer to the swing fonts. I hope that proves my case and I dearly hope that it will work as good on other Linux systems.
#3305 Comment 5:
Thanks for the explanation. I see the same effects that you explain when I zoom in, it is just that the screenshots without the tweaks look somehow clearer and more harmonic to read. What do you think, @JabRef/developers?
#3305 Comment 6:
@lynyus Let me be a visitor for while :) I'm happy if I can help and I'm using JabRef regularly, but I'm not sure how much time I have beside my other stuff. I'm fine with making a PR for the moment.
#3305 Comment 7:
I like the screenshots with the tweaks.

Pro tip: One can drop images directly into the text boxes and GitHub uploads it transparently. No need for external hosters as stackoverflow does.
#3305 Comment 8:
@halirutan thanks for the contribution! Such expert knowledge is always highly appreciated. If you need a break from research, you are always welcome to have a look at our issues. (;

#3305 Comment 9:
@koppor Pro-pro-tip: The screenshot util on Linux can be configured to automatically upload images to imgur and gives you the link back. Only a Ctrl+V is required :smiley:

Hmm, but on a side note, I was under the impression that GitHub localizes all image links to imgur to its own hoster. At least I saw this happening in the past.
--------------------------------------------------------------
#3303 Comment 1:
I have to try if this works, but whille you are onto the code, you could take this as a chance to resolve the "alert/warning" from LGTM regarding String conceatenation in cmd parameters:
https://lgtm.com/projects/g/JabRef/jabref/alerts/?mode=tree&severity=error&rule=7870097
https://lgtm.com/rules/7870097/
Could you try to resolve this as an array? I think that would also resolve the problem I guess

#3303 Comment 2:
@Siedlerchr What would you say? I guess we can merge!
#3303 Comment 3:
Should I add something similar for the other executables in Linux too?
#3303 Comment 4:
@stefan-kolb  Yes, make it consistent and then we can merge
#3303 Comment 5:
@LinusDietz Does my solution work then? Can you test it. I changed it to your \ suggestion.
#3303 Comment 6:
@Siedlerchr Does my solution work then? Can you test it. I changed it to your \ suggestion.
#3303 Comment 7:
@Siedlerchr @LinusDietz Ping :-) Is this working? Can we merge?
#3303 Comment 8:
I think it should, but I lack a linux system in question. (KDE or Gnome). @Siedlerchr, do you have Gnome or KDE?
#3303 Comment 9:
I have tested the nautilus command, so I'm merging now. Don't have a kde environment at the moment.
--------------------------------------------------------------
#3300 Comment 1:
Be careful with controlsfx9 , it is built on/with java 9 support. 
#3300 Comment 2:
You could also check the fontawesomefx v 9 library (also with java 9 support)
http://www.jensd.de/wordpress/?p=2686
#3300 Comment 3:
yeah, I'm on the train in the bavarian `edge` nirvana, that's why I cant download and test all these libs right now. 
--------------------------------------------------------------
#3299 Comment 1:
Let's wait for @g-mos to confirm that this PR fixes the issue and then we can merge.
#3299 Comment 2:
It seems to have fixed the issue, you can merge it.
#3299 Comment 3:
Great! 
--------------------------------------------------------------
--------------------------------------------------------------
#3291 Comment 1:
@JabRef/developers Can someone do the localization update for me? The script doesn't work on my end 😢 
#3291 Comment 2:
@stefan-kolb  I neither can run the script 
#3291 Comment 3:
Well if #3184 was broken, we can just revert the merge.
#3291 Comment 4:
@stefan-kolb The localization script is working again. Can you merge master into this and then it should be ready to go.
#3291 Comment 5:
Merging now, as this was discussed already in the devcall. The failing test concerning freecite is unrelated and has been fixed in https://github.com/JabRef/jabref/pull/3445.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3285 Comment 1:
Thanks @Siedlerchr for fixing the build! Its really not fun to "program" with the github editor. Seems like I need to find a new way to procrastinate :-)
--------------------------------------------------------------
#3282 Comment 1:
Since the issue has now already been closed, I'll merge this directly.
--------------------------------------------------------------
--------------------------------------------------------------
#3274 Comment 1:
Thanks for your contribution, would you be so kind to add a changelog entry?
Then we can merge
#3274 Comment 2:
Sorry for omitting the changelog entry -- I wasn't sure if such fix qualified for a mention there. Will add it in a moment.
#3274 Comment 3:
@MrTosz  Thanks! The rule is simple: If it didn't work/has not been present in the version before, than we add a changelog entry. We are looking forward to more contributions from you!
I now merge your changes it.
--------------------------------------------------------------
#3273 Comment 1:
Hm, I appreciate this 👍 , but I will think it will backfire to us with java 9 or later , because we are effectively accessing internal Apis (for sure jdeps will complain), but as we still have do to this for the accent problem on linux I think it's worth. And I see no alternative.

Another thing I found is the following: I do not fully understand the discussion and the resulting code change. But what I understand is that they added a property`/method to the c++ code which sets this gtk stuff in javafx.
Maybe someone with more insight can help to clarify this

https://bugs.openjdk.java.net/browse/JDK-8097949
#3273 Comment 2:
According to the above link, for JavaFX it should suffice to call `setApplicationName` http://hg.openjdk.java.net/openjfx/8u60/rt/file/89345a49e71f/modules/graphics/src/main/java/com/sun/javafx/application/PlatformImpl.java#l109. But I have no idea how to do this...(and no IDE at hand to check further)
#3273 Comment 3:
> According to the above link, for JavaFX it should suffice to call setApplicationName

It seems to me like this should happen automatically when the application is launched. But for some reason this is either not happening or the name is set to java-lang-Thread instead. I will try to find out what is going on here...
#3273 Comment 4:
Here are some new results:
- LauncherImpl calls PlatformImpl.setApplicationName() during application startup
- this in turn calls setName() on the Application object
- both methods get the correct name ("org-jabref-JabRefMain") and this is successfully stored in the name attribute of the Application object
- the value of the name attribute does not change afterwards
- getName() of the Application object is never called

This leaves the big question: Why does my window manager still show "java-lang-Thread" as WM_CLASS? In case this is only an issue on specific Linux systems, here are information about mine:
* Desktop / window manager: GNOME 3.26.1
* GTK: 2.24.31
* JRE: openjdk 8u144
* JavaFX: openjfx 8u121
* GNOME runs on wayland but jabref is started as an X11 application using xwayland
#3273 Comment 5:
That is indeed mysterious: I can confirm this with Xfce, however in the Task Manager under Xfce it's correctly displayed

```
libgtk-3-0:amd 3.18.9-1ubun amd64       
libgtk2.0-0:am 2.24.30-1ubu amd64 
xprop|grep WM_CLASS
WM_CLASS(STRING) = "sun-awt-X11-XFramePeer", "java-lang-Thread"
```
http://i.imgur.com/jfwCfuR.png
#3273 Comment 6:
Thanks for investigating this. I suppose the problem is again that we are mixing JavaFX and Swing. I'm fine with the `awt`-solution if it works as expected. Please add the `if` check @lenhard proposed and this is ready for merge.
--------------------------------------------------------------
--------------------------------------------------------------
#3266 Comment 1:
Thanks for the quick fix! Since it is only a small code change, I take the liberty to merge it directly.
#3266 Comment 2:
@125m125 - Did you sign up for https://hacktoberfestchecker.herokuapp.com/?
--------------------------------------------------------------
#3262 Comment 1:
Merci ! Your first contribution to JabRef is much appreciated!
Do you know about [the other ways of helping in JabRef's developments](https://help.jabref.org/en/FAQcontributing)?
#3262 Comment 2:
Thanks for your contribution! I'll merge directly.
#3262 Comment 3:
@MBunel We are about to release a new Version of JabRef and would like to attribute you with your full name. Can you tell us your name so we can include it?
#3262 Comment 4:
Yes of course, "Mattia Bunel"
--------------------------------------------------------------
--------------------------------------------------------------
#3250 Comment 1:
Why don't we just keep the changelog of the 3.* versions in the same file? I always liked that one could easily search in the changelog.
#3250 Comment 2:
From the devcall: we decided to merge this and remove the old changelog entries.
--------------------------------------------------------------
#3248 Comment 1:
@125m125 That is really an impressive amount of tests, good job!

There are two merge conflicts. Could you resolve those? Once that's done this PR is ready to go into master.
#3248 Comment 2:
And once again thanks!
--------------------------------------------------------------
#3246 Comment 1:
Technicaly I understand nearly nothing of what you are doing here. :) But If you need help with testing something I am your man.
#3246 Comment 2:
You useing "native messaging via powershell script" now? This doesn't run on Linux I think.
#3246 Comment 3:
Yes, for the moment I use a powershell script since the java version was way to unstable. The script itself is very simple https://github.com/JabRef/jabref/pull/3246/files#diff-5ec2abbb42e242133d0073e06942954c and essentially only converts console stream input to a command line parameter for JabRef. So something similar should be possible without problems using a bash script. 

A first working prototyp should be ready this week. Stay tuned!
#3246 Comment 4:
So, everything is working now for me and thus this PR is finally ready for review.

The installation routine is still more complicated than it has to be. Since I have absolutely no experience with our installer, may I ask @Siedlerchr @koppor to have a look at how the following things can be done automatically upon installation:
-  Copy [jabref.json](https://github.com/JabRef/jabref/blob/nativeMessaging/buildres/jabref.json), [JabRef.bat](https://raw.githubusercontent.com/JabRef/jabref/nativeMessaging/buildres/JabRef.bat) and [JabRef.ps1](https://github.com/JabRef/jabref/blob/nativeMessaging/buildres/JabRef.ps1) to the same directory as `JabRef.exe`.
- Make sure that the correct file name of the JabRef `.jar` file is specified in `JabRef.ps1` under `$jabRefJarFileName`.
- Run `REG ADD "HKEY_LOCAL_MACHINE\SOFTWARE\Mozilla\NativeMessagingHosts\org.jabref.jabref" /ve /d "C:\path\to\jabref.json" /f` from the console (with the correct path to the `jabref.json` file).

@buhtz Can you please try out the new version. Just follow the installation instructions outlined at https://addons.mozilla.org/en-US/firefox/addon/jabfox/. Thank you very much.

#3246 Comment 5:
@tobiasdiez Is there any "left over" of the Java tests? In the context of [ContextSwitcher](https://github.com/contextswitcher/contextswitcher/) I want to have messaging also implemented in Java. Would be helpful to learn whether one should go this way or not.
#3246 Comment 6:
Sure, all progress is there in form of old commits. The version at https://github.com/JabRef/jabref/pull/3246/commits/b24b5991b11e81567757fee6cea64da8fb77ad98 worked in principle.


#3246 Comment 7:
Maybe we can adapt the install instructions from here?
https://github.com/mdn/webextensions-examples/tree/master/native-messaging
#3246 Comment 8:
@Siedlerchr well, this is the current state. The instructions at https://github.com/JabRef/JabFox#installation-and-configuration work but they seem kinda cumbersome and I think the installer should automate them.
#3246 Comment 9:
Implemented the three Install4J requirements in HKEY_LOCAL_MACHINE\SOFTWARE\Mozilla\NativeMessagingHosts.
#3246 Comment 10:
There is an Architecture Violation:
```
   MethodSource [className = 'org.jabref.architecture.MainArchitectureTests', methodName = 'firstPackageIsIndependentOfSecondPackage', methodParameterTypes = 'java.lang.String, java.lang.String']
    => org.opentest4j.AssertionFailedError: The following classes are not allowed to depend on javafx ==> expected: <[]> but was: <[src/main/java/org/jabref/logic/remote/server/RemoteListenerServer.java, src/main/java/org/jabref/logic/remote/shared/Protocol.java, src/main/java/org/jabref/logic/remote/client/RemoteClient.java]>
```
#3246 Comment 11:
@tobiasdiez You wrote I should try out the new version. I assume you mean I should test it on Debian? This is not possible currently because there is a JabRef-Java-Bug specific to Debian unstable. But I will give you feedback as soon as possible.
#3246 Comment 12:
@buhtz Just ensure that [openjdk-jre-8](https://packages.debian.org/search?keywords=openjdk-8-jre) and [openjfx](https://packages.debian.org/sid/openjfx) are installed. Ensure that java8 is used to start the jar. I assume, you don't want to compile JabRef for yourself (refs https://github.com/koppor/jabref/issues/135), but just execute the JAR.

@buhtz You could also try to create a snapcraft image (see https://github.com/JabRef/jabref/issues/3121). However, this is work in progress and needs patience and testing. The devteam currently has no Ubuntu installation running and the time to get the snapcraft image working.
#3246 Comment 13:
@koppor Thanks for your hints. But this standard-hints are not working with Debian **unstable**. The problem is known by the Debianoids and they working on it. It is debian specific and not the fault of JabRef or some of the java components. I don't post bug-numbers here because there are a dozen of them. ;)
#3246 Comment 14:
@tobiasdiez I am not sure if I understand the steps correct.

I tried to test Windows 7 with JabRef **3.8**. Now I see this is not possible of course because your AddOn is based on JabRef **4.x**. Currently I have no way to upgrade to 4.x because this would corrupt my library on debian unstable based systems where 4.x is not available currently.

But I have some questions about the test.

Point "Make sure that the correct file name of the JabRef .jar file is specified in JabRef.ps1 under $jabRefJarFileName.". Do you mean line number 14? How should the syntax look like? Could you specifiy this (with an example) for peoople not aware of powershell syntax.
e. g. ?
`$jabRefJarFileName = "JabRef-3.8.2.jar"`

What is the `jabref.bat` for?

I have to install the JabFox addon first, right? But it is not available for Firefox Quantum. How should I deal with this?
![grafik](https://user-images.githubusercontent.com/11861496/38252722-32e50cc4-3755-11e8-9099-471d1af59b34.png)

#3246 Comment 15:
OT: @buhtz I skimmed through the latest reports I thought they are about **building** JabRef from source not just running the JAR using a JRE8. Especially [#893251](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=893251) reads like the user there tries to **compile** JabRef instead of just running a (binary) JAR from http://builds.jabref.org/ (e.g., http://builds.jabref.org/nativeMessaging/JabRef--nativeMessaging--latest.jar) by typing `java -jar JabRef--nativeMessaging--latest.jar` into the command line.

OT2: Reading https://casept.github.io/post/install-snapcraft-on-debian/, I think snapcraft can really be used on Debian unstable.

@buhtz <s>There is no JabRef 8.3.</s> Just test http://builds.jabref.org/nativeMessaging/JabRef--nativeMessaging--latest.jar. I am not sure whether JabRef really corrupts your library. JabRef does not change an entry if you did not do a change on it. I searched our [CHANGELOG.md](https://github.com/JabRef/jabref/blob/master/CHANGELOG.md) for "breaking", but there is no hit.

@buhtz As far as I understand the implementation, we need your help in converting the `.ps` script to a `.sh` script.
#3246 Comment 16:
@koppor I am using JabRef 3.8. The structure of the bib file is modfied *automatic* and without notification to the user when you open a with 3.8 generated bib-file witha 4.x JabRef. (what IMO is a bug!) I have to wait until JabRef 4.x is available on Debian unstable. This depends on the package maintainer there.

Snapcraft/Snappy is absolute no choice because of several reasons.

Before I can convert a script I have to understand what is going on here. I have absolutly no idea how this AddOn is working and for what this files are. @tobiasdiez If you really need my help I would suggest you contact me by mail in our native language. ;)
#3246 Comment 17:
@buhtz Maybe, you have save actions configured. - JabRef in Debian IMHO depends on https://github.com/JabRef/jabref/pull/3421, because of Java 9. Seeing the other TODOs, JabRef 4.x in Debian is going to happen in 6 months the earliest.
#3246 Comment 18:
@koppor Thanks a lot! You are my personal hero of the day 😃 
I tried it out, installed the new version of JabRef and the add-on - bang, that's it. Everything works out of the box. Perfect!

*So this PR is now really ready for review*

@buhtz Thanks a lot for your offer. I'll write you a mail tomorrow (or the next days, depending on when I find the time). https://github.com/JabRef/JabFox/issues/48 contains a bit more information on what has to be done, but is still sparse.

OT: When migrating from 3.8 to 4.2, JabRef indeed changes how groups are stored and, moreover, renames `review` to `comment`.
#3246 Comment 19:
RegKey fixed.

Current travis error:

```
Failures (1):
  JUnit Jupiter:RemoteCommunicationTest:commandLineArgumentMultiLinePassedToServer()
    MethodSource [className = 'org.jabref.logic.remote.RemoteCommunicationTest', methodName = 'commandLineArgumentMultiLinePassedToServer', methodParameterTypes = '']
    => Wanted but not invoked:
messageHandler.handleCommandLineArguments(
    ["my message
 and third"]
);
-> at org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentMultiLinePassedToServer(RemoteCommunicationTest.java:72)
Actually, there were zero interactions with this mock.
       org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentMultiLinePassedToServer(RemoteCommunicationTest.java:72)
```
#3246 Comment 20:
Thanks a lot for fixing the installer @koppor!

For some reason, some of the remote tests were failing on travis from time to time. I've no idea why and hence disabled these tests on travis now.
#3246 Comment 21:
Maybe, because of parallel builds running on the same machine.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3243 Comment 1:
Hi @125m125, as I see you have some troubles with our checkstyle rules. I recommend you to use our IDE config files from https://github.com/JabRef/jabref/tree/master/config. Which IDE are you using? We recommend IntelliJ IDEA or Eclipse.
You can see if the tests a pass by calling `gradle check`. If you only want to check for the code style rules, you can call `gradle checkstyleMain`.

If you have any questions, feel free to ask them at slack: https://jabref.slack.com
#3243 Comment 2:
I am using Eclipse and just had to format a file. Because the saveAction is set to only reformat edited lines a missing newline in the imports wasn't corrected. Also thanks for pointing out gradle check. I somehow missed that command.
#3243 Comment 3:
@125m125  If you use eclipse, just run` gradlew eclipse `to import the correct code formatting rules 
#3243 Comment 4:
Thanks for the feedback. I integrated the requests with the last commit.
I also changed the PdfXmpImporter to return false when checking the format instead of throwing an exception to prevent the need for special treatment and make it consistent with the PdfContentImporter.
#3243 Comment 5:
Ok, then I'll add this to the 4.1 milestone.
#3243 Comment 6:
I think the error message comes from
https://github.com/JabRef/jabref/blob/ae6d01be46c96ef57e9871dfeb208ab0b7aab295/src/main/java/org/jabref/logic/importer/fileformat/MrDLibImporter.java#L53-L60
In my opinion, you can just delete these `Logger.log` statements (since its quite expected that a file in a wrong format is passed to `isRecognizedFormat` and this importer is not used outside of internal code anyways).
--------------------------------------------------------------
--------------------------------------------------------------
#3241 Comment 1:
Thank you for the contribution @derebaba! This look very good now and will be merged as soon as another maintainer gives his OK.
We have quite some further open issues that wait for fixing, so feel free to have a look at those. Meanwhile you can also join us at slack if you have questions.  https://jabref.slack.com/
#3241 Comment 2:
I have merged this and moved the changelog entry to the right category.
--------------------------------------------------------------
--------------------------------------------------------------
#3238 Comment 1:
I have fixed code according those Codacy remarks that were feasible. The rest is as follows:

- "Avoid really long classes: public class BracketedExpressionExpander {...":
-- actually, the class BracketedExpressionExpander is **shorter** than the BibtexKeyPatternUtil.java which it originated from, so the split in two classes was an overall improvement of this parameter ;) The rest would require separate refactoring, IMHO.

- "Avoid really long methods.", "The method generateInstitutionKey() has an NPath complexity of 10566908" and the friends:
-- These methods were ported from BibtexKeyPatternUtil.java; their refactoring would be a separate issue. Also, the code there is pretty straightforward (I had no problem to read an comprehend it), so the Codacy complain might be too blunt.

- "Avoid unused private fields such as 'javafxPanel'.":
-- This is hack which I could not avoid; documented in comments. Any suggestions ow to improve that are welcome.

- "Avoid unused constructor parameters such as 'layoutPrefs'.":
-- These are left in place so that the old interface of MoveFilesCleanup and RenamePdfCleanup does not change; the old methods are marked as @Deprecated. If you approve that the LayoutFormatterPreferences are indeed no longer desired for the file maintenance functionality, I will remove the unused constructor parameters and drop import of LayoutFormatterPreferences.
#3238 Comment 2:
Wow, what a great PR! We are shortly before releasing JabRef 4.0 (hopefully this weekend), thus it will only be part of the first minor release after 4.0. Nevertheless, thanks for the efforts, and I'll start reviewing this soon!

#3238 Comment 3:
On 2017-09-29 12:02, Jörg Lenhard wrote:
> In .gitignore
> <https://github.com/JabRef/jabref/pull/3238#discussion_r141811777>:
> 
>> @@ -1,3 +1,6 @@
> +# Ignore local Make configuration files:
> +Makeconf
> 
> Out of curiosity: Did you really use make in some way while implementing
> this PR?

Yes :). GNU Make is my favourite tool since decades, and sometimes its
just faster for me to get things running with it. So I made myself a
small Makefile with 'make run/make test' targets for CLI-testing the
classes I wrote. Also, Eclipse/Gradle are *sooo* RAM-hungry... my 4GB
laptop swaps like hell :) when running them.

As a side note, we use GNU Make for testing our Unix/Linux CLI tools
extensively, and for organising computations. But for JabRef, I guess,
there is no sense to have a also Make-based tester, your 3000+ JUnit
tests are the impressive lot and should do the job. Therefore I removed
the Makefile from my final pull request; I can remove the ignore
patterns too if you want :)

More one the PR code and the comments in a short while...

Regards,
Saulius

-- 
Dr. Saulius Gražulis
Vilnius University Institute of Biotechnology, Saulėtekio al. 7
LT-10257 Vilnius, Lietuva (Lithuania)
fax: (+370-5)-2234367 / phone (office): (+370-5)-2234353
mobile: (+370-684)-49802, (+370-614)-36366

#3238 Comment 4:
On 2017-09-29 12:02, Jörg Lenhard wrote:
>   * Please clarify a little more about what happened to the
>     |LayoutPreferences| and why it is safe to remove them at some
>     points. Does this not break current behavior? Maybe you've already
>     explained that, but please bear with me and do it again.

Sure; I did not explain this point fully and will elaborate below.

The short answer would be: in the code before the suggested PR, file
name patterns were handled by a LayoutHelper, and that class has
LayoutFormatterPreferences argument in its constructor. The suggested PR
code uses BracketedExpressionExpander (or BacketedPattern as Tobias
suggest to rename it), which is made by splitting the
BibTexKeyPatternUtil into two classes. The BibTexKeyPatternUtil did not
require LayoutFormatterPreferences, and neither does
BracketedExpressionExpander.

The longer discussion would be as follows: in the current master (since
I guess JabRef 4.0) RegExpBasedFileFinder uses BibtexKeyPatternUtil to
generate regexps for autolinking files, but the Import file pattern uses
LayoutHelper to generate imported file names. Autodownloading was one of
the main reasons for us to switch to JabRef 4.0, but we used
[year]_[auth]_[firstpage].*\\.pdf pattern for file autolinker (with
\> 4000 files in a tree), and the downloader offered only the "\bibtexkey"
and "\bibtexkey - \begin{title}\title\end{title}" patterns; so the
downloaded files were not found by autolinker :(.

I have tried the "\year_\auth_\firstpage" as a download pattern, but it
turned out that underscore (and hyphen) were regarded as letters, so my
pattern did not work, and I could not find a way to escape the
underscore ("\year\_\auth\_\firstpage" did not work either...). I
confirmed that removing '_' and '-' from the LayoutHelper did allow me
to use the "\year_\bibtexkey_\pages" pattern, after the change:

src/main/java/org/jabref/logic/layout/LayoutHelper.java:
-      if (!Character.isLetter((char) c) && (c != '_') && (c != '-')) {
+      if (!Character.isLetter((char) c)) {

(see also my comments at
https://github.com/sauliusg/jabref/commit/477db399a3d0b888d557127850c216533e0e62c0#diff-2d48ba893857485e0758e284be6ba290)

However, such change could potentially break the functionality of
layouts for generating reference lists, and that would be disastrous. So
I decided not to pursue this line. Instead, I wrote a discussion page
offering to unify pattern syntax for bibtexkeys, file linking regexps,
import file directories and import file directories. Indeed, anyone who
sees "Import|Filename format pattern" in "Preferences" will immediately
assume that the same pattern syntax as in "BibTeX key generator|Default
pattern" is used, and will be surprised if that does not work.

Moreover, at the time of branching "Filename format pattern" worked
reasonably only with the two provided default patterns, and "File
directory pattern" seemed to ignore patterns altogether; thus, I think
few people will be using the layout-style ("\bibtexkey - \title")
patterns, and changing syntax to the equivalent "[bibtexkey] - [title]"
would not hurt much, especially if we implement, as you propose, a
PreferenceMigration tool. The benefits of using the same language for
all patterns are obvious and are acknowledged by Tobias as well :).

Programmatically, everything fits together well -- all interfaces match
and all tests pass. The end user, of course, will see the difference in
behaviour. On one hand, there is an improvement: one can use the same
"[auth][year]" pattern or similar in all Preference fields; one can also
use similar patterns for directories, like "PDF/[year]/[auth]" and get
the files nicely organised on the spot.

On the other hand, the "bracketed expressions" are at the moment weaker
than layouts. For example, there is no conditional expansion, so there
is no equivalent of the "\begin{title} - \title\end{title}" construct
(where "-" is only inserted if the title is present). For me, this does
not seem to be a show stopper, much less so than discrepancies in
bibtexkey and import file expressions. I see however that some people
might want this functionality.

I would therefore suggest the following strategy: one could integrate
the current bracketed expressions as they are now, and I promise write
extensions of these expressions which support conditional expansion and
nested expressions, e.g.:
[title? - ] would expand to " - " only if title is present, and the
"\bibtexkey\begin{title} - \title\end{title}" would become
"[bibtexkey][title? - ][title]" (quite readable to my taste...). Another
obvious expansions would be:

[author?auth][!author&&editor?ed. [editor]] and so on.

Nested booleans and nested bracketed expressions would be supported; I
would suggest a simple recursive descent parser for this (a similar
thing is already started in the LayoutHelper :).

I could offer a PR with this functionality, and you have a look and if
you decide to go for it, JabRef would have full expression support in
both BibTeX keys, file patterns and directory patterns.

I hope this clarifies the PR, and sorry for the long text...

>   *There's some commented out code that you should remove.

Will do that.

>   * You are changing preference-related stuff here, e.g. moving from
>     |\entrytype| to |[entrytype]| in the CleanupPreferences and more.
>     From what I can see that means that you should write a preference
>     migration that changes older preferences a user might have to your
>     new format automatically. Please have a look at
>     |org.jabref.migrations.PreferencesMigration| and implement a
>     migration for your changes.

This is an important point which I have overlooked! Thanks for the hint,
I'll look at the class and implement a migration. I'll come back to you
if I have questions regarding migration strategies.

Regards,
Saulius

-- 
Dr. Saulius Gražulis
Vilnius University Institute of Biotechnology, Saulėtekio al. 7
LT-10257 Vilnius, Lietuva (Lithuania)
fax: (+370-5)-2234367 / phone (office): (+370-5)-2234353
mobile: (+370-684)-49802, (+370-614)-36366

#3238 Comment 5:
Hi,

On 2017-09-29 12:02, Jörg Lenhard wrote:
> In src/main/java/org/jabref/logic/util/io/FileNameCleaner.java
> <https://github.com/JabRef/jabref/pull/3238#discussion_r141814168>:
> 
>> @@ -18,18 +18,16 @@
>              10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
>              20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
>              30, 31, 34,
> -            42, 47,
> 
> Why did you remove 47 here? Why is it no longer an illegal char? This
> needs a good justification or should be reverted.
> 
> ------------------------------------------------------------------------
> 
> In src/main/java/org/jabref/logic/util/io/FileNameCleaner.java
> <https://github.com/JabRef/jabref/pull/3238#discussion_r141814198>:
> 
>>              58,
>              60, 62, 63,
> -            92,
> 
> Same as for 47 above.
> 
> ------------------------------------------------------------------------

The removed codes are for the ASCII "/" and "\" chars, the directory
name separators for Unix-like systems and for Windows.

Before, they were considered illegal chars everywhere, and directory
patterns like "PDF/[auth]" would yield directories "PDF_Author", clearly
not a desired result.

I have thus introduced another function, cleanDirectoryName(), that uses
the shortened table ("/" and "\" chars are now legal in directory
names). In file names, the "/" and "\" chars are illegal, and
cleanFileName() checks them explicitly in addition to the table chars.

The cleanDirectoryName() is used to check directory names in file mover
cleanup; cleanFileName() is used, as before, to check PDF file names
after renaming. The behaviour of cleanFileName() should not have changed
(regression tests pass), and the cleanDirectoryName() is used only in
<strikeout>one place</strikeout> two places in the code, to check directory names of the moved files (an
there are two tests to check its functionality).

I opted to have one common table and two functions to preserve SPOT
(single point of truth) for the character list, which is extensive and
in addition needs special maintenance (needs to be sorted). Actually, we
should have test for that, shouldn't we?

Hope this is OK. I'll comment this in the source.

Regards,
Saulius

-- 
Dr. Saulius Gražulis
Vilnius University Institute of Biotechnology, Saulėtekio al. 7
LT-10257 Vilnius, Lietuva (Lithuania)
fax: (+370-5)-2234367 / phone (office): (+370-5)-2234353
mobile: (+370-684)-49802, (+370-614)-36366

#3238 Comment 6:
Hi,

On 2017-09-30 11:44, Tobias Diez wrote:
> You favor method b) while I would use a). There are good arguments for
> both ways. Lets make a deal: I'll present my reasoning for a) and if I
> can convince you, you change the code accordingly. If not then the code
> stays like it is right now and I give my +1 for merge 😸

Agreed :)

>   * In principle, we can do a pre-processing of the pattern in the
>     constructor and then reuse the |expand| method for different entries
>     to save time.

Pre-processing is optimisation, and our interface design decisions
should not crucially depend on (hypotetical) optimisations, I would say.
Code readability, IMHO, is more important.

Also, you can do the proposed optimisation also with the current
interface, say by using memoisation.

And finally, I can turn your argument on its head an day that I can do
reprocessing with the BibEntry to save processing time with different
patterns (and then apply my own counter-argument to it (does it get
recursive at this stage? :))

So I think No1 is a weak argument, but:

>   * You can create the |BracketedPattern| from the string in some place
>     (say in the preference class) and then pass it to other methods (for
>     example, the rename cleanup operation). Then only the preference
>     class needs to know how to deserialize the pattern from a string,
>     while the other methods in the chain only care that the are given a
>     |BracketedPattern|. (Background: there was a time, when strings
>     where used for everything in JabRef: File names, entry field names
>     and values, preferences, ... literally everywhere. Since about 2
>     year we are now trying to encapsulate more and more of these strings
>     in special classes, e. g. |AuthorList| or dedicated preference
>     classes like |LayoutPreferences|. I would like to see the same for
>     the pattern.)

This I buy, I think its a serious consideration.

>   * If we should decide to change or replace the pattern format, one
>     would only need to change the places where the conversion from
>     string to the pattern happens (which is considerably less overhead
>     then all the places where the pattern is expanded).

Agreed, this is an argument in favour of abstraction of patterns from
plain strings.

>   * If a class is named |BracketedPattern| I would assume that it
>     encapsulates a pattern. 😈

:) Sure, but this is the name you suggested in the first place :) Mine
was ...Expander, you remember? Anyway, the names should go after design,
not the other way round, shouldn't they?

So, to sum up, I think arguments 2) and 3) (1-based) are really in
favour of your suggestion. So I implement 'public
BracketedPattern(String Pattern)' and '...expand(bibentry)'.

Regards,
Saulius

-- 
Dr. Saulius Gražulis
Vilnius University Institute of Biotechnology, Saulėtekio al. 7
LT-10257 Vilnius, Lietuva (Lithuania)
fax: (+370-5)-2234367 / phone (office): (+370-5)-2234353
mobile: (+370-684)-49802, (+370-614)-36366

#3238 Comment 7:
Hi,

On 2017-09-30 11:44, Tobias Diez wrote:
> a) The pattern as an argument to the constructor and the context
> information as arguments to the |expandBrackets| method.
> b) The other way around, that is the context information as arguments to
> the constructor and the pattern as an argument to the |expandBrackets|
> method.

I have implemented the (a) variant of the BracketedPattern interface.

Please note, however:

- I had to implement a default constructor, since BibtexKeyPatternUtil
extend BracketedPattern and BibtexKeyPatternUtil so far only has a
default constructor; I do not want to refactor even further the use of
BibtexKeyPatternUtil -- let's leave it for the next PR if needed :)

This means that at the moment there is a possibility to construct a
BibtexKeyPatternUtil and BracketedPattern instance without a pattern,
and this will later trigger a NullPointerException if used indiscriminately.

- For the same reason I have left the expandBrackets(...) static method
– it is used by static methods in BibtexKeyPatternUtil and possibly
elsewhere. Again, if you want to get rid of those, more refactoring and
testing would necessary.

At the moment, however, all functionality that was intended for this PR
works, is tested, adheres to JabRef coding standards (I hope :).

Regards,
Saulius

-- 
Dr. Saulius Gražulis
Vilnius University Institute of Biotechnology, Saulėtekio al. 7
LT-10257 Vilnius, Lietuva (Lithuania)
fax: (+370-5)-2234367 / phone (office): (+370-5)-2234353
mobile: (+370-684)-49802, (+370-614)-36366

#3238 Comment 8:
okay, this looks good to be tested with real users. since we release 4.0 today, I would kindly ask you to fix the conflict in the changelog, then I would merge this. 
--------------------------------------------------------------
#3233 Comment 1:
Hi @derebaba 

Thanks for your pull request! Your contribution is certainly very welcome and looks good overall.

I still have two points that should be addressed:
 - You add two new localization entries here. The way in which you use the localization strings in the code is fine, but you need to add the keys to the language files, otherwise the build will fail. To do so, you need to add the keys manually to the English file `jabref/src/main/resources/l10n/JabRef_en.properties` and then execute `./gradlew localizationUpdate` on the command line, which will synchronize the keys in all files. There's also a pretty good description of that when you run the tests and the localization test fails.
 - Apart from that, you are using the older file api `java.io` for doing the rename check. We try to get rid of that and try to use the new file api `java.nio` instead. I would expect something like `Files.isWritable()` to do the trick. Can you please adjust your solution to use the NIO API?

#3233 Comment 2:
Hi @lenhard 

Thanks for your feedback. Are the keys ordered in any way in properties file? Or should I add new keys at the end?
#3233 Comment 3:
@derebaba  You should first check if there is already a key with the same/or similar text which you can reuse. Otherwise add it to the end and.
#3233 Comment 4:
I synchronized the keys and removed the check which used the old api. However, `Files.isWritable()` returns true even if the file is open in another process. I searched a lot but I don't think the check is possible with the new api. Therefore, I moved the error dialog code to the catch block in FileUtil.java.
--------------------------------------------------------------
--------------------------------------------------------------
#3224 Comment 1:
you have to be careful when testing preferences, it can has side effects with the actual stored preferences,  that's why we try to mock them away in tests 
#3224 Comment 2:
@sammann-fnordbedarf-de Some time has passed since the last changes. Any chance of addressing the review comments and getting this ready to merge?
#3224 Comment 3:
# [Codecov](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=h1) Report
> Merging [#3224](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=desc) into [master](https://codecov.io/gh/JabRef/jabref/commit/821067364e02e97e6b5c9cf804c41e742d89bd71?src=pr&el=desc) will **increase** coverage by `0.21%`.
> The diff coverage is `33.33%`.

[![Impacted file tree graph](https://codecov.io/gh/JabRef/jabref/pull/3224/graphs/tree.svg?height=150&token=GoCYT97xQP&width=650&src=pr)](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree)

```diff
@@             Coverage Diff             @@
##             master   #3224      +/-   ##
===========================================
+ Coverage     28.48%   28.7%   +0.21%     
- Complexity     5617    5688      +71     
===========================================
  Files           967     976       +9     
  Lines         53775   53882     +107     
  Branches       7002    6994       -8     
===========================================
+ Hits          15320   15469     +149     
+ Misses        37147   37062      -85     
- Partials       1308    1351      +43
```


| [Impacted Files](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree) | Coverage Δ | Complexity Δ | |
|---|---|---|---|
| [...ava/org/jabref/preferences/PreviewPreferences.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL3ByZWZlcmVuY2VzL1ByZXZpZXdQcmVmZXJlbmNlcy5qYXZh) | `59.45% <33.33%> (+59.45%)` | `7 <1> (+7)` | :arrow_up: |
| [...ava/org/jabref/model/metadata/ContentSelector.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL21vZGVsL21ldGFkYXRhL0NvbnRlbnRTZWxlY3Rvci5qYXZh) | `56.25% <0%> (-43.75%)` | `5% <0%> (+2%)` | |
| [...abref/logic/importer/fileformat/MsBibImporter.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2xvZ2ljL2ltcG9ydGVyL2ZpbGVmb3JtYXQvTXNCaWJJbXBvcnRlci5qYXZh) | `83.33% <0%> (-9.53%)` | `7% <0%> (ø)` | |
| [...c/main/java/org/jabref/model/entry/LinkedFile.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL21vZGVsL2VudHJ5L0xpbmtlZEZpbGUuamF2YQ==) | `37.25% <0%> (-8.7%)` | `11% <0%> (ø)` | |
| [.../main/java/org/jabref/logic/l10n/Localization.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2xvZ2ljL2wxMG4vTG9jYWxpemF0aW9uLmphdmE=) | `76.27% <0%> (-3.73%)` | `16% <0%> (+6%)` | |
| [...ava/org/jabref/logic/cleanup/RenamePdfCleanup.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2xvZ2ljL2NsZWFudXAvUmVuYW1lUGRmQ2xlYW51cC5qYXZh) | `54.32% <0%> (-3.58%)` | `12% <0%> (+1%)` | |
| [src/main/java/org/jabref/cli/XMPUtilMain.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2NsaS9YTVBVdGlsTWFpbi5qYXZh) | `37.5% <0%> (-2.78%)` | `6% <0%> (-1%)` | |
| [...rg/jabref/logic/util/io/RegExpBasedFileFinder.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2xvZ2ljL3V0aWwvaW8vUmVnRXhwQmFzZWRGaWxlRmluZGVyLmphdmE=) | `75.3% <0%> (-2.7%)` | `19% <0%> (-5%)` | |
| [...g/jabref/logic/util/io/CiteKeyBasedFileFinder.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2xvZ2ljL3V0aWwvaW8vQ2l0ZUtleUJhc2VkRmlsZUZpbmRlci5qYXZh) | `75% <0%> (-1.75%)` | `12% <0%> (+1%)` | |
| [.../java/org/jabref/gui/util/DefaultTaskExecutor.java](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree#diff-c3JjL21haW4vamF2YS9vcmcvamFicmVmL2d1aS91dGlsL0RlZmF1bHRUYXNrRXhlY3V0b3IuamF2YQ==) | `13.88% <0%> (-1.74%)` | `3% <0%> (ø)` | |
| ... and [118 more](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=tree-more) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=footer). Last update [8210673...86f7948](https://codecov.io/gh/JabRef/jabref/pull/3224?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).

#3224 Comment 4:
@lynyus You wrote "Testing JabRef is more than line coverage." from which I conclude, that it is at least line coverage. To my knowledge, there is no document to "HowTo Test" or QA yet, so I started with the easiest at the lowest point, while looking at the code. If this is to your dislike, I apologize and am also fine with removal of these tests. 

@Siedlerchr I am interested in mocking away ```VersionPreferences``` and argue for adding examples in its test class for others to see how to do it. In my opinion, the respective testclass would be an intuitive to place to have such mocking-show-cases. Could you please point me to a "nice" mocking case, I would then like to implement "how-to-mock-this-class"-test.   

@lenhard I beg your pardon, somehow testing JabRef UI caught my attention and I forgot about this ticket. I added assertions and argued for keeping simple tests. Please proceed with this ticket as you choose. 

#3224 Comment 5:
@sammann-fnordbedarf-de If I read the comments correctly, then this is not yet in a mergable state, but you are the only one with the access rights to modify the branch since it is your fork. So unless you address the comments, we can only close it or copy your code to a new branch on which we can work.

@lynyus @Siedlerchr What is your opinion here? Just close or copy over to new branch?
#3224 Comment 6:
@sammann-fnordbedarf-de  Regarding mocking: Have a look at the Cleanup Test classes, e.g. RenamePDF or MoveFiles leanup. Another example where I had to use mocking intensive was recently in the AutoSetFileLinksUtilTest class 
#3224 Comment 7:
But here no mocking is needed since the preference classes are actually the subject of the test. But since they do not involve `JabRefPreferences` there shouldn't be any side effects.
#3224 Comment 8:
I am closing this now. We have spent much time with these "improvements" and discussions that I have the feeling that this PR is not going into a truly useful direction any time soon.
--------------------------------------------------------------
--------------------------------------------------------------
#3221 Comment 1:
Thanks for your contributions!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3214 Comment 1:
Thank you for your valuable feedback, I learned a lot and implemented all change requests
--------------------------------------------------------------
#3212 Comment 1:
Thanks, @mlep! 
--------------------------------------------------------------
#3211 Comment 1:
This work fine and includes all the requested changes from the previous pull request with one caveat.  If the file being overridden is related to a different entry and has different case, such as Entry 1 = [abc] renamed to [def], Entry 2 = [DEF], then the 2nd entry file association will target a now non-existing file.  Its possible to get around this by searching the database for any entries that have the old filename [DEF] and changing the association to the new filename, but I dont know if thats something desireable so I decided to push this as is for now.
#3211 Comment 2:
Ok I changed to an Optional and removed !Files.exists(targetFilePath) as its redundant.  I'm still getting the hang of git and egit so hopefully the merge didnt mess anything up.
#3211 Comment 3:
@Andrew-Lev  I stick to git and git gui from command line. A lot easier than struggling with the eclipse git client 
#3211 Comment 4:
Thanks, this looks really good now! 
--------------------------------------------------------------
#3210 Comment 1:
The problem is that the changes in the underlying `LinkedFile` are not propagated to the list `LinkedFilesEditorViewModel.files` so that the serialization https://github.com/JabRef/jabref/blob/2c5e7f2940481d66d50573e6fc40858f55b1cc47/src/main/java/org/jabref/gui/fieldeditors/LinkedFilesEditorViewModel.java#L74-L82 is never called. By the way, also changes to the file name or icon do not trigger an update and thus are not serialized.

As a solution, I propose to convert the data fields in `LinkedFile` to real properties, add `Observable[] getObservables()` to `LinkedFile` and return these observables here:
https://github.com/JabRef/jabref/blob/2c5e7f2940481d66d50573e6fc40858f55b1cc47/src/main/java/org/jabref/gui/fieldeditors/LinkedFileViewModel.java#L109-L111

Ps: Can you pls add a screenshot how the file editor now looks like with the description added (especially when the file link is relatively long). Thanks.
#3210 Comment 2:
@tobiasdiez  I did as you suggested, but still does not work.  I think it has something to do with the LIstProperty, but I am not that deep inside javafx binding stuff to know why it is not synced
#3210 Comment 3:
Yeah! Got it now!
![grafik](https://user-images.githubusercontent.com/320228/30381786-b3f80c6e-989d-11e7-95d8-c7b4ddcf1b84.png)

#3210 Comment 4:
I just discovered that there is additional space between the icon and the file name if the file doesn't have a description. Can you please fix this. Thanks!
#3210 Comment 5:
Fixed in master.
--------------------------------------------------------------
--------------------------------------------------------------
#3205 Comment 1:
@steph37tours, there are some minor code style issues. I recommend you to use https://github.com/JabRef/jabref/blob/master/config/eclipseJabRef.xml as you eclipse code style config file. This should format most things correctly.

Also you run `gradlew check` on a console before pushing a commit. In your case a checkstyle check has failed:
```
:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/org/jabref/gui/help/AboutDialogViewModel.java:11: 'org.jabref.gui.AbstractViewModel' should be separated from previous imports. [ImportOrder]
 FAILED
```

I know this is a lot to learn, feel free to ask for assistance in the slack channel.
--------------------------------------------------------------
#3204 Comment 1:
For your first PR you did all right 🍾.  If you want to further contribute to JabRef, I would suggest looking at the Wiki here https://github.com/JabRef/jabref/wiki where we have collected some JabRef specific things regarding the architecture and also some Java tips
#3204 Comment 2:
I'll merge this now, thanks for the contribution!  🎉 
Have a look at the other [issues](https://github.com/JabRef/jabref/issues), those labeled with [beginner](https://github.com/JabRef/jabref/issues?q=is%3Aissue+is%3Aopen+label%3Abeginner) are usually easier to fix if you don't have much prior experience with JabRef!
--------------------------------------------------------------
#3203 Comment 1:
Ok, I managed to get this done and I think I've addressed everything as the reviewers desired. It can be merged from my point of view. So please have a look and merge if you think it is ok.
#3203 Comment 2:
One more try :) Now, only ExplicitGroups are removed from entries, keyword-based groups are kept. I hope this is the last missing puzzle piece.
#3203 Comment 3:
Sorry for being pestic, but with this implementation keyword groups that are children of the deleted explicit group are still handled wrongly. I directly committed a fix. If you are fine with it, you have my ok for merge.

By the way, in order to convince you about the testability of Javafx code, you are invited to write a test covering the new behavior... 😈  
#3203 Comment 4:
Thanks, challenge accepted :) I did not only add one test, but three.

I will merge when the build goes through.
--------------------------------------------------------------
#3202 Comment 1:
Hey @snisnisniksonah, is this PR ready for review? If so, please notify us by adding the label and remove the [WIP] tag from the title
--------------------------------------------------------------
#3201 Comment 1:
I got a minor issue: In the default setting of JabRef, no auto completion happens.

![grafik](https://user-images.githubusercontent.com/1366654/30148558-4a32004e-93a4-11e7-83d9-410321a73350.png)

Option A: Add the list of fields where we support referencing other entries to that list.
Option B: Always do autocompletion in that case

I vote for B, because that automcompletion "only" references BibTeX keys and we have no issues with name rewriting etc.



#3201 Comment 2:
@lenhard  You have to press 2 times enter: First enter the autcomplete value is taken in the field, second time enter the tag field rendering is created from it and then it's  also visible in the bibtex source tab and therefore in the database. So 
#3201 Comment 3:
@Siedlerchr A thanks, it works as you said. 

I guess it would be cool if JabRef somehow lets you know that the crossref data is not really complete and will be deleted. Just to avoid this surprise. But I don't know how this has been before and hence the current solution is good enough for me as well.
#3201 Comment 4:
@lenhard  Yes, that's a bit weird, but I have no idea how to solve this. I will add a message in the changelog 
#3201 Comment 5:
The only thing which is currently not implemented is Jump to entry which seems to be not possible when I look at the code comment. Otherwise it's ready to go from my side
#3201 Comment 6:
I now added the new keys to default and adjusted the migration. I also added a comment. @koppor 
--------------------------------------------------------------
#3200 Comment 1:
TODO:  show attach file dialog 
//Edit: I tried to this, but I am getting problems with swing/javafx threading which I can't solve.
So I would postpone this

#3200 Comment 2:
Tried out locally. It works.

The dialog missing is the following one:

![grafik](https://user-images.githubusercontent.com/1366654/30138607-884ab780-9369-11e7-9671-2cd51b1aefef.png)


#3200 Comment 3:
I'd like to offer as much as possible functionality of 3.8.2. 😇 
--------------------------------------------------------------
#3198 Comment 1:
Hey @steph37tours, this goes into the right direction. I think the test fails in the right places, but the message is quite big.
What would be better is something like this:
`Found an invalid character in the <language> localization of <JabRef | Menu>: The <key | value> <actual string> contains a space!`

This would require to iterate over all property strings, similar as in `LocalizationConsistencyTest.keyValueShouldBeEqualForEnglishPropertiesMenu()`.
Please give it another shot.
#3198 Comment 2:
Thank you @Lynyus. I see what you mean. I'll correct this tomorrow if it's ok :-).

Ok, I am on actually.
#3198 Comment 3:
I am unsure whether JabRef really cannot handle underscores. I once looked at the code and I think, we could get rid of using the underscores and always use spaces. Could you check that? I think `_` is so 2005 😇 
#3198 Comment 4:
Wow @koppor (;
#3198 Comment 5:
@koppor to make this crystal clear: Do we need to fix the underscores or not? 
In https://github.com/JabRef/jabref/blob/ebbeb1d249edf7134abf92d24c2031ae54d19881/src/main/java/org/jabref/logic/l10n/LocalizationKey.java#L14 there is a comment that fixes the spaces, but not the `#`, `!`, `=`, and `:`.
So is there need to pursue this PR, or not?
#3198 Comment 6:
@koppor  @lynyus  That is specified in the java docs:
http://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load(java.io.Reader)

> .A comment line has an ASCII '#' or '!' as its first non-white space character; comment lines are also ignored and do not encode key-element information
In addition to line terminators, this format considers the characters space (' ', '\u0020'), tab ('\t', '\u0009'), and form feed ('\f', '\u000C') to be white space. 

> The key contains all of the characters in the line starting with the first non-white space character and up to, but not including, the first unescaped '=', ':', or white space character other than a line terminator

#3198 Comment 7:
Then, we can have the values without underscores? That would improve the language files a lot!

![grafik](https://user-images.githubusercontent.com/1366654/30104338-a37f8a68-92f5-11e7-84ac-ff17463447d5.png)

#3198 Comment 8:
The question is, of course, why they were introduced in the first place. Is there any pitfall if we remove them?!? 
#3198 Comment 9:
From what I understand the key can't contain whitespaces or the first whitepsace would be recognized as spearator in the key:
`A key is all the characters up to the first whitespace or a key/value separator `
http://kajabity.com/kajabity-tools/java-properties-classes/the-java-properties-file-format/
#3198 Comment 10:
I just push a change. I hope it is what you want. I've got difficult to test it.
And I'm not sure for the "throws IOException" Eclipse ask  me for remove it.
Thank you for help and permit to participate. It was very interesting for me.
#3198 Comment 11:
So if you change the Assertions to assertFalse or negate the condition the tests should be operational and we can see if they pass the test on our build server
`assertFalse("Found an invalid character in the " + lang + " localization of " + bundle + " : " + entry.getValue().toString() + " At key : " + entry.getKey().toString() + " contains a space!", entry.getValue().toString().contains(" "));`

#3198 Comment 12:
Yes, I change and commit. I found spaces in pt_BR localization :

java.lang.AssertionError: Found an invalid character in the pt_BR localization of JabRef : Normalizar para o formato_de_nome_do_BibTeX At key : Normalize_to_BibTeX_name_format contains a space!



#3198 Comment 13:
So is-it done now for me ?
#3198 Comment 14:
Can you push your commit please? (; You'll have to pull first, as I have already fixed the localization files on your branch.
#3198 Comment 15:
sorry, it doesn't want to push ! It seems I have to pull your change before. I 'm looking at...
#3198 Comment 16:
I'm sorry I can't push !
I've got the error that the branch countain work I doesn't have in local.
I try git pull
git pull --rebase without success for instance !

I'm looking for always. You can help !
#3198 Comment 17:
on the current branch try the following:
`git fetch`
`git merge`
`git push`
#3198 Comment 18:
git merge said not remote branch for the current

I'm sorry to be so beginner...
#3198 Comment 19:
git merge Localisation_test_for_invalid_Strings 
said up-to-date
#3198 Comment 20:
Hm. Maybe try a GUI client like Github Desktop to figure everything out. Or clone the repository again and apply your changes again.
#3198 Comment 21:
I'm sorry, I just clone and try to push again with the same error message. I continue to look for a solution.
#3198 Comment 22:
I don't know what to do.
Into Eclipse, the menu team/pull give to me an error "Missing commit"
#3198 Comment 23:
perhaps I have to do another fork ?
#3198 Comment 24:
It seems it's ok now. I don't know what happen exactly.
Really thank you for this first experience, thank you for the time you share with me to help.

#3198 Comment 25:
I'll merge this now, thanks for the efforts, @steph37tours! I hope you have learned something and are still eager to contribute. (;
How about this? https://github.com/JabRef/jabref/issues/2942 It's a small feature in the UI, and everybody would be quite happy if somebody finds time to implement it!
#3198 Comment 26:
Thank you very much @lynyus !
I learn many things with this experience.
So I agree to continue ! :-)
#3198 Comment 27:
Good to see that you won the git war :). -- For learning git, I would recommend the tutorials listed at https://github.com/dictcp/awesome-git.
#3198 Comment 28:
Thank you @koppor for the link ! I'll study it !
--------------------------------------------------------------
#3196 Comment 1:
@Siedlerchr Thank you for the hint. I hope, I got the Optional thingy right

    Globals.getKeyPrefs().get(KeyBinding.AUTOMATICALLY_LINK_FILES).map(b -> " (" + b + ")").orElse(""))
--------------------------------------------------------------
#3195 Comment 1:
Cool stuff! Thanks for your contribution! Will check and test it tomorrow
#3195 Comment 2:
There are free cloud offerings to test - see http://help.jabref.org/en/SQLDatabase#try-it-out.

I am currently not using the shared database feature, but I think, this fixes https://github.com/JabRef/jabref/issues/2284 and presumably also https://github.com/JabRef/jabref/issues/2647.

@g-mos, @tgkolda,  @Fab7c4 could you comment whether the JabRef build at http://builds.jabref.org/bg-shared-db-sync/ works for you?
--------------------------------------------------------------
#3194 Comment 1:
@lenhard Hm, that's odd. I will try to look at it. But I think it could be possible that there is no database changed event fired
#3194 Comment 2:
@lenhard  The new file ordering is now also changed in the bibtex data
#3194 Comment 3:
I have following file entry in my bib entry:

    file      = {:Cla2008 -The Birth of Model Checking.pdf:PDF},

It is rendered like this:

![grafik](https://user-images.githubusercontent.com/1366654/30073000-75132646-926c-11e7-84ae-da043642c351.png)

Does this come from this PR?
#3194 Comment 4:
I've tested it briefly with an entry with two file links and there reordering was possible and also stored between sessions.
#3194 Comment 5:
@koppor  Your display thing is related to the autolinked file. One of your files got autolinked.

#3194 Comment 6:
Think, I've  to open another issue. Why the hell is the same file linked
twice? 😱

Am 05.09.2017 20:12 schrieb "Christoph" <notifications@github.com>:

> @koppor <https://github.com/koppor> Your display thing is related to the
> autolinked file. One of your files got autolinked.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3194#issuecomment-327258107>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafrSslcfRbbXfpeNWqUimgcu4XSmcks5sfY8DgaJpZM4PLNtG>
> .
>

--------------------------------------------------------------
#3193 Comment 1:
Thanks for the update! Now the files should be consistent
--------------------------------------------------------------
#3192 Comment 1:
As this is a simple fix which should make the test run again, I merged it in
Despite technical issues we would appreciate if you could take a look at other issues, too. We appreciate your contribution
--------------------------------------------------------------
#3191 Comment 1:
@Siedlerchr Thanks for your review!

I implemented the requested changes.
#3191 Comment 2:
Entry linking is described from the user's side at http://help.jabref.org/en/EntryLinks

Example bib file: https://github.com/JabRef/jabref/blob/master/src/test/resources/testbib/crossref.bib: Entry `DBLP:conf/wicsa/ZimmermannWKG15` links to `DBLP:conf/wicsa/2015`.

So, I am leaning to ask whether it is possible to create two BibEntry objects `source` and `target`. The `target` has the BibTeX key `target` and the source `crossrefs` `target`.



#3191 Comment 3:
Since this PR brings the test coverage forward, we merge this PR.

Thank you for your contribution @nanooq. We hope that we will see further increase of the test coverage. This really helps to stabilize JabRef.
--------------------------------------------------------------
#3188 Comment 1:
After looking at the code in RenamePdfCleanup.cleanup I'm a little confused.
There's a note that seems to contradict the log output and the logic.  Can you clear that up for me?

```
if (Files.exists(newPath) && !pathsDifferOnlyByCase) {
                // we do not overwrite files
                // Since File.exists is sometimes not case-sensitive, the check pathsDifferOnlyByCase ensures that we
                // nonetheless rename files to a new name which just differs by case.
                // TODO: we could check here if the newPath file is linked with the current entry. And if not, we could add a link
                LOGGER.debug("There already exists a file with that name " + newPath.getFileName()
                        + " so I won't rename it");
                newFileList.add(flEntry);
```
#3188 Comment 2:
Windows setting:

- Rename a.pdf to A.pdf.
- Files.exist("A.PDF") returns true. 
- We really want to do this name change, because we want to change `a` to `A`

This check allows exactly that. If `!pathsDifferOnlyByCase` was missing, JabRef would complain that `A.pdf` already existed. On Windows, however, this is not true, as `a.pdf` exists, but not `A.pdf`. But due to the FAT32 case-insentive thingy, both `a.pdf` and `A.pdf` exist.

Is that the thing, which confused or is it something different?
#3188 Comment 3:
Ok that makes sense.

I went over your suggestions, and things turned out a bit more complicated than expected.  The only way I could see to make the check case-insensitive was to iterate through a list of files in the target directory.  I had to do this because we only have the original file path and the target file path when this runs.  I also extracted pathsDifferByCaseOnly to a method so I could use it here.

Let me know what you think. 

```
    public boolean fileAlreadyExists(LinkedFile flEntry, BibEntry entry) {
        String targetFileName = getTargetFileName(flEntry, entry);
        Path targetFilePath = flEntry.findIn(databaseContext,
                fileDirectoryPreferences).get().getParent().resolve(targetFileName);
        Path oldFilePath = flEntry.findIn(databaseContext, fileDirectoryPreferences).get();
        boolean matchedByCase = false;
        try (Stream<Path> filesList = Files.list(oldFilePath.getParent())) {
            //Need to iterate through filenames in directory and compare to target filename
            for (Object path : filesList.toArray()) {
                if (pathsDifferOnlyByCase(targetFilePath, path.toString())) {
                    matchedByCase = true;
                    break;
                }
            }
        } catch (IOException e) {
            LOGGER.error("Could not get the list of files in target directory", e);
        }

        //check if file already exists at target and make sure the difference isnt case only
        if (!Files.exists(targetFilePath) && !matchedByCase) {
            return false;
        } else {
            return true;
        }
    }
```

I suppose the code that iterates could be extracted to its own method and only run when the first condition from the below isnt met, if theres any concern that this might slow things down.
`if (!Files.exists(targetFilePath) && !matchedByCase) {`

#3188 Comment 4:
Your approach looks good, however I don't see the reason why you need to iterate over all files:
You just have to extract/copy the following steps in a new method:

We want to rename X:\ABC\A.pdf into X:\ABC\B.pdf (we ignore the creation of the specific filenames for the moments) 

`       Optional<Path> expandedOldFile = flEntry.findIn(databaseContext, fileDirectoryPreferences);`
Here we get the old existing file which the user wants to rename: X:\ABC\A.pdf 

Then in the following code we build the new FileName (the target of the renaming) 
```         
            String targetFileName = getTargetFileName(flEntry, entry);
            Path newPath = expandedOldFile.get().getParent().resolve(targetFileName); 
```
We go to the directory of the old file and resolve it against the TargetFileName, so in newPath is now stored the full path to the target file - which hopefully does not yet exist. 
So new Path is now the directory (parent) of the file A.pdf -> ABC and we do now resolve ABC-> B.pdf
=> X:\ABC\B.pdf 

Here we compare the full path of the old file name with the new file and check if A.pdf and B.pdf are the same paths (as koppor explained above, we treat A.pdf and a.pdf as the same file)
```      
      String expandedOldFilePath = expandedOldFile.get().toString();
            boolean pathsDifferOnlyByCase = newPath.toString().equalsIgnoreCase(expandedOldFilePath)
                    && !newPath.toString().equals(expandedOldFilePath);

   if (Files.exists(newPath) && !pathsDifferOnlyByCase) {
```
That is the actual check: If there already exists an actual File X:\ABC\B.pdf

#3188 Comment 5:
The reason I chose to iterate is because there might be another file from a different entry with the same name in that folder, but with different case.

Here is a scenario that I ran into while testing.
Entry A - File aaa 
Entry B - File bbb
Test: Rename aaa to bbB = failed and not detected unless we iterate

The method pathsDifferOnlyByCase checks the old name (aaa) against the new name (bbB), but does not check the new name against other files in that directory.
Files.exists method will check for bbB and return that it doesnt exist, but then still fail because bbb exists in the directory.  The directory could contain any variety of files such as BBB bbb BbB BBb etc.
#3188 Comment 6:
Ah
Good catch! Now I see your problem.
However, if you directly apply the filter operation on the stream you are more efficient and a stream is lazily populated.
Check out that link for an example how to use files find wth a condition 


http://winterbe.com/posts/2015/03/25/java8-examples-string-number-math-files/


#3188 Comment 7:
That seems very useful, thanks for letting me know.  How's this?

```
        try (Stream<Path> stream = Files.list(oldFilePath.getParent())) {
            matchedByCase = stream
                    .map(String::valueOf)
                    .anyMatch(path -> path.equalsIgnoreCase(targetFilePath.toString()));
        } catch (IOException e) {
            LOGGER.error("Could not get the list of files in target directory", e);
        }
```

Also, is there an already existing method to safely overwrite a file for me to look at?

> We have '%0'_exists._Overwrite_file? in JabRef. Maybe, the code can be adapted to allow file overwrite instead of just cancelling the request?

To do this part I'd guess we have to rename the existing file to something temporary, run                     pdfCleanup.cleanup(entry), and then delete the temp file on success.


#3188 Comment 8:
Hi, just add the method and commit then I can check out your branch. For overwriting or renaming look at FileUtil, the method take a Boolean for overwriting 
#3188 Comment 9:
Local branch got a bit messy and I ended up resetting it without knowing that this pull request would get closed.  I opened up a new one with the latest code changes.
#3188 Comment 10:
No need to open a new one. You can push to the old branch. This PR gets
updated then. One can reopen a PR easily by clicking on Reopen.

Am 12.09.2017 05:21 schrieb "Andrew" <notifications@github.com>:

> Local branch got a bit messy and I ended up resetting it without knowing
> that this pull request would get closed. I opened up a new one with the
> latest code changes.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3188#issuecomment-328723326>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafmYKCG0uGU8P8_wyuBWmbB9-tRHLks5shfjWgaJpZM4PLDMT>
> .
>

#3188 Comment 11:
Sorry I didnt know about that.  Will do so in the future.
--------------------------------------------------------------
#3187 Comment 1:
JabRef used to have an entry editor cache. We disabled that cache, because of issues with the "Other Fields" tab and customized entries.  Thus, when reviewing, we have to check https://github.com/JabRef/jabref/issues/2064 and https://github.com/JabRef/jabref/pull/2075.
#3187 Comment 2:
If I have "Other fields" and switch to an entry without "Other fields", the FIRST tab "Required field" is focused, not "Deprecated Fields", which is the tab BEFORE the tab "Other fields".
#3187 Comment 3:
I used [YourKit](https://www.yourkit.com/) tonight to profile the current master and looked over this PR. I tested it by using the infinite scroll with the entry editor open so that JabRef was pushed to its limits. Be aware that the things below might be wrong but I hope they give some helpful insight:

## Localization memory

First, I was stunned that the objects that are purely connected to getting the translation strings are so large. In the current master branch, they accounted for 6% of the memory of the complete thread. I marked the line:

![mem1](http://i.imgur.com/XLtRppd.png)

I looked into the implementation and saw that the list of keys is always recreated. I was wondering why that is. When I change the language in the preferences, I get notified, that I have to restart JabRef. So why don't we hold one `HashSet` that is initialized once? I [hacked this down](https://gist.github.com/halirutan/3d772207945527de14f5881d1f676dce) just to test it (the implementation is not correct as it stands!). After that, the memory usage basically vanished. Compare the size and the recorded objects.

![mem2](http://i.imgur.com/TgTVOSC.png)

## `EntryEditorTab` and *lazy initialization*

This base-class is laid out to support late initialization. Unfortunately, this is not done. Most notably `org.jabref.gui.entryeditor.FieldsEditorTab#FieldsEditorTab` calls `setupPanel` in its constructor. So everytime `org.jabref.gui.entryeditor.EntryEditor#addTabs` is called, which is every time we now set a new entry (although the `EntryEditor` is reused), a full-fledged panel is constructed. I don't see why this is necessary when we only need to construct this when the user wants to see this tab. [Another hack](https://gist.github.com/halirutan/135ec7f263c61a23305a1ecf59ee5a8f) that moved this to the `initialize` method.

## Going one step further

This PR is a first good step. My question is: Shouldn't this also be done one step deeper? What I propose is the following:

- All editor tabs are instantiated only once for the `EntryEditor`. Tabs (I mean the header) must be instantaneously available to the entry editor so that they are not rebuilt every time as you can see in the last link below.
- When the editor updates, it decides which tabs should be shown and which not
- The initialization of each tab is done when the tab gets focus. There is no need to fill it with data and set it up before that

## Comparison of speed

I tested this speed of the `EntryEditor` with the largest example I could find in the examples and used again infinite scrolling. The difference is astounding. Look at the following for the current master branch implementation and see how long it takes until the editor is loaded at the end of the scrolling (btw, I have an Intel(R) Core(TM) i7-5960X CPU @ 3.00GHz with 64GB of RAM here!)

[Slow Version](https://youtu.be/i4Jb2YuTvc4)

Now this PR with the fix for the initialization and the Location.

[Fast Version](https://youtu.be/bPAI9atxDQA)
#3187 Comment 4:
@halirutan First of all: Wow, just wow. It is a very rare sight to see a new contributor put in as much effort and diligence as you do. You have my kudos. Your work is excellent.

# Regarding the localization
Your suggestion is a valid improvement which I fully support. It's not directly linked to the topic of this PR, though. So, could you turn this into a separate pull request? I hope that it does not take too much effort to turn this into a fully correct implementation, but from glancing at the code I don't think it would. 

# Regarding the entry editor
The lazy initialization has my upvote as well. I wonder why this hasn't been changed to support lazy initialization before, and my guess is that it is just an oversight by several people including myself.

What you list under "going one step further" is also what I had in mind. The "problem" that this faces is that the content of a tab varies depending on what kind of entry is displayed. For example, an `article` has different required fields than an `inproceedings` entry. I think this difference has been the original reason for rebuilding the complete entry editor every time selection changes. It could be a little tricky to get that right every time, but it is something that we should definitely do to improve performance.

# How to proceed from here
The performance improvements you show are just awesome. We should get all this into master and I suggest the following: 
 - I fix the issues mentioned above and get this PR ready for merge. I do not implement that the lazy initialization or localization fix, since I do not want to take credit for something that you have found and repaired.
 - In the meantime, you can create two new PRs, one for the localization and one for the lazy initialization. As far as I can see, this should not result in merge conflicts to this one.

When we have integrated all this, we can have a go at a proper one-time creation of the tabs. If you are interested in trying this, be my guest.

Once again, thank you a lot!
#3187 Comment 5:
I have double checked  #2064 and  #2075 manually and the optional fields are recreated as desired.

@koppor I don't really see why the focus should jump to adjacent tab when switching to an entry that does not have optional fields (also why to the one before and not the one after). So unless I have a good reason to jump to a particular tab, I am against implementing special handling for that.

From my point of view, this PR is ready to merge and then we can go for the further improvements discussed above.
#3187 Comment 6:
Okay, then I'll be brave and merge this now.
--------------------------------------------------------------
#3186 Comment 1:
I merge, because this PR did not touch the key `Online_help_forum`.
#3186 Comment 2:
Sorry to be a little late. I just posted another pull request which solved
the spacing error and also improved some wording in translation.

Could you merge it again, since the previous post included some
inappropriate/misleading translations?

Thanks!


2017-09-03 18:17 GMT+09:00 Oliver Kopp <notifications@github.com>:

> Merged #3186 <https://github.com/JabRef/jabref/pull/3186>.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3186#event-1232556466>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ALUk-sWzIsntEGhSPYIImZs3awPgOccJks5sem6zgaJpZM4PKvLx>
> .
>

#3186 Comment 3:
I just merge your new PR. So all should be fine now
--------------------------------------------------------------
#3184 Comment 1:
Additional task: in a new column of the tables, flag files with anomalies (such as space characters found in localized strings).

Is there any other special characters for localized strings?
#3184 Comment 2:
@mlep, I think we should rather write a test case for that in Java, so that it is not possible to commit such malformed strings
#3184 Comment 3:
Fine. Great!
#3184 Comment 4:
I have refactored that script, however I have not yet tried to incorporate it in the build pipeline. I would merge this for now and think about the build automation in another PR. 
#3184 Comment 5:
Can you check the case if the syncing does correctly add/remove keys when I do a rename of a key?
I recently had the problem with the old version of the script in a branch.
E..g. I previously created a new key e.g.  Exporting_file_X_of_Bibtex_Entry 
Synced that to all lang files
Afterwards I just renamed the BIbEntry to "entry", ran it again and the script did not replace the changes in the other files. I guess it was because it was at the same line. After I moved the renamed key to another position, it worked
#3184 Comment 6:
Bump.

Can we get this PR ready to merge?
#3184 Comment 7:
@Siedlerchr Yep, updating and deleting entries works for me.

@lenhard I think we can merge.
#3184 Comment 8:
Ok, perfect! Then I'll do this right away. 

@lynyus I am not 100% sure if #3181 is ready to be closed based on this PR or what it means for #3397. Could you please have a look at these issues and close or comment?
--------------------------------------------------------------
#3183 Comment 1:
@Siedlerchr: There are a few space characters among half a dozen of localized strings (not this commit I believe). Please, could you take this commit as an opportunity to fix them?
#3183 Comment 2:
@mlep Ah, thanks for the hint! I now searched and replaced all occurences of them
#3183 Comment 3:
@Siedlerchr Great. Thank you!
--------------------------------------------------------------
#3182 Comment 1:
done
--------------------------------------------------------------
--------------------------------------------------------------
#3179 Comment 1:
Tried id out locally - and it works. Thank you for the PR!
#3179 Comment 2:
as a follow up: I have tested it as well, works.

What about automatically generating this data with each push to master and publish a html version on jabref.org?
#3179 Comment 3:
It would be nice!
#3179 Comment 4:
Although: it would be nice if the order of the languages would be always the same.
#3179 Comment 5:
That should be feasible. Is that all the requirements you can think of? I would volunteer to program that. Would you be so kind to file an issue to separate the discussion and point out all potential requirements?
#3179 Comment 6:
Done (Issue #3181)
--------------------------------------------------------------
#3178 Comment 1:
@mlep  FYI 
--------------------------------------------------------------
#3171 Comment 1:
Tested it locally, works as expected! Good job, I would also vote to merge this in at the moment., 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3158 Comment 1:
Tested locally and works. Good job!
--------------------------------------------------------------
#3156 Comment 1:
For the sake of getting things done. I'll merge now directly, even though there's only one review. I guess because of our current shortage in personal we'll have to deviate from the two-reviewer rule now and then.
--------------------------------------------------------------
#3155 Comment 1:
You could add a Changelog entry that references the issue and then this is good to go.
#3155 Comment 2:
I thought, we are only recording changes for the end user and no internal
changes? 😇

Am 25.08.2017 14:43 schrieb "Jörg Lenhard" <notifications@github.com>:

> You could add a Changelog entry that references the issue and then this is
> good to go.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3155#issuecomment-324908845>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafhBr0ypBtHpU-Gm-uKAt7f-_jPcYks5sbsGIgaJpZM4PCiyN>
> .
>

#3155 Comment 3:
Ok, fine :-D I am merging.
--------------------------------------------------------------
#3154 Comment 1:
Since the review comments have been addressed and for the sake of getting things done, I am merging this now.
--------------------------------------------------------------
#3152 Comment 1:
Mhmm... The reason why this was potentially not allowed might have been the old groups tree which was relying on the Keys... 
This should Not be crucial now. However, crossref relations might get broken... But as this is a Feature not used that often (I suppose) it should be fine...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3147 Comment 1:
Is it possible to add this to the context menu? I once added "Send as email" to the menu as I also needed a similar functionality for sending entries as email:

![grafik](https://user-images.githubusercontent.com/1366654/29908597-676fbb74-8e22-11e7-8a09-dc6e0ea79d15.png)

#3147 Comment 2:
@Siedlerchr Your PR did not update as you named the branches differently: `exportPdf` vs.  `exportPDF`. The letters `D` and `F` are cased differently. Thus, these are different branches. 🎉 
#3147 Comment 3:
Current accessibility:

![grafik](https://user-images.githubusercontent.com/1366654/29908807-4a1879e8-8e23-11e7-84c5-d26b312bc4f3.png)

Reading https://github.com/JabRef/jabref/pull/2706#issuecomment-292110772 and the following comments, I do not like the word "Export" in the Tools menu. It took me 5 minutes to find the functionality.

1. Context menu: No entry for that
2. File menu: No entry for that
3. File -> Export: Cannot select "PDFs" somehow.

Suggestion:

Rename to "Copy attached files to folder..."

Further minor issues

- [x] progress always shows "exporting file 0 of x"
  ![grafik](https://user-images.githubusercontent.com/1366654/29908896-be2f2dd6-8e23-11e7-9ea2-e8ee5a230e69.png)
- [x] Last chosen folder is not remembered. The browse-dialog always starts in `%HOME`
- [x] Pressing "Cancel" when choosing the folder also triggers the export.



#3147 Comment 4:
Added devcall label to discuss milestone
#3147 Comment 5:
Stays at v4.1 milestone as v4.1 will be our PDF feature release.
#3147 Comment 6:
I think I fixed all issues raised by @koppor  and I also create a log file in the export dir.

#3147 Comment 7:
@tobiasdiez  I followed your idea and added a TableView showing the log messages and the file.
I plan to replace the true/false values with Icons: (green checkmark and red x)
![grafik](https://user-images.githubusercontent.com/320228/31765002-3b12623a-b4c3-11e7-99a8-f85dc6da83f4.png)

#3147 Comment 8:
Looks good! Do you want to display this dialog everytime, even through everything went fine and all files were exported successfully? Or just when an error occurs? I'm unsure but would tend to the latter.
#3147 Comment 9:
From my point of view, all remaining issues should be resolved and this can be merged.
#3147 Comment 10:
The result dialog is displayed way too small on my display.

![screen shot 2017-10-25 at 18 24 34](https://user-images.githubusercontent.com/1254003/32010460-28889a8c-b9b2-11e7-837d-e1081c96f654.png)

When I try to resize it, a magical fourth column appears.
![screen shot 2017-10-25 at 18 29 19](https://user-images.githubusercontent.com/1254003/32010567-8248dd66-b9b2-11e7-988b-de409d1c0d3e.png)

#3147 Comment 11:
@lynyus  I changed the column size and there is also a tooltip for the file column
--------------------------------------------------------------
#3141 Comment 1:
To be honest, I'm not a big fan of the increased size. I prefer to have as much information on the screen as possible and not to have to scroll. On the other hand, I acknowledge that the current layout is also suboptimal as the text fields are not expanding on their own when they contain much information. Maybe it is already enough to increase the `prefered` height (instead of minimum)? Also you should be able to increase the size of the files panel independently of the other fields.

Furthermore, it is probably better to use scaling units (like `em`) instead of pixels.
#3141 Comment 2:
@tobiasdiez Ok, you have the same opinion as @koppor I guess.

Increasing the preferred height didn't help unfortunately. We can leave most field editors as they are, but we have to increase the size of the file and the the keywords editor. Those are the two editors in the cramped general tab where users could enter information with more than a single line. That doesn't look good at all and really does annoy users.

I've tried to change just these two editors in code, but failed. Whenever I call `setMinWidth` in https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/fieldeditors/LinkedFilesEditor.java or change the `minHeight` in the related fxml file, the min height of all field editors in the tab increase. Any hint?

#3141 Comment 3:
The problem is probably https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/entryeditor/FieldsEditorTab.java#L166, where the rows are set to have the same height.
#3141 Comment 4:
Quick idea: If the row constraints are the problem, it might be an option to use two rows for the File/Keyword editors
#3141 Comment 5:
@matthiasgeiger Not sure if that's easily possible. The best solution is probably to write new subclass of EntryEditorTab.
#3141 Comment 6:
Or extend the `FXFieldEditor` by a `getWeight` method, which you can use in https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/entryeditor/FieldsEditorTab.java#L114.
Maybe it is already sufficient to remove these row constraints (although there was probably a reason why I added them in the first place).
#3141 Comment 7:
Ok, I've implemented a hack that assigns twice the space of normal rows to the keyword and file field editors.

As I said, this is a hack. But before I turn this into something more acceptable (along your suggestion @tobiasdiez ), I would like to get confirmation from the team that this is a solution that we can live with visually in the JabRef UI. If not, than I am just wasting my time with GUI hacking.
#3141 Comment 8:
And now I refactored it anyway... JabRef continues to ruin my lunch time.
#3141 Comment 9:
I tried out the new solution locally and it looks good enough. On two-column tabs, the things shrink too much, but we discussed in the devcall that it is difficult to determine the right "min-height". (screen resolution etc).

So, good to merge.
#3141 Comment 10:
As discussed in the dev call, I am merging this now.
--------------------------------------------------------------
#3137 Comment 1:
Now we only need to fix the underlying algorithm I guess...
#3137 Comment 2:
Exactly :) But that's not part of this PR.
--------------------------------------------------------------
--------------------------------------------------------------
#3128 Comment 1:
Tested under linux, works as expected
#3128 Comment 2:
It seems that something is missing for the source pane, but otherwise the PR is functional: https://github.com/JabRef/jabref/issues/3028#issuecomment-323718850 
#3128 Comment 3:
I would vote for merging this in as it is. And I will see on thursday why this on the source tab thing is not working. I would create a follow up PR then
#3128 Comment 4:
OK for me. At least, this heals the issue at most places.
#3128 Comment 5:
Agreed. This repairs most of this problem for 4.0. At least it's now possible to enter the info in the normal entry editor
--------------------------------------------------------------
#3126 Comment 1:
Thank you very much for your contribution! I merge this and your other pr in
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3123 Comment 1:
In case we want to keep the Java-class, I would add a transformation transforming the list into Java-Classes. End users are maintaining the abbreviation lists (https://github.com/JabRef/abbrv.jabref.org/pulls?q=is%3Apr+is%3Aclosed) and I assume, they do not want to maintain Java-Code.

Does loading of the lists still take that much time? Maybe we should ship [SQLite](https://www.sqlite.org/)?
#3123 Comment 2:
But those are different lists, right? This PR was just about the integration of the built-in lists. For the gigantic list, there's no clean way to convert this into code, so we might have to load it anyway. The IEEE lists could go into code, but they probably don't matter performance-wise anyway.

I am not even sure if this PR is worth following up.
#3123 Comment 3:
Yes, these are different lists - and this also confuses users of JabRef. Why is there https://github.com/JabRef/jabref/blob/master/src/main/resources/journals/journalList.txt and http://abbrv.jabref.org/.

Current state: On http://abbrv.jabref.org/ at the end, the internal list is linked somehow...

I would not follow up here, but possible follow up in the same context:

A) support three kinds of modes: full, abbreviated, shortest unique abbreviation
B) add support for abbreviating conference names.

#3123 Comment 4:
What about storing them as Properties file?   That would be actual equivalent of storing it into code
This was suggested here: https://stackoverflow.com/a/2407930
And here is an analysis of Performance: https://stackoverflow.com/a/10756739
#3123 Comment 5:
@Siedlerchr This sounds like a good suggestion.
--------------------------------------------------------------
#3120 Comment 1:
We still have many open translations (
http://help.jabref.org/en/TranslatingGUI), so that is not a con. The
feature has a very low risk break anything. I would just include it.

Am 18.08.2017 11:32 schrieb "Jörg Lenhard" <notifications@github.com>:

> *@lenhard* approved this pull request.
>
> Thanks for your PR. The simplest solution is usually best.
>
> I have tested the PR locally and it works. The code looks fine as well.
>
> @JabRef/developers <https://github.com/orgs/JabRef/teams/developers> We
> wanted to do a feature freeze for 4.0. So should we wait with merging this?
> I would say we can merge it anyway. After all, it's not too big. The only
> "problem" is that the translators would need to do another round.
>
> —
> You are receiving this because you are on a team that was mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3120#pullrequestreview-57153711>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafkXTsgkgb7BtM91DhU9RfdwsMW2Jks5sZVoagaJpZM4O6-V_>
> .
>

#3120 Comment 2:
Ok, perfect!

@Andrew-Lev Thank you very much for your contribution! You're very welcome to provide more :-)
#3120 Comment 3:
@koppor Does the timeframe for the release of 4.0  allow a call to translators?
#3120 Comment 4:
Absolutely!!

Am 18.08.2017 14:47 schrieb "MLEP" <notifications@github.com>:

> @koppor <https://github.com/koppor> Does the timeframe for the release of
> 4.0 allow a call to translators?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3120#issuecomment-323344345>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafmLTjIiCVx3punVN2Me-vdWh35SOks5sZYfigaJpZM4O6-V_>
> .
>

--------------------------------------------------------------
#3116 Comment 1:
AS this is a small but important change I merge this i in now.
--------------------------------------------------------------
#3114 Comment 1:
Thanks for your contribution! 
--------------------------------------------------------------
--------------------------------------------------------------
#3107 Comment 1:
Is this ready for review? I guess this is not relevant for the beta-3 anyways?
Also, at some point maybe this should be documented in the wiki.
#3107 Comment 2:
Build goes through (locally using https://hub.docker.com/r/koppor/snapcraft-java-de/), so this change really works.
--------------------------------------------------------------
#3105 Comment 1:
Unfortunately, using the `StateManager` does not solve the coloring for me.

But to be honest, it seems rather broken anyway, irrespective of this PR. I have a database with 3 entries and 2 groups. The only way to get a coloring is to click an entry with a group in a newly started JabRef without opening the entry editor. That coloring never changes even if I click different entries. Does coloring actually work for you?

I think this PR is ready to go. Someone else should check the fix in a running JabRef. The coloring problem should be investigated in another issue/PR.
#3105 Comment 2:
In general it works for me but I also noticed that sometimes the color is not updated. Probably related to https://github.com/JabRef/jabref/issues/2857.
--------------------------------------------------------------
#3104 Comment 1:
The panel is now updated correctly, however, upon hitting "replace entry" after fetching the BibTeX data there are still some exceptions:

<details>
  <summary>Log File</summary>
  
  ```
Uncaught exception Occurred in Thread[AWT-EventQueue-0,6,main]
java.lang.IllegalStateException: Not on FX application thread; currentThread = AWT-EventQueue-0
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236)
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423)
	at javafx.scene.Parent$2.onProposedChange(Parent.java:367)
	at com.sun.javafx.collections.VetoableListDecorator.add(VetoableListDecorator.java:317)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderArea.addTab(TabPaneSkin.java:879)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderArea.access$1100(TabPaneSkin.java:685)
	at com.sun.javafx.scene.control.skin.TabPaneSkin.addTabs(TabPaneSkin.java:332)
	at com.sun.javafx.scene.control.skin.TabPaneSkin.lambda$initializeTabListener$485(TabPaneSkin.java:415)
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233)
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205)
	at javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:155)
	at org.jabref.gui.entryeditor.EntryEditor.readdOtherFieldsTab(EntryEditor.java:253)
	at org.jabref.gui.entryeditor.EntryEditor.rebuildOtherFieldsTab(EntryEditor.java:241)
	at org.jabref.gui.entryeditor.EntryEditor.listen(EntryEditor.java:222)
	at sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150)
	at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76)
	at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116)
	at com.google.common.eventbus.EventBus.post(EventBus.java:217)
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:427)
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:448)
	at org.jabref.gui.mergeentries.MergeFetchedEntryDialog$ReplaceAction.actionPerformed(MergeFetchedEntryDialog.java:137)
	at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
	at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
	at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
	at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
	at java.awt.Component.processMouseEvent(Unknown Source)
	at javax.swing.JComponent.processMouseEvent(Unknown Source)
	at java.awt.Component.processEvent(Unknown Source)
	at java.awt.Container.processEvent(Unknown Source)
	at java.awt.Component.dispatchEventImpl(Unknown Source)
	at java.awt.Container.dispatchEventImpl(Unknown Source)
	at java.awt.Component.dispatchEvent(Unknown Source)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
	at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
	at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
	at java.awt.Container.dispatchEventImpl(Unknown Source)
	at java.awt.Window.dispatchEventImpl(Unknown Source)
	at java.awt.Component.dispatchEvent(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue$4.run(Unknown Source)
	at java.awt.EventQueue$4.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.WaitDispatchSupport$2.run(Unknown Source)
	at java.awt.WaitDispatchSupport$4.run(Unknown Source)
	at java.awt.WaitDispatchSupport$4.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.awt.WaitDispatchSupport.enter(Unknown Source)
	at java.awt.Dialog.show(Unknown Source)
	at java.awt.Component.show(Unknown Source)
	at java.awt.Component.setVisible(Unknown Source)
	at java.awt.Window.setVisible(Unknown Source)
	at java.awt.Dialog.setVisible(Unknown Source)
	at org.jabref.gui.mergeentries.FetchAndMergeWorker.done(FetchAndMergeWorker.java:67)
	at javax.swing.SwingWorker$5.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(Unknown Source)
	at sun.swing.AccumulativeRunnable.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(Unknown Source)
	at javax.swing.Timer.fireActionPerformed(Unknown Source)
	at javax.swing.Timer$DoPostEvent.run(Unknown Source)
	at java.awt.event.InvocationEvent.dispatch(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.run(Unknown Source)

Uncaught exception Occurred in Thread[AWT-EventQueue-0,6,main]
java.lang.IllegalStateException: Not on FX application thread; currentThread = AWT-EventQueue-0
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236)
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423)
	at javafx.scene.Parent$2.onProposedChange(Parent.java:367)
	at com.sun.javafx.collections.VetoableListDecorator.add(VetoableListDecorator.java:317)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderArea.addTab(TabPaneSkin.java:879)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderArea.access$1100(TabPaneSkin.java:685)
	at com.sun.javafx.scene.control.skin.TabPaneSkin.addTabs(TabPaneSkin.java:332)
	at com.sun.javafx.scene.control.skin.TabPaneSkin.lambda$initializeTabListener$485(TabPaneSkin.java:415)
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233)
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205)
	at javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:155)
	at org.jabref.gui.entryeditor.EntryEditor.readdOtherFieldsTab(EntryEditor.java:253)
	at org.jabref.gui.entryeditor.EntryEditor.rebuildOtherFieldsTab(EntryEditor.java:241)
	at org.jabref.gui.entryeditor.EntryEditor.listen(EntryEditor.java:222)
	at sun.reflect.GeneratedMethodAccessor48.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150)
	at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76)
	at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116)
	at com.google.common.eventbus.EventBus.post(EventBus.java:217)
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:427)
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:448)
	at org.jabref.gui.mergeentries.MergeFetchedEntryDialog$ReplaceAction.actionPerformed(MergeFetchedEntryDialog.java:137)
	at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
	at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
	at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
	at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
	at java.awt.Component.processMouseEvent(Unknown Source)
	at javax.swing.JComponent.processMouseEvent(Unknown Source)
	at java.awt.Component.processEvent(Unknown Source)
	at java.awt.Container.processEvent(Unknown Source)
	at java.awt.Component.dispatchEventImpl(Unknown Source)
	at java.awt.Container.dispatchEventImpl(Unknown Source)
	at java.awt.Component.dispatchEvent(Unknown Source)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
	at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
	at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
	at java.awt.Container.dispatchEventImpl(Unknown Source)
	at java.awt.Window.dispatchEventImpl(Unknown Source)
	at java.awt.Component.dispatchEvent(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue$4.run(Unknown Source)
	at java.awt.EventQueue$4.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.WaitDispatchSupport$2.run(Unknown Source)
	at java.awt.WaitDispatchSupport$4.run(Unknown Source)
	at java.awt.WaitDispatchSupport$4.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.awt.WaitDispatchSupport.enter(Unknown Source)
	at java.awt.Dialog.show(Unknown Source)
	at java.awt.Component.show(Unknown Source)
	at java.awt.Component.setVisible(Unknown Source)
	at java.awt.Window.setVisible(Unknown Source)
	at java.awt.Dialog.setVisible(Unknown Source)
	at org.jabref.gui.mergeentries.FetchAndMergeWorker.done(FetchAndMergeWorker.java:67)
	at javax.swing.SwingWorker$5.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(Unknown Source)
	at sun.swing.AccumulativeRunnable.run(Unknown Source)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(Unknown Source)
	at javax.swing.Timer.fireActionPerformed(Unknown Source)
	at javax.swing.Timer$DoPostEvent.run(Unknown Source)
	at java.awt.event.InvocationEvent.dispatch(Unknown Source)
	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
	at java.awt.EventQueue.access$500(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.awt.EventQueue$3.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
	at java.awt.EventQueue.dispatchEvent(Unknown Source)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
	at java.awt.EventDispatchThread.run(Unknown Source)
```
</details>
#3104 Comment 2:
Indeed, thanks for pointing out! Should be fixed now.

It seems that we (I) need be more careful when updating FX components based on model events.
--------------------------------------------------------------
#3098 Comment 1:
Thanks for the translation 👍 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3095 Comment 1:
Thanks for the PR!
--------------------------------------------------------------
#3094 Comment 1:
There was someone in the issue who noticed a bug and wanted to Work on this. Maybe he is interested in porting to javafx?
#3094 Comment 2:
Please have a look at the codacy issues, after that we can merge
#3094 Comment 3:
As @koppor  already approved these changes and I'm happy, too, I merge this in.
--------------------------------------------------------------
--------------------------------------------------------------
#3092 Comment 1:
Ok, I tried to create a own preference class. Not sure if I've done that correctly (as intended at the moment). Should I also replace calls to the preferences inside the General tab?
--------------------------------------------------------------
--------------------------------------------------------------
#3090 Comment 1:
I have tested it locally and it looks good. I don't think it's a problem to merge it even into beta3, since it is a minor change and no new feature.

I have one request for a usability optimization: the warning sign is very small and it seems that I have to locate the mouse on exactly one pixel so that the message appears. Do you see any chance of increasing the size of the warning sign or making it easier to display the warning message?
#3090 Comment 2:
No sadly I didn't found a way to specify the size of the graphic. These things are all hard-coded in the controlsfx class (which contains the comment `// TODO we shouldn't hardcode this - defer to CSS eventually`). I created [an issue](https://bitbucket.org/controlsfx/controlsfx/issues/788/make-style-of-graphicvalidationdecoration) and will revist the style once this is possible.
--------------------------------------------------------------
--------------------------------------------------------------
#3085 Comment 1:
@chochreiner my macbook has not yet arrived , so I cant test it on MacOs.
#3085 Comment 2:
The changes work fine on MacOS. I've just added you, bc you have added the telemetry part and I might have overlooked sth, which should also use the "null" checks.
#3085 Comment 3:
The failing tests seem to be about the Help pages, otherwise LGTM
#3085 Comment 4:
Go ahead merging, I checked the new commit. The Optional.ofNullable in the
getter should not be a performance issue

Am 07.08.2017 22:04 schrieb "Christoph" <notifications@github.com>:

> The failing tests seem to be about the Help pages, otherwise LGTM
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3085#issuecomment-320765750>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafipNcNM5YIBli7CLWwU1dUq26SAhks5sV23EgaJpZM4Ovzyq>
> .
>

--------------------------------------------------------------
#3084 Comment 1:
@tobiasdiez  Well, the problem is that the current code always returns an immutable list. 
I see no reason why the LInkedFileList should be immutable
```
    public Optional<FieldChange> addFile(LinkedFile file) {
        List<LinkedFile> linkedFiles = getFiles(); //This was originally breaking because of immutable 
        linkedFiles.add(file);
        return setFiles(linkedFiles);
    }
```
#3084 Comment 2:
@tobiasdiez There is no hard Java convention regarding these aspects. You can make the caller fail or you can give him a new list. The only thing that matters is that the internal state of `BibEntry` is not changed that way.

I don't have a strong opinion as to which solution we should adapt here. Regardless of which one we choose, we should probably document it in code.
#3084 Comment 3:
@Siedlerchr can you expand the JavaDoc comment of `BibEntry.getFiles()` so that it explains that the returned list is a defensive copy and changes to this list will have no effect on the entry?

With this documentation, the PR can be merged.
--------------------------------------------------------------
--------------------------------------------------------------
#3082 Comment 1:
So, I just added the final touch. Here it how it looks now:
![image](https://user-images.githubusercontent.com/5037600/29092723-9b6ebae4-7c87-11e7-9724-46e7dc76b873.png)

(no idea why the "Author" label is positioned at the bottom of the row...if somebody wants to try he or she is invited to fix that.)
#3082 Comment 2:
I've tried out the PR and found a number of functional issues that need to be addressed before we can merge this:

 1. On first clicking on the file annotation tab in the entry editor, I get the following exception in the log:
```
Opening: \\nas-a1\redirected$\jorglenh\Desktop\testtest.bib
Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.ClassCastException: com.sun.javafx.stage.EmbeddedWindow cannot be cast to javafx.stage.Stage
	at org.jabref.gui.AbstractView.lambda$getView$2(AbstractView.java:34)
	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182)
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81)
	at javafx.beans.property.ReadOnlyObjectPropertyBase.fireValueChangedEvent(ReadOnlyObjectPropertyBase.java:74)
	at javafx.beans.property.ReadOnlyObjectWrapper.fireValueChangedEvent(ReadOnlyObjectWrapper.java:102)
	at javafx.scene.Node$ReadOnlyObjectWrapperManualFire.fireSuperValueChangedEvent(Node.java:831)
	at javafx.scene.Node.invalidatedScenes(Node.java:883)
	at javafx.scene.Node.setScenes(Node.java:921)
	at javafx.scene.Parent$1.onChanged(Parent.java:269)
	at com.sun.javafx.collections.TrackableObservableList.lambda$new$19(TrackableObservableList.java:45)
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329)
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73)
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233)
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482)
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541)
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205)
	at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:90)
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:116)
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabContentRegion.updateContent(TabPaneSkin.java:1581)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabContentRegion.lambda$new$491(TabPaneSkin.java:1548)
	at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83)
	at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:137)
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81)
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105)
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112)
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146)
	at javafx.scene.control.Tab.setContent(Tab.java:344)
	at org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.initialize(FileAnnotationTab.java:35)
	at org.jabref.gui.entryeditor.EntryEditorTab.notifyAboutFocus(EntryEditorTab.java:23)
	at org.jabref.gui.entryeditor.EntryEditor.lambda$new$1(EntryEditor.java:198)
	at org.fxmisc.easybind.EasyBind.lambda$subscribe$12(EasyBind.java:263)
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361)
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81)
	at javafx.beans.property.ReadOnlyObjectPropertyBase.fireValueChangedEvent(ReadOnlyObjectPropertyBase.java:74)
	at javafx.beans.property.ReadOnlyObjectWrapper.fireValueChangedEvent(ReadOnlyObjectWrapper.java:102)
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112)
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146)
	at javafx.scene.control.SelectionModel.setSelectedItem(SelectionModel.java:102)
	at javafx.scene.control.TabPane$TabPaneSelectionModel.select(TabPane.java:717)
	at javafx.scene.control.TabPane$TabPaneSelectionModel.select(TabPane.java:735)
	at javafx.scene.control.TabPane$TabPaneSelectionModel.select(TabPane.java:656)
	at com.sun.javafx.scene.control.behavior.TabPaneBehavior.selectTab(TabPaneBehavior.java:122)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderSkin$5.handle(TabPaneSkin.java:1332)
	at com.sun.javafx.scene.control.skin.TabPaneSkin$TabHeaderSkin$5.handle(TabPaneSkin.java:1317)
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
	at javafx.event.Event.fireEvent(Event.java:198)
	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757)
	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485)
	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762)
	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494)
	at com.sun.javafx.tk.quantum.EmbeddedScene.lambda$null$294(EmbeddedScene.java:256)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.tk.quantum.EmbeddedScene.lambda$mouseEvent$295(EmbeddedScene.java:244)
	at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
	at java.lang.Thread.run(Thread.java:745)
```
 2. When I add a new file in the general tab and switch to the file annotation tab, this new file is not accessible there. I need to switch to a new entry or re-open the entry editor to make it visible.

 3. When I click the copy annotations button without having an annotation selected, I get a NullPointerException:
```
Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at javafx.fxml.FXMLLoader$MethodHandler.invoke(FXMLLoader.java:1774)
	at javafx.fxml.FXMLLoader$ControllerMethodEventHandler.handle(FXMLLoader.java:1657)
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)
	at javafx.event.Event.fireEvent(Event.java:198)
	at javafx.scene.Node.fireEvent(Node.java:8413)
	at javafx.scene.control.Button.fire(Button.java:185)
	at com.sun.javafx.scene.control.behavior.ButtonBehavior.mouseReleased(ButtonBehavior.java:182)
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase$1.handle(BehaviorSkinBase.java:96)
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase$1.handle(BehaviorSkinBase.java:89)
	at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
	at javafx.event.Event.fireEvent(Event.java:198)
	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757)
	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485)
	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762)
	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494)
	at com.sun.javafx.tk.quantum.EmbeddedScene.lambda$null$294(EmbeddedScene.java:256)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.tk.quantum.EmbeddedScene.lambda$mouseEvent$295(EmbeddedScene.java:244)
	at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71)
	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275)
	at javafx.fxml.FXMLLoader$MethodHandler.invoke(FXMLLoader.java:1769)
	... 67 more
Caused by: java.lang.NullPointerException
	at org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.copyCurrentAnnotation(FileAnnotationTabViewModel.java:82)
	at org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabController.copy(FileAnnotationTabController.java:87)
	... 77 more
```

 4. When I click the reload annotations button, nothing happens (even though I added an annotation to the document and saved it). There are no errors in the log.
#3082 Comment 3:
I fixed one exception, however, the other is a classical NPE, because the ObjectProperty returns null, because it is not intialized. You should either define an empty File Annotation or disable the copy dialog @lynyus 
#3082 Comment 4:
@JabRef/developers Please have a look if this PR is ready to be merged.
#3082 Comment 5:
I will merge this now despite minor issues: https://github.com/JabRef/jabref/issues/3110 and https://github.com/JabRef/jabref/issues/3109.
--------------------------------------------------------------
--------------------------------------------------------------
#3078 Comment 1:
@tobiasdiez I didn't see any improvement. The problems are still there.  

JabRef 4.0-dev--snapshot--2017-08-06--master--b7743c4d7
Mac OS X 10.11.6 x86_64 
Java 1.8.0_144
#3078 Comment 2:
@iTao8 Please clarify. This is meant to fix https://github.com/JabRef/jabref/issues/2998#issuecomment-316968028 and from what I see it does. 

As Tobias wrote in the issue, there is nothing to be done about author duplicates and so far no one managed to replicate overlapping dropdown box here (I tried as well and couldn't).
#3078 Comment 3:
@lenhard 1. Do you mean no one can reproduce the overlapping dropdown box? 

2. I reported another problem in #2998: the autocompletion dropdown box for the journal field covers the input. When you are typing a journal name in the journal filed, the input was covered by the autocompletion dropdown box, so you can not see any inputing. 

3. I find new problems. I have a .bib for all my publications (20 papers) and my name are all listed as "Wang, Tao". When I input "Wang, Tao" in the search bar and click "enter", the input automatically changed to "Wang, T." and only ONE entry was found. 

4. Another problem. If I input "WangTao" in the search bar, and then I found this is wrong and want to move the cursor and insert a space between "Wang" and "Tao", but the left key and right key do not work.
#3078 Comment 4:
@iTao8 Thanks for clarifying! Here's my feedback:

1. Tobias and me have tried and couldn't reproduce it. I am not aware of anyone else trying, but as long as we can't reproduce this, we can't fix it.

2. Same here, no one could reproduce the overlap in the journal field (I tried just now). Maybe this is all OSX specific? @chochreiner Can you see how these things look on your machine?

3. This is already tracked in #3068 There are two simple solutions to this right now: 1. Don't hit enter. The main table will be sorted as you type anyway. 2. Instead of enter, hit escape. Then the autocompletion suggestions go away.

4. This one I can reproduce :) And I agree with you that the left and right keys should work differently. Could you open a new issue for this? @Siedlerchr This is about key bindings (again). Can you have a look?


#3078 Comment 5:
@iTao8 Thank you very much for your feedback. 
In fact this PR was not meant to fix any of the issues you mention. I only fixed that you don't get "Te" and "Tes" as autocompletion suggestions if you write "Test" in the field (I thought this is what you meant with "autocompletion covers input").

May I ask you to open a new issue of each of the problems you describe separately. I know this is more work on your side, but would help us to keep track of all the issues and not skip one. Thanks!
(Concerning the overlapping dropdown box: this is maybe a MacOS specific problem).
#3078 Comment 6:
@lenhard @tobiasdiez Thanks! 

The autocompletion dropdown box covers the input, see the screenshot. The dropdown box started at the bottom of the title filed, so all the input letters in the journal field are covered by this box. I think it should be started at the bottom of the journal filed. 
![28460120-3a96268c-6e43-11e7-8089-d62c815a35d8](https://user-images.githubusercontent.com/28705547/29022582-8c46afae-7b9c-11e7-9444-6beb44b13910.png)


#3078 Comment 7:
I can confirm the overlap on MacOS (latest development build) 
<img width="1395" alt="screen shot 2017-08-07 at 12 44 55" src="https://user-images.githubusercontent.com/134981/29023530-54c53146-7b6e-11e7-8c94-c3fd7ebae64a.png">

#3078 Comment 8:
Also reproducible on Windows if there is not enough space to display the whole list of suggestions (i.e., the suggestions would be placed over the task bar)
#3078 Comment 9:
@matthiasgeiger Indeed! Maybe we should just make the size of the drop down list shorter by default.
#3078 Comment 10:
Its a known bug of the library we use: https://bitbucket.org/controlsfx/controlsfx/issues/701/auto-complete-box-overlaps-textfield-when
--------------------------------------------------------------
--------------------------------------------------------------
#3071 Comment 1:
Thank you very much for your contribution! We appreciate this! 👍  Please have a look a the review comments. 
#3071 Comment 2:
I have to admit that I don't really get the idea behind your pull request. Almost all the actions (like mouse up/down, cut + paste, etc) are performed against the main table. So if I press up, I select the previous entry and similarly for the other actions. With your proposed changes, the delete key would get a complete new semantics as it also performs an action against the group panel. I find this a bit confusing and incoherent; but maybe I only missunderstand your intention.

(An example coming from a different domain would be a music player that allows tagging of songs. If you filter your music by a given tag and then hit delete, all the music players I know just delete the song from the library instead of asking you if you want to remove the tag. As in JabRef, the tag/group feature works as a filter and not like a file directory.)
#3071 Comment 3:
@tobiasdiez I am not sure that I understand what is wrong with synergy between modules. 
If I do not like some song - I do not like it. But if i think that some article is not adequate for some research area (group) it doesn't disqualify it for other research areas (groups). And we are not talking about simply filters, we are talking about entity field that defines static groups that entity belongs to. 

I personally would like the proposed functionality so i made this PR. I understand that something is  expected behavior  https://github.com/JabRef/jabref/issues/2989#issuecomment-314389139 but, for me, it is not intuitive. So, from my point of view, the user should be informed about side effects. 

#3071 Comment 4:
Ok, I see your point. We just have different views about the role of groups (filter vs basket). So the added functionality is fine for me. But may I ask you to add a checkbox with "Remember choice and do not show dialog again" so that it is easy to hide the additional step/dialog if one is happy with the interpretation "delete key = always remove entry from database". Thanks.
#3071 Comment 5:
@tobiasdiez what would you say, is this something we should include in 4.0 or even the beta3?
#3071 Comment 6:
I would say we wait until 4.1 with merging of this PR as we try to converge to a stable version and should try to minimize changes that are not bug fixes.
#3071 Comment 7:
4.0 is released! What is missing to get this PR into master? As far as I can see it is only to fix the merge conflicts?
#3071 Comment 8:
This PR is not ready for master. The logic and some dialogs should be rewritten.
#3071 Comment 9:
@mpele Do you have time to continue working on this?
#3071 Comment 10:
I will try to finish this functionality in 2-3 weeks. I hope that is not a problem.
And I will do it in new branch because it has been a lot of changes.
#3071 Comment 11:
@mpele Sounds fine, thanks for following up!
--------------------------------------------------------------
--------------------------------------------------------------
#3069 Comment 1:
Could you add a test to ensure correct behaviour?
#3069 Comment 2:
@Siedlerchr actually the test coverage covers the important parts of the method.
![coverage](https://user-images.githubusercontent.com/1254003/28878410-8ab3b9b2-779f-11e7-9b55-685c820cb70f.png)

#3069 Comment 3:
@tobiasdiez I manually tested it, however I don't have many groups. Please check that.
--------------------------------------------------------------
--------------------------------------------------------------
#3061 Comment 1:
Could you provide a Screenshot if you changed the layout?
#3061 Comment 2:
Waiting for the build, this was just an auto migration by install4j7.
https://circleci.com/gh/JabRef/jabref/10293
Needed to change env variables, so if the exe is fine, we should merge this asap to get our build running again.
#3061 Comment 3:
@JabRef/developers Windows x64 installation looked ok on my end.
See http://builds.jabref.org/install4j7/
#3061 Comment 4:
@chochreiner Thanks for testing. Not sure if I we can disable this, I didn't see an option yet, although I dunno where to look really 😄 
#3061 Comment 5:
The warning looks like this after the second installation/update of Jabref after the installation and before the "File association" step 
I've had a look at the install4j configuration, but I could not find the setting to turn this of.

<img width="512" alt="screen shot 2017-08-01 at 11 33 04" src="https://user-images.githubusercontent.com/134981/28819376-53c67774-76ae-11e7-83ed-1c71b7e50df9.png">
#3061 Comment 6:
x64 works fine for me on Windows!

Just another idea: I think we already discussed that a while ago:
Edit// https://github.com/koppor/jabref/issues/195

Add a page/button to open donations, e..g like in Tortoise SVN:
![grafik](https://user-images.githubusercontent.com/320228/28819918-055a6a80-76b0-11e7-9e75-49f00ed91240.png)

#3061 Comment 7:
@lenhard I don't have an icon for it other than that it would be a 5 minute task 😄 
#3061 Comment 8:
@chochreiner Probably caused by adding this to the Info.plist? 
```
<key>NSSupportsAutomaticGraphicsSwitching</key>
<string>YES</string>
```
#3061 Comment 9:
Or maybe did the deinstallation not work properly?
#3061 Comment 10:
The deinstallation should have worked fine and I would keep the NSSupportsAutomaticGraphicsSwitching attribute, since there may be quite some macbooks around with two graphic cards
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3048 Comment 1:
Can we add a small test for this?
#3048 Comment 2:
There are already tests present which failed before and now succeed
#3048 Comment 3:
Ah right 👍 
--------------------------------------------------------------
#3042 Comment 1:
Thanks for the tip, I will try it out! :)
#3042 Comment 2:
See also this article for an inspiration: https://fxdocs.github.io/docs/index.html#_styleable_properties 
#3042 Comment 3:
The style inheritance works for some items, but not for all (such as context menu items). 

Some of the buttons are defined in FXML and their tooltips are defined in FXML. @Siedlerchr @tobiasdiez Any tipps on how to make the font size customizable for these items? Moreover, how does this work with localization?
#3042 Comment 4:
You should be able to style the context menu (and similar the tooltip) by using appropiate css tags, e.g.
````css
.context-menu {
 -fx-font-size: Globals.prefs.getInt(JabRefPreferences.MENU_FONT_SIZE) + "pt;");
}
````
It is probably enough to specify this once for the entry editor tab.
See https://stackoverflow.com/questions/11127999/how-do-you-set-the-style-for-a-javafx-contextmenu-using-css. 
#3042 Comment 5:
#3034 supersedes this PR, therefore I am closing it.
--------------------------------------------------------------
#3041 Comment 1:
Thanks again for your contribution! 👍 
--------------------------------------------------------------
--------------------------------------------------------------
#3037 Comment 1:
The only thing which does not yet work is ctrl+MINUS, it always decreases the font size although I added the exception here. Did not yet figure out the problem. Maybe @lenhard  can have a look at that, too.
#3037 Comment 2:
Found the problem. The decreasing font size was found first and returned before the entry editor panel constant, because both have the same keymapping
--------------------------------------------------------------
#3033 Comment 1:
Related: https://github.com/JabRef/jabref/wiki/Code-Howtos
#3033 Comment 2:
This is also related: https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#when-making-an-architectural-decision -- no one every did it until now.

I would move everything from the wiki to docs/ and enable gh-pages build from master-branch/docs and render it at https://jabref.github.io/jabref. I think, 90% of the information can be moved, but pages like https://github.com/JabRef/jabref/wiki/Templates and https://github.com/JabRef/jabref/wiki/Acquiring-Contributors should be moved somewhere else.
--------------------------------------------------------------
--------------------------------------------------------------
#3031 Comment 1:
Thanks your for your contribution!  We appreciate that and hope that you will contribute with other fixes as well.
#3031 Comment 2:
Please also consider browsing our other journal lists available via http://abbrv.jabref.org/.
--------------------------------------------------------------
#3030 Comment 1:
Alternative solution without using the deprecated function:

```java
    private Optional<KeyCode> determineKeyCodeFromKeyEvent(java.awt.event.KeyEvent keyEvent) {
        // special treatment of localized KeyEvents
        if (keyEvent.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            return Optional.of(KeyCode.DELETE);
        }
        
        return Arrays.stream(KeyCode.values()).filter(k -> k.getName().equals(java.awt.event.KeyEvent.getKeyText(keyEvent.getKeyCode()))).findFirst();
    }
```

But this only solves the problem for the "delete" key - so we still might have other yet unidentified problems.

So we should decide which route to take ;-)
#3030 Comment 2:
I would give a +1 for @Siedlerchr's solution, since we surely do not catch all possible keys and the maintable is our next target after the entry editor 😇.
--------------------------------------------------------------
#3029 Comment 1:
Sorry, wrong pull request...
--------------------------------------------------------------
#3026 Comment 1:
Is it on purpose that the first job (`TEST_SUITE=check OPTIONS=modernizer`) still runs checkstyle? As of now checkstyle is run twice during the build and thus the build times are increased by about 5 mins. 
--------------------------------------------------------------
#3025 Comment 1:
Thank you very much for your contribution! 👍  
Feel free to take care of any other issues!
--------------------------------------------------------------
--------------------------------------------------------------
#3022 Comment 1:
Thank you for the PR. I think, our checkstyle check will result in errors. We are aware that checkstyle may be seen as annoying (https://github.com/JabRef/jabref/issues/2996). Our aim is to have the same code style over the whole project and thus, we decided to keep checkstyle in place. We currently have no howto hosted at the JabRef dev doc, but the howto at another project shows how to include checkstyle in IntelliJ: http://eclipse.github.io/winery/dev/config/IntelliJ%20IDEA/README.html.
#3022 Comment 2:
Sorry guys, @koppor, @lynyus. Should be fixed on the latest commit. Not very used to all these tools, I'm used to use JIRA, GitLab, and formatting with IDE messed up with style, sorry. I was just doing some class stuff and found the issue (next time, I'll check more carefully the projects' requirements). And thank you very much for the tips!
#3022 Comment 3:
@zacmks Good work! I'll merge this now. Will you open the other pull request for the https maven repository?
--------------------------------------------------------------
--------------------------------------------------------------
#3018 Comment 1:
Hi, thank you for your PR! 
Are you sure you wanted to create this pull request in the main repository?
If so, we need your descriptions in English and a list of changes, intentions, etc.
Feel free to reopen if you want your PR to be reconsidered.
--------------------------------------------------------------
#3017 Comment 1:
The conversion would be the more desirable solution.

But if we don't get the conversion done before the release of 4.0, we might consider to merge it anyway. I'd say: Let's keep this PR open until either someone does the conversion or we want to release 4.0.
#3017 Comment 2:
I assigned https://github.com/JabRef/jabref/issues/3014 to a milestone, so we are reminded that there is some work left.

I will merge this in as it will surely reduce the size of our JAR.
--------------------------------------------------------------
#3016 Comment 1:
I like the guava stuff. I don't see any big advantage in the apache commons stuff which the Guava has not.
And it seems like the Guava has also an Escape method:
https://github.com/google/guava/blob/9b94fb3965c6869b0ac47420958a4bbae0b2d54c/android/guava-tests/test/com/google/common/html/HtmlEscapersTest.java
#3016 Comment 2:
I am also in favor of replacing commons lang with guava. So, if anybody wants to go ahead with this, be my guest.
#3016 Comment 3:
Fun fact:

```
+--- com.microsoft.azure:applicationinsights-core:1.0.+ -> 1.0.8
|    +--- eu.infomas:annotation-detector:3.0.4
|    +--- commons-io:commons-io:2.4
|    +--- org.apache.commons:commons-lang3:3.1 -> 3.4
|    +--- org.apache.httpcomponents:httpclient:4.3.5 -> 4.5.2 (*)
|    \--- com.google.guava:guava:12.0.1 -> 22.0 (*)
```
#3016 Comment 4:
HtmlToUnicode is unfortunately not the same as Escaping HTML:

`&Epsilon;` gets `&amp;Epsilon;` instead of `E` 😄 
#3016 Comment 5:
What I stumbled upon while searching for various commons lang replacements: [Eclipse Collections](http://www.eclipse.org/collections/).

![grafik](https://user-images.githubusercontent.com/1366654/28246162-2fadebe8-6a14-11e7-8ef8-c79d15f3dffe.png)

Maybe, we can reduce our memory by using Eclipse Collections?

I continue that discussion at https://github.com/JabRef/jabref/issues/3023
#3016 Comment 6:
- I replaced most places where we use Apache Commons Lang3 and there is a Google Guava equivalent
- We have some places, where there is no Google Guava equivalent, so I kept that
- I began to use [ArchUnit](https://github.com/TNG/ArchUnit/) for checking that. <s>However, I have</s> I had issues in using the `notAnnotatedWithRule` (see https://github.com/TNG/ArchUnit/pull/19), but these are resolved now.

The ArchRule doNotUseApacheCommonsLang3 reads easy:

    public static final ArchRule doNotUseApacheCommonsLang3 =
            noClasses().that().areNotAnnotatedWith(ApacheCommonsLang3Allowed.class)
            .should().accessClassesThat().resideInAPackage("org.apache.commons.lang3");

<s>However, this rule completely ignores the annotation `ApacheCommonsLang3Allowed` and I have no clue how to solve that.</s>
--------------------------------------------------------------
#3015 Comment 1:
Rumors said that simonharrer uses jcabi-log in current projects. 😇 

## Without this PR

10% time for logging startup

![grafik](https://user-images.githubusercontent.com/1366654/28250925-bc6bd5f4-6a73-11e7-8086-76f72ac013f5.png)


## With this PR

7% time for logging startup

![grafik](https://user-images.githubusercontent.com/1366654/28250899-488a7a46-6a73-11e7-9fd7-485d59886cc4.png)

#3015 Comment 2:
@lenhard You are right, the logging of exceptions changed (not that obviously documented - see https://github.com/jcabi/jcabi-log/issues/68).

    Logger.debug("Error during X", e);

becomes

    Logger.debug("Error during X: %[exception]s", e);

I began to rewrite our code, but I am unsure whether we really want that. Maybe we should write our own static log methods which check whether the last parameter is instance of Throwable, add `: %[exception]s` to the formatting string, and finally delegate to jcabi-log?
#3015 Comment 3:
3% improvement is an improvement, so we should go for it :)

Regarding the exception: I think the way you suggest is the right one. You should write a wrapper class, say `org.jabref.JabRefLogger` with static methods for the different log levels and one for an exception. Then this logger should be used in JabRef. Otherwise we would be duplicating `%[exception]s` all over the code
#3015 Comment 4:
Yes, but instead of checking explicitly for a throwable, just create one wrapper method overlaod which excepts an Throwable as second argument.

#3015 Comment 5:
Done. See [org.jabref.Logger](https://github.com/JabRef/jabref/pull/3015/files#diff-42a62e13854bd284a29625feccd2b3b8). We still (?) have many classes with static methods. https://github.com/JabRef/jabref/pull/3015/commits/0c0d26b004fb3ac947defe77e9ba4ae3eb4c1baf#diff-f64d223f20f6b0e53b00c8dbd2be2ce1R62 I cannot fix that, but just ignore them in the ArchitectureTests.


#3015 Comment 6:
Not sure if changing the interface of such a well-known functionality like logging is really the way to go. Don't you think this will lead to fragmented code as not everyone is used to it?
#3015 Comment 7:
I agree that this is uncommon. However, I think (i) it is more convenient to work without Logger factory, if one wants "gschwind mal was loggen". (ii) We have the architecture test in place complaining if someone uses apache commons logging 😇 .
#3015 Comment 8:
Why is there a problem with using the Logger in static methods? Because you need to provide an instance as the source of the message? If that's the case, why don't you just do something like this: `Logger.debug(MyClass.class, "My log message");`

The style of logging should be the same everywhere, in static and non-static methods. If we can't find a uniform way, logging will just degrade over time and we end up with a mess.
#3015 Comment 9:
jcabi-log needs `this`, because it also provides information on threads. See here for more features: http://log.jcabi.com/

In case we don't want to have this feature, I can rewrite the layer so that `this` does not need passed. Think, then we are at TinyLog. I'm unsure, why we dropped that in another project...
#3015 Comment 10:
Hm, how about at least adding a few methods to the current solution that does not require `this`? So that we can use the new logger also from static methods. That would be a compromise (we get the threading information if we want, but we don't have to). What do zou think? Would that work?
#3015 Comment 11:
I'd still favor keeping the current logging. I don't see too much improvements and a few problems with the new solution.
#3015 Comment 12:
Logger.debug(CurrentClass.class, ...) works. I also like the fact, I can
just do Logger.debug(this, ...) in a class where there currently is no
logger... Maybe an issue for the devcall... 🕺

Am 21.07.2017 12:47 schrieb "Stefan Kolb" <notifications@github.com>:

> I'd still favor keeping the current logging. I don't see too much
> improvements and a few problems with the new solution.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/3015#issuecomment-316970228>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafgJ83J1qffkWA-1V4--CuNb6m-IWks5sQIGsgaJpZM4OY3eF>
> .
>

#3015 Comment 13:
We do want to change the usual way of doing logging for just saving some seconds at the startup time.
--------------------------------------------------------------
#3012 Comment 1:
You are right to do so. I'll merge this directly (although I am the only reviewer), so that we have a clean build again.
--------------------------------------------------------------
#3011 Comment 1:
The failing test is just this library of congress thing, so I'll merge anyway.
#3011 Comment 2:
I changed the eclipse style to have this intended as well
--------------------------------------------------------------
--------------------------------------------------------------
#3009 Comment 1:
Awesome :) I've tested it locally and I have the feeling that startup is faster. I've played around a little with autocompletion, but I don't notice any difference.

However, you somehow have a failing journal abbreviation test now.
--------------------------------------------------------------
#3008 Comment 1:
On my Win7 system, this font seems to be unavailable. I cannot select it in the preferences dialog and resetting the preferences does not help as well.

Maybe the real solution here is to tell the users they should install and configure a font that supports italics? Then, we would solve this issue by documentation?
#3008 Comment 2:
I have removed the font default now. On my win10 system it defaults to "Dialog" and the italic texts are shown.
@lenhard, can you check again what happens on Windows 7?
#3008 Comment 3:
I get a font named "Dialog", but unfortunately no italics.

EDIT: And I have no clue why comment just appeared above those last two commits...
#3008 Comment 4:
@lenhard because my windows system time is broken....
#3008 Comment 5:
So what we need is any font that is available and works on all Windows versions :/
#3008 Comment 6:
I might add something on this.
I agree that not seeing the italics in the title is itself not a big issue (although it would be nice to have it at a certain point in time).
I disagree, however, with the assumption that not many users have `\textit` in their title. Genus and species names in biology have to (!) be written in italics. I guess therefore, that every user that is somewhat affiliated with biology will have articles that have italics in their titles.
#3008 Comment 7:
Why removing the default font? Has "Dialog" more characters than Arial? OK, could be OK for me...

However, I checked stackoverflow: [embedding a font in Java](https://stackoverflow.com/q/4487871/873282) and also [that](https://stackoverflow.com/a/8365030/873282).
#3008 Comment 8:
It seems that there is no font that we can embed perfectly.
#3008 Comment 9:
@AEgit As you've probably read already, we won't do more changes here. Ultimately, this is a problem of the capabilities of the fonts installed in the underlying operation system. So it is a little out of the reach for JabRef to do much about it. In newer OSs, Win10 for instance, there seem to be plenty of fonts that can handle Unicode. If you're on Win7, there's Cambria Math that does the trick.
#3008 Comment 10:
Hmmm, couldn't you just use a font that is already part of the respective operating system (i.e., without installing a new one), that is capable of handling Unicode? So, e.g. in Windows 7, JabRef would default to "Cambria Math" as default font, and in Windows 10 to any other font you mentioned (I'm on Windows 10 so I guess I should have less issues).
#3008 Comment 11:
Nevermind, I see, that's exactly what you have done in the current development version:
JabRef 4.0-dev--snapshot--2017-07-19--master--2f12fecfb
Windows 10 10.0 amd64 
Java 1.8.0_141

Cheers and thank you very much!
#3008 Comment 12:
For summary: LIst of fonts supporting Math Unicode blocks (For MacOS apparently FreeSerif works good)
http://www.fileformat.info/info/unicode/block/mathematical_alphanumeric_symbols/fontsupport.htm
--------------------------------------------------------------
--------------------------------------------------------------
#3006 Comment 1:
Why?

This improves our code quality. If not the author, who else will clean up the code?

Which checkstyle rules are annoying?

We all know  (do we?) that JabRef's code was (and still is) a mess (at some places). I strongly believe that checkstyle rules are one solution to the problem.
#3006 Comment 2:
I give it a go. If the active developers don't see any value in checkstyle checks, I give it a go.

Refs https://github.com/JabRef/jabref/issues/2996
#3006 Comment 3:
Well, also I think checkstyle warnings are annoying, they necessary. And it's not much work when you just have to press ctrl+f in eclipse to do it.
The only thing I am not happy about is that sort order of declarations. That could create problems when initializing fields.

#3006 Comment 4:
Hey @koppor, the intention is not to abolish checkstyle, but to improve the coding experience.

When working on a PR, the most important thing are the unit tests to pass. When executing gradle check it takes 59 secs to only compile the java code and run the checkstyle tests. If there is ANY problem because I didn't hit the code formatter the build will abort at this point and the tests are not executed. (see also https://github.com/JabRef/jabref/issues/2996#issuecomment-314397544) That's why suggested to make them optional. Of course they should be adhered before merged into master.

In an ideal case they SHOULD fail on travis, but not locally. Does anybody know if that's possible in an elegant way?
#3006 Comment 5:
If I recall the discussion correctly, then we agreed on the following: The build should execute even if their are checkstyle warnings (so that you get feedback on the tests), but it should still fail. Is this what this PR achieves?

I hate checkstyle and complain all the time, but I concede that the rules improve code quality.
--------------------------------------------------------------
#3005 Comment 1:
Discussion @Siedlerchr with @tobiasdiez required.
#3005 Comment 2:
Dialog only for edit and not for adding linked files (for this: just create a new linked file instance with path to file and empty directory)
#3005 Comment 3:
Failing tests are only the l10n ones from the maintable branch
#3005 Comment 4:
Yeah, I thought I could get rid of the old classes completely, but that has to wait for a future PR. As far as I remember it's used in the import inspection window (lot of ugly code) 
#3005 Comment 5:
@tobiasdiez  I tried to convert the EditfileDialog to the new dialog structure from #3880  but I do still get an NPE on loading the dialog:
```
caused by: java.lang.NullPointerException
	at org.jabref.gui.filelist.LinkedFileEditDialogView.initialize(LinkedFileEditDialogView.java:55) ~[main/:?]
```
#3005 Comment 6:
And what is null there? If line 54 runs without any problems, then the setup seems to be fine and the FXML nodes are injected. Maybe the `description` field is not defined in the fxml?
#3005 Comment 7:
@tobiasdiez  No, it fails directly in the initalize, The viewModel which gets initialized in the ctor is null.
When debugging it crashes directly after/when calling `ViewLoader.view(this)
                  .load()`
Btw, I noticed the same problem also occurs with the CopyLinkedFilesDialogView (Tools->Copy LInked Files)

#3005 Comment 8:
ok, this makes sense since the `initialization` method is called during `ViewLoader.load` and at this point the view model is not yet created. Just move the `viewModel = ...` line to the beginning of the `initialization` method and it should work.
#3005 Comment 9:
Works now.  I just additionally  had to add a close/cancel button to the dialogPane, for the copyFiles  because otherwise the dialog is not closeable: https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html
#3005 Comment 10:
I fixed all things open and did the renamings.  So  I merge this now
--------------------------------------------------------------
--------------------------------------------------------------
#3003 Comment 1:
I've tested it locally and like it! I was skeptical first as to how well this will actually work with autocompletion, but the solution is good. The configured selectors are directly offered the instant I click into the field in the entry editor. In my point of view, this is a full replacement for a drop down menu and way more handy.

Nevertheless, we will have to explain that to the users when we publish 4.0 :) Otherwise, they will open JabRef, see no drop down box, and get angry. So this should definitely go into a blog post.

The code looks fine overall. This is a situation where FX really beats the old swing implementation. Good job overall!
#3003 Comment 2:
Thanks for the praising words 😄 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3000 Comment 1:
Copy/Cut/Paste works fine with the command key 👍  
--------------------------------------------------------------
#2997 Comment 1:
I'd say this is a hack. Whereas it is better than missing a changed state for now, we should only mark the DB as dirty if we really changed something.
#2997 Comment 2:
I'm also not very happy with this solution from an architectural view: why should the gui handle the dirty/clean state and not the logic? I would propose to add listeners to the database/metadata in `DatabaseContext` which sets a corresponding flag. The UI can then listen to changes of this new property and display the star in the tab accordingly.
#2997 Comment 3:
The databaseChangedEvent is already realized with the EventBus system, so it just needs a couple of listeners if I understand it correctly. And one event bus can have multiple listeners for the same event
#2997 Comment 4:
Ok, I see. So far it had been implemented only in the BasePanel, but I aggree that the cleanest solution is probably to track it in the database itself. This won't be as quick as the current solution, though :)

The consensus seems to be that we are not going in this direction, so I'll close this PR.


--------------------------------------------------------------
--------------------------------------------------------------
#2994 Comment 1:
Hi @mpele 

Thanks for your take on this! Unfortunately, the current version will not do. If you shutdown the AutoSaveManager and the BackupManager, then there won't be any autosaves or backups anymore and this is not what we want here.

As far as I can see, the way to go would be the following:
 1. Check if the save as operation actually uses a different file path than the old one
 2. If this is true and the save operation is successful, remove the old .sav and .bak files explicitly
#2994 Comment 2:
@lenhard, as I tested it works. After SaveAs new .sav file is created (AutosaveManager and BackupManager are restarted later in lines 351 and 356). 

#2994 Comment 3:
I see, my bad! It sure makes sense to disable the two managers for the old file location. 

But the problem that remains is what if the save operation fails? Then, autosave and backup will no longer work for the old file. I still think it would be better to have a cleanup phase after the safe operation has been successful, i.e., shutting done the obsolete managers and removing any unnecessary files.
#2994 Comment 4:
Hi @lenhard,
Is the proposed code acceptable? Right now the shutdown of AutosaveManager and BackupManager is done if the save operation is successful. 

 
#2994 Comment 5:
I've gone through #2947 and the code seems to solve the problem: The sav file is gone and the user is no longer asked if he wants to restore a backup when opening the old file. 

On looking at the code of BackupManager and AutosaveManager, I am a little unsure why we restart them to begin with, but that is not your problem here. So from my side the code is good to go. 

We have the policy that two of the developers need to review every pull request before it is merged. So could somebody else from @JabRef/developers have a look at this?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2978 Comment 1:
I don't have time right now to have a closer look, so just a very quick remark/question: 
I think that up to now changes were actually stored correctly. The reference to the root group was passed from the metadata to the group view model and thus changes from the later class should propagate back and update the metadata automatically. But if you create a new database, then the root was actually null (instead of empty) and thus the whole procedure broke down.

So I'm not sure if this explicit update is really necessary. But if its works we can also just merge it :-). Thanks anyway for having a look at this issue!
#2978 Comment 2:
Tested it locally and now the group information is stored when you create a new db, Importing works also.

--------------------------------------------------------------
--------------------------------------------------------------
#2971 Comment 1:
I readded the plus signs between. To make it work in entry editor and swing the keybindings have to be reset once/or just set new
#2971 Comment 2:
> To make it work in entry editor and swing the keybindings have to be reset once/or just set new

Would it be possible to automate this as a preferences migration?
#2971 Comment 3:
Yeah, I also thought about that.
In fact it's just a simple find and replace
Replace modifier followed by whitespace with modifier followed by plus sign


Am 06.07.2017 10:40 nachm. schrieb "Matthias Geiger" <
notifications@github.com>:

> To make it work in entry editor and swing the keybindings have to be reset
> once/or just set new
>
> Would it be possible to automate this as a preferences migration?
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2971#issuecomment-313513136>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5AqVQWY2tIRoVV7Z3QywL95PLCn-ks5sLUZOgaJpZM4OOQVG>
> .
>

--------------------------------------------------------------
#2965 Comment 1:
codewise it looks good so far. But I have not yet tested it
#2965 Comment 2:
If played around a little with a running JabRef. When I enabled the autocompletion in the preferences, first my entry editor seemed to have crashed. Clicking around in it had no effect and eventually it closed. When I reopened it, the autocompletion was working fine. So that doesn't seem to be a blocking issue.

I have to say that I quite like the dropdowns :) This looks way better than the old autocompletion functionality! But before this goes life, the search should be fixed as well. When I start entering terms there (for example the letter `N` in some bibliography of mine) it is giving me expressions of the form `Author{firstPart='Norman E.', firstAbbr='N. E.', vonPart='null', lastPart='Fenton', jrPart='null'}`.
#2965 Comment 3:
Thanks for the feedback.
The search bar now should work again. Since I don't expect that someone has the desire to review the 3k line differences, I'll merge this PR now. However, as usually, if you find some problematic code I commit to fix it.
--------------------------------------------------------------
#2959 Comment 1:
Ah good one!
#2959 Comment 2:
LGTM, no idea why freecite fails
--------------------------------------------------------------
--------------------------------------------------------------
#2952 Comment 1:
LGTM. I just removed the comment that contained the non-working code (we had a discussion about such code and decided to almost always remove them as JabRef was cluttered with these kind of comments).

Can you please fix the import order (see wiki on how to set-up your IDE) and then this is ready to go.

We should think about reimplementing the `ClipboardManager` using the JavaFX facilities. Follow-up PR in this direction is highly welcome :-).

Thanks again for you contribution!
#2952 Comment 2:
@Siedlerchr Thanks for the comment. I was not aware of the issue. :+1: 
@tobiasdiez Thanks a lot for telling me the configuration file. :+1:  But, I'm not sure if I did it correctly, because the only change was an addition of a blank line (-_-;). If something has to be done again, please let me know.
#2952 Comment 3:
Everything is fine now. Thanks!
--------------------------------------------------------------
#2943 Comment 1:
I've no idea why the build fails, but since these changes should not be the reason for the failing test I'll merge it now.
--------------------------------------------------------------
#2939 Comment 1:
We can change the text always laster, but I suggest we leave it for the moment to have the functionality
#2939 Comment 2:
I just noticed that in the right click menu it is still `Permanently delete the local file` which is kind of confusing as you later get the option to decide wheter to delete the file or just the link. So to options:
a) provide two context menus for "Unlink" and "Delete local file" but not the dialog you added in this PR or
b) rename also the context menu entry

Can you please have a look and provide a follow-up PR? Thanks!
#2939 Comment 3:
Yes, but the dialog is still necessary when you hit the del key


Am 29.06.2017 1:33 nachm. schrieb "Tobias Diez" <notifications@github.com>:

> I just noticed that in the right click menu it is still Permanently
> delete the local file which is kind of confusing as you later get the
> option to decide wheter to delete the file or just the link. So to options:
> a) provide two context menus for "Unlink" and "Delete local file" but not
> the dialog you added in this PR or
> b) rename also the context menu entry
>
> Can you please have a look and provide a follow-up PR? Thanks!
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2939#issuecomment-311940128>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5G6RMQNUHQGh4xkMr8j02uFIz4pKks5sI4uJgaJpZM4OETkA>
> .
>

--------------------------------------------------------------
#2937 Comment 1:
This makes the "Add new entry" dialog working again: I can paste DOIs. This is a necessary hotfix and therefore, I merge before we got another review.
--------------------------------------------------------------
--------------------------------------------------------------
#2934 Comment 1:
Dear @jhshinn. Also thank you from my side for your contribution. We are aware that writing tests is not as much fun as writing new code. During the development of JabRef we learned that tests are really vital: If we modernize the code, tests ensure that all functionality remains correctly in place. Further, this is some sort of documentation to enable other developers learning how the code works.

So, please, please, follow @tobiasdiez's request to add test cases. Would that be possible?
#2934 Comment 2:
Dear @koppor. Thanks a lot for your detailed exlanation. I've been busy recently, and had no time to deal with the requested revisions. I'm a newbie in java coding and used to be a far-far-end-user of JabRef. I've never done the *test* coding before, but I'll try to do it. When I need some help, I'll post again. 
#2934 Comment 3:
@tobiasdiez @koppor I've added a test for pagePrefix. Could you check if it is ok?
#2934 Comment 4:
Perfect, thanks! I'll merge it now.
--------------------------------------------------------------
#2926 Comment 1:
Unsurprisingly, I am very much opposed to this. We are reverting many structural improvements after all the effort we invested into getting the GUI dependencies out of the model.

I already grudgingly admitted the `iconCode` into the model, but I won't do the same with a `MaterialDesignIcon`. It's not too hard to extract a class into gui that maps `iconCode` to `MaterialDesignIcon` for the groups. I did something similar when I refactored the special fields. Please go for a similar route here.
#2926 Comment 2:
In this case we should store (and save in the bibfile) the icon not as the unicode but using the icon name.
#2926 Comment 3:
I moved the code to the ViewModel in GUI and it is called on getIconCode().
The icon name e.g. `facebook `or whatever you enter is stored in the IconCode field and now also displayed when you edit the group description

#2926 Comment 4:
Thanks. I did some small further changes so that now the icon name is used instead of the unicode (I think this is results in a more readable/compatible serialization in the bib file and I doubt somebody already managed to specify an icon :-) )
--------------------------------------------------------------
#2923 Comment 1:
Hm, that's strange,  I will go deeper in this
Edit// I tested in on Windows 10 and I could change the key combination and after a restart of JabRef the new keybindings did work. 
#2923 Comment 2:
I did some debuging and it turns out that it's the fault of `KeyBindingRepository:getKeyCombination`.
JabRef constructs the `KeyCombination` via the `valuesOf` method, e.g. as `KeyCombination.valueOf("ctrl C")`. However, the correct format for the `valueOf` method is with a plus sign: `KeyCombination.valueOf("ctrl+C")`. In the first example the key combination has as character `ctrl c` and no modifiers active, while in the second case we get the expected result that the character is `c` and the modifier `ctrl` is down.
#2923 Comment 3:
Ah thanks for the debugging. I will try to fix this
#2923 Comment 4:
I fixed this stuff and added the modifiers and now all tests (including previouslly ignored) work 
--------------------------------------------------------------
#2921 Comment 1:
Codewise looks good, but you do have an architectural violatin, your model class depends on gui:
` import org.jabref.gui.externalfiletype.ExternalFileType; `

And I tested it locally. Apart fromt he keybindings problem it works. But I found one bug.
I can not delete a file entry which has no underlying file 
Just add this line in your bibdatabase and try to delete the entry then:
```
file= {:Kitamura2009 - A Supporting Tool for Requirements Elicitation Using a Domain Ontology.pdf:PDF},
```

it gives you an error message File not found
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2914 Comment 1:
If you look into the test classes, there is already one method for findFiles in the RegExp, so you can take this as a starting point. If you have any further questions, feel free to ask.
And many thanks for your contribution 👍 
#2914 Comment 2:
Thanks for the feedback. I added two tests, both failed without the change, but succeed now.
#2914 Comment 3:
Thank you very much for your contribution! I merge it in now!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2895 Comment 1:
give me a sec before merging, I am just writing another test to avoid this issue in future
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2889 Comment 1:
Any binairie install plane? I can't create mine from jabref.install4j because i need a 'Windows key store'. I don't get what it means but I really need this update.
Thanks :)
#2889 Comment 2:
This fix is already part of 4.0-beta2 or the recent Dev builds which can be downloaded here: https://builds.jabref.org/master 

So you don't need to build JabRef on your own.

Best,
Matthias
#2889 Comment 3:
Thanks for your (amazing) fast answer.
Actually, i was speaking about Jabref 3.8. I tried 4.0-beta 2 but there are still some bugs (especially group display) and it crashes frequently.
The comit 28222e2 fixes DOI's problem for Jabred 3.8 (3.8.3 in the changelog) but it seems it's not distributed yet.

Thanks :)
#2889 Comment 4:
We are very interested on a 3.8.3 version for Gentoo too.
#2889 Comment 5:
I don't think we will release a 3.8.3. The only active branch and release version will be 4.x.
#2889 Comment 6:
Is there a special reason for that? It does not seem that the 4.x tree will have the stability of 3.8.x in the near future. We have many users who were interested in working on 3.8.2, but need doi. We provide 4.x now for the interested hacker on Gentoo with every new snapshot. But for now for example the snapshot is very broken and 4.0 release freezes when dragging to a group.
Is the procedure for 3.8.2 and 3.8.3 not the same? Are all old developers gone?
#2889 Comment 7:
Resources, ancient & hard to maintain technology.
#2889 Comment 8:
@jonasstein Regarding the freeze when dragging to a group, one thing just came to my mind: What is the look and feel you are using? We had a few Linux users who experienced freezes with the GTK look and feel. Switching to a different look and feel (e.g. plastic) effectively solved their problem. Does that maybe also help in your case? If so, the trivial solution would be to set a different default look and feel on Linux. Maybe the solution is also too hidden in the documentation: https://help.jabref.org/en/Installation#freezes-when-running-jabref
#2889 Comment 9:
It was this one:
![selection_383](https://user-images.githubusercontent.com/298682/32316408-54f2af78-bfb0-11e7-815f-0e77ccfb7c2b.png)

Which is gtk? I would love a real classic gtk look. The "modern" design may look interesting but are not so ergonomic for office work in my opinion.
I found that bug too and tried also all others. But this did not change the freeze.
![selection_384](https://user-images.githubusercontent.com/298682/32316453-91164f46-bfb0-11e7-9465-66c16a678bae.png)
in the second picture we see also #3391
#2889 Comment 10:
Ok, too bad. Thanks for testing!
--------------------------------------------------------------
--------------------------------------------------------------
#2883 Comment 1:
Thanks for your contribution, @hakova!
#2883 Comment 2:
On Tuesday, June 6, 2017 5:57:50 PM CDT Linus Dietz wrote:
> Thanks for your contribution, @hakova!

You are welcome!

--------------------------------------------------------------
--------------------------------------------------------------
#2878 Comment 1:
Based on the comments of @kafran, I have made some more changes. I think this PR is ready now.
--------------------------------------------------------------
#2877 Comment 1:
Yes, why not. When a new fetcher will be created, we will have to ensure, the code is tested. The functionality used outside the fetchers is surely covered using other tests.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2873 Comment 1:
Thanks! You still have the hard wrap at a certain line length on, don't you 😄 ?
--------------------------------------------------------------
#2865 Comment 1:
Just check the coday issues (scoping + default constructor) and its ready for merge
--------------------------------------------------------------
#2864 Comment 1:
Thanks for the positive feedback.

I'll fix the "not mark as dirty" issue as part of #2787 as in my opinion the cleanest solution for this is a global listener (instead of manually calling `markAsChanged` after every action).
--------------------------------------------------------------
#2862 Comment 1:
Change the code to optionals. Merge it in now
--------------------------------------------------------------
#2861 Comment 1:
Thank you very much for your contribution. From my side the code looks good. When another dev gives his okay, we can merge it
#2861 Comment 2:
Is there a test added?

Am 23.05.2017 09:01 schrieb "Christoph" <notifications@github.com>:

> Thank you very much for your contribution. From my side the code looks
> good. When another dev gives his okay, we can merge it
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2861#issuecomment-303320496>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafkwGo_YOJ-ZuphhmQfvT-_lGQq73ks5r8pJzgaJpZM4NjSqx>
> .
>

#2861 Comment 3:
@koppor Do you mean the stuff under build/test-results/test/ directory? (created after running `./gradlew check`)
+++ updated
@koppor I confused the meaning of "Tests". I had thought I had to upload some test results created by running `gradlew check`. I've modified the checkbox accordingly (Thanks a lot, @lynyus ).
#2861 Comment 4:
I'd like to take this opportunity to thank all the JabRef developers for their excellent jobs. JabRef is getting wonderful and wonderful! The contribution guide is clear and easy to follow as well. I'm a newbie in Java coding and github things, but I didn't have much trouble. I'm happy I was able to make some contribution.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2845 Comment 1:
Thanks for the feedback. I fixed all the issues mentioned except preference changes still don't trigger a refresh of the view. We just don't have a convenient interface to listen for changes in preferences and I rather not give the preference tab direct access to the groups functionality.
#2845 Comment 2:
Agreed! The missing update after the preference change is relatively minor and I'd rather see effort invested into other things.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2840 Comment 1:
This PR is now ready-for-review. There are still some points that can be improved but I think for now this is ok:
- Auto-completion to make it easier to add a new crossref.
- Popup over linked entry with further information and a button that lets the user jump to this entry in the main table.
--------------------------------------------------------------
#2838 Comment 1:
I think I have incorporated most of the feedback by now.

What remains an open for discussion is actually the use case behind this feature which brings us to the question which information should go into the lucene search index and which shouldn't.

Currently the following is indexed:
  * The entry UID (Not searchable, but potentially useful to map back to the BibEntry)
  * The CiteKey from the BibEntry
  * The Author as stated in the PDF metadata
  * The content of the PDF
  * The Title as stated in the PDF metadata
  * The Subject as stated in the PDF metadata (redundant with Title?!)
  * The Keywords as stated in the PDF metadata
 
We could add more information from the BibEntry (like the name of the linked PDF file or the Name of the Journal/Conference) if you think this makes sense. Also if we cannot extract all metadata from the PDF does it make sense to use the ones from the BibEntry (i.e., keywords).

Also we really must decide how this PDF search relates to the existing JabRef search. I would be interested in what your original thoughts were, @koppor!
#2838 Comment 2:
4.0 has been release and 4.1 is not far off.

What is missing to integrate this in master? A parallelization of the indexing process and the integration of the search in the UI, right?
#2838 Comment 3:
- [ ] indexing in the background
- [ ] separate search to enable the normal search box for table search. This somehow contradicts OneNote, but we think, separation is good.
#2838 Comment 4:
Ping :)

Any chance of getting this into master before JabCon? I'd hate to have to move this to 4.3.
#2838 Comment 5:
It seems that @LinusDietz is not going to continue with this. Unless someone else steps in, we'll have to close it.
#2838 Comment 6:
Neither me not anyone else has time to get this done. Closing.
--------------------------------------------------------------
#2836 Comment 1:
@motorcyclist Thanks for your contribution!
--------------------------------------------------------------
#2835 Comment 1:
@motorcyclist Unfortunately, I don't know anyone close to the development team who is fluent in Greek, so I don't know how we could help you :-/ 

Are you planning to add more translations? If yes, just keep doing and we can keep this open. If not, we can merge it into master. A little bit of translation is better than no translation.
#2835 Comment 2:
@motorcyclist Which kind of help do you need? If it is about continuing the translation, you may post your request here: http://discourse.jabref.org
#2835 Comment 3:
@lenhard that's okay. Thank you for trying to help. In that case I will be adding new translation bit-by-bit and hope consider putting it in next jabref version... 
One other think...Why jabref_el.properties isn't approved? I had 2 pulls...one for the menu and one for the statements.
#2835 Comment 4:
@motorcyclist Ok, good to know! Just keep on adding translations and we will merge in whatever is there directly before we release v4.0 (no fixed date yet).

Also, no worries: Your changes to jabref_el.properties are approved. You can view the changes by @stefan-kolb  here: https://github.com/JabRef/jabref/pull/2835/commits/f60967651fafcdfa25ba4bba06147ee8c3944d5b
All he did was to delete the file header that your editor probably wrote in there. The translations themselves are fine.
#2835 Comment 5:
I would argue that the PR should be merged now, and @motorcyclist should open a new PR for the next chunk he wants to translate.
See Issue https://github.com/JabRef/jabref/issues/2893
--------------------------------------------------------------
--------------------------------------------------------------
#2826 Comment 1:
I found the problem. It was not due to preferences, but due to an empty filename which would create a folder outside the junit tmp dir and would stay persistent. 
--------------------------------------------------------------
#2824 Comment 1:
Please have a look at the codacy issues (declare the HasBiMaps private) and then it's a go
--------------------------------------------------------------
#2819 Comment 1:
I'm ok with that. It's funny tho that the term 'related' does not really fit the actual results of Mr.Dlib right now ;)
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2813 Comment 1:
Just a thought: Can we wait with merging that until after the final v4.0 release?

I really like your work and am happy with the effort you put into updating the GUI, but I think that it is time for a regular release and there I would rather like to see something stable and tested. There might be some hidden problems in the new version of the entry editor that we only find out after a longer period of actually using it.
#2813 Comment 2:
@lenhard you are right. My timing was a bad when I started to change all the entry editors to JavaFX. Should have waited until the release of 4.0 and/or worked on a separate branch. 
But now that almost all field editors are already converted, this PR kind of finishes the redesign on the entry editor (there are still some smaller features missing, that I will reimplement in further PRs). As the changes in this PR are relatively small in comparison to last PRs I would vote to still merge it.
#2813 Comment 3:
Ok, in this case, I'd like to see some small improvements before merging. Here is how it looks like for me atm:
![jabref](https://cloud.githubusercontent.com/assets/1515701/25794655/3478dffc-33d2-11e7-9d54-06f8cbbb1f98.png)

Could you make sure that:
 - the field names are not cut in the entry editor?
 - there is at least one point of space between the sidebar right next to the entry editor and the field names? I mean a whitespace between the sidebar and, for example, the text "Volume". Otherwise it looks as if the text is glued to the sidebar
 - the icons you use for the buttons in the entry editor follow the color scheme of JabRef? Right now, they are all just black.
#2813 Comment 4:
Maybe we should do a "release candidate"? -> JabRef 4.0-rc1 😇 
#2813 Comment 5:
@lenhard thanks for the feedback. I now fixed all the points you mentioned except the color. The problem is that currently the color is controlled via preferences while JavaFX prefers the color scheme as a css file (the JavaFX colors are defined in [Main.css](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/Main.css)). Thus the easiest solution is to wait until most of the swing stuff is replaced and then allow the user to configure the look by editing the css file.
#2813 Comment 6:
Then we need a pretty damn good way of modifying the css file via the JabRef gui ;-) What does our "color expert" say to all of this? @matthiasgeiger 
#2813 Comment 7:
At least during development or however, there is a cool app that allows you to change the css at runtime: https://github.com/McFoggy/cssfx
--------------------------------------------------------------
--------------------------------------------------------------
#2798 Comment 1:
I merged this PR now so that I can continue working on the editor stuff. Further feedback will of course be incorporated. 
--------------------------------------------------------------
--------------------------------------------------------------
#2794 Comment 1:
Could you please add a test? The IEEE-Tests we already have do not cover this fulltext finder 
#2794 Comment 2:
@Siedlerchr Unfortunately it has a lot of GUI and Preferences interdependencies. As it seems we do not have tests for any of those query fetchers yet?!
#2794 Comment 3:
Of course we have some test for those fetchers - but only for those which have been rewritten to the new structure, e.g., https://github.com/JabRef/jabref/blob/master/src/test/java/org/jabref/logic/importer/fetcher/DBLPFetcherTest.java which tests https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/logic/importer/fetcher/DBLPFetcher.java
#2794 Comment 4:
Yes, I was talking about the old ones!
#2794 Comment 5:
Is there an Issue for rewriting those; tagged with "beginner"? 😇

Am 26.04.2017 12:14 schrieb "Stefan Kolb" <notifications@github.com>:

Yes, I was talking about the old ones!

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
<https://github.com/JabRef/jabref/pull/2794#issuecomment-297335649>, or mute
the thread
<https://github.com/notifications/unsubscribe-auth/ABTaftFGcQGu7JpKoGIuuXBs8NjIzm7sks5rzxkYgaJpZM4NHfef>
.

#2794 Comment 6:
Tried to add a test, but got stuck with so many dependencies and calls on different Preferences classes :(
--------------------------------------------------------------
#2793 Comment 1:
Thanks for the quick follow-up and I really like the solution with paramaterized tests (and the fact that you wrote tests in the first place!). 
--------------------------------------------------------------
--------------------------------------------------------------
#2781 Comment 1:
This also fixes #2755 
#2781 Comment 2:
Actually I **do** use the double click feature a lot! I found it in the documentation page for timestamp https://help.jabref.org/en/TimeStamp.
I find it very handy to set the urldate field and, in particular, for setting the timestamp field. My setting for timestamp is "yyyy.MM.dd HH:mm", however the date picker (up to v 4.0.0 beta) with the "today" button set the field with the correct format but at midnight: e.g. 2017.04.23 00:00. The double click instead correctly set hours and minutes.
I tested the development version JabRef-4.0.0-dev--snapshot--2017-04-22--master--059f805e6.jar and the new date picker does not work when setting timestamp with my current setting:

`Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: HourOfDay
	at java.time.LocalDate.get0(Unknown Source)
	at java.time.LocalDate.getLong(Unknown Source)
	at java.time.format.DateTimePrintContext.getValue(Unknown Source)
	at java.time.format.DateTimeFormatterBuilder$NumberPrinterParser.format(Unknown Source)
	at java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(Unknown Source)
	at java.time.format.DateTimeFormatter.formatTo(Unknown Source)
	at java.time.format.DateTimeFormatter.format(Unknown Source)
	at org.jabref.gui.fieldeditors.DateEditorViewModel$1.toString(DateEditorViewModel.java:24)
	at org.jabref.gui.fieldeditors.DateEditorViewModel$1.toString(DateEditorViewModel.java:19)
	at com.sun.javafx.scene.control.skin.ComboBoxPopupControl.updateDisplayNode(ComboBoxPopupControl.java:424)
	at com.sun.javafx.scene.control.skin.DatePickerSkin.handleControlPropertyChanged(DatePickerSkin.java:141)
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197)
	at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55)
	at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89)
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361)
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81)
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105)
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112)
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146)
	at javafx.scene.control.ComboBoxBase.setValue(ComboBoxBase.java:150)
	at com.sun.javafx.scene.control.skin.DatePickerContent.selectDayCell(DatePickerContent.java:689)
	at com.sun.javafx.scene.control.skin.DatePickerContent.lambda$createDayCells$174(DatePickerContent.java:731)
	at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218)
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238)
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)
	at javafx.event.Event.fireEvent(Event.java:198)
	at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3470)
	at javafx.scene.Scene$ClickGenerator.access$8100(Scene.java:3398)
	at javafx.scene.Scene$MouseHandler.process(Scene.java:3766)
	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485)
	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762)
	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:381)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:295)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$354(GlassViewEventHandler.java:417)
	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389)
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:416)
	at com.sun.glass.ui.View.handleMouseEvent(View.java:555)
	at com.sun.glass.ui.View.notifyMouse(View.java:937)
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
	at java.lang.Thread.run(Unknown Source)
`

On Windows 10 64 bit:

`java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)`


Changing the timestamp settings to "yyyy.MM.dd" it works (but useless for me).





#2781 Comment 3:
Thanks @ambro2 for the feedback. I just fixed the support for timestamps that include hours and minutes. You may try out the version from builds.jabref.org/fixt/ or wait a few days until it is merged in to [the development version](https://builds.jabref.org/master/).
--------------------------------------------------------------
#2778 Comment 1:
Please change method name, resolve the conflict and then merge.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2771 Comment 1:
Thank you for your contribution! It is now the case that we have two solutions for this problem, yours and https://github.com/JabRef/jabref/pull/2764.


#2771 Comment 2:
Thank you for your interest in contribution. Unfortunately for you I fixed that particular bug yesterday.  ;)
But there are plenty of more things you can do if you look at the issues. If you need help at any point, feel free to ask

--------------------------------------------------------------
#2768 Comment 1:
In general LGTM but please have a look at the fetcher test, there seems to be some NPEs occuring wich maybe related to this PR/the mocking
#2768 Comment 2:
Thanks for you feedback!

Ups, I forgot to fix the fetcher tests. This is done now, except that the ISBN Chimbori fetcher seems to be totally broken (@koppor this is your baby, right?) 
#2768 Comment 3:
I merge this now. Please open a new issue for the ISBN fetcher.
--------------------------------------------------------------
#2767 Comment 1:
TODO: Find a way to change ImportFormat
--------------------------------------------------------------
#2765 Comment 1:
@snisnisniksonah, I have added a [WIP] tag to the title to indicate that this PR is still work in progress. Please remove it when you want feedback for this PR.
#2765 Comment 2:
@snisnisniksonah Could you try to adapt the IntelliJ code style accordingly (https://github.com/JabRef/jabref/tree/master/config)?
--------------------------------------------------------------
#2764 Comment 1:
I don't think is possible as this is some internal java definition in the
background which all work on File instead path
Otherwise the cast would have been Successful at first

Am 19.04.2017 3:54 nachm. schrieb "Tobias Diez" <notifications@github.com>:

> *@tobiasdiez* requested changes on this pull request.
>
> Can we convert DataFlavor.javaFileListFlavor to always use Paths instead
> of Files? If not, then the fix looks good to me.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2764#pullrequestreview-33504287>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5IG5sg3VJNrQCKqPn2qpkOYuDblIks5rxhIjgaJpZM4NBoP_>
> .
>

--------------------------------------------------------------
#2763 Comment 1:
Thank you very much for your contribution! 👍 
--------------------------------------------------------------
#2759 Comment 1:
Looks okay to me. Would be nice if you could add some screenshots
#2759 Comment 2:
@JabRef/developers Whereas I like the work that is done here, it is a step back from the current UI. Some functionality is missing other functionality is not as accessible as before. 
Not sure if I like that the descriptions are gone. It's not intuitive anymore what the Buttons do and the Icons are not self explaining...
We should have discussed this at least shouldn't we?

As an example:
Before:
![image](https://cloud.githubusercontent.com/assets/2141507/25239601/ba1e6432-25f0-11e7-9860-6a9ea13efce4.png)

After:
![image](https://cloud.githubusercontent.com/assets/2141507/25239568/a4a1a0d8-25f0-11e7-9a59-4cf0efeabc58.png)

#2759 Comment 3:
@stefan-kolb  I think the buttons are now setup as icons here. 
#2759 Comment 4:
I agree with Stefan. It seems that the crossref, file, and timestamp field editors are missing certain functions.

Also if the text on the buttons is gone, then we at least need the tool tips.
#2759 Comment 5:
@stefan-kolb as outlined in the previous PR, I will convert each editor peu à peu and in the end the full functionality should be restored. For the text buttons vs icons, we should probably discuss this in the devcall.
The icons have indeed tooltips. 
--------------------------------------------------------------
#2758 Comment 1:
Thank you very much for your contribution, but unfortunately you seem to have some duplicated and obsolete keys which you must remove from your file:
`Export_with_selected_format, Remove_entry_selection_from_this_group`

And these ones are duplicated: `Remove_entry_from_import, Donate_to_JabRef, From_import, Discard_changes, Filled, Field_is_missing` which have to be removed.

it would be nice, if you could fix this. If you need help, then we can help you.

#2758 Comment 2:
Thank you for the large update!

Could you eventually also check all strings containing "library". Pre-4.0 used to use "database", which we decided to change to "library". Can you adapt these things, too? (Refs https://github.com/JabRef/jabref/issues/2095)
#2758 Comment 3:
@koppor @saivert Well, I've revisited the files and I've updated all the strings. As always, I have some problems while fighting with git :) , so maybe It's better to attach the files to this message. 
[JabRef_es.translation.zip](https://github.com/JabRef/jabref/files/942185/JabRef_es.translation.zip)

By the way.. I though that new strings to be translated appeared appended to the file.. it looks like it isn't this way, so I have translated many _hidden_ strings. Next time I'll look for untranslated strings in all the file.

Cheers

jorge


#2758 Comment 4:
@jtornero Thanks again for the contribution. I took care of the git stuff in #2773 
Please have a look there
 To find untranslated strings you can use a regular expression search like  `=\r\n (or =\n)` in a text editor 
#2758 Comment 5:
@Siedlerchr Yes, that's the way I use to do it. Thanks.
--------------------------------------------------------------
#2754 Comment 1:
@JabRef/developers Again, I really like what you are doing!, however this really holds us back from releasing a major 4.0 version for a long?! time again. Maybe we should discuss if we want a 4.0 with incremental steps or only after a year or so.
--------------------------------------------------------------
#2752 Comment 1:
I have fixed the ordinals, with the side-effect that e.g., italics are now also converted into unicode. What do you think about that?
#2752 Comment 2:
Refs https://github.com/JabRef/jabref/issues/160

I think, I begin to like it, because the display of JabRef in the UI will improve. As stated in https://github.com/JabRef/jabref/pull/2601#issuecomment-294490145, I will step away from biblatex in papers and so, we can move on here.
#2752 Comment 3:
As indicated in #2784, this breaks support for italics in the main table, which was working before. We should revert it and find another way to support ordinals.
#2752 Comment 4:
Hi @lenhard, the problem is you always loose something.
The key for the conversions lies in the Normalizer settings of the [LaTexToUnicodeConverter#24](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/strings/LatexToUnicodeAdapter.java#L24)

I have made this handy chart of the four options and what works when (on my linux system).

|      | Ordinals | textit | Special Chars, eg. polish names, acute, umlauts |
|------|----------|--------|-------------------------------------------|
| NFD  |  Yes      |   Yes     |             No                              |   
| NKC  |     Yes     |   Yes     |            Yes                               |   
| NFKD |     No     |    No    |              No                             |   
| NFKC |     No     |     No   |               Yes                            |   

In conclusion I would suggest to investigate what factors influence the bug that so far was only seen on @AEgit's system.
#2752 Comment 5:
@lynyus : Let me know which additional configuration details are needed. I still encounter the bug in:
JabRef 4.0.0-dev--snapshot--2017-07-10--master--e80f450ee
Windows 10 10.0 amd64 
Java 1.8.0_131
#2752 Comment 6:
@AEgit the problem is: I have no idea what could help us :/
#2752 Comment 7:
One solution might be to convert italics back into regular ascii after the latex2unicode conversion?
#2752 Comment 8:
Hmmm, ok - am I really the only one with a Windows system, who encounters this problem? Because if that's the case, it might be my/my system's fault. But as far as I can tell @Siedlerchr confirmed the issue on his Windows 10 installation (https://github.com/JabRef/jabref/issues/2784). Therefore it sounds like a Windows issue. What about the Mac users?
#2752 Comment 9:
Okay, I'm on my Windows now and I have these problems. Somehow I must have overread @Siedlerchr's comment or misinterpreted it :/ All the time I was assuming that I had checked it successfully on my windows machine.

Mea culpa, I'll be working on a fix now.
#2752 Comment 10:
No worries, and thank you for your help!
#2752 Comment 11:
@lynyus Nice table, thanks for the overview :) Sure, NKC is the right option here. The problem is that we're using a Swing table as maintable and as far as I've found it just refuses to work with unicode italics (unless you have appropriate fonts installed in your system, but thats not the default). The best solution would be to get rid of the maintable in our move to JavaFX. Let's do that in the future, but let's not do it right now, because we should rather build a stable entry editor.

I'll suggest something different: @AEgit How important is it really that the text in the main table is in italics? Would it be acceptable if the text would just be displayed as plain text? Because in that case, we could just eliminate the `\textit` command before we do the unicode conversion.
#2752 Comment 12:
@lenhard To be honest, I'm not really bothered by the fact that the text in the main table is not in italics. As long as the entry preview shows it in italics (which it currently does), I'm pretty happy with it. Having the proper format in the main table as well, would be nice, but it is not a show-stopper for me at the moment.
#2752 Comment 13:
I have a PR now on this: https://github.com/JabRef/jabref/pull/3008
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2744 Comment 1:
Thank you for the PR! I'm not sure whether the [Codacy coplaint](https://www.codacy.com/app/simonharrer/jabref/pullRequest?prid=609747) can be fixed.

Unfortunately, we want to release a beta version today. Since it's a beta version, I'd like to postpone your improvement. Please forgive me for that 😄 I hope, we get the improvment in the next days.
#2744 Comment 2:
The Codacy complaint should be fixed by now (commit 2deedc7).
#2744 Comment 3:
> Unfortunately, we want to release a beta version today. Since it's a beta version, I'd like to postpone 
> your improvement. Please forgive me for that :smile: I hope, we get the improvement in the next days.

No problem. It would be great, though, if the PR is not lost :smile:. We essentially depend on its behaviour in our use of JabRef, but I can easily install my local branch on our computers, and install the next release as it comes out.

Regards,
Saulius
#2744 Comment 4:
Thank you very much for your PR! I only have a few small remarks. The rest looks very good to me!
As soon you fixed the things and the beta is out, we can merge it
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2736 Comment 1:
Thanks again for your contrib!
--------------------------------------------------------------
#2735 Comment 1:
Thanks again for your contribution 👍 
--------------------------------------------------------------
#2734 Comment 1:
Thank you very much for your contribution! 👍 
--------------------------------------------------------------
#2732 Comment 1:
Thank you very much for your contribution 👍 . Codewise it looks very good to me. If the test passes and another dev gives his okay, we can merge it.
#2732 Comment 2:
Thanks for the contribution @sauliusg . Great, when users find an issue and even fix it themselves (;

> The reason seems to be a 'null' database passed to the BibtexKeyPatternUtil.makeLabel(BibEntry, String, Character, BibDatabase) method, and a null pointer exception is triggered

I will investigate this tomorrow, because I'm not entirely sure if your fix solves the symptoms or we should dig a bit deeper and eliminate the main problem, which could be that bloody 'null' database.
#2732 Comment 3:
Dear  Siedlerchr, dear Lynyus,

thank you for the instant reply!

I have got feedback from Codacy and fixed: removed an unused variable from the new unit test. Also, I added another second unit test to cover the second 'if' statement added by me. Sorry if it breaks the "changes approved" status...

> I will investigate this tomorrow, because I'm not entirely sure if your fix solves the symptoms or we 
> should dig a bit deeper and eliminate the main problem, which could be that bloody 'null' database.

Please have a look. It seems to me that the 'null' can be traced to the explicit 'null' argument passed to it from the 'private static List<File> findFile(BibEntry entry, File directory, String file, String extensionRegExp, Character keywordDelimiter)' method (line 250, String filenameToLookFor = expandBrackets(filePart, entry, **null**, keywordDelimiter).replaceAll(EXT_MARKER, extensionRegExp);).

Regards,
Saulius
#2732 Comment 4:
@lynyus your suggestions sounds reasonable. We should try to not pass null as an argument. Moreover, the label generation code probably needs a complete refactoring (especially, get rid of the huge amount of static methods). But this will be probably a bigger project. While I would welcome PRs from you or @sauliusg in this direction, I think the current PR is an acceptable workaround within the boundaries of the current code infrastructure.
#2732 Comment 5:
Okay, lgtm! I merge it in! Thank you very much for your contribution! 👍  Feel free to take a look at other issues 
#2732 Comment 6:
Thanks!
--------------------------------------------------------------
#2731 Comment 1:
In general LGTM
--------------------------------------------------------------
#2730 Comment 1:
I like it. Better than a cronjob-approach bullying us each Monday. We can add a TOP for "[Topics discussed in each telephone conference](https://github.com/JabRef/jabref/wiki/Minutes#topics-discussed-in-each-telephone-conference)" to discuss the status regularly.

#2730 Comment 2:
🤣 
--------------------------------------------------------------
#2728 Comment 1:
We also have https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/JabRefExecutorService.java. 

If you want, I can take care of this issue since I'm currently rewriting the DOI editor component in JavaFX.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2719 Comment 1:
Thanks for your reply:
 - Looking at the Color class, it is just a representation of the RGB code, so not too problematic. I am still not 100% sure. Assuming we would switch to a new GUI technology, would we be using javafx.Color objects, or would we have to refactor the model classes to only use the RGB code string? I would really like to have a third opinion from someone from @JabRef/developers on this, so that we can sort of say that we have a majority consensus.
 - I don't think very highly of our custom event bus (and have always said so), so bean properties would be acceptable to me, especially considering the fact that we allow observable collections, which are essentially just "bean data structures"
 - It might make sense to exclude the whole test sources from the architecture tests. Imho, they are not really relevant for static architecture checks. I will have a look at that.
#2719 Comment 2:
I have been thinking a little more about `Color`. Isn't this the very same thing as we have in https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/gui/IconTheme.java ?

There, we also have all the color codes, but in the gui package and not in model. So what is our reasoning to allow the javafx version of Color in model, but not the awt version? Also, had we used the awt version in model, wouldn't that have meant that we would have had to rewrite all such usages for the javafx migration? If yes, isn't that a good argument for not allowing the javafx version of `Color` in model?

And interestingly, I found this: https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/logic/groups/DefaultGroupsFactory.java#L13 This is a plain violation of our architecture rules. @tobiasdiez Did you do the import like that on purpose, so that the tests do not find it, or was that an accident?
#2719 Comment 3:
I think the issue with the `Color` class is that previously there was no need to have anything color-related in the model as no class in model relied upon it - thus there was never situation where the usage of `awt.color` in model was on the table. From an architectural standpoint, the cleanest solution is probably to implement our own version of `Color` in model and use this. The gui contains then a converter from this `Color` to whatever color is used in the corresponding UI framework. However, this is additional work and apart from making a migration to a new GUI easier I don't see any advantages. 
@simonharrer as I have our discussion about various architectural points in good memory, I would highly value your opinion on this matter (if you find the time to look into it).

I can't remember that I was creative enough to use the full path to hide the dependency from our architecture tests. But good to know that this works, I will now definitely (ab)use it and make my life way easier 😄 . Of course I will fix it (tomorrow).

#2719 Comment 4:
@tobiasdiez The fix will go into this PR?
#2719 Comment 5:
* Color: +1 to add it as exception, because it is "just" a data model. I would not implement a separate color class, even though this would be the cleanest solution. (Effort saving)
* Beans: +1 to allow them
* Tests: Yes, please exclude them.


#2719 Comment 6:
Side comment: [Macker](https://innig.net/macker/index.html) seems to be a tool, which also implements architecture checks. Example: https://innig.net/macker/example/layering/src/macker.xml. OK, it is outdated, but I thought, it is nice to know. 😇 
#2719 Comment 7:
I still think that making an exception for `Color` is a bad decision that will come back to bite us. In the course of moving to JavaFX, we are currently losing a lot of independence in our model packages - something that we invested a lot of effort when trying to get rid of the swing dependencies.

But if this is the consensus in the team, I'll bow to that. I created exceptions for the remaining FX classes and this PR should be ready to go when the build succeeds on travis.


--------------------------------------------------------------
--------------------------------------------------------------
#2711 Comment 1:
What about the Unicode Replacement Char?
http://www.fileformat.info/info/unicode/char/fffd/index.htm
#2711 Comment 2:
Excellent idea @Siedlerchr I have implemented this using the replacement char (and it still works).
#2711 Comment 3:
As discussed in the devcall: This can be merged aber fixing checkstyle
--------------------------------------------------------------
#2710 Comment 1:
LGTM, but you still have the failing StringUtil test. Seems like you are not on the latest master?

#2710 Comment 2:
Yes, the branch was still on yesterdays level.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2706 Comment 1:
Should we also move the "Send es email" functionality to the export menu?
#2706 Comment 2:
Hm, I would distinguish between Export and Share. Send as Email sounds to be me like sharing it whereas Export is a lowerlevel primitive which is not always for sharing the data.
#2706 Comment 3:
I like the suggestion by @simonharrer. "Share" fits better than "Export". 
#2706 Comment 4:
DevCall Decision: Move to Tools -> Copy Files 
#2706 Comment 5:
@JabRef/developers  I need some help here. I want to execute the thing in a background thread and make it cancable. Looked already at some other, but it's not clear to me, why some of them are implemented in Frame and some in BasePanel.  And I never worked with this AbstractWorker stuff. Any help welcome
#2706 Comment 6:
Like this https://github.com/JabRef/jabref/blob/67e457c9395a86eaa440c905d3a4b14379ea504f/src/main/java/org/jabref/gui/groups/GroupNodeViewModel.java#L204?
#2706 Comment 7:
@Siedlerchr how would you describe the status of this PR? Is it feasible to include it into 4.0 or should we postpone it to 4.1?
#2706 Comment 8:
I would postpone it to 4.1, as we want the 4.0 to be stable

Am 08.08.2017 10:26 vorm. schrieb "Linus Dietz" <notifications@github.com>:

> @Siedlerchr <https://github.com/siedlerchr> how would you describe the
> status of this PR? Is it feasible to include it into 4.0 or should we
> postpone it to 4.1?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2706#issuecomment-320887899>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5JbmRyZ1o8w4O-vU2Z2Tz3UT0022ks5sWBvKgaJpZM4Mw1bj>
> .
>

#2706 Comment 9:
This branch is followed up at https://github.com/JabRef/jabref/pull/3147, because it was renamed to `exportPdf`.
--------------------------------------------------------------
#2705 Comment 1:
You increased the StringUtil method, which resulted in an architecture test error
@lenhard  won't be amused :-P
#2705 Comment 2:
I am not angry for increasing StringUtil, I am angry for just ignoring the broken test that resulted from the increase and merging this PR into master. That effectively breaks all builds on master. At the very least, you should change the test so that it passes.

I just did this as a quick-fix in d1c8569c5b1c169896517425082753fee34ee838
#2705 Comment 3:
Yes sorry didn't saw the failing test (first only the language tests were failing and I fixed them and merged directly afterwards). Thanks for the fix.
--------------------------------------------------------------
#2704 Comment 1:
`On the downside, however, the groups tree is deleted upon save in the older version. Still a bit better than a crashing Jabref in my opinion.`

I wonder why JabRef does not simply ignore the groups Tree then and deletes it on save.


#2704 Comment 2:
@tobiasdiez Even the old versions from 3.1 or 3.2 onward (not sure which) should not delete the new `groups` tree, since at some point we implemented the feature that JabRef does no longer delete random text from the bib file but keeps it. Anything prior to v3.0 will certainly delete it.

Anyway, I think this is a good compromise. Then people with older versions can still open the file and when they wonder that the groups tree is not correct (or gone), we can tell them to upgrade. 

I just think you should use `groups` instead of `group` as the key in the meta data, since this is normally not about a tree consisting of a single group, but of multiple groups.
#2704 Comment 3:
Well, even 3.8.2 deletes the `group` tag, probably since it is an unknown metadata item. 

I could change `group` to `groups` but it was already used in a very (?) old JabRef version...not sure which. 
#2704 Comment 4:
I see, with metadata the serialization might be different.

Hm, if it has been used before, we probably should not use `groups`. Since this name goes into the bib files of many people and will annoy us if we change it later, let us discuss a good version in the next devcall.
#2704 Comment 5:
Decision: `grouping`

Alternatives: `grouping`, `groupies`, `group`, `groups`
--------------------------------------------------------------
#2703 Comment 1:
> Note: Bib files containing an automatic keyword from prior 4.0 tests can no longer be opened and the lines containing AutomaticKeywordGroup have to be deleted.

Isn't there a possibility to migrate this? From a user point of view this is not really acceptable...
#2703 Comment 2:
@matthiasgeiger I formulated it a bit awkwardly. Automatic keywords groups are a new feature in 4.0, so this only hits users of the current development version - not users of 3.8.2.
--------------------------------------------------------------
--------------------------------------------------------------
#2699 Comment 1:
LGTM, but you apparently forgot to adjust some parser test:
`org.jabref.logic.importer.fileformat.BibtexParserTest > parseWarnsAboutEntryWithoutBibtexKey FAILED`
Aftewards can be merged
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2692 Comment 1:
Code looks ok to me 👍 Need to try it out, still.
#2692 Comment 2:
Ok, tested it a bit. Some thoughts:
- live view is nice 👍 
- functionality currently quite hidden via `view - show document viewer`. Probably need a magnifier glass somewhere. Not sure where tho.
- PDF rendering is a bit slow.
- Also, it does not render backgrounds correctly and also the casing of some texts seem to be odd
![image](https://cloud.githubusercontent.com/assets/2141507/24503167/331d73d8-1551-11e7-9ae3-a13ee522c316.png)
![image](https://cloud.githubusercontent.com/assets/2141507/24503174/3a50b9f8-1551-11e7-8d85-a7ea0ab0d13f.png)
![image](https://cloud.githubusercontent.com/assets/2141507/24503215/5f2fdf7e-1551-11e7-8679-0bd5a550be5b.png)
![image](https://cloud.githubusercontent.com/assets/2141507/24503221/6662719e-1551-11e7-8f86-f96fc6ddd888.png)
- Highlighting does not display correctly
![image](https://cloud.githubusercontent.com/assets/2141507/24503246/8d55f92e-1551-11e7-8341-7ef39af77d77.png)
- Comments cannot be seen
- I can no longer navigate through the main panel with UP/DOWN buttons

__We already had such a viewer before and removed it__. Isn't it possible to do this natively with Acrobat or so? I doubt we will ever get a really good rendering by ourselves.



#2692 Comment 3:
Thanks for the feedback. I also noticed some of these rendering issues (and, in addition, some math characters are displaced or not shown at all). I did some investigation and it seems that most of these problems are fixed/improved upon with PDFBox 2.0. But the update to 2.0 is still not possible for us https://github.com/JabRef/jabref/pull/1096. The only other decent PDF rendering engine I found for java is itext, but it is licensed under the incompatible AGPL (this is also the reason why #2474 is blocked at the moment). 

Do we want to include the PDF viewer nonetheless or do you think the quality is too bad for "production"?

We already had a PDF viewer? I was only aware of the PDF thumbnail, which was totally buged.
The idea behind this PR is not to implement a full-fledged PDF viewer and editor, but only provide a reasonable good minimal viewer. Its main purpose should be to let the user quickly decide whether he has picked the right document for further reading. In addition, I plan to show the preview also in the import dialog to give more context there. Some further plans are integration with and enrichment of the core bibliographic features of JabRef: pdf fulltext search, visualization of cites / cited by relationships, automatic import of referenced literature.
Thus the idea is kind of similar to the PDF previewer in firefox: provide a means for a quick inline PDF preview for convenience but don't try to write yet another PDF editor. 

For me the navigation in the maintable with arrow keys still works.
#2692 Comment 4:
And one more thing that just came to my mind: What are the licenses of the libraries you are including here?
#2692 Comment 5:
@lenhard Thanks for the additional feedback. 
I changed the log output of pdfbox to errors, so all the warnings are hidden now. The "-fx-background-color" messages seem to be a bug in JavaFX at least it referenced a code point in JavaFX's own stylesheet `modena.css`. 

Moreover, I added the licenses: Apache 2.0 and BSD 2, so this shouldn't be a problem.
--------------------------------------------------------------
#2688 Comment 1:
@tobiasdiez  I now used the Author/Authorlist parsing classes. I created a new class for MsBib which is essentially a wrapper class around the Author class, but handles a few more things only relevant to MS bib. 
Checking for corporate authors is not possible inside the Author parser as there are surrounding braces already stripped on calling. 
#2688 Comment 2:
Good job! Code looks ok now and only fetcher tests fail -> merge.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2684 Comment 1:
Okay, LGTM
--------------------------------------------------------------
#2683 Comment 1:
When the entry editor is opened, the first click on the main table causes no reaction or reshuffles the entry table. Is this caused by this fix or is this an old issue?

Ctrl+A works if I manage to focus the entry table.

#2683 Comment 2:
woops, missed another one
--------------------------------------------------------------
#2681 Comment 1:
Will look at it.
- [x] Console update seems to be fixed #2667 
- [x] Unavailable fetcher results in normal console log again without UI freezes
#2681 Comment 2:
@matthiasgeiger You are right, my changes are more a workaround than a proper solution. However, since the deadlock only appears if an exception is logged in the Swing thread and afterwards the GUIAppender also logs something, I decided not to invest more time. Probably a application-wide lock for the appender is needed.
--------------------------------------------------------------
#2674 Comment 1:
On general okay:  Not sure about the uncommented stuff. You should delete this
And check for coday
#2674 Comment 2:
Thanks for the feedback. The uncommented code is a reminder for myself (and others) of things that still have to be implemented. For example, undo/redo of group actions is not possible right now.

Will merge this...
--------------------------------------------------------------
#2672 Comment 1:
Okay, this looks good now.
PS: For resolving merge conflicts I recommend using Meld http://meldmerge.org/
--------------------------------------------------------------
--------------------------------------------------------------
#2669 Comment 1:
Hello Tobias,
I looked at the falied tests and realized that one test fails exactly because he expects what I considered unintended behavior. So my proposed change is not just an undisputed bugfix but due to different expectations on which we have to agree. The question is how to interpret inputs of the form

1. Canon der Barbar, Alexander der Große
2. Rinnooy Kan, Alexander H. G.
3. Rinnooy Kan, Alexander Hendrik George
4. Rodriguez Fernandez, José María

Currently such inputs are interpreted as two authors and normalized to
1. der Barbar, Canon and der Große, Alexander
2. Kan, Rinnooy and Alexander H., G.
3. Kan, Rinnooy and George, Alexander Hendrik
4. Fernandez, Rodriguez and María, José

I think the entries should be interpreted as one author each, i.e.

1, lastname="Canon der Barbar", firstname="Alexander der Große"
2. lastname="Rinnooy Kan", firstname="Alexander H. G."
3. lastname="Rinnooy Kan", firstname="Alexander Hendrik George"
4. lastname="Rodriguez Fernandez", firstname="José María"

However this leads to the error in the JUnit tests.
#2669 Comment 2:
Thank your for your effort. As you already noticed this is a serious issue.  This really depends on the data you have. Some sites export all authors with commas if I remember correclty 

#2669 Comment 3:
Thanks for the additional investigative research 😄. I'm strongly in favor that `Rinnooy Kan, Alexander Hendrik George` is parsed as one author! The biblatex code contains a [test](https://github.com/plk/biber/blob/3a5b7e6aaef9e87a021b97a4b8b14a9c300e2328/t/names.t#L868) that the similar input `von Berlichingen zu Hornberg, Johann Gottfried` is parsed as
````
      given          = {'Johann Gottfried', initial => ['J', 'G']},
      family         = {'Berlichingen zu Hornberg', initial => ['B', 'z', 'H']},
      prefix         = {'von', initial => ['v']},
      suffix         = {undef, initial => undef},
````
In my opinion, we should follow biblatex here. However, I remember that we already had a long discussion about similar issues some time ago https://github.com/JabRef/jabref/pull/1470. Indeed, we should probably discuss this in the next devcall.
#2669 Comment 4:
Okay and how to distinguish `Berlichingen zu Hornberg, Johann Gottfried` from `Tobias Diez, Matthias Geiger` ?

Or even more abstract:
`A a B, C D, E F` 

How much authors are this? 3? 2? What are the given and family names? 

This is not possible to detect the authors free from errors as there various different formats out there in the wild. Especially, as long as only `,` are used as seperators I don't see a way to "fix" this...
#2669 Comment 5:
Decision: AB, CD -> one author, AB, CD, EF: Three authors

Accepting that "jr" part is not treated correctly.

As far as I understand, the issue is that the tests for two authors fail. @Maformatiker can you adapt them, too?
#2669 Comment 6:
As far as I understand, this will partially revert https://github.com/JabRef/jabref/pull/1470, which was implemented because of https://github.com/JabRef/jabref/issues/1181, which was risen because of https://github.com/koppor/jabref/issues/125.

The discussion revealed that users have to change `John Maindonald, W. John Braun` manually to `John Maindonald and W. John Braun`, but `A B, C D, E F` is automatically converted to `B, A and D, C and F, E`.
#2669 Comment 7:
So how should this PR proceed? @koppor: I do no longer remember the discussion from the devcall. Can we get the PR mergeable? If so, what needs to be done?
#2669 Comment 8:
I included the decisions (one comma should be treated as special case) and added a test case. Will merge after travis succeeded.
#2669 Comment 9:
@Maformatiker Thank you for working on this and improving our JavaDoc. I hope, that you are satisfied with our updates. Looking forward to more pull requests 😇 
--------------------------------------------------------------
--------------------------------------------------------------
#2666 Comment 1:
Yeah I will change that, however the fxml tag are not in the formatting yet
I will try to change that as well

Am 19.03.2017 12:07 vorm. schrieb "Tobias Diez" <notifications@github.com>:

*@tobiasdiez* approved this pull request.

The code looks good. I would, however, argue that "sort subgroups" should
suffice - if you want to sort the whole tree then just right click the
root. And maybe add "recursively" to the menu text to make it a bit clearer.

By the way, we should discuss at some point which other menu entries make
sense and which we should remove instead of reimplementing them (e.g. I
don't see a point in the move actions).
------------------------------

In src/main/java/org/jabref/gui/groups/GroupTreeController.java
<https://github.com/JabRef/jabref/pull/2666#discussion_r106793485>:

> @@ -43,14 +43,21 @@

     private static final Log LOGGER =
LogFactory.getLog(GroupTreeController.class);

-    @FXML private TreeTableView<GroupNodeViewModel> groupTree;
-    @FXML private TreeTableColumn<GroupNodeViewModel,
GroupNodeViewModel> mainColumn;
-    @FXML private TreeTableColumn<GroupNodeViewModel,
GroupNodeViewModel> numberColumn;
-    @FXML private TreeTableColumn<GroupNodeViewModel,
GroupNodeViewModel> disclosureNodeColumn;
-    @FXML private CustomTextField searchField;
+    @FXML
+    private TreeTableView<GroupNodeViewModel> groupTree;

Please leave the formatting as it is right now. It is kind of a
JavaFX-thing that normally the @FXML <https://github.com/FXML> tag is on
the same line (and I like it that way because otherwise the private fields
declaration takes more space)

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
<https://github.com/JabRef/jabref/pull/2666#pullrequestreview-27736134>,
or mute
the thread
<https://github.com/notifications/unsubscribe-auth/AATi5NTWFJ6ef70b1vsgEXCg-s3TNYEBks5rnGOVgaJpZM4Mhd6n>
.

#2666 Comment 2:
@tobiasdiez  Changed localization, but I dunno how to display the menu entry only when the root nod eis selected?
I read about adding a change listener and then setting the contextmenu. However, I am not sure how that plays together with the binding stuff
#2666 Comment 3:
In `createContextMenuForGroup` you can use `isRoot` of the `GroupNodeViewModel group` to determine if the right-clicked group is the root or not...and then create the menu depending on this value.

However, I would completely leave of the `sort subgroups` option.
#2666 Comment 4:
I thin we should stuck with simply having the sort groups recursively. Then we could omit the explicit chek for root node
--------------------------------------------------------------
#2663 Comment 1:
Just as an idea, maybe you can check if you could include that feature request here?
https://github.com/JabRef/jabref/issues/457
#2663 Comment 2:
@Siedlerchr I've made a first attempt at adding the feature ^_^
#2663 Comment 3:
I have a problem with testing the regexFormatter, it doesn't take protected parts of a sentence into account. 

I don't really know how I can write the code so that it does take the protected characters into account, since it currently only seems to be done on a letter by letter basis.

Any ideas on how this could be done, or shall I just remove the feature here for now?
#2663 Comment 4:
Maybe anyone of the other @JabRef/developers  has an idea on how to check that
#2663 Comment 5:
@tobiasdiez Maybe you have an idea?
#2663 Comment 6:
Sorry, I've no deep knowledge about regular expressions in particular and about the formatters in general.
#2663 Comment 7:
I understand the question https://github.com/JabRef/jabref/pull/2663#issuecomment-287796215 as follows:

If I replace regex `a` by `X` and I apply it at `abc{abc}`, the result is `Xbc{Xbc}`, but it should be `Xbc{abc}`.

As one cannot change the regex engine, I would `{...}` replace by something not matched by the regular expression, then apply the regex and then change it back.

1. Replace protected terms
1a. Replace first `{...}`by [unicode character 2580](https://unicode-table.com/de/#2580)
1b. Replace second `{...}`by [unicode character 2581](https://unicode-table.com/de/#2581)
1.c etc.
2. Apply regex
3. replace back



#2663 Comment 8:
Closing this issue due to inactivity :zzz: 

@shitikanth took over at #3096, because it is unlikely, that we get access to https://github.com/delftswa2017/jabref
--------------------------------------------------------------
#2661 Comment 1:
Yeah @stefan-kolb is now an active JavaFX developer 😼 . Code looks good, so I'll merge this. Actually, new logs should be displayed automatically in the console (this is why it is modal) - thus this is probably a bug (can you please open a new issue; I don't have time right now to further investigate this; thanks).
--------------------------------------------------------------
--------------------------------------------------------------
#2658 Comment 1:
Thanks @mlep 👍
--------------------------------------------------------------
#2657 Comment 1:
Thanks @mlep 👍 
--------------------------------------------------------------
#2654 Comment 1:
For me they do not fail all the time. I checked them locally. They just randomly fail?!
#2654 Comment 2:
I think they fail when they are executed more than once in a couple of
minutes, e.g when you push several commits in a few seconds and each time
the build is triggered they will fail

At least that's what I noticed

--------------------------------------------------------------
#2650 Comment 1:
Thanks for the valuable feedback! You raised good points, which I used to improve the code. Will merge now (as soon as build passes).
--------------------------------------------------------------
#2649 Comment 1:
Hm, not sure if I like the addition of those constructors just to prevent the instantiation of those classes?! 
As it seems this is not done anywhere anyway.
I don't see much use right now, maybe you can clarify this a bit.
Lets see what @JabRef/developers  think.
#2649 Comment 2:
I would have not cared about this, as it is normally pretty obvious that you should not create an object of a class which only has static methods, but it is actually recommended http://www.informit.com/articles/article.aspx?p=1216151&seqNum=4

But I think we agreed a while ago that we focus more on fixing/implementing issues (where you can resolve some code quality issues locally) than solely on internal code quality.

PS: You could also take a look at the modernizer test output log and maybe fix some of the mentioned issues as well (I would suggest ignoring group related stuff for the moment)
#2649 Comment 3:
The technical debt metrics from Sonarqube (or rather SQALE) are a little fuzzy, I would not care too much about the absolute numbers they yield ;)

Anyway, in my opinion the merge conflicts should be resolved and the PR should be merged. At least nothing breaks from adding private constructors and on the plus side @TRvanRossum fixed at least one case where one of the classes was instantiated to call a static method. Some bracketing improvements are in there as well.



#2649 Comment 4:
The merge conflicts should be solved now.
--------------------------------------------------------------
#2646 Comment 1:
Works -> https://codecov.io/gh/JabRef/jabref/compare/master...fixCodeCov

And looks good to me!
--------------------------------------------------------------
#2645 Comment 1:
Also the diff is hardly reviewable, tho this is not your fault.
--------------------------------------------------------------
#2644 Comment 1:
@JabRef/developers @chochreiner I think this has improved quite a bit now. Need your help on a few question (especially LibreOffice 5 Linux Jar poblem) and your testing here!
#2644 Comment 2:
I can test Windows and ubuntu with libre office 
Regarding the inclusion of jars, aren't the jars version depended on the installed version of Open Office/libre Office?
#2644 Comment 3:
open office works fine on macos
libreoffice cannot be detected automatically
#2644 Comment 4:
@chochreiner Great thanks! Is LibreOffice missing the `unoil.jar` inside the `program/classes` folder probably?
The logic basically is:
1. Look inside `/Applications` for folder names that contain (case insensitive) `libreoffice | openoffice` folder names
2. Check for `soffice.bin` executable mostly inside `program/`
3. Check for the UNO Jars `"unoil.jar", "jurt.jar", "juh.jar", "ridl.jar"` mostly inside `/prgram/classes/`.
#2644 Comment 5:
libreoffice seems to have a new internal package structure compared to OO
they have migrated to dylibs

#2644 Comment 6:
Hm, I'm not sure what this means for our current logic. As far as it is implemented right now every connection will fail if any of those libs are missing. Still it was perfectly fine for a few tests even without the `unoil.jar`.
#2644 Comment 7:
LibreOffice provides this libs: 
https://mvnrepository.com/artifact/org.libreoffice

According to his project https://github.com/LibreOffice/loeclipse the libs can be found:

> Search for the LibreOffice jars unoil.jar juh.jar jurt.jar ridl.jar unoloader.jar. You find them here:
> 
>     macOS: /Applications/LibreOffice.app/Contents/Resources/java
>     Ubuntu: /usr/lib/libreoffice/program/classes
>     Windows: C:\Program Files\LibreOffice 5\program\classes\
> 


#2644 Comment 8:
@Siedlerchr I installed LO 5 on Windows and Ubuntu and the `unoil.jar` is missing, the rest is there.
#2644 Comment 9:
@stefan-kolb  Under Windows 10, LO 5.3 64Bit  the unoil.jar is there in `C:\Program Files\LibreOffice 5\program\classes,` for Ubuntu you need to install the additional package:
http://packages.ubuntu.com/de/xenial/libreoffice-java-common

#2644 Comment 10:
@Siedlerchr Hm, that's bad for us as the user needs to install that manually...probably there is an equal problem with OSX.
#2644 Comment 11:
i can confirm that all jars are availalable in: /Applications/LibreOffice.app/Contents/Resources/java 
#2644 Comment 12:
We then should add this at least for linux to the installation instructions that the -common-java package is required
#2644 Comment 13:
@chochreiner Hm, ok then the automatic detection should work...
#2644 Comment 14:
@Siedlerchr @tobiasdiez I have added a new directory chooser in the FX dialog service. Can you please take a look? One thing that I noticed is that all of these dialogs have no parent (i.e., not model), therefore hide in the background if the user clicks somewhere else. Dunno if we want them to behave like this...
#2644 Comment 15:
the OpenOffice provides both soffice.bin and soffice; LibreOffice only provides soffice --> with this fix, the automatic detection works for me

#2644 Comment 16:
@chochreiner Ah nice, thanks so much Christoph!
#2644 Comment 17:
@JabRef/developers Otherwise I'm done with this. Thanks everybody for your help and input 😄 👍
#2644 Comment 18:
I also added our finds to the documentation under __Known issues__.
--------------------------------------------------------------
#2641 Comment 1:
@tobiasdiez Actually it is not the restriction of the URL which is quite high (over 2000 i think), but the call from the command line, e.g., explorer.exe "https://www....". Seems like the explorer does not take such a long argument.
#2641 Comment 2:
From my point of view looks good. Will merge it in now
--------------------------------------------------------------
--------------------------------------------------------------
#2639 Comment 1:
So as we all agreed on this and the code is looking good, I will merge this in now.
Thank you very much for your contribution!
--------------------------------------------------------------
#2638 Comment 1:
LGTM, If you please fix the conflict in the changelog we can merge this in. 
#2638 Comment 2:
The changelog conflict should be resolved now! 😄 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2634 Comment 1:
Codewise LGTM: Just one thing I don't get from your description: The old groups can be imported right? What happens when you modify one of these old (sub) groups? Does it get changed to a new group then?


Please take a look at the codacy/checkstyle failures. 


#2634 Comment 2:
Yes, the old line "ExplicitGroup.." in the file will automatically replaced by "StaticGroup..." when you save the bib file. Besides the minor differences outlined above they are treated completely the same (and this change is only related to parsing/serialization; in particular there is no new "StaticGroup" class).

Fixed the imports.
--------------------------------------------------------------
#2632 Comment 1:
I will add my changes from the other PR to this one

#2632 Comment 2:
@Siedlerchr Really? Isn't the scope of this PR different? 
You are working on "assign entries to groups by drag-and-drop" whereas this PR deals with "restructure the groups tree with drag-and-drop".

However, it yours and @tobiasdiez's decision whether this makes sense from the technical aspect.
#2632 Comment 3:
In fact it uses the same methods for listening/reaction of an DND Event. My changes would be simply an else case.

#2632 Comment 4:
Allright, then forget my objections :wink:
#2632 Comment 5:
@tobiasdiez  Drag and drop of entries works now as expected 🥇 

#2632 Comment 6:
Thanks @Siedlerchr for making the groups great again!
#2632 Comment 7:
Short question here: Drag-and-drop generally works in current `master` - but the main table is not updated at once. I.e., after dropping an entry to the currently selected group it is still grayed out as an "non-member". After reselecting the group it is displayed correctly in the "floating" list of group members.

Is this a known problem? Or should I open an issue? 
#2632 Comment 8:
Good catch! I added it to the list of open group-related problems: https://github.com/JabRef/jabref/issues/2599
--------------------------------------------------------------
#2631 Comment 1:
Nice!

So https://github.com/JabRef/jabref/pull/2631/files#diff-1decf95fd9e2b1eb17c72d9688bf0b3fR170 does not work to get the currently dropped entries? 

Once you know how to get the entries, you need to add another else statement to https://github.com/JabRef/jabref/pull/2632/files#diff-1decf95fd9e2b1eb17c72d9688bf0b3fR172 to check for the entries. Adding should be possible by adopting `GroupTreeNodeViewModel.addEntriesToGroup`. 
#2631 Comment 2:
@tobiasdiez No, it works fine! the selected entries are printed all out (I forgot the "w" on now ;) )
It is important to have the DataFormat declaration here, because it maps internally between DataFlavor from Swing and DataFormat from Javafx 
https://github.com/JabRef/jabref/pull/2631/files#diff-18c34a468d6a2c3f138e8e1a639205afR18

And I had to change the  getTransferData (as it otherwise would have always thrown an execption)
https://github.com/JabRef/jabref/pull/2631/files#diff-18c34a468d6a2c3f138e8e1a639205afR65

Edit// TransferMode would be here LINK

#2631 Comment 3:
Continued in other PR.
--------------------------------------------------------------
#2628 Comment 1:
THX for the Review,but it is Not ready Yet ;)

Am 17.03.2017 6:07 nachm. schrieb "Linus Dietz" <notifications@github.com>:

> *@lynyus* requested changes on this pull request.
>
> Besides the minor remark LGTM.
> ------------------------------
>
> In src/main/java/org/jabref/logic/util/io/FileUtil.java
> <https://github.com/JabRef/jabref/pull/2628#discussion_r106698806>:
>
> > @@ -84,6 +82,28 @@ public static String getFileName(String fileNameWithExtension) {
>      }
>
>      /**
> +     * Returns a valid filename for most operating systems.
> +     *
> +     * Currently, only the length is restricted to 255 chars.
> +     */
> +    public static String getValidFileName(String fileName) {
> +        String nameWithoutExtension = getFileName(fileName);
> +
> +        if (nameWithoutExtension.length() > 255) {
>
> I would suggest to extract this magic number into public static final int
> MAX_FILENAME_LENGTH. This can then be reused by the test as well.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2628#pullrequestreview-27637783>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ACCtQyYSERcuYQ6DCPUCzQwa6cQm1ZUTks5rmr3rgaJpZM4MXyJD>
> .
>

#2628 Comment 2:
I guess this is ready now to be merged. I don't recall any other problems (we talked about that in the devcall) with the linked files, since @Andrew-Lev already takes care of https://github.com/JabRef/jabref/issues/3172 in  https://github.com/JabRef/jabref/pull/3188
--------------------------------------------------------------
#2626 Comment 1:
I just tested this locally and it works if I have selected another file in the entry editor.

However, the following seems a little counter-intuitive to me:
 1. I have the second file of an entry selected in the entry editor, everything works as expected.
 2. Next, I click the same entry in the main table. Both the entry in the main table and the second file in the entry editor are still highlighted.
 3. When I push F4 now, the first attached file is opened and not the one that is still highlighted in the entry editor. This seems counter-intuitive.

This is just a minor thing, and if in doubt the PR can be merged as is (code-wise it is fine). However, it would be nice if the feature were more consistent.
#2626 Comment 2:
I understand this, but this is a focus problem then. I'm not sure how to fix this. Initially, I also didn't want to implement this feature here, but Olly wanted JabRef to behave like this. For me F4 opening the first link regardless of the current focus was ok.
#2626 Comment 3:
@stefan-kolb Sure, I understand. This is no blocker and from my point of view, the PR can also be merged as is. I just guess that at some point a user will stumble upon this and report it as an issue.
--------------------------------------------------------------
#2625 Comment 1:
LGTM 👍 
--------------------------------------------------------------
#2624 Comment 1:
Current state: LGTM 👍 
#2624 Comment 2:
Hm good point, @lenhard . I personally think that this mentioned convention ist quite obsolete nowadays unless you work with a framework that requires it.People blindly generate trivial setters and getters (see diff) for all attributes driving the principle of information hiding ad absurdum and bloating up the code with unnecessary methods.However, if this is the consensus that we stick with the getters convention I ofc can change it.
#2624 Comment 3:
In this particular case, the point of the conventions is mainly to ease the understanding of the code and, thereby, consume less developer time. From my point of view, this is worthwhile and I would opt for adding getters.

However, maybe someone from @JabRef/developers disagrees with this? In this case we should discuss our preferred solution and reach a consensus in the devcall that is to be followed for all of JabRef.
#2624 Comment 4:
I generally vote for getters and setters
Because of information hiding principle
Encapsulation, makes it easier to read and allows for future modifications

Am 07.03.2017 10:47 vorm. schrieb "Jörg Lenhard" <notifications@github.com>:

> In this particular case, the point of the conventions is mainly to ease
> the understanding of the code and, thereby, consume less developer time.
> From my point of view, this is worthwhile and I would opt for adding
> getters.
>
> However, maybe someone from @JabRef/developers
> <https://github.com/orgs/JabRef/teams/developers> disagrees with this? In
> this case we should discuss our preferred solution and reach a consensus in
> the devcall that is to be followed for all of JabRef.
>
> —
> You are receiving this because you are on a team that was mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2624#issuecomment-284672559>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5DtBNbSsARrgwBjo1j6SnySe8xA1ks5rjSe1gaJpZM4MUsG->
> .
>

#2624 Comment 5:
I don't see a need for Getters if the Objects are immutable, just clutters the code.
#2624 Comment 6:
Well... I think adding the `devcall` label was a good idea of Jörg ;-)
#2624 Comment 7:
+1 for devcall. 🌞 

Until then: https://projectlombok.org/features/GetterSetter.html

(Only a pointer to some crazy stuff I personally don't like 😇 )

#2624 Comment 8:
Thanks for the feedback, esp. @tobiasdiez. I fixed these issues and made the FileAnnotationTab better overall by removing invalid (i.e. unparsable annotations).
#2624 Comment 9:
You are absolutely right. But to be honest in this particular case I just regard this method as a black box and hope nobody has to touch it again.
#2624 Comment 10:
We decided that we want to stick with the good old Getters.
--------------------------------------------------------------
#2623 Comment 1:
Looks good to me as a small fix. In general I wondered if it isn't useful to integrate the PushToApplication somewhere in the desktop.os classes. I mean there are already methods for opening a file/with an application for each os.
#2623 Comment 2:
LGTM 👍 Would also love to see more OS-specific stuff integrated in the Desktop classes.
--------------------------------------------------------------
#2621 Comment 1:
LGTM, failing test is from springer

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2614 Comment 1:
It should be fixed now.
#2614 Comment 2:
Thanks again for your contribution!

I'll merge this in as the failing Google Scholar tests are not related to your changes.
--------------------------------------------------------------
#2612 Comment 1:
Thanks for the review. I fixed all the code issues and will merge this PR now. I can reproduce the issue with the context menu and track it at #2599. 
--------------------------------------------------------------
#2611 Comment 1:
Failing test was Google Scholar
--------------------------------------------------------------
#2610 Comment 1:
Codewise looks good! 👍  Thank you very much for your contribution. Would you please check the failing tets? (Just click Details on the Red-Marked Travis Build and you are able to see the log). From what I saw there is jut another unit test which tests key generation which has to be adapted! 
#2610 Comment 2:
Thanks! I'll try to fix it tomorrow 👍 
#2610 Comment 3:
@Siedlerchr 
I've taken a look at the failing tests and after making a small change to the code and to some tests it's now working.

Some tests failed because most of the formatter classes only work if the input is a non concatenated string.
#2610 Comment 4:
From my point of view it looks good.  However, another dev should take a look, too.
 If you could just add a changelog entry it would be nice. Otherwise we can create it on merge. 
#2610 Comment 5:
I wonder whether it would be possible to add test cases to MakeLabelWithDatabaseTest.java with all patterns listed at http://help.jabref.org/en/BibtexKeyPatterns.

I saw that you also added `[camel]` and added a test for that in BibtexKeyPatternUtilTest.java. To test the "user experience", I would like to ask to add some tests for that in MakeLabelWithDatabaseTest.

Strangely, `camel".equals(val)` is not test covered even though it should?!

![grabbed_20170305-212351](https://cloud.githubusercontent.com/assets/1366654/23591026/44dc023a-01ea-11e7-8f43-d82290a09587.png)

https://codecov.io/gh/JabRef/jabref/src/ee7445652023f95e7c623c75c93058b9f2f4adf9/src/main/java/org/jabref/logic/bibtexkeypattern/BibtexKeyPatternUtil.java

If it is too much effort, we can just go ahead and merge!



#2610 Comment 6:
I have added a test for the [camel] case to MakeLabelWithDatabaseTest.java
Hope the `camel".equals(val)` is covered now :)

Are there any additional test cases I should add?

Edit: About checking all the patterns listed at http://help.jabref.org/en/BibtexKeyPatterns 
I can work on that but I'm pretty busy the next couple of days.
So I'd rather have this merged now and work on adding the additional test cases later.
#2610 Comment 7:
Yeah, it's covered: https://codecov.io/gh/JabRef/jabref/src/6aa925b7ec6fc2e1deb497a898e076bc747630da/src/main/java/org/jabref/logic/bibtexkeypattern/BibtexKeyPatternUtil.java

I'll go ahead with the merge and look forward to other tests / general improvements. We have a huge list of smaller tasks at https://github.com/koppor/jabref/issues.

Thank you for the good work!
#2610 Comment 8:
We just discovered that our documentation was wrong and that `camel` should be a modifier: `title:camel`.

It should work with `title:capitalize`.

See https://github.com/koppor/jabref/issues/237
#2610 Comment 9:
Hmm OK, I've responded in the issue since it is not entirely clear to me what has to happen.
--------------------------------------------------------------
#2603 Comment 1:
Thank you for your contribution :smile: !
--------------------------------------------------------------
#2601 Comment 1:
I see that this is an issue. The initial idea is as follows:

1. No BibEntry should contain LaTeX encoded umlauts
2. Each BibEntry should use superscripts whereever possible.

Why is this not possible any more? Why can't I have properly formatted BibEntries with JabRef any more?
#2601 Comment 2:
That's really weird. I never had problems with that setting
#2601 Comment 3:
Yeah, I worked with that for ages. 🌞 
#2601 Comment 4:
Is this maybe due to the new lib?
#2601 Comment 5:
Yes, I would expect that this is due to the new lib. I assume that it leads to the following:
1. Ordinals formatter converts `2nd` to `2\textsuperscript{nd}`
2. Latex formatter converts `2\textsuperscript{nd}` to `2ⁿᵈ`
3. Ordinals formatter interprets `2ⁿᵈ` as `2nd` and converts it to `2\textsuperscript{nd}`
4. And so on

I might be wrong though, I did not debug this. 

@Siedlerchr @koppor: Do you have problems with it now? What would you recommend instead?
#2601 Comment 6:
When using the defaults in the "Cleanup entries" dialog, everything works fine.

![grafik](https://cloud.githubusercontent.com/assets/1366654/23586529/4a66f6e0-0197-11e7-965b-b0b0889e2c72.png)

Maybe, it is possible to have different defaults for save actions and for cleanup? I really need that functionality.
#2601 Comment 7:
@koppor The problem are the defaults for biblatex, not for BibTeX, which are depicted in your screenshot above.

An alternative solution, and maybe even a better one, might be to have the ordinals formatter correctly recognize 2ⁿᵈ as ordinals, so that it does not try to replace that. Should be doable, but right now I cannot make any promises time-wise. So, if anybody wants to take this over, be my guest.
#2601 Comment 8:
I am not sure whether all unicode fonts support 2ⁿᵈ. Therefore, I really like the idea to have the ordinals formatter recognize that.
#2601 Comment 9:
I second Jörgs and Tobias' opinion...
#2601 Comment 10:
I really like the ordinals-to-suprscript formatter as it provides great formatted bibliographies.

People write "2nd conference on something", which should appear as "2ⁿᵈ conference on something" in the proceedings. If I understand the fix correctly, biblatex papers won't have the superscript (more or less) automatically from now on.

Since most publishers use bibtex, the solution for me is to have an unclean personal biblatex file and always to the bibtex conversion when working on a paper. The superscript will be injected when copying the entry to the paper by  a [cleanup](http://help.jabref.org/en/CleanupEntries)..

Refs https://github.com/JabRef/jabref/issues/160.
--------------------------------------------------------------
--------------------------------------------------------------
#2597 Comment 1:
Is this made obsolete with #2610?
#2597 Comment 2:
Yes
--------------------------------------------------------------
--------------------------------------------------------------
#2592 Comment 1:
I agree with Tobias. I added a changelog entry and am merging directly. 

I also tried it out locally according to the description listed in #2577 and can confirm that the error no longer appears. I would not care about the warning that still appears, it is sort of valid (nothing was imported).
--------------------------------------------------------------
#2591 Comment 1:
Thank you for the update 👍 
--------------------------------------------------------------
#2588 Comment 1:
Great idea. However, I would place the search bar on top of the screen and not at the bottom, or alternatively is there a way to reuse the existing search bar and add an option to search for groups?
#2588 Comment 2:
Maybe it's indeed a good idea to move the search bar and button to the top...as this is an easy change I would postpone it for the moment and see what kind of further user controls are necessary in the group pane. 
#2588 Comment 3:
On the bottom looks good to me.
#2588 Comment 4:
I think having the search box at the bottom is fine for now, since we can also change it easily.

The feature works nicely with normal-size bib files, but I just checked it with the large bib file and there the feature scales very badly. If I enter something into the search field, it freezes and nothing happens for one or two minutes until the rearrangement of the groups appears (as desired). 

Do you see a chance to speed this up? Maybe some parallelism, using `parallel()` in streams, could help?

#2588 Comment 5:
Looks like other people see a group-related performance degradation: https://github.com/JabRef/jabref/issues/2561#issuecomment-283417338 So, this is most likely not specific to this PR and you could go for a merge.

However, we really need to follow up with a performance improvement PR.
#2588 Comment 6:
Since, as indicated in https://github.com/JabRef/jabref/issues/2561#issuecomment-283494292 the degraded performance for large bibs is expected at the moment and will be tackled separately, I think this is ready for merge (which I am doing right away).
#2588 Comment 7:
One suggestion as I just stumbled over it: I think the searching should be case insensitive (although this might further slow down the searching ;-))
#2588 Comment 8:
Should the performance issue with the groups filtering (which is still massive) also be added to the 4.0 milestone?
#2588 Comment 9:
@AEgit I am not exactly sure which issue you are referring to, but yes: We should try to improve performance before a final release. So if there is an open issue that should be in 4.0, please point me to it!
#2588 Comment 10:
@lenhard The performance issue I'm referring to happens with large databases (>10k entries, ~1k static groups) in conjunction with the groups filtering. When you try to find a group using the newly implemented groups search/filter, you have to wait for several minutes for the search to complete. During that time JabRef behaves as if it had crashed. You mentioned this problem yourself in this comment:
https://github.com/JabRef/jabref/pull/2588#issuecomment-283042778

Should I open a new ticket for this?
#2588 Comment 11:
@AEgit Yes, please open a new ticket for this, so that we do not forget it.
#2588 Comment 12:
Done ;)
https://github.com/JabRef/jabref/issues/2852
--------------------------------------------------------------
#2587 Comment 1:
If I newly create groups in some bib file and delete them using the options, everything works.

However, I just tested this with our large group file and unfortunately it does not work. I right-click a group (for instance "Life" as the first group in the large bib file), select "Remove group and subgroups", click ok in the message box. Then, nothing happens and the groups stay as they are. There are no messages in the log.

Am I missing something? Can you maybe have a try with our huge bib file?
#2587 Comment 2:
Looks like other people see a group-related performance degradation: https://github.com/JabRef/jabref/issues/2561#issuecomment-283417338 So, this is most likely not specific to this PR.
#2587 Comment 3:
@lenhard I can't reproduce the problem with the huge bib file. Thus I will merge this PR for now and would ask you to open a new issue with more details of how to reproduce it. 
--------------------------------------------------------------
#2586 Comment 1:
I considered to remove the new exception but in the end decided to keep it. As I outlined above, these checks should be done as integration checks and don't throw an exception. In order to locate these bad checks, I left the exception but marked it as deprecated.
--------------------------------------------------------------
--------------------------------------------------------------
#2584 Comment 1:
I have thought about this matter for a while and would argue to merge it as it is.

- For users with a locale that does not have specific rules on toLower/toUpper nothing changes.
- For users with a `special' locale, e.g., tr_TR, it is advisable to use Locale.ROOT anyways for the following reasons:
    * Internal Strings must be Locale.ROOT anyways to ensure correct behavior of JabRef.
    * Field Strings in a BibEntry should not be manipulated in the user's Locale, as science is mostly international, thus we are most likely to make an mistake if we apply language-specific toLower rules on English/German/Russian/Chinese names.
    * BibTex should be ASCII. If we apply toLowerCase using an esoteric locale we might produce an non-ASCII character.
#2584 Comment 2:
Please do not underestimate the value of UTF-8 and the power of biblatex to handle UTF-8.

My personal bibliography is handled in UTF-8. Now LaTeX encoding any more.

When I use it at Springer papers, I use our converter to convert to plain latex. See http://help.jabref.org/en/CleanupEntries.

See also https://github.com/JabRef/jabref/issues/160 :)
#2584 Comment 3:
Yes, biber + biblatex all handle stuff in UTF-8 and I think the default for a new db is already UTF-8. My dbs are also all in UTF-8. No more Latex encoding. And here we should be aware of a sort order depending on the locale. 

#2584 Comment 4:
Ok, then let's forget about the encoding point, even if it unclear how many people actually use a bibliography compiler that supports UTF-8...
What about my other points?
#2584 Comment 5:
After resolving the conflicts, it is OK for me to merge. We will fix wrongly uppercased things when issues will come up.
--------------------------------------------------------------
#2583 Comment 1:
@lenhard talked to @koppor This was always the case. writable fields and keyword fields were never synchronized. we have to defer this until a reimplementation.

See #574
--------------------------------------------------------------
#2582 Comment 1:
@JabRef/developers  Hm, our org.jabref move obviously lost all information on who did author the files :(
But I think this one was @simonharrer . I didn't understand your code 100% but tried to add a quick test for the localization problems. Tests are passing but I'm not sure whether I damaged your logic, especially the strange quotation replacements and rereplacements.
--------------------------------------------------------------
#2579 Comment 1:
Thank you very much for your contribution. I am not an expert in the IEEE Abbrev codes but to me it looks good. 
#2579 Comment 2:
Would it be advisable to write an automated script that fetches those lists automatically before each release?
#2579 Comment 3:
The files were last changed 2015/08/28. Probably not be worth the effort...
#2579 Comment 4:
Thank you for the PR! I think, syncing it with existing lists, is a very good idea!

Is there a script you wrote or is it manual effort? 🌞 
#2579 Comment 5:
No, half-auto using regex and Notepad++
--------------------------------------------------------------
#2578 Comment 1:
LGTM - just merge if the tests are passing 👍 
--------------------------------------------------------------
#2576 Comment 1:
Changelog and it's ready for merge!
#2576 Comment 2:
Same here: Looks good code-wise.

Please add a Changelog entry and merge!
#2576 Comment 3:
And please fix codacy by making the one field final static 
--------------------------------------------------------------
#2575 Comment 1:
Looks good to me! The failing push build is just because of the medline fetcher.

However, you keep forgetting to add a Changelog entry :-) Please add one.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2564 Comment 1:
I'm ok with that 👍 
--------------------------------------------------------------
#2563 Comment 1:
You call a mere thousand changes "line harvesting"? Pathetic! ;-) Fun aside, please do not take this as a justification to blow up the number of LOC in your PR.

I have a more general comment: The handling of special fields is pretty much the same as you do here. Have a look at the (deprecated) class `org.jabref.logic.specialfields.SpecialFieldUtils`. This class synchronizes the keyword field with different other fields. You want the same here: To synchronize one field (groups) with some others (author, keywords). It would be really cool if we could extract this synchronization logic in a more abstract fashion, so that it is reused for the special fields and the automatic groups. Otherwise, we would have several competing implementations for the same thing in JabRef.

I haven't given much thought at how to unify these two features with the common logic, but maybe you could give it a try here? The special fields are much less ugly now than they used to be, promise!
#2563 Comment 2:
I fear I cannot completely follow you @lenhard.
- If I understand the special fields correctly, then they sync the content of some field (like `rank = 1`) with the keywords field (`keywords = rank1`).
- The automatic groups take the contents of some field (e.g. `keywords = foo, bar`) and creates dynamic groups for each keyword (i.e. a group matching `foo` and one for `bar`). However, these groups are only created for the display and not written to groups tree in the bib file. Moreover, this features is completely independent of the `groups` field that is only used for the static groups.

Thus the only logic that seems to be shared by these features is the extraction of a list of keywords from a string and this is already encapsulated in the `KeywordList` class. What do I miss?
#2563 Comment 3:
Side topic: @stfnklb and me discussed whether we should use jrkeywords as
field. Reason: keywords are the keywords from the paper and users want to
keep them. - By this, we separate paper data from meta data on
bibliographical data...

Am 22.02.2017 20:57 schrieb "Tobias Diez" <notifications@github.com>:

> I fear I cannot completely follow you @lenhard
> <https://github.com/lenhard>.
>
>    - If I understand the special fields correctly, then they sync the
>    content of some field (like rank = 1) with the keywords field (keywords
>    = rank1).
>    - The automatic groups take the contents of some field (e.g. keywords
>    = foo, bar) and creates dynamic groups for each keyword (i.e. a group
>    matching foo and one for bar). However, these groups are only created
>    for the display and not written to groups tree in the bib file. Moreover,
>    this features is completely independent of the groups field that is
>    only used for the static groups.
>
> Thus the only logic that seems to be shared by these features is the
> extraction of a list of keywords from a string and this is already
> encapsulated in the KeywordList class. What do I miss?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2563#issuecomment-281784625>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTafpYet7gvjqVeXHYDg-xn92-46gbxks5rfJNDgaJpZM4MEfJ2>
> .
>

#2563 Comment 4:
@tobiasdiez From your answer, I think that you have understood me correctly.

It was just an idea and might not be worthwhile. Since the special fields synchronization already builds upon `KeywordList`, this might be as far as we can get. So, from my point of view you can proceed with this PR.

@koppor: Although what you say is true, I do not know of any user complaint about this behavior (which is telling). In contrast, changing the semantics of the keyword field in JabRef will confuse a lot of users, I would expect.
#2563 Comment 5:
Ok, I merge now and will have a second look about the SpecialFields later.
--------------------------------------------------------------
--------------------------------------------------------------
#2558 Comment 1:
When merging "old" PRs, please use

    git config --global merge.renamelimit 2049
--------------------------------------------------------------
#2557 Comment 1:
Hey, I have tried to fix the issues from your review. Check my comments on the particular parts above.
--------------------------------------------------------------
#2556 Comment 1:
Thanks @mlep 👍 
--------------------------------------------------------------
#2555 Comment 1:
Thanks @mlep 👍 
--------------------------------------------------------------
#2554 Comment 1:
Thanks ❤️ 
Can you please also change the external-libraries.txt and remove commons from there?  
#2554 Comment 2:
Also small issues:
```
checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/net/sf/jabref/logic/pdf/FileAnnotationCache.java:6: Wrong order for 'net.sf.jabref.model.database.BibDatabaseContext' import. [ImportOrder]
[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/net/sf/jabref/logic/pdf/FileAnnotationCache.java:10: Wrong order for 'java.util.HashMap' import. [ImportOrder]
```
#2554 Comment 3:
Checkstyle help: https://github.com/JabRef/jabref/tree/master/config
#2554 Comment 4:
thanks for the feedback, there is quite a potential to improve stuff with these caches. Maybe I'll have a look at the big picture there later.
--------------------------------------------------------------
#2551 Comment 1:
I'll take a look at this 
#2551 Comment 2:
I tried it and both accept and Parse With FreeCite (whatever that means) works:
On acecpt a new empty entry is created, on Parse with FreeCite the bibtex code I pasted in the field is entered in author title...

```
@Article{Sasdfasdf,
  author    = {\v{s}salomon},
  title     = {asdf},
  url       = {http://www.google.de},
  timestamp = {2016.07.10},
}

```
#2551 Comment 3:
I just want to have a progress indicator: Disabled button with other text...

The functionality itseld works.

#2551 Comment 4:
Expected - only with "Parsing..."

![fuuu gif](https://cloud.githubusercontent.com/assets/1366654/23760500/28943238-04f0-11e7-9847-1abdfa8c1caf.gif)

#2551 Comment 5:
Okay, I looked into it. It does work (uncomment the dispose of the dialog for a moment and you see that the title changes). However this is done very fast, The freecite parsing does not take long enough that it is visible
#2551 Comment 6:
What if we just write `Creating new entry...` instead of `Searching...`? This applies to fetcher as well as to the "text parser". Anyway, I wouldn't invest to much energy in such a small thing (my opinion).
#2551 Comment 7:
OK, too much time spent here. I'll just close it.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2545 Comment 1:
@lenhard is this really hard to implement? [#662](https://github.com/JabRef/jabref/issues/662#issuecomment-280012908). It would be really helpful to open the annotation on the PDF location.

JabRef could store the page number/label of the annotation and the user could configure its preferred PDF reader as: `exec evince -i $PAGE $FILE_PATH` or `exec firefox $FILE_PATH#page=$PAGE`

This solves the arbitrary combinations of operating systems and pdf readers, no?
#2545 Comment 2:
@kafran It is all relative of course ;-)

Storing the page number/ label of the annotation is already done right now, I guess. What makes this a lot of effort is if we want offer built-in configurations for a number of pdf readers and operating system (since we would have to test that). I guess if we just offer the user to execute a command he has to configure himself, it would get easier. We would still get support requests from people asking how things should work for their particular configuration, though.

Anyway, I guess this could be done. I don't see anyone from the current developers volunteering right now (@jabref/developers feel free to disagree), but you are very welcome to go ahead with an implementation and to provide a pull request!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2538 Comment 1:
Can you please add a test for this if possible?
#2538 Comment 2:
Check for valid month and added test
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2532 Comment 1:
Please remove the old latex2unicode formatter code, otherwise good to go.
#2532 Comment 2:
Since the build is passing and there are two approved reviews, I will merge this into master now and close the related issues.
--------------------------------------------------------------
#2531 Comment 1:
LGTM

Do you want to implement https://github.com/JabRef/jabref/issues/2455 as well?  :heart_eyes_cat:
#2531 Comment 2:
Ok I interpret this as a "no" :wink:
#2531 Comment 3:
nah will do that later, maybe at jabcon. is a separate task.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2528 Comment 1:
I merge this for the moment and will fix this then afterwards in all lang files 
--------------------------------------------------------------
#2527 Comment 1:
LGTM, but what is the normal behavior for system dialogs? If I select a file ijnstead of a directory, is it possible and selects the parent folder or is the select button inactive?
#2527 Comment 2:
@stefan-kolb  My fix has only impact when **opening** the dialog, that it opens in a directory without an exception . It has no impact on the selection of files etc.

Parent does not mean parent directory, but the directory itself (the parent of the file):
Example: Your last selected file was X:\abc\defg.pdf  
When you try to set the initalDirectory to this complete path (including filename), it gives an exception, because it is obviously no a folder (directory). Therefore, the fix now sets the dir  to X:\abc (which is the parent of X:\abc\defg.pdf  


#2527 Comment 3:
Ah **** sorry for that! Yeah I know, i was aware of that.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2517 Comment 1:
Thank you very much for your contribution and your debugging this issue! I will merge this in now.

--------------------------------------------------------------
#2515 Comment 1:
I know that it is hard to build a group-related PR with fewer LOC changes, but I still don't like reviewing a PR of this size ;-) On a very superficial scroll-over level, the code looks ok.

Instead, I played around a little with the UI. It took me a while to understand how the highlighting features was meant to work, but once I did, I could not find bugs. And I tried hard. Just one thought:
 - All entries seems to be always green, even if no entries are selected. Should it not be gray in this case? This is a sematics question, so just implement it in the same way as it has been before.

From my user's perspective, the PR is ready to be merged.

#2515 Comment 2:
I will merge this right now as it is. 
@Siedlerchr your comments concerned code that was just moved and not really modified (and I don't really want to touch the code in BasePanel and MainFrame since these components glue everything together but there are absolutely no tests in place...). But, of course, thank you for the review!

@lenhard The all entries hits number is no longer highlighted. Thanks for the suggestion. Do you have any ideas how to make the feature more self-explanatory? 
#2515 Comment 3:
@tobiasdiez Not really. Once you start thinking about it, you end up with a more or less similar solution. One minor thing maybe: When clicking a group I was expecting that all entries in the group become selected (that is: blue). It took me a while to understand that they were sorted to the top and the unselected entries were greyed out. But if it has been that way and nobody really complains about it, it is propably best to leave it that way (in the abscense of a better idea). Also, I did the testing with our gigantic testing database from Aegit. Propably the highlighting is more intuitive if you use it with a database where you built the grouping yourself.
#2515 Comment 4:
There are two modes for groups:
- Gray-out entries that are not matched 
- Filter, i.e. hide non-matched entries
I didn't changed anything at this behaviour.
One of the next PRs will move the option to switch between these modes to the preferences.
#2515 Comment 5:
> One of the next PRs will move the option to switch between these modes to the preferences.

To the `Options` -> `Preferences` preferences? Or do you want to recreate the "old" groups settings menu?
#2515 Comment 6:
I prefer to collect all the options in the preferences dialog. I think it is also not a setting that a user changes very often. What do you think?
#2515 Comment 7:
In general I don't agree: Aspects as "Union vs. Intersect" and "Inverted" are more things that should be directly changeable in the groups UI. 
Switching between "hide" and "float" is more an edge case - as I cannot come up with an use case which requires switching the style - this is just a personal preference.
#2515 Comment 8:
Of course you are right that the other settings (union, intersect, inverted, etc) would make sense as a popup-menu (as they are currently implemented) or as a toggle button. But these other options are not very high on my priority list as I don't really understand why one needs them (maybe they are better implemented as search commands like `not in mygroup` and `in groupa and groupb`)
#2515 Comment 9:
Yeah you need them to accomplish "searches" like the ones you proposed (Find all papers, a) which are in both selected groups, b) which are in one or both of the selected groups, c) which are not in the selected group. 
Of course these are mere "shortcuts" for normal searches, but I'm not sure whether an ordinary JabRef user without some basic knowledge of formal logic can formulate this that easy. 

Maybe we could implement this a bit different as it is now using toggle buttons as for the normal search: Toggle button for "invert" + toggle button for "union", which can only be selected if multiple groups are selected (Side note: This is currently not possible in the FX version :wink:). And, as this is basically just a search that is performed, we could consider that the "search term" will be automatically appended at the search field of the search bar. This could either educate the user how to formulate such searches manually - or confuse him :wink: This also might have been some side effects we should think about (e.g., if a "global search" is already active.

--------------------------------------------------------------
#2514 Comment 1:
Hm seems like a problem with spaces and tabs again

Am 03.02.2017 8:42 vorm. schrieb "Jörg Lenhard" <notifications@github.com>:

> *@lenhard* approved this pull request.
>
> There are a few formatting things that should be fixed before merging, but
> apart from that the code looks fine and is ready to go.
>
> Thanks!
> ------------------------------
>
> In CHANGELOG.md
> <https://github.com/JabRef/jabref/pull/2514#pullrequestreview-19960337>:
>
> > @@ -20,11 +20,13 @@ We refer to [GitHub issues](https://github.com/JabRef/jabref/issues) by using `#
>      - Redesigned journal abbreviations dialog.
>      - Redesigned error console.
>      - All file dialogs now use the native file selector of the OS. [#1711](https://github.com/JabRef/jabref/issues/1711)
> +- The MS-Office XML export now exports the field `volumes` and `pubstate`.
>
> Minor thing: This should be aligned with the other bullet points.
> ------------------------------
>
> In src/test/resources/net/sf/jabref/logic/exporter/
> MsBibExportFormatTest1.bib
> <https://github.com/JabRef/jabref/pull/2514#pullrequestreview-19960337>:
>
> > @@ -26,6 +25,7 @@ @Unpublished{
>    size                        = {1000},
>    sourcetype                  = {Interview},
>    timestamp                   = {2016.08.19},
> +  volumes 					  = {10}
>
> Again, please align.
> ------------------------------
>
> In src/test/resources/net/sf/jabref/logic/importer/fileformat/
> MsBibImporterMsBibFieldsTest.bib
> <https://github.com/JabRef/jabref/pull/2514#pullrequestreview-19960337>:
>
> > @@ -20,6 +19,7 @@ @Article{
>    price                       = {10},
>    school                      = {Gymnasium Unterrieden},
>    size                        = {1000},
> +  volumes 					  = {10},
>
> Again, please align.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2514#pullrequestreview-19960337>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5P-YB564PFpeg6iIrBxQ0Xbw08mIks5rYtpcgaJpZM4L1aT4>
> .
>

--------------------------------------------------------------
--------------------------------------------------------------
#2510 Comment 1:
Thanks!
--------------------------------------------------------------
#2508 Comment 1:
I played around a little with the UI interface. The tree and the context menu are fine I think. However (not using groups that much), it took me quite some time to locate the button you talked about. 

The button was located at the bottom of the interface also in the old groups interface, right? I think the rewrite of the groups panel gives us an opportunity to try to improve a few things. Personally, I think it would be better if the button were moved to the top, right under the heading of the groups sidepane and above the "All Entries" group. What do you think?

Also, support for assigning entries to groups by drag and drop would be cool :-)
#2508 Comment 2:
You are of course right; we should use the rewrite to improve the interface. Thats why I moved the "new group" button from the top to the bottom 😄. My reasoning was that in the majority of the cases you are interested in selecting a group in order to find a assigned entry. Once you have an established group tree, the "new group" functionality is used very rarely. Thus the groups tree is way more important than the add button and should thus be put more prominently, i.e., at the very top. On the other hand, I can see that the add button at the bottom looks a bit disconnected from the groups tree (especially if you have only a few groups). Not sure how to improve this through.

But in the end, I have not a very strong opinion about the location of the button and it is very easy to change. My proposal would be to leave the button at the bottom for the moment and revisit this question as soon as more buttons/functionality is added to the groups pane. 
#2508 Comment 3:
I don't have a strong opinion either :-) @JabRef/developers What does the rest of you think?
#2508 Comment 4:
It would be nice if you could provide a screenshot. Otherwise I don't really care where it it as long as it is there. This is what I wanted in  #2467
--------------------------------------------------------------
#2507 Comment 1:
Ich merge das mal rein und hoffe, dass cih das dann dan fürs erste erledigt hat 
--------------------------------------------------------------
--------------------------------------------------------------
#2499 Comment 1:
There seems to be some problems now with the layout files if you look at travis output
#2499 Comment 2:
It seems that using a formatter for HTML conversion in the layout conflicts with the LatexToUnicode conversion. 

I'm not sure what our take on this is. Maybe this PR is not the solution at all? Maybe the correct solution would be to use LatexToUnicode in the entry preview configuration?
#2499 Comment 3:
> Maybe the correct solution would be to use LatexToUnicode in the entry preview configuration?

Sounds like the better solution in my opinion. I think the formatter can be specified in the layout file, something like `\format[LatexToUnicode]{....}`.
#2499 Comment 4:
> \begin{author} \format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars,LatexToUnicode]{\author}<BR>\end{author}

This is the way to go. Documented in #2498. This PR can be closed.
--------------------------------------------------------------
#2496 Comment 1:
As quick fix imho okay. Maybe that will sooner or later be resolved with JavaFX.

--------------------------------------------------------------
#2495 Comment 1:
I merged too early. According to our CI documentation at https://github.com/JabRef/jabref/wiki/CI, CircleCI just creates binaries without any tests.

SnapCI is the thing with some tests and TravisCI the one with all tests.

Can you change the PR to remove that feature from CircleCI and use it at TravisCI? Maybe, we have to upload the results somehow?

If that does not work, we have to rework our CI structure.
#2495 Comment 2:
I couldn't find something similar for Travis or SnapCI
#2495 Comment 3:
If we resume working on this, we should switch to CircleCI 20. A first attempt is made at the [circle20 branch](https://github.com/JabRef/jabref/tree/circleci20).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2487 Comment 1:
Would it be possible to first check if the event is registered and only doing a shutdown then?
This should be implemented at best in unregister itself

#2487 Comment 2:
@Siedlerchr: Unfortunately, the implementation of the event bus (from Google) supports no such checking functionality. Hence, we would have to remember subscribers in a custom list, which in my point of view would be an unnecessary overhead. However, I have now moved the exception handling code to all the different event sources in JabRef (I hope I found them all). That way, we catch the Exception as early as possible. I cannot think of a circumstance where trying to remove a listener that never listened should crash the complete application.

It is not always logged, though, since not all of the classes that are event sources use a logger. But again, I do not think that this is very tragic, or indeed important.


#2487 Comment 3:
There is already discussion about checking it ... https://github.com/google/guava/issues/784
For fixing check style you should add the comments for switching it off at hat position;
http://stackoverflow.com/questions/4023185/how-to-disable-a-particular-checkstyle-rule-for-a-particular-line-of-code?noredirect=1&lq=1
#2487 Comment 4:
@Siedlerchr Sorry, but I am not getting your comment regarding checkstyle. 

The builds seem to fail because of the usual random fetcher errors.
#2487 Comment 5:
@lenhard I meant the codacy, which will complain about the empty catch blocks.
But I think I confused it with checkstyle module
#2487 Comment 6:
@Siedlerchr Ok, I understand. However, I am not too fond of codacy and refuse to add comments, just because the tool produces false positives. I am well aware that it is near impossible for a tool to tell if an empty catch block makes sense or not, but it is false positive nonetheless. The existing comment in there is meaningful to humans, which is way more important.

I just pushed a few minor formatting fixes.
#2487 Comment 7:
I'll take the "thumps-up" as an "ok-for-merge", which I'll do right away.
--------------------------------------------------------------
#2480 Comment 1:
A test would be nice...but well, I merge it 😄 
#2480 Comment 2:
I confirm, it solved the problem. Many thanks!
--------------------------------------------------------------
#2476 Comment 1:
Thanks for the quick implementation! You should volunteer more often in the DevCall 😸 
--------------------------------------------------------------
#2474 Comment 1:
Really like the idea!
#2474 Comment 2:
Grobid is Apache-licensed: https://github.com/kermitt2/grobid/blob/master/LICENSE
#2474 Comment 3:
This is still `WIP`, because [CERMINE](https://github.com/CeON/CERMINE) is [A-GPL-licensed](https://github.com/CeON/CERMINE/blob/master/LICENSE). This is on of the highest risks in open-source-software.

Maybe, someone should re-try [grobid](https://github.com/kermitt2/grobid).
#2474 Comment 4:
We are currently trying to focus on other things. :fire:
We will come back later to this topic, therefore closing adding [on-hold label](https://github.com/JabRef/jabref/issues?utf8=%E2%9C%93&q=label%3Aon-hold+) and closing the issue for now.
--------------------------------------------------------------
#2473 Comment 1:
Looks good codewise. I tested it locally and it did not get any html code with the entry. So I am merging it right away.
--------------------------------------------------------------
--------------------------------------------------------------
#2466 Comment 1:

Hi Tobias,

Thanks for the feedback--I'm glad the code looks ok to you.

I will do as you say to modify the changelog asap--probably tomorrow.

Jeff Miller

________________________________
From: Tobias Diez [notifications@github.com]
Sent: Monday, January 16, 2017 1:01 AM
To: JabRef/jabref
Cc: Jeff Miller; Author
Subject: Re: [JabRef/jabref] Fixed bug when assigning refs to groups. (#2466)


@tobiasdiez requested changes on this pull request.

Thank you very much for your contribution! The code looks good to me.
Before we merge your pull request, can you please add entry in https://github.com/JabRef/jabref/blob/master/CHANGELOG.md shortly explaining the changes. Thanks!
For this you would need to do something like:

  *   git pull JabRef to get update your git-branch to the latest version
  *   edit the changelog
  *   git commit to record your changes
  *   git push to update your PR with the new changes

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<https://github.com/JabRef/jabref/pull/2466#pullrequestreview-16712829>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ARQWSEXMinbyYP7tcYmyPTs5Vx5gyYfzks5rSgqWgaJpZM4LjcK0>.

#2466 Comment 2:
We merged it and will add the CHANGELOG entry later. We want it to be part of the next release.

Thank you the patch 👍 
--------------------------------------------------------------
--------------------------------------------------------------
#2463 Comment 1:
```
java.lang.AssertionError: expected:<Optional[@article{,
  author = {Wijedasa, Lahiru S and Jauhiainen, Jyrki and Könönen, Mari and Lampela, Maija and Vasander, Harri and LeBlanc, Marie-Claire and Evers, Stephanie and Smith, Thomas E L and Yule, Catherine M and Varkkey, Helena and Lupascu, Massimo and Parish, Faizal and Singleton, Ian and Clements, Gopalasamy R and Aziz, Sheema Abdul and Harrison, Mark E and Cheyne, Susan and Anshari, Gusti Z and Meijaard, Erik and Goldstein, Jenny E and Waldron, Susan and Hergoualc'h, Kristell and Dommain, René and Frolking, Steve and Evans, Christopher D and Posa, Mary Rose C and Glaser, Paul H and Suryadiputra, Nyoman and Lubis, Reza and Santika, Truly and Padfield, Rory and Kurnianto, Sofyan and Hadisiswoyo, Panut and Lim, Teck Wyn and Page, Susan E and Gauci, Vincent and van der Meer, Peter J and Buckland, Helen and Garnier, Fabien and Samuel, Marshall K and Choo, Liza Nuriati Lim Kim and O'Reilly, Patrick and Warren, Matthew and Suksuwan, Surin and Sumarga, Elham and Jain, Anuj and Laurance, William F and Couwenberg, John and Joosten, Hans and Vernimmen, Ronald and Hooijer, Aljosja and Malins, Chris and Cochrane, Mark A and Perumal, Balu and Siegert, Florian and Peh, Kelvin S-H and Comeau, Louis-Pierre and Verchot, Louis and Harvey, Charles F and Cobb, Alex and Jaafar, Zeehan and Wösten, Henk and Manuri, Solichin and Müller, Moritz and Giesen, Wim and Phelps, Jacob and Yong, Ding Li and Silvius, Marcel and Wedeux, Béatrice M M and Hoyt, Alison and Osaki, Mitsuru and Takashi, Hirano and Takahashi, Hidenori and Kohyama, Takashi S and Haraguchi, Akira and Nugroho, Nunung P and Coomes, David A and Quoi, Le Phat and Dohong, Alue and Gunawan, Haris and Gaveau, David L A and Langner, Andreas and Lim, Felix K S and Edwards, David P and Giam, Xingli and van der Werf, Guido and Carmenta, Rachel and Verwer, Caspar C and Gibson, Luke and Grandois, Laure and Graham, Laura Linda Bozena and Regalino, Jhanson and Wich, Serge A and Rieley, Jack and Kettridge, Nicholas and Brown, Chloe and Pirard, Romain and Moore, Sam and Ripoll Capilla, B and Ballhorn, Uwe and Ho, Hua Chew and Hoscilo, Agata and Lohberger, Sandra and Evans, Theodore A and Yulianti, Nina and Blackham, Grace and Onrizal and Husson, Simon and Murdiyarso, Daniel and Pangala, Sunita and Cole, Lydia E S and Tacconi, Luca and Segah, Hendrik and Tonoto, Prayoto and Lee, Janice S H and Schmilewski, Gerald and Wulffraat, Stephan and Putra, Erianto Indra and Cattau, Megan E and Clymo, R S and Morrison, Ross and Mujahid, Aazani and Miettinen, Jukka and Liew, Soo Chin and Valpola, Samu and Wilson, David and D'Arcy, Laura and Gerding, Michiel and Sundari, Siti and Thornton, Sara A and Kalisz, Barbara and Chapman, Stephen J and Su, Ahmad Suhaizi Mat and Basuki, Imam and Itoh, Masayuki and Traeholt, Carl and Sloan, Sean and Sayok, Alexander K and Andersen, Roxane},
  country = {England},
  created = {2016-09-27},
  doi = {10.1111/gcb.13516},
  issn = {1365-2486},
  issn-linking = {1354-1013},
  journal = {Global change biology},
  month = {#sep#},
  nlm-id = {9888746},
  owner = {NLM},
  pmid = {27670948},
  pubmodel = {Print-Electronic},
  pubstatus = {aheadofprint},
  revised = {2017-01-10},
  title = {Denial of long-term issues with agriculture on tropical peatlands will have devastating consequences.},
  year = {2016}
}]> but was:<Optional[@article{,
  author = {Wijedasa, Lahiru S and Jauhiainen, Jyrki and Önönen, Mari K and Lampela, Maija and Vasander, Harri and Leblanc, Marie-Claire and Evers, Stephanie and Smith, Thomas E L and Yule, Catherine M and Varkkey, Helena and Lupascu, Massimo and Parish, Faizal and Singleton, Ian and Clements, Gopalasamy R and Aziz, Sheema Abdul and Harrison, Mark E and Cheyne, Susan and Anshari, Gusti Z and Meijaard, Erik and Goldstein, Jenny E and Waldron, Susan and Hergoualc'h, Kristell and Dommain, Rene and Frolking, Steve and Evans, Christopher D and Posa, Mary Rose C and Glaser, Paul H and Suryadiputra, Nyoman and Lubis, Reza and Santika, Truly and Padfield, Rory and Kurnianto, Sofyan and Hadisiswoyo, Panut and Lim, Teck Wyn and Page, Susan E and Gauci, Vincent and Van Der Meer, Peter J and Buckland, Helen and Garnier, Fabien and Samuel, Marshall K and Choo, Liza Nuriati Lim Kim and O'Reilly, Patrick and Warren, Matthew and Suksuwan, Surin and Sumarga, Elham and Jain, Anuj and Laurance, William F and Couwenberg, John and Joosten, Hans and Vernimmen, Ronald and Hooijer, Aljosja and Malins, Chris and Cochrane, Mark A and Perumal, Balu and Siegert, Florian and Peh, Kelvin S-H and Comeau, Louis-Pierre and Verchot, Louis and Harvey, Charles F and Cobb, Alex and Jaafar, Zeehan and Wösten, Henk and Manuri, Solichin and Müller, Moritz and Giesen, Wim and Phelps, Jacob and Yong, Ding Li and Silvius, Marcel and Wedeux, Béatrice M M and Hoyt, Alison and Osaki, Mitsuru and Hirano, Takashi and Takahashi, Hidenori and Kohyama, Takashi S and Haraguchi, Akira and Nugroho, Nunung P and Coomes, David A and Quoi, Le Phat and Dohong, Alue and Gunawan, Haris and Gaveau, David L A and Langner, Andreas and Lim, Felix K S and Edwards, David P and Giam, Xingli and Van Der Werf, Guido and Carmenta, Rachel and Verwer, Caspar C and Gibson, Luke and Gandois, Laure and Graham, Laura Linda Bozena and Regalino, Jhanson and Wich, Serge A and Rieley, Jack and Kettridge, Nicholas and Brown, Chloe and Pirard, Romain and Moore, Sam and Capilla, B Ripoll and Ballhorn, Uwe and Ho, Hua Chew and Hoscilo, Agata and Lohberger, Sandra and Evans, Theodore A and Yulianti, Nina and Blackham, Grace and Onrizal and Husson, Simon and Murdiyarso, Daniel and Pangala, Sunita and Cole, Lydia E S and Tacconi, Luca and Segah, Hendrik and Tonoto, Prayoto and Lee, Janice S H and Schmilewski, Gerald and Wulffraat, Stephan and Putra, Erianto Indra and Cattau, Megan E and Clymo, R S and Morrison, Ross and Mujahid, Aazani and Miettinen, Jukka and Liew, Soo Chin and Valpola, Samu and Wilson, David and D'Arcy, Laura and Gerding, Michiel and Sundari, Siti and Thornton, Sara A and Kalisz, Barbara and Chapman, Stephen J and Su, Ahmad Suhaizi Mat and Basuki, Imam and Itoh, Masayuki and Traeholt, Carl and Sloan, Sean and Sayok, Alexander K and Andersen, Roxane},
  country = {England},
  created = {2016-09-27},
  doi = {10.1111/gcb.13516},
  issn = {1365-2486},
  issn-linking = {1354-1013},
  journal = {Global change biology},
  month = {#sep#},
  nlm-id = {9888746},
  owner = {NLM},
  pmid = {27670948},
  pubmodel = {Print-Electronic},
  pubstatus = {aheadofprint},
  revised = {2017-01-10},
  title = {Denial of long-term issues with agriculture on tropical peatlands will have devastating consequences.},
  year = {2016}
}]>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at net.sf.jabref.logic.importer.fetcher.MedlineFetcherTest.testSearchByIDWijedasa(MedlineFetcherTest.java:143)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

```
#2463 Comment 2:
Are keywords no longer reported back by Medline?
#2463 Comment 3:
No, only for that entry. For other entries still work.
--------------------------------------------------------------
#2459 Comment 1:
Failing tests are again the damn fetchers...
However, I merge itin
--------------------------------------------------------------
#2457 Comment 1:
Thanks for your PR!
#2457 Comment 2:
working nicely with JabRef 3.8.2 :+1: 
--------------------------------------------------------------
#2452 Comment 1:
Good catch!

Can you please also remove the (now) unecessary import for `UndoableInsertEntry`?

Thanks!
#2452 Comment 2:
Done
#2452 Comment 3:
Great!

Thanks for your contribution! 🎈 
--------------------------------------------------------------
#2450 Comment 1:
Failing test is MathSciNet Fetcher, otherwise LGTM.
--------------------------------------------------------------
#2446 Comment 1:
Like the idea! If you add the missing lang keys, it can be merged. 
Regarding the size/scaling. I am unsure if this works so well with Swing or if you mess  your layout
#2446 Comment 2:
Generally, it works quite well:

![icons-resized](https://cloud.githubusercontent.com/assets/676652/21602363/742c4284-d193-11e6-9c3b-8c6ba8b68721.png)

However, at a few points adjustments have to be made (e.g., size of icons in the main table should be dependent on the maintable font size). 
--------------------------------------------------------------
#2445 Comment 1:
I don't understand why unquoting on parse and quoting on writing does not work.
The input `\"U` will be written as `\\\"U` (as in the java string enquoting) and upon parsing be restored as `\"U`. Of course, a single backslash in the bib file gets lost but JabRef never should write just one backslash but always two. 

As for the StringUtil.quote method, I think, you can edit it directly. If I remember correctly, then its purpose is to ensure that strings are properly encoded for writing them in the bib-file (this applies to all kind of metadata - groups are nothing special). Probably, it would be good to move this method actually to the metadata serializer / parser.
#2445 Comment 2:
@tobiasdiez You are correct, of course. If we avoid that JabRef writes a single backslash into the file, then everything works fine. My bad, for not getting this immediately. The current PR should be ready for review.
#2445 Comment 3:
Build is fine expect a fetcher problem -> Merge
--------------------------------------------------------------
#2442 Comment 1:
@koppor thanks for rebased. I generalized it now to also work for other identifiers so this PR is now ready for review.
#2442 Comment 2:
LGTM 😇 

I get multiple errors when using it. I don't get the information which entry is affected. But this is not an issue of this PR. Just wanted to note it down somewhere.

`2017-03-17 18:14:36,528 Spin-0 ERROR Recursive call to appender GuiLogger`

```
Caused by: org.jabref.logic.importer.ParseException: CrossRef API JSON format has changed
        at org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(CrossRef.java:131) ~[main/:?]
        at org.jabref.logic.importer.fetcher.CrossRef.lambda$getParser$3(CrossRef.java:88) ~[main/:?]
        at org.jabref.logic.importer.IdParserFetcher.findIdentifier(IdParserFetcher.java:75) ~[main/:?]
        ... 8 more
Caused by: org.json.JSONException: JSONObject["given"] not found.
        at org.json.JSONObject.get(JSONObject.java:471) ~[json-20160212.jar:?]
        at org.json.JSONObject.getString(JSONObject.java:717) ~[json-20160212.jar:?]
        at org.jabref.logic.importer.fetcher.CrossRef.toAuthors(CrossRef.java:144) ~[main/:?]
        at org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(CrossRef.java:117) ~[main/:?]
        at org.jabref.logic.importer.fetcher.CrossRef.lambda$getParser$3(CrossRef.java:88) ~[main/:?]
        at org.jabref.logic.importer.IdParserFetcher.findIdentifier(IdParserFetcher.java:75) ~[main/:?]
```

`Caused by: java.io.IOException: Server returned HTTP response code: 500 for URL: http://api.crossref.org/works?query.title=A+%28sub%29graph+isomorphism+algorithm+for+matching+large+graphs&query.author=L.P.+Cordella+and+P.+Foggia+and+C.+Sansone+and+M.+Vento&filter=from-pub-date%3A2004&rows=20&offset=0`
--------------------------------------------------------------
#2441 Comment 1:
Thank you very much for your contribution.
Wish you a happy New year
--------------------------------------------------------------
#2440 Comment 1:
Are These valid für
#2440 Comment 2:
Sorry, was on my mobile.
Codewise LGTM
#2440 Comment 3:
To fix codacy, I removed the `expectCorrect` method and also ensured that there is one assert per test.
--------------------------------------------------------------
#2438 Comment 1:
Fixed newline issues but didn't renamed the fetcher since most of the fetchers don't have a "Fetcher" suffix.
--------------------------------------------------------------
#2437 Comment 1:
To me, the code is worse than before. Less clear, less self-contained. And just for saving a few lines of code which are very simple. Just my 2 cents.
#2437 Comment 2:
Thanks @simonharrer for your feedback. Besides "saving a few lines of code" I had the following motivation in mind:
- Invoke these FieldChecker as validators in the entry editor (i.e. show errors directly while editing an entry)
- Move from strings to valued types. Most of the checkers work with strings, instead of using data objects (for example, they use regular expressions to match pages instead of parsing the string to a Page object and let this class check if it's a normalized page string; the ISSN checker is an exception and in a style I prefer). My hope was that all this parsing can also be moved to the parent FieldChecker class, so that each checker only operates on a parsed object (like `ISSN`). 

But probably all these things can also be accomplished without the FieldChecker as abstraction layer. @JabRef/developers if you think that it over-complicates things, just close this PR.
#2437 Comment 3:
Ok, I see. Thanks for clarification. The PR makes more sense to me now. :-)

In that case, I would vote for a FieldChecker interface that is implemented by each of these classes you refactored. Then, another class can bridge between a Checker and a FieldChecker like an adapter. The FieldCheckers can then be easily used within the entry editor.

Working with generics could be the way to go for your second point, but I am unsure how this will look. The idea behind this change could be to use the decorator pattern. On the outside, there is a String FieldChecker, and on the inside an ISSN FieldChecker, for instance.  

#2437 Comment 4:
Thanks @simonharrer for this suggestion! I now implemented the FieldCheckers via the adapter pattern and think it is more clear than it was before. 
Hopefully you finish your thesis quickly so that you have more time for JabRef again 😄 
--------------------------------------------------------------
#2435 Comment 1:
> What do you think?

I think you should not spend your time in improving your bibliography and not in improving the tool which is uaed to organize it but in producing some more actual Content :wink:
#2435 Comment 2:
The code looks fine. Since I use neither the integrity checks nor journal abbreviation lists, it is a bit hard for me to tell how aggressive we should tune the warnings. I guess the more we increase the amount of warnings, the more we should think about making the integrity check more configurable or introducing levels of severity of warnings, etc. etc.

The travis builds seemed to have failed because of the GUI tests, so I restartet them. If they succeed, this is good to go from my side.
#2435 Comment 3:
Some of the checker unit tests fail. Could you please fix them and then directly merge? Thanks.
#2435 Comment 4:
Ping 😄 
#2435 Comment 5:
I fixed the remaining issues in the PR and am merging this now.
--------------------------------------------------------------
--------------------------------------------------------------
#2429 Comment 1:
What about custom entry fields?
They would then be reported every time


Am 23.12.2016 9:44 vorm. schrieb "Jürgen Lange" <notifications@github.com>:

> This integrity check detects non BibTeX/BibLaTeX fields. This gives the
> opportunity to check for possibly wrong spelling.
>
>    - Change in CHANGELOG.md described
>    - Tests created for changes
>    - Screenshots added (for bigger UI changes)
>    - Manually tested changed features in running JabRef
>    - Check documentation status (Issue created for outdated help page at
>    help.jabref.org <https://github.com/JabRef/help.jabref.org/issues>?)
>    - If you changed the localization: Did you run gradle
>    localizationUpdate?
>
> ------------------------------
> You can view, comment on, or merge this pull request online at:
>
>   https://github.com/JabRef/jabref/pull/2429
> Commit Summary
>
>    - No BibTeX or BibLaTeX field
>
> File Changes
>
>    - *M* CHANGELOG.md
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-0> (1)
>    - *M* src/main/java/net/sf/jabref/logic/integrity/IntegrityCheck.java
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-1> (1)
>    - *M* src/main/java/net/sf/jabref/logic/integrity/
>    NoBibtexFieldChecker.java
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-2> (2)
>    - *A* src/main/java/net/sf/jabref/logic/integrity/
>    NoBibtexOrBiblatexFieldChecker.java
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-3> (53)
>    - *M* src/main/resources/l10n/JabRef_da.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-4> (2)
>    - *M* src/main/resources/l10n/JabRef_de.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-5> (2)
>    - *M* src/main/resources/l10n/JabRef_en.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-6> (2)
>    - *M* src/main/resources/l10n/JabRef_es.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-7> (2)
>    - *M* src/main/resources/l10n/JabRef_fa.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-8> (2)
>    - *M* src/main/resources/l10n/JabRef_fr.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-9> (2)
>    - *M* src/main/resources/l10n/JabRef_in.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-10> (2)
>    - *M* src/main/resources/l10n/JabRef_it.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-11> (2)
>    - *M* src/main/resources/l10n/JabRef_ja.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-12> (2)
>    - *M* src/main/resources/l10n/JabRef_nl.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-13> (2)
>    - *M* src/main/resources/l10n/JabRef_no.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-14> (2)
>    - *M* src/main/resources/l10n/JabRef_pt_BR.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-15> (2)
>    - *M* src/main/resources/l10n/JabRef_ru.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-16> (2)
>    - *M* src/main/resources/l10n/JabRef_sv.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-17> (2)
>    - *M* src/main/resources/l10n/JabRef_tr.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-18> (2)
>    - *M* src/main/resources/l10n/JabRef_vi.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-19> (2)
>    - *M* src/main/resources/l10n/JabRef_zh.properties
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-20> (2)
>    - *M* src/test/java/net/sf/jabref/logic/integrity/
>    IntegrityCheckTest.java
>    <https://github.com/JabRef/jabref/pull/2429/files#diff-21> (18)
>
> Patch Links:
>
>    - https://github.com/JabRef/jabref/pull/2429.patch
>    - https://github.com/JabRef/jabref/pull/2429.diff
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2429>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5B0rdLhNJ6Qz55i64QgMq9Z0rJJJks5rK4nagaJpZM4LUqF0>
> .
>

#2429 Comment 2:
Any news on this? 💤 

It would be good if the recommendation of @Siedlerchr would be implemented.
#2429 Comment 3:
Custom entry fields? Do you mean fields that does not belong to an specific entry type (for example: field journal in type book). This is a good idea, but maybe for another checker.
#2429 Comment 4:
@grimes2  You can either have a) custom entry types (for example  `@MyCustomEntrType`) 
and when you check BibTex -> Custom Entry Types, you can add custom fields. For example you can add a field MyCustomInternalID or whatever as a (required) field for article.

You should take care that you do not report them.  And another thing. When you sometimes import data from other publishers/portals set, you can have custom fields, too. For example, if you import a bib file  from ACM Portal, you typically have a field like  acmid. I am not sure if this should be reported then or not...

[Example from ACM](http://dl.acm.org/citation.cfm?id=2392777.2392781)

#2429 Comment 5:
Help: https://help.jabref.org/en/CustomEntryTypes

Am 20.01.2017 20:09 schrieb "Christoph" <notifications@github.com>:

> @grimes2 <https://github.com/grimes2> You can either have a) custom entry
> types (for example @MyCustomEntrType)
> and when you check BibTex -> Custom Entry Types, you can add custom
> fields. For example you can add a field MyCustomInternalID or whatever as a
> (required) field for article.
>
> You should take care that you do not report them. And another thing. When
> you sometimes import data from other publishers/portals set, you can have
> custom fields, too. For example, if you import a bib file from ACM Portal,
> you typically have a field like acmid. I am not sure if this should be
> reported then or not...
>
> Example from ACM <http://dl.acm.org/citation.cfm?id=2392777.2392781>
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2429#issuecomment-274153707>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ABTaftK6vonh4_IeuPQgVmD93-OMqMeKks5rUQZSgaJpZM4LUqF0>
> .
>

#2429 Comment 6:
Ahh! Good point. But I think, most style files (bst) don't print custom entry fields. So these fields should maybe be reported. I'm thinking (breeding) in the moment about things, that have nothing to do with JabRef. So I would like to pass the implementation to someone else.
#2429 Comment 7:
Closing this issue for now. I think we need to rediscuss this for an addition. Currently, I don't see the immediate use case for this.
--------------------------------------------------------------
#2428 Comment 1:
I merged it and will do the requested changes now to get this into 3.8.2.
--------------------------------------------------------------
#2425 Comment 1:
I did not want to introduce this dependency. Less dependencies seemed better to me.
--------------------------------------------------------------
#2424 Comment 1:
OMG. Two PRs for the same thing. This is the first time ever in JabRef's GitHub history! 🎈 

Since we introduced `doPostCleanup`, we will continue at the other PR. Thank you @simonharrer for following up there, too.
#2424 Comment 2:
@simonharrer Just to make this clear, I didn't wrote my PR as a counter to yours - I finished mine and then read that you already solved the issue. Sorry for this. By the way, good look with your thesis (but of course, we like to see more PRs from you... 😄 )!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2418 Comment 1:
Thanks! I always do this wrong in Markdown ;-)
#2418 Comment 2:
Looks good, I'll merge.
--------------------------------------------------------------
--------------------------------------------------------------
#2415 Comment 1:
GUI: CleanupPreset Panel + Metadata.getDefaultFileDirectory seems not to check bibtex location somehow 

#2415 Comment 2:
  - [x] TODO: Find a wy to cleanup only one file


#2415 Comment 3:
- [ ] TODO: Add some preview dialog stuff
#2415 Comment 4:
- [x] Prevent FileDirPattern subfolder creation on each run if already exists
#2415 Comment 5:
I had a look at the code, which in general is good, and fixed a few minor issues directly (missing getters/setters that were missing well before this PR, but this is a good time for a fix). I also played around a little with the UI and tried to find errors, but was unsuccessful.

In the spirit of progress and as suggested by @Siedlerchr  https://github.com/JabRef/jabref/pull/2415#discussion_r103486029 I am merging now directly. More far fetching suggestions by @tobiasdiez should be addressed in a follow-up PR, as discussed above.


@Siedlerchr Thanks again for this heap of work!
--------------------------------------------------------------
#2414 Comment 1:
I double-checked the code and there should be nothing problematic left. Essentially this is just a few replacements of the static `BibtexParser.parse` with `new BibtexParser(...).parse`.

When you merge, please do not squash so that the commits by @oscargus are preserved.
#2414 Comment 2:
I also extracted the initialization of the parser to the setup method in the tests (as proposed in #2139). Oscar was right; it is not nice to simply mark a method as deprecated and let other people cleanup the dirt - thanks for your work @oscargus and @lenhard. 
#2414 Comment 3:
Waaaaahhhh I clicked on squash & merge. How do I revert and merge as "normal" ??
--------------------------------------------------------------
#2413 Comment 1:
LGTM

Regarding the merge entry: This is a more general problem of all IDBasedFetchers - as mentioned by @stefan-kolb in https://github.com/JabRef/jabref/issues/2117#issuecomment-255052260: We currently do not perform the same checks and modifications on fetched entries as we do/did for the normal web fetchers. Thus, there is no check for duplicates.
#2413 Comment 2:
I wanted to say that "BPELscript ..." (search string) gets "{BPELscript}" (returned by the publisher; which is good in this case), but sometimes something strange is returned by the fetcher and the user title (used for searching) might have to be preferred. 
--------------------------------------------------------------
#2412 Comment 1:
Coming from: https://github.com/JabRef/jabref/issues/2404

I've just installed JabRef_windows-x64_3_8_1-dev--snapshot--2016-12-20--groupsRework--d78d7ae: The groups interface appears to be empty/just gray. Furthermore "About JabRef" does not seem to work (no window appears).

I have Java 1.8.0_111: Do I need a specific Java version for JavaFX to run?
#2412 Comment 2:
@AEgit Thanks for trying out the build. I just updated to Java 1.8.111 and had similar problems with the new groups. A fixed version should be available in a few minutes under http://builds.jabref.org/groupsRework/. However, the "About" dialog worked fine for me. Could you check under "Help > Error console" whether some error messages are reported (but this dialog is also implemented in JavaFX, so if you have general problems with it than probably this also doesn't work and you would need to run [JabRef from the console](http://help.jabref.org/en/CommandLine) to see error messages)
#2412 Comment 3:
Ok, tried the new version, but I still have the same problems. I ran it from command line. When I try to display "About JabRef" the following error message appears:

```
File: aboutdialog.fxml not found, attempting with camel case
File: aboutdialog.css not found, attempting with camel case
16:32:20.820 [JavaFX Application Thread] ERROR net.sf.jabref.FallbackExceptionHandler - Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.NullPointerException: null
        at net.sf.jabref.gui.AbstractView.getView(AbstractView.java:25) ~[JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.help.AboutDialogView.show(AboutDialogView.java:15) ~[JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.help.AboutAction.lambda$actionPerformed$0(AboutAction.java:22) ~[JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295) ~[jfxrt.jar:?]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_111]
        at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294) ~[jfxrt.jar:?]
        at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
        at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191) ~[jfxrt.jar:?]
        at java.lang.Thread.run(Unknown Source) [?:1.8.0_111]
```

When trying to display the "Groups panel" I get the following error message:

```
16:36:56.253 [AWT-EventQueue-0] ERROR net.sf.jabref.gui.SidePaneManager - Following side pane could not be found: Internetrecherche
java.lang.ClassNotFoundException: Internetrecherche
        at java.net.URLClassLoader.findClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.ClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.ClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.Class.forName0(Native Method) ~[?:1.8.0_111]
        at java.lang.Class.forName(Unknown Source) ~[?:1.8.0_111]
        at net.sf.jabref.gui.SidePaneManager.getPreferredPositions(SidePaneManager.java:167) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.access$000(SidePaneManager.java:25) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager$PreferredIndexSort.<init>(SidePaneManager.java:213) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.show(SidePaneManager.java:124) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.show(SidePaneManager.java:96) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.toggleThreeWay(SidePaneManager.java:87) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneComponent$ToggleAction.actionPerformed(SidePaneComponent.java:142) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at javax.swing.AbstractButton.fireActionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.JToggleButton$ToggleButtonModel.setPressed(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton.doClick(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton.doClick(Unknown Source) [?:1.8.0_111]
        at javax.swing.plaf.basic.BasicMenuItemUI$Actions.actionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.SwingUtilities.notifyAction(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processKeyBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.KeyboardManager.fireBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.KeyboardManager.fireKeyboardAction(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBindingsForAllComponents(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBindings(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.processEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.processEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.KeyboardFocusManager.redispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Window.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.access$500(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$3.run(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$3.run(Unknown Source) [?:1.8.0_111]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$4.run(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$4.run(Unknown Source) [?:1.8.0_111]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.run(Unknown Source) [?:1.8.0_111]
16:36:56.258 [AWT-EventQueue-0] ERROR net.sf.jabref.gui.SidePaneManager - Following side pane could not be found: groups
java.lang.ClassNotFoundException: groups
        at java.net.URLClassLoader.findClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.ClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.ClassLoader.loadClass(Unknown Source) ~[?:1.8.0_111]
        at java.lang.Class.forName0(Native Method) ~[?:1.8.0_111]
        at java.lang.Class.forName(Unknown Source) ~[?:1.8.0_111]
        at net.sf.jabref.gui.SidePaneManager.getPreferredPositions(SidePaneManager.java:167) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.access$000(SidePaneManager.java:25) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager$PreferredIndexSort.<init>(SidePaneManager.java:213) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.show(SidePaneManager.java:124) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.show(SidePaneManager.java:96) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneManager.toggleThreeWay(SidePaneManager.java:87) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at net.sf.jabref.gui.SidePaneComponent$ToggleAction.actionPerformed(SidePaneComponent.java:142) [JabRef-3.8.1-dev--snapshot--2016-12-22--groupsRework--69951e8.jar:?]
        at javax.swing.AbstractButton.fireActionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.JToggleButton$ToggleButtonModel.setPressed(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton.doClick(Unknown Source) [?:1.8.0_111]
        at javax.swing.AbstractButton.doClick(Unknown Source) [?:1.8.0_111]
        at javax.swing.plaf.basic.BasicMenuItemUI$Actions.actionPerformed(Unknown Source) [?:1.8.0_111]
        at javax.swing.SwingUtilities.notifyAction(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processBindingForKeyStrokeRecursive(Unknown Source) [?:1.8.0_111]
        at javax.swing.JMenuBar.processKeyBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.KeyboardManager.fireBinding(Unknown Source) [?:1.8.0_111]
        at javax.swing.KeyboardManager.fireKeyboardAction(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBindingsForAllComponents(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyBindings(Unknown Source) [?:1.8.0_111]
        at javax.swing.JComponent.processKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.processEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.processEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.KeyboardFocusManager.redispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(Unknown Source) [?:1.8.0_111]
        at java.awt.DefaultKeyboardFocusManager.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Container.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Window.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.Component.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.dispatchEventImpl(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.access$500(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$3.run(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$3.run(Unknown Source) [?:1.8.0_111]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$4.run(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue$4.run(Unknown Source) [?:1.8.0_111]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_111]
        at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source) [?:1.8.0_111]
        at java.awt.EventQueue.dispatchEvent(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source) [?:1.8.0_111]
        at java.awt.EventDispatchThread.run(Unknown Source) [?:1.8.0_111]
```



--------------------------------------------------------------
--------------------------------------------------------------
#2407 Comment 1:
Thanks!
--------------------------------------------------------------
#2405 Comment 1:
Documentation at http://help.jabref.org/en/TimeStamp

Does not work with master and v3.8 on my side. v3.7 does not compile any more ("Could not find de.undercouch:citeproc-java:1.0.0-SNAPSHOT"). Does also not work with v3.6. 

The solution is to reset the preferences.

Solution works for me. @matthiasgeiger Thank you for the fix.
#2405 Comment 2:
Does not work for me even after resetting the preferences... (JabRef-3.8.1-dev--snapshot--2016-12-20--master--b655bfd.jar)
#2405 Comment 3:
@mlep: After resetting the preferences, the timestamp field appears for me and the datepicker works as desired. 

The dev version you mention in your comment is not the most recent one, maybe it did not yet include the fix. Can you try again with JabRef-3.8.1-dev--snapshot--2016-12-20--master--62d55e1.jar
#2405 Comment 4:
Indeed, the calendar is displayed now.
HOWEVER, the `Clear` function does not work as expected: the timestamp field is not cleared. If I click on `Today`, then `Clear` works.
#2405 Comment 5:
@mlep Indeed! Clear only works if a proper date is already in the field. If you insert something else, such as `abc`, then clear does not work.

@matthiasgeiger Can you please address this? Since this PR is already merged, I guess we need a follow-up PR.
#2405 Comment 6:
Note: for me, it does not clear even if the field content looks good, like:
 ` timestamp     = {2016-10-26},`
--------------------------------------------------------------
--------------------------------------------------------------
#2401 Comment 1:
Please add a test for https, too. Should work, because HttpsUrlConnection is direct subclass of HttpUrlConnection. Then you can merge 
--------------------------------------------------------------
--------------------------------------------------------------
#2399 Comment 1:
Hint by @mkarg (Thank you!)

One has to use https://docs.oracle.com/javase/8/javafx/api/javafx/scene/input/Clipboard.html. Otherwise, it would not work.
#2399 Comment 2:
I looked into it and found this https://bugs.openjdk.java.net/browse/JDK-8088117 and while i couldn't find anything similar for the oracle jdk i couldn't get it to work with that either.
So maybe put this on hold for now?

> Using JavaFX-8 with Java8u45 on SUSE11, there is no possibility to copy/paste using mouse selection or using a click on the scroll.
> See details here: http://stackoverflow.com/questions/30032290/javafx-mouse-clipboard-does-not-work-in-unix

> Lowering the priority to P4. I note that this is more of an unimplemented feature than a bug (it has never been supported in FX). We will look at it for JDK 9.
> Workaround: use copy/paste (CTRL-C / CTRL-V) 
#2399 Comment 3:
We migrate to JavaFX, so this hack is (i) not working and (ii) there is no work-around. We have to re-investigate as soon as JavaFX can cope with the secondary buffer.
--------------------------------------------------------------
#2398 Comment 1:
maybe you could take a look at #2389 
--------------------------------------------------------------
--------------------------------------------------------------
#2395 Comment 1:
Thanks!
--------------------------------------------------------------
#2392 Comment 1:
Thank you very much for your contribution 👍. Your changes look good to me. Could you please add a changelog entry in https://github.com/JabRef/jabref/blob/master/CHANGELOG.md and then we can merge your PR!
#2392 Comment 2:
I am browsing from my mobile so I can't check my self... Is this action also available via the menu when no entry editor is open? If yes this change might break this functionality...
#2392 Comment 3:
These are different actions. We have "Quality" - "Lookup fulltext documents". This only does an online search. At "Get fulltext", first, a local lookup is made.

Thus, this quick fix is OK.

In the long run, we have to work on https://github.com/koppor/jabref/issues/192
#2392 Comment 4:
@avaucher  Thank you for the quick solution 👍 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2384 Comment 1:
Besides minor comments, LGTM :+1:. Also tested locally with file/open and Quality/find unlinked files
--------------------------------------------------------------
#2383 Comment 1:
Regarding the file dialog, it would be cool to use our File Dialog class, see #1711 
It could simply be replaced with the javafx version
Otherwise Code looks good
#2383 Comment 2:
Good point! Follow-up PR https://github.com/JabRef/jabref/pull/2384
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2380 Comment 1:
Thanks!
--------------------------------------------------------------
--------------------------------------------------------------
#2376 Comment 1:
Thank you for working on it. Please do not check in ` src/main/gen/`. It is generated by `./gradlew generaetesources`. Please fix (maybe using git commit --amend or using guit gui and use "amend"). Otherwise, the review is really hard.

Please also check the output of "Snap CI":

```
/var/snap-ci/repo/src/main/java/net/sf/jabref/logic/layout/format/GetOpenOfficeType.java:66: error: reached end of file while parsing
}
 ^
1 error
:compileJava FAILED
```
#2376 Comment 2:
@fronchetti I'd like to gently ask if you plan to continue working on this PR? It's been a month since you opened the PR and you have not reacted to the comment by @koppor 
--------------------------------------------------------------
#2375 Comment 1:
How about a Changelog entry and we are ready to go :)
#2375 Comment 2:
Put  ruhe  Latex  cleanup  in  Single  quotes  as  it  is a  command  in
 JabRef

#2375 Comment 3:
When importing via the firefox plugin the percent sign are excaped. Importing via the medline websearch they are not. I do not find any mentioning in the cleanup dialogue of percent sign changed to \% signs.

JabRef 3.8
windows 7 6.1 amd64 
Java 1.8.0_66
#2375 Comment 4:
@bernhard-kleine  The cleanup is not done automatically. 
You should use Cleanup->and then select the field you want to cleanup, e.g. abstract together with **LaTeX Cleanup**
#2375 Comment 5:
I updated to JabRef 3.8 today, i choose the 64bit version. 
I took a new database. 
I imported via the medline web search PMID 27697972. 
The abstract has unescaped percent signs. Therefore, I went to quality->cleanup and as the abstract field is already selected I checked all the entries in the field to the right but can not find percent sign. Latex cleanup did not find anything to cleanup. What do I miss? 
#2375 Comment 6:
I had to add it first and then run the cleanup. Sorry for the noise!
#2375 Comment 7:
I added LaTeX cleanup for the abstract field. Still, percent sign are saved as they are which leads to errors when running biber. In case the percent sign is escaped, jabref removes the backslash when saving.
#2375 Comment 8:
@j0hannes   This has been fixed with #2521  
Thank you for reporting this issue. We think, that is already fixed in our development version and consequently the change will be included in the next release.

We would like to ask you to use a development build from https://builds.jabref.org/master and report back if it works for you.
#2375 Comment 9:
@Siedlerchr I tried version 4.0 and it seems to be quite unstable; I had to force quit the application each time as it was hanging. Before crashing it destroyed some of the keys, so I'm going back to 3.8.2 now. Is there any other way to address the percent problem?
#2375 Comment 10:
@j0hannes  Could you please open a new issue for the problems you encounter with the 4.0.0 version in detail?
E.g. Operation system, any errors in/from the log?

You could manually escape the %-signs by adding a Backslash \ before it. That works.
You could simply search for the %-sign to see all problematic entries and then escape them manually

#2375 Comment 11:
I have raised issues for the backslash and the % sign before. My
problems are gone with Version 4.0.0 using  Quality->cleanup entries->
and adding abstract: Latex cleanup the the Run field formatter: before
clicking OK.

The errors due not excaped % signs turn out to be tiresome, since the
error message for example in texstudio plus latexmk are not direct, only
by checking the log you know that a % sign was not escaped.


Am 20.03.2017 um 13:34 schrieb Christoph:
>
> @j0hannes <https://github.com/j0hannes> Could you please open a new
> issue for the problems you encounter with the 4.0.0 version in detail?
> E.g. Operation system, any errors in/from the log?
>
> You could manually escape the %-signs by adding a Backslash \ before
> it. That works.
> You could simply search for the %-sign to see all problematic entries
> and then escape them manually
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2375#issuecomment-287746381>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AIyh51Vqm2pRk83pefo3h891xvpSBSOCks5rnnJIgaJpZM4LLtFh>.
>

-- 
spitzhalde9
D-79853 lenzkirch
bernhard.kleine@gmx.net
www.b-kleine.com, www.urseetal.net
-
thunderbird mit enigmail
GPG schlüssel: D5257409
fingerprint:
08 B7 F8 70 22 7A FC C1 15 49 CA A6 C7 6F A0 2E D5 25 74 09


#2375 Comment 12:
After changing my bib file manually, version 4.0 is not crashing anymore. Still, it modifies all my citation keys and I don't find any way to stop it.
#2375 Comment 13:
@j0hannes Did you run a cleanup operation or a save action? Did you check the keypattern settings?
I would suggest opening a new issue, if this problem still exists 
#2375 Comment 14:
@Siedlerchr No, it happens right when typing, loading or after inspecting manual changes to the bib file. When typing keys are changed when the focus moves to a different field.
#2375 Comment 15:
I can confirm that the problem still persists with "abstract: LaTeX cleanup" enabled in version 4.0.0-dev. Every time I enter \%, it is immediately changed to % and % ends up as % in the bib file which causes LaTeX to fail.
#2375 Comment 16:
I can not reproduce this. % sign is correctly escaped (and only once) to `\%`
Using Latex Cleanup for abstract. 

#2375 Comment 17:
It certainly was caused by the LaTeX to Unicode filter.
--------------------------------------------------------------
#2374 Comment 1:
Update: Fixes #2343
#2374 Comment 2:
> It is the deal with Chimbori that we use ebook.de first to reduce load on his server. The deal was made in personal emails I exchanged with the author of Chimbori

This was our conversation regarding the version that I had self-hosted, before I set up the dedicated service at bibtex.chimbori.com. Feel free to send *all* your traffic to this new endpoint!
--------------------------------------------------------------
#2373 Comment 1:
Can https://github.com/JabRef/jabref/issues/2210 also be fixed in this PR? Maybe, some of these things are already fixed with this PR?
#2373 Comment 2:
Yes, all the issues listed in #2210 are fixed although not I but @boceckts took care of most of them, see https://github.com/JabRef/jabref/pull/2213 and https://github.com/JabRef/jabref/pull/2212.
--------------------------------------------------------------
--------------------------------------------------------------
#2371 Comment 1:
@lenhard You can probably comment a little bit on the test that were previously inside the parser.
#2371 Comment 2:
I tend to either fix the ignored tests or remove them. For some of them I don't even know what they should do...
#2371 Comment 3:
@JabRef/developers I need help from all of you that have expertise in at least one of these topics!
#2371 Comment 4:
The tests for the file field are a bit strange. I'm not sure why tabs and newlines are bad there. But, anyways, the parser shouldn't remove whitespace; this should be done in a separate cleanup.

The result of the author parsing also looks good to me (although one could argue that the Jr part is unimportant and should  be deleted in an abbreviated representation...).
#2371 Comment 5:
XMP: This is JabRef's implemenation to store BibTeX data inside PDFs to ease sharing of BibTeX data along with the PDF. Refs #938 https://github.com/JabRef/jabref/pull/1096#issuecomment-220529040. Think, we have to switch to Dublin Core or to biblatexml. This takes more than a few hours. Since I am fan of this way of sharing, I'd like to keep the tests to be able to think of backward compatibility. 
#2371 Comment 6:
My 2 cents:
 - newline / tab elimination: That happens in `FieldContentParser`, which is called during parsing, and does work. However, the file field is explicitly exempted from this behavior, so the test fails (trying to fix the content of the `file` field is calling for problems). I think this should be changed to some other field, say `title` and the tests would be fine.
 - edge case: This is documented in #1212 and does not work. With the current structure of the parser, this is also far from trivial, since it would need a lot of look-ahead in the parsing. My strategy has been to ignore it until some users actually complain about it. I would keep on doing that.
 - author parsing: No idea really, I would keep ignoring it.
 - The html stuff I am not sure as well. I haven't really touched those formatters so far.
#2371 Comment 7:
@lenhard Thanks for your input. So I just need to change the first tests to another field right now, e.g. title?!
I will remove the dge case then for now.
Looks like the author parser is correct.
So I'm just missing a resolution for the HTML and XMP stuff 😄 👍 
#2371 Comment 8:
> However, the file field is explicitly exempted from this behavior, so the test fails (trying to fix the content of the file field is calling for problems). I think this should be changed to some other field, say title and the tests would be fine.

Or: Rewrite the tests to check that the content of the file field is NOT changed. @stefan-kolb You should check whether tests for these two aspects are already in place - if so, you can just delete the `ignored` ones
#2371 Comment 9:
@stefan-kolb @matthiasgeiger If you invert the tests, then use either `review` or `abstract`. These are the only hard-coded fields where we avoid newline elimination. The other ones can be configured in the preferences and the file field is a default. But if a user really wants to, he can remove it from that list.
#2371 Comment 10:
Ok, I fixed or removed all tests now. Only one ignored test is remianing in logic, which will be fixed by @matthiasgeiger in his custom entries PR?! The GUI tests still remain ignored.
#2371 Comment 11:
@lenhard Thanks for the review, some good input here!
--------------------------------------------------------------
#2369 Comment 1:
First of all, thank you very much for taking the time to analyze JabRef and other OpenSource. We are "proud" that we are relevant enough to be considered in your analysis ;)
I quick read your referenced paper and find the insights very interesting. 

To answer some of your additional questions, I first have to state, that I am not a long standing JabRef developer and that many of the original developers are no longer active and this of course changed over the time. However, as I have a background as Software developer and worked with several software systems, I think I can answer your questions.

> 1/ Do you think that coding UI listeners that manage several widgets is a bad coding practice?

In general I would agree to you, following the Separation of Concern principle. However, there might be situations where this can not be achieved fully, e.g. due to limiting implementations provided by the framework.

>2/ Do you think that the threshold of three or more widgets per listener relevant for characterising a Blob listener?

Strictly speaking I would say, more than one or two are definetly an indicator. However, setting the threshold to low could lead to many false positives.

>3/ Do you think that the refactored code relevant to remove Blob listeners?

I took a look at the refactored code and would say it is relevant. 

>4/ Do you have any idea of the reason of the presence of Blob listeners in your code?

As the orginal JabRef version is very old (first release in 2003 or earlier ) and during the time there have been working many devs on it with a different skill set. I would say we both have technical (lack of features) and skill related aspects. Despite that, as far as I would say from a personal view,  the idea of following coding best practices and standards has been becoming more the focus in the last years. Especially in university lectures etc where still Java 2 was the state of the art for many years, despite newer versions.

5/ We identified two Blob listener for which we do not have a refactoring solution:

We will check them 

6/ Do you have suggestions about other bad user interface coding practices? This can concern controllers, commands, GUIs, widgets, data bindings, GUI testing, etc.

Apart from the design and interaction of the GUI, I think a typical bad practices is a more general practice, having logic code inside the GUI classes. Another thing would be a calling GUI code from other threads without invoking or  executing long operations in the gui code.

Mabye some others @JabRef/developers  have some more ideas on that ;)

Thank you very much for your useful analysis.
Feel free to contribute more ;)
#2369 Comment 2:
Regarding your follow-up questions, I have little to add on top of the comments of @Sie
dlerchr 

Overall, I like the refactoring since it enforces separation of concerns more clearly. The only downside I see is that this bloats the initialization code somewhat, as we usually add the listeners at the place where we create the UI components.

1. Hard to say. I does not strictly violate the MVC pattern, I would say. Therefore, it highly depends on the concrete situation. Overall, I like your solution.
2. I agree that more than one could be used as threshold, but generalizing this is probably not possible.
3. I assume that by "relevant" you mean "suitable". In my point of view, the solution is ok.
4. As @Siedlerchr said, JabRef is old. It has grown and evolved without a structure or plan over many years and many people with a different background contributed to it. In such an environment, a certain degree of chaos is inevitable. Availability of Java language features are probably not the reason.
5. The UI classes do not have to be refactored as long as they are working. We are trying to maintain a higher degree of quality in the other parts of jabref (btw, you might want to have a look at https://github.com/JabRef/jabref/wiki/High-Level-Documentation ). In this setting, the UI really has the lowest priority in terms of code quality. Refactoring is welcome of course, but we are not actively changing UI classes just for the reason of quality improvement. Our illusive hope is that everything will get better when we switch to JavaFX.
6. Our most pressing need is a framework that allows us to write easy and concise UI tests that remain stable.
#2369 Comment 3:
Indeed, the detection of code smells always depends on the context. That is why the threshold should be customised by developers depending on their needs.

Regarding JavaFX, a very nice testing framework is TestFX: https://github.com/TestFX/TestFX
I wrote tutorials on how to write simple and complex tests and how to factorise test code with this library:
https://torgen-engineering.blogspot.fr/2015/11/testing-javafx-applications-with-testfx.html
https://torgen-engineering.blogspot.fr/2015/12/gui-testing-how-to-compare-javafx-gui.html

I am also porting an app from Swing to JFX: https://github.com/arnobl/latexdraw/tree/master/latexdraw-core/net.sf.latexdraw
This port is supported by a large UI testing suite powered by TestFX:
https://github.com/arnobl/latexdraw/tree/master/latexdraw-core/net.sf.latexdraw/src/test/test/gui

Hope it may help. Porting to JFX is not an easy task.

Thanks a lot for your feedback!
If other devs want to give their opinion, your welcome.
#2369 Comment 4:
Thanks for your suggestions! Do have experience with FX support in OpenJdk? We would welcome any hints regarding pitfalls with this one.

One more thing regarding your solution here that came to my mind. A major advantage of your solution, in my point of view, is that the top level class no longer needs to implement `ActionListener`. In terms of information hiding, this is a major advantage.

Finally, I tested the listeners in the in a running JabRef and everything seems to work fine. Let us give some other devs the opportunity to have a look at the code. Nevertheless, this might make it into v3.8 on friday.
#2369 Comment 5:
Thanks again for the feedback.
Even if I am an open-sourcer, I do not really like OpenJDK and always use and recommend the OracleJDK (I know, shame on me). The main reason is that many users reported me issues that do not appear with the OracleJDK.
Ubuntu/Debian releases the OpenJFX library but I never use it. Fedora do not package OpenJFX yet (https://bugzilla.redhat.com/show_bug.cgi?id=1145303).


--------------------------------------------------------------
#2368 Comment 1:
This is ready for review now. Please carefully see the changes in the initial post and think about possible side effects I might have missed! I also need some advice for the setID() replacement.
#2368 Comment 2:
LGTM. Shouldn't we (i) use this Id as HashCode? or (ii) get rid of the Id completely?
#2368 Comment 3:
We could use it as hash code. We also use it to distinguish duplicated/cloned entries + in our integrity checks to jump to an entry (that might have no key for example).
#2368 Comment 4:
I don't quickly get why we cant use `equals()` etc. OK, probably the code needs to be rewritten accordingly.
#2368 Comment 5:
Maybe we could do this eventually...
#2368 Comment 6:
Code looks good. Your issues seem hard to tackle. We merge after v3.8 and then test in production. 😇 
--------------------------------------------------------------
#2367 Comment 1:
Thank you for the update. Even though the tests fail, I will merge and repair manually afterwards.
#2367 Comment 2:
The fix is in https://github.com/JabRef/jabref/commit/4aa0da2bb0d3d0c40178e0a8d792969b6e7013ee

```
> c:\Python27\python scripts\syncLang.py update -e
Processing file 'JabRef_ja.properties' with 1583 Keys
        fixed 5 unambiguous duplicates
                Empty_search_ID=µñ£þ┤óIDÒüîþ®║, The_given_search_ID_was_empty.=µÅÉþñ║ÒüòÒéîÒüƒµñ£þ┤óIDÒüîþ®║ÒüºÒüÖÒÇé, Copy_BibTeX_key_and_link=BibTeXÚìÁÒü¿Òâ¬Òâ│Òé»ÒéÆÒé│ÒâöÒâ╝, empty_BibTeX_key=þ®║Òü«BibTeXÚìÁ, BibLaTeX_field_only=BibLaTeXÒâòÒéúÒâ╝Òâ½ÒâëÒü«Òü┐
        deleted 1 obsolete keys
                Use_EMACS_23_insertion_string
        has been sorted successfully
```
--------------------------------------------------------------
#2364 Comment 1:
Hehe, let us see how political this will get :-)

Code-wise the PR looks fine and I give my +1 for merging. The only blocker is that, for some reason, the GUI tests are failing. EDIT: I restartet the build for the push, let's see if it works on a second try.
#2364 Comment 2:
You could also create a discussion point at https://github.com/plk/biblatex 
#2364 Comment 3:
In case, I want to start a discussion, I'm going to do that on the [DANTE e.V. mailing list](https://lists.dante.de/mailman/listinfo/dante-ev) or same [DANTE e.V. event](https://www.dante.de/events.html). 😇 
#2364 Comment 4:
The GUI tests are also failing on master: https://travis-ci.org/JabRef/jabref/builds/183054056

Refs https://github.com/JabRef/jabref/pull/1700
#2364 Comment 5:
I don't like this.

Despite I'm not using the Biblatex mode I think it is the wrong approach to use the "deprecated" field instead of the intended field only because we are too lazy to implement our fetchers in the right way or because the user is too lazy to convert copied BibTeX entries to biblatex :wink:
#2364 Comment 6:
`journaltitle` is the main biblatex field for journal names and hence JabRef should support it as a first class citizen. This means, it should be displayed as a required field and "to biblatex" should convert `journal` to `journaltitle`. Moreover, the journal is not the only controversial field: date is the preferred way to store the publication date but bibtex only supports `year` and `month`. In my opinion, we shouldn't reinterpret the "biblatex standard" just because some users have problems. 

But of course I can see that the new conventions are sometimes inconvenient if users switch between BibTeX and BibLaTeX. As far as I see it, the main problem is that "journal" lands in "deprecated" although it is an alias to a required field. Would it be a solution to show the journal field right below "journaltitle" in "required" if it has a value? Then it would work similar to year+month vs date.
#2364 Comment 7:
@matthiasgeiger `journal` is not deprecated, it is just an alias field.
#2364 Comment 8:
@tobiasdiez Yes, that would be a solution.
#2364 Comment 9:
Therefore I put it in quotes ;-) 
#2364 Comment 10:
All comments addressed. Should be good to go now.
--------------------------------------------------------------
#2363 Comment 1:
Alternative implementation of https://github.com/JabRef/jabref/pull/2346. I have to check for similarities etc. I think, this is the better implementation ^^
#2363 Comment 2:
 - [x] Output "Copying..." when beginning to copy in the status bar
 - [x] Add support for a keyboard shortcut.
 - [x] Reorder the menu: Text, HTML, RTF, AsciiDoc, XSL-FO
 - [x] Rename FO in the code to XSLFO
 - [x] Surround the XSL-FO with correct XML
 - [x] Surround the HTML with correct HTML. See https://github.com/JabRef/jabref/pull/2346/files#diff-cb51fdec9f87342ddddc0f5ea987b5cdR51

It is OK for me not to use HTMLTransferrable to reduce the load of JabRef. (HTMLTransferrable requires both HTML and Text, which doubles the time to copy). With the old approach, a copy leads to text being pasted into nodepad++, whereas Word had formatted text. I don't know whether this is good for the users. Using the proposed approach, the user can always choose the format he wants.

## XML for XSL-FO

```
<?xml version="1.0" encoding="UTF-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
   <fo:layout-master-set>
      <fo:simple-page-master master-name="citations">
         <fo:region-body/>
      </fo:simple-page-master>
   </fo:layout-master-set>
   <fo:page-sequence master-reference="citations">
      <fo:flow flow-name="xsl-region-body">

<!-- add the entries here -->

      </fo:flow>                         
   </fo:page-sequence>
</fo:root>
```



#2363 Comment 3:
- [x] Fix [SnapCI](https://app.snap-ci.com/JabRef/jabref/pull/2363/logs/defaultPipeline/6/gradle-check): 
```
net.sf.jabref.logic.l10n.LocalizationConsistencyTest > findMissingMenuLocalizationKeys FAILED
    java.lang.AssertionError: DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH MENU FILE
    1. PASTE THESE INTO THE ENGLISH MENU FILE
    2. EXECUTE: gradlew localizationUpdate
    [Copy_citations...=Copy_citations...] expected:<[]> but was:<[src/main/java/net/sf/jabref/gui/JabRefFrame.java Copy_citations... (MENU)]>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:834)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at net.sf.jabref.logic.l10n.LocalizationConsistencyTest.findMissingMenuLocalizationKeys(LocalizationConsistencyTest.java:139)
```
#2363 Comment 4:
- [x] Add newline between entries when using JabRef's preview

![grabbed_20161211-225606](https://cloud.githubusercontent.com/assets/1366654/21083638/014df99c-bff5-11e6-9309-4fa55267b548.png)


#2363 Comment 5:
- [ ] The HTML has double quoting of the encoding: `<meta charset=\"utf-8\">`
- [x] When pasting it into Word, I get the HTML code, not a rendered HTML. This does not happen when copying the JabRef Preview. Maybe using HTMLTransferable and using the HTML code for html and plain text is the solution?
#2363 Comment 6:
- [x] is it possible to fix the indent when copying "JabRef Preview"?
      ![grabbed_20161212-001325](https://cloud.githubusercontent.com/assets/1366654/21084383/176222f4-c003-11e6-943f-82be63f4eef5.png)
- [x] Rename RtfSelection to RtfTransferable
- [x] Make use of RtfTransferable to copy that into the Clipboard. Otherwise, RTF is rendered as plain text:
    ![grabbed_20161212-003844](https://cloud.githubusercontent.com/assets/1366654/21084398/57e64dc8-c003-11e6-9b83-a0fd04800eb2.png)
- [x]  When using "Text", "Rtf", "AsciiDoc" is used, only the second copy is available in the clipboad.
#2363 Comment 7:
- [x] `\uc0` should be removed from the RTF output

Input bibtex:

```
@Article{Eshuis_2016,
  author       = {Rik Eshuis and Alex Norta and Raoul Roulaux},
  title        = {Evolving process views},
  journaltitle = {Information and Software Technology},
  date         = {2016-12},
  volume       = {80},
  pages        = {20--35},
  doi          = {10.1016/j.infsof.2016.08.004},
  publisher    = {Elsevier BV},
}
```

Output:

![grabbed_20161212-230559](https://cloud.githubusercontent.com/assets/1366654/21118756/8f83ea08-c0bf-11e6-9d7b-9ca3087a760b.png)

#2363 Comment 8:
- [x] I think, "Copy preview" should appear in Menu*.only.

> 12:59:42.054 [AWT-EventQueue-0] WARN  net.sf.jabref.logic.l10n.Localization - Warning: could not get menu item translation for "Copy preview" for locale en
> 12:59:42.055 [AWT-EventQueue-0] WARN  net.sf.jabref.logic.l10n.Localization - Warning: no menu item translation for "Copy preview" for locale en
#2363 Comment 9:
- [x] `{}` should also be removed from RTF output. I don't know, what's going on there, but I am trying with remote code and fix to get this running. Possibly, its a fault in the CSL library, but we got no time to investigate this now.
#2363 Comment 10:
 - [x] Is it possible to add test cases for the other outputs? Just generating RTF, XSD-FO, Text, and AsciiDoc for an example entry?
#2363 Comment 11:
The travis error is likely due to no X11 installed, reporting headless excpetion
#2363 Comment 12:
That's exactly the problem, I rewrote the methods to avoid the clipboard.
#2363 Comment 13:
LGTM :+1:. The changes need a second review and thus this PR awaits a second review.

Also tested locally with Microsoft Word 2013 and Notepad++ on Windows 10.
--------------------------------------------------------------
#2362 Comment 1:
I am not used to JavaFX Gui implementation. Thus, I trust you. --> Tested locally and besides minor comments: LGTM.
--------------------------------------------------------------
#2361 Comment 1:
The groups code is a mess :-( Thanks for being willing to put up with this!

Unfortunately, the amount of changes is too large for meaningful review and my knowledge on groups and the related code is too limited. I would trust your ability, and the amount of tests that you added here together with the working build. Cosmetic changes can be made on a later occasion. I am sure this is not the last visit to the groups code.

Since this is on your private branch, we have no build on builds.jabref.org. If we had, we could ask the people that reported the issues to try out this version. Any chance of getting a build for this?
#2361 Comment 2:
Decision: merge so that many people will be able to test it. We can include code review comments later in a separate PR.

I am very aware of the risk. Refs #1495.
#2361 Comment 3:
- [ ] dragging an entry to a group does not refresh the main table. (keyword-based group)
- [ ] context menu shows "Remove group, keep subgroups" even though there are no subgroups
- [ ] deletion of a static group does not remove the assignment of entries to it
- [ ] clicking on a group and pressing <kbd>Del</kbd> triggers the dialog "Do you want to remove the selcted entries". If I press <kbd>Cursor Down</kbd>, the next group is selected. Thus <kbd>Del</kbd> should really apply to the current group.

Nothing important or me. Think, this was also happening using the old groups code.
--------------------------------------------------------------
--------------------------------------------------------------
#2358 Comment 1:
Could you add a test case?

Medline tests are failing: https://travis-ci.org/JabRef/jabref/builds/182632279#L329
#2358 Comment 2:
I just updated the test cases. As far as I understood it, this should be the normal behavior. So no additional tests should be necessary.
--------------------------------------------------------------
#2357 Comment 1:
I'm not sure if we 100% need this check just thinking...
#2357 Comment 2:
Ok, looks good to me code-wise. Since this had been reviewed by two other devs and you fixed their issues, I will merge this right away.
--------------------------------------------------------------
#2356 Comment 1:
I tested this and, at least for me, there seems to be no flickering effect. So, I think we should go ahead.

The only long-term solution will be to get rid of swingx. Hopefully, this is possible in the course of JavaFX.
--------------------------------------------------------------
#2354 Comment 1:
Besides the minor comments, it looks good.

Could you adapt the functionality of "Jump to entry" so that it works too, if only one entry is selected.

![not-functioning](https://cloud.githubusercontent.com/assets/1366654/21022483/1144ee48-bd7d-11e6-8d3e-3798e8f62f99.gif)


I would place "+" and "-" right next to the field so that the UI is not that ugly, but that's a matter of taste.
--------------------------------------------------------------
--------------------------------------------------------------
#2349 Comment 1:
I did a quick check and it appears to work. 
#2349 Comment 2:
Uhh... Browsing this from my mobile I'm not Sure... But @tobiasdiez you have closed the PR and not merged it 😉
#2349 Comment 3:
Anything that needs to be changed here?
#2349 Comment 4:
From my point of view, it's good. I merge it in
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2346 Comment 1:
This implementation uses caching, but the numbering is wrong. Thus, the implementation of #2363 is the one to take.
--------------------------------------------------------------
#2345 Comment 1:
I currently cannot test, no working VM with X11. Maybe someone else has?
#2345 Comment 2:
I get the same problems with the diriver:

```
libGL error: unable to load driver: swrast_dri.so
libGL error: failed to load driver: swrast
X Error:  BadValue
  Request Major code 154 (GLX)
  Request Minor code 24 ()
  Value 0x0
  Error Serial #32
  Current Serial #33

```

I found this issues which are similar and there seems to be some libgl stuff missing or whatever (not an expert in that area)
https://forum.snapcraft.io/t/build-fotoxx-snap-need-help/1355/14
https://forum.snapcraft.io/t/libgl-error-unable-to-load-driver-i965-dri-so/733

#2345 Comment 3:
@Siedlerchr Thank you for the pointers. The last one lead me to https://wiki.ubuntu.com/snapcraft/parts and the issue seems to be solved. **Please test again.** I cannot test due to blue screens when using VirtualBox and I get the error `MobaXterm X11 proxy: Unsupported authorisation protocol` when launching it from a remote connection to a VM. Starting `xclock` works.
#2345 Comment 4:
The error was also reported by @jabaa at https://github.com/JabRef/jabref/issues/3021#issuecomment-317263619
#2345 Comment 5:
Unfortunately I still get the same error, did a complete reinstall of the jabref snap. Even updated my Ubuntu kernels.
`Linux 4.4.0-83-generic #106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux`

#2345 Comment 6:
@koppor do you think this is feasible for 4.0? I would really like to include this in 4.0, but then we would have to include it into a beta version, so people can test it.
#2345 Comment 7:
Yes, I do think so. We also testers, so it is a very good idea to include it in beta-3.
#2345 Comment 8:
It's not so cool that we mix our build environments again but hey...
#2345 Comment 9:
Yeah, I also don't like it. However, [snapcraft is supported for CircleCI 2.0 only](https://circleci.com/blog/build-test-publish-snap-packages/). I tried to port our build to CircleCI 2.0 at https://github.com/JabRef/jabref/tree/circleci20, but I did not succeed. Needs much more work...
#2345 Comment 10:
We can also use launchpad to build snaps: It checks for new commits 4 times a day from github:
https://snapcraft.io/docs/build-snaps/ci-integration
#2345 Comment 11:
While JabRef now starts and runs fine, I still get the xprops error:
```
java.io.IOException: Cannot run program "/usr/bin/xprop": error=2, No such file or directory
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at java.lang.Runtime.exec(Runtime.java:620)
	at java.lang.Runtime.exec(Runtime.java:450)
	at java.lang.Runtime.exec(Runtime.java:347)
	at org.GNOME.Accessibility.AtkWrapper.<clinit>(AtkWrapper.java:34)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at java.awt.Toolkit.loadAssistiveTechnologies(Toolkit.java:805)
	at java.awt.Toolkit.getDefaultToolkit(Toolkit.java:886)
	at java.awt.Toolkit.getEventQueue(Toolkit.java:1734)
	at java.awt.EventQueue.invokeLater(EventQueue.java:1266)
	at javax.swing.SwingUtilities.invokeLater(SwingUtilities.java:1290)
	at org.jabref.JabRefMain.start(JabRefMain.java:53)
	at com.sun.javafx.application.LauncherImpl.lambda$launchApplication1$8(LauncherImpl.java:863)
	at com.sun.javafx.application.PlatformImpl.lambda$runAndWait$7(PlatformImpl.java:326)
	at com.sun.javafx.application.PlatformImpl.lambda$null$5(PlatformImpl.java:295)
	at java.security.AccessController.doPrivileged(Native Method)
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$6(PlatformImpl.java:294)
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
	at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method)
	at com.sun.glass.ui.gtk.GtkApplication.lambda$null$5(GtkApplication.java:139)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: error=2, No such file or directory
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 24 more

```
#2345 Comment 12:
I don't get the reason for the issue with `x11-prop`.  `x11-utils` is included in the snap build: https://github.com/JabRef/jabref/pull/2345/files#diff-184032a532406b07009403e26f4fc62fR24 and:

```
$ apt-cache search xprop
x11-utils - X11 utilities
```
#2345 Comment 13:
I get the same output, and  `locate xprop` says:
```
/usr/bin/xprop
/usr/share/man/man1/xprop.1.gz
```

As these ATK is some gnome stuff, I believe it has to do with my Xfce desktop environment. So maybe someone with gnome or KDE can test this

I also tried to install  java-atk-wrapper, not still same error
https://launchpad.net/ubuntu/+source/java-atk-wrapper

 
#2345 Comment 14:
I would propose

1. Merge this PR
2. me tries to get <s>https://snapcraft.io/docs/build-snaps/ci-integration</s>https://build.snapcraft.io/ running
3. In parallel, we fix snapcraft.yml via PRs
4. If the issue is fixed, we can make a JabRef release also on SnapCraft.
#2345 Comment 15:
1. The current state does not change our build system
2. I worked in the comments of @stefan-kolb in build.gradle
3. @Siedlerchr agreed to https://github.com/JabRef/jabref/pull/2345#issuecomment-321559116

Thus, I merge. 😇 
#2345 Comment 16:
Current state: gradle binary cannot be downloaded from http://build.snapcraft.io. See: https://github.com/canonical-websites/build.snapcraft.io/issues/918
#2345 Comment 17:
The new location is handled at https://github.com/JabRef/jabref/pull/3107.
#2345 Comment 18:
Future tracking of SnapCraft is tracked at https://github.com/JabRef/jabref/issues/3121
--------------------------------------------------------------
--------------------------------------------------------------
#2341 Comment 1:
Thank you for the fast translations. :fire:
--------------------------------------------------------------
#2340 Comment 1:
I like that `EasyDateFormat` gets smaller. We should try to use standard libraries 😇 

The library is now available at maven central: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22LGoodDatePicker%22

Locally tested: LGTM
--------------------------------------------------------------
#2339 Comment 1:
Failing test is something from Medline, not related 
#2339 Comment 2:
However  in  this  case  that  would  result  in  the  original  bug
 again, when checked for ifPresent !

If the field is not yet in the biblatex entry (which is obviously the case
when you only have year), it returns an EmtyOptional and thus you would
have the same situation as in the original code.
This is why I splitted it.




#2339 Comment 3:
Failing Snap CI is due to HTTP error 502 in AstrophysicsDataSystemTest 
#2339 Comment 4:
Could you please merge master again - I merged https://github.com/JabRef/jabref/pull/2333 and thus SnapCI only does the basic tests as described at https://github.com/JabRef/jabref/wiki/CI#snapci 😇 
#2339 Comment 5:
@Siedlerchr: sorry I don't understand you comment.
Lets go through this case by case with the following code:
````
Optional<String> date = entry.getField(FieldName.DATE);
Boolean isBlank = StringUtils.isBlank(date);
````

case | date | isBlank |
---- | --- | --- |
no date at all | Optional.empty | true
empty string | Optional.of("") | true
something else | Optional.of("something") | false

You want to move year and month to the date field exactly in the first two cases, i.e., if and only if `isBlank == true`. What do I miss?

#2339 Comment 6:
Ah now I understand your comment, the first case was not obvious for me, that an empty should return true.

#2339 Comment 7:
@tobiasdiez The confusion came from the naming stuff. I previously had the apache.commons StringUtil class and not the jabref specific one. Changed that.
#2339 Comment 8:
Besides the micro comment: LGTM :+1:
--------------------------------------------------------------
#2338 Comment 1:
LGTM :+1: .

Unfortunately I couldn't find the case which reproduces the bug from https://github.com/JabRef/jabref/issues/2336 while using Debian Jessie.
However, this solution works for me without any problems.
#2338 Comment 2:
Thanks for the review!
--------------------------------------------------------------
#2337 Comment 1:
Is t his compatible with the eclipse style?
And you are missing a newline at EOF
#2337 Comment 2:
Actually I don't like this automatic line breaks at all. Why not let the developer choose when to break the line? We are not in the 90s where desktop resolutions were so low that they had to restrict the line length for devs.
#2337 Comment 3:
1 .The import style, as far as I can see, is set as we have done with checkstyle (so this is very much appreciated).
2. As stated by @stefan-kolb automatic line breaking should not be turned on.
3. I had a look at more intellij options. There is more that can be configured like in the Eclipse style, i.e.
  - Use spaces for tabs
  - a tab is 4 spaces of indent
  - Set spaces for all kind of constructs, i.e., after if, while, etc.
  - There are also many options to force braces for the aforementioned statements

I am not sure if many of these things are set by Intellij by default and you do not have to specify this explicitly, but please have a check and modify the configuration if needed.
#2337 Comment 4:
It the "spaces for all kinds of contructs" really in place? I saw

> if(preset.getFormatterCleanups().isEnabled()) 

in a commit after this merge.
#2337 Comment 5:
Yes it is on by default, but I think IntelliJ does not reformat the code on changes (only if I tell it to do so). 
--------------------------------------------------------------
--------------------------------------------------------------
#2332 Comment 1:
Looks good, but at Least eclipse needs a plugin for recognizing that. 
You should document that somewhere
--------------------------------------------------------------
#2331 Comment 1:
Okay... I think the current state is now a good improvement of the old status-quo. 
At the moment the prefs migration and a dialog showing a warning if customized entries would be overridden is still missing. 

Apart from that I would appreciate some feedback ;-)
#2331 Comment 2:
Apart from a CHANGELOG and some more tests this is good to go from my side.
#2331 Comment 3:
@mlep @frithnanth It is not yet decided whether we will include this improvement in 3.8 or not. However, there are three more translations which are added in this pull request. Could you provide me translations for these three strings? Then I'll add them manually.
Thanks!

```
Select_all_customized_types_to_be_stored_in_local_preferences=
Currently_unknown=
Different_Customization,_current_settings_will_be_overwritten=
```
#2331 Comment 4:
On Thu, Dec 15, 2016 at 11:17 AM, Matthias Geiger <notifications@github.com>
wrote:

> @mlep <https://github.com/mlep> @frithnanth
> <https://github.com/frithnanth> It is not yet decided whether we will
> include this improvement in 3.8 or not. However, there are three more
> translations which are added in this pull request. Could you provide me
> translations for these three strings? Then I'll add them manually.
> Thanks!
>
> Select_all_customized_types_to_be_stored_in_local_preferences=
>
>  Select_all_customized_types_to_be_stored_in_local_
preferences=Seleziona_tutti_i_tipi_personalizzati_da_registrare_nelle_preferenze_locali

> Currently_unknown=
>
>  Currently_unknown=Attualmente_sconosciuto

That's the singular mode, the plural is "Attualmente_sconosciuti".
But since Italian is profoundly evil, that's OK if referred to a masculine
noun, the feminine forms are different, but I'm digressing :-)

> Different_Customization,_current_settings_will_be_overwritten=
>
>  Different_Customization,_current_settings_will_be_
overwritten=Personalizzazione_differente,_i_parametri_correnti_saranno_sovrascritti

>  —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2331#issuecomment-267291718>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADyA2AnC2wjebXAMoi4YuB2CzYqky1Bgks5rIRPHgaJpZM4LCcrA>
> .
>



-- 
Fernando Santagata

#2331 Comment 5:
Thank you @frithnanth !
#2331 Comment 6:
You're welcome!

On Fri, Dec 16, 2016 at 9:30 PM, Matthias Geiger <notifications@github.com>
wrote:

> Thank you @frithnanth <https://github.com/frithnanth> !
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2331#issuecomment-267688937>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ADyA2EhYM65slWyTwdWTJwH8EDTLmMC4ks5rIvT2gaJpZM4LCcrA>
> .
>



-- 
Fernando Santagata

#2331 Comment 7:
How did we proceed regarding standard types? Is it a v4.0 issue? See https://github.com/koppor/jabref/issues/248
--------------------------------------------------------------
--------------------------------------------------------------
#2329 Comment 1:
Plz merge after the fix
--------------------------------------------------------------
--------------------------------------------------------------
#2327 Comment 1:
I have some valid DOIs, which look a bit weird, maybe  you could add a test for them:

`10.17487/rfc1436`
`10.1002/(SICI)1097-4571(199205)43:4<284::AID-ASI3>3.0.CO;2-0`
#2327 Comment 2:
I don't think the additional tests proposed by @Siedlerchr are necessary here. They are more tests of the DOI implementation and not tests of the integrity checker. (the second DOI is even already a testcase in https://github.com/JabRef/jabref/blob/master/src/test/java/net/sf/jabref/logic/util/DOITest.java).

Apart from that: LGTM
--------------------------------------------------------------
#2325 Comment 1:
Thank you for your contribution :smile: !
--------------------------------------------------------------
#2320 Comment 1:
LGTM

#2320 Comment 2:
Can someone please try this on OSX @chochreiner. I also signed the dmg but I'm not sure that this works with the current certificate (even quite sure that it doesn't).
https://builds.jabref.org/cert/
#2320 Comment 3:
Standard response (double click):
![screen shot 2016-11-29 at 16 53 18](https://cloud.githubusercontent.com/assets/19794844/20717082/a0226544-b654-11e6-9f0a-7bb6a9f19a70.png)

By right click -> open:
<img width="532" alt="screen shot 2016-11-29 at 16 53 31" src="https://cloud.githubusercontent.com/assets/19794844/20717048/8052fa3a-b654-11e6-9026-01ba19989f90.png">

With the signed version:
![screen shot 2016-11-29 at 16 59 42](https://cloud.githubusercontent.com/assets/19794844/20717292/56ecb5ea-b655-11e6-921b-222dbb362ef5.png)

So it seems to work but gives of course the standard warning for Applications from outside the App Store.
#2320 Comment 4:
hmm
for me, there is no difference between the app from the master and the cert branch
Which certificate are you currently using?
#2320 Comment 5:
Which settings do you have for installing applications? For me it is set to "Allow apps downloaded from Mac App Store and identified developers".

I think if you use one of the other two settings there will be no differences between the builds...
#2320 Comment 6:
For me its: "App Store and identified developers" (on MacOS Sierra)
#2320 Comment 7:
Ok.. Now I am confused. Just checked on MacOS Sierra from a colleague and there is no difference between the builds. Maybe it is something about the OS (I am using OS X El Capitan) or I have changed something else which interferes, f.e. disabled SIP to get Spaces back, but this shouldn't make a difference. I can check next week on OS X Mavericks or later today on Mac OS X Snow Leopard.. but I think the latter has no signing...  
#2320 Comment 8:
Maybe we need an extra certificate issued or registered with the App Store for MacOSX? Needs to be investigated later. For now it works for Windows at least.
--------------------------------------------------------------
#2317 Comment 1:
Code-wise, this looks fine. Lacking emacs, I cannot check this locally, but I'll trust you on it.
--------------------------------------------------------------
#2316 Comment 1:
Included feedback
--------------------------------------------------------------
#2315 Comment 1:
@hakova Thanks!
#2315 Comment 2:
On Monday, November 28, 2016 8:18:17 AM CST MLEP wrote:
> @hakova Thanks!

No problem! :)

#2315 Comment 3:
Thanks for your contribution!
--------------------------------------------------------------
#2314 Comment 1:
Thanks to the feedback from Dagstuhl we now directly use the "standard" form of bibtex entries containing all relevant information (esp. DOIs) and full book/journal/conf-titles.
--------------------------------------------------------------
--------------------------------------------------------------
#2310 Comment 1:
LGTM! 
--------------------------------------------------------------
#2307 Comment 1:
Sorry I don't know if this is the right place to ask my question, that is, whether it is possible to fetch the abstract when clicking "Get Bibtex data from DOI" (along with other data Author/Journal, etc.). Thanks!
#2307 Comment 2:
@onewiki This is not possible, as the information for DOIs are resolved using [crossref.org](http://www.crossref.org). And crossref.org does not provide abstracts, see this example: http://search.crossref.org/?q=10.2331%2Fsuisan.32.804
#2307 Comment 3:
@matthiasgeiger Thanks for explaining.
#2307 Comment 4:
@matthiasgeiger Sorry to bother you with another question (since you are knowledgeable on DOI etc.): do all articles (in social science) have DOIs, or only the ones published after year 2000?
#2307 Comment 5:
@matthiasgeiger  This is not really right: CrossRef does provide a way to get the abstract, however, this is only possible using the XML version, see the comment:
https://github.com/CrossRef/rest-api-doc/issues/98#issuecomment-227132063

I recently checked that, because of a feature request in the forum:
http://discourse.jabref.org/t/export-abstract-from-text/324/2

@onewiki  It depends which article a DOI has. I recently had one article from 1987 in the area of computer science which had a DOI assigned. As Publishers have to pay a fee for using a DOI, it might be that not all are willing to pay it, especially OpenAcces models.
#2307 Comment 6:
Generally not all academic works have DOIs, e.g., Technical Reports published at my university only have a ISSN for the series and a "URN" as an identifier. Also workshop and conference publications exist without DOIs. *Most* journal articles however have DOIs - but there are also journals not using DOIs. 

In my main database there are some articles published prior 2000 which have a DOI, e.g.: http://doi.org/10.1145/69605.2085 - but most older articles don't have DOIs.
#2307 Comment 7:
@Siedlerchr 
Thanks, but I am a novice; could you please explain a little more what this means? "If you have a DOI use the API but append ".xml" to the end." How to do that?
#2307 Comment 8:
@onewiki  The hint with the xml was for @matthiasgeiger. It's an implementation detail for calling the  API service from JabRef, you can't  do anything with.
#2307 Comment 9:
@Siedlerchr Are you saying I have to wait for the Jabref team to incorporate this feature into the program (so that it will be available in a future version)?
#2307 Comment 10:
@tobiasdiez Please fix the few very minor things mentioned above, merge the language files and then this is ready to go into master!
--------------------------------------------------------------
--------------------------------------------------------------
#2304 Comment 1:
So, what started out as a simple improvement ran into some issues. This is all due to the, in my point of view, quite unfortunate implementation of the remote functionality. This is heavily tied to being managed in a thread specifically and the lifecycle heavily depends on that. I was not successful in refactoring it towards a runnable within a reasonable amount of time and reverted that part of the PR.

The rest is no problem: Also the former low-priority threads are now managed in a thread pool as opposed to a custom thread list and in case someone ever wants to do a manual prioritization it would be a one-liner to add it back. Moreover, threads can be named and are named as before. The remote thread is kept as is and also managed by `JabRefExecutorService`, but with a little stricter requirements: There will never be more than one thread of this type in a JabRef instance, which was not ensured before.

I have installed the compiled version from builds.jabref, played around a little, and everything seems fine. I would appreciate it if someone else would also do some testing (no visible error should happen and JabRef should terminate in an orderly fashion) and then this is good to go from my side.
#2304 Comment 2:
I do remember the pain with RemoteThread. Hm, would something like this work? https://techblog.bozho.net/interrupting-executor-tasks/
#2304 Comment 3:
I would just leave the RemoteThread as it is in this PR now. The problem is that the whole remote functionality is dependent on this being a RemoteThread and it also depends on various lifecycle methods of the Thread class itself (calls for Thread.State, etc.). This just won't work as soon as you use an ExecutorService and changing it would mean rewriting the remote functionality. Purely for a refactoring, this is not worth it imho.

#2304 Comment 4:
We checked this in the devcall and I will merge it now. The build breaks at the moment because of the BibLatexEntryTypes, but that is also the case for master, so it does not prevent merging.
--------------------------------------------------------------
#2303 Comment 1:
Test is failing: 
```
net.sf.jabref.logic.citationstyle.CitationStyleGeneratorTest > testCarriageReturn FAILED

    org.junit.ComparisonFailure: expected:<...ight-inline">J. Doe [and J. ]Doe, .</div>

      </div...> but was:<...ight-inline">J. Doe [John and]Doe, .</div>

      </div...>

        at org.junit.Assert.assertEquals(Assert.java:115)

        at org.junit.Assert.assertEquals(Assert.java:144)

        at net.sf.jabref.logic.citationstyle.CitationStyleGeneratorTest.testCarriageReturn(CitationStyleGeneratorTest.java:24)
```

As I'm not an expert for the CSL styles... is this an issue or just an irrelevant change? @bartsch-dev @koppor 
#2303 Comment 2:
We should update asap, because version 1.0.0 is no longer avaiable at jcenter/maven repo:
https://bintray.com/bintray/jcenter/de.undercouch%3Aciteproc-java
#2303 Comment 3:
I have no clue. Just @Ignore

#2303 Comment 4:
The new version just removes the carriage return (`\r`) which is bad as this possibly connects two lines. (https://github.com/michel-kraemer/citeproc-java/commit/729ca2c21c508654e51a713399c8becf2c0dff39#commitcomment-19902593)
#2303 Comment 5:
Thanks for the explanation. I already adapted the test to be no longer failing. 
Let's keep an eye on the discussion -  but I'll merge this anyway as currently all builds are failing due to a missing citeproc dependency.
#2303 Comment 6:
Side note: Maven Central still offers version 1.0.0 - https://mvnrepository.com/artifact/de.undercouch/citeproc-java/1.0.0

I don't get, why it is removed on bintray (https://bintray.com/bintray/jcenter/de.undercouch%3Aciteproc-java)

@michel-kraemer Could you give us a hint why version 1.0.0 was removed on bintray?
#2303 Comment 7:
It was the '-SNAPSHOT' Version we used and which has been removed after the official 1.0.0 version
#2303 Comment 8:
Hey guys!

I see two problems here.

a) Version 1.0.0 is not available on Bintray. That's very strange. I only upload to Maven Central and Bintray should sync automatically. It must be a problem with Bintray actually, but if you like I can try to publish 1.0.0 to Bintray too.

b)`\r` is replaced by nothing and not a space. I'm sorry if this causes problems. It seems there are files out there containing only a `\r` without a `\n`? If you can confirm this [in the other thread](https://github.com/michel-kraemer/citeproc-java/commit/729ca2c21c508654e51a713399c8becf2c0dff39) I can release a fix.
#2303 Comment 9:
Regarding b): I fixed it here https://github.com/michel-kraemer/citeproc-java/commit/dc800d17d8bdab0817e5ef624843a40fb6d1a116

If you wish I can release 1.0.2 shortly.
#2303 Comment 10:
Thank you for your feedback. I think, an update is not necessary: See https://github.com/JabRef/jabref/pull/2306
--------------------------------------------------------------
#2302 Comment 1:
Yeah, this fixes my issue.

I'm still asking for test cases 😇 

--------------------------------------------------------------
#2301 Comment 1:
@tobiasdiez  There are some things with the Metadata to make it compile again. Could you please have a look? thanks!
#2301 Comment 2:
How to handle the metadata is indeed a problem. I remember that I removed the content selectors mainly because they were the last not-so-easy-to-convert-to-the-new-metadata item. The next few days I will not find the time to assist you here, sorry.
#2301 Comment 3:
Still some language related errors. 
#2301 Comment 4:
The localization keys existed before the feature was removed. I wonder why the revert did not restore them in the language files?
#2301 Comment 5:
I did a manual revert, because there were some more changes which would have led to conflicts otherwise.
Was somehow decided.
#2301 Comment 6:
As this was a rather old feature I suppose there were translations for most languages... Can you readd the translated values as well? Or should I go  digging in the history? 😉
#2301 Comment 7:
So I re-implemented parsing and serialization of content selectors and added tests for it. It is probably not the most beautiful fashion, but I need to (want to) link to the old code and not have to re-write the GUI. 

Speaking of the GUI: The content selectors seem to be working fine if the MetaData is in the bib file. The GUI in the EntryEditor is not actually beautiful, but I guess it has never been (does anybody feel like polishing the UI?). However, I do not see Options –> Manage content selectors. Maybe that has not been ported from  #2068 yet? Maybe someone who is more familiar with the menu than me can have a look? :)

Finally, the test currently say:
```
net.sf.jabref.logic.help.HelpFileTest > referToValidPage FAILED
```
Although there seems to be a help page here: http://help.jabref.org/en/ContentSelector Someone certainly has a pointer for that?
#2301 Comment 8:
Regarding the help file, there is an enum called HelpFiles or similar  for
the name of the help page

I can take a look at the dialog thing in the menu

Am 30.11.2016 5:10 nachm. schrieb "Jörg Lenhard" <notifications@github.com>:
>
> So I re-implemented parsing and serialization of content selectors and
added tests for it. It is probably not the most beautiful fashion, but I
need to (want to) link to the old code and not have to re-write the GUI.
>
> Speaking of the GUI: The content selectors seem to be working fine if the
MetaData is in the bib file. The GUI in the EntryEditor is not actually
beautiful, but I guess it has never been (does anybody feel like polishing
the UI?). However, I do not see Options –> Manage content selectors. Maybe
that has not been ported from #2068 yet? Maybe someone who is more familiar
with the menu than me can have a look? :)
>
> Finally, the test currently say:
>
> net.sf.jabref.logic.help.HelpFileTest > referToValidPage FAILED
>
> Although there seems to be a help page here:
http://help.jabref.org/en/ContentSelector Someone certainly has a pointer
for that?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.

#2301 Comment 9:
I pushed a commit which should take care of the menu item (hopefully, I directly edited it on github).
#2301 Comment 10:
@tobiasdiez Indeed, it does! Nice :) That means the feature is back!

Regarding the help files, there is `CONTENT_SELECTOR("ContentSelector"),` in `net.sf.jabref.logic.help.HelpFile`, so the test really should not fail, should it?
#2301 Comment 11:
Ok, seems we are back on track, only the google scholar test is failing now, which, I hope, is just a random connection problem on the side of travis. The same might have applied for the help file test.

So now we can do some more code review and at a certain point, have the users from #2221 try out the feature to make sure that it works.
#2301 Comment 12:
@tobiasdiez I addressed most of your comments. I agree that "content selectors" is probably not the most appropriate name for the stuff this feature does, but it is the name under which it has existed for a long time and is known, at least by some people. I would say that consistency in naming tops appropriateness of the name.

Furthermore, I removed the entry editors update code, as you asked for. The updating of the content selectors did not even work with this code. I tried to replace it with something else and failed. So, for now you have to restart JabRef to get a change in the content selectors to work. Maybe someone from @JabRef/developers can provide a hint on how the refresh of the entry editor should work?

Finally, I will leave the problems in the localization for @Siedlerchr to fix :)
#2301 Comment 13:
Closing and reopening of the entry editor does not work? (Potentially with selecting another entry?)
#2301 Comment 14:
@matthiasgeiger Unfortunately not. The changed data makes it into the MetaData, but the GUI does not notice. It is only up-to-date when the MetaData is re-read from disk and the EntryEditor is re-built. Closing and reopening the bib file does the trick, or restarting JabRef
#2301 Comment 15:
So we would like to get this into v3.8, which hopefully can be released in december. What is missing:
 - [ ] correct the language files
 - [ ] have selector keywords updated without reloading of the bib file
 - [ ] Have the users play around with it to see if it really works

I was hoping that @Siedlerchr could do the first two points, and hopefully soon :-) @Siedlerchr what is your opinion on that?
#2301 Comment 16:
Yeah, I will try to work on it. At least I tried to fix the language files, yesterday. 
I will continue working on it the weekend
--------------------------------------------------------------
#2300 Comment 1:
I merged it, because it is a hotfix. @obraliar Do you think, it is possible to add a testcase for that?

#2300 Comment 2:
I am testing PostgreSQL using ElephantSQL.com. I am having autosave activated. I restart JabRef. I get following exception:

```
20:56:15.998 [AWT-EventQueue-0] INFO  net.sf.jabref.logic.importer.OpenDatabase - Opening: C:\Users\koppor\BTSync\Projects\2016-11 - Dagstuhl-Paper\dagstuhl.bib
Nov 20, 2016 8:56:22 PM com.google.common.eventbus.EventBus$LoggingHandler handleException
SEVERE: Exception thrown by subscriber method listen(net.sf.jabref.model.metadata.event.MetaDataChangedEvent) on subscriber net.sf.jabref.shared.DBMSSynchronizer@6695f8f3 when dispatching event: net.sf.jabref.model.metadata.event.MetaDataChangedEvent@6f7e5617
java.lang.NullPointerException
        at net.sf.jabref.shared.PostgreSQLProcessor.notifyClients(PostgreSQLProcessor.java:126)
        at net.sf.jabref.shared.DBMSSynchronizer.listen(DBMSSynchronizer.java:127)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
...
at net.sf.jabref.model.metadata.MetaData.postChange(MetaData.java:202)
        at net.sf.jabref.model.metadata.MetaData.setMode(MetaData.java:143)
        at net.sf.jabref.logic.importer.util.MetaDataParser.parse(MetaDataParser.java:69)
        at net.sf.jabref.shared.DBMSSynchronizer.synchronizeLocalMetaData(DBMSSynchronizer.java:264)
        at net.sf.jabref.shared.DBMSSynchronizer.initializeDatabases(DBMSSynchronizer.java:157)
        at net.sf.jabref.shared.DBMSSynchronizer.openSharedDatabase(DBMSSynchronizer.java:353)
        at net.sf.jabref.shared.DBMSSynchronizer.openSharedDatabase(DBMSSynchronizer.java:358)
        at net.sf.jabref.gui.shared.SharedDatabaseUIManager.openSharedDatabaseFromParserResult(SharedDatabaseUIManager.java:140)
        at net.sf.jabref.JabRefGUI.openWindow(JabRefGUI.java:117)
        at net.sf.jabref.JabRefGUI.<init>(JabRefGUI.java:63)
        at net.sf.jabref.JabRefMain.lambda$start$1(JabRefMain.java:136)
```

#2300 Comment 3:
@koppor oh yes this now also fixed. Thanks for the objection.

--------------------------------------------------------------
#2297 Comment 1:
There is already an `isPresent` check in `init()` and `saveAs()` which are calling `saveAs(File file)`.

> Is this NPE present in the released 3.7 version? If yes, please add a changelog entry.

Done.

#2297 Comment 2:
Yes, there is a check for the file itself, but not for its parent. Moreove, please try to write a changelog entry which is understandable for the average user (they don't know what a NPE is or care about a class called ConnectToSharedDatabaseDialog). Thanks

#2297 Comment 3:
LGTM!  I merge it in

--------------------------------------------------------------
#2296 Comment 1:
Overall, LGTM! The only problem is that there are a number of imports of `BibDatabase`, which you should clean up.

#2296 Comment 2:
I merge this now in since the erros reported are not related to this PR but to citeproc
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2290 Comment 1:
Status for debian/unstable:

When no `openfx` package is installed: 

```
$ java -jar JabRef-3.8-dev--snapshot--2016-12-11--javafx--6338e09.jar
Error: Could not find or load main class net.sf.jabref.JabRefMain
```

When `openfx` package is installed, JabRef starts fine and shows the about dialog.

Thus, offering JabRef for debian is just a matter of adding `openfx` as dependency.


#2290 Comment 2:
The error console works, just one thing: Do we really want to add the possibility to open automatic bug reports from the console? I am afraid this will drown us in useless bug reports :-( There should be a minimum hurdle for filing a report.
#2290 Comment 3:
Journal abbreviations dialog (which looks cool overall):

When having loaded a custom list and clicking the X, I get:
```
15:31:22.875 [JavaFX Application Thread] ERROR net.sf.jabref.FallbackExceptionHandler - Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.NullPointerException: null
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.lambda$new$0(ManageJournalAbbreviationsViewModel.java:59) ~[main/:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.lambda$new$1(ManageJournalAbbreviationsViewModel.java:65) ~[main/:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController.lambda$setBindings$17(ManageJournalAbbreviationsController.java:134) ~[main/:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyObjectPropertyBase.fireValueChangedEvent(ReadOnlyObjectPropertyBase.java:74) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyObjectWrapper.fireValueChangedEvent(ReadOnlyObjectWrapper.java:102) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at javafx.scene.control.SelectionModel.setSelectedItem(SelectionModel.java:102) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox$ComboBoxSelectionModel.lambda$new$154(ComboBox.java:494) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:137) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyIntegerPropertyBase.fireValueChangedEvent(ReadOnlyIntegerPropertyBase.java:72) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyIntegerWrapper.fireValueChangedEvent(ReadOnlyIntegerWrapper.java:102) ~[jfxrt.jar:?]
	at javafx.beans.property.IntegerPropertyBase.markInvalid(IntegerPropertyBase.java:113) ~[jfxrt.jar:?]
	at javafx.beans.property.IntegerPropertyBase.set(IntegerPropertyBase.java:147) ~[jfxrt.jar:?]
	at javafx.scene.control.SelectionModel.setSelectedIndex(SelectionModel.java:68) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.updateSelectedIndex(SingleSelectionModel.java:215) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.clearSelection(SingleSelectionModel.java:68) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.select(SingleSelectionModel.java:144) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.clearAndSelect(SingleSelectionModel.java:103) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox$ComboBoxSelectionModel$2.onChanged(ComboBox.java:546) ~[jfxrt.jar:?]
	at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205) ~[jfxrt.jar:?]
	at javafx.collections.ModifiableObservableListBase.remove(ModifiableObservableListBase.java:183) ~[jfxrt.jar:?]
	at javafx.collections.ModifiableObservableListBase.remove(ModifiableObservableListBase.java:171) ~[jfxrt.jar:?]
	at javafx.beans.binding.ListExpression.remove(ListExpression.java:254) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.removeCurrentFile(ManageJournalAbbreviationsViewModel.java:185) ~[main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController.removeList(ManageJournalAbbreviationsController.java:156) ~[main/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_92]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_92]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_92]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_92]
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) ~[?:1.8.0_92]
	at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) ~[?:?]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_92]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_92]
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) ~[?:1.8.0_92]
	at javafx.fxml.FXMLLoader$MethodHandler.invoke(FXMLLoader.java:1771) ~[jfxrt.jar:?]
	at javafx.fxml.FXMLLoader$ControllerMethodEventHandler.handle(FXMLLoader.java:1657) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
	at javafx.scene.Node.fireEvent(Node.java:8411) ~[jfxrt.jar:?]
	at javafx.scene.control.Button.fire(Button.java:185) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.behavior.ButtonBehavior.mouseReleased(ButtonBehavior.java:182) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase$1.handle(BehaviorSkinBase.java:96) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase$1.handle(BehaviorSkinBase.java:89) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:218) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:238) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191) ~[jfxrt.jar:?]
	at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74) ~[jfxrt.jar:?]
	at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54) ~[jfxrt.jar:?]
	at javafx.event.Event.fireEvent(Event.java:198) ~[jfxrt.jar:?]
	at javafx.scene.Scene$MouseHandler.process(Scene.java:3757) ~[jfxrt.jar:?]
	at javafx.scene.Scene$MouseHandler.access$1500(Scene.java:3485) ~[jfxrt.jar:?]
	at javafx.scene.Scene.impl_processMouseEvent(Scene.java:1762) ~[jfxrt.jar:?]
	at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2494) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:380) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:294) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_92]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$354(GlassViewEventHandler.java:416) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:389) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:415) ~[jfxrt.jar:?]
	at com.sun.glass.ui.View.handleMouseEvent(View.java:555) ~[jfxrt.jar:?]
	at com.sun.glass.ui.View.notifyMouse(View.java:937) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
```
When closing and reopening the dialog, I get:
```
15:33:29.900 [Thread-14] ERROR net.sf.jabref.FallbackExceptionHandler - Uncaught exception Occurred in Thread[Thread-14,5,main]
java.lang.IllegalStateException: Not on FX application thread; currentThread = Thread-14
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423) ~[jfxrt.jar:?]
	at javafx.scene.Parent$2.onProposedChange(Parent.java:367) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:113) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.updateChildren(LabeledSkinBase.java:575) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.handleControlPropertyChanged(LabeledSkinBase.java:204) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ListCellSkin.handleControlPropertyChanged(ListCellSkin.java:49) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55) ~[jfxrt.jar:?]
	at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:103) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:110) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:144) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:49) ~[jfxrt.jar:?]
	at javafx.beans.property.StringProperty.setValue(StringProperty.java:65) ~[jfxrt.jar:?]
	at javafx.scene.control.Labeled.setText(Labeled.java:145) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.updateDisplayText(ComboBoxListViewSkin.java:389) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.access$100(ComboBoxListViewSkin.java:57) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin$2$1.updateItem(ComboBoxListViewSkin.java:425) ~[jfxrt.jar:?]
	at javafx.scene.control.ListCell.updateItem(ListCell.java:471) ~[jfxrt.jar:?]
	at javafx.scene.control.ListCell.indexChanged(ListCell.java:330) ~[jfxrt.jar:?]
	at javafx.scene.control.IndexedCell.updateIndex(IndexedCell.java:116) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.updateDisplayNode(ComboBoxListViewSkin.java:351) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.getDisplayNode(ComboBoxListViewSkin.java:206) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxBaseSkin.updateDisplayArea(ComboBoxBaseSkin.java:141) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxBaseSkin.handleControlPropertyChanged(ComboBoxBaseSkin.java:134) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.handleControlPropertyChanged(ComboBoxListViewSkin.java:159) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55) ~[jfxrt.jar:?]
	at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBoxBase.setValue(ComboBoxBase.java:150) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox.updateValue(ComboBox.java:463) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox.access$200(ComboBox.java:192) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox$3.changed(ComboBox.java:446) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyObjectPropertyBase.fireValueChangedEvent(ReadOnlyObjectPropertyBase.java:74) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyObjectWrapper.fireValueChangedEvent(ReadOnlyObjectWrapper.java:102) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at javafx.scene.control.SelectionModel.setSelectedItem(SelectionModel.java:102) ~[jfxrt.jar:?]
	at javafx.scene.control.ComboBox$ComboBoxSelectionModel.lambda$new$154(ComboBox.java:494) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:137) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyIntegerPropertyBase.fireValueChangedEvent(ReadOnlyIntegerPropertyBase.java:72) ~[jfxrt.jar:?]
	at javafx.beans.property.ReadOnlyIntegerWrapper.fireValueChangedEvent(ReadOnlyIntegerWrapper.java:102) ~[jfxrt.jar:?]
	at javafx.beans.property.IntegerPropertyBase.markInvalid(IntegerPropertyBase.java:113) ~[jfxrt.jar:?]
	at javafx.beans.property.IntegerPropertyBase.set(IntegerPropertyBase.java:147) ~[jfxrt.jar:?]
	at javafx.scene.control.SelectionModel.setSelectedIndex(SelectionModel.java:68) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.updateSelectedIndex(SingleSelectionModel.java:215) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.select(SingleSelectionModel.java:149) ~[jfxrt.jar:?]
	at javafx.scene.control.SingleSelectionModel.select(SingleSelectionModel.java:124) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController.lambda$setBindings$16(ManageJournalAbbreviationsController.java:132) ~[main/:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.lambda$new$2(ManageJournalAbbreviationsViewModel.java:87) ~[main/:?]
	at com.sun.javafx.binding.ListExpressionHelper$Generic.notifyListeners(ListExpressionHelper.java:593) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ListExpressionHelper$Generic.fireValueChangedEvent(ListExpressionHelper.java:571) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ListExpressionHelper.fireValueChangedEvent(ListExpressionHelper.java:109) ~[jfxrt.jar:?]
	at javafx.beans.property.ListPropertyBase.fireValueChangedEvent(ListPropertyBase.java:200) ~[jfxrt.jar:?]
	at javafx.beans.property.ListPropertyBase.lambda$new$29(ListPropertyBase.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205) ~[jfxrt.jar:?]
	at javafx.collections.ModifiableObservableListBase.add(ModifiableObservableListBase.java:155) ~[jfxrt.jar:?]
	at java.util.AbstractList.add(AbstractList.java:108) ~[?:1.8.0_92]
	at javafx.beans.binding.ListExpression.add(ListExpression.java:248) ~[jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.openFile(ManageJournalAbbreviationsViewModel.java:163) ~[main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.lambda$createFileObjects$5(ManageJournalAbbreviationsViewModel.java:126) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1249) [?:1.8.0_92]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.createFileObjects(ManageJournalAbbreviationsViewModel.java:126) [main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController$1.call(ManageJournalAbbreviationsController.java:59) [main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController$1.call(ManageJournalAbbreviationsController.java:53) [main/:?]
	at javafx.concurrent.Task$TaskCallable.call(Task.java:1423) [jfxrt.jar:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
15:33:41.181 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=Canadian Journal of Electrical and Computer Engineering, iso=#IEEE_J_CJECE#, medline=#IEEE_J_CJECE#}
NEW: Abbreviation{name=Canadian Journal of Electrical and Computer Engineering, iso=Can. J. Electr. Comput. Eng., medline=Can J Electr Comput Eng}
15:33:41.187 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Annals of the History of Computing, iso=#IEEE_M_HIST#, medline=#IEEE_M_HIST#}
NEW: Abbreviation{name=IEEE Annals of the History of Computing, iso=IEEE Ann. Hist. Comput., medline=IEEE Ann Hist Comput}
15:33:41.189 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Antennas and Propagation Magazine, iso=#IEEE_M_AP#, medline=#IEEE_M_AP#}
NEW: Abbreviation{name=IEEE Antennas and Propagation Magazine, iso=IEEE Antennas. Propag., medline=IEEE Antennas Propag}
15:33:41.191 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Antennas and Wireless Propagation Letters, iso=#IEEE_J_AWPL#, medline=#IEEE_J_AWPL#}
NEW: Abbreviation{name=IEEE Antennas and Wireless Propagation Letters, iso=IEEE Antennas Wirel. Propag. Lett., medline=IEEE Antennas Wirel Propag Lett}
15:33:41.196 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Circuits and Devices Magazine, iso=#IEEE_M_CD#, medline=#IEEE_M_CD#}
NEW: Abbreviation{name=IEEE Circuits and Devices Magazine, iso=IEEE Circuits Devices Mag., medline=IEEE Circuits Devices Mag}
15:33:41.197 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Circuits and Systems Magazine, iso=#IEEE_M_CAS#, medline=#IEEE_M_CAS#}
NEW: Abbreviation{name=IEEE Circuits and Systems Magazine, iso=IEEE Circuits Syst. Mag., medline=IEEE Circuits Syst Mag}
15:33:41.198 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Communications Letters, iso=#IEEE_J_COML#, medline=#IEEE_J_COML#}
NEW: Abbreviation{name=IEEE Communications Letters, iso=IEEE Commun. Lett., medline=IEEE Commun Lett}
15:33:41.199 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Communications Magazine, iso=#IEEE_M_COM#, medline=#IEEE_M_COM#}
NEW: Abbreviation{name=IEEE Communications Magazine, iso=IEEE Commun. Mag., medline=IEEE Commun Mag}
15:33:41.199 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Communications Surveys and Tutorials, iso=#IEEE_O_CSTO#, medline=#IEEE_O_CSTO#}
NEW: Abbreviation{name=IEEE Communications Surveys and Tutorials, iso=IEEE Commun. Surv. Tutorials, medline=IEEE Commun Surv Tutorials}
15:33:41.200 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Computational Intelligence Magazine, iso=#IEEE_M_CIM#, medline=#IEEE_M_CIM#}
NEW: Abbreviation{name=IEEE Computational Intelligence Magazine, iso=IEEE Comput. Intell. Mag., medline=IEEE Comput Intell Mag}
15:33:41.201 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Computer Applications in Power, iso=#IEEE_M_CAP#, medline=#IEEE_M_CAP#}
NEW: Abbreviation{name=IEEE Computer Applications in Power, iso=IEEE Comput. Appl. Power, medline=IEEE Comput Appl Power}
15:33:41.206 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Computer Architecture Letters, iso=#IEEE_J_CAL#, medline=#IEEE_J_CAL#}
NEW: Abbreviation{name=IEEE Computer Architecture Letters, iso=IEEE Comput. Archit. Lett., medline=IEEE Comput Archit Lett}
15:33:41.207 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Computer Graphics and Applications, iso=#IEEE_M_CGA#, medline=#IEEE_M_CGA#}
NEW: Abbreviation{name=IEEE Computer Graphics and Applications, iso=IEEE Comput. Graphics Appl., medline=IEEE Comput Graphics Appl}
15:33:41.207 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Concurrency, iso=#IEEE_M_CONC#, medline=#IEEE_M_CONC#}
NEW: Abbreviation{name=IEEE Concurrency, iso=IEEE Concurrency, medline=IEEE Concurrency}
15:33:41.208 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Control Systems, iso=#IEEE_M_CS#, medline=#IEEE_M_CS#}
NEW: Abbreviation{name=IEEE Control Systems, iso=IEEE Control Syst., medline=IEEE Control Syst}
15:33:41.208 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Control Systems Magazine, iso=#IEEE_M_CS#, medline=#IEEE_M_CS#}
NEW: Abbreviation{name=IEEE Control Systems Magazine, iso=IEEE Control Syst. Mag., medline=IEEE Control Syst Mag}
15:33:41.208 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Design and Test of Computers, iso=#IEEE_M_DTC#, medline=#IEEE_M_DTC#}
NEW: Abbreviation{name=IEEE Design and Test of Computers, iso=IEEE Des. Test Comput., medline=IEEE Des Test Comput}
15:33:41.209 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Distributed Systems Online, iso=#IEEE_O_DSO#, medline=#IEEE_O_DSO#}
NEW: Abbreviation{name=IEEE Distributed Systems Online, iso=IEEE Distrib. Syst. Online, medline=IEEE Distrib Syst Online}
15:33:41.209 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Electrical Insulation Magazine, iso=#IEEE_M_EI#, medline=#IEEE_M_EI#}
NEW: Abbreviation{name=IEEE Electrical Insulation Magazine, iso=IEEE Electr. Insul. Mag., medline=IEEE Electr Insul Mag}
15:33:41.210 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Electron Device Letters, iso=#IEEE_J_EDL#, medline=#IEEE_J_EDL#}
NEW: Abbreviation{name=IEEE Electron Device Letters, iso=IEEE Electron Device Lett., medline=IEEE Electron Device Lett}
15:33:41.210 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Engineering in Medicine and Biology Magazine, iso=#IEEE_M_EMB#, medline=#IEEE_M_EMB#}
NEW: Abbreviation{name=IEEE Engineering in Medicine and Biology Magazine, iso=IEEE Eng. Med. Biol. Mag., medline=IEEE Eng Med Biol Mag}
15:33:41.210 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Engineering Management Review, iso=#IEEE_M_EMR#, medline=#IEEE_M_EMR#}
NEW: Abbreviation{name=IEEE Engineering Management Review, iso=IEEE Eng. Manage. Rev., medline=IEEE Eng Manage Rev}
15:33:41.213 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Geoscience and Remote Sensing Letters, iso=#IEEE_J_GRSL#, medline=#IEEE_J_GRSL#}
NEW: Abbreviation{name=IEEE Geoscience and Remote Sensing Letters, iso=IEEE Geosci. Remote. S., medline=IEEE Geosci Remote S}
15:33:41.214 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Industrial Electronics Magazine, iso=#IEEE_M_IE#, medline=#IEEE_M_IE#}
NEW: Abbreviation{name=IEEE Industrial Electronics Magazine, iso=IEEE Ind. Electron. Mag., medline=IEEE Ind Electron Mag}
15:33:41.214 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Industry Applications Magazine, iso=#IEEE_M_IA#, medline=#IEEE_M_IA#}
NEW: Abbreviation{name=IEEE Industry Applications Magazine, iso=IEEE Ind. Appl. Mag., medline=IEEE Ind Appl Mag}
15:33:41.216 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Instrumentation and Measurement Magazine, iso=#IEEE_M_IM#, medline=#IEEE_M_IM#}
NEW: Abbreviation{name=IEEE Instrumentation and Measurement Magazine, iso=IEEE Instrum. Meas. Mag., medline=IEEE Instrum Meas Mag}
15:33:41.218 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Intelligent Systems, iso=#IEEE_M_IS#, medline=#IEEE_M_IS#}
NEW: Abbreviation{name=IEEE Intelligent Systems, iso=IEEE Intell. Syst., medline=IEEE Intell Syst}
15:33:41.220 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Intelligent Transportation Systems Magazine, iso=#IEEE_M_ITS#, medline=#IEEE_M_ITS#}
NEW: Abbreviation{name=IEEE Intelligent Transportation Systems Magazine, iso=IEEE Intell. Transp. Syst. Mag., medline=IEEE Intell Transp Syst Mag}
15:33:41.220 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Internet Computing, iso=#IEEE_M_IC#, medline=#IEEE_M_IC#}
NEW: Abbreviation{name=IEEE Internet Computing, iso=IEEE Internet. Comput., medline=IEEE Internet Comput}
15:33:41.221 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Oceanic Engineering, iso=#IEEE_J_OE#, medline=#IEEE_J_OE#}
NEW: Abbreviation{name=IEEE Journal of Oceanic Engineering, iso=IEEE J. Oceanic. Eng., medline=IEEE J Oceanic Eng}
15:33:41.221 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Quantum Electronics, iso=#IEEE_J_JQE#, medline=#IEEE_J_JQE#}
NEW: Abbreviation{name=IEEE Journal of Quantum Electronics, iso=IEEE J. Quantum. Electron., medline=IEEE J Quantum Electron}
15:33:41.221 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Robotics and Automation, iso=#IEEE_J_JRA#, medline=#IEEE_J_JRA#}
NEW: Abbreviation{name=IEEE Journal of Robotics and Automation, iso=IEEE T. Robotic. Autom., medline=IEEE T Robotic Autom}
15:33:41.222 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Selected Topics in Quantum Electronics, iso=#IEEE_J_JSTQE#, medline=#IEEE_J_JSTQE#}
NEW: Abbreviation{name=IEEE Journal of Selected Topics in Quantum Electronics, iso=IEEE J. Sel. Topics in Quantum Electron., medline=IEEE J Sel Topics in Quantum Electron}
15:33:41.222 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Selected Topics in Signal Processing, iso=#IEEE_J_STSP#, medline=#IEEE_J_STSP#}
NEW: Abbreviation{name=IEEE Journal of Selected Topics in Signal Processing, iso=IEEE J. Sel. Top. Signal Process., medline=IEEE J Sel Top Signal Process}
15:33:41.223 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal of Solid-State Circuits, iso=#IEEE_J_JSSC#, medline=#IEEE_J_JSSC#}
NEW: Abbreviation{name=IEEE Journal of Solid-State Circuits, iso=IEEE J. Solid-State Circuits, medline=IEEE J Solid-State Circuits}
15:33:41.228 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Journal on Selected Areas in Communications, iso=#IEEE_J_JSAC#, medline=#IEEE_J_JSAC#}
NEW: Abbreviation{name=IEEE Journal on Selected Areas in Communications, iso=IEEE J. Sel. Areas Commun., medline=IEEE J Sel Areas Commun}
15:33:41.232 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Micro, iso=#IEEE_M_MICRO#, medline=#IEEE_M_MICRO#}
NEW: Abbreviation{name=IEEE Micro, iso=IEEE Micro., medline=IEEE Micro}
15:33:41.233 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Microwave and Guided Wave Letters, iso=#IEEE_J_MGWL#, medline=#IEEE_J_MGWL#}
NEW: Abbreviation{name=IEEE Microwave and Guided Wave Letters, iso=IEEE Microw. Guided. W., medline=IEEE Microw Guided W}
15:33:41.236 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Microwave and Wireless Components Letters, iso=#IEEE_J_MWCL#, medline=#IEEE_J_MWCL#}
NEW: Abbreviation{name=IEEE Microwave and Wireless Components Letters, iso=IEEE Microwave Wireless Compon. Lett., medline=IEEE Microwave Wireless Compon Lett}
15:33:41.237 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Microwave Magazine, iso=#IEEE_M_MW#, medline=#IEEE_M_MW#}
NEW: Abbreviation{name=IEEE Microwave Magazine, iso=IEEE Microwave Mag., medline=IEEE Microwave Mag}
15:33:41.237 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Multimedia, iso=#IEEE_M_MM#, medline=#IEEE_M_MM#}
NEW: Abbreviation{name=IEEE Multimedia, iso=IEEE Multimedia., medline=IEEE Multimedia}
15:33:41.237 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Nanotechnology Magazine, iso=#IEEE_M_NANO#, medline=#IEEE_M_NANO#}
NEW: Abbreviation{name=IEEE Nanotechnology Magazine, iso=IEEE Nanatechnol. Mag., medline=IEEE Nanatechnol Mag}
15:33:41.238 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Network, iso=#IEEE_M_NET#, medline=#IEEE_M_NET#}
NEW: Abbreviation{name=IEEE Network, iso=IEEE Network., medline=IEEE Network}
15:33:41.238 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Pervasive Computing, iso=#IEEE_M_PVC#, medline=#IEEE_M_PVC#}
NEW: Abbreviation{name=IEEE Pervasive Computing, iso=IEEE Pervasive Comput., medline=IEEE Pervasive Comput}
15:33:41.238 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Photonics Technology Letters, iso=#IEEE_J_PTL#, medline=#IEEE_J_PTL#}
NEW: Abbreviation{name=IEEE Photonics Technology Letters, iso=IEEE Photonics Technol. Lett., medline=IEEE Photonics Technol Lett}
15:33:41.239 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Potentials, iso=#IEEE_M_POT#, medline=#IEEE_M_POT#}
NEW: Abbreviation{name=IEEE Potentials, iso=IEEE Potentials., medline=IEEE Potentials}
15:33:41.239 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Power and Energy Magazine, iso=#IEEE_M_PE#, medline=#IEEE_M_PE#}
NEW: Abbreviation{name=IEEE Power and Energy Magazine, iso=IEEE Power Energy Mag., medline=IEEE Power Energy Mag}
15:33:41.240 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Power Electronics Letters, iso=#IEEE_J_PEL#, medline=#IEEE_J_PEL#}
NEW: Abbreviation{name=IEEE Power Electronics Letters, iso=IEEE Power Electron. Lett., medline=IEEE Power Electron Lett}
15:33:41.240 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Power Engineering Review, iso=#IEEE_M_PER#, medline=#IEEE_M_PER#}
NEW: Abbreviation{name=IEEE Power Engineering Review, iso=IEEE Power Eng. Rev., medline=IEEE Power Eng Rev}
15:33:41.241 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Reviews in Biomedical Engineering, iso=#IEEE_J_RBME#, medline=#IEEE_J_RBME#}
NEW: Abbreviation{name=IEEE Reviews in Biomedical Engineering, iso=IEEE Rev. Biomed. Eng., medline=IEEE Rev Biomed Eng}
15:33:41.241 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Robotics and Automation Magazine, iso=#IEEE_M_RA#, medline=#IEEE_M_RA#}
NEW: Abbreviation{name=IEEE Robotics and Automation Magazine, iso=IEEE Rob. Autom Mag., medline=IEEE Rob Autom Mag}
15:33:41.242 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Security and Privacy, iso=#IEEE_M_SAP#, medline=#IEEE_M_SAP#}
NEW: Abbreviation{name=IEEE Security and Privacy, iso=IEEE Secur. Privacy, medline=IEEE Secur Privacy}
15:33:41.242 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Sensors Journal, iso=#IEEE_J_SENSOR#, medline=#IEEE_J_SENSOR#}
NEW: Abbreviation{name=IEEE Sensors Journal, iso=IEEE Sens. J., medline=IEEE Sens J}
15:33:41.243 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Signal Processing Letters, iso=#IEEE_J_SPL#, medline=#IEEE_J_SPL#}
NEW: Abbreviation{name=IEEE Signal Processing Letters, iso=IEEE Signal. Proc. Let., medline=IEEE Signal Proc Let}
15:33:41.243 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Signal Processing Magazine, iso=#IEEE_M_SP#, medline=#IEEE_M_SP#}
NEW: Abbreviation{name=IEEE Signal Processing Magazine, iso=IEEE Signal. Proc. Mag., medline=IEEE Signal Proc Mag}
15:33:41.243 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Software, iso=#IEEE_M_S#, medline=#IEEE_M_S#}
NEW: Abbreviation{name=IEEE Software, iso=IEEE Software., medline=IEEE Software}
15:33:41.243 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Spectrum, iso=#IEEE_M_SPECT#, medline=#IEEE_M_SPECT#}
NEW: Abbreviation{name=IEEE Spectrum, iso=IEEE Spectrum., medline=IEEE Spectrum}
15:33:41.244 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Systems Journal, iso=#IEEE_J_SYST#, medline=#IEEE_J_SYST#}
NEW: Abbreviation{name=IEEE Systems Journal, iso=IEEE Syst. J., medline=IEEE Syst J}
15:33:41.244 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Technology and Society Magazine, iso=#IEEE_M_TS#, medline=#IEEE_M_TS#}
NEW: Abbreviation{name=IEEE Technology and Society Magazine, iso=IEEE Technol. Soc. Mag., medline=IEEE Technol Soc Mag}
15:33:41.244 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Acoustics, Speech, and Signal Processing, iso=#IEEE_J_ASSP#, medline=#IEEE_J_ASSP#}
NEW: Abbreviation{name=IEEE Transactions on Acoustics, Speech, and Signal Processing, iso=IEEE Trans. Acoust. Speech Signal Process., medline=IEEE Trans Acoust Speech Signal Process}
15:33:41.244 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Advanced Packaging, iso=#IEEE_J_ADVP#, medline=#IEEE_J_ADVP#}
NEW: Abbreviation{name=IEEE Transactions on Advanced Packaging, iso=IEEE Trans. Adv. Packag., medline=IEEE Trans Adv Packag}
15:33:41.245 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Aerospace, iso=#IEEE_J_AS#, medline=#IEEE_J_AS#}
NEW: Abbreviation{name=IEEE Transactions on Aerospace, iso=IEEE T. Aerosp., medline=IEEE T Aerosp}
15:33:41.245 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Aerospace and Electronic Systems, iso=#IEEE_J_AES#, medline=#IEEE_J_AES#}
NEW: Abbreviation{name=IEEE Transactions on Aerospace and Electronic Systems, iso=IEEE Trans. Aerosp. Electron. Syst., medline=IEEE Trans Aerosp Electron Syst}
15:33:41.245 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Aerospace and Navigational Electronics, iso=#IEEE_J_ANE#, medline=#IEEE_J_ANE#}
NEW: Abbreviation{name=IEEE Transactions on Aerospace and Navigational Electronics, iso=IEEE Trans. Aerosp. N., medline=IEEE Trans Aerosp N}
15:33:41.246 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Antennas and Propagation, iso=#IEEE_J_AP#, medline=#IEEE_J_AP#}
NEW: Abbreviation{name=IEEE Transactions on Antennas and Propagation, iso=IEEE Trans. Antennas Propag., medline=IEEE Trans Antennas Propag}
15:33:41.246 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Applications and Industry, iso=#IEEE_J_APPIND#, medline=#IEEE_J_APPIND#}
NEW: Abbreviation{name=IEEE Transactions on Applications and Industry, iso=IEEE Trans. Appl. Indus., medline=IEEE Trans Appl Indus}
15:33:41.246 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Applied Superconductivity, iso=#IEEE_J_ASC#, medline=#IEEE_J_ASC#}
NEW: Abbreviation{name=IEEE Transactions on Applied Superconductivity, iso=IEEE Trans. Appl. Supercond., medline=IEEE Trans Appl Supercond}
15:33:41.246 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Audio, iso=#IEEE_J_AU#, medline=#IEEE_J_AU#}
NEW: Abbreviation{name=IEEE Transactions on Audio, iso=IEEE Trans. Audio., medline=IEEE Trans Audio}
15:33:41.247 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Audio and Electroacoustics, iso=#IEEE_J_AUEA#, medline=#IEEE_J_AUEA#}
NEW: Abbreviation{name=IEEE Transactions on Audio and Electroacoustics, iso=IEEE Trans. Audio Electroacoust., medline=IEEE Trans Audio Electroacoust}
15:33:41.247 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Automatic Control, iso=#IEEE_J_AC#, medline=#IEEE_J_AC#}
NEW: Abbreviation{name=IEEE Transactions on Automatic Control, iso=IEEE Trans. Autom. Control, medline=IEEE Trans Autom Control}
15:33:41.247 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Automation Science and Engineering, iso=#IEEE_J_ASE#, medline=#IEEE_J_ASE#}
NEW: Abbreviation{name=IEEE Transactions on Automation Science and Engineering, iso=IEEE Trans. Autom. Sci. Eng., medline=IEEE Trans Autom Sci Eng}
15:33:41.248 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Bio-Medical Electronics, iso=#IEEE_J_BMELC#, medline=#IEEE_J_BMELC#}
NEW: Abbreviation{name=IEEE Transactions on Bio-Medical Electronics, iso=IEEE Trans. Bio-med. Electron., medline=IEEE Trans Bio-med Electron}
15:33:41.248 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Biomedical Circuits and Systems, iso=#IEEE_J_BCAS#, medline=#IEEE_J_BCAS#}
NEW: Abbreviation{name=IEEE Transactions on Biomedical Circuits and Systems, iso=IEEE Trans. Biomed. Circuits Syst., medline=IEEE Trans Biomed Circuits Syst}
15:33:41.248 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Biomedical Engineering, iso=#IEEE_J_BME#, medline=#IEEE_J_BME#}
NEW: Abbreviation{name=IEEE Transactions on Biomedical Engineering, iso=IEEE Trans. Biomed. Eng., medline=IEEE Trans Biomed Eng}
15:33:41.248 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Broadcast and Television Receivers, iso=#IEEE_J_BCTV#, medline=#IEEE_J_BCTV#}
NEW: Abbreviation{name=IEEE Transactions on Broadcast and Television Receivers, iso=IEEE Trans. Broadcast Telev. Receivers, medline=IEEE Trans Broadcast Telev Receivers}
15:33:41.249 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Broadcasting, iso=#IEEE_J_BC#, medline=#IEEE_J_BC#}
NEW: Abbreviation{name=IEEE Transactions on Broadcasting, iso=IEEE Trans. Broadcast., medline=IEEE Trans Broadcast}
15:33:41.249 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Circuit Theory, iso=#IEEE_J_CT#, medline=#IEEE_J_CT#}
NEW: Abbreviation{name=IEEE Transactions on Circuit Theory, iso=IEEE T. Circuits. Syst., medline=IEEE T Circuits Syst}
15:33:41.249 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Circuits and Systems, iso=#IEEE_J_CAS#, medline=#IEEE_J_CAS#}
NEW: Abbreviation{name=IEEE Transactions on Circuits and Systems, iso=IEEE T. Circuits. Syst., medline=IEEE T Circuits Syst}
15:33:41.250 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Circuits and Systems for Video Technology, iso=#IEEE_J_CASVT#, medline=#IEEE_J_CASVT#}
NEW: Abbreviation{name=IEEE Transactions on Circuits and Systems for Video Technology, iso=IEEE Trans. Circuits Syst. Video Technol., medline=IEEE Trans Circuits Syst Video Technol}
15:33:41.250 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Circuits and Systems I: Regular Papers, iso=#IEEE_J_CASI_RP#, medline=#IEEE_J_CASI_RP#}
NEW: Abbreviation{name=IEEE Transactions on Circuits and Systems I: Regular Papers, iso=IEEE Trans. Circuits Syst. I Regul. Pap., medline=IEEE Trans Circuits Syst I Regul Pap}
15:33:41.250 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Circuits and Systems II: Express Briefs, iso=#IEEE_J_CASII_EB#, medline=#IEEE_J_CASII_EB#}
NEW: Abbreviation{name=IEEE Transactions on Circuits and Systems II: Express Briefs, iso=IEEE Trans. Circuits Syst. II Express Briefs, medline=IEEE Trans Circuits Syst II Express Briefs}
15:33:41.250 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Communication Technology, iso=#IEEE_J_COMT#, medline=#IEEE_J_COMT#}
NEW: Abbreviation{name=IEEE Transactions on Communication Technology, iso=IEEE T. Commun. Techn., medline=IEEE T Commun Techn}
15:33:41.251 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Communications, iso=#IEEE_J_COM#, medline=#IEEE_J_COM#}
NEW: Abbreviation{name=IEEE Transactions on Communications, iso=IEEE Trans. Commun., medline=IEEE Trans Commun}
15:33:41.251 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Component Parts, iso=#IEEE_J_CPART#, medline=#IEEE_J_CPART#}
NEW: Abbreviation{name=IEEE Transactions on Component Parts, iso=IEEE T. Compon. Parts., medline=IEEE T Compon Parts}
15:33:41.251 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Components and Packaging Technologies, iso=#IEEE_J_CAPTS#, medline=#IEEE_J_CAPTS#}
NEW: Abbreviation{name=IEEE Transactions on Components and Packaging Technologies, iso=IEEE Trans. Compon. Packag. Technol., medline=IEEE Trans Compon Packag Technol}
15:33:41.258 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, iso=#IEEE_J_CAD#, medline=#IEEE_J_CAD#}
NEW: Abbreviation{name=IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, iso=IEEE Trans. Comput. Aided Des. Integr. Circuits Syst., medline=IEEE Trans Comput Aided Des Integr Circuits Syst}
15:33:41.259 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Computers, iso=#IEEE_J_C#, medline=#IEEE_J_C#}
NEW: Abbreviation{name=IEEE Transactions on Computers, iso=IEEE Trans. Comput., medline=IEEE Trans Comput}
15:33:41.259 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Consumer Electronics, iso=#IEEE_J_CE#, medline=#IEEE_J_CE#}
NEW: Abbreviation{name=IEEE Transactions on Consumer Electronics, iso=IEEE Trans. Consum. Electron., medline=IEEE Trans Consum Electron}
15:33:41.259 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Control Systems Technology, iso=#IEEE_J_CST#, medline=#IEEE_J_CST#}
NEW: Abbreviation{name=IEEE Transactions on Control Systems Technology, iso=IEEE Trans. Control Syst. Technol., medline=IEEE Trans Control Syst Technol}
15:33:41.260 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Dependable and Secure Computing, iso=#IEEE_J_DSC#, medline=#IEEE_J_DSC#}
NEW: Abbreviation{name=IEEE Transactions on Dependable and Secure Computing, iso=IEEE Trans. Dependable Secure Comput., medline=IEEE Trans Dependable Secure Comput}
15:33:41.260 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Device and Materials Reliability, iso=#IEEE_J_DMR#, medline=#IEEE_J_DMR#}
NEW: Abbreviation{name=IEEE Transactions on Device and Materials Reliability, iso=IEEE Trans. Device Mater. Reliab., medline=IEEE Trans Device Mater Reliab}
15:33:41.260 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Dielectrics and Electrical Insulation, iso=#IEEE_J_DEI#, medline=#IEEE_J_DEI#}
NEW: Abbreviation{name=IEEE Transactions on Dielectrics and Electrical Insulation, iso=IEEE Trans. Dielectr. Electr. Insul., medline=IEEE Trans Dielectr Electr Insul}
15:33:41.260 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Education, iso=#IEEE_J_EDU#, medline=#IEEE_J_EDU#}
NEW: Abbreviation{name=IEEE Transactions on Education, iso=IEEE Trans. Educ., medline=IEEE Trans Educ}
15:33:41.264 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Electrical Insulation, iso=#IEEE_J_EI#, medline=#IEEE_J_EI#}
NEW: Abbreviation{name=IEEE Transactions on Electrical Insulation, iso=IEEE T. Electr. Insul., medline=IEEE T Electr Insul}
15:33:41.265 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Electromagnetic Compatibility, iso=#IEEE_J_EMC#, medline=#IEEE_J_EMC#}
NEW: Abbreviation{name=IEEE Transactions on Electromagnetic Compatibility, iso=IEEE Trans. Electromagn. Compat., medline=IEEE Trans Electromagn Compat}
15:33:41.266 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Electron Devices, iso=#IEEE_J_ED#, medline=#IEEE_J_ED#}
NEW: Abbreviation{name=IEEE Transactions on Electron Devices, iso=IEEE Trans. Electron Devices, medline=IEEE Trans Electron Devices}
15:33:41.267 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Electronic Computers, iso=#IEEE_J_ECOMP#, medline=#IEEE_J_ECOMP#}
NEW: Abbreviation{name=IEEE Transactions on Electronic Computers, iso=IEEE Trans. Electron., medline=IEEE Trans Electron}
15:33:41.267 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Electronics Packaging Manufacturing, iso=#IEEE_J_EPM#, medline=#IEEE_J_EPM#}
NEW: Abbreviation{name=IEEE Transactions on Electronics Packaging Manufacturing, iso=IEEE Trans. Electron. Packag. Manuf., medline=IEEE Trans Electron Packag Manuf}
15:33:41.267 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Energy Conversion, iso=#IEEE_J_EC#, medline=#IEEE_J_EC#}
NEW: Abbreviation{name=IEEE Transactions on Energy Conversion, iso=IEEE Trans. Energy Convers., medline=IEEE Trans Energy Convers}
15:33:41.268 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Engineering Management, iso=#IEEE_J_EM#, medline=#IEEE_J_EM#}
NEW: Abbreviation{name=IEEE Transactions on Engineering Management, iso=IEEE Trans. Eng. Manage., medline=IEEE Trans Eng Manage}
15:33:41.268 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Engineering Writing and Speech, iso=#IEEE_J_EWS#, medline=#IEEE_J_EWS#}
NEW: Abbreviation{name=IEEE Transactions on Engineering Writing and Speech, iso=IEEE T. Prof. Commun., medline=IEEE T Prof Commun}
15:33:41.268 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Evolutionary Computation, iso=#IEEE_J_EVC#, medline=#IEEE_J_EVC#}
NEW: Abbreviation{name=IEEE Transactions on Evolutionary Computation, iso=IEEE Trans. Evol. Comput., medline=IEEE Trans Evol Comput}
15:33:41.268 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Fuzzy Systems, iso=#IEEE_J_FUZZ#, medline=#IEEE_J_FUZZ#}
NEW: Abbreviation{name=IEEE Transactions on Fuzzy Systems, iso=IEEE Trans. Fuzzy Syst., medline=IEEE Trans Fuzzy Syst}
15:33:41.269 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Geoscience and Remote Sensing, iso=#IEEE_J_GRS#, medline=#IEEE_J_GRS#}
NEW: Abbreviation{name=IEEE Transactions on Geoscience and Remote Sensing, iso=IEEE Trans. Geosci. Remote Sens., medline=IEEE Trans Geosci Remote Sens}
15:33:41.269 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Geoscience Electronics, iso=#IEEE_J_GE#, medline=#IEEE_J_GE#}
NEW: Abbreviation{name=IEEE Transactions on Geoscience Electronics, iso=IEEE T. Geosci. Elect., medline=IEEE T Geosci Elect}
15:33:41.273 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Haptics, iso=#IEEE_J_H#, medline=#IEEE_J_H#}
NEW: Abbreviation{name=IEEE Transactions on Haptics, iso=IEEE Trans. Haptic, medline=IEEE Trans Haptic}
15:33:41.274 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Human Factors in Electronics, iso=#IEEE_J_HFE#, medline=#IEEE_J_HFE#}
NEW: Abbreviation{name=IEEE Transactions on Human Factors in Electronics, iso=IEEE Trans. Hum. Fact., medline=IEEE Trans Hum Fact}
15:33:41.275 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Image Processing, iso=#IEEE_J_IP#, medline=#IEEE_J_IP#}
NEW: Abbreviation{name=IEEE Transactions on Image Processing, iso=IEEE Trans. Image Process., medline=IEEE Trans Image Process}
15:33:41.275 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Industrial Electronics, iso=#IEEE_J_IE#, medline=#IEEE_J_IE#}
NEW: Abbreviation{name=IEEE Transactions on Industrial Electronics, iso=IEEE Trans. Ind. Electron., medline=IEEE Trans Ind Electron}
15:33:41.276 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Industrial Electronics and Control Instrumentation, iso=#IEEE_J_IECI#, medline=#IEEE_J_IECI#}
NEW: Abbreviation{name=IEEE Transactions on Industrial Electronics and Control Instrumentation, iso=IEEE T. Ind. El. Con. In., medline=IEEE T Ind El Con In}
15:33:41.276 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Industrial Informatics, iso=#IEEE_J_IINF#, medline=#IEEE_J_IINF#}
NEW: Abbreviation{name=IEEE Transactions on Industrial Informatics, iso=IEEE Trans. Ind. Inf., medline=IEEE Trans Ind Inf}
15:33:41.277 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Industry and General Applications, iso=#IEEE_J_IGA#, medline=#IEEE_J_IGA#}
NEW: Abbreviation{name=IEEE Transactions on Industry and General Applications, iso=IEEE Trans. Ind. Gen. A., medline=IEEE Trans Ind Gen A}
15:33:41.277 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Industry Applications, iso=#IEEE_J_IA#, medline=#IEEE_J_IA#}
NEW: Abbreviation{name=IEEE Transactions on Industry Applications, iso=IEEE Trans. Ind. Appl., medline=IEEE Trans Ind Appl}
15:33:41.278 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Information Forensics and Security, iso=#IEEE_J_IFS#, medline=#IEEE_J_IFS#}
NEW: Abbreviation{name=IEEE Transactions on Information Forensics and Security, iso=IEEE Trans. Inf. Forensics Secur., medline=IEEE Trans Inf Forensics Secur}
15:33:41.278 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Information Technology in Biomedicine, iso=#IEEE_J_ITBM#, medline=#IEEE_J_ITBM#}
NEW: Abbreviation{name=IEEE Transactions on Information Technology in Biomedicine, iso=IEEE Trans. Inf. Technol. Biomed., medline=IEEE Trans Inf Technol Biomed}
15:33:41.287 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Information Theory, iso=#IEEE_J_IT#, medline=#IEEE_J_IT#}
NEW: Abbreviation{name=IEEE Transactions on Information Theory, iso=IEEE Trans. Inf. Theory, medline=IEEE Trans Inf Theory}
15:33:41.288 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Instrumentation and Measurement, iso=#IEEE_J_IM#, medline=#IEEE_J_IM#}
NEW: Abbreviation{name=IEEE Transactions on Instrumentation and Measurement, iso=IEEE Trans. Instrum. Meas., medline=IEEE Trans Instrum Meas}
15:33:41.289 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Intelligent Transportation Systems, iso=#IEEE_J_ITS#, medline=#IEEE_J_ITS#}
NEW: Abbreviation{name=IEEE Transactions on Intelligent Transportation Systems, iso=IEEE Trans. Intell. Transp. Syst., medline=IEEE Trans Intell Transp Syst}
15:33:41.289 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Knowledge and Data Engineering, iso=#IEEE_J_KDE#, medline=#IEEE_J_KDE#}
NEW: Abbreviation{name=IEEE Transactions on Knowledge and Data Engineering, iso=IEEE Trans. Knowl. Data Eng., medline=IEEE Trans Knowl Data Eng}
15:33:41.290 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Learning Technologies, iso=#IEEE_J_LT#, medline=#IEEE_J_LT#}
NEW: Abbreviation{name=IEEE Transactions on Learning Technologies, iso=IEEE Trans. Learn. Technol., medline=IEEE Trans Learn Technol}
15:33:41.290 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Magnetics, iso=#IEEE_J_MAG#, medline=#IEEE_J_MAG#}
NEW: Abbreviation{name=IEEE Transactions on Magnetics, iso=IEEE Trans. Magn., medline=IEEE Trans Magn}
15:33:41.290 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Man-Machine Systems, iso=#IEEE_J_MMS#, medline=#IEEE_J_MMS#}
NEW: Abbreviation{name=IEEE Transactions on Man-Machine Systems, iso=IEEE T. Man. Machine., medline=IEEE T Man Machine}
15:33:41.291 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Manufacturing Technology, iso=#IEEE_J_MFT#, medline=#IEEE_J_MFT#}
NEW: Abbreviation{name=IEEE Transactions on Manufacturing Technology, iso=IEEE T. Manuf. Tech., medline=IEEE T Manuf Tech}
15:33:41.291 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Medical Imaging, iso=#IEEE_J_MI#, medline=#IEEE_J_MI#}
NEW: Abbreviation{name=IEEE Transactions on Medical Imaging, iso=IEEE Trans. Med. Imaging, medline=IEEE Trans Med Imaging}
15:33:41.291 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Microwave Theory and Techniques, iso=#IEEE_J_MTT#, medline=#IEEE_J_MTT#}
NEW: Abbreviation{name=IEEE Transactions on Microwave Theory and Techniques, iso=IEEE Trans. Microwave Theory Tech., medline=IEEE Trans Microwave Theory Tech}
15:33:41.292 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Military Electronics, iso=#IEEE_J_MIL#, medline=#IEEE_J_MIL#}
NEW: Abbreviation{name=IEEE Transactions on Military Electronics, iso=IEEE T. Mil. Electron., medline=IEEE T Mil Electron}
15:33:41.292 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Mobile Computing, iso=#IEEE_J_MC#, medline=#IEEE_J_MC#}
NEW: Abbreviation{name=IEEE Transactions on Mobile Computing, iso=IEEE Trans. Mob. Comput., medline=IEEE Trans Mob Comput}
15:33:41.292 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Multimedia, iso=#IEEE_J_MM#, medline=#IEEE_J_MM#}
NEW: Abbreviation{name=IEEE Transactions on Multimedia, iso=IEEE Trans. Multimedia, medline=IEEE Trans Multimedia}
15:33:41.293 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on NanoBioscience, iso=#IEEE_J_NB#, medline=#IEEE_J_NB#}
NEW: Abbreviation{name=IEEE Transactions on Nanobioscience, iso=IEEE Trans. Nanobioscience, medline=IEEE Trans Nanobioscience}
15:33:41.293 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Nanotechnology, iso=#IEEE_J_NANO#, medline=#IEEE_J_NANO#}
NEW: Abbreviation{name=IEEE Transactions on Nanotechnology, iso=IEEE Trans. Nanotechnol., medline=IEEE Trans Nanotechnol}
15:33:41.293 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Network and Service Management, iso=#IEEE_J_NSM#, medline=#IEEE_J_NSM#}
NEW: Abbreviation{name=IEEE Transactions on Network and Service Management, iso=IEEE Trans. Netw. Serv. Manage., medline=IEEE Trans Netw Serv Manage}
15:33:41.293 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Neural Networks, iso=#IEEE_J_NN#, medline=#IEEE_J_NN#}
NEW: Abbreviation{name=IEEE Transactions on Neural Networks, iso=IEEE Trans. Neural Networks, medline=IEEE Trans Neural Networks}
15:33:41.294 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Neural Systems and Rehabilitation Engineering, iso=#IEEE_J_NSRE#, medline=#IEEE_J_NSRE#}
NEW: Abbreviation{name=IEEE Transactions on Neural Systems and Rehabilitation Engineering, iso=IEEE Trans. Neural Syst. Rehabil. Eng., medline=IEEE Trans Neural Syst Rehabil Eng}
15:33:41.294 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Nuclear Science, iso=#IEEE_J_NS#, medline=#IEEE_J_NS#}
NEW: Abbreviation{name=IEEE Transactions on Nuclear Science, iso=IEEE Trans. Nucl. Sci., medline=IEEE Trans Nucl Sci}
15:33:41.294 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Parallel and Distributed Systems, iso=#IEEE_J_PDS#, medline=#IEEE_J_PDS#}
NEW: Abbreviation{name=IEEE Transactions on Parallel and Distributed Systems, iso=IEEE Trans. Parallel Distrib. Syst., medline=IEEE Trans Parallel Distrib Syst}
15:33:41.304 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Pattern Analysis and Machine Intelligence, iso=#IEEE_J_PAMI#, medline=#IEEE_J_PAMI#}
NEW: Abbreviation{name=IEEE Transactions on Pattern Analysis and Machine Intelligence, iso=IEEE Trans. Pattern Anal. Mach. Intell., medline=IEEE Trans Pattern Anal Mach Intell}
15:33:41.306 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Plasma Science, iso=#IEEE_J_PS#, medline=#IEEE_J_PS#}
NEW: Abbreviation{name=IEEE Transactions on Plasma Science, iso=IEEE Trans. Plasma Sci., medline=IEEE Trans Plasma Sci}
15:33:41.306 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Power Apparatus and Systems, iso=#IEEE_J_PWRAS#, medline=#IEEE_J_PWRAS#}
NEW: Abbreviation{name=IEEE Transactions on Power Apparatus and Systems, iso=IEEE T. Power. Ap. Syst., medline=IEEE T Power Ap Syst}
15:33:41.306 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Power Delivery, iso=#IEEE_J_PWRD#, medline=#IEEE_J_PWRD#}
NEW: Abbreviation{name=IEEE Transactions on Power Delivery, iso=IEEE Trans. Power Delivery, medline=IEEE Trans Power Delivery}
15:33:41.307 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Power Electronics, iso=#IEEE_J_PWRE#, medline=#IEEE_J_PWRE#}
NEW: Abbreviation{name=IEEE Transactions on Power Electronics, iso=IEEE Trans. Power Electron., medline=IEEE Trans Power Electron}
15:33:41.307 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Power Systems, iso=#IEEE_J_PWRS#, medline=#IEEE_J_PWRS#}
NEW: Abbreviation{name=IEEE Transactions on Power Systems, iso=IEEE Trans. Power Syst., medline=IEEE Trans Power Syst}
15:33:41.307 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Professional Communication, iso=#IEEE_J_PC#, medline=#IEEE_J_PC#}
NEW: Abbreviation{name=IEEE Transactions on Professional Communication, iso=IEEE Trans. Prof. Commun., medline=IEEE Trans Prof Commun}
15:33:41.308 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Rehabilitation Engineering, iso=#IEEE_J_RE#, medline=#IEEE_J_RE#}
NEW: Abbreviation{name=IEEE Transactions on Rehabilitation Engineering, iso=IEEE Trans. Rehabil. Eng., medline=IEEE Trans Rehabil Eng}
15:33:41.308 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Reliability, iso=#IEEE_J_R#, medline=#IEEE_J_R#}
NEW: Abbreviation{name=IEEE Transactions on Reliability, iso=IEEE Trans. Reliab., medline=IEEE Trans Reliab}
15:33:41.308 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Robotics, iso=#IEEE_J_RO#, medline=#IEEE_J_RO#}
NEW: Abbreviation{name=IEEE Transactions on Robotics, iso=IEEE Trans. Rob., medline=IEEE Trans Rob}
15:33:41.309 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Robotics and Automation, iso=#IEEE_J_RA#, medline=#IEEE_J_RA#}
NEW: Abbreviation{name=IEEE Transactions on Robotics and Automation, iso=IEEE T. Robotic. Autom., medline=IEEE T Robotic Autom}
15:33:41.309 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Semiconductor Manufacturing, iso=#IEEE_J_SM#, medline=#IEEE_J_SM#}
NEW: Abbreviation{name=IEEE Transactions on Semiconductor Manufacturing, iso=IEEE Trans. Semicond. Manuf., medline=IEEE Trans Semicond Manuf}
15:33:41.313 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Services Computing, iso=#IEEE_J_SC#, medline=#IEEE_J_SC#}
NEW: Abbreviation{name=IEEE Transactions on Services Computing, iso=IEEE Trans. Serv. Comput., medline=IEEE Trans Serv Comput}
15:33:41.314 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Signal Processing, iso=#IEEE_J_SP#, medline=#IEEE_J_SP#}
NEW: Abbreviation{name=IEEE Transactions on Signal Processing, iso=IEEE Trans. Signal Process., medline=IEEE Trans Signal Process}
15:33:41.314 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Software Engineering, iso=#IEEE_J_SE#, medline=#IEEE_J_SE#}
NEW: Abbreviation{name=IEEE Transactions on Software Engineering, iso=IEEE Trans. Software Eng., medline=IEEE Trans Software Eng}
15:33:41.321 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Sonics and Ultrasonics, iso=#IEEE_J_SU#, medline=#IEEE_J_SU#}
NEW: Abbreviation{name=IEEE Transactions on Sonics and Ultrasonics, iso=IEEE T. Son. Ultrason., medline=IEEE T Son Ultrason}
15:33:41.321 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Speech and Audio Processing, iso=#IEEE_J_SAP#, medline=#IEEE_J_SAP#}
NEW: Abbreviation{name=IEEE Transactions on Speech and Audio Processing, iso=IEEE T. Speech. Audi. P., medline=IEEE T Speech Audi P}
15:33:41.322 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Systems Science and Cybernetics, iso=#IEEE_J_SSC#, medline=#IEEE_J_SSC#}
NEW: Abbreviation{name=IEEE Transactions on Systems Science and Cybernetics, iso=IEEE T. Syst. Sci. Cyb., medline=IEEE T Syst Sci Cyb}
15:33:41.322 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Systems, Man and Cybernetics, iso=#IEEE_J_SMC#, medline=#IEEE_J_SMC#}
NEW: Abbreviation{name=IEEE Transactions on Systems, Man and Cybernetics, iso=IEEE Trans. Syst. Man Cybern., medline=IEEE Trans Syst Man Cybern}
15:33:41.323 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Ultrasonics, Ferroelectrics, and Frequency Control, iso=#IEEE_J_UFFC#, medline=#IEEE_J_UFFC#}
NEW: Abbreviation{name=IEEE Transactions on Ultrasonics, Ferroelectrics, and Frequency Control, iso=IEEE Trans. Ultrason. Ferroelectr. Freq. Control, medline=IEEE Trans Ultrason Ferroelectr Freq Control}
15:33:41.324 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Vehicular Communications, iso=#IEEE_J_VC#, medline=#IEEE_J_VC#}
NEW: Abbreviation{name=IEEE Transactions on Vehicular Communications, iso=IEEE T. Veh. Commun., medline=IEEE T Veh Commun}
15:33:41.324 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Vehicular Technology, iso=#IEEE_J_VT#, medline=#IEEE_J_VT#}
NEW: Abbreviation{name=IEEE Transactions on Vehicular Technology, iso=IEEE Trans. Veh. Technol., medline=IEEE Trans Veh Technol}
15:33:41.326 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Very Large Scale Integration (VLSI) Systems, iso=#IEEE_J_VLSI#, medline=#IEEE_J_VLSI#}
NEW: Abbreviation{name=IEEE Transactions on Very Large Scale Integration (VLSI) Systems, iso=IEEE Trans. Very Large Scale Integr. VLSI Syst., medline=IEEE Trans Very Large Scale Integr VLSI Syst}
15:33:41.326 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Visualization and Computer Graphics, iso=#IEEE_J_VCG#, medline=#IEEE_J_VCG#}
NEW: Abbreviation{name=IEEE Transactions on Visualization and Computer Graphics, iso=IEEE Trans. Visual Comput. Graphics, medline=IEEE Trans Visual Comput Graphics}
15:33:41.326 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Transactions on Wireless Communications, iso=#IEEE_J_WCOM#, medline=#IEEE_J_WCOM#}
NEW: Abbreviation{name=IEEE Transactions on Wireless Communications, iso=IEEE Trans. Wireless Commun., medline=IEEE Trans Wireless Commun}
15:33:41.327 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Translation Journal on Magnetics in Japan, iso=#IEEE_J_TJMJ#, medline=#IEEE_J_TJMJ#}
NEW: Abbreviation{name=IEEE Translation Journal on Magnetics in Japan, iso=IEEE Transl. J. Magn. Jpn., medline=IEEE Transl J Magn Jpn}
15:33:41.327 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Vehicular Technology Magazine, iso=#IEEE_M_VT#, medline=#IEEE_M_VT#}
NEW: Abbreviation{name=IEEE Vehicular Technology Magazine, iso=IEEE Veh. Technol. Mag., medline=IEEE Veh Technol Mag}
15:33:41.327 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE Wireless Communications, iso=#IEEE_M_WC#, medline=#IEEE_M_WC#}
NEW: Abbreviation{name=IEEE Wireless Communications, iso=IEEE Wireless Commun., medline=IEEE Wireless Commun}
15:33:41.327 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE/ACM Transactions on Computational Biology and Bioinformatics, iso=#IEEE_J_CBB#, medline=#IEEE_J_CBB#}
NEW: Abbreviation{name=IEEE/ACM Transactions on Computational Biology and Bioinformatics, iso=IEEE/ACM Trans. Comput. Biol. Bioinform., medline=IEEE/ACM Trans Comput Biol Bioinform}
15:33:41.328 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE/ACM Transactions on Networking, iso=#IEEE_J_NET#, medline=#IEEE_J_NET#}
NEW: Abbreviation{name=IEEE/ACM Transactions on Networking, iso=IEEE/ACM Trans. Networking, medline=IEEE/ACM Trans Networking}
15:33:41.329 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE/ASME Transactions on Mechatronics, iso=#IEEE_J_MECH#, medline=#IEEE_J_MECH#}
NEW: Abbreviation{name=IEEE/ASME Transactions on Mechatronics, iso=IEEE/ASME Trans. Mechatron., medline=IEEE/ASME Trans Mechatron}
15:33:41.330 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=IEEE/OSA Journal of Display Technology, iso=#IEEE_J_JDT#, medline=#IEEE_J_JDT#}
NEW: Abbreviation{name=IEEE/OSA Journal of Display Technology, iso=IEEE/OSA J. Disp. Technol., medline=IEEE/OSA J Disp Technol}
15:33:41.337 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=Journal of Lightwave Technology, iso=#IEEE_J_JLT#, medline=#IEEE_J_JLT#}
NEW: Abbreviation{name=Journal of Lightwave Technology, iso=J. Lightwave Technol., medline=J Lightwave Technol}
15:33:41.338 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=Journal of Microelectromechanical Systems, iso=#IEEE_J_MEMS#, medline=#IEEE_J_MEMS#}
NEW: Abbreviation{name=Journal of Microelectromechanical Systems, iso=J. Microelectromech. Syst., medline=J Microelectromech Syst}
15:33:41.338 [Thread-13] INFO  net.sf.jabref.logic.journals.JournalAbbreviationRepository - Duplicate journal abbreviation - old one will be overwritten by new one
OLD: Abbreviation{name=Proceedings of the IEEE, iso=#IEEE_J_PROC#, medline=#IEEE_J_PROC#}
NEW: Abbreviation{name=Proceedings of the IEEE, iso=Proc. IEEE, medline=Proc IEEE}
```
Also, when opening the dialog after having closed it I get this when the custom lists are loaded:
```
java.lang.IllegalStateException: Not on FX application thread; currentThread = Thread-15
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423) ~[jfxrt.jar:?]
	at javafx.scene.Parent$2.onProposedChange(Parent.java:367) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:113) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.updateChildren(LabeledSkinBase.java:575) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.handleControlPropertyChanged(LabeledSkinBase.java:204) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ListCellSkin.handleControlPropertyChanged(ListCellSkin.java:49) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55) ~[jfxrt.jar:?]
	at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:103) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:110) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:144) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:49) ~[jfxrt.jar:?]
	at javafx.beans.property.StringProperty.setValue(StringProperty.java:65) ~[jfxrt.jar:?]
	at javafx.scene.control.Labeled.setText(Labeled.java:145) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.updateDisplayText(ComboBoxListViewSkin.java:389) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin.access$100(ComboBoxListViewSkin.java:57) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ComboBoxListViewSkin$2$1.updateItem(ComboBoxListViewSkin.java:425) ~[jfxrt.jar:?]
	at javafx.scene.control.ListCell.updateItem(ListCell.java:471) ~[jfxrt.jar:?]
	at javafx.scene.control.ListCell.lambda$new$160(ListCell.java:167) ~[jfxrt.jar:?]
	at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88) [jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329) [jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73) [jfxrt.jar:?]
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233) [jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482) [jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541) [jfxrt.jar:?]
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205) [jfxrt.jar:?]
	at javafx.collections.ModifiableObservableListBase.addAll(ModifiableObservableListBase.java:102) [jfxrt.jar:?]
	at javafx.collections.ObservableListBase.addAll(ObservableListBase.java:245) [jfxrt.jar:?]
	at javafx.beans.binding.ListExpression.addAll(ListExpression.java:358) [jfxrt.jar:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsViewModel.addBuiltInLists(ManageJournalAbbreviationsViewModel.java:118) [main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController$1.call(ManageJournalAbbreviationsController.java:61) [main/:?]
	at net.sf.jabref.gui.journals.ManageJournalAbbreviationsController$1.call(ManageJournalAbbreviationsController.java:53) [main/:?]
	at javafx.concurrent.Task$TaskCallable.call(Task.java:1423) [jfxrt.jar:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
```
#2290 Comment 4:
When starting a JabRef instance on this branch, I get:
```
13:38:17.860 [AWT-EventQueue-0] INFO  net.sf.jabref.logic.importer.OpenDatabase - Opening: \\nas-a1\redirected$\jorglenh\Desktop\test.bib
File: grouptree.fxml not found, attempting with camel case
Cannot load file GroupTree.fxml
Stopping initialization phase...
13:38:18.950 [JavaFX Application Thread] ERROR net.sf.jabref.FallbackExceptionHandler - Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.IllegalStateException: Cannot load file GroupTree.fxml
	at com.airhacks.afterburner.views.FXMLView.getResourceCamelOrLowerCase(FXMLView.java:221) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.getFXMLName(FXMLView.java:205) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.<init>(FXMLView.java:83) ~[afterburner.fx-1.7.0.jar:?]
	at com.airhacks.afterburner.views.FXMLView.<init>(FXMLView.java:72) ~[afterburner.fx-1.7.0.jar:?]
	at net.sf.jabref.gui.AbstractView.<init>(AbstractView.java:14) ~[main/:?]
	at net.sf.jabref.gui.groups.GroupTreeView.<init>(GroupTreeView.java:8) ~[main/:?]
	at net.sf.jabref.gui.groups.GroupSelector.lambda$new$18(GroupSelector.java:353) ~[main/:?]
	at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_92]
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294) ~[jfxrt.jar:?]
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
```
In the same instance, when trying to open the About dialog or the error console, I get:
```
13:38:52.944 [JavaFX Application Thread] ERROR net.sf.jabref.FallbackExceptionHandler - Uncaught exception Occurred in Thread[JavaFX Application Thread,5,main]
java.lang.NullPointerException: null
	at net.sf.jabref.gui.AbstractView.getView(AbstractView.java:25) ~[main/:?]
	at net.sf.jabref.gui.help.AboutDialogView.show(AboutDialogView.java:15) ~[main/:?]
	at net.sf.jabref.gui.help.AboutAction.lambda$actionPerformed$0(AboutAction.java:22) ~[main/:?]
	at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295) ~[jfxrt.jar:?]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_92]
	at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294) ~[jfxrt.jar:?]
	at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication._runLoop(Native Method) ~[jfxrt.jar:?]
	at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191) ~[jfxrt.jar:?]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
```
Something seems to be broken at the moment.
#2290 Comment 5:
Both issues should be fixed now.
--------------------------------------------------------------
#2289 Comment 1:
LGTM! 

--------------------------------------------------------------
#2287 Comment 1:
Further threading improvements motivated by this will come in #2304
--------------------------------------------------------------
#2286 Comment 1:
Okay, permissons are not copied. Maybe it is enough to check for Unix OS/POSIX support:
https://docs.oracle.com/javase/tutorial/essential/io/fileAttr.html

#2286 Comment 2:
Yes I think checking 

> private static final boolean isPosixCompilant =  FileSystems.getDefault().supportedFileAttributeViews().contains("posix");

should be enough. Do you want to add this, or should I?

#2286 Comment 3:
Please do add this. I am answering from phone

2016-11-18 23:51 GMT+01:00 Tobias Diez notifications@github.com:

> Yes I think checking
> 
> private static final boolean isPosixCompilant = FileSystems.getDefault().
> supportedFileAttributeViews().contains("posix");
> 
> should be enough. Do you want to add this, or should I?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/2286#issuecomment-261663041, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5IAtK7Nnx-qm999U3pYZV7FQSgNlks5q_ivvgaJpZM4K23M8
> .

--------------------------------------------------------------
#2283 Comment 1:
Well, since it was decided in the devcall to implement this, it is ok for me if you go ahead. Regarding the choice of the tracking technology, I trust your skills. The code that is needed to track a dialog seems to be very simple in any case.

I am just not sure if an opt-out is the way to go, or if it should rather be an opt-in. Maybe we could display a dialog asking for consent on first startup. That would be more privacy-friendly in my point of view and we do not want JabRef to appear that it tries to grab user data. I am sure there would be enough people who are willing to contribute their data even in case of opt-in.

#2283 Comment 2:
:+1: for opt-in

#2283 Comment 3:
Nice that you give it a try 😄 👍 GA had no appropriate library?

#2283 Comment 4:
Why do you want to spy almost everything I do?

#2283 Comment 5:
@grimes2 My guess (I haven't participated in the discussion on this) is that this would enable us to see which features are actually used and which are not. If we had had data on content selector usage, we would not have removed them. At the same time, we would be able to see if there is a point at all in optimizing JabRef usage for really large databases or if this is a waste of time.

#2283 Comment 6:
I added tracking of other dialogs and changed the default to "do not share telemetry data". Also, after the first minute of using JabRef, the user is asked whether he wants to share is data. I actually preferred to have a more non-invasive notification similar to 
![ie](http://media.askvg.com/articles/images3/Speedup_Browsing_Disable_Addons_Popup_IE9.png)
JavaFX provides a NotificationPanel exactly for this scenario, however, it doesn't work if the rest of the application is in swing. 

Anyway, this PR is now finally ready for your feedback!

-----
For later reference (I will add this links also to the wiki):
- Walk-through of [how to use Azure Application Insights in Java](https://docs.microsoft.com/en-us/azure/application-insights/app-insights-java-get-started)
- [Azure Application Insight github project](https://github.com/Microsoft/ApplicationInsights-Java)
#2283 Comment 7:
I tried it out locally, the dialog appears as desired, and the option can be disabled via the preferences. Code-wise, I have no objections. However, JabRef does not terminate when I close it and I get the a lot of messages in the console, e.g.:
```
AI: TRACE 31-03-2017 13:39, 28: Telemetry Configuration: illegal instrumentation key: null
AI: TRACE 31-03-2017 13:39, 28: InProcessTelemetryChannel sending telemetry
AI: ERROR 31-03-2017 13:39, 44: Failed to send, Bad request  : {"itemsReceived":1,"itemsAccepted":0,"errors":[{"index":0,"statusCode":400,"message":"Invalid instrumentation key"}]}
AI: TRACE 31-03-2017 13:39, 28: Telemetry Configuration: illegal instrumentation key: null
AI: TRACE 31-03-2017 13:39, 28: InProcessTelemetryChannel sending telemetry
AI: ERROR 31-03-2017 13:39, 46: Failed to send, Bad request  : {"itemsReceived":1,"itemsAccepted":0,"errors":[{"index":0,"statusCode":400,"message":"Invalid instrumentation key"}]}
```

Since this is a very sensitive topic, I think we should make the dialog a little more explanatory. Currently it says 

> To improve the user experience, we would like to collect data on the features you use. No personal data will be collected.


While everything is in that statement, I think we should be more explicit and repeat ourselves. Suggestion: 

> To improve the user experience, we would like to collect anonymous statistics on the features you use. We will only record what features you access and how often you do it. We will neither collect any personal data nor the content of bibliographic items. The collected data will be stored on XXX and we will only use it to prioritize our development efforts. If you choose to allow data collection, you can later disable it via Options -> Preferences -> General

I know this is quite long, but since this is a delicate topic, I think it is necessary. Btw.: where is the data actually stored?

@JabRef/developers I think this is so important that everyone should consider it briefly.

And a last comment: We will get flack from the Linux freaks when they find out that we dare to include a microsoft library. So be prepared for it ;-)
#2283 Comment 8:
I like your suggestion for the dialog text and updated it accordingly. The data is store on Microsoft Azure server...no idea where exactly 😄 .

The reason for the error message is that a correct instrumentation key is only inserted by travis and thus you get these messages when you run JabRef from the IDE. 
#2283 Comment 9:
By the way, this is what I just got after installing soapUI:
![soapui](https://cloud.githubusercontent.com/assets/1515701/24553492/a8aff9de-162a-11e7-944b-d0b2c92bc463.png)

Of course, they have a much more explicit privacy policy page for that.

--------------------------------------------------------------
#2281 Comment 1:
Good job! Give it some time. If there is no build tomorrow, try restarting. Then @g-mos should give it a try and see if it keeps permissions.

#2281 Comment 2:
I would be happy to test whatever is needed. Since I am new to this, inform me and tell me, when and what I need to download.

#2281 Comment 3:
@tobiasdiez Could you create a branch at the JabRef main repo?

#2281 Comment 4:
@koppor I pushed to a branch in the main rep (https://github.com/JabRef/jabref/tree/filePermissions) but no build appears under http://builds.jabref.org/.

#2281 Comment 5:
A test failed at circleCI... I've restarted the build: https://circleci.com/gh/JabRef/jabref/8328

#2281 Comment 6:
Thanks @matthiasgeiger, it worked!

@g-mos could you please install the development version from http://builds.jabref.org/filePermissions/ and test if the permission issue is indeed resolved. Thank you! 

#2281 Comment 7:
LGTM 👍 
Just for clarification: why don't we write directly to the bib file? Would be cleaner?!

#2281 Comment 8:
I can confirm that the permissions of the files are kept. Therefore the issue at hand is fixed.
BUT! Due to the logic as @tobiasdiez described every time a different user saves the file user/group owners of the file change. For common usage this is not important, even for my scenarios this is not important. I presume that you need the "opening new file philosophy" for triggering when actual changes happen in a group/collaboration environment. But to add to @stefan-kolb idea, instead of creating a new file can you clone at the beginning and open the clone? Then save to the original? Just as an idea?
Either way thanks @tobiasdiez for the quick fix!
The above was checked in two computers (Ubuntu 15.10/16.04)

#2281 Comment 9:
@g-mos Thanks for your feedback (and reporting the issue in the first place).
I will now merge this PR, so the fix will be included in the next version.
I don't think we will completely change how files are saved in the near future. I think the reason for writing everything to a new file is that it provides an additional layer of security. If something gets messed up during the writing process, the original file is untouched and without damage.   

#2281 Comment 10:
@tobiasdiez I agree for the security layer. My idea is 
a. copy the file, so that permissions, owners stay the same
b. open the copy
c. if the user saves --> save to the original file.
I do not know if this is feasible.... 

#2281 Comment 11:
@g-mos  Due to a problem on windows I slightly had to change the code. Follow up is in  #2286 
I would like you to test the build from here:
http://builds.jabref.org/copyPermissions/

#2281 Comment 12:
Unfortunately @Siedlerchr, this new version returns to the original problem. The permissions are completely destroyed. rw for user and no access to everybody else. It is also changing of user/group ownership to the user that shaved the jabref file. Sorry for the bad news.
To add if it might help. The .bak file has the proper permissions and the proper ownership.

#2281 Comment 13:
@g-mos Okay, thanks for the feedback. I will investigate this further. In the meantime you can revert back to the version before.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2266 Comment 1:
Lgtm failing Test seems to be the astrophysics fetcher

#2266 Comment 2:
The test failed because of the changed implementation. I adapted the test accordingly in cdf6261.

MathSciNet timeouts, which seems to be unrelated to the improvement above.

--------------------------------------------------------------
#2265 Comment 1:
I agree with your suggestions regarding the usage of `menuTitle`.

As for this PR, however, the localization tests fail. So please fix them and we should be ready to merge.

--------------------------------------------------------------
#2264 Comment 1:
Some TODOs I thought about:
- [ ] include index initialization in JabRef
  - [ ] evaluate when to create/update index
  - [ ] evaluate if update method needs to be written (that doesn't create the whole index from scratch)
- [ ] sort search results
- [ ] use pdf importer from #1883 
- [ ] validate the extracted fields in the search result
- [ ] include in UI
- [ ] Qs stuff, unit/integration tests

#2264 Comment 2:
There is no person working on it. 
We are currently trying to focus on other things. :fire:
We will come back later to this topic, therefore closing adding [on-hold label](https://github.com/JabRef/jabref/issues?utf8=%E2%9C%93&q=label%3Aon-hold+) and closing the issue for now.
#2264 Comment 3:
Some links that are maybe helpful:
- We want: Extended/fulltext search: index pdfs, reviews ect. (related issue: https://github.com/JabRef/jabref/issues/2263)
- Lucene project: https://github.com/schoenm1/lucene
- http://tockit.sourceforge.net/docco/screenshots.html
- Lucene + pdfbox http://www.programming-free.com/2012/11/simple-word-search-in-pdf-files-using.html 
- real-live example using javafx http://blog.mirkosertic.de/javastuff/fxdesktopsearch
- Extract references from pdf: https://initiative.eudml.org/EuDmlAnalysisDemo/ or https://github.com/CrossRef/pdfextract
--------------------------------------------------------------
--------------------------------------------------------------
#2260 Comment 1:
Great! Thank you for the huge update!

--------------------------------------------------------------
#2259 Comment 1:
Thank you!

--------------------------------------------------------------
#2258 Comment 1:
Thank you very much! 👍 

--------------------------------------------------------------
#2257 Comment 1:
Thanks you very much for your contribution! 

--------------------------------------------------------------
#2256 Comment 1:
There seems to be some keys more than once inside, according to the failed test:

`net.sf.jabref.logic.l10n.LocalizationConsistencyTest > allFilesMustHaveSameKeys FAILED

```
java.lang.AssertionError: Missing keys of ru expected:<[]> but was:<[Connection_to_%0_server_established., New_technical_report, The_BibEntry_you_currently_work_on_has_been_deleted_on_the_shared_side., The_connection_to_the_server_has_been_terminated.]>`
```

#2256 Comment 2:
I think, it's the other way round - these keys are missing. One has to run `c:\tools\python2\python scripts\syncLang.py update -e` and handle the result. I fixed it in 2441675677812ae3d852b80, which means, this is merged.

--------------------------------------------------------------
#2250 Comment 1:
Hi and thanks for your contribution.

However, I suppose it will be difficult to actually use `com.eclipsesource.j2v8` in this way: If the concrete packages are in fact platform dependent it won't be possible to provide a platform independet jar file anylonger.

#2250 Comment 2:
Ooh good point! If the slow performance of CSL citation generation isn't an issue for others, I wouldn't bother about it too much. Maybe we can include V8 in the platform specific binaries though?

#2250 Comment 3:
Note that the code is based o https://github.com/michel-kraemer/citeproc-java/blob/master/citeproc-java/build.gradle#L26

https://github.com/michel-kraemer/citeproc-java/blob/master/citeproc-java/build.gradle#L56:

```
    if (getV8Dependency() != null) {
        provided getV8Dependency()
}
```

Maybe replace `provided` by `compile`?

#2250 Comment 4:
I would vote for generating specific JARs and package them for MacOSX and Windows. For linux, we could generate two JARs, too.

#2250 Comment 5:
Could you also update [external-libraries.txt](https://github.com/JabRef/jabref/blob/master/external-libraries.txt) as described at https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#when-adding-a-library. We need that to ease debian packaging (refs https://github.com/koppor/jabref/issues/135).

#2250 Comment 6:
I used your patch here with the new engine. It is very fast. Seeing that, I think, we should invest time for a correct build of JabRef and not reimplementing the whole functionality in Java. That time should better be spent in JabRef itself 😇 

#2250 Comment 7:
Another option would be to check if it works wirh jdk8 nashorn engine as discussed here https://github.com/michel-kraemer/citeproc-java/issues/28

#2250 Comment 8:
@Siedlerchr, I did try building with the nashorn engine, the performance wasn't improved by very much at least on my machine.

#2250 Comment 9:
@shitikanth Could you try to adapt the gradle build file to create a plattform-specific jar and a plattform-neutral jar? The speedup of the V8 engine is huge and I would really like to get this into the next JabRef release.
#2250 Comment 10:
@koppor I am not familiar with JabRef's build/release process, so it will help me if can you specify what behaviour you want. For example, does the following expected behaviour look okay to you?

* `./gradlew releaseJar`: creates platform specific build like JabRef-<version>-linux_x86-64.jar 
* `./gradlew shadowJar`: creates a platform independent build.
#2250 Comment 11:
I think during release the shadowJar variant is used which creates a fat-jar. The needed behavior would be to create 5 different fat-Jars: Windows x86, Win x64, Linux, MacOSX,  and independent - which is then used to create the platform specific installers using install4j. 

@stefan-kolb Can you assist here? Is it possible to use different jars in install4j?
#2250 Comment 12:
Yes, shadowJar is used right now as far as I know. As for the executables, we probably need to add more `launchers` inside install4j for every configuration.
#2250 Comment 13:
To illustrate the performance gain, [I made](https://screentogif.codeplex.com/) two videos:

## without V8

![without-v8](https://cloud.githubusercontent.com/assets/1366654/20882522/a929867c-bae1-11e6-8513-6d32c2760dc7.gif)

## with V8

![with-v8](https://cloud.githubusercontent.com/assets/1366654/20882559/d389e312-bae1-11e6-95f6-8b34df776713.gif)

#2250 Comment 14:
Hm, I ask myself why this stuff is taking so long anyway? It is just a String creation wtf?
#2250 Comment 15:
http://eclipsesource.com/blogs/2014/11/17/highly-efficient-java-javascript-integration/:

> Unlike other JS Runtimes (including JV8, Jav8), J2V8 takes a primitive based approach, resulting in much less garbage.

I am not in the internals of JavaScript engines and cannot really compare [Rhino](https://github.com/mozilla/rhino) and [Nashorn](http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html) to [J2V8](https://github.com/eclipsesource/J2V8).
#2250 Comment 16:
IMHO the alternative is to implement citeproc-java directly in Java as suggested by @shitikanth at https://github.com/JabRef/jabref/pull/2250#discussion_r87088785. Maybe, this could be a project for the time between the years? 😇 
#2250 Comment 17:
I merged to `use-V8-for-citeproc` to enable other developers continuing working on it.
#2250 Comment 18:
> Hm, I ask myself why this stuff is taking so long anyway? It is just a String creation wtf?

The `citeproc.js` file is 664 KB large and the code is very complex. It seems Nashorn is not very fast when compiling and running such a file for the first time. However, since it uses JIT compilation, it gets very fast the longer the program runs and the more often you execute the file.
--------------------------------------------------------------
#2248 Comment 1:
This pull request belongs to #1899

#2248 Comment 2:
Thanks for your contribution! Yeah, that could have been the reason... for the failure.
I will check it later.

#2248 Comment 3:
Looks good!
The failing tests are just Some failing fetchers
Can be merged into the branch 
Thanks for your contribution

--------------------------------------------------------------
--------------------------------------------------------------
#2245 Comment 1:
I tested this locally and the issn field is now available in the cleanup panel. Since the change is just one line of code, I'll merge right away without a second review.

Thank you for your contribution!

--------------------------------------------------------------
#2242 Comment 1:
That was quick... 👍 

Thanks for your contribution!

--------------------------------------------------------------
--------------------------------------------------------------
#2236 Comment 1:
@koppor has an opinion here?!

#2236 Comment 2:
In my experience, in a typical setting, one does not know the correct date, but only the year. Together with an experienced librarian (@georgd), I maintain a high-quality example .bib file at https://github.com/latextemplates/biblatex-lni/blob/master/LNI-examples.bib. There, we use `year` and `urldate`, but never `date`.

I currently don't see, where the month file is currently shown.

So I would vote for keeping as is and not merge.

#2236 Comment 3:
The problem is, that an existing month field is not shown at all. The month field should be shown in deprecated or in other fields tab. I prefer the deprecated tab, because the month field is mentioned in the BibLaTeX manual. I think, it is better to remove the year field from deprecated fields, because it is present in required field.

#2236 Comment 4:
The year is IMHO not in the depricated fields, is it? Could you provide a screenshot?

We can add the month to the deprecated fields.

#2236 Comment 5:
The biblatex manual states

> biblatex will also consider the fields year and month
> for backwards compatibility with traditional BibTeX but this is not encouraged as
> explicit year and month are not parsed for date meta-information markers or
> times and are used as-is.

which is a polite way to say "they are deprecated". Thus I support @grimes2 here and think these two fields should be added to the deprecated tab. @koppor you can also put only the year in the date field if you don't know the month/day of publication.

#2236 Comment 6:
Typically, bibtex things from the web have year and not date. This IMHO
won't change in the future... I'm also in favour for putting journal in the
required fields and not other fields. Reason: Main bib file biblatex, but
paper bib file in bibtex. No converter for biblatex to bibtex and not
forcing everyone to use biblatex/jabref.

--------------------------------------------------------------
#2234 Comment 1:
@bartsch-dev can you have a look?

#2234 Comment 2:
@bartsch-dev I wanted to be consistent with the CTRL-F shortcut which also moves the cursor to the search field

--------------------------------------------------------------
#2230 Comment 1:
I had a look at the code and tested it locally. The usage of functional interfaces and method references really touches the boundaries of my Java knowledge here. I thought a little over it, but came to the same conclusion: The only way to avoid duplicating the code of the `getAlias` method is to introduce an interface and delegate the invocation of `getField` to the proper implementation (with or without LaTeX-freeness). Your solution is much more concise than a traditional one would be. This will make `BibEntry` a little harder to understand for now, but the right way for us (me) is to master the new capabilities of Java and not keeping the code to an older level.

The failing tests in branch build come from failing fetcher, which are fixed on master, so I am merging right away.

--------------------------------------------------------------
--------------------------------------------------------------
#2227 Comment 1:
Code looks good. If I closed the groups interface and restart JabRef, the group interface is still shown. Maybe, because my last file contains groups? I did it with <kbd>alt</kbd>-<kbd>3</kbd>

#2227 Comment 2:
> Maybe, because my last file contains groups? 

No. Because I'm dumb ;-)

--------------------------------------------------------------
--------------------------------------------------------------
#2225 Comment 1:
For @grimes2, [this fixed the issue](https://github.com/JabRef/jabref/issues/2220#issuecomment-258010791). My issue is also fixed.

--------------------------------------------------------------
#2223 Comment 1:
Could you please also add a test for the arxiv entry which failed to download before the fix.

#2223 Comment 2:
A test for the entry would be no different. It must be done for the URLDownloader, but I'm not entirely sure how right now.

--------------------------------------------------------------
#2217 Comment 1:
@tobiasdiez you can save the shared database locally wherever you want using _save as_ (`CTRL` + [`SHIFT`] + `S`) or using the connection dialog. This part of dialog was not intended to change the path. If you want to change the path, just move the shared database (the _bib_ file) anywhere others on your local file system.
As I described in header, this should only make the file synchroniazation using shared databases more popular.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2212 Comment 1:
Ok, rebase and merge.

--------------------------------------------------------------
#2211 Comment 1:
Now it works for cutting entries too.
I removed the code duplicate, although I'm not sure about the the pattern (not able to use `runCommand(Actions.DELETE)`).

#2211 Comment 2:
To me code looks good :+2:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2199 Comment 1:
In the prompt Firstname Lastname... "others" is not translated. My proposal is to replace it by "et al.". This is international, so no translation needed.
`prompt = String.format("%1$s and %1$s and others", Localization.lang("Firstname Lastname"))`
->`prompt = String.format("%1$s and %1$s and et al.", Localization.lang("Firstname Lastname"))`

For the `month` field in BibLaTeX mode `MM` (1-12) is recommended, but also `#mmm#` (`#jan#`) is allowed for backward compatibilty to BibTeX. BibTeX mode only recommends `#mmm#`. So my proposal:
`MM or #mmm#`

#2199 Comment 2:
`and others` is the bibtex string to procude `et al.` using bibtex/biblatex Therefore, this _must not_ be translated. It is contained in the help to educate users to use this string.

#2199 Comment 3:
Changed the prompt for `Month`-field.
I don't know about the prompts for the other fields, maybe you can point me into the right direction?

#2199 Comment 4:
From my side it looks ok now. I misinterpreted the author... prompt, because I didn't know the function of `and others` in BibTeX author/editor field. I found this documented in the official specification "Bibtexing".

#2199 Comment 5:
Just one small addition. I found following person name fields for BibLaTeX:

```
private static final List<String> BIBLATEX_PERSON_NAME_FIELDS = Arrays.asList(FieldName.AUTHOR, FieldName.EDITOR,
            FieldName.EDITORA, FieldName.EDITORB, FieldName.EDITORC, FieldName.TRANSLATOR, FieldName.ANNOTATOR,
            FieldName.COMMENTATOR, FieldName.INTRODUCTION, FieldName.FOREWORD, FieldName.AFTERWORD,
            FieldName.BOOKAUTHOR, FieldName.HOLDER, FieldName.SHORTAUTHOR, FieldName.SHORTEDITOR, FieldName.SORTNAME,
            FieldName.NAMEADDON, FieldName.ASSIGNEE);
```

 I assume that the suggestion syntax
`return String.format("%1$s and %1$s and others", Localization.lang("Firstname Lastname"));`
 is valid for all the mentioned fields above. What do you think? Should we add the missing person name fields to the switch construction?
Exception: `nameaddon` is a `field (literal)` not a `list (name)`

#2199 Comment 6:
Now I reuse the already existing lists.

#2199 Comment 7:
This PR breaks <kbd>Ctrl</kbd> + <kbd>A</kbd>. See https://github.com/JabRef/jabref/issues/2615
--------------------------------------------------------------
#2198 Comment 1:
Thanx. So, please, no copy'n'paste solutions here and useage of .menuTitle

#2198 Comment 2:
I changed it to menuTitle and removed the unused keys.

--------------------------------------------------------------
#2197 Comment 1:
👍 

--------------------------------------------------------------
#2196 Comment 1:
That looks simple indeed. 

Since we cannot let you get away with a one-liner: Please add a test that detects the bug you fixed, so that the build would break if this happens again.

#2196 Comment 2:
Yes this fix works. I'm unsure if we should use the KeywordList class here (since in the end we assume that the field is a list of words and we are adding a new keyword). 

#2196 Comment 3:
@tobiasdiez Sorry I don't get it. I've put it in the `KeywordGroup` class as the `add(List<BibEntry> entriesToAdd)` method is not overriden in the subclass `ExplicitGroup`.

Apart from that: If talking only about keywords (without the group context) the keywordSeparator is there followed by a `+" "`, too. (Sorry, I'm currently on my way home and have just closed IntelliJ - so I cannot provide a pointer for now.)

#2196 Comment 4:
@matthiasgeiger sorry for being cryptic. What I meant was that the class [KeywordList](https://github.com/JabRef/jabref/blob/955b94d7221e5ee3c102731f885eb395e1c2ad64/src/main/java/net/sf/jabref/model/entry/KeywordList.java) probably should be used to modify the field (instead of being text-based).
The code then looks similar to:

```
String oldContent = ...
KeywordList wordlist = new KeywordList(oldContent);
wordlist.add(searchExpression);
String newContent = wordlist.getAsString(seperator);
```

#2196 Comment 5:
Ahhh, I see... and this is exactly the position where the `+ "  "` addition is made for keywords.

Will check whether using this is actually possible without sideeffects.

#2196 Comment 6:
Done. Will merge after Travis is green.

// Edit: Harvard Astrophysics database is curently down...

--------------------------------------------------------------
--------------------------------------------------------------
#2194 Comment 1:
[![LGTM](https://lgtm.in/p/cghBUT10q)](https://lgtm.in/i/cghBUT10q) (LGTM)

#2194 Comment 2:
@tobiasdiez 

> Can you please also add a test that the comment at the beginning of the file with the shared database id is not taken as the comment of the first bibentry.

Done. But what's the sense of this test? `%` marks up a comment generally.

#2194 Comment 3:
BibTeX does not know the concept of "%"-comments. Everything outside of a BibEntry is considered a comment and is simply ignored by bibtex. However, JabRef safes the text before an entry as "user comments" so that they are kept upon rewriting an entry. However, we don't want to store the shared-db-id as a usercomment, since its an internal JabRef thing.

Please change the test code to "assertEquals("", string)"

#2194 Comment 4:
@tobiasdiez Done. Also thanks for the explantation.

#2194 Comment 5:
One last question before merge: does the test fails if you remove the encoding line? (I would prefer if you write the tests against strings as opposed to bib-files)

#2194 Comment 6:
Yes, it fails...

#2194 Comment 7:
Does that form a second test case? 😇

#2194 Comment 8:
No, the first one fails. The second one does not check whether a Shared ID is present. I could also add this assert to the second test but its already present in the previous one. Should I?

#2194 Comment 9:
I think the cleanest way is to add a second test, which makes sure that a single db-string in front of an entry is not captured as "user comment". And then fix the code so that the test passes. 
(please move the tests to the ParserTests and don't use bib files as input but strings)

#2194 Comment 10:
Other than my minor comment: LGTM. @tobiasdiez It seems, your test is now also included and working.

#2194 Comment 11:
Yes, also looks good to me. If the `testRecognizesDatabaseID` is added, the PR can be merged.

--------------------------------------------------------------
--------------------------------------------------------------
#2189 Comment 1:
After thinking about the design some more, I came to the conclusion that the data transmission between Mr.DLib and JabRef should be implemented as a fetcher. After all, what we want to do is to transmit a search string and get back a collection of bibliographic data. That is exactly what we already have implemented in our fetcher framework and a variety of `SearchBasedFetcher`, see: https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/logic/importer/SearchBasedFetcher.java

If you reuse this infrastructure, it will be quite easy to integrate Mr.DLib in various other places of JabRef as well, such as the web fetch dialog. Essentially, this should work out of the box. It would be possible to access MrDLib in the same fashion as Google Scholar, IEEExplore, the ACM digital library, etc.

A `MrDLibFetcher` could easily be reused in gui part to display the results in a nice panel and we would have a proper separation of concerns.

#2189 Comment 2:
I strongly agree with @lenhard! The implementation as a fetcher would be ideal. Probably not as a SearchFetcher but as a kind of hybrid with FulltextFetcher: insert a BibEntry (or a bunch of them?) and get a list of BibEntry (the recommendations). This should be the only place in JabRef which knows about MrDLIB. The presentation of the recommended BibEntries can then happen via the Layouter (similar to the entry preview) or by implementing a new user interface (recommended).

#2189 Comment 3:
Just to provide two-way linking: Discussion on discourse: http://discourse.jabref.org/t/integrating-related-articles-from-mrdlib-into-jabref/240/34

#2189 Comment 4:
So just to document what we have decided in the call: The MrDLib team will implement a fetcher for MrDLib and take care about transforming whatever format they provide into `BibEntries`. Custom MrDLib fields will just be stored as fields in a `BibEntry`, which should work easily as `BibEntries` allow for basically any field name. On the GUI side, the related articles tab will invoke the fetcher, get a collection of entries and display those entries as a list of labels or panels or the like. These GUI elements will display the MrDLib HTML representation that is stored in a custom field of the entry (providing flexibility to the MrDLib team) and it will be possible to provide additional JabRef integration to the elements, as the bibliographic data is also available in the regular BibTeX fields.

@tobiasdiez Could you please provide some guidance as to how to best implement parallelism for the invocation of the fetcher in the gui?

#2189 Comment 5:
@lenhard you suggested a to implement a `SearchBasedFetcher`. Beside that, is a class `SearchBasedParserFetcher`  what seems represent what we are trying to achieve:
/**
- Provides a convenient interface for search-based fetcher, which follow the usual three-step procedure:
- 1. Open a URL based on the search query
- 2. Parse the response to get a list of {@link BibEntry}
- 3. Post-process fetched entries
  */

Should I implement this class or stick to the `SearchBasedFetcher`

#2189 Comment 6:
In general `SearchBasedParserFetcher` is fine to use. However, it might be better to create a completely new interface `RecommendationFetcher` which is kind of a hybrid between the `SearchBasedFetcher` and the `FulltextFetcher`:
- you want to pass a BibEntry to the fetcher (and not a query as for the SearchBasedFetcher)
- you want to get a list of BibEntry as a return (and not a single BibEntry as for the `FulltextFetcher`).

The semantics are also more clear with a new interface.

#2189 Comment 7:
Now @tobiasdiez beat me in answering speed :-) But why not just reuse an `EntryBasedParserFetcher`? @tobiasdiez Is that not exactly what you describe? You enter an entire entry for building the query and get a `List<BibEntry>` back?

@stefanfeyer You can also reuse the `Parser` part the you find in the other fetchers. The code that transforms the result returned by MrDLib would then go into an implementation of a `Parser` that would be placed in `logic.import.fileformat` (a package in parallel to the fetcher package) and you can use such a parser in your new fetcher. This structure nicely separates getting the data from interpreting the data.

On an additional note, it seems that the parallelism part for the fetchers is not as sophisticated as I had hoped. The current fetching mechanism is implemented via a `SwingWorker` and you can find an example for its usage for fetching in `net.sf.jabref.gui.EntryTypeDialog.FetcherWorker`. You should parallelize the invocation of the fetcher in the related articles tab in a similar fashion.

#2189 Comment 8:
@lenhard oh, I forgot about the `EntryBasedFetcher`. You are right that it provides a method with the right signature. However, its purpose is actually a bit different, namely find possible hits in the online db which are matched by this entry (can be used to complete bibliographic information). Not sure if it is worth the hassle to create a new interface `RecommendationFetcher` in order to have a semantic distinction. 

#2189 Comment 9:
Well, as we are not actually planning to integrate more recommender systems, I would say a second interface that duplicates the functionality is not really needed. I think @stefanfeyer should go for the `EntryBasedParserFetcher` now. If, at a later point in time, we feel that we need another interface to better distinguish the semantics, introducing one will be easy and can be done by extending, but without having to rewrite code.

#2189 Comment 10:
Dear JabRef Team,
I restructured the implementation of the integration of Mr. DLib. This commit is mostly therefor, that you are up to date with the latest developments. I would like to have an confirmation, that the structure meets what we agreed on. Should I make a new PR for that?

Kind Regards, Stefan Feyer

#2189 Comment 11:
Hi Stefan,
reusing this PR is fine.

Without going into the details of the code: Generally the fetcher itself is following the correct approach. 

However, letting the fetcher implement `SwingWorker` directly is not possible as it breaks architectural constraints: Classes in package `net.sf.jabref.logic` are not allowed to use any UI-related stuff. (This is also indicated by the failing test at TravisCI).

As I have not participated in the calls I'm not sure whether this was a topic. But another aspect which is critical for me is that in my opinion loading the related entries should NOT be performed upon opening an EntryEditor but at the time of switching to the "Related Entries" tab. Two reasons: 1. Efficiency on just cycling through without being interested in the related entries. 2. Privacy of our users.

Regards
Matthias

#2189 Comment 12:
Just a few additions to the comment by @matthiasgeiger (which is entirely correct): The code relating to the `SwingWorker` should move into the gui package and then reuse the implementation of the fetcher (as discussed earlier: separation of concerns). This is indicated in the failing tests.

In the calls, we did not really talk about when the fetcher should be invoked. @matthiasgeiger is correct of course: Doing this in the background for all entries would be a significant privacy invasion. It should happen when a user clicks on the related article tab (indicating his or her will to view related articles). Hence, an action that fires when the related articles tab becomes selected that triggers the `SwingWorker` would probably be best. Needless to say, the query should be sent once. There is no need to re-query for selected articles if the results are already in.

#2189 Comment 13:
Can me somebody provide help why the 2 tests are failing? I had a closer look and it seems its not directly dependent to my code. Its failing already at the imports, where i did't changed sth.
#2189 Comment 14:
@stefanfeyer  It seems like that version 1.0 of citeproc is no longer in the maven repos., they recently released 1.01. it is not related to your code. Will be fixed in #2303  
#2189 Comment 15:
Thank you for the great help you provided.
I would call this a new version. If you have comment on the code please let me know. There is nothing specific, except the BibTexParser (see comment above).
The last step now is to implement the function on our side and then adjust the request.
KR, Feyer
#2189 Comment 16:
I just had a brief look at the code and noticed one thing: the MrDlibFetcher implements the Fetcher interface, but you never use the methods provided by the interface but directly call `mdlFetcher.getRecommendationsAsHtml()`. I would strongly prefer the following architecture:

- MrDlibFetcher gets HTML response from your sever and
- calls a MrDlibParser (as discussed above) to convert the response to a list of BibEntries.
- These entries are then displayed in the `EntryEditorTabRelatedArticles` (without any reference to the original HTML).
#2189 Comment 17:
I quickly saw that some XML is parsed manually. May I ask why we implement a new format in the year 2016? Why is the bibliographic data not based on [MODS](https://en.wikipedia.org/wiki/Metadata_Object_Description_Schema) or [bibtexml](https://github.com/Zearin/BibTeXML). Although BibTEXML is still some work-in-progress, but we are open to help: https://github.com/Zearin/BibTeXML/issues/1
#2189 Comment 18:
@tobiasdiez If I see it correctly, the `performSearch` method is called and the result from MrDLib is transformed into a list of bibentries on the one hand and into an html version on the other hand. The latter is cached in the fetcher, whereas the bibtex version is returned and ignored. Imho, both results should be stored and we would be fine: Html versions can be displayed and there are the raw bibentries to back up the display.

@koppor: I fully aggree with you, but what I understand from our conversation with the MrDLib team, is that it is imperative for them to develop their own format. @stefanfeyer Please correct me if I'm wrong.
#2189 Comment 19:
@stefanfeyer So, after some internal discussion, I have some more feedback: The fetcher implementation should be stateless, meaning it should not store the results of a fetch from MrDlib in instance variables. This means that all information returned needs to be encoded in the `List<BibEntry>`, also the html you transport. For this to work, you will have to add custom bibtex fields, for instance something like `mrdlibRankedSnippet` and `mrdlibRank` to store the information you have in your `RankedSnippet` to the `BibEntry` you return. This can be accessed and displayed on the side of the GUI, which should store the `List<BibEntry>` and access the information from it. The plus side of this approach is that you will need to invoke the SAX parser only a single time and it would also fit nicely to the importer structure.
#2189 Comment 20:
Dear all, thank you very much for your feedback.

- Because it was not clear: Is changing the Interface I'm implementing only a suggestion or should I really change it? Search by String or BibEntry are both semantically correct.
- @koppor We don't use such a parser, because we deliver our recommendations not as BibTeX. 
- Storing html in a BibEntry: I exported my Mendeley database as BibTex and imported it into JabRef. Every BibTex entry had the path to the pdf stored. Are the html then stored in the BibTex like this? Do we want that? Isn't it more clear to devide this "view" aspect from the "model" aspect?


Thank you for your help,
Stefan

#2189 Comment 21:
> -    Because it was not clear: Is changing the Interface I'm implementing only a suggestion or should I really change it? Search by String or BibEntry are both semantically correct.

From the viewpoint of JabRef searching using a `BibEntry` is the better match: There is already an existing `BibEntry` which is used as a basis for a search which results in a `List<BibEntry>`. Whether only the `title`, the `doi`, or some other information is used is transparent and allows for changes in the internal implementation.  Thus, please use the `EntryBasedFetcher` as proposed by @tobiasdiez: https://github.com/JabRef/jabref/pull/2189#discussion_r88950777

*Side note: You even might consider using additional information such as a unique DOI for determing your recommendations - at least we have experienced false positives when using only a `title` at the automatic full text fetcher.*

 > - Storing html in a BibEntry: I exported my Mendeley database as BibTex and imported it into JabRef. Every BibTex entry had the path to the pdf stored. Are the html then stored in the BibTex like this? Do we want that? Isn't it more clear to devide this "view" aspect from the "model" aspect?

No. This is not the intended approach. BibTeX entries are basically a `key, value` store with arbitrary keys. Some of them are predefined (such as `author` or `title`) but you can define additional "fields" by simply calling `entry.setField("someFieldName", "someValue");` 

Thus, you should simply use such custom fields to store the HTML information: `entry.setField("MrDLibHTML", "<div>...</div>");` and the "Related Article" tab can then use the `List<BibEntry>` returned by your fetcher and simply access this field by `entry.getField("MrDLibHTML").get()`.


#2189 Comment 22:
> @koppor We don't use such a parser, because we deliver our recommendations not as BibTeX.

In the JabRef world, a parser converts a source string into a list of BibEntries. The input string does not have to be BibTeX but can be an arbitrary format. Please have a look at the `GvkFetcher` and `GvkParser` since they are very similar to what you need for MrDlib. The parser interface is a lightweight version of the Importer interface and preferable for Fetchers. 
#2189 Comment 23:
Dear JabRef Team, I implemented all requirements you stated, so I would call this a new Version. Please have a look. Thanks for your feedback in advance.
#2189 Comment 24:
When can we count with you review?
#2189 Comment 25:
@lenhard Thanks for the hint, indeed the visibility could be raised.
How could a help page look like? Is there a section in JabRef to place it, or a small question mark with a hover window? How should it be designed to fit into JabRef?
#2189 Comment 26:
@stefanfeyer When I press <kbd>F1</kbd> in JabRef, the online help opens. The first link is "Contributing". The first FAQ there is "I would like to improve the help page. What are the steps?" This links to https://github.com/JabRef/help.jabref.org/blob/gh-pages/CONTRIBUTING.md. Does that help? 😇 
#2189 Comment 27:
As an example, you can have a look at the "File -> Database properties" dialog. It has a Help button at the bottom.
#2189 Comment 28:
@stefanfeyer did you forgot to push your changes? You commented on a few remarks with "done" but I couldn't see the new code/commit. 
#2189 Comment 29:
@tobiasdiez I am implementing atm on our serverside. I will commit when that is done that we can start testing.
#2189 Comment 30:
Dear JabRef Team,
the implementation on our side is ready. JabRef can get and display related articles from our server. This version is for testing. Have fun while testing your new feature and give me feedback.

What is now missing is the recommended help page. I am currently having some hard deadlines, but I will try to make it asap.

KR, Stefan Feyer

#2189 Comment 31:
Dear JabRef Team, I resolved the most of you changes. Is there some feedback about the recommendations displayed?
The next step for me is to create the help page.

Please note, in 4 weeks my internship is ending and we should finish the project before.
#2189 Comment 32:
@stefanfeyer Sorry for the delays in the reply. All of us are under relatively heavy load at the moment.

Anyway, I just checked out your code and tested in locally. When I open the related articles tab, the expected text and paper title are displayed and the loading gif appears. However, it never finishes due to an exception. Here is the output of my error console:
```
3:09:20.866 [AWT-EventQueue-0] INFO  net.sf.jabref.logic.importer.OpenDatabase - Opening: C:\workspaces\tex\privacypatternsreview\ease2017\references-ease2017.bib
13:09:21.183 [AWT-EventQueue-0] INFO  net.sf.jabref.logic.importer.OpenDatabase - Opening: \\nas-a1\redirected$\jorglenh\Desktop\test.bib
13:09:30.325 [SwingWorker-pool-5-thread-2] ERROR net.sf.jabref.logic.importer.fetcher.MrDLibFetcher - javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
com.mashape.unirest.http.exceptions.UnirestException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:143) ~[unirest-java-1.4.9.jar:?]
	at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56) ~[unirest-java-1.4.9.jar:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:108) [main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) [main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) [main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) [main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) [?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) [?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_92]
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	... 11 more
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292) ~[?:1.8.0_92]
	at sun.security.validator.Validator.validate(Validator.java:260) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:105) ~[?:1.8.0_92]
	at org.apache.http.ssl.SSLContextBuilder$TrustManagerDelegate.checkServerTrusted(SSLContextBuilder.java:298) ~[httpcore-4.4.4.jar:4.4.4]
	at sun.security.ssl.AbstractTrustManagerWrapper.checkServerTrusted(SSLContextImpl.java:922) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	... 11 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141) ~[?:1.8.0_92]
	at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126) ~[?:1.8.0_92]
	at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292) ~[?:1.8.0_92]
	at sun.security.validator.Validator.validate(Validator.java:260) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:105) ~[?:1.8.0_92]
	at org.apache.http.ssl.SSLContextBuilder$TrustManagerDelegate.checkServerTrusted(SSLContextBuilder.java:298) ~[httpcore-4.4.4.jar:4.4.4]
	at sun.security.ssl.AbstractTrustManagerWrapper.checkServerTrusted(SSLContextImpl.java:922) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	... 11 more
13:09:30.395 [AWT-EventQueue-0] ERROR net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles - net.sf.jabref.logic.importer.FetcherException: Error while fetching from Mr.DLib
java.util.concurrent.ExecutionException: net.sf.jabref.logic.importer.FetcherException: Error while fetching from Mr.DLib
	at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.get(FutureTask.java:192) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.get(SwingWorker.java:602) ~[?:1.8.0_92]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles.lambda$requestRecommendations$1(EntryEditorTabRelatedArticles.java:131) ~[main/:?]
	at java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:335) [?:1.8.0_92]
	at java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:327) [?:1.8.0_92]
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport.firePropertyChange(SwingWorker.java:854) [?:1.8.0_92]
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport$1.run(SwingWorker.java:860) [?:1.8.0_92]
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(SwingWorker.java:832) [?:1.8.0_92]
	at sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112) [?:1.8.0_92]
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(SwingWorker.java:842) [?:1.8.0_92]
	at javax.swing.Timer.fireActionPerformed(Timer.java:313) [?:1.8.0_92]
	at javax.swing.Timer$DoPostEvent.run(Timer.java:245) [?:1.8.0_92]
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311) [?:1.8.0_92]
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756) [?:1.8.0_92]
	at java.awt.EventQueue.access$500(EventQueue.java:97) [?:1.8.0_92]
	at java.awt.EventQueue$3.run(EventQueue.java:709) [?:1.8.0_92]
	at java.awt.EventQueue$3.run(EventQueue.java:703) [?:1.8.0_92]
	at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_92]
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76) [?:1.8.0_92]
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:726) [?:1.8.0_92]
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201) [?:1.8.0_92]
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116) [?:1.8.0_92]
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105) [?:1.8.0_92]
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101) [?:1.8.0_92]
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93) [?:1.8.0_92]
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82) [?:1.8.0_92]
Caused by: net.sf.jabref.logic.importer.FetcherException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:111) ~[main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) ~[main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_92]
Caused by: com.mashape.unirest.http.exceptions.UnirestException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:143) ~[unirest-java-1.4.9.jar:?]
	at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56) ~[unirest-java-1.4.9.jar:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:108) ~[main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) ~[main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_92]
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56) ~[unirest-java-1.4.9.jar:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:108) ~[main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) ~[main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_92]
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292) ~[?:1.8.0_92]
	at sun.security.validator.Validator.validate(Validator.java:260) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:105) ~[?:1.8.0_92]
	at org.apache.http.ssl.SSLContextBuilder$TrustManagerDelegate.checkServerTrusted(SSLContextBuilder.java:298) ~[httpcore-4.4.4.jar:4.4.4]
	at sun.security.ssl.AbstractTrustManagerWrapper.checkServerTrusted(SSLContextImpl.java:922) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56) ~[unirest-java-1.4.9.jar:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:108) ~[main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) ~[main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_92]
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141) ~[?:1.8.0_92]
	at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126) ~[?:1.8.0_92]
	at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382) ~[?:1.8.0_92]
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292) ~[?:1.8.0_92]
	at sun.security.validator.Validator.validate(Validator.java:260) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229) ~[?:1.8.0_92]
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:105) ~[?:1.8.0_92]
	at org.apache.http.ssl.SSLContextBuilder$TrustManagerDelegate.checkServerTrusted(SSLContextBuilder.java:298) ~[httpcore-4.4.4.jar:4.4.4]
	at sun.security.ssl.AbstractTrustManagerWrapper.checkServerTrusted(SSLContextImpl.java:922) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491) ~[?:1.8.0_92]
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979) ~[?:1.8.0_92]
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[?:1.8.0_92]
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[?:1.8.0_92]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:394) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar:4.5.2]
	at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:138) ~[unirest-java-1.4.9.jar:?]
	at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56) ~[unirest-java-1.4.9.jar:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:108) ~[main/:?]
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:63) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:162) ~[main/:?]
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:147) ~[main/:?]
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295) ~[?:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_92]
	at javax.swing.SwingWorker.run(SwingWorker.java:334) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) ~[?:1.8.0_92]
```
It seems to me that this is a certificate issue at the server side, something that is difficult to diagnose from my side. Unfortunately, this renders your extension non-functional and is a blocker to merging.

Apart from that the merge conflicts in the language files have to be resolved as well.


#2189 Comment 33:
That's interesting, I don't get that error, and I tell him not to look for certificates but simply return yes. I will do further investigation.
#2189 Comment 34:
In my opinion, it is more important that you write tests for the fetcher instead of a detailed help page.
#2189 Comment 35:
@stefanfeyer: @tobiasdiez is right. With a simple test of the fetcher (ask for a hard coded string and verify that the result is exactly what should come back from MrDLib), we could verify via cloud testing infrastructure that the fetcher works. That would be very helpful. 

Regarding the SSL problem: You are accessing the Server from the same network as your client. Maybe this bypasses SSL somehow? This is just a wild guess, though.
#2189 Comment 36:
By the way, I also have get the same SSL handshake exception.
#2189 Comment 37:
See also https://github.com/Mr-DLib/jabref/pull/1
#2189 Comment 38:
In the code we are referencing to api-dev. So the SSL error can not be caused by the server because on this server is no SSL failure. It must be caused by the code. I will change to the URLDownloader and when this tool takes care of the SSL we should be save.
#2189 Comment 39:
Open issues as far as I can see are to work on my comments above and the following:

- [x] As far as I can tell, one has to integrate the solution http://stackoverflow.com/a/8694377/873282 in our URLDownload. I assume that one has to check with `instanceof` whether the object is an HttpsConnection and then use the code of the answer...
- [x] Please also fix merge conflicts. I think, this can be done by manually merging master.
- [x] Create test cases
- [x] Create help page -> work in progress at https://github.com/JabRef/help.jabref.org/pull/157/
#2189 Comment 40:
Regarding the SSL issue, you can extract the method https://github.com/JabRef/jabref/blob/7d8427470a98678018e11366db458397360bc77f/src/main/java/net/sf/jabref/logic/importer/fetcher/zbMATH.java#L85 to the URLDownloader and call it in the MrDlib Fetcher. But actually I would prefer if you could fix the certificate issue server side. 
#2189 Comment 41:
Final TODO List:
- [x] Move the "needsRecommendations" part into the RelatedArticleTab
- [x] Use URI builder instead of stringbuffer
- [x] Extract Parser Calss to new inner Class
- [x] move conditions together
- [x] Remove empty lines in Language file
- [x] Change to URLDownloader
- [x] Extract SSL method to URLDownloader
- [x] Please also fix merge conflicts. I think, this can be done by manually merging master.
- [x] As far as I can tell, one has to integrate the solution http://stackoverflow.com/a/8694377/873282 in our URLDownload. I assume that one has to check with instanceof whether the object is an HttpsConnection and then use the code of the answer...
- [x] Create test cases
- [ ] Create help page

So I collected what is still todo here. Please let me know if this is ok as it stands for the final changes.
#2189 Comment 42:
That is fine from my side. I'd like to add that the most critical things that would really block a merge are: 
 1. SSL error (obviously)
 2. Merge conflicts (obviously)
 3. No test at all (does not block function-wise, but there really should be at least one simple test)
#2189 Comment 43:
Do we still need this? Because it seems to work. Thought also you do the SSL stuff already in the URLDownloader.

As far as I can tell, one has to integrate the solution http://stackoverflow.com/a/8694377/873282 in our URLDownload. I assume that one has to check with instanceof whether the object is an HttpsConnection and then use the code of the answer...
#2189 Comment 44:
@stefanfeyer Just to be sure, I just tested it again and the SSL error persists. @tobiasdiez [outlined a solution above](https://github.com/JabRef/jabref/pull/2189#issuecomment-274758332). Please follow that and make sure it works. Then, we can test it again.
#2189 Comment 45:
The servers SSL is working very fine, you can check this here: 
https://www.ssllabs.com/ssltest/analyze.html?d=api-dev.mr-dlib.org

Could you please test again if the error still exists?
I requested to create a help page. I don't know if it is the right place. Please tell me where to put it when it is not suitable there.



#2189 Comment 46:
There seem to be issues with the localization. Check the output of SnapCI.

    java.lang.AssertionError: Obsolete keys found in language properties file: [Remember_these_entry_types?]
    1. CHECK IF THE KEY IS REALLY NOT USED ANYMORE
    2. REMOVE THESE FROM THE ENGLISH LANGUAGE FILE
    3. EXECUTE: gradlew localizationUpdate
     expected:<[]> but was:<[Remember_these_entry_types?]>

    java.lang.AssertionError: DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH LANGUAGE FILE
    1. PASTE THESE INTO THE ENGLISH LANGUAGE FILE
    2. EXECUTE: gradlew localizationUpdate
    [Unhandled_exception_occurred.=Unhandled_exception_occurred.] expected:<[]>

I also get

:compileJava

        query = query.replaceAll(":|'|\"|#|<|>|&|´|`|*|~|+|-", "");
                                ^

                    ^
    (see http://errorprone.info/bugpattern/InvalidPatternSyntax)

I think, the line has to read

        query = query.replaceAll(":|'|\"|#|<|>|&|´|`|\\*|~|\\+|-", "");

Reason: `*` and `+` are operators in regular expressions.


#2189 Comment 47:
No error here:

![grabbed_20170130-080150](https://cloud.githubusercontent.com/assets/1366654/22414760/64691676-e6c2-11e6-9ce5-0c35aa153a27.png)

Issues:

- [ ] Font size too large
- [ ] Recommendations totally out of scope.

Do you plan to add a button "How would you rate this recommendation?"
#2189 Comment 48:
Is it possible to get more recommendations than the 6? Maybe with a button leading to a web page of Mr.DLib?
#2189 Comment 49:
Sorry for the error. Fixed it.
"Recommendations totally out of scope." means that the recommendations don't fit to the paper? I am currently working on refinement of the recommendations. There will be improvements in the near future.

Please also note, that we are using different algorithms for the recommendations. One of them is to create a base line for comparison. so 0.1%  are just random recommendations, which is necessary for our research. 
#2189 Comment 50:
I adjusted the font size.
#2189 Comment 51:
This is weird. I just checked out the PR and I still get 
```
Opening: \\nas-a1\redirected$\jorglenh\Desktop\test.bib
Could not copy input
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
	at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509)
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914)
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1513)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)
	at net.sf.jabref.logic.net.URLDownload.openConnection(URLDownload.java:126)
	at net.sf.jabref.logic.net.URLDownload.downloadToString(URLDownload.java:153)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:83)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:53)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:179)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:166)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)
	at sun.security.validator.Validator.validate(Validator.java:260)
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491)
	... 25 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
	at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
	at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
	... 31 more

No localized message exception message defined. Falling back to getMessage().
net.sf.jabref.logic.importer.FetcherException: Problem downloading
java.util.concurrent.ExecutionException: net.sf.jabref.logic.importer.FetcherException: Problem downloading
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:192)
	at javax.swing.SwingWorker.get(SwingWorker.java:602)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles.lambda$requestRecommendations$1(EntryEditorTabRelatedArticles.java:150)
	at java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:335)
	at java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:327)
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport.firePropertyChange(SwingWorker.java:854)
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport$1.run(SwingWorker.java:860)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(SwingWorker.java:832)
	at sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(SwingWorker.java:842)
	at javax.swing.Timer.fireActionPerformed(Timer.java:313)
	at javax.swing.Timer$DoPostEvent.run(Timer.java:245)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:726)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
Caused by: net.sf.jabref.logic.importer.FetcherException: Problem downloading
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:90)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:53)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:179)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:166)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
	at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)
	at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509)
	at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)
	at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)
	at sun.security.ssl.Handshaker.process_record(Handshaker.java:914)
	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)
	at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)
	at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)
	at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:559)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1513)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)
	at net.sf.jabref.logic.net.URLDownload.openConnection(URLDownload.java:126)
	at net.sf.jabref.logic.net.URLDownload.downloadToString(URLDownload.java:153)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:83)
	... 9 more
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
	at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)
	at sun.security.validator.Validator.validate(Validator.java:260)
	at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)
	at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)
	at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)
	at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491)
	... 25 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
	at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
	at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
	at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
	... 31 more

No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
No localized message exception message defined. Falling back to getMessage().
Could not copy input
```
@koppor: How come this works for you?
#2189 Comment 52:
this is really weird. Can we somehow reproduce this SSL error? Without having it in my IDE it is hard to debug.
#2189 Comment 53:
I think the problem is that the LetsEncrypt certificate is only included in java 1.8.0.101 (according to http://stackoverflow.com/questions/34110426/does-java-support-lets-encrypt-certificates). I'm still using jdk 1.8.0.60 and thus this certificate is not trusted. 
#2189 Comment 54:
@koppor At the moment it is not possible to get more than 6 recommendations. But this will be possible in the future. I added a ticket for that in our system.
#2189 Comment 55:
@tobiasdiez Will our user facing the same problem?
#2189 Comment 56:
These to localization problems are not caused by my code. Shell I just fix them? Or will somebody miss that?

net.sf.jabref.logic.l10n.LocalizationConsistencyTest > findObsoleteLocalizationKeys FAILED
    java.lang.AssertionError: Obsolete keys found in language properties file: [Remember_these_entry_types?]
    1. CHECK IF THE KEY IS REALLY NOT USED ANYMORE
    2. REMOVE THESE FROM THE ENGLISH LANGUAGE FILE
    3. EXECUTE: gradlew localizationUpdate
     expected:<[]> but was:<[Remember_these_entry_types?]>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:834)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at net.sf.jabref.logic.l10n.LocalizationConsistencyTest.findObsoleteLocalizationKeys(LocalizationConsistencyTest.java:153)

net.sf.jabref.logic.l10n.LocalizationConsistencyTest > findMissingLocalizationKeys FAILED
    java.lang.AssertionError: DETECTED LANGUAGE KEYS WHICH ARE NOT IN THE ENGLISH LANGUAGE FILE
    1. PASTE THESE INTO THE ENGLISH LANGUAGE FILE
    2. EXECUTE: gradlew localizationUpdate
    [Unhandled_exception_occurred.=Unhandled_exception_occurred.] expected:<[]> but was:<[Unhandled_exception_occurred. (src/main/java/net/sf/jabref/gui/DialogService.java LANG)]>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:834)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at net.sf.jabref.logic.l10n.LocalizationConsistencyTest.findMissingLocalizationKeys(LocalizationConsistencyTest.java:126)
#2189 Comment 57:
Is this failure caused from me?

net.sf.jabref.gui.importer.fetcher.EntryFetchersTest > getEntryBasedFetchersReturnsAllFetcherDerivingFromEntryBasedFetcher FAILED
    java.lang.AssertionError: expected:<[class net.sf.jabref.logic.importer.fetcher.MrDLibFetcher, class net.sf.jabref.logic.importer.fetcher.DoiFetcher, class net.sf.jabref.logic.importer.fetcher.MathSciNet, class net.sf.jabref.logic.importer.fetcher.AstrophysicsDataSystem]> but was:<[class net.sf.jabref.logic.importer.fetcher.DoiFetcher, class net.sf.jabref.logic.importer.fetcher.MathSciNet, class net.sf.jabref.logic.importer.fetcher.AstrophysicsDataSystem]>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:834)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at org.junit.Assert.assertEquals(Assert.java:144)
        at net.sf.jabref.gui.importer.fetcher.EntryFetchersTest.getEntryBasedFetchersReturnsAllFetcherDerivingFromEntryBasedFetcher(EntryFetchersTest.java:52)
Xlib:  extension "RANDR" missing on display ":0".
#2189 Comment 58:
If this problem is really dependend only on the JDK/JRE version, it should
not be a problem then 101 OpenJDK should also have it since Update 1ß


2017-01-30 13:12 GMT+01:00 stefanfeyer <notifications@github.com>:

> @tobiasdiez <https://github.com/tobiasdiez> Will our user facing the same
> problem?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/2189#issuecomment-276048006>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5GQjmsR2iC9_sa8DM-ll_QxWpevQks5rXdO8gaJpZM4KebTX>
> .
>

#2189 Comment 59:
No SSL error with `java version "1.8.0_111"`. I install java using `choco install jre8 jdk8`. And I keep it updated using `choco upgrade all`
#2189 Comment 60:
Ok, I can confirm that this depends on the Java runtime. I just installed JDK 8u121 and the SSL error is gone. It is fine to require the most recent version of Java, but that means that **a lot** of users will run into this problem. Maybe we should catch `SSLHandshakeException` explicitly and if it occurs display a message in the panel that reads: "To use the feature, update Java", or something similar?

I went through my list a little with the related articles tab and sometimes I get such an exception for an entry. In this case, the related articles tab is just empty:
```
Could not copy input
java.io.FileNotFoundException: https://api-dev.mr-dlib.org/v1/documents/Windows%20Workflow%20Foundation%20(WF4)%20%20Introduction%20to%20State%20Machine%20Hands%20On%20Lab/related_documents?partner_id=jabref&app_id=jabref_desktop&app_version=*unknown*&app_lang=en
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at sun.net.www.protocol.http.HttpURLConnection$10.run(HttpURLConnection.java:1926)
	at sun.net.www.protocol.http.HttpURLConnection$10.run(HttpURLConnection.java:1921)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1920)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1490)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254)
	at net.sf.jabref.logic.net.URLDownload.downloadToString(URLDownload.java:153)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:83)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:53)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:179)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:166)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.FileNotFoundException: https://api-dev.mr-dlib.org/v1/documents/Windows%20Workflow%20Foundation%20(WF4)%20%20Introduction%20to%20State%20Machine%20Hands%20On%20Lab/related_documents?partner_id=jabref&app_id=jabref_desktop&app_version=*unknown*&app_lang=en
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1872)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)
	at net.sf.jabref.logic.net.URLDownload.openConnection(URLDownload.java:126)
	... 11 more

No localized message exception message defined. Falling back to getMessage().
net.sf.jabref.logic.importer.FetcherException: Problem downloading
java.util.concurrent.ExecutionException: net.sf.jabref.logic.importer.FetcherException: Problem downloading
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:192)
	at javax.swing.SwingWorker.get(SwingWorker.java:602)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles.lambda$requestRecommendations$1(EntryEditorTabRelatedArticles.java:150)
	at java.beans.PropertyChangeSupport.fire(PropertyChangeSupport.java:335)
	at java.beans.PropertyChangeSupport.firePropertyChange(PropertyChangeSupport.java:327)
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport.firePropertyChange(SwingWorker.java:854)
	at javax.swing.SwingWorker$SwingWorkerPropertyChangeSupport$1.run(SwingWorker.java:860)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.run(SwingWorker.java:832)
	at sun.swing.AccumulativeRunnable.run(AccumulativeRunnable.java:112)
	at javax.swing.SwingWorker$DoSubmitAccumulativeRunnable.actionPerformed(SwingWorker.java:842)
	at javax.swing.Timer.fireActionPerformed(Timer.java:313)
	at javax.swing.Timer$DoPostEvent.run(Timer.java:245)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:726)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
Caused by: net.sf.jabref.logic.importer.FetcherException: Problem downloading
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:90)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(MrDLibFetcher.java:53)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:179)
	at net.sf.jabref.gui.entryeditor.EntryEditorTabRelatedArticles$MrDLibFetcherWorker.doInBackground(EntryEditorTabRelatedArticles.java:166)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.FileNotFoundException: https://api-dev.mr-dlib.org/v1/documents/Windows%20Workflow%20Foundation%20(WF4)%20%20Introduction%20to%20State%20Machine%20Hands%20On%20Lab/related_documents?partner_id=jabref&app_id=jabref_desktop&app_version=*unknown*&app_lang=en
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at sun.net.www.protocol.http.HttpURLConnection$10.run(HttpURLConnection.java:1926)
	at sun.net.www.protocol.http.HttpURLConnection$10.run(HttpURLConnection.java:1921)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.net.www.protocol.http.HttpURLConnection.getChainedException(HttpURLConnection.java:1920)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1490)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254)
	at net.sf.jabref.logic.net.URLDownload.downloadToString(URLDownload.java:153)
	at net.sf.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(MrDLibFetcher.java:83)
	... 9 more
Caused by: java.io.FileNotFoundException: https://api-dev.mr-dlib.org/v1/documents/Windows%20Workflow%20Foundation%20(WF4)%20%20Introduction%20to%20State%20Machine%20Hands%20On%20Lab/related_documents?partner_id=jabref&app_id=jabref_desktop&app_version=*unknown*&app_lang=en
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1872)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)
	at net.sf.jabref.logic.net.URLDownload.openConnection(URLDownload.java:126)
	... 11 more
```
Also, I have to say that, similar as for @koppor, I have the feeling that there is no relation whatsoever between the articles recommended in the related articles tab and my actual entries. Honestly, if I saw these recommendations as a user I would want to turn of the feature as quickly as possible. Sorry for the harsh description, this is not meant to trash MrDLib, but this is what I would think as a user.

EDIT: Many of the recommendations for my (completely english) reference list in computer science seem to be german articles from law magazines. That is profoundly weird.
 
#2189 Comment 61:
With "Recommendations totally out of scope" I meant that the recommended papers are not fitting the area of the original paper at all. They are computer science, but not in the field of business process management or related areas.
#2189 Comment 62:
@koppor we are working on that :)
reason:
atm dev server has only access to 6 Million papers from gesis/sowiport, which is mainly social sciences. 
atm the import is running with additional 20 Million papers from the core-database. This should have been finished last year. But our server was too slow. We bought a new one and go on with it. There are still 5 Million left, but this will be finished soon. After that we will not facing this scope problem anymore.
#2189 Comment 63:
@stefanfeyer On a positive note: The replies from MrDLib come in very quickly :-)
#2189 Comment 64:
Just implement the fix suggested in https://github.com/JabRef/jabref/pull/2189#issuecomment-274758332 and it should work also under older java runtimes. And because 101 was released only last summer, I think there are a lot of users which have not yet updated to it.
#2189 Comment 65:
I implemented the fix. And reselved the errors from the test where possible. 
Is there anything left to to?

Why couldn't I add a help page? Or if that is not suitable, where to put it in the help page?
#2189 Comment 66:
I don't understand "Why couldn't I  add a help page?". Isn't https://github.com/JabRef/help.jabref.org/blob/gh-pages/CONTRIBUTING.md helpful? I would suggest adding a screenshot to https://help.jabref.org/en/EntryEditor and explain the new tab in a new section in that help file.
#2189 Comment 67:
made the adjustments. our deploy to the productions server will happen this week. then we change the url where we requesting the recommendations. Then we can go live.
#2189 Comment 68:
- [ ] Thus, we have to wait for the final URL. I'd like the URL be final
- [x] Fix failing test (localization)
#2189 Comment 69:
We are currently sitting together at JabRef and decided to merge this now :-) We will change to the new URL after the merge.

Thanks for your contribution!
#2189 Comment 70:
Thanks for the useful integration! Just a small improvement request. Is it possible to change the font used in the Related article window? The current one is really ugly. There are variations of the line widths (that appears less pronounced in the attached screenshot) and there is no antialiasing. One example is the S. Compare also the P and e of the first "Pedagogy" word.
![image](https://user-images.githubusercontent.com/865866/35098408-416a310c-fc54-11e7-9b93-eec8f17aae46.png)
It is just a minor thing, but don't encourage the use of this very useful feature.
Thanks!
mario
#2189 Comment 71:
Hi @crystalfp Thanks for your feedback, but actually JabRef is the wrong place to report this. The content of the related article tab is just HTML that we load from MrDLib. They determine how it looks like. I think it's best if you report this here: https://github.com/Mr-DLib/mdl-server

But maybe @Joeran would like to comment on this?
#2189 Comment 72:
[Done](https://github.com/Mr-DLib/mdl-server/issues/81), thanks!
mario
#2189 Comment 73:
thx, i commented in https://github.com/Mr-DLib/mdl-server/issues/81
--------------------------------------------------------------
#2188 Comment 1:
Regarding codacy: I need package-level private to enable testing. Should I put the method public accepting the downside that I make internal methods public?

#2188 Comment 2:
I agree, looks good! I'll merge.

#2188 Comment 3:
We have a File util class with renaming method

Am 24.10.2016 4:33 vorm. schrieb "Tobias Diez" notifications@github.com:

> _@tobiasdiez_ approved this pull request.
> 
> ## LGTM, just some minor remarks.
> 
> In src/main/java/net/sf/jabref/logic/autosaveandbackup/BackupManager.java
> https://github.com/JabRef/jabref/pull/2188#pullrequestreview-5380353:
> 
> > @@ -98,6 +96,13 @@ private void shutdown() {
> >          }
> >      }
> -    static Path getBackupPath(Path originalPath) {
> -        Objects.requireNonNull(originalPath.getParent());
> -        Path oldFileName = originalPath.getFileName();
> -        String newFileName = oldFileName.toString() + BACKUP_FILENAME_ENDING;
> 
> What about Path.ChangeExtension
> https://msdn.microsoft.com/en-us/library/system.io.path.changeextension(v=vs.110).aspx.
> Ahhh damn, we are in the Java world, so:
> probably return originalPath.resolveSibling(BackupEnding); (or something
> similar, but there should be a way to change the extension without
> converting to string)
> And we should probably extract it to a helper class (because its used not
> 
> ## only for autosave but also backup).
> 
> In src/test/java/net/sf/jabref/logic/autosaveandbackup/
> BackupManagerTest.java
> https://github.com/JabRef/jabref/pull/2188#pullrequestreview-5380353:
> 
> > @@ -0,0 +1,18 @@
> > +package net.sf.jabref.logic.autosaveandbackup;
> > +
> > +import java.nio.file.Path;
> > +import java.nio.file.Paths;
> > +
> > +import org.junit.Assert;
> > +import org.junit.Test;
> > +
> > +public class BackupManagerTest {
> > +
> > -    @Test
> > -    public void testBackupFileNameGenerationWithLinuxPath() {
> 
> Please follow the naming convention for tests as outlined in the wiki 😸
> That is, no ̀ test` prefix and the test name should state the desired
> outcome (i.e. getBackupPathAppendsSavExtension)
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/2188#pullrequestreview-5380353,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AATi5GHJes3_98ke94yGMm_e9c0EO6eQks5q3BkJgaJpZM4KeOgt
> .

#2188 Comment 4:
I added the method there. This feature does not renaming (with two given
names), but merely creates a new name.

--------------------------------------------------------------
#2187 Comment 1:
You don't need to create a new PR - you can do a force push to overwrite something. No need to create new pull requests. So, you could have force-pushed your new local changes to the existing "origin" branch and no one would have noted. 😇 We can have a private chat about that in case you want 😄 

#2187 Comment 2:
Please set label "ready-for-review". Thanks.

#2187 Comment 3:
I have tested your PR locally and it works for me. I do not quite like the fact that we are adding code to this huge class, but I do not see a straight-forward alternative right now. If you have an idea how we can extract all the actions out of the `EntryEditor` class, a follow-up PR would be very welcome :)

Since you are modifying it, could you remove the `public` modifier of `StoreFieldAction`. This is not really needed, as far as I can see.

Finally, we should get the travis build to work before merging. The failing tests should be fixed if you merge the current master into your branch.

When these things are done, the PR should be good to go.

#2187 Comment 4:
Ok, looks good for me. Let us wait for a second developer to double check and merge!

#2187 Comment 5:
LGTM, too!

2016-10-25 12:53 GMT+02:00 Jörg Lenhard notifications@github.com:

> Ok, looks good for me. Let us wait for a second developer to double check
> and merge!
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/2187#issuecomment-256002809, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5PE1JZtDm_xB2mE-wRbB8psrJF96ks5q3d-7gaJpZM4KeFaa
> .

#2187 Comment 6:
So, we have two developers who tested the code. Since @bartsch-dev wants to fix the comments in another PR, this one can be merged, which I will do right away.

@grimes2 Once again, thank you for your contribution!

#2187 Comment 7:
I refactored them (and some more) in https://github.com/JabRef/jabref/pull/2199.

--------------------------------------------------------------
#2186 Comment 1:
The idea is good. Shouldn't the `if`s be `else if`s?

Further date/time rework is discussed at https://github.com/koppor/jabref/issues/130.

Suggestion: you could elaborate a bit in the PR description. If one reads the notifications via mail, one cannot directly see the diff and get the idea.

#2186 Comment 2:
I'm not sure, but `else if` s were eventually skipped.

#2186 Comment 3:
Please set label "ready-for-review". Thanks.

#2186 Comment 4:
Tested locally and looks good! It is also interesting to see that we have not quite listed all BibLaTeX fields.

Very minor issue: Could you add a changelog entry? After all something visible has changed (New suggestions in certain fields in the entry editor). Then I would merge.

#2186 Comment 5:
Could you also check the biblatex mode? editora, editorb, editorc, translator, ...?

#2186 Comment 6:
@koppor What exactly do you mean? Those fields (except URL) are only visible in the entry editor in biblatex mode anyway.

#2186 Comment 7:
Everything ok with editora, editorb... It only makes sense to define a field name constant for this fields, if you want to use the constant somewhere else in the code.

#2186 Comment 8:
@grimes2 @koppor Excellent hint! And also something additional to do in this PR! 

Please have a look at `net.sf.jabref.model.entry.BibLatexEntryTypes`. Reuse your newly introduced field name constants in the definition of the entry types (where the string representations are still used directly). Also, you could introduce field name constants for every field name that is still used explicitly as string in the type definitions. This is, I think, what @koppor suggests. It would improve the types, since we would have more static checking.

#2186 Comment 9:
The replacement looks good! 

Now, one more refactoring (and apologies for all the requests). After looking at the code a second time, I think @koppor is correct in that this should be `if else` blocks. After all, if `field.equals(FieldName.YEAR)` is true, `field.equals(FieldName.DATE)` can never be true. Furthermore, the code blocks should be reversed, e.g. `FieldName.YEAR.equals(field)`. This has the same outcome, but we are very sure that `FieldName.YEAR` will never be null, whereas `field` might be just be for some buggy reason. The code would be a little more stable if equals is invoked on `FieldName.YEAR` (no NullPointerException). Finally, the whole prompt selection could be extracted into a new method `private String getPrompt()` or a similar name. This would make `setupPanel` a little less complex.

Thanks for your patience with our requests, we are just trying to get the best quality code :-) 

#2186 Comment 10:
why not just `switch(field)` instead of if + else?

After @lenhard's comments are implemented 👍 for merge.

#2186 Comment 11:
@tobiasdiez Because switches are ugly and if-elseifs are beautiful :-P

Let us leave that open for @grimes2 

#2186 Comment 12:
Code looks good to me! 

@lenhard  Switches are compiled to more efficient bytecode and instead of chained if/else ifs they are actually better readable:
http://www.artima.com/underthehood/flowP.html
http://stackoverflow.com/questions/6705955/why-switch-is-faster-than-if

#2186 Comment 13:
The general form of the ISSN code is NNNN-NNNC (Wikipedia). Should I add this form as a suggestion to the ISSN field?

#2186 Comment 14:
I think a Suggestion for ISSN is not necessary - there is only one existing Format. And if you search for the ISSN of Journal it should be found  in this format.

#2186 Comment 15:
@Siedlerchr: Switches are the source of many infamous switch-fall-through bugs (Apple's certificate validation system for example, if I remember it correctly), which is why I try to avoid them. To me, a potential increase in maintainability beats a potential improvement in performance any day. But anyway, there is not really a point in arguing about this.

To me the current solution is fine and I am merging it now. @grimes2 Thank you very much for your contribution!

#2186 Comment 16:
Sorry for the late reply. I mean that at "Optional fields 2", all fields containing persons should also contain such a help text, shouldn't they?

![grabbed_20161027-121900](https://cloud.githubusercontent.com/assets/1366654/19763738/c182c154-9c3f-11e6-824e-af599b0e6395.png)

At editor, it works (even though, DOI could also have a help text to prevent users keying in the `https://dx.doi.org/` prefix)

![grabbed_20161027-122043](https://cloud.githubusercontent.com/assets/1366654/19763748/cf1ea7ec-9c3f-11e6-9b95-14845a8e542c.png)

#2186 Comment 17:
@bartsch-dev  refactors the suggestion switch in EntryEditorTab (#2199). He can easily add further cases. In DOI field is the DOI-Resolver `https://dx.doi.org/` not allowed? The Standard DOI is in the form`10.ORGANISATION/ID`

--------------------------------------------------------------
--------------------------------------------------------------
#2179 Comment 1:
The version 3.6 does not have exactly the same bug. But the old code was also buggy, because in a short test I run in severe freezes. I've removed CHANGELOG entry.

--------------------------------------------------------------
#2178 Comment 1:
I give my 👍 with @tobiasdiez changes. Go for the merge then.

--------------------------------------------------------------
#2175 Comment 1:
LGTM.

--------------------------------------------------------------
#2174 Comment 1:
Superseeded by #2175

--------------------------------------------------------------
#2170 Comment 1:
Is it possible to have a new line in the connection dialog instead?

When I connect to a shared DB, the last line should be:

```
[ ] Autosave the file to ________________ [browse]
```

If checked, Autosave is active, if not then not.

#2170 Comment 2:
Please follow up https://github.com/JabRef/jabref/pull/2217.

--------------------------------------------------------------
#2169 Comment 1:
`#10` are really strange field values. But this is a discussion for a post cleanup. For now, this hotfix is good.

--------------------------------------------------------------
#2167 Comment 1:
@Siedlerchr: Changes were reverted 😄 

--------------------------------------------------------------
#2165 Comment 1:
Have you filed an upstream issue? You know, including minimal example. Similar to @obraliar did it for pgjdb-ng (https://github.com/obraliar/pgjdbc-ng-test#pgjdbc-ng-casing-test).

Maybe you also dived into the CSL library and could propose a fix for the lib (PR at their repo)

#2165 Comment 2:
Is it possible to add a test case based on the example of https://github.com/koppor/jabref/issues/174. Further, a test case covering the exception branch should be made. Maybe using an invalid latex sequene in the entry helps to generate the exception?

Besides these minor comments: LGTM.

#2165 Comment 3:
_Sadly_ I cannot reproduce another case where the `TokenMgrError` is thrown.

I created an issue in the repository of the library: https://github.com/michel-kraemer/citeproc-java/issues/30.

#2165 Comment 4:
OK for me. - Either we keep this fix or include `1.0.0-SNAPSHOT` as version of the library (see https://github.com/michel-kraemer/citeproc-java/issues/30#issuecomment-254053018).

#2165 Comment 5:
If I got this right, just use the SNAPSHOT version for now. Is a more long term solution using the fixed version instead of monkey-patching it?

#2165 Comment 6:
Used the Snapshot which gets rid of the Rhino dependency as well.

--------------------------------------------------------------
#2164 Comment 1:
Most of the apps on the Windows Start Screen (Win 10) have a white foreground and a colorful background. Can we also create an inverted image of the new logo to adhere to this style? (Or after skimming through the [guidelines](https://msdn.microsoft.com/windows/uwp/controls-and-patterns/tiles-and-notifications-app-assets) I think a white Icon with transparent background is needed)

#2164 Comment 2:
What is the status here? It would be cool to have the new icon soon :-)
#2164 Comment 3:
Basically it's ready to merge - further improvement would be to create a file-icon but this is just a nice-to-have feature.

As I don't have that much time in the next weeks I'll merge the current status (after rebasing and fixing the resulting errors due to the package changes :wink:)
#2164 Comment 4:
Okay... should be ready-for-review from my side..

@chochreiner would be cool if you could check whether the installation on a Mac is possible successfully and showing the new logo. Thanks!

Builds are available at http://builds.jabref.org/newLogo/
#2164 Comment 5:
works fine 👍 
--------------------------------------------------------------
#2163 Comment 1:
:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/net/sf/jabref/gui/worker/CitationStyleWorker.java:6: 'javax.swing.JEditorPane' should be separated from previous imports. [ImportOrder]

#2163 Comment 2:
Thanks for your contribution!

What @stefan-kolb is telling you, that the tests are currently failing as you do not respect the order of the import we defined in your changed classes.

Please check https://github.com/JabRef/jabref/wiki/Guidelines-for-setting-up-a-local-workspace#get-an-ide-in-place and/or run `gradlew eclipse` to adjust the settings of IntelliJ/eclipse to order the imports correctly.

#2163 Comment 3:
Thanks @stefan-kolb and @matthiasgeiger. I forgot to run the checks before submitting.

#2163 Comment 4:
No worries @shitikanth 😄 These check style things are a little bit nitpicky 😉 

--------------------------------------------------------------
#2162 Comment 1:
Iconbar icons for multi value specialfields are too small. (sorry no time to find the cause in the code)

#2162 Comment 2:
After a night of almost enough sleep, I have some more ideas and will push up the localization upwards to get the essence into model/logic. I'll readd the ready-for-review when I am done.

#2162 Comment 3:
So, now there is a much better structure. `SpecialFieldValue` is also an enum now, the absolute most important information has moved into model, switches are done based on enums, the localization is in logic, and the remaining stuff in gui.

The next thing for a new PR (this time for real) is a rewriting of `SpecialFieldUtil` and moving that logic into keyword synchronization. 

When all checkstyle issues are taken care of, the PR would be ready to go from my side.

#2162 Comment 4:
Now that the army of fridges and web cams has stopped trying to bring down the internet and our build system is running again, I can finally certify that this works.

So, thanks to the excellent review by @tobiasdiez this has been a huge improvement of the special fields feature. `SpecialField` and `SpecialFieldValue` are now in model and are limited to the absolute essence. All gui-related aspects are moved into `ViewModel` classes in the gui.

The only thing that remains now is the refactoring of the deprecated `SpecialFieldUtils` class and the moving of its methods into `BibEntry`. This, however, cannot easily be achieved, since it depends on `UpdateField`, which is in logic and depends on preferences. If this class stays in logic, then so do the special field update methods. Alternatively, it would be possible to move the methods from `SpecialFieldUtils to`UpdateField`, but I do not really see the point in this. We might consider restructuring the`UpdateField` field class, but in the end this is not the most pressing issue we have.

The refactoring/rewriting of `SpecialFieldUtils` requires more discussion in the group and can be done separate from the changes in this PR. Hence, I consider this PR as finished and it is once again ready for review. 

#2162 Comment 5:
@JabRef/developers This PR is reviewable / mergeable. To avoid having to fix merge conflicts that build up over time, I would like to get this into master. 

I will merge this in, if no one objects within the next seven days.

#2162 Comment 6:
I trust your skills, go for it!

#2162 Comment 7:
I tested it locally and it works with keyword sync and without keyword sync. I am OK for merge and would address my minor comments (mostly regarding test coverage) later.

#2162 Comment 8:
It would be nice if there was a howto to add a new special field.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2158 Comment 1:
Can't reproduce that here (with an older dev version) But the code looks okay.

#2158 Comment 2:
LGTM

--------------------------------------------------------------
#2155 Comment 1:
Thanks for your contribution! All tests are green, so I will merge this in.
@mlep  FYI

#2155 Comment 2:
@koji33 Thanks!
FYI, there are a few untranslated keys hidden in `JabRef_ja.properties`:

```
Citation_Style=
Current_Preview=
Bad_character_inside_entry=
Error_while_generating_citation_style=
Preview_style_changed_to\:_%0=
Next_preview_layout=
Previous_preview_layout=
[...]
Search_in_all_open_databases=
[...]
Shared_entry_is_no_longer_present=
[...]
You_can_restore_the_entry_using_the_"Undo"_operation.=
[...]
You_are_already_connected_to_a_database_using_entered_connection_details.=
```

--------------------------------------------------------------
#2154 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#2153 Comment 1:
Looks good! Would it make sense to store the location to the preferences so it is consistent between sessions?

#2153 Comment 2:
Yes, I think @oscargus is right and it make sense to store this in the preferences (we already have something similar in place for import/export of bib files. I think it is called `working directory`). Please also add a changelog entry. 

#2153 Comment 3:
I've stored it now in the preferences and added a changelog entry.

--------------------------------------------------------------
#2152 Comment 1:
Thanks for the follow-up!

--------------------------------------------------------------
#2151 Comment 1:
Tested it  manually: works. Besides the minor question: LGTM.

--------------------------------------------------------------
#2150 Comment 1:
Could you also treat the dialog which appears when dropping on an entry in the entry table:

![grabbed_20161011-040244](https://cloud.githubusercontent.com/assets/1366654/19256474/a1c9fdc6-8f67-11e6-997d-ed8b95bff870.png)

#2150 Comment 2:
Apart from my question: LGTM :+1:

#2150 Comment 3:
I also added the found entries to the gerneral pdf import dialog and updated the description of this pr.

#2150 Comment 4:
Please push and do not include 2f3c47fde08ded07a4c6ebc as this seems to be from another PR.

![grabbed_20161011-182013](https://cloud.githubusercontent.com/assets/1366654/19278900/5da635f6-8fdf-11e6-8045-676792571b5e.png)

#2150 Comment 5:
Sry I guess I forgot to push...
The commit history looks good in my opinion. Here I can only see the two commits I made and all the changes shown in this pr are from me.

#2150 Comment 6:
Looks good!

Would it make sense to show the resulting entry independent of which option is selected in the "Import metadata from PDF" dialog? (The heading of the source box needs to be changed in that case.)

#2150 Comment 7:
@oscargus what do you mean by that? The entry from the XMP metadata will always be shown if an entry is found, regardless of what is selected. The "XMP-metadata" section is only hidden if no entry has been found.

#2150 Comment 8:
I'm thinking that it can always be shown and it shows whatever entry is generated. For a blank it may be:

```
@misc{,
file = {...},
}
```

and so on. In this way, the user knows what the resulting entry will be.

No idea how easy it is (i.e., when the actual entry is created and therefore if one can get hold of it to show) and if it should be in this PR. Just seemed like a nice extension to the general idea of this PR.

#2150 Comment 9:
I get the entries from the `XMPUtil.readXMP(..)` which can also return an empty list if it didn't find any entry. So I guess I would have to adjust this method to get a "blank" entry. Does it really make sense to create an empty entry?

#2150 Comment 10:
Not in that case. I'm more thinking if you select one of the other import
cases with the radio buttons (blank with link, content). Not sure how to
handle all possible outcomes though. What happens if you select XMP and
there is no XMP data? Anything gets added?

You can leave it for now, if you want to, as I do not know how realistic it
is to implement it.

#2150 Comment 11:
XMP can not be selected if there is no xmp metadata. :)

On Oct 11, 2016, 21:30, at 21:30, Oscar Gustafsson notifications@github.com wrote:

> Not in that case. I'm more thinking if you select one of the other
> import
> cases with the radio buttons (blank with link, content). Not sure how
> to
> handle all possible outcomes though. What happens if you select XMP and
> there is no XMP data? Anything gets added?
> 
> You can leave it for now, if you want to, as I do not know how
> realistic it
> is to implement it.
> 
> ## 
> 
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/2150#issuecomment-253019944

#2150 Comment 12:
OK! Then that part is solved. :-)

--------------------------------------------------------------
#2149 Comment 1:
LGTM. No CHANGELOG required for this minor change.

--------------------------------------------------------------
#2147 Comment 1:
I think, it's difficult to achieve the same effect as html5's placeholders:

There, when clicked in an empty field, the placeholder text remains in light gray. As soon as a key is pressed, the placeholder disappears.

Fun fact: If the focus is put away from JabRef, the text field is displayed as I wish - besides the missing cursor: 
![grabbed_20161011-042036](https://cloud.githubusercontent.com/assets/1366654/19256730/1296a0fc-8f6a-11e6-815e-83af757a0bde.png)

Should also be put for the field `editor`.

Other than that: LGTM, - I assume that before merge, all other required fields also have to get placeholders, This can possibly done by others more familiar with bib(la)tex if the developers agree on this concept.

#2147 Comment 2:
@koppor  This can be achieved with a kind of Custom Component:
http://stackoverflow.com/questions/1738966/java-jtextfield-with-input-hint

#2147 Comment 3:
@Siedlerchr thats the way it's currently implemented: Showing/Hiding the hint on FocusGained/FocusLost.

But of course, it is also possible to wait for a "KeyPressedEvent" to delete the placeholder. 
However, I think using "isEmpty()" will no longer work, but a flag indicating whether there was an edit (i.e., a key has been pressed) will be necessary.

#2147 Comment 4:
The solution to use [WebLookAndFeel](https://github.com/mgarin/weblaf) (http://stackoverflow.com/a/30782629/873282) also looks promising ( `setInptPrompt`), but the license of that library is GPL 😟 

#2147 Comment 5:
Can't just the simple solution using `setText()` and `getText().equals(promptText)` be used? http://stackoverflow.com/a/20200870/873282. Maybe with a combination of "selectAll()" when entering the field so that the users can directly start typing?

#2147 Comment 6:
Using `setText` will save the text to the BibTeX source and  the text will apear in the fields of the maintable. I guess this is not desired. 

On Oct 11, 2016, 09:32, at 09:32, Oliver Kopp notifications@github.com wrote:

> Can't just the simple solution using `setText()` and
> `getText().equals(promptText)` be used?
> http://stackoverflow.com/a/20200870/873282
> 
> ## 
> 
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/2147#issuecomment-252834953

#2147 Comment 7:
@boceckts Are you sure that a `setText(...)` will already trigger an edit of the `BibEntry`? I thought this is performed upon changing the active entry editor textfield...

#2147 Comment 8:
Only when the text field gets focus. 😇 

Could you try at the JavaFX branch? The solution http://stackoverflow.com/a/29946224/873282 looks promising.

```
`.text-field {
    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
}
.text-field:focused {
    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
}`
```

and add the 'promptText' entry in fxml file:

```
<TextField fx:id="XY_Id" promptText="First name">
```

No need to recode the whole tabbing, just a small test and if it works, we can decide to postpone a full implementation until javafx is our main UI technology.

#2147 Comment 9:
I will give it a try. And yes I think it trigerres when the field loses it's focus. 

On Oct 11, 2016, 09:40, at 09:40, Oliver Kopp notifications@github.com wrote:

> Only when the text field gets focus. 😇 
> 
> Could you try at the JavaFX branch? The solution
> http://stackoverflow.com/a/29946224/873282 looks promising.
> 
>    `.text-field {
>       -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
>    }
>    .text-field:focused {
>       -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
>    }`
> 
> and add the 'promptText' entry in fxml file:
> 
>    <TextField fx:id="XY_Id" promptText="First name">
> 
> No need to recode the whole tabbing, just a small test and if it works,
> we can decide to postpone a full implementation until javafx is our
> main UI technology.
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/2147#issuecomment-252836247

#2147 Comment 10:
I changed the behaviour so that the placeholder will always be displayed when the content of the text component is empty. This also means that the "search..." string will also be displayed when nothing is typed even when the search field is focused. I also renamed the classes to `JTextAreaWithPlaceholder` and `JTextFieldWithPlaceholder`. I also included the "Editor" field to display the same placeholder.

As @koppor mentioned, JavaFX TextField element has already a palceholder attribute which worked for me as you would expected. (Same as html5)

#2147 Comment 11:
This is not really working on `master`, is it?

#2147 Comment 12:
@matthiasgeiger what do you mean, what exactly does not work? Is there an exception? I tested it on the current masters branch it works as expected...

#2147 Comment 13:
Okay... you are right. Sorry, I tried the last build from https://builds.jabref.org/master which are currently outdated 😞 

--------------------------------------------------------------
#2145 Comment 1:
Pro:
- more convenience for the users

Con
- We have to update the deep links for each release
- The users won't see the welcome page of FossHub any more. This is different to sourceforge - there, a "deep" link leads to a landing page, too: https://sourceforge.net/projects/jabref/files/v3.6/JabRef_windows_3_6.exe/download
- We have to implement an operating system detection

--------------------------------------------------------------
#2141 Comment 1:
I just provided the comment on the unclear method - I think, @stefan-kolb can approve that.

The static method for `accept` feels unusual as we want to avoid static methods. However, I can live with that.

Other than that: LGTM

#2141 Comment 2:
As I added the if-statement (kept the comment though, as described above), I merge this now.

--------------------------------------------------------------
--------------------------------------------------------------
#2139 Comment 1:
I hijacked this PR now in #2414, just to move onwards and get the contribution here into master. All commits made here are appropriately preserved.
--------------------------------------------------------------
#2138 Comment 1:
LGTM! - Maybe, it's easy for you to fix https://github.com/koppor/jabref/issues/2, too.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2131 Comment 1:
I tested it manually and LGTM! I really like this feature :-) This makes JabRef look much more like an IDE.

I only hope that all the shortcuts actually work ;-)

#2131 Comment 2:
Besides the micro comment: LGTM!

--------------------------------------------------------------
#2129 Comment 1:
I tested this locally and LGTM!

#2129 Comment 2:
Will also fix https://github.com/JabRef/jabref/issues/2142.

#2129 Comment 3:
This potentially also fixes https://github.com/JabRef/jabref/issues/1938, I think.

--------------------------------------------------------------
--------------------------------------------------------------
#2126 Comment 1:
Would integrationTest (GUITests.java?) be possible? Just 15 Mins checking.
If not, leave them aside 😇

#2126 Comment 2:
Does this lead to that the database is automatically saved if editing a field?

#2126 Comment 3:
The database is saved automatically by
- closing entry editor
- changing the entry editor tab
- changing the entry

Invalid content is signalized by an error message.

--------------------------------------------------------------
#2125 Comment 1:
I have tested this locally and can reproduce that your changes fix the bug. Since it is only about five lines, I think it is save if I merge this even without a second review.

Thanks for your contribution!

#2125 Comment 2:
Since this commit there were problems with the field focus.
Steps to reproduce:
- Create a new database
- Create a new entry
- Change one field like `author`
- Click on another field like `title`

--> The `title` field does **not** request the focus as before.

(discovered using `git bisect`)

#2125 Comment 3:
Bug mentioned by @obraliar is fixed by https://github.com/JabRef/jabref/pull/2138. 

--------------------------------------------------------------
#2124 Comment 1:
LGTM, too! Merge it in

--------------------------------------------------------------
#2122 Comment 1:
LGTM.
Thanks for your contribution 😃 

--------------------------------------------------------------
#2121 Comment 1:
@tobiasdiez One for you to approve?

#2121 Comment 2:
So the problem is that the test resources are not copied on build and thus the tests don't found the test files? The gradle job does work (+2 % code coverage). If I understand the solution correctly, then a normal build in intellij or eclipse still don't copy the resource files and thus locally the importer tests are still not performed. Is this right? I have no idea about our build script, but is there no other way to always copy the resources (the language files are automatically copied, right?).

#2121 Comment 3:
@tobiasdiez  If you run the test locally in Eclipse it executed all parameterized tests. However, only when executed via intellij or gradle it did not locate the correct directory. Thus no tests files were found.
See here for details: https://github.com/JabRef/jabref/issues/2050

#2121 Comment 4:
Okay, I would say I merge it in! 

--------------------------------------------------------------
--------------------------------------------------------------
#2118 Comment 1:
I have not tested it, but what are the implacations of this? 

If I open a bib-File in JabRef, do some changes and then decide to discard all changes since opening the database. Is this still possible?

_(While this is a rather obscure use case for normal users, this is exactly my approach when trying to reproduce bugs or checking changes made in code. So I should know whether I have to change my workflow in order not to "destroy" some files...)_

#2118 Comment 2:
@matthiasgeiger Thanks for the objection. For the case to discard all changes while _Autosave_ is enabled the _Undo_ operation could be used gradually as _Undo_ and _Redo_ are also supported by this feature.

An idea is to add an "_Undo all_" operation (possibly a new button next to the existing _Undo_ button) which could recover the state the file was opened with. Currently I can not judge whether it's worth to do this but I could open a new issue or PR for this if desired.

#2118 Comment 3:
@obraliar Thanks for the explanation!
After a quick look at the code it seems that you have removed the old functionality to autosave after a given time interval. Right? 

I'm not sure whether we'll make our users happy with this changes. 

I know that this feature is inspired by the way IntelliJ is working, but using IntelliJ the files modified are a) mostly under version control, b) IntelliJ also has a good local history to quickly revert to a specific state and c) the undo/redo functionality is working in all cases. 

I don't think that we can assume a) for (the majority of) our  users, b) is not there in JabRef and I'm not sure whether c) is really given...

@JabRef/developers WDYT?

#2118 Comment 4:
My 2 cents (not from a developer), but from a user: As a User I do not like the software to change if there is no obvious gain. Here, the change could be detrimental since I am used to save after I am happy with my changes.
Instead of an "new autosave", I may have preferred this work to be an "autobackup" (so that I do not lose anything even in case of a crash, but I can still decide when the changes are worth saving).
Sorry for not taking part in the discussion of the related issue.

#2118 Comment 5:
Well, looking at #344 I would expect that the autosave is disabled by default and can be enabled by the user. As long as this is the case, I do not see too much of a problem, since the workflow of most users would not be disturbed. Enabling it by default would be problematic and I would oppose this strongly. Speaking for myself, I want to be in control when the save happens (and I do not really like the IntellJ feature too much anyway).

Regarding dropping or keeping the time-based autosave, I am rather agnostic.

#2118 Comment 6:
- [ ] Instead of removing the old "Autosave", could you rename it to "backup" and run it each 5 minutes. **Without** any user configuration. This is consistent to other programs such as Word.

#2118 Comment 7:
- [ ] The old preference should **not** be reused, just a new key. Reason: the old "Autosave" is more a "Backup" functionality.

#2118 Comment 8:
- [x] Please rewrite https://help.jabref.org/en/Autosave. The "new" backup functionality should be mentioned elsewhere.

#2118 Comment 9:
Basically, the old autosave was no autosave since it only created the backup file. Backup file creation can be done as is, but without the user having a choice about it. So the old preferences can be removed.

The real autosave implemented here is really new and should base on a new preference option, which is disabled by default.

#2118 Comment 10:
@koppor I think it will make sense for autosave and backup to be described in the same help file.

#2118 Comment 11:
Yes,  @mlep. Especially as the old backup functionality was named "Autosave" ;-) So it must be made clear that the functionality is now enabled by default (and can not be disabled) and the new functionality is now a real autosave affecting the actual bib-file.

#2118 Comment 12:
Thanks for the discussion! Here comes the clarification & short summary:
- The **old** autosave functionality has been fully removed due to conceptual errors and unclean code.
- A **new** autosave functionality (which is now **disabled** by default) has been implemented for _local_ and _shared_ databases (see the description on the top).
- A **new** backup & recover functionality (which runs continuously without users influence) has also been implemented for _local_ databases. This one is also event based, while using a separate `.swp` (swap) file for the backup.
- The help file from https://github.com/JabRef/help.jabref.org/pull/108 now only contains helping contents related to the **new** autosave feature including a clarification (see https://github.com/JabRef/help.jabref.org/pull/108/commits/c8bdbe4e2944031835cb3879748bbebec1a1fc27).

For my part, this feature is ready.

#2118 Comment 13:
I'd say move `autosave` to `logic.autosave` and `BibDatabaseContextChangedEvent` to `model.database.event`.

#2118 Comment 14:
@tobiasdiez `databaseID` has to be there, as `BibtexParser` is only working on `BibDatabase` while not having a context.

#2118 Comment 15:
Tested it locally and works good.

#2118 Comment 16:
Went through with @obraliar and we made the fixes in a pair-pgramming style. LGTM. An UI update on the autosave of shared database feature will coming to make it more visible to the users.

#2118 Comment 17:
The more test cases, the better. I would not remove any test file to ensure
high test coverage.

A DBID is uncommon, therefore I would create a second complex.bib.

If we want, we can do a generation of all variants of compley.bib (with
encoding info, without, with special fields, without, with old groups, with
new grouos, ...) and check them all.

Currently, complex.bib is not written with a recent JabRef version (casing
at the entry types is wrong).

#2118 Comment 18:
The roundtrip tests only work for the complex.bib and thus I would just add everything in this file. And for this particular test, there is no reason to have a special test file instead of creating the input directly as a string in the test method.

--------------------------------------------------------------
#2116 Comment 1:
Just one thing about I have thought. Would it be possible to "create" the other fields tab everytime, but not showing (visible=false)  if it is empty ? 
Would that work, too?

#2116 Comment 2:
Do you mean, that the other fields tab is grayed out (inactive)?

#2116 Comment 3:
Yeah kind of. But  when thinking again about it, graying out is a bad idea. Leave it empty, All fine. I just had the idea it could be complete hidden as it was before.

#2116 Comment 4:
My current feeling is that always shown and with the text "no other fields
found" would be the most intuitive.

Double check: If I add a field "realotherfield" at the bibtex source, the
content of the other tab should show this field.

#2116 Comment 5:
Other fields tab is not updated after adding an other field to source. This is not surprising, because changing the tab in entry editor does not instanciate the EntryEditor object. You can choose another entry and go back to rebuild the Entry Editor.

#2116 Comment 6:
I found an alternative solution. I have added an empty field "otherfield" to every other fields tab. So the tab is never empty. The advantage is, that it's possible to add a (custom) field to the source easily. This field can be renamed in the source panel. Because other fields are ignored by bibliography styles, personal notes or annotations can be added. Please set label "ready-for-review". Thanks.

#2116 Comment 7:
Imho, I only want to see the other field tab if there are other fields.

#2116 Comment 8:
In the devcall, we discussed that this is not an ideal solution and we should really work on the other fields tab being handled correctly.

--------------------------------------------------------------
#2114 Comment 1:
I have tested it and can confirm that it works. Removing the local shortcut is fine, this was certainly the relic of some migration. Since it is not too much in size, there is no need for a second review and I'll merge right away.

@grimes2 Good job, as always :-)

--------------------------------------------------------------
#2113 Comment 1:
As a quick fix this seems to be ok. Two remarks:
- Are all other fields always not null (e.g. JournalIssue ?)
- Can we change the Journal class to return optionals instead of null?

Also adding a test would be nice :)

#2113 Comment 2:
@tobiasdiez  I will check it if Journal issue is also possible  null from the annotation in the Journal class
Changing the code of Journal is not possible because it is autogenerated from the jaxb stuff on base of the xml class 

But I wanted to add a test, too

#2113 Comment 3:
In theory, all fields can be null. JAXB will take whatever is there and will set null for everything that it cannot find. Ultimately, null values depend on how consistent the data from medline are, and I guess we should be rather conservative in our assumptions...

There is already a fair amount of null checking code in the importer and it is quite hard to see what could be missing. @Siedlerchr We will rely on your knowledge and intuition here, but of course it is easy to miss something and then we will have to fix the error when someone opens an issue.

Apart from that I second @tobiasdiez: Please add a test and this is ready to go!

#2113 Comment 4:
Apparently there is a way to let JAXB convert nulls to empty optionals http://stackoverflow.com/a/23113540/873661. Not sure how complicated this is versus just checking for null.

#2113 Comment 5:
@tobiasdiez If I understand it correctly, this solution is not feasible for us. It requires changing the annotations in the Java class and in our case this Java class is generated from an XSD.

Apart from that I am always happy when we can avoid that darn Optional and do a good ol' null check ;-D

#2113 Comment 6:
Apart from codecov having problems with parameterizest test, all works

--------------------------------------------------------------
#2112 Comment 1:
I think your problem with the failing test couuld be due to the renaming of the DBMSSynchronizerTest.java
There was a case change of the test name. At least I had a similar problem a while ago on Win.

#2112 Comment 2:
Thanks for the review. I addressed all your remarks and hopefully the build now runs through without problems.

#2112 Comment 3:
Regarding the failing tests: When you log in to Travis-CI and check the build, you can access the raw log.
In your case it showed:

```

Formatting ./build/test-results/databaseTest/TEST-net.sf.jabref.shared.DBMSSynchronizerTest.xml
=====================================================
Testsuite: net.sf.jabref.shared.DBMSSynchronizerTest
Tests run: 16, Failures: 2, Errors: 0, Time elapsed: 2.522 sec
--------- ----------- ---------
Testcase: testMetaDataChangedEventListener[Test with PostgreSQL database system] took 0.209 FAILURE java.lang.AssertionError: expected:<{databaseType=bibtex;}> but was:<{}> java.lang.AssertionError
java.lang.AssertionError: expected:<{databaseType=bibtex;}> but was:<{}>

    at net.sf.jabref.shared.DBMSSynchronizerTest.testMetaDataChangedEventListener(DBMSSynchronizerTest.java:134)
```

#2112 Comment 4:
There is also an error which seems to be related to your changes:

```

Oct 04, 2016 6:04:34 PM com.google.common.eventbus.EventBus$LoggingHandler handleException
SEVERE: Exception thrown by subscriber method listen(net.sf.jabref.model.metadata.event.MetaDataChangedEvent) on subscriber net.sf.jabref.shared.DBMSSynchronizer@5d506d49 when dispatching event: net.sf.jabref.model.metadata.event.MetaDataChangedEvent@34a71a73
java.lang.NullPointerException
    at net.sf.jabref.shared.DBMSSynchronizer.listen(DBMSSynchronizer.java:121)
```

#2112 Comment 5:
@tobiasdiez Since this merge the synchronization of metadata for shared databases is totally broken. Could you please investigate why this happened? There is also a new issue https://github.com/JabRef/jabref/issues/2219.

#2112 Comment 6:
@obraliar: Looking at the code, there have been changes in `src/main/java/net/sf/jabref/shared/DBMSSynchronizer.java`, so my best guess would be those changes. Could you have a look at the changes to this class? Maybe some meta data are not carried over properly due to the typing.

Lacking an actual database for testing, I cannot provide more help unfortunately. It seems that we need more tests for the database code, as travis did not find this problem.

#2112 Comment 7:
Sorry I have no db to test the sync (and no intellij at the moment either). I have to admit, I kind of trusted that our db-tests would catch possible problems.

--------------------------------------------------------------
#2108 Comment 1:
Thanks!

--------------------------------------------------------------
#2107 Comment 1:
The build seems to have failed for an unrelated reason. I restarted it and once it has passed, I will merge this as well.

#2107 Comment 2:
And thanks again!

--------------------------------------------------------------
#2106 Comment 1:
I just tested your PR following the instructions stated in #2104. JabRef does not crash anymore. However, no error message appears and the additional faulty comma is just not stored silently. When I look into the error console, I see the error.

Imho, this is not quite the behavior we want. It is fine to avoid storing the broken BibTeX, but there should be an error message (that does not crash JabRef). Otherwise, a user might expect that the save worked and would be surprised to see that it did not. This is critical, since all changes made to the entry are lost, not just the comma. Therefore, we need the error message so that the user has a change to fix the mistakes.

#2106 Comment 2:
I get an error message:
![parsingerror](https://cloud.githubusercontent.com/assets/15456836/19037291/c6320606-8975-11e6-86bf-fc95adab4f1c.png)
I don't know, why it does not work for you.
`Edit` keeps the BibTeX source (with parsing error) and gives the opportunity to correct the error.
`Revert to original source` does not store the changes.

#2106 Comment 3:
You are correct, my bad! I was hitting CTRL+S and not pressing the button in the toolbar. Your PR can be merged, and apologies for not getting it.

Didn't we use to have a keyboard shortcut for saving?

#2106 Comment 4:
Ohh, is this another bug? Ctrl+s should also trigger the error message.

#2106 Comment 5:
@grimes2 For me it did not. Can you please double check? If you can reproduce it, would you be willing to submit a second pull request?

This could be a keybinding issue though, not directly related to the saving logic.

#2106 Comment 6:
File > Save database works
Ctrl+s fails
Strange!
I'll open a new PR.

#2106 Comment 7:
Thanks a lot!

--------------------------------------------------------------
#2103 Comment 1:
As @koppor pointed out in some languages this is already translated as "recent databases". So it is probably better to leave the already translated strings. Also you don't know if in different languages the other database related strings are always translated as "database" and not file as it was the case in the german translation. 

On Oct 2, 2016, 16:17, at 16:17, Daniel Mair notifications@github.com wrote:

> mairdl commented on this pull request.
> 
> > @@ -56,7 +56,7 @@ Paste=&Pegar
> > Preferences=&Preferencias
> > Previous_tab=&Pestaña_anterior
> > Quit=&Salir
> > -Recent_files=Bases_de_datos_&recientes
> > +Recent_databases=
> 
> @boceckts what do you think?
> 
> ## 
> 
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/2103

#2103 Comment 2:
Ok, in that case i will "translate" them. 💃  

#2103 Comment 3:
LGTM :+1:

--------------------------------------------------------------
#2102 Comment 1:
LGTM. Although the converter is probably not perfect and we might run into new problems caused by that fact.

#2102 Comment 2:
The functionality in the converter has not changed, it is just a rewording of `String.replace` calls into regular expressions that are compiled once instead of every time. Thus, there should be no new problems that weren't broken before anyway. You can never be sure, though...

I still think the converter should be written from scratch, but that should really be a separate PR.

#2102 Comment 3:
Regarding `GrammarBasedSearchRule`: I am not 100% sure, but it looks like it on the one hand builds upon `ContainBasedSearchRule`. But it also has some self-searching code, which I modified to use the LaTeX-free version. This was probably a bug.

#2102 Comment 4:
Implementation alternatives for the LaTeX-to-Unicode conversions are discussed at https://github.com/JabRef/jabref/issues/1252

#2102 Comment 5:
As a few people have looked at the code and only criticized minor aspects (which I fixed), I'll merge this now. The codacy build seems to be broken somehow, but then it is also not that critical.

--------------------------------------------------------------
#2101 Comment 1:
@Siedlerchr Thanks for the hint! I've overridden the method now.

#2101 Comment 2:
@lenhard Done. Branch already has been rebased.

#2101 Comment 3:
Hm, for me this still freezes on second search.

Also, I am still getting this weird exception on the command line:

```
Exception in thread "JabRef CachedThreadPool" java.lang.IndexOutOfBoundsException: Index: 3, Size: 3
    at java.util.ArrayList.rangeCheck(ArrayList.java:653)
    at java.util.ArrayList.get(ArrayList.java:429)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Dialog.conditionalShow(Dialog.java:953)
    at java.awt.Dialog.show(Dialog.java:1037)
    at java.awt.Component.show(Component.java:1671)
    at java.awt.Component.setVisible(Component.java:1623)
    at java.awt.Window.setVisible(Window.java:1014)
    at java.awt.Dialog.setVisible(Dialog.java:1005)
    at net.sf.jabref.gui.importer.fetcher.GeneralFetcher.lambda$actionPerformed$5(GeneralFetcher.java:220)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
```

What about that?

#2101 Comment 4:
Are you sure that you've pulled the rebased branch @lenhard? 

GeneralFetcher.java is exactly the line which I reverted... and it works for me here.

#2101 Comment 5:
Fixed the aspects @tobiasdiez has mentioned. Exception: Exception localization - this should be discussed more generally...

@lenhard Can you please retest whether the freezing problem persists for you?

#2101 Comment 6:
Well, JabRef doesn't freeze, but I seem to be blocked from Google Scholar now with the fetcher:

```
Caused by: java.io.IOException: Server returned HTTP response code: 503 for URL: https://ipv4.google.com/sorry/index?continue=https://scholar.google.com/scholar%3Fhl%3Den%26btnG%3DSearch%26q%3Dtest&hl=en&q=CGMSBMELm6gYh_jXvwUiGQDxp4NLijN0g-BTQduzpa67i0vP6rY1eFo
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1840) ~[?:1.8.0_92]
    at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441) ~[?:1.8.0_92]
    at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254) ~[?:1.8.0_92]
    at net.sf.jabref.logic.net.URLDownload.downloadToString(URLDownload.java:136) ~[main/:?]
    at net.sf.jabref.logic.importer.fetcher.GoogleScholar.addHitsFromQuery(GoogleScholar.java:135) ~[main/:?]
    at net.sf.jabref.logic.importer.fetcher.GoogleScholar.performSearch(GoogleScholar.java:120) ~[main/:?]
    ... 5 more
```

Unfortunately, filling out the captcha does not help. Of course, I cannot guarantee that the freezing does not return when I manage to get unblocked ;-)

Oh, and to be sure I executed a hard reset and pull for this branch, so I should be up to date.

#2101 Comment 7:
Besides minor comments: Fetcher works for me without exceptions. I just tested the search string "bpel4chor".

--------------------------------------------------------------
--------------------------------------------------------------
#2099 Comment 1:
I have tested the changes locally and can confirm it works.

It itches me a little that we are adding code to a class that is already more than 2000 lines long... Moving the code into `MainTable` would probably not improve things, though, as this class also has more than 600 lines.

I guess this is good to go. @bartsch-dev If you see potential for moving the new code to some place that is less bloated, please go ahead. Otherwise, I think we can live with it and merge.

#2099 Comment 2:
First, I thought that I would expect the search field to be focused. But I think, the current behavior is OK.

BUT: the selected entry changes when pressing "ESC". This should not happen: I expect the same entry to be focused if I continue pressing ESC. - Currently, it stays on the same number, which is not the same entry if I selected a non-hit entry.

![esc-jumps-to-wrong-entry](https://cloud.githubusercontent.com/assets/1366654/19252338/a78ba958-8f44-11e6-9bec-9da7db524db1.gif)

#2099 Comment 3:
Special request: ESC when in the search field should close the auto completion and keep the inserted letters. Current behavior: clear search completely. ESC with the opened auto completer should just (i) close the auto completer and (ii) focus the main table.  - (ii) is debatable.

#2099 Comment 4:
1. Now it will scroll to the selected entry after dismissing the search.
2. When inside the the searchbar and the popup is open the first <kbd>ESC</kbd> will only close the popup
   - if you want to jump from the searchbar to the main table directly you can use <kbd>ctrl</kbd>+<kbd>enter</kbd>

--------------------------------------------------------------
#2097 Comment 1:
looks like i need some more testscases for my changes

#2097 Comment 2:
What about a switch Statement with case?
Am 01.10.2016 2:20 nachm. schrieb "Tobias Boceck" <notifications@github.com

> :
> 
> _@boceckts_ commented on this pull request.
> 
> ## Only minor comments from my side.
> 
> In src/main/java/net/sf/jabref/logic/layout/format/RTFChars.java
> https://github.com/JabRef/jabref/pull/2097#pullrequestreview-2430786:
> 
> >  }
> > +//if( <= c && c <= )
> > +//        return "";
> 
> ## Remove out commented code.
> 
> In src/main/java/net/sf/jabref/logic/layout/format/RTFChars.java
> https://github.com/JabRef/jabref/pull/2097#pullrequestreview-2430786:
> 
> > @@ -199,4 +199,100 @@ private StringInt getPart(String text, int i, boolean commandNestedInBraces) {
> >          // the wrong "}" at the end is removed by "format(res)"
> >          return new StringInt(format(res), part.length());
> >      }
> > +
> > -    private String transformSpecialCharacter(long c) {
> 
> ## Please add a javadoc comment.
> 
> In src/main/java/net/sf/jabref/logic/layout/format/RTFChars.java
> https://github.com/JabRef/jabref/pull/2097#pullrequestreview-2430786:
> 
> > -            return "z";
> > -        if(198 == c)
> > -            return "AE";
> > -        if(230 == c)
> > -            return "ae";
> > -        if(338 == c)
> > -            return "OE";
> > -        if(339 == c)
> > -            return "oe";
> > -        if(222 == c)
> > -            return "TH";
> > -        if(223 == c)
> > -            return "ss";
> > -        if(161 ==c)
> > -            return "!";
> > -        return "?";
> 
> I don't like the multiple return statements and no brackets. Please use a
> variable which gets returned once in the end of the method and use if else
> with brackets.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/2097#pullrequestreview-2430786,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AATi5O3n-NXgNbOgUcLHNA6IpTMdkdKCks5qvlASgaJpZM4KKFcO
> .

#2097 Comment 3:
I also thought about switch case, but i came to the conclusion it gets way to big 🎅 

#2097 Comment 4:
Code-wise this looks fine for me. Though I'll admit that I have not looked up the mapping table and would trust you on this.

I have one more question regarding code style that is not your fault, but could you improve it anyway? I do not like that `RtfCharMap` extends `HashMap<String><String>`, which is also completely unecessary. Through this, a malicious user could compromise the structure of the table itself. It would be better if `RtfCharMap` just used an internal `HashMap`. All you would need to offer to the outside is a `get` methods, because nothing more is used atm. If you add an internal private `put` method, you can also avoid rewriting the code.

#2097 Comment 5:
I looked the mappings up and the ones in JabRef seemed to be fine, so I used them. I will double check my code at the end to be 100% sure the mappings are fine. Also I will improve the code quality like @lenhard mentioned.

#2097 Comment 6:
This looks done, or is there something left? @mairdl If so, please merge master into your branch and we are ready to go.

#2097 Comment 7:
I'm on it.

#2097 Comment 8:
So can it be merged now?

#2097 Comment 9:
Yes, thanks for your contribution!

--------------------------------------------------------------
--------------------------------------------------------------
#2094 Comment 1:
Does this make the _._ file filter the default file filter (selected)? (https://docs.oracle.com/javase/7/docs/api/javax/swing/JFileChooser.html#setAcceptAllFileFilterUsed(boolean))

#2094 Comment 2:
no, the default one is still the specific one (e.g. xml)

#2094 Comment 3:
Great, thanks Christoph!

--------------------------------------------------------------
#2093 Comment 1:
Thanks, I merged it in! :+1: 

--------------------------------------------------------------
#2091 Comment 1:
This PR breaks our architecture. Do we need a more sophisticated solution?

```
net.sf.jabref.ArchitectureTests > fistPackageIsIndependentOfSecondPackage[7 -- is net.sf.jabref.model independent of net.sf.jabref.logic?] FAILED

    java.lang.AssertionError: expected:<[]> but was:<[src/main/java/net/sf/jabref/model/entry/BibEntry.java]>
```

#2091 Comment 2:
@koppor "Could have told you so" ;-) The architecture issue was pretty obvious here. Let us talk this through before implementing a quick shot, I have a number of solutions on my mind to this architecture stuff, as well as for the rest.

Let us also keep in mind that the VM args might not be quite be as portable or effective for non-Oracle JVMs.

#2091 Comment 3:
Just use `LatexToUnicode` instead of `LatexToUnicodeConverter`...

#2091 Comment 4:
Indeed. At the devcall, we decided to implement basically everything, i.e., cached LaTeX-free fields in `BibEntry`, String internalization, additional command-line args, and some pre-compilation of regular expression.

I'll hijack this PR and create a new one shortly, albeit not today.

#2091 Comment 5:
I have moved over the ideas here into #2102 and build some more on top. Hence, I'll close this PR.

--------------------------------------------------------------
#2088 Comment 1:
Okay, now all seems to be executed fine on travis and codecov is increased

#2088 Comment 2:
Yeah codecov was increased but the class `modsExportFormatTestFiles` was still not run, so this issue still remains.

#2088 Comment 3:
Codecov itself does not run any tests, it relies on the results from travis:
http://docs.codecov.io/docs/ci-service-relationship
Mabye it's a travis configuration thing. No idea. It would be nice if you could search for information about that 

#2088 Comment 4:
Yeah, I will try to find a solution for this.

--------------------------------------------------------------
#2087 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#2086 Comment 1:
@mairdl Please explain why this is a follow up. Do not copy and paste the old PR text. This makes it very hard to review. Further, you have way too much commits in your PR. Please always use `gitk --all` to check your commits.

#2086 Comment 2:
Resolved the issue of too much commits

#2086 Comment 3:
@koppor isn't the "old" PR text the reason why this is a follow up for the javafx branch?

#2086 Comment 4:
Your PR text does NOT indicate, that the issue is solved in `master`, but not in `javafx`. You should have simply merged your `GermanTranslationFix` to `javafx` and check whether everything works fine. I did that (since your PR is merged, I just had to merge `master` into `javafx`). It turned out: Everything works fine.

Thus, this PR is obsolete. 

--------------------------------------------------------------
#2085 Comment 1:
You should switch do Python 3.x, there is everything default in Unicode... :smile: 

#2085 Comment 2:
Maybe I'll do that ...

--------------------------------------------------------------
#2084 Comment 1:
Good!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2079 Comment 1:
Thanks a lot!
Edit// Please also have a look at the menu items:
https://github.com/JabRef/jabref/blob/master/src/main/resources/l10n/Menu_it.properties

#2079 Comment 2:
@frithnanth About Menu_it.properties: Most of untranslated entries are at the bottom of the file. However, three are mixed inside:
-  Global_Search=
- Next_preview_layout=
- Previous_preview_layout=

--------------------------------------------------------------
--------------------------------------------------------------
#2075 Comment 1:
I'm sorry, but I am not sure if I get/understand your changes, because what does "OtherFields" refer to?

I have the following tabs. in BibTex:
`Required, Optional, General, Abstract, Review, Source`
and in Biblatex:
`Required, Optional1, Optional2, Deprecated, General, Abstract, Review, Source`

Deprecated fields exist for bibtex compatibility, when you import an entry you often get in bibtex. 
So these fields are somehow still required. 

#2075 Comment 2:
Tab Other fields shows the remaining fields:
![otherfields](https://cloud.githubusercontent.com/assets/15456836/18884619/78865560-84e8-11e6-979b-fbd78f368062.png)

#2075 Comment 3:
I think I found the bug in #2064. It was not a regression. A new entry editor was not instantiated on changing an entry of the same type. So some "other fields" were not displayed.

#2075 Comment 4:
Please set label "ready-for-review". Thanks.

#2075 Comment 5:
The idea was originally to have a better performance. So the entry editor is retained for the same type. This is not a good idea. The entry editor needs to be build completetely new in all cases, because the new entry can have some additional (layout changing) other fields.

#2075 Comment 6:
So the whole `entryEditors` list can be deleted, right? (because its sole purpose was to cache the entry editor for each type). Moreover, there is a similar code in the showEntry method which differentiates between cached vs not-yet-cached.

#2075 Comment 7:
```
//To indicate which entry is currently shown.
private final Map<String, EntryEditor> entryEditors = new HashMap<>();
```

I think, `entryEditors` stores all the old entry editors and the new entry editor. So I'm not sure, that the sole purpose is to store an entry editor of each type. The similar code in `showEntry` should also be adjusted, but there is currently no bug report for it.

#2075 Comment 8:
I've checked the code. @tobiasdiez you are right. The whole entry editor caching (for each type) can be removed. I have no performance issues with my databases.

#2075 Comment 9:
I noticed a very small latency if you quickly switch from editing one entry to another (for example with the arrow keys). But as I don't think this is a big deal, I'll merge this PR now.

#2075 Comment 10:
Yes, fast scrolling of the entries causes a small latency and moderate CPU usage. But I think, this is no problem. I have an idea for caching the entry editor: entry editor A -> B -> A. A can be cached. But this takes real effect only on heavy usage of the database.

#2075 Comment 11:
Or cache based on the "properties" of the entry. One could generate a
unique ID for each entry property. -- Property: entry type, other fields.
(future: hadPDFAttached) @braunch

#2075 Comment 12:
The problem is generating the textfields. So especially in biblatex mode there are around 80 fields which are generated every time. I would not cache the whole editor but just generate the textboxes when the tab is focused. 

#2075 Comment 13:
The other field tab is optional (No field -> No tab). I would prefer to create the other fields tab always (No field -> Empty tab). The advantage is, that every entry editor has always the same layout of the tabs. This preserves the active (other fields) tab on changing the entry.

--------------------------------------------------------------
#2074 Comment 1:
Many thanks! 
If you do not want to update regulary, before a new release we do a feature freeze where no new language  strings are added, so that all translators can translate the missing strings.

#2074 Comment 2:
@frithnanth: Indeed, a dedicated issue will be opened when it will be time to final-check the translation (especially the menus). Something like: https://github.com/JabRef/jabref/issues/1824 or https://github.com/JabRef/jabref/issues/1533
However, considering there are still quite some strings to be translated into Italian, you may prefer to continue translating on a regular basis.

--------------------------------------------------------------
#2072 Comment 1:
Good! 

--------------------------------------------------------------
#2071 Comment 1:
Good work.

--------------------------------------------------------------
--------------------------------------------------------------
#2069 Comment 1:
I made the PreferenceDialog store the settings when preferences are exported so that the exported preferences are the same as the ones shown in the dialog. I thought about doing the same when the "show preferences" button is pressed. But I am not convinced that the user would expect that the changes made in the dialog are stored when he wants to show them. Maybe he just wants to compare stuff and then accidentally changes the settings. 

#2069 Comment 2:
The preference dialog now gets disposed when preferences has been imported. This prevents that the user overrides the imported preferences.

#2069 Comment 3:
Can this be merged?

--------------------------------------------------------------
#2068 Comment 1:
Auto-completion is basically broken but you can still remove this feature anyway 👍 

#2068 Comment 2:
Seems like a good idea. Never heard of them before

#2068 Comment 3:
I, too, cannot add an additional sensible use case, so removing is fine from my point of view. 

Note that, next to the failing localization tests, you also seem to have another failed test regarding to parsing content selectores

--------------------------------------------------------------
--------------------------------------------------------------
#2066 Comment 1:
Please make sure that  creating the BibEntry is done in UTF-8 encoding  #2060 / #2061 

#2066 Comment 2:
Please also make sure that the strange error message reported in https://github.com/JabRef/jabref/pull/2034#pullrequestreview-2529277 does not appear anymore. Thanks.

#2066 Comment 3:
I couldn't reproduce the issue. In my case I had one single error message containing all messages. I changed the exception message `eutils.ncbi.nlm.nih.gov` to a more understandable one. 

#2066 Comment 4:
CI fails due to maintenance on ebook.de. So a few IsbnFetcher tests fail.

#2066 Comment 5:
👍 good job. can be merged from my point of view.

#2066 Comment 6:
Other than the minor comments: LGTM. Please ping me as soon as you have fixed the minor comments.

#2066 Comment 7:
Now I use the counter to inform the user if more entries then the fetched ones are available. I completely removed retmax and retstart and use the default values. I also updated the comments. @koppor 

#2066 Comment 8:
I preferred the version where 50 entries were returned 😄 

#2066 Comment 9:
@tobiasdiez Didn't want to change the semantics with my comments -> I just read the code. Should @zellerdev revert this part of his changes? For me, both is fine as long as the fetcher works 😇 

#2066 Comment 10:
I always thought the limit of 50 was some server-side thing?

#2066 Comment 11:
I think the part witch changed the number of fetched entries from 20 to 50 can be reverted but removing the local variables was indeed a good observation. I think even the count variable is not necessary and maybe can be replaced by `list of fetched bib entries.size()`. 

#2066 Comment 12:
Can you please have a look whether #2172 is fixed with this PR?

#2066 Comment 13:
@tschechlovdev is preparing a fix. He wrote the MedlineImporter in the first place.

#2066 Comment 14:
Tests fail, but I could fix them locally to get the fix into the master branch (0e5e15d65fba4116a5672 and 966e1967046db466da0). Please consider rewriting the fetcher using xsd.

--------------------------------------------------------------
--------------------------------------------------------------
#2062 Comment 1:
Good work!  Ready for merge? It looks like all tests are passing on travis

#2062 Comment 2:
At the moment I am not 100% sure if the changes of b994030 are right.

#2062 Comment 3:
@mairdl  What does the documentation/help say? 
All layout related stuff is documented here: https://help.jabref.org/en/CustomExports

#2062 Comment 4:
@Siedlerchr thanks that cleared it up. 

#2062 Comment 5:
Regarding the DialogTest: I tried out several thingst to make the DialogTest work, but nothing seems to make it work. As a solution I could split the 2 cases in a different class.

#2062 Comment 6:
If the split works locally and on travis, it's okay.

#2062 Comment 7:
Ok the split works 👍 

#2062 Comment 8:
Good work! Seems to work on travis, so I will merge it in for now.

#2062 Comment 9:
...and now Travis fails...

#2062 Comment 10:
Before I merged it in, travis was green

#2062 Comment 11:
Is not related to this one is the Springer Link test which fails

net.sf.jabref.logic.importer.fetcher.SpringerLinkTest > findByDOI FAILED

java.lang.AssertionError: expected:<Optional[
http://link.springer.com/content/pdf/10.1186/s13677-015-0042-8.pdf]> but
was:<Optional.empty>

at org.junit.Assert.fail(Assert.java:88)

at org.junit.Assert.failNotEquals(Assert.java:834)

at org.junit.Assert.assertEquals(Assert.java:118)

at org.junit.Assert.assertEquals(Assert.java:144)

at
net.sf.jabref.logic.importer.fetcher.SpringerLinkTest.findByDOI(SpringerLinkTest.java:41)

2016-09-27 14:42 GMT+02:00 Oliver Kopp notifications@github.com:

> ...and now Travis fails...
> 
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/2062#issuecomment-249853336, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5FYvNnwi6mrnFMiFYMJmaknG71Gzks5quQ9HgaJpZM4KF8Yj
> .

--------------------------------------------------------------
#2061 Comment 1:
Could you please add a test for the change. This is especially important for the medline importer since @zellerdev will probably rewrite it using the new fetcher interface and we don't want the bug to resurface. 

--------------------------------------------------------------
#2059 Comment 1:
Done.

#2059 Comment 2:
Good! I merge it in! 

--------------------------------------------------------------
--------------------------------------------------------------
#2056 Comment 1:
Thanks for your contribution! I will merge both PRs of you in. The failing test is not related to your work

#2056 Comment 2:
On Saturday, September 24, 2016 12:20:56 PM CDT Christoph wrote:

> Thanks for your contribution! I will merge both PRs of you in. The failing
> test is not related to your work

Thank you for the information.

Cheers,

Hakan

--------------------------------------------------------------
#2055 Comment 1:
The only test that failed is the `getByDoi` test from the springer service.
Not surprising since the Springer service is currently down for maintenance.

#2055 Comment 2:
Okay, I merged it in!

--------------------------------------------------------------
#2053 Comment 1:
I am not sure if I like that Custom Imports have to be changed as this is again breaking functionality for existing importers 

#2053 Comment 2:
You have some check style errors...

#2053 Comment 3:
I decided against changing the `File` occurrences with nio.path since I don't understand the code in the gui good enough (and there are no unit tests as a backup because its gui code). But the logic code in now free of the old java `File`.

Will merge this now... you had enough time to protest 😆 

--------------------------------------------------------------
#2051 Comment 1:
Sorry, but not all settings from the original dialog have been included:

![grabbed_20160708-205241](https://cloud.githubusercontent.com/assets/1366654/16698295/ed422d32-454d-11e6-8940-a2cf5c55e0a0.png)
- [ ] I miss the "convert to real superscripts". I think, this is "Ordinals to superscript"
- [ ] Please go through line by line and state which new converter you chose. Example:
  - `Run HTML converter on title` -> `title: HTML to LaTeX`
- [ ] I would also love to have a toggle button for "Unicode conversion", which adds/removes the respective formatters being equivalent to `Run Unicode converter on title, author(s), and abstract`.
- [ ] In case you are in context, could you check, why "Reformat ISSN" is there? Isn't that just another formatter?

Refs https://github.com/JabRef/help.jabref.org/issues/8

#2051 Comment 2:
I don't like all these "title" formatters. I would propose to have a minimal default preset which does not change to much. For example, "protect terms" is really hard to revert by hand. Thus I would only include the formatters which do a minimal job which probably everybody wants (i.e normalized months, dates and pages) but not more.

#2051 Comment 3:
@koppor oliver what do you think about tobiasdiez idea ??? :smirk:

#2051 Comment 4:
I have a question about the function of each checkbox. Which change will be setted, if i select one. Maybe like "Convert 1st, 2nd, ... to real superscript, what will be change if i select it and i approve with "OK".
- Also i have not understand, what do you meant in this task:

Please go through line by line and state which new converter you chose.

Thy for explaining 😄

#2051 Comment 5:
To real superscripts is ordinals to latex. You could also have tried it out
by creating an inprocredings entry containing a bootitle such as "2nd
conference on something". Or just testing it with available bibtex files
and checking the deltas (e.g., using git)

#2051 Comment 6:
@tobiasdiez We should have buttons for presets. Minimal, Recommended (as in
old JabRef versions) and Maximal (if we can come up w something useful)

I think, I really want the ordinals thing included. Don't like the protect
terms. Just want to put automatically braces around the complete title. But
we don't have a formatter for that...

#2051 Comment 7:
@koppor Event without the checkbox "convert to real superscripts" you can add the entryfield manually to the fieldformatter with the converter you chose eg.
- Run Field Formatter -> choose entryfield -> booktitle: -> choose converter for superscripts -> for example HTML to Latex -> add

with this everyone can add his own converter for his own use thats why the checkbox "convert 1st, 2nd, ... to real superscripts" is not needed.

#2051 Comment 8:
I know how to use the dialog. I want sensible defaults - see https://github.com/koppor/jabref/issues/128

#2051 Comment 9:
The convert checkbox of old cleanup entries dialog is defined now in field formatter like following:
- Run HTML converter on title -> title: HTML to LateX
- Run Unicode converter on title, author(s), and abstract -> title: , author: or abstract: Unicode to LateX or LateX to Unicode
- Run filter on title keeping the case of selected words -> title: , journal: or journal title: Protect terms
- Remove unneccessary $, {, and } and move adjacent numbers into equations -> all_text_fields: LaTeX cleanup
- Add brackets and replace separators with their non-breaking version for units -> all_text_fields: Units to LaTeX
- Convert 1st, 2nd, ... to real superscripts -> all_text_fields: Ordinals to Latex superscript
- Format content of month field to #mon# -> month: Normalize month
- Ensure that page ranges are of the form num1--num2 -> pages: Normalize page numbers
- Format date field in the form yyyy-mm or yyyy-mm-dd -> date: Normalize date

All are done, please take a look for merge 🎅 

#2051 Comment 10:
Can the unicode converter (line 2) also be run on `all_text_fields`?

Run filter on title keeping the case --> This is "protect terms". Please enable it on title, journal, and journal title.

#2051 Comment 11:
Some comments:
- Most bst:s doesn't change the case of Journal titles, so no need to protect them (please provide any counter examples if I am wrong).
- Adding braces around a complete field is in most cases the wrong way to do this as it will basically disable the bst handling of the field. (Note to @koppor )
- Using an all_text_fields meta field would be quite nice. I'd suggest HTML to LaTeX on those and maybe Unicode to LaTeX (although this is indeed really BibTeX/Biblatex dependent, therefore my hesitation, although we may have "recommended for BibTeX" and "recommended for Biblatex" versions...).

#2051 Comment 12:
I'm really no big fan of the proposed default values:
- ProtectTermsFormatter: not needed in BibLaTex (and depends on the bibtex style)
- UnitsToLatexFormatter: I use the si-units package and thus this conversion is counterproductive.
- LatexCleanupFormatter: Is not good enough to be default in my opinion, but if the majority wants it then it would be fine with me
- HtmlToLatexFormatter: for BibLaTeX you want Html -> Unicode instead
- OrdinalsToSuperscriptFormatter: as a user of the [recommended nth-package](http://tex.stackexchange.com/a/4119), this conversion is again suboptimal

In my opinion all these formatters depend on too much assumptions (BibTeX vs BibLaTeX and used packages) to be default. I find it better to have a minimal default preset and let the user decide which additional formatters he wants. Adding something feels better than removing something. 
But any way...its just default values.

#2051 Comment 13:
@koppor: all-text-fields will be function with unicode converter
i have done all. Please take a look for merge. THX 🍪 

#2051 Comment 14:
@koppor: i have implemented recommend button for BibLatex /BibTex and refactoring the default setting
please take a look for merge BIG THX 😄 

#2051 Comment 15:
- [x] "Recommended for bibtex" should be disabled if save actions are not enabled (similar to reset button)
- [x] show screenshot for: "Reset"
- [x] show screenshot for: "Recommended for bibtex"
- [x] show screenshot for: "Recommended for biblatex"

#2051 Comment 16:
@koppor: I have done it 😄:
- Change screenshots
- Disable "Recommend for %0" button, if save actions are not enable 🐨 

#2051 Comment 17:
Please resolve conflicts in `JabRef_vi.properties` and please add test cases (see comments).

#2051 Comment 18:
It is part of the old dialog, isn't it? It doesnt have to be part for the
minimum cleanups, but for the recommendations, it must!

#2051 Comment 19:
Its my favourite. So keep it, please.

#2051 Comment 20:
@koppor all thing are doing. Pls take a look for merge 🎅 

#2051 Comment 21:
Good enough for me. Follow ups:
- [ ] remove empty lines before closing  `{` and if-statements
- [ ]  unifiy mode string generation with panel

Reason for second one: I assume that 

```
 if (isBibLaTeX) {
            mode = "BibLaTeX";
```

also appears somewhere else in the code.

![grabbed_20161027-115448](https://cloud.githubusercontent.com/assets/1366654/19762912/2d519c42-9c3c-11e6-88ac-cb9ce6587e6f.png)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2043 Comment 1:
Could you please create one benchmark which uses the normal stream and one for the parallel one, please also post the benchmark results so that we can see the improvement.

#2043 Comment 2:
The differences between parallel and normal stream will be only visible in
large database, there the parallel stream is more advanced, because the jvm
optimizes it.

#2043 Comment 3:
### stream

```
Benchmark                             Mode  Cnt        Score        Error  Units
Benchmarks.htmlToLatexConversion     thrpt   20     3430,821 ±     12,570  ops/s
Benchmarks.inferBibDatabaseMode      thrpt   20    12196,397 ±    250,891  ops/s
Benchmarks.keywordGroupContains      thrpt   20     7367,579 ±    702,650  ops/s
Benchmarks.keywordGroupContainsWord  thrpt   20  8080932,143 ± 190154,353  ops/s
Benchmarks.latexToHTMLConversion     thrpt   20    62292,491 ±   1375,804  ops/s
Benchmarks.latexToUnicodeConversion  thrpt   20    59849,947 ±    298,067  ops/s
Benchmarks.parse                     thrpt   20       20,002 ±      0,809  ops/s
Benchmarks.search                    thrpt   20       19,986 ±      0,729  ops/s
Benchmarks.write                     thrpt   20       39,440 ±      0,232  ops/s
```

### parallel stream

```
Benchmark                             Mode  Cnt        Score       Error  Units
Benchmarks.htmlToLatexConversion     thrpt   20     3478,589 ±    58,752  ops/s
Benchmarks.inferBibDatabaseMode      thrpt   20    12098,187 ±   235,957  ops/s
Benchmarks.keywordGroupContains      thrpt   20     6694,197 ±    84,251  ops/s
Benchmarks.keywordGroupContainsWord  thrpt   20  7858681,820 ± 11459,928  ops/s
Benchmarks.latexToHTMLConversion     thrpt   20    60325,789 ±  3041,157  ops/s
Benchmarks.latexToUnicodeConversion  thrpt   20    59671,261 ±   535,001  ops/s
Benchmarks.parse                     thrpt   20       20,349 ±     0,154  ops/s
Benchmarks.search                    thrpt   20       63,016 ±     0,843  ops/s
Benchmarks.write
```

#2043 Comment 4:
Ok, that are good numbers. Perfect. Could you please keep the original `@Benchmark` with normal `stream` and add a new one for the parallel stream (just copy 1:1 the method). Then this can be merged.

#2043 Comment 5:
Created a separate Benchmark.

#2043 Comment 6:
Thanks :+1: 

--------------------------------------------------------------
#2041 Comment 1:
New Prrv (Paper Reference Relationship Visualization) Plugin using JavaFX and Prefux library (https://github.com/effrafax/Prefux). 
Based on following issue: https://github.com/koppor/jabref/issues/95

#2041 Comment 2:
Depending on how powerful and easy-to-use the Prefux library is, you also might consider d3 (which in my opinion is an amazing library). For the relationship of papers, you can use a [directed graph](https://strongriley.github.io/d3/ex/force.html) or be a bit more creative with http://www.findtheconversation.com/concept-map/# or http://mbostock.github.io/d3/talk/20111116/bundle.html (should look good if you group by keyword). If you decide to go this way, here are a few links which might be helpful:
- using javafx: https://github.com/stefaneidelloth/javafx-d3
- real-live example using javafx: http://blog.mirkosertic.de/javastuff/fxdesktopsearch
- github: https://github.com/d3/d3
- tutorial: http://alignedleft.com/tutorials/d3/binding-data
- sunburst example: https://bl.ocks.org/kerryrodden/7090426 and https://bl.ocks.org/mbostock/4063423 and http://bl.ocks.org/mbostock/5944371 and collapsing or expanding subtrees https://www.youtube.com/watch?v=ck3Mm9THtlY
- treemap example: http://bl.ocks.org/mbostock/6bbb0a7ff7686b124d80
- tree example: http://bl.ocks.org/mbostock/ff91c1558bc570b08539547ccc90050b
- circle packing example: http://bl.ocks.org/mbostock/ca5b03a33affa4160321
- word cloud example: https://github.com/jasondavies/d3-cloud and for inspiration http://blog.arungupta.me/wp-content/uploads/2015/05/javaone2015-tagcloud-devops-abstract.png surpasses https://github.com/JabRef/jabref/pull/1832
- gallery: https://github.com/d3/d3/wiki/gallery

#2041 Comment 3:
@tobiasdiez I tried to use https://github.com/stefaneidelloth/javafx-d3 because I already coded with d3 and it sounded very tempting to display these variations. But it's not possible to simply wrap your d3.js code and put it in JavaFx. You have to use the javafxd3 library which is not completed yet. When I was at the point where I set out my nodes I discovered the whole force layout (https://github.com/stefaneidelloth/javafx-d3/blob/master/javafx-d3/main/java/org/treez/javafxd3/d3/layout/Force.java) and other listener are not implemented yet. The prefux library is not perfect, because i had to implemented arrowheads and some listener on myself, but at least I am not fully depending on the library.

#2041 Comment 4:
@bruehldev It would be nice if you provided a link to code where one could inspect your experiments.

#2041 Comment 5:
@koppor I pushed my changes on JabRef so far. The prefux plugin works and can be tested over JabRef ->View -> Paper Reference Relationship Visualization. Each bib entry needs a field for references. Inside of the highest jabref folder is a seminar.bib which can be loaded to test it. 
My currently problems are:
- It's not possible to safe the references in severel rows. Somehow i need to know when another reference starts, should i norm it with an semicolon? 
- I can't transform my outputstream into an inputstream: Error Message in PrrvDialogView: https://github.com/bruehldev/jabref/blob/PRRV/src/main/java/net/sf/jabref/gui/prrv/PrrvDialogView.java#L74)
  
  prefux.data.io.DataIOException: java.io.IOException: Write end dead
  at prefux.data.io.GraphMLReader.readGraph(GraphMLReader.java:79)
  at net.sf.jabref.gui.prrv.PrrvDialogView.show(PrrvDialogView.java:74)
  ...
- Missing arrow head in prefux, i tried to add it but I can't bind it to the correct x and y coordinates. https://github.com/bruehldev/Prefux/blob/604d494a5e77640e8b93cfdcd9dc9230437f0431/src/main/java/prefux/render/EdgeRenderer.java#L137
- Error Message of the right click listener when i try to display the label. 

I will move the model to the correct folder, and delete the d3 test files and library on the next commit.

#2041 Comment 6:
OutputStream to InputStream: http://stackoverflow.com/a/16973800/873282

#2041 Comment 7:
@bruehldev Any news on this? How far is the PR regarding merging?
#2041 Comment 8:
Looks good at demonstration settings.

- [ ] When used at a real-life database, it has the issue that closing and reopening does not work.
- [ ] The master branch has to be merged.
- [ ] The prefux updates from https://github.com/bruehldev/Prefux/ should be generalized and sent back to the main repository
- [ ] Since prefux is currently integrated as a jar, we have to work on getting prefux published on maven central.

We as JabRef developers currently don't have the time to work on this as are currently trying to focus on other things. :fire:
We will come back later to this topic, therefore closing adding [on-hold label](https://github.com/JabRef/jabref/pulls?utf8=%E2%9C%93&q=label%3Aon-hold+) and closing this PR for now.

#2041 Comment 9:
Related question on tex.sx: [Tool to visualize connections between bibtex entries](https://tex.stackexchange.com/q/43066/9075)
--------------------------------------------------------------
#2040 Comment 1:
Thanks!

#2040 Comment 2:
@tobiasdiez  A bit too fast. At least the equals thing should be fixed.

#2040 Comment 3:
@Siedlerchr can I still push to this branch or should I create a new branch + pull request?

#2040 Comment 4:
Hm, not sure. Better create a new one based on master and then fix the things and we merge it in

#2040 Comment 5:
I fixed it in https://github.com/JabRef/jabref/commit/ffa3299d09616c8c779e0a080797c83f517a16fb. 

#2040 Comment 6:
@tobiasdiez thank you.

--------------------------------------------------------------
#2039 Comment 1:
I could not reproduce on Windows, but I saw it on Linux. Seems to be an issue at timing with the UI and refreshes.

--------------------------------------------------------------
#2037 Comment 1:
@bartsch-dev I think you recently reworked the localization script so maybe you can help me here. When I add a new translation string to en property file, is there anything else to do than to execute `./gradlew update`? Because this gives me a syntax error in the python script...

```
Traceback (most recent call last):
  File "/Users/tobias/git/jabref/scripts/syncLang.py", line 423, in <module>
    update(extended=len(sys.argv) == 3 and sys.argv[2] == "--extended")
  File "/Users/tobias/git/jabref/scripts/syncLang.py", line 384, in update
    update_properties(main_property_file=get_main_menu_properties(), other_property_files=get_other_menu_properties())
  File "/Users/tobias/git/jabref/scripts/syncLang.py", line 334, in update_properties
    keys, not_fixed, fixed = fix_duplicates(lines=lines)
  File "/Users/tobias/git/jabref/scripts/syncLang.py", line 191, in fix_duplicates
    fixed.append("{key}={value}".format(key=key, value=value))
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-6: ordinal not in range(128)
```

#2037 Comment 2:
The linked PR fixes that (I forgot to mark some strings as Unicode strings).

#2037 Comment 3:
I extracted the method to a new action class.

#2037 Comment 4:
Thanks! 👍 Can be merged from my point of view.

--------------------------------------------------------------
#2035 Comment 1:
Hm, yeah, this is confusing: https://en.wikipedia.org/wiki/Small_caps
And I think it is wrongly used and capital letters should be used indeed:
http://lawprofessors.typepad.com/legal_skills/2011/07/another-typing-trick-large-small-caps.html

--------------------------------------------------------------
#2034 Comment 1:
@zellerdev currently rewrites the medline fetcher #2066.
Probably the strange error message automatically disappears when the medline fetcher is ported to the new interface.
Thus I think it is ok to merge this PR (and double check before merging #2066).

#2034 Comment 2:
Uhm... the change in `GeneralFetcher.java` causes a quite weird exception:

```
Exception in thread "JabRef CachedThreadPool" java.lang.IndexOutOfBoundsException: Index: 3, Size: 3
    at java.util.ArrayList.rangeCheck(ArrayList.java:653)
    at java.util.ArrayList.get(ArrayList.java:429)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Container.createHierarchyEvents(Container.java:1441)
    at java.awt.Dialog.conditionalShow(Dialog.java:953)
    at java.awt.Dialog.show(Dialog.java:1037)
    at java.awt.Component.show(Component.java:1673)
    at java.awt.Component.setVisible(Component.java:1625)
    at java.awt.Window.setVisible(Window.java:1014)
    at java.awt.Dialog.setVisible(Dialog.java:1005)
    at net.sf.jabref.gui.importer.fetcher.GeneralFetcher.lambda$actionPerformed$171(GeneralFetcher.java:220)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
```

Occurs on (successful) searches with an internet connection in my branch for #2101 

Has anyone else this problem?

#2034 Comment 3:
... and there is another problem caused by the same change:

The whole UI freezes after some consecutive searches, e.g., using the IEEE fetcher.

@bartsch-dev Can you investigate this issues?

#2034 Comment 4:
I'll look into it tomorrow evening.

#2034 Comment 5:
To get the fetchers back working I just reverted your change in `GeneralFetcher.java` (see 6daa5b5)

Why have you changed it in your PR?

#2034 Comment 6:
To not show the fetcher dialog if the fetching was not successful.
Now fetcher dialog opens, the error message is on top of that and closes when the error message gets closed.

--------------------------------------------------------------
#2033 Comment 1:
Thanks!

--------------------------------------------------------------
--------------------------------------------------------------
#2030 Comment 1:
Could/should @motokito  be added to the team @JabRef/translators?

#2030 Comment 2:
@mlep  If he's interested in doing further translations tasks in future, we can add him.

#2030 Comment 3:
@Siedlerchr: I think the thumb up added to your comment by @motokito tells all.
Welcome on board @motokito !

#2030 Comment 4:
A complete translation for Vietnamese would be cool. @motokito Can you translate all items in the language file for Vietnamese in this PR?

#2030 Comment 5:
First i will translate the menu item. Then I will look ewaht to do next 😄 

#2030 Comment 6:
Ok, but to avoid that we have to review 500 PRs with 2 new lines (My guess from looking at the file is that 1000 entries are missing in vietnamese, but this might be very inaccurate), I'd suggest the following: We leave this PR are open until you either have translated all items or you say yourself that you are ultimately done with the translation. 

It is really absolutely fine if you do not translate everything, it would just be annoying if we bombard JabRef with small PRs for the same task. Reviewing PRs consumes time, even if they are very simple. In the case of localizations, one big batch is very much preferable over many small contributions.

#2030 Comment 7:
Since this PR is only about the menu items, it is about 30 lines to be translated (see https://github.com/JabRef/jabref/pull/2010).

#2030 Comment 8:
All conflict are fixed. :hibiscus:
Please take a look to merge . THX :koala:

#2030 Comment 9:
Okay, looks good now  I will merge this version in. 
Best you create then a new branch for future updates

#2030 Comment 10:
THX 😄 
I will do it 🐨 

--------------------------------------------------------------
#2028 Comment 1:
Travis fails, because the Architecture tests say, that the StringUtil class should be kept as small as possible ...

#2028 Comment 2:
Speak with @lenhard if it's okay to increase it and how to fix the test 

#2028 Comment 3:
I tried to contact @lenhard, but didn't get an answer. So for the moment I think it is the best to remove the method from the StringUtil class, so that this PR don't have to wait to long. In addition it would only be 2 classes who would use this method.

Travis is still failing because of a DOI test.

#2028 Comment 4:
Yes, it is the proper way for the moment. We can think later on for moving it.
I would merge it in then

#2028 Comment 5:
@tschechlovdev You contacted me? How? :-) This mention of myself is the first sign I see, but maybe I overlooked something.

#2028 Comment 6:
@lenhard  The question was about the "Failing travis test" regarding the StringUtil method.
The ideas was to add  a method for replacing unicode dashes:
`String[] entries = linesAsString.replace("\u2013", "-").replace("\u2014", "--").replace("\u2015", "--")`
which is also used in medline Plain.

#2028 Comment 7:
I know I'm late to the party, but one question: is this unicode dash needed for the page numbers? Because then there is a cleanup formatter which does the job (Page number normalizer, or some permutation of these words). 

#2028 Comment 8:
The reason for moving more functionality to `StringUtil` in model was, if I recall it correctly, that the group fixes needed these methods. If the dash replacement functionality is not needed by model classes, why should it go into that package? If you need that in multiple importer classes, why not introduce a util class for the importer package?

--------------------------------------------------------------
#2027 Comment 1:
Complete to disable menu item, toolbar button and context menu on multiple select of entries.

#2027 Comment 2:
Merge entries needs to be enabled only if exactly two entries are selected, also disable the following if multiple entries are selected:
Tools -> open file
Tools -> Open URL or DOI

#2027 Comment 3:
All things are complete 😄 

#2027 Comment 4:
Please resolve conflicts.

#2027 Comment 5:
All things are done 👍 
If all thing is okay, then it will be nice to take a look to merge.

A big THX 😄 

#2027 Comment 6:
Besides minor comments: LGTM. - The send-as-email-action internally works with multiple entries, but Outlook cannot receive that long string as text. Thus, it is OK for me to exclude this action.

#2027 Comment 7:
All things are done 🎅 

#2027 Comment 8:
Okay, looks good now. Merge it in. :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#2023 Comment 1:
The insertEntryWithDuplicationCheck vs insertEntry can be reverted. That was my bad not to recognize that "checkDuplicaiton" also changes the bibtex key (we should rename the method!).

As for reverting the other changes, I put my veto in. Moving getResolvedField to the entry was just a refactoring without any negative side-effects (that I'm aware of). And I already commented why the static fields in BibEntry should be private: they are implementation details! 

#2023 Comment 2:
As I noted in the other issue, the problem with the static fields is that
they are used in fetchers and importers/exporters to just check if the
actual encountered field is the key or not. You can not simply set them to
private without having a solution for the things.

#2023 Comment 3:
Yes I know, if I would have an easy solution for this case, then I already could have implemented it and there would be no need to mark it as deprecated. Again, deprecated does not mean that it is forbidden to be used and that we have to remove it immediately but it signals "hey deer (sic!) developer, please think twice about using this method. We try to remove it but right now are not able to. Please don't make it harder for us by adding yet another use case. But go ahead if there is no other solution.". 
I think this is exactly what we need for the citekey / id.   

#2023 Comment 4:
OK, guys. Regarding some comments at https://github.com/JabRef/jabref/pull/1913#issuecomment-247026679, I currently cannot really judge what's the best way. I had some personal discussions and thus, I merge this in and we should discuss in the devcall how to proceed.

--------------------------------------------------------------
#2022 Comment 1:
Could add tests and a CHANGELOG entry? Maybe in a follow up, could you address https://github.com/JabRef/jabref/issues/1779#issuecomment-248422973 so that the jumping to an entry works better. @bartsch-dev Maybe you have an idea for a quick implementation of that?

#2022 Comment 2:
Tests: It is difficult to test for an unexisting variable in this test environment. I'll test only for "assertCorrect".

#2022 Comment 3:
Tests: I view the changes using the [CodeCov plugin](https://github.com/codecov/browser-extension) (see also https://github.com/JabRef/jabref/wiki/Tools) and this is the result:

![grabbed_20160921-094240](https://cloud.githubusercontent.com/assets/1366654/18701966/d6143dfe-7fdf-11e6-9d5f-4ab86692f887.png)

I just wanted to ensure that everything is at least orange if not green :roller_coaster: 

#2022 Comment 4:
I think, it is difficult to implement empty bibtexkey in a clean way. The problem is that the bibtexkey is not existing, but the constructor IntegrityMessage requires an existing entry and field. So this might be the reason, why codecov is complaining. A solution could be to overload the constructor IntegrityMessage for this special case.

--------------------------------------------------------------
#2020 Comment 1:
Could/should @frithnanth be added to the team @JabRef/translators ?

#2020 Comment 2:
I merged, resolved the conflicts and sent out the invitation.

--------------------------------------------------------------
#2018 Comment 1:
I will fix the failing test. 

#2018 Comment 2:
@frithnanth  Thanks a lot for your contribution! I fixed the failing test (legacy \uxxx encoding) and created a follow up PR in #2020

#2018 Comment 3:
Reference for the future: @frithnanth should allow @Siedlerchr to allow direct editing of the files in the PR: https://github.com/blog/2247-improving-collaboration-with-forks

--------------------------------------------------------------
#2017 Comment 1:
Regarding the parameterized tests, something seems to be wrong with the path of the resource files because when I run the test class in IntelliJ it doesn't show any executed tests.

For me the following classes are affected:

```
net.sf.jabref.logic.exporter
    BibTeXMLExporterTestFiles.java
    MSBibExportFormatTestFiles.java
net.sf.jabref.logic.importer.fileformat
    BibTeXMLImporterTest.java
    BibTeXMLImporterTestFiles.java
    CopacImporterTest.java
    CopacImporterTestFiles.java
    MedlineImporterTest.java
    MedlineImporterTestFiles.java
    MsBibImporterTestfiles.java
```

I think it is best to move this issue to a new pr.

--------------------------------------------------------------
#2015 Comment 1:
pattern thing fixed

#2015 Comment 2:
Thanks for your contribution! Looks good now :+1:  I will merge it in now 

--------------------------------------------------------------
#2014 Comment 1:
@tschechlovdev Thanks for suggestions :+1:. Appropriate changes have been applied.

#2014 Comment 2:
Went through with Admir. LGTM.

--------------------------------------------------------------
#2010 Comment 1:
One additonal thing would be nice, I noticed by checking the failing tests in #2018 that it contained still the old legacy \uxxx encodings. 
I manually replaced them with Search + Replace, but it would be nice to automatically convert them.

--------------------------------------------------------------
#2009 Comment 1:
Bug when closing shared database with unsaved changes by shortcut.
JabRef 3.7dev
windows 8.1 6.3 amd64 
Java 1.8.0_101
PostgreSQL 9.6

Steps to reproduce:
1. Open shared database
2. Create an entry and open entry editor 
3. Modify a field such as title
4. Press the shortcut for close tab (ctrl + W)
Tab will close but a connection lost warning will pop up asking to reconnect or work offline.

Extra: make sure to open a "normal" bib file before connecting to the shared database, then follow the steps and at the connection lost pop up press reconnect. The shared database will pop up again but the loaded database will close.

#2009 Comment 2:
Bug when closing JabRef with an unsaved open shared database.
JabRef 3.7dev
windows 8.1 6.3 amd64 
Java 1.8.0_101
PostgreSQL 9.6

Steps to reproduce:
1. Connect to a shared database
2. Create an entry and open the entry editor
3. Modify a field such as title
4. Press the shortcut to close JabRef (ctrl + Q)

JabRef main frame will be closed but a connection lost pop up will come up asking you to either reconnect or choose to work offline. Pressing reconnect will result in an SQLException. after closing the dialog something still prevents java from terminating completely.

#2009 Comment 3:
Bug when working with the shared database live update. Deleting an unsaved entry will freeze gui.
JabRef 3.7dev
windows 8.1 6.3 amd64
Java 1.8.0_101
PostgreSQL 9.6

Steps to reproduce:
1. Open two instances of JabRef and connect to the same shared database
2. Create a new entry in the first JabRef instance (it will automatically appear in the other instance)
3. Open the entry editor and modify a field such as title
4. Switch to the second instance of JabRef and you notice the change has not yet been commited
5. Delete the entry in the second instance
6. Confirm the info message that has poped up at the first instance of JabRef 

Afterwards the gui for the first instance of JabRef does not repsond anymore. The window also can't be normally closed anymore.

#2009 Comment 4:
@boceckts thanks for suggestions :+1: .

https://github.com/JabRef/jabref/pull/2009#issuecomment-248000354, https://github.com/JabRef/jabref/pull/2009#issuecomment-248002788 and https://github.com/JabRef/jabref/pull/2009#issuecomment-248006242 are also fixed.

Codacy cannot be fixed as the variable has to be used as a class field to prevent Java GC from closing the connection. Connections are going to be closed by appropriate methods.

#2009 Comment 5:
LGTM :+1:

--------------------------------------------------------------
#2008 Comment 1:
Thank you very much!

--------------------------------------------------------------
#2007 Comment 1:
I've closed this PR because the implementation for Oracle depends on this implementation.
Now I merged those two implementations in one PR. Please follow up https://github.com/JabRef/jabref/pull/2009.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2002 Comment 1:
I have tested your PR with the help of the description in #1996 and everything works as desired. There is only one thing missing in this PR: Please add a Changelog entry and reference the issue that you fixed :)

It seems somewhat counter-intuitive that explicitly adding the optional fields makes the "other fields" tab disappear, but well... it's JabRef. 

#2002 Comment 2:
Thanks for your contribution! 
Fixes #1996 

--------------------------------------------------------------
#2000 Comment 1:
Thanks! Merged it!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1997 Comment 1:
How do we really define model? In which way is a string util a model? For me this is some helper class inside logic.

#1997 Comment 2:
For me, these are methods which actually should be in `String.java` but since we have no access to the String-model class (since it is in java.model :smile: ) we put them in a separate file.

Of course, not all methods in StringUtil fit this interpretation (for example there is a method related to file names which is probably better moved to `File.getFormattedName` or something like that). 

#1997 Comment 3:
For the sake of moving forward, I would say go ahead. There is no point in stalling eternally and since some parts of the model need these utility methods, (or rather since people are refusing to re-implement them at the respective positions), the class is also needed in model.

Just please, please make sure that we do not add endless methods to it and it turns into yet another good class (which it in a sense already is). How about a compromise: You add a test to `ArchitectureTests` that checks that this class doesn't grow endlessly? Say, you check that its size does not grow higher than it is at the moment. That way, we are forced to discuss every time somebody makes a change.

Furthermore, I think it is not ok to have a `strings` and `util` package in `model`. These packages overlap very much, please merge `util` into `strings`.

Finally, your build currently fails, you need to fix this before merging of course.

#1997 Comment 4:
Ok, feedback taken into account.

--------------------------------------------------------------
#1995 Comment 1:
Great! I think this is really how it should work. Still, I do think there is a use case for `anyfield` as I do not see how one should distinguish between matches and contains (this would be the contains case, right).

Code-wise, I think it is OK! :+1:

#1995 Comment 2:
That's correct, it only searches with "contains". If you think there are use cases for checking that the content of some field exactly matches a certain string, then go ahead with your "anyfield" construction. 

#1995 Comment 3:
Is it possible that after merging this branch, JabRef complains with

```
2:51:21.727 [AWT-EventQueue-0] WARN  net.sf.jabref.model.search.rules.GrammarBasedSearchRule - Search query invalid

org.antlr.v4.runtime.misc.ParseCancellationException: line 1:0 no viable alternative at input '<EOF>'

 at net.sf.jabref.model.search.rules.GrammarBasedSearchRule$ThrowingErrorListener.syntaxError(GrammarBasedSearchRule.java:50) ~[main/:?]

       at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:65) ~[antlr4-runtime-4.5.3.jar:4.5.3]

  at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:564) ~[antlr4-runtime-4.5.3.jar:4.5.3]

at org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:308) ~[antlr4-runtime-4.5.3.jar:4.5.3]

       at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:145) ~[antlr4-runtime-4.5.3.jar:4.5.3]

     at net.sf.jabref.search.SearchParser.expression(SearchParser.java:283) ~[main/:?]

     at net.sf.jabref.search.SearchParser.start(SearchParser.java:108) ~[main/:?]

  at net.sf.jabref.model.search.rules.GrammarBasedSearchRule.init(GrammarBasedSearchRule.java:91) ~[main/:?]

    at net.sf.jabref.model.search.rules.GrammarBasedSearchRule.validateSearchStrings(GrammarBasedSearchRule.java:108) ~[main/:?]

  at net.sf.jabref.model.search.rules.SearchRules.getSearchRuleByQuery(SearchRules.java:12) ~[main/:?]

  at net.sf.jabref.logic.search.SearchQuery.<init>(SearchQuery.java:29) ~[main/:?]

      at net.sf.jabref.gui.search.GlobalSearchBar.getSearchQuery(GlobalSearchBar.java:348) ~[main/:?]

       at net.sf.jabref.gui.search.GlobalSearchBar.clearSearch(GlobalSearchBar.java:271) ~[main/:?]

  at net.sf.jabref.gui.search.GlobalSearchBar.performSearch(GlobalSearchBar.java:304) ~[main/:?]
```

#1995 Comment 4:
Did you regenerate the search parser from the grammar file (gradle: generateSources)?

#1995 Comment 5:
```
> gradlew clean run
Starting a Gradle Daemon (subsequent builds will be faster)
:clean
:generateBstGrammarSource
:generateSearchGrammarSource
:generateSource
:xjc
:compileJava
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
:processResources
:classes
:run
Sep 21, 2016 8:00:34 AM java.util.prefs.WindowsPreferences <init>
WARNUNG: Could not open/create prefs root node Software\JavaSoft\Prefs at root 0x80000002. Windows RegCreateKeyEx(...) returned error code 5.
08:00:35.178 [AWT-EventQueue-0] INFO  net.sf.jabref.logic.importer.OpenDatabase - Opening: C:\git-repositories\jabref\jabref\src\test\resources\testbib\complex.bib
08:00:36.842 [AWT-EventQueue-0] WARN  net.sf.jabref.model.search.rules.GrammarBasedSearchRule - Search query invalid
org.antlr.v4.runtime.misc.ParseCancellationException: line 1:0 no viable alternative at input '<EOF>'
  at net.sf.jabref.model.search.rules.GrammarBasedSearchRule$ThrowingErrorListener.syntaxError(GrammarBasedSearchRule.java:50) ~[main/:?]
        at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:65) ~[antlr4-runtime-4.5.3.jar:4.5.3]
   at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:564) ~[antlr4-runtime-4.5.3.jar:4.5.3]
 at org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:308) ~[antlr4-runtime-4.5.3.jar:4.5.3]
        at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:145) ~[antlr4-runtime-4.5.3.jar:4.5.3]
      at net.sf.jabref.search.SearchParser.expression(SearchParser.java:283) ~[main/:?]
      at net.sf.jabref.search.SearchParser.start(SearchParser.java:108) ~[main/:?]
   at net.sf.jabref.model.search.rules.GrammarBasedSearchRule.init(GrammarBasedSearchRule.java:91) ~[main/:?]
     at net.sf.jabref.model.search.rules.GrammarBasedSearchRule.validateSearchStrings(GrammarBasedSearchRule.java:108) ~[main/:?]
   at net.sf.jabref.model.search.rules.SearchRules.getSearchRuleByQuery(SearchRules.java:12) ~[main/:?]
   at net.sf.jabref.logic.search.SearchQuery.<init>(SearchQuery.java:29) ~[main/:?]
       at net.sf.jabref.gui.search.GlobalSearchBar.getSearchQuery(GlobalSearchBar.java:348) ~[main/:?]
        at net.sf.jabref.gui.search.GlobalSearchBar.clearSearch(GlobalSearchBar.java:271) ~[main/:?]
   at net.sf.jabref.gui.search.GlobalSearchBar.performSearch(GlobalSearchBar.java:304) ~[main/:?]
 at net.sf.jabref.gui.JabRefFrame.lambda$init$0(JabRefFrame.java:648) ~[main/:?]
        at javax.swing.JTabbedPane.fireStateChanged(JTabbedPane.java:416) ~[?:1.8.0_102]
       at javax.swing.JTabbedPane$ModelListener.stateChanged(JTabbedPane.java:270) ~[?:1.8.0_102]
     at javax.swing.DefaultSingleSelectionModel.fireStateChanged(DefaultSingleSelectionModel.java:132) ~[?:1.8.0_102]
       at javax.swing.DefaultSingleSelectionModel.setSelectedIndex(DefaultSingleSelectionModel.java:67) ~[?:1.8.0_102]
        at javax.swing.JTabbedPane.setSelectedIndexImpl(JTabbedPane.java:616) ~[?:1.8.0_102]
   at javax.swing.JTabbedPane.setSelectedIndex(JTabbedPane.java:591) ~[?:1.8.0_102]
       at javax.swing.JTabbedPane.insertTab(JTabbedPane.java:731) ~[?:1.8.0_102]
      at javax.swing.JTabbedPane.addTab(JTabbedPane.java:798) ~[?:1.8.0_102]
 at javax.swing.JTabbedPane.add(JTabbedPane.java:835) ~[?:1.8.0_102]
    at net.sf.jabref.gui.JabRefFrame.addTab(JabRefFrame.java:1646) ~[main/:?]
      at net.sf.jabref.gui.JabRefFrame.addTab(JabRefFrame.java:1663) ~[main/:?]
      at net.sf.jabref.gui.JabRefFrame.addParserResult(JabRefFrame.java:1386) ~[main/:?]
     at net.sf.jabref.JabRefGUI.openWindow(JabRefGUI.java:126) ~[main/:?]
   at net.sf.jabref.JabRefGUI.<init>(JabRefGUI.java:63) ~[main/:?]
        at net.sf.jabref.JabRefMain.lambda$start$1(JabRefMain.java:116) ~[main/:?]
     at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311) [?:1.8.0_102]
     at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756) [?:1.8.0_102]
    at java.awt.EventQueue.access$500(EventQueue.java:97) [?:1.8.0_102]
    at java.awt.EventQueue$3.run(EventQueue.java:709) [?:1.8.0_102]
        at java.awt.EventQueue$3.run(EventQueue.java:703) [?:1.8.0_102]
        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_102]
   at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76) [?:1.8.0_102]
       at java.awt.EventQueue.dispatchEvent(EventQueue.java:726) [?:1.8.0_102]
        at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201) [?:1.8.0_102]
     at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116) [?:1.8.0_102]
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105) [?:1.8.0_102]
     at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101) [?:1.8.0_102]
 at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93) [?:1.8.0_102]
  at java.awt.EventDispatchThread.run(EventDispatchThread.java:82) [?:1.8.0_102]
```

Commit a8e148805356a4c216f76fb8bc8e30e167d05cd3

#1995 Comment 6:
The reason might be the famous groups (test file: https://github.com/JabRef/jabref/blob/master/src/test/resources/testbib/complex.bib)

```
at net.sf.jabref.model.groups.KeywordGroup.add(KeywordGroup.java:103) ~[main/:?]
       at net.sf.jabref.model.groups.AbstractGroup.add(AbstractGroup.java:84) ~[main/:?]
      at net.sf.jabref.gui.importer.actions.ConvertLegacyExplicitGroups.performAction(ConvertLegacyExplicitGroups.java:37) ~[main/:?]
        at net.sf.jabref.gui.importer.actions.OpenDatabaseAction.performPostOpenActions(OpenDatabaseAction.java:294) ~[main/:?]
```

```
> git bisect log
git bisect start
# bad: [a8e148805356a4c216f76fb8bc8e30e167d05cd3] Add missing CHANGELOG entry and two test entries demonstrating the feature
git bisect bad a8e148805356a4c216f76fb8bc8e30e167d05cd3
# bad: [7ace79be08f9b4a5dbfb03cb49da05101d03ab70] Fix search mixed from contains and grammar (#1995)
git bisect bad 7ace79be08f9b4a5dbfb03cb49da05101d03ab70
# good: [4134ec424c7e81ac379c697ca79c61a999812f14] Mods importer (#1942)
git bisect good 4134ec424c7e81ac379c697ca79c61a999812f14
# first bad commit: [7ace79be08f9b4a5dbfb03cb49da05101d03ab70] Fix search mixed from contains and grammar (#1995)
```

Do we need to offer migration of the searches at groups?

#1995 Comment 7:
Fixed in https://github.com/JabRef/jabref/pull/2045 and https://github.com/JabRef/jabref/pull/2033

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1989 Comment 1:
For some reason codecov doesn't run the class `ModsExportFormatTestFiles` like in #1942  ... 

#1989 Comment 2:
@tschechlovdev  Codecov seems to work again:  codecov/project — 28.28% (+0.42%) compared to a8e1488 

#1989 Comment 3:
Please work on coverage - or is the coverage indication wrong?

![grabbed_20160921-091358](https://cloud.githubusercontent.com/assets/1366654/18701229/de5b056e-7fdb-11e6-8148-24f53a816038.png)

#1989 Comment 4:
No, I have two test classes. `ModsExportFormatTest` and `ModsExportFormatTestFiles`. The coverage comes from `ModsExportFormatTest`, but `ModsExportFormatTestFiles` doesn't seem to be executed.

I tried to rename `ModsExportFormatTestFiles` to `ModsExportFormatFilesTest`, because I had the intention that it is because the class didn't end with test. Though that also doesn't seem to work.

#1989 Comment 5:
Regarding the test coverage. I have no idea, but maybe it is related to the fact that it's a parameterized test?

#1989 Comment 6:
Regarding the not executed tests https://github.com/JabRef/jabref/pull/2017#issuecomment-248593717.

#1989 Comment 7:
Please increase test coverage.

I did not see a roundtrip test: bibtex -> mods -> bibtex and mods -> bibtex -> mods. Is that possible?

#1989 Comment 8:
@koppor  Regarding test coverage: It's still the same problem that the parameterized test are not run by codecov. I will take care of this in a separate PR.
Regarding the roundtrip test: I will add one.

#1989 Comment 9:
I remove the "ready-for-review" for the moment until the comments are addressed. Please add it again afterwards. Thanks.

#1989 Comment 10:
Good! I merge in!

#1989 Comment 11:
I'm getting the following error:

```
:compileJava
/home/admir/tmp/jabref/src/main/java/net/sf/jabref/logic/exporter/ModsExportFormat.java:60:
error: incompatible types: Character cannot be converted to String
            .getKeywordSeparator();
```

OS data:

```
Distributor ID: Debian
Description:    Debian GNU/Linux 8.5 (jessie)
Release:        8.5
Codename:       jessie
```

#1989 Comment 12:
I'll take a quick look

#1989 Comment 13:
@obraliar  Works fine. Did you run ./gradlew eclipse (or build whatever youride is) ?
And also ./gradlew check executes fine. No related error.

#1989 Comment 14:
@Siedlerchr What OS are you using?
`./gradlew assemble` and also `./gradlew check` fails with the same error. I cloned jabref into another directory to annul all factors. Unfortunately, it doesen't work. It works when resetting to the commit before.

#1989 Comment 15:
@obraliar  Now it get the same. Seems like my local repo was not update to date. I will revert that commit here.  Problem is the internal class stuff. @tschechlovdev  Sorry, but you have to fix this 

#1989 Comment 16:
@obraliar  I just reverted the commit. Follow up discussion in #2078

--------------------------------------------------------------
#1988 Comment 1:
> This PR aims to fix this issue by rewording the translation. Every English occurrence of databaseis now translated as Datenbank

I doubt that this is a good idea! 
We differ between a Bibtex-Database (Datei (because it is not a real Datenbank) and a real SQL-Database (Datenbank). The question is more likely: Why is ist called "database" in english? 
And the answer is possibly Historic reason...
@koppor 

#1988 Comment 2:
I discussed with @mairdl and others here. The English menu strings are the leading strings. And we currently have "Database" there.

I know that this is confusing. This also confused me multiple times.

What @mairdl didn't show that we also have a Tools menu with "Open file". There, the attached (!) file is shown. We thought that is is a good idea to distinguish between (linked/attached) files (== files) and bib files (== database).

For now, I would merge this in. Otherwise we have to change **all** translations.

#1988 Comment 3:
A screenshot of the `Tools/Extra menu`:

<img width="310" alt="toolmenu" src="https://cloud.githubusercontent.com/assets/15333533/18583437/db7ab6ca-7c0a-11e6-92aa-9a5dd03d662d.png">

To open an attached file you select `Datei öffnen`  same as to open a new database.

#1988 Comment 4:
I didn't inspect the changes closely, but how did you fixed the wrong keyboard shortcut? I just saw a few changes in the properties files but nothing related to keyboard shortcuts.

Btw: Zotero, Mendeley and Papers all call it "Library".

#1988 Comment 5:
It "magically" solved the shortcut issue. Maybe the shortcuts are stored using the translate menu items? @Braunch @mairdl Any comments?

If we change from "database" to "library", we have to change all translations everywhere and also the text at help.jabref.org.  Let's discuss this at the dev call.

#1988 Comment 6:
I think JabRef would assign the wrong keybinding, because of the same german translation for 2 diffrent actions. 

#1988 Comment 7:
@mairdl Please resolve conflicts, address the minor comments. Then it should good to go

@JabRef/stupro-qa  Could you please double-check the final changes by @mairdl? It seems, the Importiere/Importieren thing could not have been solved consistently.

#1988 Comment 8:
@mairdl "Datenbank" is still not consistently translated in all strings, e.g. 
Append_database=Datei_anhängen
Automatically_create_groups_for_database.=Automatisch_Gruppen_für_die_Datei_anlegen.
Close_the_current_database=Aktuelle_Datei_schließen
Closed_database=Datei_geschlossen

same goes for "importieren", e.g.
Importing=Importiere
Importing_in_unknown_format=Importiere_ein_unbekanntes_Format
Importing_in_%0_format=Importiere_im_Format_%0

Please use `strg F` in the JabRef_de.properties file to find all occurences

#1988 Comment 9:
@mairdl Please fix my comment and `Importing_into_Database...`

#1988 Comment 10:
Can you please update the screenshots in your description?

#1988 Comment 11:
Travis seems to be unrelated

#1988 Comment 12:
"Zuletzt geöffenete Dateien" still shows "Datei" and not "Database" :suspect:

#1988 Comment 13:
Well in English it says `recent files` soi I kept it that way. If the key changes i can change it 🎅 

#1988 Comment 14:
Why not changing the key (with all consequences), too?

#1988 Comment 15:
because that is not related to this PR, this would have to be a seperate one (This PR focuses on the German translation, your suggested change would include all language files) I will create a PR for your suggestion. (link will follow soon)

--------------------------------------------------------------
#1987 Comment 1:
LGTM :+1:  When tests are green we can merge it.

--------------------------------------------------------------
#1986 Comment 1:
`2235 tests completed, 3 failed, 33 skipped`

#1986 Comment 2:
Yes, but the integration tests fail without any warning 
No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.

Any idea why? no javafx installed? 

#1986 Comment 3:
There are duplicates in the lang file de and missing keys, too:

> java.lang.AssertionError: Duplicate keys inside bundle JabRef_de expected:<[]> but was:<[Audio_CD, British_patent, British_patent_request, Candidate_thesis, Collaborator, Column, Compiler, Continuator, Data_CD, Editor, European_patent, European_patent_request, Founder, French_patent, French_patent_request, German_patent, German_patent_request, Line, Master's_thesis, Page, Paragraph, Patent, Patent_request, PhD_thesis, Redactor, Research_report, Reviser, Section, Software, Technical_report, U.S._patent, U.S._patent_request, Verse, change_entries_of_group, odd_number_of_unescaped_'#', Plain_text, Show_diff, character, word, Show_symmetric_diff, HTML_encoded_character_found, booktitle_ends_with_'conference_on', All_external_files, OpenOffice/LibreOffice_integration, incorrect_control_digit, incorrect_format, Expected_"%0"_to_contain_whitespace, Syntax_error_in_regular-expression_pattern, Copied_version_to_clipboard, BibTeX_key, Message, Merge_entry_with_%0_information, Updated_entry_with_info_from_%0]>

#1986 Comment 4:
Could you merge `javafx`? This is an addition to #1972? With that fix, we do not need to start the X server on TravisCI, do we?

#1986 Comment 5:
Yes with this fix no X server is need for TravisCI, thus the change in #1972 (below https://github.com/JabRef/jabref/pull/1972/commits/a6ff713b5fc9415d72965a1506690f949908bbdd) is not needed. However, this change is just 2 lines while my fix is 1000 😢 
So if you could live with starting the Xserver for the tests, then my PR is pointless and can be closed.

#1986 Comment 6:
+1 for fewer LOC for getting tests running.

--------------------------------------------------------------
#1984 Comment 1:
Thanks.

--------------------------------------------------------------
#1983 Comment 1:
Thank you for your contribution :smile: !

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1977 Comment 1:
[Kudos](http://blog.openhub.net/kudos/) to both of you!

--------------------------------------------------------------
#1976 Comment 1:
Just my usual remarks about tests: only one assert per test, expressive test names and `assertEquals(List, List)` instead of `assertTrue(list.isEmpty())`. 
Can be merged after fixing these comments.

#1976 Comment 2:
@tschechlovdev thank you for the quick work

--------------------------------------------------------------
#1973 Comment 1:
Thank you for your PR. I am sorry that we reordered our translation files. Now we have huge list of duplicates in your PR.

Travis:

```
java.lang.AssertionError: Duplicate keys inside bundle JabRef_ja expected:<[]> but was:<[Get_fulltext, Download_from_URL, Decryption_not_supported., Please_open_%0_manually., The_link_has_been_copied_to_the_clipboard., Converts_HTML_code_to_Unicode., Check_for_updates, Download_update, New_version_available, Installed_version, Remind_me_later, Ignore_this_update, Could_not_connect_to_the_update_server., Please_try_again_later_and/or_check_your_network_connection., To_see_what_is_new_view_the_changelog., A_new_version_of_JabRef_has_been_released., JabRef_is_up-to-date., Latest_version, Online_help_forum, Custom, Export_cited, Unable_to_generate_new_database, Open_console, Use_default_terminal_emulator, Execute_command, Note:_Use_the_placeholder_%0_for_the_location_of_the_opened_database_file., Executing_command_"%0"..., Error_occured_while_executing_the_command_"%0"., Reformat_ISSN, Countries_and_territories_in_English, Electrical_engineering_terms, Enabled, Internal_list, Manage_protected_terms_files, Months_and_weekdays_in_English, The_text_after_the_last_line_starting_with_#_will_be_used, Add_protected_terms_file, Are_you_sure_you_want_to_remove_the_protected_terms_file?, Remove_protected_terms_file, Add_selected_text_to_list, Add_{}_around_selected_text, Format_field, New_protected_terms_file, change_field_%0_of_entry_%1_from_%2_to_%3, change_key_from_%0_to_%1, change_string_content_%0_to_%1, change_string_name_%0_to_%1, change_type_of_entry_%0_from_%1_to_%2, insert_entry_%0, insert_string_%0, remove_entry_%0, remove_string_%0, undefined, Connection, Host, Database, User, Connection_error, Driver_error, Connection_to_%0_server_established., Required_field_"%0"_is_empty., %0_driver_not_available., The_connection_to_the_server_has_been_terminated., Connection_lost., Reconnect, Work_offline, Working_offline., Update_refused., Update_refused, Local_entry, Shared_entry, Update_could_not_be_performed_due_to_existing_change_conflicts., You_are_not_working_on_the_newest_version_of_BibEntry., Local_version:_%0, Shared_version:_%0, Please_merge_the_shared_entry_with_yours_and_press_"Merge_entries"_to_resolve_this_problem., Canceling_this_operation_will_leave_your_changes_unsynchronized._Cancel_anyway?, The_BibEntry_you_currently_work_on_has_been_deleted_on_the_shared_side._Hit_"Keep"_to_recover_the_entry., Cannot_cite_entries_without_BibTeX_keys._Generate_keys_now?, New_technical_report, Connecting..., Remember_password?, Open_OpenOffice/LibreOffice_connection, You_must_enter_at_least_one_field_name, Non-ASCII_encoded_character_found, Toggle_web_search_interface, Background_color_for_resolved_fields, Color_code_for_resolved_fields, %0_files_found, %0_of_%1, One_file_found, The_import_finished_with_warnings:, There_was_one_file_that_could_not_be_imported., There_were_%0_files_which_could_not_be_imported., Migration_help_information, Entered_database_has_obsolete_structure_and_is_no_longer_supported., However,_a_new_database_was_created_alongside_the_pre-3.6_one., Click_here_to_learn_about_the_migration_of_pre-3.6_databases., Opens_JabRef's_Facebook_page, Opens_JabRef's_blog, Opens_JabRef's_website, Opens_a_link_where_the_current_development_version_can_be_downloaded, See_what_has_been_changed_in_the_JabRef_versions, Referenced_BibTeX_key_does_not_exist, Finished_downloading_full_text_document_for_entry_%0., Full_text_document_download_failed_for_entry_%0., Look_up_full_text_documents, You_are_about_to_look_up_full_text_documents_for_%0_entries., last_four_nonpunctuation_characters_should_be_numerals, shared, should_contain_an_integer_or_a_literal, should_have_the_first_letter_capitalized]>
```

I don't see these duplicate keys in your PR. Do you see them?

#1973 Comment 2:
Thanks for your effort!
It would be easier for you and us if you could create/move your changes to a new branch instead of master.
If you have any further questions or need help, do not hesistate to ask

--------------------------------------------------------------
#1972 Comment 1:
I am not sure whether this is the right approach. Why not merging `master`, take all language files from there and add missing localizations afterwards?

Assumption: `master` has no duplicate entries and nothing has been translated in the `javafx` branch yet.

#1972 Comment 2:
Unfortunately one test still fails and it seems to be JavaFX related as the error message says that it has a problem starting the javafx PlatformToolkit. Locally the error message doesn't appear.

#1972 Comment 3:
Be aware that a message from the localization test that a key is not used anymore might be a false positive! See this commit: https://github.com/JabRef/jabref/commit/05e7f0def59b7c34707f9e0a1f3dc17db678d1f0
This test is not 100% reliable...

#1972 Comment 4:
Why does the " javafx PlatformToolkit" need to be started? We require the start at the integration test and try to avoid UI tests in the master branch. - Is it really required for the localization tests?

#1972 Comment 5:
@koppor the JavaFX FXMLLoader is used to parse the FXML files and find the used language keys there.
@boceckts so now the unit tests pass but the integration tests make problems?

#1972 Comment 6:
Yes but only for the travis ci, running the tests with gradle on my local machine I have no trouble.

#1972 Comment 7:
@tobiasdiez ~~please ignore my last comment!~~ On my local machine the same tests are passing as on the master branch (4 fetcher tests fail which are not related to javafx). ~~For travis ci the unit test LocalizationConsistencyTest doesn't fail but errors as it can not initialize the javafx PlatformToolkit which is required to get the keys from the fxml files as you already mentioned.~~ I read that travis supports ui tests by adding xvfb so I gave it a shot and the error message changed but unfortunately it now errors at the integration tests.
@stefan-kolb I wasn't aware of that, I will check them by searching them manually.

#1972 Comment 8:
Ok, could you please create a new PR only with the View -> ViewModel commit https://github.com/JabRef/jabref/pull/1972/commits/76f176e4701707742416172ab829f841987ebc8b. This can be merged immediately. Then I can also investigate the issue. We will probably need a custom FXML Loader which does not draw the controls but only parses the fxml file. 

#1972 Comment 9:
@tobiasdiez I'm not sure about a custom FXML Loader, the integration tests don't just fail but rather timeout which leads to the assumption that something doesn't get terminated properly. Maybe JavaFX ApplicationThread?

#1972 Comment 10:
So with https://github.com/JabRef/jabref/pull/1986 the tests are now passing but the integration tests still hang. Did you find a way to solve it?

#1972 Comment 11:
Unfortunately not, I tried changing the travis file with different configurations and changing the closing mechanism but so far I had no luck.

#1972 Comment 12:
Ok, but you found a solution so that the unit tests pass? (probably https://github.com/JabRef/jabref/pull/1972/files#diff-354f30a63fb0907d4ad57269548329e3R24, right?). 
If this is the case, please rebase and fix the "unused import"-message. Then we can merge this PR in and think about the integration tests later (or think about how to convince @koppor that we disable them completely :smile_cat: )

#1972 Comment 13:
The line you pointed to was just added to see if there is a change for the integration tests but unfortunately doesn't fix the issue. The unit tests were all passing locally after using this https://github.com/JabRef/jabref/issues/1984 fix and dealing with the duplicate/obsolete/missing translation keys.

#1972 Comment 14:
Ok, then please rebase and we will merge it in.

#1972 Comment 15:
The travis file still needed a small change to enable the LocalizationConsistencyTest with fxml files, otherwise a warning like "unable to open DISPLAY" comes up when testing with travis. The translation files had to be reworked as the console error dialog has been merged in the meantime. And the controller of the error console fxml file had to be extracted from the view class, same as it was the case with the manage journal abbreviations dialog. Now it seems like the unit test are excecuted and some integration test times out.

#1972 Comment 16:
Thanks. Looks good to me. @koppor if the travis changes are ok for you, then we take this approach instead of #1986. Your call.

--------------------------------------------------------------
#1971 Comment 1:
@Siedlerchr please check this removal.

#1971 Comment 2:
Okay for me.

--------------------------------------------------------------
#1970 Comment 1:
Please adjust the javadoc comment and then it's good to merge :+1: 

--------------------------------------------------------------
#1969 Comment 1:
LGTM :+1:, merge as soon as the build is successful. 

--------------------------------------------------------------
#1968 Comment 1:
LGTM :+1:

--------------------------------------------------------------
--------------------------------------------------------------
#1965 Comment 1:
Good work! What does the architecture test enforce? That no more globals are used in logic?

#1965 Comment 2:
Even though another nasty dependency is introduced, this PR is a huge step towards a good architecture.

#1965 Comment 3:
@Siedlerchr yes, no globals in logic or model.

@koppor there are still some dependencies on JabRefPreferences in logic (not just here). Primarily in test, but also in the actual code. As I recall it, Globals.prefs is even injected in some methods, so having this dependency in test is quite OK at the moment...

#1965 Comment 4:
There are currently nine imports in `logic` (most related to preferences classes, but not all) and 42 in `test/logic` of `JabRefPreferences`.

#1965 Comment 5:
Related (to solve parts of it): #1968 #1969 

--------------------------------------------------------------
#1964 Comment 1:
`SpecialFieldDatabaseChangeListener` should be easy to move if it wasn't for the `Globals`. This is one of the situations where I do not really know how to handle it. Using a static variable to say if keyword synchronization is on may be one alternative, but it doesn't really seem like a good way to do it.

#1964 Comment 2:
idea: use an enum `SpecialFields` (with priorty, printed, ... and accepting the fieldname and a list of possible field values [prio1, prio2,...]) and use this in the logic code (in the end this is all you need in logic, right?). Then all the other code could be transferred to gui (especially SpecialFieldValue and thus also SpecialField has so many gui-related things like icons, text and menu descriptions). 

#1964 Comment 3:
This refs https://github.com/koppor/jabref/issues/84. @oscargus Now that you are familiar with the special fields code, could you comment on that?

#1964 Comment 4:
Does undo/redo still work? :)

#1964 Comment 5:
It works exactly as before, yes. Unless I missed something. The code I removed (with comments) wasn't really used. It just filled the compound but didn't add it.

#1964 Comment 6:
As far as I remember, this should be then good to go and in a second PR, https://github.com/JabRef/jabref/pull/1964#issuecomment-246444967 should be thought of?

#1964 Comment 7:
Maybe, some parts are good to go, while others depends on the final solution. I do not fully follow the `enum` suggestion, but I'm not very good at more advanced use of `enum`. More specifically how and where to map `enum` to `Icon` in a way that makes sense.

#1964 Comment 8:
@oscargus: If you feel uncomfortable with implementing the enum solution, I might be prepared to take over. Or we merge this and I submit a new PR. 

I like the idea of improving the special fields, but I am afraid of the miseries that hide in there that I have overlooked so far...

#1964 Comment 9:
@oscargus How is the status here? Would it be possible to merge master into this branch, so we can progress? Most of the things should be easy to merge, but I fear that `SpecialFieldUtils` will not be entirely easy, because of the recent changes to keywords.

#1964 Comment 10:
Ahh, sorry for the lack of attention. Been busy with other things.

Not sure what the aim of the long term solution of the special fields are anymore. Just noticed that a lot of things got made deprecated without an obvious way to a solution.

@lenhard Feel free to take over. 

#1964 Comment 11:
@oscargus No problem! I don't know about the deprecation, but I guess special fields will stay, so refactoring them still makes sense.

I'll take over and try to complete the refactoring. I will do that in a new branch, as I cannot write on yours. I just can't promise as to when this will happen, so we leave the PR open for now.

As a side note: How about creating future PRs directly as branches of jabref instead of on your personal fork? That way it would be easier for members of @JabRef/developers to take over.

#1964 Comment 12:
I sometimes do that (when I want a build that can be tested), but can
switch to it more continuously.

Thanks!

#1964 Comment 13:
After trying to merge master into this for quite some time, I think it might better to just restart from current master and redo the whole thing. With recent changes in master regarding the keyword-stuff, merging `SpecialFieldUtils` is practically a rewrite and that is way less complicated if you do not do it as part of a merge.

#1964 Comment 14:
This PR can be closed, the follow up is #2162.

--------------------------------------------------------------
#1962 Comment 1:
I think the "License: " prefix is not really necessary. "MIT license" is already self-explanatory.  @koppor do you really want this?
Also remove the "snapshot" part in the title, e.g. `3.7dev 2016-09-09`

#1962 Comment 2:
@tobiasdiez I get the version string from `Globals.BUILD_INFO.getVersion();` do you only want to remove "snapshot" in the about dialog or in general? For example copy version also calls the same method.

#1962 Comment 3:
Like the idea with the VersioInfo solution! :+1: 
Is commit included?

#1962 Comment 4:
"snapshot" is part of the builds delivered by builds.jabref.org.
For example:

> JabRef 3.7dev--snapshot--2016-09-12--javafx--bd3dbe8
> windows 10 10.0 amd64 
> Java 1.8.0_101

The complete version string should be shown somewhere in the About dialog.  Does the text wrap work also for this long string without whitespace?

#1962 Comment 5:
@grimes2  yes it will automatically be broken down to fit multiple lines.

![longversion](https://cloud.githubusercontent.com/assets/15340757/18442493/45034776-7911-11e6-9385-1c9cfb630a80.PNG)

#1962 Comment 6:
Ok, leave it like that (with snapshot)...it is only for the dev version, so no reason to be pixel perfect. 

#1962 Comment 7:
That's fine. The normal versions JabRef 3.7 or JabRef 3.7dev will anyway fit in one line. And for the authors all informations are now delivered. Thank you!

#1962 Comment 8:
I still have the opinion that "License:" should be removed, but apart from that 👍 for merge. @koppor your call.

#1962 Comment 9:
After talking to @koppor I changed minor things and how the snapshot versions will be displayed, I updated the screenshots in the description of this pr accordingly.

#1962 Comment 10:
The about dialog is not centered on the JabRef window. See attached screenshot.

JabRef 3.7dev--snapshot--2016-10-06--javafx--5a4e79a
windows 10 10.0 amd64 
Java 1.8.0_101

![grabbed_20161006-181713](https://cloud.githubusercontent.com/assets/1366654/19160726/4042c700-8bf1-11e6-95dc-8572acfb2f53.png)

#1962 Comment 11:
Hmm I just tried it with the jar available at http://builds.jabref.org/javafx/ and it worked perfectly for me :thinking:

![aboutdialogcenter](https://cloud.githubusercontent.com/assets/15340757/19189106/61ec5d8a-8c96-11e6-9bda-4d2b608089a9.gif)

JabRef 3.7dev--snapshot--2016-09-26--javafx--6134490
windows 8.1 6.3 amd64 
Java 1.8.0_102

#1962 Comment 12:
Works on a single screen. Have to connect to an external screen and check again. I have the feeling that JavaFX does not work well with two screens having a different magnification.

#1962 Comment 13:
This was actually tested on a second screen, that's why there are no icons. Your build is also a newer one, maybe this is the reason.

On Oct 7, 2016, 14:22, at 14:22, Oliver Kopp notifications@github.com wrote:

> Works on a single screen. Have to connect to an external screen and
> check again. I have the feeling that JavaFX does not work well with two
> screens having a different magnification.
> 
> ## 
> 
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/1962#issuecomment-252238662

--------------------------------------------------------------
#1961 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1960 Comment 1:
Code LGTM :+1: 

--------------------------------------------------------------
#1955 Comment 1:
I have merged it. Could you please take care of

> net.sf.jabref.logic.l10n.LocalizationConsistencyTest > ensureNoDuplicates FAILED

Maybe @bartsch-dev can help with an update of the `syncLang.py` script?

#1955 Comment 2:
Further, TravisCI shows

> java.lang.UnsupportedOperationException: Unable to open DISPLAY

This is not shown on the master branch. Any clue why this happens?

--------------------------------------------------------------
#1954 Comment 1:
I tried the installer and for me it looks good:
![jabrefgradlewin7utf8](https://cloud.githubusercontent.com/assets/320228/18419487/5f35f612-785c-11e6-8dd8-03bcd3a5d2ec.png)

#1954 Comment 2:
Good news! It works!

Could you please change in DEVELOPERS file Joerg Lenhard to Jörg (to make it perfect).
Thanks for your good work.

JabRef 3.7dev--snapshot--2016-09-11--gradleEncoding--1581dd9
windows 10 10.0 amd64 
Java 1.8.0_101

#1954 Comment 3:
Code LGTM.

--------------------------------------------------------------
#1953 Comment 1:
Add the added localization keys to the localization files.

#1953 Comment 2:
Looks good to me, only localization is missing. 👍 

#1953 Comment 3:
Fixed localization

#1953 Comment 4:
Functionality works as expected. Some minor code comments remain.

#1953 Comment 5:
Renamed variables (as already said the actions cannot be shortened with lambdas).

--------------------------------------------------------------
#1952 Comment 1:
Please resolve conflicts, then it's ready to go.

#1952 Comment 2:
Conflicts resolved.

#1952 Comment 3:
LGTM :+1:  I'll merge it in

--------------------------------------------------------------
#1951 Comment 1:
LGTM - I trust that the keybindings have been reviewed carefully.

#1951 Comment 2:
I know that the tests fail, but this seems not to be caused by this PR.

--------------------------------------------------------------
--------------------------------------------------------------
#1948 Comment 1:
Failing tests are due to ACS timeouts. 

--------------------------------------------------------------
#1947 Comment 1:
LGTM, just change the link to the license and I think this can be merged.
@koppor please check that the new library is included in the correct way. Thanks

#1947 Comment 2:
Please merge `javafx` and add new screenshot.

#1947 Comment 3:
@koppor Merged javafx, why do you want a new screenshot? The layout hasn't changed, only difference is that there is a small JabRef icon in the title bar of the dialog.

#1947 Comment 4:
<s>@boceckts I want to double check that the fix of https://github.com/JabRef/jabref/pull/1954 also works here.</s> I made a screenshot for myself at #1959 to be able to review the current status.

#1947 Comment 5:
The about dialog is not centered on the screen. Does anyone else experience such an issue?

#1947 Comment 6:
I think it is centered on the main frame, not the screen. 

--------------------------------------------------------------
#1945 Comment 1:
On my system the encoding is now working.

![encoding](https://cloud.githubusercontent.com/assets/15456836/18412705/e37dbe5e-7795-11e6-9596-2a17a5eb8561.png)

I changed
filteringCharset = 'UTF-8'
to
filteringCharset = 'ISO-8859-1'

JabRef 3.7dev
windows 10 10.0 amd64 
Java 1.8.0_101

#1945 Comment 2:
Checking @Siedlerchr's changes, it works. @grimes2 I don't get, why ISO-8859-1 works at your side and UTF-8 doesn't. I just merge this in and we can continue evaluating afterwards.

#1945 Comment 3:
It seems that this bug is not fixed.
![wrong_encoding](https://cloud.githubusercontent.com/assets/15456836/18418388/8aabc52c-7845-11e6-9c1e-39aeb5899faa.png)

JabRef 3.7dev--snapshot--2016-09-11--master--f5ed5ac
windows 10 10.0 amd64 
Java 1.8.0_101

#1945 Comment 4:
Yes, you are right. Windows 7 x64 the same.
Edit// I try to look deeper into it,

#1945 Comment 5:
I think I found the reason for it.  Property.load assumes automatically ISO... charset.
I try with wrapping it in an `InputStreamReader`
http://stackoverflow.com/a/17852323

#1945 Comment 6:
Strange, that it was not fixed at your side, here on Win 10, 64bit, the umlauts were displayed correctly.

![grabbed_20160912-000823](https://cloud.githubusercontent.com/assets/1366654/18420865/0ebee934-787d-11e6-9dc8-3194337eb69a.png)

#1945 Comment 7:
@koppor  Nope, if you look closely in the middle you have someone named `Krzysztof A. Kościuszkiewicz`
 where the s -Char is not displayed correctly, only a question mark => Latin 1 (supports only a subset of chars). (I recently read an article about a system in the Swiss Government which had the same problems...)

--------------------------------------------------------------
#1944 Comment 1:
Please fix the two comments and then directly merge it.

--------------------------------------------------------------
#1942 Comment 1:
I just merged my XMLunit changes n #1944.  I think it can useful for you too. Allows checking/validating XML against a schema, too 

#1942 Comment 2:
I think your code looks good but generally I would like to see more comments and try using more lambdas. :+1: 

#1942 Comment 3:
I don't really get why travis is failing... 

#1942 Comment 4:
The problem seems to with the integration tests, not related to your changes

#1942 Comment 5:
Hm, I'm also wondering why codecov is not running the tests. The test coverage should be much higher...

#1942 Comment 6:
I dunno about CodeCo, from my point of view it's good! :+1: 
@boceckts  Please have a final look

#1942 Comment 7:
Okay, I merge it in now as all things are resolved :+1:  Regarding the failing tests we should investigate that in a new issue. 

--------------------------------------------------------------
#1941 Comment 1:
Thanks for your contribution! Merged.

--------------------------------------------------------------
#1940 Comment 1:
The screenshots look good, but I wonder why you touched the language files. Please do one thing at one PR and do not mix issues in a PR.

#1940 Comment 2:
Since I added something to the non menu translation files I updated them via gradle, that's why there is so many changes. I will change it back to use the menu files.

#1940 Comment 3:
Comments have been addressed

#1940 Comment 4:
LGTM :+1:
Please rebase and we merge it.

#1940 Comment 5:
Comments are addressed.

#1940 Comment 6:
Thanks

--------------------------------------------------------------
--------------------------------------------------------------
#1934 Comment 1:
LGTM :+1:
I like this solution. Personally, I wouldn't separate externalfiletypes and externalfile, but this is probably a matter of taste.

#1934 Comment 2:
LGTM as well! And I am in favor of the separation.

Just for clarification before merging: Do you still intend to move `ExternalFileType` and `ExternalFileTypes` into one of the other packages? Or, since the external dependencies on the classes are removed now, will you keep them in gui?

Both ways would be fine in a sense. If those classes are exclusively used in gui, it is fine to keep them there, even if they are could be refactored in a gui-independent fashion. 

Before merging the build has to succeed of course.

#1934 Comment 3:
The plan is to keep it as is as it solves the problem.

One may indeed think of different solutions regarding the amount of packages and there is no clear border, especially considering `filelist`.

Regarding the builds: clearly I picked the wrong field in `ExternalFileType`... Will fix it.

#1934 Comment 4:
Correct field. Bad at reading...

#1934 Comment 5:
Not sure why the Circle CI-tests are not executed, but the things are fixed now anyway.

#1934 Comment 6:
I closed and reopened the PR to give travis another chance to build the branch. 
So can we merge this? 

#1934 Comment 7:
Good idea and it worked! The build succeeded, so we can merge it.

--------------------------------------------------------------
#1933 Comment 1:
Just to make sure: Will this PR keep empty entries at the bottom of the file? (that makes localization much easier)

#1933 Comment 2:
<s>No</s>Yes, it will set each entry to the exact same line as it is in the English file, where new keys are added at the end.

#1933 Comment 3:
Thanks for your quick reply.

#1933 Comment 4:
@mlep  I think for new entries (not yet present in English), they will be still stay and  added at the bottom. 

--------------------------------------------------------------
#1932 Comment 1:
I assume this checks that there is no text above the package declaration? If so, LGTM!

#1932 Comment 2:
Yes, this is exactly what the check checks.

--------------------------------------------------------------
#1931 Comment 1:
Added mapping between note field and comments field.
Now all official fields  should be mapped. I will update help accordingly.

#1931 Comment 2:
:+1: 

--------------------------------------------------------------
#1930 Comment 1:
LGTM :+1:

#1930 Comment 2:
Hm, do we really need two checker for this very trivial functionality? I tend to either not restrict this or make one checker for fields that should start with uppercase letters.

#1930 Comment 3:
@grimes2  Please check if their are other fields which have the same requirements with uppercase letters. It would then be ideal to have one checker (e.g. StartsWitchUpperCaseChecker:..) which checks for mulitple fields. 

#1930 Comment 4:
According to the bibtex specification `edition`, `note` and `howpublished` are the only fields with requirement upper case. The advantage of the field checker (HowpublishedChecker) over "function" checker (StartsWitchUpperCaseChecker) is, that each field checker can be expanded easily, if there are new requirements for that field. Furthermore it should be consistent: FieldChecker or FunctionChecker.

#1930 Comment 5:
I would also prefer a `StartsWitchUpperCaseChecker`. This is probably the only requirement for these fields and even if not then one could still create a new `HowpublishedChecker`. 
We are already mixing field and function checkers, for example `AbbreviationChecker` works exactly like a `StartsWitchUpperCaseChecker`. 

Could you please change the code accordingly, @grimes2. Thanks. ("ready-for-review" removed for the moment)

#1930 Comment 6:
This request exceeds my skills. So I withdraw my pull request.

#1930 Comment 7:
Okay, then I would say that we first merge this and create a follow up issue for this.

#1930 Comment 8:
@grimes2  Thanks for your contribution!  :+1: 
We appreciate that!

--------------------------------------------------------------
#1929 Comment 1:
Is it intentional that 4fc8551cbe2b32e708eeeea20d86b51115b459cb and 443f50fc4e05a56986f9c0dff6790a23f24f9a5e went into this commit? Seems to be unrelated.

4fc8551cbe2b32e708eeeea20d86b51115b459cb und 443f50fc4e05a56986f9c0dff6790a23f24f9a5e (besides the minor comments) both LGTM.

#1929 Comment 2:
Thanks @koppor for reviewing. https://github.com/JabRef/jabref/commit/4fc8551cbe2b32e708eeeea20d86b51115b459cb is needed because it refactors the BibtexParser to confirm to the new `Parser` interface. But https://github.com/JabRef/jabref/commit/443f50fc4e05a56986f9c0dff6790a23f24f9a5e is not really needed (I tried to implement the `doPostCleanup` method via `CleanupWorker` but it turned out to be to messy and unneeded).

Will incorporate your feedback.

#1929 Comment 3:
Went through everything. Besides https://github.com/JabRef/jabref/pull/1929/#discussion_r78320105 everything else are minor comments.

--------------------------------------------------------------
#1928 Comment 1:
The text of the preferences tab is not completely visible, either reword or adjust the width of the side panel.

#1928 Comment 2:
When pressing the up or down button the selected entry becomes deselected and I have to select it again, this can be quite frustrating if I want to move a citation style to the top. Can you please change it so the selected entry stays selected?

#1928 Comment 3:
The preview panel is not being updated after changing the citation style but rather displays always the first selected entry.

Steps to reproduce:
1. go to preferences and add a citation style
2. In the main table select an entry and open the preview panel
3. press F9 to see the newly added citation style
4. select a different entry and the preview panel will not update but use the information of the first selected entry EDIT: it will update the citation style though

#1928 Comment 4:
The preview panel is not being updated after changing the citation style when working with multiple databases.

Steps to reproduce:
1. go to preferences and add a citation style
2. open at least two databases with at least one entry
3. in the main table select an entry and open the preview panel
4. select the second database and an entry
6. press F9 to change to the newly added citation style
5. the preview panel will not update at all but the status says the citation style has changed
When switching to the first database the preview panel has updated and responds to citation style changes.

#1928 Comment 5:
I think it would be great to also add the selected citation styles to the "Export to clipboard" dialog. 

#1928 Comment 6:
When the bugs are fixed and the other minor comments have been addressed then it's fine by me.

#1928 Comment 7:
Fixed the Bug (both were caused by the same thing)
Is the Export to clipboard important? You can already copy the current preview via context menu on the preview panel.

#1928 Comment 8:
<s>The context menu exports text only. Is it possible to export the HTML?</s> When pasting into Microsoft Word, everything is formatted correctly.

The "export to clipboard" is not important. If some interested user requests it, work on it can be done.

#1928 Comment 9:
Is the use of Citation Styles only for the preview pane ?  I have downloaded the latest developer version and connected to a LibreOffice document to see if I could use the CSL styles to format my bibliography, but when I open the "Select style" window, only the jstyle format seems to be supported.  

#1928 Comment 10:
I think, this would be the next logical step: to use Citation Styles in Libre Office.

#1928 Comment 11:
Please open a new issue to offer tracking the status. Maybe @oscargus has some time to work on that.

#1928 Comment 12:
If I use Biblatex style biblio entries, then I have fields like "journaltitle," "location," and "date" instead of "journal," "address," and "year."  These are not picked up by the new Preview citation styles.  

Further, as reported by boceckts above, one can't get the citation style displayed, so as to edit it.

The whole new Preview citation feature is wonderfully helpful. I use it a lot!  Thank you.
--------------------------------------------------------------
#1927 Comment 1:
Apart from the clarification above: LGTM!

#1927 Comment 2:
Well the duplication check just returns a boolean and as that is not checked here it shouldn't make any functional difference. If it was a good idea in the first place is another question though... 

#1927 Comment 3:
LGTM :+1:

--------------------------------------------------------------
#1926 Comment 1:
You have still some checkstyle erorr with your imports. If you run eclipse and have the JabRef profile inlcuded, then you can just do Strg+Shift+o for oganizing imports and your checkstyle error will go away ;)
PS: you should also run ./gradlew check before a commit to see if all is right

#1926 Comment 2:
Ahh. :laughing:  Thanks. Please set label "ready-for review"

#1926 Comment 3:
Looks fine code-wise, solid work! Can be merged, in my point of view.

#1926 Comment 4:
Yes, LGTM, too!

--------------------------------------------------------------
#1925 Comment 1:
To make it a bit clearer for the user, I would rename it "From ID based fetcher".
So the semantic workflow could be  "create new entry from isbn 12346567"

#1925 Comment 2:
Or just "From ID".

I think the idea is really good, but I'm thinking that there may be a better location, like a separate menu item. However, I assume that this is the dialog shown when pressing "new entry" in the toolbar (which I rarely use). No really good idea, but later it may be worthwhile trying to e.g. have a side panel with that functionality (or rather separating the fetcher types in search and ID, I realize).

#1925 Comment 3:
I'm also in favor of a new menu-item + dialog. This also provides you more room to include a bit more details. My proposal:
![Image](https://jabref.mybalsamiq.com/mockups/4933195.png)

Has the advantage that the user need not select the kind of ID he has (most of them are quite distinct and JabRef should be able to tell them apart) and he gets a preview of the entry (which tells him that we put the correct ID in)

#1925 Comment 4:
@tobiasdiez I like the idea, but @zellerdev should do it _in addition_. I like the current dialog by @zellerdev. I vote for doing both!

I like the current "ID-based entry generator" (@zellerdev please rename acoordingly). Rename "Search" to "Generate". Is it possible to place "Cancel" to the right?

#1925 Comment 5:
Please add updated screenshot, also the German screenshot to be sure that everything is translated. Ater that, it should be good to go.

#1925 Comment 6:
Just some small remarks, then this could be merged.

#1925 Comment 7:
Can you rewrite the code to depend on #1885 only. As #1923 depends on #1929, it will take more than this week to get it merged. I don't want to wait that long. - **Update** I think, you code does not depend on these two fetchers, but only your initial comment at this PR. Maybe just comment at these PRs that they should update `EntryFetchers.getIdFetchers()`. Reason: This PR seems (besides minor comments) ready to be merged and we should not postpone it to avoid unnecessary conflict resolutions.

--------------------------------------------------------------
#1924 Comment 1:
It is used in the following dialog:

![grabbed_20160905-201254](https://cloud.githubusercontent.com/assets/1366654/18255035/2ed3e4cc-73a5-11e6-8cd8-7c6c8b4faed0.png)

I think, the reason is that we switched to the material font in #230 and decided to use only material icons there. So, either we adapt the interface to our material icons (see e.g., https://github.com/JabRef/jabref/pull/1549#issuecomment-242361637) or just drop the icon completely. As first step, I would rename `icon` to `materialDesignIconCodePoint` and drop `icon` completely.

#1924 Comment 2:
You are correct. However, since it is not possible to edit the icon the removed methods are not needed.

I noted that I made a mistake though so this cannot be merged yet.

#1924 Comment 3:
Once done it should be possible to split external into gui and logic in a way that makes sense.

Problem 1: the mapping between icon name and codepoint is in IconTheme in gui. As the codepoint is needed in `ExternalFileType` and `ExternalFileTypes` it would be nice to move the mapping outside of `gui`. However, it is not obvious to me if this can be obtained with the code looking as nicely as it is now.

I guess having a set of constant strings would be one option, so in IconTheme it looks like `BLOG(IconMapping.BLOG)` instead of `BLOG("\uf46b")` and in IconMapping (in logic) like `public static final String BLOG = "\uf46b"`, but this isn't really nice. (Maybe one can use enum?)

Problem 2: The OpenOffice icon used was not from material design. Hence, there is currently no icon. 

Problem 3: Migration is not really working yet. As the fifth argument earlier the icon name was saved (which wasn't really used anyway), now the code point is saved. An option may be to save a sixth argument saying if the fifth is icon name or code point. This will also solve problem 2.

#1924 Comment 4:
The objective would be to move `ExternalFileType` and `ExternalFileTypes` to `logic` as a cleanup is dependent on them. The rest should move to gui (from a quick check).

#1924 Comment 5:
Regarding the distinction of the icon names and code points: As far as I understand, code points always start with `\`, whereas I would expect icon names to never start with `\`. So a very simple detection would be: `boolean isCodePoint = myIconOrCodePoint.startsWith("\\");` That could solve problem 2 and 3, right?

Regarding the refactoring of `ExternalType` / `ExternalFileTypes` to get them into logic: The problem is that the classes store an `Icon`. Wouldn't it be possible to replace this instance variable with the code point / icon name, which is just a String? Then, we would need a facility in gui that accepts an `ExternalFileType` and builds an icon from. I have no idea what the effort is for implementing this, though...

EDIT: Nevermind, just looking at the code I see that saving a String instead of an Icon is exactly what you have been doing. The problem is in `IconTheme`. I have a meeting now and will update my comment afterwards.

#1924 Comment 6:
But changing the type from Icon to String, doesn't change the fact that the information is still GUI-related, does it? It's just isn't in-your-face anymore. If you really want to move some part of it to the logic package, then I see no other way then to split it as follows:
- ExternalFileType in logic without any icon information
- ExternalFileTypeWithIcon in gui, deriving from ExternalFileType and providing access to the icon
- Some conversion code which enriches a given ExternalFileType by the icon based on some hard-coded map

But this is probably not worth the effort. In fact, ExternalFileType seems to be used (almost?) exclusively by editors and file dialogs and thus could happily reside in gui, right? Do I overlook something? 

#1924 Comment 7:
@tobiasdiez : I did something similar with FileList half a year ago, splitting into a gui free version and an "extended" one, which was not an appreciated solution then. Yes, it is GUI related primarily, but there is logic code that uses it.

@lenhard : I did a move right now which is architecturally correct (except that I haven't bothered to remove Globals yet). Not nice, but the only way I see to enable moving parts to logic.

#1924 Comment 8:
@tobiasdiez is right of course. If we remove the icon information from `ExternalFileType` completely, it could (and should) even go into model, since it is just a class that represents data.

The map to icons is currently stored in `ExternalFileTypes`, but it should be possible to extract that code to a new GUI class and, as far as I can see, this is the only GUI-specific code.

The `ExternalFileTypes` are mostly used in the gui, but there is some logic code (`UpgradePdfPsToFileCleanup`) and the `pdfimport` code that uses it. Also, we have `ParsedFileField` in `model`, which uses a `fileType` through which it indirectly links `ExternalFileType` via Strings. The problem seems to be somewhat subtle.

I think the cleanest solution would be to extract `ExternalFileTyp` into model and sort of duplicate it in gui to add the icon information to it. @JabRef/developers What do you think?

Btw.: We have the same problem with special fields, which are in a sense `model`, but store an `Icon`.

Edit: @oscargus My comment came to late and I did not see yours before, sorry! How about moving `ExternalFileType` and `ExternalFileTypes` into model?

#1924 Comment 9:
The code point is actually not starting with \ as I understand it, it is just a way to enter unicode characters, so it should be stored as the character (still, the length of that is one character, not several). Haven't come that far though so I can confirm it.

#1924 Comment 10:
@lenhard No worries. I did the latest edits without realizing that there were valuable input to the process... I guess `ExternalFileType` could reside in `model` for sure. `ExternalFileTypes` currently require localization. Somehow, extending `ExternalFileType` as you and @tobiasdiez suggest should also be OK (`ExternalFileTypeWithIcon extends ExternalFileType` with an additional `Icon` field), but it is not completely clear how to deal with `ExternalFileTypes`. Having two lists (`ExternalFileTypes` and `ExternalFileTypesWithIcons`) should be OK, the question is more how to generate them... Not really clear how to deal with it as the logic one is easily created from the gui one, but a call to `getInstance()` in the logic one, cannot get information from the gui one... This can of course be solved by a call to `getInstance()` early in the code, although that is not really the preferred approach... The risk of duplicating to much is that we will need to edit it in two places...

`SpecialFields` is indeed a similar issue that needs to be resolved.

#1924 Comment 11:
An alternative approach is maybe to hard code the file types for ps and pdf (`PS` and `PDF`), which is really what `ExternalFileTypes` is used for in `UpgradePdfPsToFileCleanup`. One might think based on the class name that it is enough to cover ps and pdf files... (It is also used for `evostar_pdf` in the migration but it may be OK to drop that now I think, no idea what it is and no default support for it apart from this.)

#1924 Comment 12:
@oscargus: Hard coding `ps` and `pdf` in the upgrade functionality and dropping `evostar_pdf` seems reasonable to me! After all, the fields are already "hard-coded" in the methods name.

Regarding the duplication, I fail to come up with a satisfying solution at the moment...

#1924 Comment 13:
So this PR is superfluously after #1934?

--------------------------------------------------------------
#1923 Comment 1:
Good timing! In #1929, I introduce the search-query-based ADS fetcher. Since some of the (apparently) open problems are already solved in #1929 (like the post-processing), I think it is best to wait with this PR until #1929 is merged. Or you create a PR onto tobiasdiez:newFetcher, whatever you like the best.

#1923 Comment 2:
Could you please integrate your AdsFetcher class with the new `AstrophysicsDataSystem` and use the new IdBasedParserFetcher (see https://github.com/JabRef/jabref/pull/1998). Thanks.

#1923 Comment 3:
Travis fails the searchByQueryFindsEntry Test due to an `IOException`. When I run the tests locally I have no problems. 
I also found another bug in the `EntryTypeDialog`. Because of the long name of the ADS Fetcher the JComboBox is larger and the `Generate` Buttons moves to the left on my Ubuntu system. I will investigate that.

--------------------------------------------------------------
#1921 Comment 1:
LGTM :+1:

--------------------------------------------------------------
--------------------------------------------------------------
#1918 Comment 1:
For me there are quite some errors in the localization test files, are they intended?

#1918 Comment 2:
What do you mean by errors? Some of the localization tests still fail, but I suspect all of them pass with the fixes of #1753.

#1918 Comment 3:
No I mean, there is an error in LocalizationParserTest that it can't find the `LocalizationParser.JavaLocalizationEntryParser` due to its visibility. Setting it to public gives an error in the LocalizationBundle class.

> The type LocalizationBundle is already defined

#1918 Comment 4:
Thanks, fixed the visibility issue.

#1918 Comment 5:
Now I get the following error

> The type LocalizationBundle is already defined

in the class `LocalizationBundle.java` in src/test/java/ in package net.sf.jabref.logic.l10n

--------------------------------------------------------------
#1917 Comment 1:
Looks good from my point of view

#1917 Comment 2:
GPL headers will be removed as last step before merging the JavaFX branch. Thus, I'll merge this in.

--------------------------------------------------------------
#1915 Comment 1:
Very small comments by my side, otherwise it looks good to me 👍 

#1915 Comment 2:
[![LGTM](http://lgtm.in/p/KxPiQYVnq)](http://lgtm.in/i/KxPiQYVnq)

--------------------------------------------------------------
#1914 Comment 1:
Please set label "ready-for-review". Thank you.

#1914 Comment 2:
LGTM +1, Just let someone other look at it, too.

Another thing I just got in mind is that the whole checker code could be refactored to use lamdbas, because we have a nice Functional Interface. Will create a new issue for discussing that. 

#1914 Comment 3:
LGTM :+1:, too. Just change the order in the if statement as @Siedlerchr suggest and then this could be merged.

#1914 Comment 4:
And please extract the checker to its own file.

#1914 Comment 5:
LGTM from my side now. :+1: 

#1914 Comment 6:
@grimes2 Please rebase this on master and we will merge it in.

#1914 Comment 7:
:+1:

#1914 Comment 8:
Thanks for your contribution!

--------------------------------------------------------------
#1913 Comment 1:
What is the reason behind separating the insert and the duplication check?

#1913 Comment 2:
Most of the callers of `insertEntry` don't use the returned value of the duplication check. Moreover, I find it more readable if the caller first checks if a duplicate already exists (and handles this case appropriately) and then inserts the entry in the db. 

#1913 Comment 3:
Thanks for the explaination. Now code LGTM :+1: 

#1913 Comment 4:
Ok, this sounds reasonable and the code that I looked at (in BibEntry and BibDatabase, as you suggested) looks good. I am merging it in.

#1913 Comment 5:
As commented in the source, the deprecation of constants misses the target. By far.

#1913 Comment 6:
My bad for merging! The changes in methods still have some values, don't they? So, instead of reverting, how about just removing the deprecation marking for the constants again?

@tobiasdiez What do you think?

#1913 Comment 7:
Yeah, it was mainly the `BibEntry`-constants I reacted on, the rest I have
not looked carefully at, but I guess those are fine. The idea from
@tobiasdiez to use get/set/clear is of course 100% correct, but in almost
all cases the constants are not used for that purpose and it is not easily
solved. Unless we want to add methods like `isBibtexKeyField(String
fieldName)` and `isEntryTypeField(String fieldName)` which would solve
maybe half of the issues. Then there is sorting and to some extent tables
left.

#1913 Comment 8:
Another comment: the fact that the duplication checker is not called when inserting the entry means that the keys do not add additional letters after it.

Yes, the callers did more than often not check the return value but now one will have to perform two operations for properly inserting an entry into a database. Both insert it into the database and into the duplicationchecker.

#1913 Comment 9:
Not to mention the fact that the duplication checker will not find duplicates inserted the new way (as far as I can tell).

#1913 Comment 10:
Good practice when marking things as deprecated: make some simple changes of the deprecated function to the non-deprecated function. Here, it would be obvious that the key-tests failed, despite no actual need to check for any duplicates before inserting them. Also, it would be obvious that most of the constants were not used in a bad way etc.

#1913 Comment 11:
Good thing that you bring this back up! It seems it slipped under during this weeks devcall, but we should talk about it again during the next one (propably next week).

EDIT: This PR easily slips under as github hides close/merged stuff. I'll take the link explicitly into the minutes for the next meeting

#1913 Comment 12:
I recenlty discoverd two problems:
The problem with this is deprecated is, that some of the constants are heavily used in a static manner in importers/exporters/fetchers to just check if the current processed field is the bibtexkeyfield.

Second problem: I recently tried to replace getText with getResolvedField in a method and suddenly all kind of test failed....(Unfortunately I don't remember the PR).
So these are not equal/have the same behaviour

#1913 Comment 13:
I reverted it at #2023. Please comment, directly improve, or merge. :octocat:

--------------------------------------------------------------
--------------------------------------------------------------
#1910 Comment 1:
Close, use upstream

--------------------------------------------------------------
#1909 Comment 1:
Can you please add tests for this?

#1909 Comment 2:
Yeah, already planned this. Just wanted to create a first working version.

#1909 Comment 3:
Added export/import test 

#1909 Comment 4:
LGTM :+1:  Please merge.

--------------------------------------------------------------
#1907 Comment 1:
Can you please try to refactor `renameFile(String fileName, String destFilename)` to use java nio as well?

#1907 Comment 2:
Nice that you want to take car of it, well a couple of days ago I already had the same idea: :laughing: 
Feel free to use that for your changes // Edit: There is already code for renaming and a test file
https://github.com/JabRef/jabref/pull/1861

#1907 Comment 3:
@Siedlerchr thx for the notice
@motokito please add tests for your changes/modify existing ones (if applicable).

#1907 Comment 4:
@Siedlerchr Hiho i have done the feedbacks,. Please a look and merge it please 😄 

#1907 Comment 5:
Just merged it in! :+1: 

--------------------------------------------------------------
#1906 Comment 1:
Thanks! The tests fails because of missing translation strings.

If you run the logic/i10/LocalizationConsistencyTest.java you will get a list of strings which are not in the translation files. Add those to the English one and run the script that the output tells you to. Then, all languages are updated and the test should pass (you may have to refresh the files in your IDE in case it fails again). Also, see: https://github.com/JabRef/jabref/wiki/Code-Howtos#using-localization-correctly

If you can add a test to IntegrityCheckTest (or whatever it is called) that really tests for this new feature it would be great.

#1906 Comment 2:
I hope, it is correct now. Please set label "ready-for-review". Thanks.

#1906 Comment 3:
Thanks for your work :+1: LGTM! 
If you reword the changelog, we can merge it in.

#1906 Comment 4:
A probably stupid question: why not just check that the year field consists exactly of 4 digits?

#1906 Comment 5:
@tobiasdiez  Because the offical bibtex spec says so:
See the issue for details:
https://github.com/JabRef/jabref/issues/1897#issuecomment-243756785

#1906 Comment 6:
Got 3 minor comments and then we can merge :+1: 

#1906 Comment 7:
Thanks :smile:  LGTM :+1: 

#1906 Comment 8:
LGTM, too.

--------------------------------------------------------------
#1905 Comment 1:
I do not know if this is the best solution as this relies on balanced brackets and I imagine there may be use cases where it is not necessarily balanced. I think the alternative is to escape all brackets that should be used as text.

#1905 Comment 2:
I think you are right: An escaping character for use with braces in a formatter is probably the most clean solution.

However, since you have already implemented the PR in this fashion, we might just as well merge it and wait until someone comes up with the case of needing non-balanced braces in a formatter statement. @oscargus  I would say it is up to you: Do you want to try a rewrite of this or do you think this can be merged (after addressing the comment by @Siedlerchr , of course)?

#1905 Comment 3:
Right now, I'd say merge as I do not really think I know when I will get around to it. On the other hand, that change may come before the `nio`-stuff. ;-)

For use case, I'd say:

1) filename.pdf
2) anotherfile.txt

#1905 Comment 4:
LGTM :+1:
Things to do before merge: consider moving/reusing some code to/from StringUtils and the nio-path stuff 

#1905 Comment 5:
@oscargus Can you please implement the changes and rebase so we can merge this for 3.7?

--------------------------------------------------------------
#1901 Comment 1:
LGTM :+1: , I will merge this in. The failing test is not caused by your changes. 

--------------------------------------------------------------
#1900 Comment 1:
Good! 
It would be nice, if you could add tests for the examples used in the help file, to assure that they are correctly documented?
And maybe you could also check/take a look at this (problem) here:
http://discourse.jabref.org/t/the-wrapfilelinks-formatter/172

#1900 Comment 2:
It was indeed triggered by that issue, but I didn't come that far.

#1900 Comment 3:
I merge this in to be able to easily continue working on it (as, even though it is not complete, it adds a bit of coverage). Name can easily be changed later.

--------------------------------------------------------------
#1899 Comment 1:
TODO: Pass global as param
TODO: Check relative path

#1899 Comment 2:
@JabRef/developers  I need some help with the GUI: I desperately tried to add the new field below the other, but I can't get it work, no matter what I tried :rage: 

The original layout code is this: 
`FormLayout layout = new FormLayout("1dlu, 8dlu, left:pref, 4dlu, fill:3dlu")` in:
https://github.com/JabRef/jabref/blob/fileDirPattern/src/main/java/net/sf/jabref/gui/preftabs/ImportSettingsTab.java

The new field is there, but kinda hidden. No idea how to change it back:

![settingsimportpanel](https://cloud.githubusercontent.com/assets/320228/18609034/56a523ba-7cf8-11e6-98fa-dbdefb6ca60b.png)

#1899 Comment 3:
Yeah, finally the layout works :sunglasses: 

#1899 Comment 4:
Thanks for the work! I'm really missing this feature in JabRef 3.

However, the current behavior is a little unexpected. First, the file seems to be moved relative to its current directory. For example directory pattern '\EntryType' moves the file with every execution of cleanup to a new subdirectory. For me, expected behavior would be, that the new path is relative to the directory of the bib-file or some otherwise specified root directory. 

Second, the file field in the bib entry seems to be adjusted only, if the option 'Use the BIB file location as primary file directory' is set. Otherwise, the file is moved, but the file path is not adjusted.

#1899 Comment 5:
@dierkes  Thanks for your feedback. I would have asked you to test it otherwise, too ;)
The moving files is a bit complicated as it has to be kept backwards compatible.

The file directory is the first found directory: a) global file dire from setting b) bib file relative c) bib specific setting (atm not sure about the order b and c)

Regarding the file field, I will check it

#1899 Comment 6:
Regarding the new file directory: That's not the behavior I observed.

My test case was:
original file: phdthesis/xyz_2015.pdf (all paths relative to the bib-file)
file name pattern: '\bibtexkey'
file dir pattern: '\EntryType'

cleanup -> phdthesis/PhdThesis/xyz_215.pdf
cleanup -> phdthesis/PhdThesis/PhdThesis/xyz_215.pdf
cleanup -> phdthesis/PhdThesis/PhdThesis/PhdThesis/xyz_215.pdf

It didn't matter if 'Use the BIB file location as primary file directory' was set or if the default directory for files was set. (I tried with setting it to the directory of the bib-file.) I didn't try to set the default file directory for the specific bib-file, however. (Can do that later.)

From my perspective, a backward compatible solution could be: If the file dir pattern is not set, rename the file in its current location. If it is set, move the file to the directory specified by file dir pattern (relative to bib-file directory, if it's a relative path) and rename it there. However, an empty file name pattern could mean a) rename the file in place or b) move file to bib-file directory, so an additional option is probably necessary, that specifies whether moving files is active or not.

Interpreting the file dir pattern as a path relative to the current directory of the file doesn't make sense to me, since executing cleanup would always change the file path. Which is probably the opposite effect one expects from a cleanup ;)

#1899 Comment 7:
Ah I see you are right.

Will look around.

2016-10-14 12:48 GMT+02:00 dierkes notifications@github.com:

> Regarding the new file directory: That's not the behavior I observed.
> 
> My test case was:
> original file: phdthesis/xyz_2015.pdf (all paths relative to the bib-file)
> file name pattern: '\bibtexkey'
> file dir pattern: '\EntryType'
> 
> cleanup -> phdthesis/PhdThesis/xyz_215.pdf
> cleanup -> phdthesis/PhdThesis/PhdThesis/xyz_215.pdf
> cleanup -> phdthesis/PhdThesis/PhdThesis/PhdThesis/xyz_215.pdf
> 
> It didn't matter if 'Use the BIB file location as primary file directory'
> was set or if the default directory for files was set. (I tried with
> setting it to the directory of the bib-file.) I didn't try to set the
> default file directory for the specific bib-file, however. (Can do that
> later.)
> 
> From my perspective, a backward compatible solution could be: If the file
> dir pattern is not set, rename the file in its current location. If it is
> set, move the file to the directory specified by file dir pattern (relative
> to bib-file directory, if it's a relative path) and rename it there.
> However, an empty file name pattern could mean a) rename the file in place
> or b) move file to bib-file directory, so an additional option is probably
> necessary, that specifies whether moving files is active or not.
> 
> Interpreting the file dir pattern as a path relative to the current
> directory of the file doesn't make sense to me, since executing cleanup
> would always change the file path. Which is probably the opposite effect
> one expects from a cleanup ;)
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1899#issuecomment-253768620, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5PlBiKVFhsla2g3oROQ4oKL60iRdks5qz135gaJpZM4Jxp95
> .

#1899 Comment 8:
@dierkes  I fixed it, when all tests are green you could try it out.

#1899 Comment 9:
Now it works mostly as expected for me.

Of course, as described above, with the current state it's not possible to rename a file only (if it's current location doesn't match the file dir pattern). So we might need the option to activate/deactivate moving the files.

And a very strange thing I noticed: If 'FileDir pattern' is empty and 'Main file directory' is empty and 'Use the BIB file location as primary file directory' is not set, then the file is not moved and a directory relative to the JabRef directory (or maybe to the current working directory)  is created with the name of the desired file path. Staying in the example from above, instead of renaming the file to
(literature/) PhdThesis/xyz_2015.pdf
a directory named
(jabref/) PhdThesis/xyz_2015.pdf/
is created.

#1899 Comment 10:
Thanks for the feedback, I will check it
Normally renaming file only should work if fileDirPattern is empty in the
settings

Am 15.10.2016 11:52 nachm. schrieb "dierkes" notifications@github.com:

> Now it works mostly as expected for me.
> 
> Of course, as described above, with the current state it's not possible to
> rename a file only (if it's current location doesn't match the file dir
> pattern). So we might need the option to activate/deactivate moving the
> files.
> 
> And a very strange thing I noticed: If 'FileDir pattern' is empty and
> 'Main file directory' is empty and 'Use the BIB file location as primary
> file directory' is not set, then the file is not moved and a directory
> relative to the JabRef directory (or maybe to the current working
> directory) is created with the name of the desired file path. Staying in
> the example from above, instead of renaming the file to
> (literature/) PhdThesis/xyz_2015.pdf
> a directory named
> (jabref/) PhdThesis/xyz_2015.pdf/
> is created.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1899#issuecomment-254013358, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5AJdZEgO8bkoYc7N76tm89c8-MvIks5q0UshgaJpZM4Jxp95
> .

#1899 Comment 11:
@dierkes  I fixed the strange behaviour. There was some directory path which was just "" and not null, so it was resolved to the current dir of the jar.  Now it only renames the file.
And the old behaviour now works, too, when fileDirPattern is Empty, the file is moved to the file directory, 
The file directories are checked in this order:
 The settings are prioritized in the following order and the first defined setting is used
1. metadata user-specific directory
2. metadata general directory
3. preferences directory
4. BIB file directory

#1899 Comment 12:
This works, almost. ;-)

I encountered a similar problem when dragging a file and dropping it to an entry. When I select to move the file, again instead of a file a directory is created (same path as the file should have).

#1899 Comment 13:
And another issue: If multiple files are linked to an entry, the first file is renamed and the other file links get lost. In JabRef 3.6 the first file is renamed and the other files are moved to the same directory.

#1899 Comment 14:
Thanks for your intenstive testing.
The issue with the drag and drop is now fixed.  There was a problem with the layout which would have been default to bibtexkey if the pattern param is empty.

I am aware of the thing with the multi files. As far as I discovered the first successful rename/move exits the function. Will try to find out why. Not sure if I find time for it next week.

Addtionally I will create some automatic tests, too if it works finally..

#1899 Comment 15:
I think, I fixed the issue with the multiple files, see #2248.

The behavior now, as far as I understand it, is: The function will try to move/rename all attached files. If a file with the new file path already exist (that happens if two attached files have the same file extension), it doesn't move/rename the file and keeps the old file path in the bib entry.

For example, let's consider we have three attached files:
OldDir1/OldName1.pdf
OldDir2/OldName2.pdf
OldDir3/OldName3.txt

The new file paths will be:
NewDir/NewName.pdf
OldDir2/OldName2.pdf
NewDir/NewName.txt

I think, there is some room for improvement. For example, to keep OldName2 but move the file to NewDir, if possible. However, before doing this, I think it's necessary to define the desired behavior in detail.

#1899 Comment 16:
Thanks for your work! Just one thing, it would be nice if you could check that locally, too.
There is a junit test I set to ignore (due to the bug) which should now work, too. Just remove the ignore-Tag
and  execute it (either directly  or run gradlew check)

`cleanupRenamePdfRenamesWithMultipleFiles()` in  `src/test/java/net/sf/jabref/logic/cleanup/CleanupWorkerTest.java`

#1899 Comment 17:
I removed the tag.

When I run `gradlew check`, the test `cleanupRenamePdfRenamesRelativeFile()` in `CleanupWorkerTest.java` fails. However, I think the problem lies within the design of the test. The expected path of the file is `Toot.tmp`, but the actual path is `Misc/Toot.tmp`. I guess, there is some default value set for fileDirPattern.

#1899 Comment 18:
Hm I think the value has to be set to an empty string in the test because
otherwise it will take the value of the settings.

Am 10.11.2016 12:57 vorm. schrieb "dierkes" notifications@github.com:

> I removed the tag.
> 
> When I run gradlew check, the test cleanupRenamePdfRenamesRelativeFile()
> in CleanupWorkerTest.java fails. However, I think the problem lies within
> the design of the test. The expected path of the file is Toot.tmp, but the
> actual path is Misc/Toot.tmp. I guess, there is some default value set for
> fileDirPattern.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.

#1899 Comment 19:
@dierkes  I just fixed the failing test. As I expected it, it was due to the setting which got read

#1899 Comment 20:
Great. Is there a chance to integrate this branch into the next release?

#1899 Comment 21:
Technically, this branch is based on the current master, but not included
with the 3.7 release which will be probably released today

So if you stick for the moment to the dev version of this branch, you have
all stuff from 3.7 release plus this feature.

Of course it will be in the next release then. There are only some tests
which now have to be added to make it ready for a merge
#1899 Comment 22:
Documentation: Could you please add an issue at help.jabref.org or even create an initial page with `skeleton: true` in the header?

You can link https://help.jabref.org/en/CustomExports#built-in-export-formatters for a description of the formatters which can be used.
#1899 Comment 23:
I fixed the things from the review 
#1899 Comment 24:
included feedbacjk
#1899 Comment 25:
One or two of my comments are still open when I look at the Github UI above. Actually I'm only interested why you initialized the Array with a length of 4, I'm fine with the rest as thes are only cosmetic changes.
#1899 Comment 26:
Fixed the rest and the one test which @koppor commented out, in c9726d94686e6687af66476d26b0a1d08c61b41c works fine on travis now again.

#1899 Comment 27:
@JabRef/developers we can merge right?
#1899 Comment 28:
@stefan-kolb @Siedlerchr Yes we can. That is, once the merge conflict in the italian localization gets fixed.
#1899 Comment 29:
@JabRef/developers  all Conflicts fixed.
#1899 Comment 30:
Hi, on my system two tests are failing, cleanupRenamePdfRenamesWithMultipleFiles and cleanUpRenamePdfRenameFileDirectoryPatternSubDirectory. However, the problem seems to be that these and other tests do not remove the temporary files properly after execution. The behavior of the cleanup function itself is as expected, but since a file with the target path exists already (left from another test), the attached file is not renamed and the assertion fails. I'm running the tests on Fedora.
#1899 Comment 31:
Thanks  for  the feedback, I  will  check  that.

Am 06.12.2016 11:45 nachm. schrieb "dierkes" <notifications@github.com>:

> Hi, on my system two tests are failing, cleanupRenamePdfRenamesWithMultipleFiles
> and cleanUpRenamePdfRenameFileDirectoryPatternSubDirectory. However, the
> problem seems to be that these and other tests do not remove the temporary
> files properly after execution. The behavior of the cleanup function itself
> is as expected, but since a file with the target path exists already (left
> from another test), the attached file is not renamed and the assertion
> fails. I'm running the tests on Fedora.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/JabRef/jabref/pull/1899#issuecomment-265297567>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AATi5I43yoo4Vp5qizL0mHwTdMyVBieXks5rFeWEgaJpZM4Jxp95>
> .
>

#1899 Comment 32:
Should now be fixed. Was some Preferences problem as I already thought. Mocked it away.

--------------------------------------------------------------
#1898 Comment 1:
Works like a charm and the code looks great as well 👍 
Please resolve conflicts and it's good from my side.

#1898 Comment 2:
Rebased.

#1898 Comment 3:
LGTM from my side, too :+1:  I would merge it in then.

--------------------------------------------------------------
#1896 Comment 1:
If you change the one variable name to a more expresive one, I'm fine :+1: 

#1896 Comment 2:
I second @Siedlerchr's opinion: LGTM. Just move some of the test code to `@Setup` and change the variable name, then this can be merged. (I thus remove the ready-for-review tag)

--------------------------------------------------------------
#1894 Comment 1:
LGTM,  just some misisng space in the changelog  :+1: 

#1894 Comment 2:
Added `lower_case`, `upper_case`, `sentence_case`, `capitalize`, and `title_case` modifiers (the two first are just additional names).

Unmodifiable return from `Title.getWords()` but the function of the modifier rely heavily on mutable `Word`.

#1894 Comment 3:
@oscargus Could you follow up so that we can merge?

#1894 Comment 4:
@koppor / @oscargus  pls also move `metadata.setBibtexKeyPattern(bibtexKeyPattern);` to the setup method

#1894 Comment 5:
@tobiasdiez Sorry for overlooking your second move comment. I also created `Formatters.getFormatterForModifier`. Hope, this is good to go now.

The tests are locally OK. The failing test is unrelated to the update.

#1894 Comment 6:
Yes, looks good now. Thanks @koppor for finishing this PR 😄 

--------------------------------------------------------------
#1893 Comment 1:
Please add label "ready-for-review". Thanks.

#1893 Comment 2:
LGTM :+1:  I tested your changes and they are working. Good work!
Please resolve the merge conflicts and then we can merge it it.

To resolve the merge conflicts I recommend installing and setting up a merge tool for 3way merge (e.g. Meld or kdiff3 or your favorite tool)
Then you do 
git checkout master
git fetch upstream
git merge upstream/master
git push
`git merge upstream/<yourBranch>`
Open Git Gui to see and resolve merge conflicts 
Be careful with the changelog,

#1893 Comment 3:
Well done :+1:  Merged.

--------------------------------------------------------------
#1891 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1889 Comment 1:
Thanks!

--------------------------------------------------------------
--------------------------------------------------------------
#1885 Comment 1:
It would be really nice if you could address #1799  here as well. (I think the fetcher just has to be called in background thread somehow)

#1885 Comment 2:
The SwingWorker commit looks really interesting (and not so hard to use...)! :+1: 

#1885 Comment 3:
Fixed a Bug when editing the Doi field and using the get BibTex button right beside it.
When saving the changed doi field to the BibEntry it rewrote it to the textfield which disabled the fetcher and enabled it again which aborted the useres click.

#1885 Comment 4:
Could please add an additional test for an article (instead of book), for example doi: 10.1109/ICWS.2007.59. I think afterwards we can merge it.

#1885 Comment 5:
Before this is ready to go:
- [ ] Fix localization issue.

#1885 Comment 6:
No idea why the integration tests don't work here. @JabRef/developers should we merge nonetheless?

#1885 Comment 7:
Sure. Maybe, we should disable the integration tests (refs #1524).

--------------------------------------------------------------
#1884 Comment 1:
Good that you give it a go!

#1884 Comment 2:
Strict comparison: We should also consider the type.

Correlate by words: I think, you did not find any other algorithm? Can't an existing algorithm be used? Something like counting the similar and the different words and dividing by max(len1, len2)?

Small benchmark: Can we do that as a separate issue? Maybe in the koppor-repo? :innocent: 

#1884 Comment 3:
What is the state of this PR?

Another improvement to the duplicate algorithm concerns how DOI, ISBN and edition fields should be weighted:
- Entries with the same DOI or ISBN are almost surely duplicates although they might have different titles or authors (Citavi [is doing something similar](https://www.citavi.com/sub/manual4/en/eliminating_duplicates.html))
- Entries which are almost identical but for edition or volume are probably no duplicates (but just a different version of the same book/article)

#1884 Comment 4:
And again: @stefan-kolb Is there an advance here? I think at some point, we should either try to proceed with the old PRs or scrap them.
#1884 Comment 5:
No time right now. There are some point that we should fix however. You can close if you want tho.
--------------------------------------------------------------
#1883 Comment 1:
Please also try to consider the wishes at http://discourse.jabref.org/t/seamless-crossreferencing/100/6 - if possible.

#1883 Comment 2:
Please make an English screenshot and please add pseudo data. I am really confused why there are no comments shown below "Comments".

You can create PDFs using the templates available at https://github.com/latextemplates/

If you compile https://github.com/latextemplates/uni-stuttgart-dissertation-template, you should get a PDF with comments, too.

This approach ensures that you use PDFs without copyrighted text. The PDFs you used for the screenshots should also be used at test cases.

#1883 Comment 3:
Is there an updated screenshot available?

#1883 Comment 4:
@koppor yes, now it's ready:

This is a screenshot of our current version for the PDF-Tab-UI:
<img width="942" alt="pdf_tab_ui" src="https://cloud.githubusercontent.com/assets/15333533/18715257/eed18ac0-8018-11e6-8360-32640bf504ba.PNG">

The left panel shows the comments and highlighted text of the PDF file. On the right side we have an information panel.

On the left panel you can choose from a dropdown menu which attached PDF-file you want to open.
<img width="240" alt="dropdown_filename" src="https://cloud.githubusercontent.com/assets/15333533/18715309/25910f0e-8019-11e6-982a-f5824ec44fdf.png">

If the selected annotation is linked with a highlighted text or the other way around, the corresponding entry will be colored in light blue. Also, the content box will combine the information of both.

#1883 Comment 5:
Are there any comments on the concept? Did someone try it out? It is the last week of our project and it would be great if we at least get a working concept that can easily be integrated into JabRef afterwards. 

#1883 Comment 6:
I didn't tried it out, but the screenshot above looks good. Do you need feedback to a specific feature/implementation detail?

#1883 Comment 7:
No the general impression and if you believe the implementation is useful for the user. The only specific thing I can think of is if showing both highlighted text and the annotation linked to it in the comments list on the left makes sense or if it's redundant. Maybe one entry for both and showing the linked content in the content box on the right is enough?

#1883 Comment 8:
Of course it is useful if the user has PDFs with comments / highlights. I think it is enough to have on entry for the highlighted text and its annotation in the left list, details then right.

#1883 Comment 9:
I just had a quick look over the code and in general it looks good. 
The only bigger thing is, that you often coded against an instance instead of an interface (for example PdfCommentImporter vs a general CommentImporter interface). This makes it hard to support different file formats. For example, djvu also has annotations (which might be a better word instead of "comments" ?) and it would be nice if we could (later) add support for these, see https://github.com/gthurm/javadjvu/blob/920f36db24f70b7dd9038073ead9c5ad476d8d7a/src/com/lizardtech/djvu/anno/DjVuAnno.java#L361. 
In a similar direction, I would rename "PDF comments" to the more general "File comments / annotations"

#1883 Comment 10:
I now introduced an Interface for comment importers and renamed the `pdfComment` class to `fileAnnotation`. For consistency I also renamed the tab to `FileAnnotationTab` and changed the Strings referring to PDF to something with File instead. I had also thought about creating an `AbstractFileAnnotation` class, but I think the meta info you want to get from the annotation will probably be the same no matter the format, so you just need to map the annotation to the model classes parameters.  

#1883 Comment 11:
I have necountered a problem with the travis-ci check. It fails with: `is net.sf.jabref.logic independent of java.awt?] FAILED` 
The only awt class used is the awt.geom.Rectangle2D which is needed to extract the highlighted text from a pdf. Can I just ignore the failing check?

#1883 Comment 12:
@Braunch  The tests are there to ensure a separation of logic and gui. And as normally the awt classes are associated with gui stuff, they should be not used in logic. 
Mabye @lenhard  has an idea for the architecture

#1883 Comment 13:
Sorry, but no GUI technology in logic. The check cannot be ignored. I know this is not your fault and you get the dependency from pdfbox. This is rather bad design on side of pdfbox/awt, but we will not bend our architectural constraints for that. Is it possible to implement the text extraction without the awt dependency? If not, than the code needs to go into the gui package.

What version of pdfbox is that? We have quite some problems with the library, because the XMP support depends on it and we cannot upgrade it without losing XMP support. This is where our "dependencys outdated"-badge comes from.

#1883 Comment 14:
Quick hack: net.sf.pdfboxbridge package? 😇

@braunch you find @lenhard s PR for updating PDFBox on the on-hold labelled
closed PRs

#1883 Comment 15:
The problem is that pdfBox can not extract highlighted text, but text within an area. This area has to be represented by a Rectangle2D. Putting the code into the GUI would be a solution, but it bends the architectural constraints anyway, only the other way round.

#1883 Comment 16:
I will have a look at the PR as soon as I am finished with the caching. 

#1883 Comment 17:
@Braunch You are entirely correct in the view that the gui package is a mess. It is the infamous part of JabRef, where "anything goes" and where we quarantine the toxic stuff. That is why putting the code into gui is less of a problem than compromising the logic package.

Here is my PR on upgrading pdfbox: https://github.com/JabRef/jabref/pull/1096

@koppor Wasn't there an attempt in stupro to encode all XMP stuff into dublin core? That would solve our pdfbox XMP problems.

#1883 Comment 18:
@StuPro could not work on that due to time constraints and the task was
also to think about migrations, current use cases etc...

#1883 Comment 19:
Would it be possible to create an exception for awt.geom package? This package seems to contain only geometry and logic related classes. There is no real GUI stuff inside and if awt geometry should be needed in the future you would be forced to do all the geometry logic in the jabref.gui packages. I am implementing @koppor s quick hack but to me it looks wrong to have a package with the same architectural hierarchy than net.sf.jabref that only contains one method. 

#1883 Comment 20:
Why would we need geometry in JabRef? In my honest opinion, the use case here is already quite weird.

As always in JabRef, things will be decided by consensus of @JabRef/developers I'll vote for making no exception, though.

#1883 Comment 21:
Ok then. I pushed the quick hack with the bridge to awt. 

#1883 Comment 22:
I support @Braunch here and would vote for an exception for `java.awt.geom`.
Reasoning:
- The `PdfAnnotationImporterImpl` class analyzes pdf files and thus is correctly placed in the logic package (its the same as `BibParser` which analyzes bib files)
- `awt.geom` has no gui code but is a model class in our terminology (the only reference to gui is that the represented objects have a geometric interpretation)
- If the same code would be placed in a package with a different name, then there wouldn't be any problem... but names are no more than smoke and mirrors.
- The hack/workaround https://github.com/JabRef/jabref/pull/1883/commits/31d975b5e81f04937a10a0f9ec547fdd55b447b1 is quite ugly. In the end, the code still depends on `awt.geom`, just that the dependency is indirect and thus our tests are not able to detect it.
- We will have the same problem with the JavaFX `ObservableLists` which provide a convenient implementation of the list interface (firing events upon update). But they are placed in `
  javafx.collections` and thus would not be allowed in logic (if we decide to ban `javafx` as we did with `swing/awt`.) 

#1883 Comment 23:
I would follow the argumentation by @tobiasdiez. As he says names are just hollow words. Add an exception for awt.geom. I took a quick look at the package api doc and it seems like it contains not any logic for drawing, but just proving a model

#1883 Comment 24:
So we decided in the devcall that we will create an exception for the `awt.geom` package. So please modify the code of `ArchitectureTests` to exclude the package and I will have a look to see if I like the way in which you implemented it ;-)

#1883 Comment 25:
Ok I will change that back and add the exception.

#1883 Comment 26:
I added an `exceptionStrings` map that uses the first package as a key and a list of exceptions as value. When checking the imported packages I then filter for packages, that have the first package as key and are imported there. If they are exceptions, they are not added to the list of files. Adding more exceptions is easy. Just add them to the list in the map that belongs to the corresponding key. 

#1883 Comment 27:
Ok, the test works. In my honest opinion that is a good example that lambdas are hard to understand when they get big. So, could you perhaps just refactor the test a little bit to make it more easily understandable? 

What I am thinking about is extracting the boolean parts of the lambda into predicates that you define at the start of the method and then just reusing that, i.e.:

```
Predicate<String> isExceptionPackage = (s) -> (exceptionStrings.get(firstPackage).stream()
                                .filter(exception -> s.startsWith("import " + exception)).findAny().isPresent()
                        );
```

and then you can call

```
...
 !(isExceptionPackage.test(s))
...
```

Please add and use this predicate and build at least one more nicely named one for another boolean condition. Then the lambda will be much more readable and I promise that I will be happy :-)

P.S.: The localization tests fail, so this needs to be fixed before merging as well.

#1883 Comment 28:
That is a good idea. The filters are getting unreadable. But I think I have to rewrite the predicate a bit different, because the predicates are the parameters for the filter and the one you wrote is just one condition for the predicate of another filter so a boolean is expected. I put the whole predicate in it (still a big filter but already way better to read) and extract the isPackage predicate from the filter above too.

#1883 Comment 29:
I just had a look at the `ArchitectureTests` and am happy with them. So, from my side this is good to go. Someone else should double check the main functionality, though.

#1883 Comment 30:
Is this PR ready for review? (I saw a few "TODO" statements in the code, so I suspect it is not yet finished.)

#1883 Comment 31:
No its not ready. I dint try the open pdf on an other setup than linux/acroread
So this is TODO.

#1883 Comment 32:
@Braunch Any news? Any timeline?
#1883 Comment 33:
The code is moved over to #2545 and this can be closed.
--------------------------------------------------------------
#1880 Comment 1:
LGTM

--------------------------------------------------------------
#1876 Comment 1:
I'm thinking that the distinction between keyword and keywords is not enough. What do you suggest? anykeyword? singlekeyword?

#1876 Comment 2:
Also, when writing a bit more search queries for the tests: is `allfields` a good name? Seems like `anyfield` would be better. (And then `anykeyword`)

`anyfield contains fruit and anykeyword matches apple`

#1876 Comment 3:
Difficult question... To me `anykeyword`  would be okay in this context and it's shorter than singlekeyword.
E.g thinking of  `anykeyword == "test"` it has clear semantics 

#1876 Comment 4:
Be aware of backwards compatibility. People may be used to "allFields" already..

#1876 Comment 5:
`allfields` has been around for 8 hours so I doubt it has been that well established. ;-)

#1876 Comment 6:
Overall lgtm, you could replace that one case with a stream too and maybe add some test regarding umlauts...(not sure if they are actually handled correctly)

#1876 Comment 7:
I find the `anykeywords` field a bit counter-intuitive. I would change the search syntax to search for the exact expression vs "contains":
- `keywords == test`: matches only when the content is equal to `test`.
- `keywords <> test`: matches if it contains `test` as a keyword. (or maybe a different symbol in place of `<>`)

#1876 Comment 8:
@JabRef/developers Opinions?

Personally, I think that adding a search operator which only can be used for a specific field is a bit counter-intuitive. 

#1876 Comment 9:
I like `anykeywords` better than a new operator.  Especially the search query can be read as a whole sentence and is for the user directly recognizable and has a clear semantic, e.g.`anykeyword contains test`

For an operator I would expect it to work everywhere, not containing any special semantics for a specific field.

#1876 Comment 10:
But one could also have different fields with values separated by some character ("keyword fields"). For example, it would make sense to search for entries in specific groups or some user defined fields. But one probably doesn't want to define `any*`-pseudofields for all fields.

#1876 Comment 11:
You do have a point, but:
- there are quite few such fields at the moment
- the separator discussion is ongoing and far from concluded, less
  implemented
- group hierarchies/restoring need to be improved
- and, also important in this context, I have no idea how to introduce a
  new operator

Hence, this has to be postponed and done by someone else. If it is likely
to happen we can just put this on hold and see. If it doesn't happen before
3.7 is released, I suggest we merge this in.

Clearly, it would also be much better if `anyfield` didn't have to exist.
but any term without a field specified does search in every field, even if
fields are specified elsewhere. Again, a hypothetical better solution
compared to an OK existing.

(Btw, I think that one can already search for groups, although it will be
in the "contains" way to make sense.)

#1876 Comment 12:
Alternative: Use [Apache Lucene's Syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html) - see #1975

#1876 Comment 13:
We discussed the following at the devcall: The search parser should be extended to support an `any*`  syntax, e.g. it checks if a search term starts with `any`, if so it cuts of the `any` part and tries to use the remaining part as a field name. In this fashion, we would have support for the `any`-functionality for arbitrary fields, which sounds quite cool. Effortwise, it should just require some String manipulation in the query parser. @oscargus Would you be willing to implement this here?

The long term goal would be to move towards a sophisticated query parser, such as Lucene. However, the effort for this and the required time is quite unsure.

#1876 Comment 14:
I do not get it. First, `anyfield` does not apply to the logic described and still needs to be treated separately (and this is really the main thing of this PR). Second, the whole point of `anykeyword` is that one can _split_ the keywords field into smaller parts (and `anykeywords` sounds, ehh, strange...) and match one of these parts (exactly, as contains is more or less the same thing as before). Yes, it might work for e.g. `authors` but I cannot really see the point or how. In that case it may make more sense to be able to match the last name or first name or so, rather than the whole name. The key thing here is how to split the fields and that is field dependent (I can see a few fields where it might work: `related`, `authors`, `file` and there are probably some more. Most it won't make sense for.)

So, no, as I do not understand how it should be done (in a way that makes sense).

#1876 Comment 15:
Dumb question: What currently happens when searching for a keyword? Isn't
substring matching enough?

#1876 Comment 16:
Say you have two keywords `aa` and `aaa`. Currently you cannot search for `aa` without also finding `aaa` (assuming there is more than one keyword for each entry, so you need to search for `keywords=aa`). With this PR you can do `anykeyword==aa` and only get entries where one keyword matches `aa` or `anykeyword!=aa` to get entries without that keyword. (`anykeyword=aa` will get both `aa` and `aaa`, so in that case there is not difference to before.)

#1876 Comment 17:
OK for me. <s>Just resolve https://github.com/JabRef/jabref/pull/1876/files#r78694966 and then we can merge this in</s>.

#1876 Comment 18:
@oscargus based on your description, the problem is not specific to the keywords fields. For example, I can't find the author `aa` without also finding `aaa` and the same for  `aa` in the abstract field. This is why I suggested to use a new comparison operator which checks that the search string is exactly a "word" and not just a substring (and for the keywords field we maybe can be so intelligent and only take the keyword separator as word separator). 

I think the standard solution is: only match whole words (i.e. `aa` only matches `aa` but not `aaa`) and use wildcard queries like `aa*` to match `aa` as well as `aaa`.

#1876 Comment 19:
:+1:  for the wildcard query option. e.g. \*  and ?

#1876 Comment 20:
As I wrote there are a few more fields, yes, put providing a generic split
is more or less impossible (`and`, `,`, `,`). In addition there are more
fields that can't be split than the opposite. `anyyear`? `anyissue`?
`anyabstract`? For author, you more likely want to search for
`lastname==aa` than `anyauthors=="a. aa" or anyauthors=="aa, a."` (not to
mention you actually search for a specific author, not a specific
lastname), so adding something similar for names would make sense, but I do
not see that as `anyauthors`.

My suggestion is that we add `any`-support for the fields where it makes
sense and as this needs to be done specifically for each (class of) field
it can be done incrementally.

#1876 Comment 21:
:+1: - @oscargus please solve https://github.com/JabRef/jabref/pull/1876/files#r78694966, then we can merge and then we can work on other fields in another PR. I'm trying to keep the PRs small and want to merge them fast.

#1876 Comment 22:
The new github review is a bit strange... no idea why there are now two comments and one approval. It should be actually "one comment" :smile: 

#1876 Comment 23:
Correct, `fruity and keywords=apple`does not work, that was more or less the issue to start with. Feel free to propose a PR solving it in the proper way (I quote myself: "The allfields approach should be quite feasible to implement, although somehow it would be even better if not specifying a field leads to that behaviour (that I do not know how to do though).").

Incomplete, yes. But not really possible to generalize. Hence the need for more PRs improving the search, which, I guess, can always be improved.

--------------------------------------------------------------
#1875 Comment 1:
Please label "ready-for-review". Thanks.

#1875 Comment 2:
@grimes2 Can you please address the comments?

#1875 Comment 3:
LGTM :+1: (without actually having tested the code)

Could you please rebase so that we can merge it? Thanks

#1875 Comment 4:
Sorry I missed that. Please merge.

--------------------------------------------------------------
#1874 Comment 1:
In the second commit groups, much of search, and a few methods from StringUtil is moved. The only logic dependency now is Localization. Is there a clever way to solve this? Localization is needed to generate the description for searches and groups (and some exceptions, although those can be removed I think).

#1874 Comment 2:
@JabRef/developers I managed to move everything to model without any logic imports. Some things are not so nice. The main problem at the end was Localization. Hence, the name of AllEntriesGroup will have to be propagated. Also, as some error messages were derived from a localized exception message, two of these are currently not localized.

Some observations:
- `getDescription` was never used for the groups
- Some strings missed spaces and translation arguments
- `UnsupportedVersionException` was never used

I have not moved the tests as this was more or less an experiment to see if it was feasible at to what cost. If you think it is a good idea, I will move them as well.

#1874 Comment 3:
Looks good! I know that you only copied the methods to new places, but it would be nice to fix those  unnecessary int/char conversions, 

#1874 Comment 4:
I checked out the PR locally and reviewed the code. I think this PR is a good thing that more or less completes the moving to the model package. I was actually surprised to see that moving `MetaData` was (relatively) feasible. I suggest you go ahead and adjust the structure of the tests, too.

Some remarks / things to improve: 
- Somebody has recreated the event package and added a few events. These should go into the event package in model. Could you perhaps move them as part of this PR and delete the re-introduced top-level event package?
- I think it would be worthwhile to bundle `MetaData` and its related classes (`SaveOrderConfig`) in a subpackage of model, e.g. `model.metadata`.
- My IDE marks `MetaData.initializeNewDatabase` as unused. So why not remove it?
- `BibDatabaseContext` should be moved into `model.database`.
- I think it would be better to keep `Defaults` in the root package, since it a rather global aspect (a simple one, also). What about changing the type of the `defaults` variable in `BibDatabaseContext` to `BibDatabaseMode`? You would have to modify the constructors, but from what I see it would disentagle `BibDatabaseContext` and `Defaults`.
- The tie between `BibDatabaseContext` and `DBMSSynchronizer` is not good. We will have to change it sooner or later. However, this need not necessarily be part of this PR.
- I don't quite like `ModelStringUtil` (and vaguely remember extended discussions with @tobiasdiez  and @simonharrer about such utility classes). How about renaming it to `StringUtil` again? Sure that might result in naming conflicts, but the fact that it is included in `model` already adds that information to that class. And I assume that no class needs to import two `StringUtil` classes anyway, since the methods are just duplicated.
- I find the propagation of localization not so problematic (especially since no better solution comes to my mind at the moment). It is not in too many positions right now and there will not be many future problems, since the model package is practically complete with this PR.
- Also the moving of group related aspects (`GroupTreeNode`) is fine by me.
- Moving parsing/serialization out of the `MetaData` is the right thing to do. After all `BibDatabase` also does not care about this, `BibDatabaseWriter` does. You made the correct decision in my point of view.

I hope this feedback answers your questions :-)

#1874 Comment 5:
Thanks for the elaborate feedback.

Just some quick partial comments from the phone:

There are methods classes that use both StringUtil and ModelStringUtil,
hence the naming to avoid fully specified paths. Maybe better to duplicate
the code then (now they are moved)?

One out of parsing and serialisation can now easily be moved back
(serialisation I think, since it is only OS.NEWLINE that must be injected
and maybe an odd StringUtil method copied/moved). Not sure what is the best
way. There has also been discussions about self-contained serialisation.

Your package suggestions are fine with me and makes sense. Will implement.

Let's just see how many conflicts I get. ;-)

#1874 Comment 6:
Regarding `Defaults` vs `BibDatabaseMode`: I do not really see the point of `Defaults` to start with, but I guess that the idea may be to add more defaults to it. On the other hand,  found this quite interesting piece of code:

``` Java
        Defaults defaults = new Defaults(BibDatabaseMode.fromPreference(Globals.prefs.getBoolean(JabRefPreferences.BIBLATEX_DEFAULT_MODE)));
        BibDatabaseMode mode = new BibDatabaseContext(pr.getDatabase(), pr.getMetaData(), defaults).getMode();
```

So either these lines have just propagated through a number of refactorings without someone really looking at them or there is something more to it...

#1874 Comment 7:
The idea of `Defaults` was to encapsulate more than just the mode inside a Defaults class. Was done by @simonharrer and me on the way back home after JabCon as far as I remember.

#1874 Comment 8:
OK, then I leave `Defaults` as is for now.

#1874 Comment 9:
I'll mark this PR as a discussion point for the next devcall, since I think there are some...well..points for discussion 😄 

#1874 Comment 10:
Our decision at the devcall: @oscargus Please introduce the packages `model.entry.event`, `model.database.event`, `model.groups.event` and sort the relevant events into these packages. Thereafter, you can update the branch and we can merge it into master.

#1874 Comment 11:
Rebased and implemented changes.

With the recent changes `RemoveLatex` was moved back to `logic` and instead `LatexToUnicode` ended up in `model`. 

--------------------------------------------------------------
#1872 Comment 1:
Hardcoded keyword separators in all tests.

#1872 Comment 2:
@oscargus There are some checkstyle errors.

```
:checkstyleTest[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/test/java/net/sf/jabref/gui/importer/actions/ConvertLegacyExplicitGroupsTest.java:13: 'org.junit.Before' should be separated from previous imports. [ImportOrder]
[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/test/java/net/sf/jabref/logic/groups/ExplicitGroupTest.java:7: 'org.junit.Test' should be separated from previous imports. [ImportOrder]
[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/test/java/net/sf/jabref/logic/groups/GroupTreeNodeTest.java:12: 'org.junit.Before' should be separated from previous imports. [ImportOrder]
[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/test/java/net/sf/jabref/logic/groups/KeywordGroupTest.java:5: 'org.junit.Test' should be separated from previous imports. [ImportOrder]
```

#1872 Comment 3:
Yeah, noted that. Will fix soon. (Annoying thing when you remove the last import in a block...)

#1872 Comment 4:
I'm not sure whether the `shared` related changes are a good idea... A small change in `DBMSSynchronizer` bubbles up to `BibDatabaseContext` where an additional constructor and statements like `// As it is set to local, the keywordSeparator is not used` are necessary...

Well, the dependency to Globals is gone in DBMSSynchronizer but I don't think the overall quality of the code has improved with this... 

Perhaps its a better idea to always create a "local" BibDatabaseContext which than can be changed to a "shared" one using a method call (which requires the `keyword separator` as a parameter)?

#1872 Comment 5:
In general, I agree that the code quality not necessarily increases with
architecture constraints. ;-)

Yes, I think it is a better idea to do as you say. I just noted that it
wasn't an issue creating a local database without the keyword separator
(that annoying keyword separator that is ignored to such a large
extent...), so I thought that this was at least a better solution compared
to adding it as a required argument...

I'll see what I can do.

#1872 Comment 6:
New attempt.

#1872 Comment 7:
Btw, the idea about the change was to be able to move DBMSSynchronizer to its correct place more easily by getting rid of the Globals (which probably should be logic, but looks like model if we should be able to move BibDatabaseContext to model). However, it is one of these things which will be very hard to solve architecture wise, as there is a quite tight connection to DMBSProcessor which is connected to other things and so on.

I do not really like the non-gui/logic packages: collab (easy to move to gui though), external (impossible to move ExternalFileType as it is used in MetaData(?)), pdfimporter (hard to move as some logic methods call gui through it), shared (connections to BibDatabaseContext), and specialfields (connections from model straight into gui). (cli and preferences are OK.)

#1872 Comment 8:
Minor, but quite important from me :wink:

Perhaps instead of 'setDatabaseLocation....' use 'convertToLocal/SharedDatabase'? But this is not that crucial and I would accept the other naming as Well...

Apart from that this looks better to me and can be merged now.

#1872 Comment 9:
Well spotted @matthiasgeiger . I'll merge this in to reduce possible (later) merge conflicts regarding the move to model.

--------------------------------------------------------------
--------------------------------------------------------------
#1869 Comment 1:
If it does what you promise, I love you! :heart_eyes:  :laughing:  Will try this tomorrow. 

> think that it doesn't always show a dialog for every failed files when having multiple ongoing downloads.

Not sure if I understand you correctly: So I download e.g. 20 files, and 5 fails. Is then the dialog "Failed DL" displayed 5 times?
Or after all downloads are finished it shows a dialog with e.g. 15/20 files downloaded succesfully?

#1869 Comment 2:
Works technically fine, but I have some remarks, as it's currently not effective usable:
I ran it over Quality->Look up fulltext
When the process is finished, it shows the file save/ Download failed dialog for every entry which I previously selected.
So if I have 200 entries select, after the process it opens 200 dialogs... Even for canceling I would have to click 200 times of cancel.
And There is apparently no option to cancel the lookup process.

I would suggest having just a final download result dialog or directly a process window, perhaps sth like this from Down Them All:
![dta](https://addons.cdn.mozilla.net/user-media/previews/full/18/18838.png?modified=1331218902)

#1869 Comment 3:
Well, what you select is what you get. :-)

I agree that your approach would be even better, but that is out of the scope for me at the moment. One could still reenable one selected entry at a time, with the added benefit of being able to start more than one, but I do not really know if that is a better way to do it. Maybe it is better to pop up a dialog asking if the user is sure they want to try to find > 10(?) full text documents as this can be quite a hassle?

#1869 Comment 4:
Agree with you. Add this dialog warning, for more than x? entries .
For the rest we should create a new issue/enhancement. Mabye the other devs have some other 

Regarding the blocking: Does not block the UI atm.

#1869 Comment 5:
I updated and set it to 10. Not sure how much one should actually write in the dialog...

#1869 Comment 6:
Code LGTM, just move that magic number to a constant.

#1869 Comment 7:
Yeah, was thinking about the constant thing as well. Will fix it. I guess it is a good idea to merge now so people have time to find possible issues.

#1869 Comment 8:
Improved the file name generation as well. If the formatter does return an empty string, the BibTeX key is used. If no BibTeX key, "default" is used.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1865 Comment 1:
I run a single X screen two monitor setup and I cannot tell the difference compared to before: if any dialog cover both monitors it is moved and resized to stay inside one of the monitors.

#1865 Comment 2:
Is it really inside the boundaries of the screen rectangle? Only then it can work. Sometimes the resolutions are different between monitors (see screenshot).
![image](https://cloud.githubusercontent.com/assets/2141507/18007075/d0085914-6ba2-11e6-89ce-d0146a10e824.png)

#1865 Comment 3:
When closing the merge entries window:
![screenshot-4](https://cloud.githubusercontent.com/assets/8114497/18007316/d38fae92-6ba3-11e6-8436-f9687797d429.png)
When opening it:
![screenshot-5](https://cloud.githubusercontent.com/assets/8114497/18007331/e2acadd0-6ba3-11e6-96fa-2e13acbe0101.png)

(It may be that the size is kept better now, that I didn't think of.)

Same with the main window (which is adapted to the left monitor on both images).

#1865 Comment 4:
With that said, I'm sure that this PR solves some problems and I'm not sure that the behaviour I report really is a problem as such.

#1865 Comment 5:
No your example should work. For me and my horizontal/horizontal setup it works. It looks like for your horizontal/vertical it does not... We have to test more settings to smooth this functionality.

#1865 Comment 6:
@oscargus I tried your use case on a similar setup on Windows and it worked, maybe a Linux problem?
![image](https://cloud.githubusercontent.com/assets/2141507/18008684/584e9b98-6ba9-11e6-8a96-9d06e0d3b6b0.png)

#1865 Comment 7:
Could indeed be. Especially with the option to have more than one X-screen (which I don't but some people do). Are you interested in any numbers from my setup (obtained from the code)?

#1865 Comment 8:
Sure, maybe you can also take a look. I simplified the code very much, so it should be easy to debug if Java/the OS supports our case or if we cannot do anything about the problem.
It's basically just 

``` java
if(!isDisplayable(storedPosition))
```

checking for the current location inside a virtual rectangle of all available screens (union).

#1865 Comment 9:
LGTM

#1865 Comment 10:
@stefan-kolb I will try to see why things go wrong on my office setup "soon"...

--------------------------------------------------------------
#1863 Comment 1:
Refs #1757

It is always nice to see a new contributor! :) You took a rather challenging task for your first contribution.

When you consider your PR ready, please indicate this to us by writing a message here. We will set the label "ready-for-review" at the right hand side and we will have a look at your code, comment on things to improve, and try to verify and test that your solution works as desired. 

Probably @oscargus should have a look at this.

#1863 Comment 2:
My pull request is ready. Please set the label "ready-for-review".

#1863 Comment 3:
Thanks! It clearly solves the problem! However, it also removes the warning when changing field, but I am not sure if this is an improvement or an issue. ;-) A maybe more serious issue is that when selecting another entry, no warning is shown either and the edit is dropped. However, the dropping appears without the fix as well, so again, the question is what is the worst.

One thing is clear, that even though this fix solves the crash problem, which is clearly significant, we really need to look into this automatic field storage/warning mechanism... Also, the red color only flashes by in some situations, although the dialog shows up, so many events happening more or less at the same time. I guess I'm not missing many brackets as I haven't really notices this earlier...

@JabRef/developers : crash on rare occasions or missing warnings slightly more often? I'd say missing warnings.
@grimes2 : feel free to add a change log entry, if not, I'll do it later.

#1863 Comment 4:
I can add a else branch with the red background color only, for the EDT Events. A error message is impossible, because JOptionPane is not thread-safe.

#1863 Comment 5:
Yes, either that or set the background outside of the if. Another good thing with the fix is that only one dialog is shown for the save toolbar button. :+1:

#1863 Comment 6:
@oscargus Missed warnings are certainly preferable to application crashes. Moreover, I can confirm the change losses when selecting a new entry. I will open a new issue for that.

I have tested this PR locally and can confirm that it fixes #1757. The coloring also seems to be consistent after the last commit.

All that is missing for merging is the Changelog entry. This is a little complicated since we had the intermediate release of 3.6. @grimes2: It would be best if you merge master into your branch before editing the Changelog. This should carry over the release data.

#1863 Comment 7:
I don't know, how to merge master into branch.

#1863 Comment 8:
If you have setup your local git repository  (look here for details on how to https://help.github.com/articles/fork-a-repo/)
git fetch upstream 
git merge upstream/master
Resolve any conflicts
git push (best done over the git gui)

https://github.com/JabRef/jabref/wiki/Guidelines-for-setting-up-a-local-workspace

#1863 Comment 9:
Great, thanks! I merge this in.

#1863 Comment 10:
@grimes2  Feel free to open a PR with your name added in https://github.com/JabRef/jabref/blob/master/AUTHORS 

We forgot about that. Not so used with new contributors... :+1: 

#1863 Comment 11:
This is autogenerated from the git history @oscargus 

#1863 Comment 12:
Ah, OK! Thanks @stefan-kolb .

--------------------------------------------------------------
#1861 Comment 1:
Uhoh, there are more and more conflicts coming. Is it reasonable to resolve the conflicts and then review it? Just to get the PR through. If you continue working, a new PR could make sense.

#1861 Comment 2:
This can be closed because it was done by the stupro team, at least the copy/rename methods

#1861 Comment 3:
This should be #1907

--------------------------------------------------------------
--------------------------------------------------------------
#1857 Comment 1:
Maybe we could get that into 3.6, too? 

#1857 Comment 2:
Yes, I think it would make sense/be safe. A better solution is discussed in #1858 .

--------------------------------------------------------------
#1856 Comment 1:
I think I know how to get around this now. It seems like there are three possible directories "fileDirectory", "pdfDirectory", and "psDirectory", where only the first one is normally used and the other comes from the legacy pdf and ps fields. Now, it might be possible to hard-code in the preferences support for more extensions, but do we really need to support that or would it be OK to include a limitation to only those three?

#1856 Comment 2:
LGTM, jut two weird formatting things.
Regardng the FileUtil class. I will rework this., because it contains a lot of outdated code which can be replaced with Standard Java implementation. Maybe we could get rid of some prefs there.

Regarding the directories, there is also a discussion about the import/export dir preferences #1813 
I don't think we need the legacy pdf/ps fields. Isn't there a cleanup job to move them?

#1856 Comment 3:
There was an old issue where someone used them for something completely different, so maybe we shouldn't remove them. As long as it is only those three (or at least a well known subset of all possible `extDirectory` it should be OK. Now the problem is that one can use any extension and then the code tries to find a dedicated directory for that extension, which cannot be generated in any other way than editing the preference XML...

#1856 Comment 4:
#496 I think. Although that doesn't discuss arbitrary extensions (from a quick browse).

#1856 Comment 5:
I would also say that it is ok to remove support for the legacy file directories. And I do not really see why we should support arbitrary extension directories.

#1856 Comment 6:
OK, dropping arbitrary extensions I'm fine with, but I will not remove support for the pdf and ps directories right now.

#1856 Comment 7:
Now there are no more dependencies on Globals or logic in BibDatabaseContext. Still a dependency on shared though, but that I haven't looked into.

--------------------------------------------------------------
#1855 Comment 1:
Thank you for your contribution :smile: !

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1852 Comment 1:
LGTM. :grin:

--------------------------------------------------------------
--------------------------------------------------------------
#1847 Comment 1:
Thanks!

--------------------------------------------------------------
#1846 Comment 1:
Could you use some unique system properties such as the login name, serial number of Windows or something as additional encryption key? - If you use that too, maybe the preferences can be exported completely.

As alternative, on Windows, maybe the Windows Credential Store can be used? On Linux, the key store. On Mac?

#1846 Comment 2:
Maybe this `Preferences userPrefs = Preferences.userRoot().node( "/com/tutego/insel" );` as used here http://openbook.rheinwerk-verlag.de/javainsel/javainsel_11_009.html could be used to create another registry node just for the password which is then not exported by JabRef.

// Edit: Of course it must be outside "/net/sf/jabref" ... ;-)

#1846 Comment 3:
Only minor coments from me. Once they are done and the conflicts are reseolved, it looks good to me :+1: 

#1846 Comment 4:
Password Hashing is the solution! (It should have come earlier to my mind)
https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016#java

#1846 Comment 5:
@matthiasgeiger Unfortunately it does not work. I used for testing `private final Preferences internalPrefs = Preferences.userRoot().node("/bla/bla1/security");` If I export the preferences, the following nodes appear again:

```
  1 <?xml version="1.0" encoding="UTF-8" standalone="no"?>
  2 <!DOCTYPE preferences SYSTEM "http://java.sun.com/dtd/preferences.dtd">
  3 <preferences EXTERNAL_XML_VERSION="1.0">
  4   <root type="user">
  5     <map/>
  6     <node name="net">
  7       <map/>
  8       <node name="sf">
  9         <map/>
 10         <node name="jabref">
 11           <map>
 12           <!-- ... -->
 13           </map>
 14           <node name="bibtexKeyPattern">
 15             <map/>
 16           </node>
 17           <node name="bibtexkeypatterns">
 18             <map/>
 19           </node>
 20           <node name="gui">
 21             <map/>
 22             <node name="shared">
 23               <map>
 24                 <entry key="sharedDatabasePassword" value="kJicIWFbSjTjw5QYiENFLA=="/>
 25               </map>
 26             </node>
 27           </node>
 28           <node name="labelPattern">
 29             <map/>
 30           </node>
 31           <node name="logic">
 32             <map/>
 33             <node name="labelpattern">
 34               <map/>
 35             </node>
 36           </node>
 37         </node>
 38       </node>
 39     </node>
 40   </root>
 41 </preferences>
```

As another solution we could add `new SharedDatabasePreferences().clear();` into `JabRefPreferences.exportPreferences(String filename)`.

#1846 Comment 6:
@obraliar I think that the exported key is a remnant of previously saved settings.

If you are using windows use `regedit` to delete the keys in the node `HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\net\sf\jabref\gui\shared`

Your addition should be placed in `HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\bla\bla1\security`

#1846 Comment 7:
@Siedlerchr There should be a possibility to decrypt the password again as this is going to be sent to DBMS. Could you explain what to do with hashing?

#1846 Comment 8:
@matthiasgeiger :+1:  I'm using Linux (Debian) and there you have to remove `~/.java/.userPrefs/net/sf` from file system. Now it works very well!
Now using: `private final Preferences internalPrefs = Preferences.userRoot().node("/net/sf/security/jabref");`

#1846 Comment 9:
@koppor What about using the MAC address?

#1846 Comment 10:
I think the suggestion is now obsolote as exporting the prefs without the password is now possible. Maybe we should add a comment in the help file that the password is saved on the local hard disk - then a user can decide whether he wants to save it or not...

Regarding the prefs node: As we want to move the package from "net.sf" to "org" eventually in the future it would be perhaps better to use `Preferences.getUserNodeForPackage(JabRefMain.class).parent().node("jabref-pwdstorage")` to use a relative approach.

#1846 Comment 11:
@matthiasgeiger I agree cause the safest way is not to use the function "remember password" as this is generally a security gap due to symetric encryption.

#1846 Comment 12:
Forget about the Hashing. I didn't think about that you need it in plaintex to send to the db..

#1846 Comment 13:
@matthiasgeiger I would nevertheless keep a simple encryption to make it a bit harder to access the password.

#1846 Comment 14:
@JabRef/developers Could someone look at this PR and possibly merge it in, please?
Reason: @koppor is offline for a week.

#1846 Comment 15:
LGTM :+1: 

#1846 Comment 16:
Generally good work, if you address the comments, then we can merge it in :+1: 

#1846 Comment 17:
All issues have been fixed.

--------------------------------------------------------------
#1845 Comment 1:
:+1:

--------------------------------------------------------------
#1844 Comment 1:
Looks good! :+1:

There reformatting of strings is a bit annoying but I do not know how to get around it.

Throwing the exception would get rid of the printed stack trace and it would show up slightly better in Eclipse  (I think).

--------------------------------------------------------------
#1842 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1840 Comment 1:
LGTM 👍 

#1840 Comment 2:
LGTM! :+1:

--------------------------------------------------------------
#1839 Comment 1:
LGTM 👍 

#1839 Comment 2:
Looks good! Had to think a bit to understand why you return before getting the button back to normal. :-)

#1839 Comment 3:
Please fix minor comments, resolve conflicts and take care that no duplicate localizations come in. Then, it's good to go.

--------------------------------------------------------------
--------------------------------------------------------------
#1837 Comment 1:
LGTM! Great with the comparator test! :+1:

--------------------------------------------------------------
#1836 Comment 1:
LGTM as far as I can tell ;-)

--------------------------------------------------------------
--------------------------------------------------------------
#1834 Comment 1:
Thank you!

--------------------------------------------------------------
#1832 Comment 1:
Not sure if it is worthwhile increasing the size from 25 to 45 MB because of this though. (Or rather sure it is not...) I'll leave it open for a while though.

#1832 Comment 2:
Yeah... I don't think it is that useful... But you can open-source a little tool that creates this term cloud from a bib file ;-)

#1832 Comment 3:
@oscargus Can we close this PR for now?

#1832 Comment 4:
Yes, I'll close it.

--------------------------------------------------------------
--------------------------------------------------------------
#1830 Comment 1:
Just some minor nio related things you could change, too. Apart from that, the optional stuff LGTM :+1: 

#1830 Comment 2:
I'm not confident enough regarding nio.Paths to edit blindly (many other APIs I do that though), nor do I really know how to trigger the code correctly, so I would very much prefer to leave it as is. Even though I conceptually understand at least the last comment and see that makes sense to use it there.

#1830 Comment 3:
I merge this in and hope @Siedlerchr are helpful at some stage regarding the nio-stuff...

--------------------------------------------------------------
#1829 Comment 1:
Copied from the dev chat:
[02:44:34] Oliver Kopp: @siedlerchr: In https://github.com/JabRef/jabref/pull/1829 evtl. doch "nachverfolgt" statt "aufgelöst" nehmen, oder?
[08:44:55] Matthias Geiger: ich würde sogar "referenzierte Felder" schreiben - auch wenn "nachverfolgte Felder referenzierter Einträge" wohl am passendsten wäre ;-)

#1829 Comment 2:
@matthiasgeiger  I am at work and just have no local acces to the project. Do you want to update it?
And there was another one already present in the translation  were "aufgelöst" was already used in this context with Felder. 

#1829 Comment 3:
aufgelöst -> referenziert
Resolved Conflicts 

#1829 Comment 4:
One additional minor remark - apart from that: LGTM

--------------------------------------------------------------
#1828 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1826 Comment 1:
Noticing the new title of this PR, I am wondering if this PR affects the related help file ( http://help.jabref.org/en/DatabaseProperties )

#1826 Comment 2:
Follow up https://github.com/JabRef/help.jabref.org/pull/57.

#1826 Comment 3:
LGTM 👍 

#1826 Comment 4:
LGTM! :+1:

--------------------------------------------------------------
#1823 Comment 1:
LGTM

--------------------------------------------------------------
#1822 Comment 1:
LGTM

Minor comment: Maybe the localization string should be "_Referenced__BibTeX_key_does_not_exist"?

You can also add the german translation right away ;-)

> BibTeX-Key_existiert_nicht

or

> Referenzierter_BibTeX-Key_existiert_nicht

#1822 Comment 2:
You can also add Changelog entry for this addition

... and of course tests would be nice :stuck_out_tongue_winking_eye: 

#1822 Comment 3:
Might indeed be a better wording. I was happy with the current one as I did not have to write it with a starting lower case letter, as most of the other ones. Consistency is really annoying. ;-)

(I skipped the `%0` version of the string as they in most cases would be very similar.)

Tests are planned and the main reason for WIP. :-) As I have to pass the database they require a bit more effort than the standard checkers.

--------------------------------------------------------------
#1821 Comment 1:
How about adding those links to the "About JabRef" dialog?

We already have to much menu entries, imho. :wink:

#1821 Comment 2:
I would say the same as @matthiasgeiger about:
- "Online Help Forum"  (since this is a secondary mean of finding help, as mentioned in http://help.jabref.org/en/ )
- "Fork me on GitHub" (if you are a decent programmer, you do not need this item to start contributing code)

#1821 Comment 3:
I was also thinking about it (main reason to use a sub menu). What about moving at least the GitHub link to the same sub menu? The forum link may be worth to keep to get the momentum up there.

Regarding adding them to the About dialog, I think that is much less used than the Help menu so if we want people to see it, it may be good to have them in the Help menu.

#1821 Comment 4:
Or rename it "JabRef resources" and/or add the forum link there as well.

#1821 Comment 5:
Considering the translation effort in #1824 it may not be worth trying to get this into 3.6 (avoid adding more new strings at the moment), so maybe better to wait and discuss it a bit further.

#1821 Comment 6:
I still think that the other links are more important/relevant and could remain in the menu:
It is the "Help" menu - so linking to the online forum to get help is reasonable.
Showing possibilities to contribute/donate is also clearly important for us.

The web page, the blog, facebook are all rather unimportant links for the user - and for us. But if we decide to add a "JabRef resources" sub menu I would at least add the github and donate link there (icons are already shown in the toolbar) and place the submenu between "Check for updates" and "About JabRef".

And if we should reach some concensus it should be also possible to include this in 3.6 as @mlep, you and me could provide translations for the three language with the best translation status ;-)

#1821 Comment 7:
I am fine with the proposal of @matthiasgeiger 

#1821 Comment 8:
OK! I'll have a go with that then. Just thought that 13 or whatever followers on Facebook didn't seem enough. :-)

#1821 Comment 9:
New menu:

<img width="340" alt="capture21" src="https://cloud.githubusercontent.com/assets/8114497/17906179/8c820aa6-6976-11e6-8957-0e44536eec95.PNG">

#1821 Comment 10:
Looks cool! I would move Donate more upwards ;)
And I would rename Web page to Website.  Apart from that :heart: 

#1821 Comment 11:
I changed to website. Regarding the ordering I had an idea to introduce a few more items and also separators:

Website
Blog
Facebook
(Separator)
Github
Developer version (-> builds.jabref.org/master)
Change log (-> Github master version)
(Separator)
Donate

In this way the donate link will get more attention, but I didn't want to add the other two without discussion. At least on non-Linux versions where at least on my CentOS machine, the separators are not rendered.

#1821 Comment 12:
Okay - as we already introduced the submenu we can also add the other links ;-)

Instead of "Developer version", which sounds like "a version specific for developers" I propose to use "Development version"; GitHub instead of "Github" :wink:

German translations:

```
Website=Webseite
Blog=Blog
Development_version=Entwicklungsversion
JabRef_resources=Mehr_zu_JabRef
```

The last one is rather hard to translate, imho... Perhaps another native speaker can come up with a better translation...

#1821 Comment 13:
I was actually not planning on changing the "Fork me..." (although I would like to), so do not worry about "Github". ;-)

I agree with you regarding Developer/Development. Just couldn't figure out the better wording. 

#1821 Comment 14:
<img width="304" alt="capture23" src="https://cloud.githubusercontent.com/assets/8114497/17922147/d7c5888c-69dd-11e6-82fc-7e4aa4409312.PNG">

#1821 Comment 15:
A bit annoying that the change log is shown with the development information as well. Is it possible to show only the most recent change log in some way?

#1821 Comment 16:
I'm already trying to figure this out ;-)

#1821 Comment 17:
I think "Mehr zu JabRef" makes sense as we might just as well have called it "More on JabRef".

#1821 Comment 18:
I have not found a way to link the changelog of the latest release.. There is only the shortcut https://github.com/JabRef/jabref/releases/latest 

So we either link to the `master` CHANGELOG or we have to put some more effort in the link creation logic by determining the current JabRef version and adding it to `https://github.com/JabRef/jabref/blob/v**versionNumberHere**/CHANGELOG.md`

#1821 Comment 19:
I'd say go with the current solution and eventually script a copy of the
ChangeLog to jabref.org/ChangeLog.md (or something) on merging to master.

#1821 Comment 20:
Maybe we need to be able to link to the sections of the master changelog.md file
Related to https://github.com/JabRef/www.jabref.org/issues/24 ?

#1821 Comment 21:
@matthiasgeiger  I would propose "Entwicklerversion" for Development Version as translation

#1821 Comment 22:
No :-) See the discussion above: It is not a "version for developers" (==Entwicklerversion) but a version which is currently under development (==Entwicklungsversion) :stuck_out_tongue_winking_eye: 

#1821 Comment 23:
@mlep My plan was really just to link to the current CHANGELOG.md, so maybe the formulation is misleading (although correct as you can see all changes in all versions there).

#1821 Comment 24:
@oscargus My misunderstanding, sorry.

#1821 Comment 25:
@mlep No problems. I fully understand it (and was thinking of this possible misunderstanding when I wrote it, seems like I was correct...).

#1821 Comment 26:
One can directly link to the release in CHANGELOG.md, when one uses the GitHub repository: One could also link the concrete release. E.g., https://github.com/JabRef/jabref/blob/master/CHANGELOG.md#35---2016-07-13 

However, in the URL, the release date has also encoded. Maybe we directly change the link before each release?

#1821 Comment 27:
Yeah with link changes it would be no problem - but we wanted to avoid these. 

Shall we add this last minute to 3.6?

#1821 Comment 28:
Since it may help in attracting attention to JabRef supporting tools, and hence foster its development, I tend to answer yes.

#1821 Comment 29:
I'll resolve the merge conflicts if nothing else and let us see.

I think it is fine to link to the complete CHANGELOG.md, not just for the actual release as it is quite clear what the different versions are. I tend to think that the current solution is good enough right now, but a better looking version (without the version management stuff) can be found for 3.7.

#1821 Comment 30:
@mlep Can you provide us the translations for French? :grinning: 

#1821 Comment 31:
I'd better liked the Jabref resources under help forum. 3 links for web resources, then error console check for updates and about dialog.

#1821 Comment 32:
I like the current position :wink: 

#1821 Comment 33:
OK, I've rebased. Still in the position of the last screen shot...

#1821 Comment 34:
Okay. Thanks @mlep! I'll merge the PR as is and add the French translations directly at `master`.

--------------------------------------------------------------
--------------------------------------------------------------
#1818 Comment 1:
Shouldn't all of the migration stuff go into our migrations package? WDYT?

#1818 Comment 2:
This is only a migration "warning". There are no real migrating functions. Therefore I think it's OK to leave it here. Or are there some other opinions?

#1818 Comment 3:
LGTM :+1:

--------------------------------------------------------------
#1817 Comment 1:
I think it should be OK to remove it. It would be simple to just add FieldProperties.URL to the URL field, but I tried it and do not really see the benefit. I guess the idea is to only accept urls, but there are other drop listeners accepting the url as text anyway (if I understand things, makes no obvious difference anyway).

:+1:

#1817 Comment 2:
@koppor Any thoughts about this legacy functionality?

#1817 Comment 3:
As it is not working - and the workflow for downloading files is now somehow different I also vote for removing this...

--------------------------------------------------------------
#1816 Comment 1:
I tried it out, but I would expect that after <kbd>CTRL</kbd>+<kbd>V</kbd>, the **pasted** entry would be selected, not the copied one. So, the modified entry was OK, but not the highlighting.

#1816 Comment 2:
Did your run include 01a5a3e?
After pasting an entry I'm searching from the back, thus I should select the pasted duplicate.

--------------------------------------------------------------
#1815 Comment 1:
I now found a way to fix it. I am building a String with the English modifier key text using the triggered KeyEvents  `is-ModifierKey-Down` methods

#1815 Comment 2:
Please resolve conflicts and minor comments, then it's good to me 👍

#1815 Comment 3:
@boceckts can you test it on win and mac for me please? The meta key does not work on my linux system since there are OS functions on it.

#1815 Comment 4:
@Braunch Windows uses the windows key for its own shortcuts, same as with some linux distributions. On mac it now does work to make shortcuts directly with the command(meta) key....but I just realized that if you create a shortcut with the control key, e.g. "ctrl + S" it will automatically be replaced by "command(meta) + S".
So I guess the meta key doesn't have to be listened to..sry for that.

#1815 Comment 5:
Is this intended? Why should the grabbed keys differ from the keys actually used by the user? I changed the behavior so that you can set the 'meta + key' shortcut with the meta.

#1815 Comment 6:
Any opinion on my solution with the meta key from the @JabRef/developers ?

#1815 Comment 7:
Please merge `upstream/mater` and fix minor comments. Then, it should be good to go.

#1815 Comment 8:
I addressed the small comments and resolved the conflicts.

#1815 Comment 9:
You commited with both your st university address and your normal development address. Please double check your git config.

Please merge upstream/master again. Can you make one commit as described at https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master? Then, I can resolve the conflicts by myself.

#1815 Comment 10:
I resolved the conflicts and squashed my commits. Should be good to go.

#1815 Comment 11:
Please do not squash, this makes reviewing very hard as we cannot see, what has been adressed. I added a `BUMP` on all my unaswered comments. Please fix/answer.

You can see all comments at https://github.com/JabRef/jabref/pull/1815/files

#1815 Comment 12:
I addressed your comments and merged the upstream/master. I squashed following your comment https://github.com/JabRef/jabref/pull/1815#issuecomment-246499706 Did I get that wrong?

--------------------------------------------------------------
#1814 Comment 1:
Can you please add a test with missing preamble?

#1814 Comment 2:
Sure.

#1814 Comment 3:
Test added and some general renaming of variables in `ChangeScanner`.

#1814 Comment 4:
Can you please rebase this and merge it in afterwards? :+1: 

--------------------------------------------------------------
#1812 Comment 1:
LGTM! :+1:

--------------------------------------------------------------
#1811 Comment 1:
Fix typo in changelog otherwise LGTM

#1811 Comment 2:
LGTM! :+1: (Will merge after the tests are done unless someone is faster...)

--------------------------------------------------------------
#1810 Comment 1:
I checked the rest of the code and in all other places it is correctly handled. I guess I just went for the errors and not actually searching for the use of `getEncoding()`...

#1810 Comment 2:
LGTM! :+1:

#1810 Comment 3:
:stuck_out_tongue_winking_eye: 

--------------------------------------------------------------
#1809 Comment 1:
LGTM! :+1:

--------------------------------------------------------------
#1807 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1800 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1794 Comment 1:
Good work! :+1:  Just one little thing.

--------------------------------------------------------------
#1793 Comment 1:
Fixed the comments.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1789 Comment 1:
Why do you kill the BrowseAction? It already uses the new FileDialogs and is used in many places (because essentially the dialogs are everywhere the same)! It should be necessary to only call the setDefaultExtension method there. Or to inlcude it.

#1789 Comment 2:
I just want to keep it simple and consistent. Either use Browse action everywhere or filedialog. I think for saving one or two lines its not worth keeping different classes here and there, but I'm open for suggestions.

#1789 Comment 3:
Additionally, the BrowseAction does not make it obvious or easy to understand what it really does without inspecting the BrowseAction class. I'm open for suggestions and a different decision here. Maybe we should discuss this in a Devcall or other Devs can quickly take a look at the code. In my opinion the small code duplication makes it easier to understand whats happening here and therefore might be preferable over the encapsulation inside BrowseAction.

#1789 Comment 4:
I gave the BrowseAction a second thought and yes, it could be removed.

#1789 Comment 5:
What we should discuss here is the state model of the FileDialog class. All methods alter the state of the internal JFileChooser dialog. But if we show a Directory selection dialog, we cannot revert back to a File selection dialog. Also if we use multiple files selection this is used in former single file selection dialogs...

#1789 Comment 6:
Regarding the state: I do not think that this causes a big problem here, as we create a new Object of the FileDialog including the underlying internal jFileChooser for each dialog where it is used.

The other point: Directories only is clear. And MultipleFiles vs Single Files should be clear, too. However, even in a muliple file dialog I am able to select only file.

#1789 Comment 7:
@Siedlerchr Yeah, but if you don't know this - it creates potential bugs. because not all state transitions are allowed as I explained.

#1789 Comment 8:
I know what you mean. You could introduce a`private boolean called = false` and check for it and throw an exception if it's true on entering any other method...

#1789 Comment 9:
This state problem is also present in current master. So for example in database properties the encoding is set to the first entry Big5.

#1789 Comment 10:
@stefan-kolb  Please take a look at #1803,  seems like the full path (including filename) is stored in the prefs. Would be nice, if you can fix this, too.

#1789 Comment 11:
Is this a new One caused by this pr or was this the case before?

#1789 Comment 12:
@koppor @grimes2 

> This state problem is also present in current master. So for example in database properties the encoding is set to the first entry Big5.

I don't get this one. What do you mean?

#1789 Comment 13:
Sorry, my fault. I've no evidence, that the bug is caused also by this pull request. I've opened a new issue for this: #1806

--------------------------------------------------------------
#1787 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1785 Comment 1:
LGTM :+1: 

#1785 Comment 2:
#1694 is not working yet... I'll try to fix this, too.

#1785 Comment 3:
I was just asking for it. I already digged into it, see details in the issue. The preview was okay, but not the bibtex getting request somehow. 

#1785 Comment 4:
Same problem - same solution: `...&oe=utf-8`

#1785 Comment 5:
Code looks good! I'm not going to mention `URLBuilder` and `unirest`...

#1785 Comment 6:
LGTM :+1: Can we add a test to ensure this behavior?

#1785 Comment 7:
I'll add a test using the entry from #1694 next week 😉

#1785 Comment 8:
For the record: this is currently not really testable due to the mixture of UI and logic code in the current state of implementation

--------------------------------------------------------------
#1784 Comment 1:
Refs https://github.com/koppor/jabref/issues/131 :smiley: - but can be merged if Travis/CircleCI say OK.

#1784 Comment 2:
Yes, I'm aware of that. Still annoying with outdated dependencies. ;-)

--------------------------------------------------------------
#1783 Comment 1:
LGTM

--------------------------------------------------------------
#1782 Comment 1:
Minor Comments otherwise LGTM :+1:

--------------------------------------------------------------
#1781 Comment 1:
The failing tests will be fixed once #1791 is merged as there is some relations there.

--------------------------------------------------------------
#1780 Comment 1:
I wanted to remove this Cookie Handler anyway :+1: Not sure what it did before. If everything works without it, it would be great!

#1780 Comment 2:
Yes, everything works fine without it. I checked some urlDownloads (e.g. Lookup Fulltex) and some other manual fetching things. I really have no idea, why it was added before. Maybe because as a workaround for some things in the past.

#1780 Comment 3:
Please remove the empty lines. other than that I'm happy with removing the Cookie-Impl.

--------------------------------------------------------------
#1778 Comment 1:
When trying to execute the `ModsExportFormatTestFiles` class I get an `java.nio.file.InvalidPathExceptoion`.
Does this happen to anyone else, as the checks are passing I guess linux users don't have this issue?

JabRef _unknown_
windows 8.1 6.3 amd64 
Java 1.8.0_25

#1778 Comment 2:
I've used now StandardCharsets.UTF-8

@boceckts The exception should be fixed now.

#1778 Comment 3:
This PR will be suspended, untill the issue #1920 is solved. Because the exported files could be very different to how they are now. In my opinion it makes the most sense, to first rewrite the exporter and then add a test for it (or adapt the existing test).
I will close this PR and then open a PR for the rewrite of the exporter and the test of it at once.

--------------------------------------------------------------
#1777 Comment 1:
Quick fix is OK. A discussion with @obraliar revealed that the reason of the wrong event <s>is `entry.setId(IdGenerator.next());` in `gui/importer/ImportInspectionDialog.java` line 474.</s> might be https://github.com/JabRef/jabref/blob/d366903fc2ae3aa7acad9efaf43647ee01aca97f/src/main/java/net/sf/jabref/gui/importer/ImportInspectionDialog.java#L521 and https://github.com/JabRef/jabref/blob/d366903fc2ae3aa7acad9efaf43647ee01aca97f/src/main/java/net/sf/jabref/gui/importer/ImportInspectionDialog.java#L171.

One has to investigate further if the event system has some huger issue. An event for an entry not being present in the database should not be posted.

--------------------------------------------------------------
#1775 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1774 Comment 1:
@Siedlerchr This is one for you to review :smile: 

#1774 Comment 2:
Generally a good solution, but I would move the logic to the ImportFileFilter, makes it a bit more clear.

--------------------------------------------------------------
#1773 Comment 1:
LGTM :+1:

#1773 Comment 2:
Hm what is the big difference here? The only thing that changed is that some prefs are now stored in another class that still need JabRefPreferences?! Just looks more cohesive.

#1773 Comment 3:
Correct. But it is very simple to move the `fromPreferences` method to
`JabRefPreferences` and eventually the whole logic will not access
`JabRefPreferences` at all. I think we are soon reaching the point where
that can happen as there are no Globals calls left (once one of my other
PRs is merged) and most classes and methods have this type of specialised
preferences. (Simon and Tobias convinced me of this as I had similar
doubts.)

#1773 Comment 4:
I thought I'd add a method to `JabRefPreferences` as we actually are closing in on this now.

--------------------------------------------------------------
#1772 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1766 Comment 1:
Updated version with Unicode characters as well. Clearly it is some sort of font issue.
[CharGen5.pdf](https://github.com/JabRef/jabref/files/423507/CharGen5.pdf) (Updated with a better font.)

#1766 Comment 2:
Would it be feasible to run this program and compile the resulting tex file as part of the tests? If no compilation errors, all symbols are at least syntactically correct.

#1766 Comment 3:
You can probably add it to the build script. The following links might be helpful:
https://gist.github.com/LindsayBradford/11274456
https://github.com/mgmax/pdflatex-travis-example

#1766 Comment 4:
The tex file needs too much packages and might take a long time to get texlive running at **each** test.

--------------------------------------------------------------
#1765 Comment 1:
I would like to merge this in for 3,6 (No Localization changes), after I rebase 

#1765 Comment 2:
Looks good! Just some minor comments.

#1765 Comment 3:
I will fix it this afternoon/evening. Regarding the language mapping, there is not yet a simple solution, as we would have to integrate the whole table of LCID: 

https://msdn.microsoft.com/de-de/goglobal/bb964664.aspx
https://support.office.com/en-us/article/Locale-identification-numbers-for-language-specific-files-16102229-37c5-4ad5-92b1-0438f6304114?ui=en-US&rs=en-US&ad=US

#1765 Comment 4:
Address comments as far as possible

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1759 Comment 1:
LGTM :+1:

#1759 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#1756 Comment 1:
The difference is that the static initializer is called every time the class is first used. If you put it into the init method you must be sure that this method is called explicitely every time. Also, if you move it to the init method better put it at the very beginning of the method to prevent any side effects of calling it later than on class startup.

#1756 Comment 2:
Since `init()` is called before any GUI is initialized at all (as far as I can tell), and definitely before any entry editors are initialized (the static method updated the colors for them), it should be safe.

--------------------------------------------------------------
#1755 Comment 1:
Good work, simple change for fixing two issues at the same time, LGTM :+1: 

#1755 Comment 2:
LGTM :+1: 
Please slightly rewrite the tests and then you can merge it.

--------------------------------------------------------------
#1754 Comment 1:
LGTM: :+1:  Please check the newline at the end of the file

--------------------------------------------------------------
#1753 Comment 1:
Curious failure of the checks, it works on my system.  Should i merge the other javafx branches and hope the failure will dissapear?

#1753 Comment 2:
@bruehldev  you could merge one in and then see if the travis job passes when you push. If it still fails, you can be pretty sure it's not just a travis instability problem.

#1753 Comment 3:
Sorry for the huge amount of commits. The current version of this branch can't display the Customize key bindings dialog. I wanted to share the code with @boceckts to debug the issue.

#1753 Comment 4:
I started over and pushed it to get a new clean version. Unfourtnatly the test `LocalizationConsistencyTest. findObsoleteLocalizationKeys` shows wrong obsolete keys and i deleted necessary keys for the managekey dialog. 
So theres one failure left from the unit tests. 

#1753 Comment 5:
> . Unfourtnatly the test LocalizationConsistencyTest.
> findObsoleteLocalizationKeys shows wrong obsolete keys

Which ones? Please provide examples.

> and i deleted necessary keys for the managekey dialog.

What does that mean? Keys requiring a translation are deleted?

#1753 Comment 6:
The problem is that the localization tests don't recognize the strings in the fxml files (since they are of the form `<label text = "%localized description">` and not `Localization.lang("localized description"`). I will take care of it.

#1753 Comment 7:
I reviewed the merge (2eafa31) and the two commits before together with @bruehldev and it is OK. The other commits appearing here are OK (!), because we merge master into javafx and master contains these commits. A review of the merge commit using GitHub is too hard and therefore, we did it on screen.

--------------------------------------------------------------
#1752 Comment 1:
LGTM

#1752 Comment 2:
Directly commited to `master`. Thanks for pointing this out!

--------------------------------------------------------------
#1749 Comment 1:
:+1:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1743 Comment 1:
I tested your changes and the Rank is disabled, meaning, I can not click on it, but the Icon is not greyed out. 
However, I just printed out all items in `createDisabledIconsForMenuEntries`  and there is no `Rank`, so for one reason I don't know it is not in the list. 

```
  JMenuItem item = (JMenuItem) subElement;
                System.out.println(item.getText());
            if (item.getIcon() instanceof IconTheme.FontBasedIcon) {
```

Furthermore, I printed out all actions and Component in the method
`private static void setEnabled(List<Object> list, boolean enabled) {`
And there is the rank as component listed, so the whole component is set to disabled. 

My best guess, would be that the disabled icon for the special fields is not correctly set, because the pushtoExternal and the rank are both custom JButtons, while the rest are MenuItems.
Mabye sth with the SpecialField.

I cannot say it definitely

#1743 Comment 2:
Only minor comments regarding code refactoring from my side. Good job :+1: 

#1743 Comment 3:
Can you add some screenshots what has changed please?

#1743 Comment 4:
Ah, cool, you found a way to disable those buttons menu things, too :+1: 
Code is good from my side :+1: 

#1743 Comment 5:
Screenshots are added :smile:

#1743 Comment 6:
@motokito It would have been good if you showed old and new behavior, not just the new one :innocent: 

I have two small remarks, please fix them - otherwise:

[![LGTM](http://lgtm.in/p/OT5aIbB6q)](http://lgtm.in/i/OT5aIbB6q)

--------------------------------------------------------------
#1741 Comment 1:
Please add a Changelog entry

#1741 Comment 2:
I put your feedback into my code.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1737 Comment 1:
Looks good to me! Some minor comments, but nothing crucial (and I guess Checkstyle will sort one of them out :-)).

#1737 Comment 2:
Anything else, otherwise I would merge it in. (Codacy probably failed because I rebased/squashed some things)

--------------------------------------------------------------
#1736 Comment 1:
In General good, but I am not sure if this rule: "Declarations at top",  should also apply to Lambdas... 

#1736 Comment 2:
I see your point, but it was still a reasonably short lambda.

--------------------------------------------------------------
--------------------------------------------------------------
#1734 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1731 Comment 1:
Clearly a better idea. :+1: There are quite often cases where we need to provide "unnecessary" data unfortunately, but then that's no reason to increase them.

#1731 Comment 2:
OK, I changed that now. I also changed `ImportFormat` to always take an `ImportFormatPreferences` as an argument to the constructor. This was really required to be able to test `CustomImports` and I think it makes sense for custom import format developers to have some access to preferences. Not sure if I should provide an argument-less constructor as well, creating an `ImportFormatPreferences` from `Globals`, just to ease the transition (also, people may have old custom import formats that they do not have source for and so on...). WDYT?

#1731 Comment 3:
I'll try to redo this in smaller steps.

--------------------------------------------------------------
#1730 Comment 1:
Thanks!

--------------------------------------------------------------
#1729 Comment 1:
Great! Thanks. I agree with you regarding the strings.

--------------------------------------------------------------
#1728 Comment 1:
I think it is unlikely that `BibDatabaseContext` can ever get rid of `Globals` so maybe this was a waste of time...

#1728 Comment 2:
I like it if methods operate on the database context instead of database + metadata separately. Thus I would like to merge this PR.

#1728 Comment 3:
I agree, but since we will never (?) manage to move `BibDatabaseContext` to `logic` (even less `model`) because of all the `Globals` I'm not sure if it is wise to introduce this dependency.

--------------------------------------------------------------
#1725 Comment 1:
A few remarks, but in general looks good to me. But I have no experience with this swing threading stuff, so it would be good if somebody else also has a look at the code.

#1725 Comment 2:
For a hack, this is ok. I would prefer that a SwingWorker is used which can send updates of its progress. The AbstractWorker with its init/run/update methods is somewhat legacy which will not work with JavaFX at all. But the SwingWorker can be easily ported to the JavaFX equivalent, the stuff behind the AbstractWorker which is based on the spin library cannot. So I would recommend to invest the effort in slowly migrating to SwingWorker and then to JavaFx.

#1725 Comment 3:
Thanks for looking at it @simonharrer. I take it as merge (subject to the comments) and look at SwingWorker eventually. Much more work to restructure all AbstractWorker but still worth getting rid of the issues fixed here.

I'll have a look at the other comments later tonight.

#1725 Comment 4:
OK, I changed some things based on the comments and improved the code in a few places.

#1725 Comment 5:
I merge this in based on the previous reviews, so we have some time to find any unexpected consequences before release.

--------------------------------------------------------------
#1722 Comment 1:
Can you please push to the jabref repo, too. 

Testing whether your changes affect (the already working) prefs on my windows machine is easier if there is a pre-built version at builds.jabref.org.

#1722 Comment 2:
I should probably have done that, yes. I'll try although experience says that pushing afterwards does not result in any built binaries...

#1722 Comment 3:
And that is something recent, earlier it worked without any problems.

#1722 Comment 4:
http://builds.jabref.org/bettergeneralprefs/ here it is - thanks! ;-)

#1722 Comment 5:
And just because of all that hesitance it is working: http://builds.jabref.org/bettergeneralprefs/ :smile: 

#1722 Comment 6:
This is the consequence (3610 pixels wide), but there are other tabs that also could look better then.

![wide](https://cloud.githubusercontent.com/assets/8114497/17620260/63a0bfcc-608b-11e6-8e59-a056dee555b5.png)

Still, this should be compared to the usability of the first screen shot.

--------------------------------------------------------------
--------------------------------------------------------------
#1719 Comment 1:
In 8380fcf347436828931a73a1 we disabled union merge for language files. I don't remember which PRs broke. Let's see, how that worked out.

In ac08efbf42638ade9a93136999f, we disabled CHANGELOG.md union merging. 

<s>I will adapt the release how to to disable union merge of CHANGELOG.md directly after the release. Otherwise, changelogs of released (!) versions will be changed when merging a PR started before the release and changing the CHANGELOG.</s> After thinking a bit longer, the attribute reset does not help as git's conflict resolution might be too clever and find lines moved even far away.

#1719 Comment 2:
All @JabRef/developers have to take care when merging PRs directly after a release: The sections of CHANGELOG.md of the released version should not be changed.

Possible solution: We create a file `CHANGELOG.master.md` to collect changes and touch `CHANGELOG.md` only during release time. But this might be confusing. TOP for devcall. :innocent: 

#1719 Comment 3:
CHANGELOG is not so critical to me to have union merge in. It's just removing those three conflict markers in 12(?) translation files by hand every time someone has merge a PR with new translations in and you have to rebase that annoys me (and at least @Siedlerchr ).

--------------------------------------------------------------
#1718 Comment 1:
LGTM :+1: but `\usepackage[utf8]{inputenc}` also saves the day 😄 

#1718 Comment 2:
It's not just umlauts. Anything outside of 7-bit ASCII will typically break LaTeX unless one uses `inputenc`. Break as in quite likely produce the wrong character in the document.

"Determines whether a character is ASCII, meaning that its code point is less than 128."

#1718 Comment 3:
So this checker seems reasonable for you?!

#1718 Comment 4:
Yes, without more insight on the exact details (that LaTeX may use some 8-bit mapping that makes sense sometimes, some people may always use inputenc, etc) I would say that this is a good start. Then, ideally I would like the integrity checks to be disabled (or at least the filter settings remembered), but I'm not going to ask you to implement that now. :-)

#1718 Comment 5:
(But please merge another PR with translation strings first, so you change your standpoint on union merge... ;-) I do not know how many times I've rebased in the last week where I had to do a manual edit that could be solve with union merge of the translation files...)

#1718 Comment 6:
I'm not 100 % sure what was the reason to change union merge but this messed up our changelogs and translations as far as i can remember, adding duplicates and so on?!

#1718 Comment 7:
@stefan-kolb  Locally it works, but there seemed to be problems with github not supporting this:
isaacs/github/issues/487

#1718 Comment 8:
@Siedlerchr @stefan-kolb so when union merge is enabled, then github don't automatically resolves the merge conflicts and a manual rebase / push is needed, right? (which is still better than the current system since the local rebase would be easier with union merge). 
But these problems with github dosn't explain why union merge was actually disabled for the changelog https://github.com/JabRef/jabref/commit/ac08efbf42638ade9a93136999ff61b71510c70f

#1718 Comment 9:
@tobiasdiez  Yeah. I think we should enable it back again. For the changelog and the lang files.
Conflicting lang files are hell! 

#1718 Comment 10:
Yes, GitHub did not support it (no idea how it is now), so that wasn't the problem. It did indeed lead to duplicates, but since the alternative is conflict markers and in quite a few cases it completely avoids conflict markers I still do not see the problem with duplicates. I rather remove duplicates half of the time than conflict markers twice as often.

As I recall it some developers got annoyed with the duplicates and removed the union merge.

#1718 Comment 11:
A bit late, but wasn't the idea that all new integrity checks should come
in separate files?

#1718 Comment 12:
I though about this too when looking at the current implementation. We can just extract them all in a separate PR.

--------------------------------------------------------------
#1717 Comment 1:
LGTM :+1:

#1717 Comment 2:
Just some minor remarks, LGTM :+1: 

#1717 Comment 3:
We are discussing the failing/unstable GUI tests at #1700 

#1717 Comment 4:
Just my two cents regarding this PR (by looking at the code): Should be fine! I was thinking about implementing something similar (separate comment field in BibEntry) before, but had avoided it so far. There are a lot of tests regarding parsing, so I am confident that we should not meet unexpected NullPointerExceptions and the like.

Good to see that we have a new person who is responsible for implementing the parsing logic ;-)

#1717 Comment 5:
Forget it... This parsing stuff is still some black magic for me ;)

#1717 Comment 6:
Refs #123

--------------------------------------------------------------
#1714 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1712 Comment 1:
LGTM! :+1: 

--------------------------------------------------------------
#1710 Comment 1:
LGTM :+1: 

#1710 Comment 2:
LGTM2, plz resolve conflicts and merge.

--------------------------------------------------------------
#1709 Comment 1:
What is the change doing here?

#1709 Comment 2:
Look at the screenshot  on the right. With the current version, the enums are weird formatted:
Current/Old format: 
![enum_old](https://cloud.githubusercontent.com/assets/320228/17581100/a1589ba2-5fa3-11e6-9af5-252ba6ad8016.png)

#1709 Comment 3:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1704 Comment 1:
@JabRef/developers Two related questions regarding the migration of LabelPatterns: 
- What happens if old prefs after migration? Delete them?
- What happens if old and new prefs are there? Keep the new ones?

... and why the hell is this test failing now?!

```
net.sf.jabref.logic.cleanup.CleanupWorkerTest > cleanupCasesAddsBracketAroundAluminiumGalliumArsenid FAILED

    java.lang.NullPointerException

        at net.sf.jabref.logic.formatter.casechanger.ProtectTermsFormatter.format(ProtectTermsFormatter.java:54)

        at net.sf.jabref.logic.cleanup.FieldFormatterCleanup.cleanupSingleField(FieldFormatterCleanup.java:65)

        at net.sf.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(FieldFormatterCleanup.java:45)

        at net.sf.jabref.logic.cleanup.CleanupWorker.cleanup(CleanupWorker.java:56)

        at net.sf.jabref.logic.cleanup.CleanupWorkerTest.cleanupCasesAddsBracketAroundAluminiumGalliumArsenid(CleanupWorkerTest.java:300)
```

#1704 Comment 2:
Keep the old prefs. They are not consuming much space in the registry. If someone starts an old JabRef version, the old patterns should still be there. It might be that users update from <= 3.5 to a far newer version (4.0?) and want to go back to 3.5, because something does not work on 4.0.

Keep the new ones, if old prefs are there.

I foresee that some users will complain that the patterns change when having used an old version and changed the patterns there. But I think, those guys will be seldom :)

#1704 Comment 3:
Probably just keeping them is the easiest alternative, as long as this does not create any side effects.

#1704 Comment 4:
Chosen approach is: The first time JabRef is run it is checked whether old patterns are there - if yes, they are migrated. Subsequently migration is skipped. Old prefs are not deleted.

Apart from the changes in the help.jabref.org repo this is good to go from my side.

#1704 Comment 5:
Besides the minor comment: LGTM.

As far as I can see, import/export of preferences doesn't include the bibtex key patterns, does it?

#1704 Comment 6:
Prefs were already reported correctly, regarding this point I was wrong at the Dev call. But I should check whether importing is now working fine.

#1704 Comment 7:
LGTM :+1: 

#1704 Comment 8:
Added further migrations fors 3.0-3.2 and <3.0.

Exporting and importing prefs is working with KeyPatterns.

#1704 Comment 9:
Does this fix #1257 ? (Except the 3.2 to 3.3 part...) In that case add a ChangeLog entry and remove the wontfix tag. :-)

#1704 Comment 10:
Added the changelog entry.

... can be merged as soon as https://github.com/JabRef/help.jabref.org/pull/46 is merged - which fixes the failing test.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1700 Comment 1:
Seems like it is hard to get stable GUI tests... I think some of them makes sense and the reasons behind the commented out tests in `ParameterizedDialogTests` are worth fixing. 

How should I progress here? Mark them and `@Ignore` and hope that eventually things will be working?

#1700 Comment 2:
I :heart: UI tests. We discussed reenabling them on #1524. After reading http://stackoverflow.com/a/4995662/873282, I think it is no harm to make the timer daemonized.

Can you backport my changes at https://github.com/JabRef/jabref/pull/1524/files to your branch? Then, the GUI tests will work on Travis again.

I will also update the Eclipse settings that it won't join lines. I think, the current code formatting is good enough and we should get rid of `@formatter:off` tags.

What do you mean by "stable" tests? Are the effects always different?

The thing is, we decided to go away from GUI tests, because they always cause trouble and headaches. Our UI code is sometimes a really mess and thus the GUI tests will probably never be stable. We have to switch to JavaFX completely to have a clean and testable GUI code.

#1700 Comment 3:
"Stable" in the sense that they pass on Travis every time, independent of which other tests are running (and to some extent even locally...).

Although I do not think it makes sense to run all these tests for every PR/build due to the time it takes, they may still be useful to run before a release, including adding more of these simple "just click everything you can and see that nothing bad happens". Both #1710 and #1714 were consequences of these tests and with some slightly more advanced ones, the bugs solved in #1631 and #1649 would never have made it (since they happened simply by clicking on "open file"). So somehow it would, eventually, be good to merge them so that they are available, but at some new location that are not automatically executed at every build. And when it comes to gradle etc I'm lost.

#1700 Comment 4:
We have CircleCI for a quick build checking for compilation issues and if JabRef compiles, the binaries are served at builds.jabref.org. Then, it doesn't matter, how long TravisCI runs. All tests should run at each PR so that the author is directly notified about unwanted side effects of his PR. When we run the tests at a release only, it is a much higher effort to track down the cause and we will probably not run the tests at all to safe time during release.

#1700 Comment 5:
I see the point and I agree that ideally it should be like that, but now the new GUI tests have already started to fail... Still, it makes sense to run these (massive and trivial) tests every now and then just to see that nothing, very unexpected, has happened.

Somehow I see two options: remove them, because they are unstable, or keep them but only run them on occasion. The third option doesn't seem like it can be actually selected at the moment...

#1700 Comment 6:
Now, on TravisCI, integration tests still run, but are not treated as breaking the build - 7832ddf72cd0c08b965d5e985544658ca2e9416a

That means, one can run the tests on occasion and if one wants to dive deeper, he can try to solve the issues. Howver, we think, the GUI code might be that broken so that we have to focus on porting JabRef completely to JavaFX. We track the progress at https://github.com/koppor/jabref/issues/143. "Broken" means that some GUI code runs outside the [EDT](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/dispatch.html).

--------------------------------------------------------------
#1699 Comment 1:
Formatting issues with Eclipse - I will change Eclipse config.

@stefan-kolb will remove the lines

We didn't like to do premature optimization as we don't like disabled code. We should enable the check as soon as Globals is really independent of Logic.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1696 Comment 1:
@oscargus  I get an NPE when starting JabRef:

```
Exception in thread "AWT-EventQueue-0" java.lang.ExceptionInInitializerError
    at net.sf.jabref.JabRefMain.start(JabRefMain.java:70)
    at net.sf.jabref.JabRefMain.lambda$0(JabRefMain.java:52)
    at java.awt.event.InvocationEvent.dispatch(Unknown Source)
    at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
    at java.awt.EventQueue.access$500(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.awt.EventQueue$3.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: java.lang.NullPointerException
    at net.sf.jabref.preferences.JabRefPreferences.getBooleanDefault(JabRefPreferences.java:986)
    at net.sf.jabref.preferences.JabRefPreferences.getBoolean(JabRefPreferences.java:978)
    at net.sf.jabref.model.entry.InternalBibtexFields.<clinit>(InternalBibtexFields.java:72)
    ... 16 more
```

#1696 Comment 2:
Interesting. Now after a second run it seems to work correct...

#1696 Comment 3:
Strange. I do not have any problems starting. Looking at this PR, I strongly doubt that it affects anything since the `new MetaData()` is simply moved in two places, none which should be active during startup...

#1696 Comment 4:
Your error seems to relate to `defaults` in `JabRefPreferences` not being initialized when trying to access `SpecialFieldsUtils.PREF_SERIALIZESPECIALFIELDS`. I guess that is the risk of the static initializer in `InternalBibtexFields`, that other things may not have initialized yet. We should fix it so that it does not have a static initializer and gets the required preferences injected on startup from `JabRefMain`. Relates to https://github.com/koppor/jabref/issues/150

--------------------------------------------------------------
#1695 Comment 1:
Messed up different versions, so will check on my other computer...

#1695 Comment 2:
Found the most recent version, so good to check now.

#1695 Comment 3:
Besides my minor comments: LGTM

#1695 Comment 4:
Uhhh... I can't run JabRef at the moment:

```
$ java -jar JabRef-3.6dev--snapshot--2016-08-18--master--0c16669.jar
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
        at java.util.Objects.requireNonNull(Unknown Source)
        at net.sf.jabref.logic.layout.LayoutFormatterPreferences.fromPreferenc
(LayoutFormatterPreferences.java:33)
        at net.sf.jabref.logic.exporter.CustomExportList.readPrefs(CustomExpor
ist.java:76)
        at net.sf.jabref.logic.exporter.CustomExportList.getCustomExportFormat
CustomExportList.java:59)
        at net.sf.jabref.JabRefMain.start(JabRefMain.java:85)
        at net.sf.jabref.JabRefMain.lambda$main$0(JabRefMain.java:56)
        at net.sf.jabref.JabRefMain$$Lambda$1/1557989809.run(Unknown Source)
        at java.awt.event.InvocationEvent.dispatch(Unknown Source)
        at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
        at java.awt.EventQueue.access$500(Unknown Source)
        at java.awt.EventQueue$3.run(Unknown Source)
        at java.awt.EventQueue$3.run(Unknown Source)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown So
ce)
        at java.awt.EventQueue.dispatchEvent(Unknown Source)
        at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
        at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
        at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
        at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
        at java.awt.EventDispatchThread.run(Unknown Source)
```

Related to this PR?

#1695 Comment 5:
Yes, I do not really understand exactly why it worked earlier, but I fixed
it now.

--------------------------------------------------------------
#1693 Comment 1:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1686 Comment 1:
LGTM! :+1:

--------------------------------------------------------------
#1685 Comment 1:
@JabRef/developers: I rebased this and introduced a change in `MetaData`, making constructors without provided `Charset` deprecated. This is an attempt to get rid of the `Globals` dependency. Didn't change anything else related to that in this PR, but once merged there are many things to be changed.

#1685 Comment 2:
Some small remarks. After fixing these and the codacy issue, this can be merged.

--------------------------------------------------------------
#1684 Comment 1:
Mhh, I think this is the wrong place to add this functionality. If I name my group `\relax` (or `\beta`) then I probably want to keep this name.
But I think it is a good idea to add the Latex-to-Unicode-formatter to determine the name when groups are automatically created. 

#1684 Comment 2:
Really!? If you name a group \beta, in a program dealing with LaTeX, would
you be upset if it shows the beta properly? (The \relax use case is, ehh,
far  fetched?)

#1684 Comment 3:
Do we really need to allow latex code for group names? Why is normal text not enough? I'd rather not have this option and keep it simple. 

#1684 Comment 4:
See #1681. Names containing accents is the main reason. Already now, the names can contain LaTeX code (except that the reading is flawed, again see #1681). It's just that they are properly rendered now. I  do not really see the problem.

#1684 Comment 5:
For me the problem is that the Latex -> Unicode converter is not good enough to handle arbitrary text and I think we may run into problems where names of groups are not properly rendered (i.e. "A or B" in the form "A\B", or similar things with backslash). As a user, I kind of expect that JabRef takes what I give it as a name (especially since I can provide unicode strings, I don't see the reason to support latex accents). Moreover, we might run into big performance problems with groups again.

The idea is nonetheless good. Just put the conversion code in the automatic generation of groups (since there the user has no control over the names of the groups).

#1684 Comment 6:
I see your point, although I'm not fully agreeing with it (I'd rather write $\Delta\Sigma$ than look up the Unicode key and writing \ in anything related to LaTeX expecting it to stay a backslash seems questionable... ;-)), but you solution is fair enough and leads to more or less the same end result. Only question is if BibTeX is bothered by Unicode characters in fields that are ignored anyway? (Yes, there are good reasons to use BibTeX for many people.)

Could you have a look at why the backslashes are removed when reading back the group definitions? (Since you have better insight into the group package.)

#1684 Comment 7:
I changed it to do the conversion upon generation of automatic groups (and correspondingly changed the CHANGELOG entry).

#1684 Comment 8:
Ok, just make the fomatter a normal variable and then this can be merged. I will have a look at the serialization / parsing problem as soon as I'm back in Germany (i.e. in a month)

--------------------------------------------------------------
#1683 Comment 1:
<img width="269" alt="capture14" src="https://cloud.githubusercontent.com/assets/8114497/17440765/4924f2d8-5b2e-11e6-9c48-85b941c7ce93.PNG">

#1683 Comment 2:
Please do not use "Implemented #1682" as title. One cannot follow the link to the root issue :smile: A small description makes it much easier.

#1683 Comment 3:
Otherwise, please rebase and merge :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1678 Comment 1:
:+1: 

--------------------------------------------------------------
#1677 Comment 1:
Is it possible to also copy the files if the absolute directory of the file differs? The relative path of the source should be resolved against the file path of the current bib file. Including directory creation.

#1677 Comment 2:
That is indeed another thing which I haven't considered. I was primarily thinking of generating a bib without files (for OO/LO and AUX), but clearly, for proper copying files should be included. Even better if everything can be added to a Zip archive as well.

#1677 Comment 3:
@oscargus If the only thing is that the files aren't copied, this should be ready for review, isn't it?

#1677 Comment 4:
Maybe it is OK to add. It is not really what I aimed for (yet), but the string copying works for AuxParser (I think), so always something.

#1677 Comment 5:
Could you point to the concrete file "with a string in the preamble". Are these comment strings? I think, you reference #900?

#1677 Comment 6:
https://github.com/JabRef/jabref/blob/master/src/test/resources/net/sf/jabref/logic/auxparser/config.bib

#1677 Comment 7:
@lenhard You recently worked on reading and writing bib databases. Can you comment on parsing `@preamble`. As far as I understood @oscargus, he wants to know which strings are used at `@preamble` and thus only copy these fields.

I don't know `@preamble`. Any pointers to documentation? :innocent: 

@oscargus: Leaving `@preamble` and file copying aside, this should be ready for review, isn't it? I would like to get this merged to minimize the LOC for PRs. This enables us to quickly review PRs in our spare time. Longer PRs cannot be quickly reviewed.

#1677 Comment 8:
The preamble is parsed as-is with formatting and everything and set as a String member of `BibDataBase`. I am unaware of any formatting or syntax restrictions within the preamble.

Honestly, I do not really get what it should be good for, it seems like a relic. Apparently it is part of Bibtex, and, therefore, we parse it, have an editor for it and serialize it. It seems that it is more relevant for programs that compile the bib file. Here are some, not very conclusive references on the preamble: [first](http://maverick.inria.fr/~Xavier.Decoret/resources/xdkbibtex/bibtex_summary.html#preamble), [second](http://www.bibtex.org/Format/), [third](https://www.cs.arizona.edu/~collberg/Teaching/07.231/BibTeX/bibtex.html). 

If you want to decide, which strings are used in a preamble, it would be best to parse the preamble string and look for occurrences of `#`. Best to keep this simple. If we miss edge cases of preamble usage, it is probably irrelevant, as hardly anybody uses it.

#1677 Comment 9:
@koppor yes, the introduced functionality works, although it is not enough to obtain the complete purpose, so it can be reviewed and merged for now.

Personally, I do not really see the need for strings in the preamble, but since we have a test for that it felt wrong to break/remove that test just because I couldn't bother to handle it...

#1677 Comment 10:
As of 1684cdccc205e4e836b2379d3c97b7e14bcc5186 this is integrated into master now. I had to do it on a separate branch since I have no commit access to the branch here. However, all commits are preserved. 

I addressed the issues mentioned above that I agreed with, which were all rather minor quality things.

So this branch can be closed now.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1673 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#1672 Comment 1:
Should we try to collect the preference strings we remove and provide a function to erase those from the preferences? The string can then be kept for a few years and finally retired for good.

#1672 Comment 2:
How did you find out which preferences are unused? Did the IDE mark them as unused?

There is no need to manually cleanup the registry from old preferences. Hardly any software actually does that and we are just talking about a few key value pairs.

#1672 Comment 3:
I searched (almost) every string constant in `JabRefPreferences` and checked how they were used (with some thinking as clearly the count is not always a good indication). For most of the removed ones I also search for the actual string, just to confirm that someone had hardcoded the string instead. All four "features" are also quite straightforward to test and see if they are working and if the preference makes any difference (hint: no). Typically these were only used in the preferences and the preference dialog.

The ones marked as not changable are simply used in (typically) two places, once to set the default value and then they are used in one line of code (and that is not the preference dialog).

#1672 Comment 4:
Ok, since this is somewhat hard to review by looking at the code, we'll trust you here. Please merge and rebase!

#1672 Comment 5:
I can summarize:
- `JabRefPreferences.GROUPS_VISIBLE_ROWS` not needed since group pane now always maximizes the height.
- `JabRefPreferences.GENERAL_FIELDS` not used (so the migration is not needed)
- `JabRefPreferences.DISABLE_ON_MULTIPLE_SELECTION` never used in the code (so entry editor is never disabled on multiple selection)
- `JabRefPreferences.VALUE_DELIMITERS` (2) JabRef always use `{}` for storing fields (the comboBox was not in the layout, but in the code)
- `JabRefPreferences.DEFAULT_AUTO_SORT` No default auto sort any more (as this preference is not used except in the preference dialog)
- `JabRefPreferences.CTRL_CLICK` Ctrl + left click will never ever bring up the right-click menu (as this preference is not used except in the preference dialog)
- `JabRefPreferences.DIALOG_WARNING_FOR_DUPLICATE_KEY` and `JabRefPreferences.DIALOG_WARNING_FOR_EMPTY_KEY` there will never be any automatic warnings when entering an empty or duplicate key

#1672 Comment 6:
Just go ahead and merge this :smile: :+1: 

--------------------------------------------------------------
#1671 Comment 1:
@matthiasgeiger Should work now :smile: 

#1671 Comment 2:
LGTM (apart from the minor comments via Skype :wink: )

--------------------------------------------------------------
#1668 Comment 1:
LGTM

--------------------------------------------------------------
#1666 Comment 1:
Are there any other remarks?

#1666 Comment 2:
Travis is failing because of UI tests...

#1666 Comment 3:
Please not that the UI tests are done but **ignored**. Please read the travis output and check for **red lines**

Checkstyle failed. Your IDE settings seem to be non-formant. Please double check: https://github.com/JabRef/jabref/wiki/Guidelines-for-setting-up-a-local-workspace#intellij

```
:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/net/sf/jabref/logic/importer/fileformat/BibTeXMLImporter.java:36: 'net.sf.jabref.importer.fileformat.bibtexml.Entry' should be separated from previous imports. [ImportOrder]

 FAILED

FAILURE: Build failed with an exception.

* What went wrong:

Execution failed for task ':checkstyleMain'.

> Checkstyle rule violations were found. See the report at: file:///home/travis/build/JabRef/jabref/build/reports/checkstyle/main.html

* Try:

Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 1 mins 16.912 secs

```

--------------------------------------------------------------
#1662 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1661 Comment 1:
Except for the remark LGTM :+1: 

--------------------------------------------------------------
#1660 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1660?src=pr) is 29.15% (diff: 32.20%)

> Merging [#1660](https://codecov.io/gh/JabRef/jabref/pull/1660?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **<.01%**
> 
> Powered by [Codecov](https://codecov.io?src=pr). Last update [47b02ee...005e532](https://codecov.io/gh/JabRef/jabref/compare/47b02ee7570c7d5f49942427eef096e3cab20ff3...005e532be6b9372f27ae990b294b623158e61ec8?src=pr)

--------------------------------------------------------------
#1659 Comment 1:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1657 Comment 1:
Thanks!

--------------------------------------------------------------
#1656 Comment 1:
LGTM :+1: 

#1656 Comment 2:
Can be merged if the failing build comes from the arXiv problems.

--------------------------------------------------------------
#1655 Comment 1:
The line ending issue is probably a git config option:
http://stackoverflow.com/questions/10418975/how-to-change-line-ending-settings
On windows it should be set to autorcrlf = true

#1655 Comment 2:
If that code does not work, the reason is a wrong design decision.
1. Plesae create HiddenFieldEditor for a hidden field. It treats fileds prefixed with `_`
2. The EntryEditorTab contains both HiddenFieldEditor and FieldEditor. One is shown, one is hidden.
3. "Hide" hides FieldEditor and shows HiddenFieldEditor
4. "Show" hides HiddenFieldEditor, shows FieldEditor

#1655 Comment 3:
Suspended until September, 5th (if no one else is going to discuss https://github.com/JabRef/jabref/pull/1655#issuecomment-239390322 with @ayanai1).

#1655 Comment 4:
Hide and Show field for required(figure 1) and optional(figure2) fields is working:

![hiddenreq](https://cloud.githubusercontent.com/assets/15369371/18834262/3dff2bae-83f5-11e6-893b-c491f1028f94.JPG)
Figure 1: required fields

![hiddenopt](https://cloud.githubusercontent.com/assets/15369371/18834270/4964100e-83f5-11e6-97bc-9ce031cfb451.JPG)
Figure 2: optional Fields

The Bibtex scource tab(figure 3) shows which fields are hidden too:
![bibsource](https://cloud.githubusercontent.com/assets/15369371/18834196/dfe9d21c-83f4-11e6-94b9-2c938ed1287a.JPG)
Figure 3: Bibtex scource tab

#1655 Comment 5:
Please fix travis, otherwise it's ok from my side 👍 

#1655 Comment 6:
Please comment on the layout issues. I think, they cannot be solved, can they?

#1655 Comment 7:
   @koppor the problem here is that we do not have any time left and the layout is beeing created by a DefaultFormBuilder if we had more time to design the layout ourselfs this issue could be resolved but unfortunatly we don't.

#1655 Comment 8:
The DefaultFormBuilder stuff can be manually adjusted, but it's a complicated and frustrating mess... :fearful: 

#1655 Comment 9:
OK, thank you for the information. Then I treat this as interesting experience with coding UIs.

--------------------------------------------------------------
#1654 Comment 1:
I know, WIP but it look so good that I already reviewed it. After fixing my small remarks, this should be good to go

#1654 Comment 2:
LGTM :+1: 

#1654 Comment 3:
LGTM :+1: 
Can be merged after the remarks are fixed.

#1654 Comment 4:
Apart from the obsolete location and the `Globals`: LGTM! :+1: 

#1654 Comment 5:
@oscargus  @tobiasdiez  @koppor Are we ready to merge this?

#1654 Comment 6:
I would prefer that my comments are taken care of. On the other hand, it is quite quickly done, so not a show stopper if I have to do it myself after merging.

#1654 Comment 7:
Let's wait for the comments to be implemented!

#1654 Comment 8:
Are the changes as expected?

#1654 Comment 9:
@oscargus 

#1654 Comment 10:
It is OK to merge for me. I commented on what I really would have liked to see, but it is easy to change later and the change provided makes it even easier. The location of `IdBasedEntryFetcher` is perfect! :+1:

#1654 Comment 11:
LGTM! :+1: (The copyright comments should be removed as we changed license, but, again, minor detail and nothing that would stop me from merging.)

#1654 Comment 12:
Is it possible to update the fetcher to fix https://github.com/koppor/jabref/issues/125? I think, just the normalization functionality has to be called. Maybe a cleanup job? Maybe after #1929 is merged to use the `postProcess` method?

--------------------------------------------------------------
#1652 Comment 1:
Just some minor remarks, rest looks good :+1: 

--------------------------------------------------------------
#1651 Comment 1:
I didn't see any information about this at the help pages. Maybe it is worthwhile pointing out the field name to use?

#1651 Comment 2:
Not sure, but the sample code on writing CustomImporters should be then corrected, too?
https://help.jabref.org/en/CustomImports

#1651 Comment 3:
Not because of this PR, but clearly because of the importer refactoring.
Hadn't thought about that...

It has been `entrytype` for quite some time internally, so may make sense
to use the same. However, it struck me that there could be other formats
using `bibtextype` such as BibXML or whatever it is called. Not that it is
a problem but maybe it is good to be consistent...

#1651 Comment 4:
An automatic migration for this would be good?!

#1651 Comment 5:
I'm not sure if we want to change peoples layout files... This is sort of similar as when FormatChars was replaced. At the moment there is a still support for the old name.

It would be nice to make people aware of it one way or the other though...

#1651 Comment 6:
I should change the default previews as well.

#1651 Comment 7:
I updated the code to print a warning if `bibtextype` is used in a layout, with an encouragement to change it.

#1651 Comment 8:
Please adress my minor comment and merge.

I would have liked to see test cases for the layouts, but I think, this is too complicated for now.

Minor thing: We should render the article type in a similar way as in the `bib` file: `InProceedings` vs. `Inproceedings`:

![grabbed_20160815-091644](https://cloud.githubusercontent.com/assets/1366654/17658074/07ea606c-62c9-11e6-9215-1945ef137b21.png)

![grabbed_20160815-091659](https://cloud.githubusercontent.com/assets/1366654/17658078/150af7a2-62c9-11e6-8c12-091034e4f9a2.png)

#1651 Comment 9:
The rendering in line 113 of MainTableColumn, but I have no idea where the camel cased entry types reside (should be easy to find though).

#1651 Comment 10:
I fixed rendering in the main table and added a formatter, `EntryTypeFormatter` for camel casing entry type names.

--------------------------------------------------------------
#1650 Comment 1:
LGTM

--------------------------------------------------------------
#1649 Comment 1:
LGTM :+1: , However, will be sooner or later replaced by the work in #1336. So I would vote for merging in

--------------------------------------------------------------
#1648 Comment 1:
OK. If only the build passes, I think I'm done here. 

Issues remaining (some which are not easily fixed, others are just too time consuming this weekend):
- dependency `cli` -> `gui` (because of `EntryFetcher`)
- some dependencies `logic.importer` -> `Globals` (fixed by #1642 and with new `LabelPatternUtil.checkLegalKey` default)
- `DOItoBibTeX` is a quite ugly class. Might just as well be a proper class implementing the new Fetcher interfaces and not just static methods. On the other hand, right now there are less issues with preference changes.
- The static methods in `logic.util.io.AutoSaveUtil` can maybe find a better home.

Let me just say that if you find this OK, please merge it. I'm not looking forward to rebasing to many times... ;-)

#1648 Comment 2:
There are two "new" tests as well: ParsedBibEntryTests.java and BibDatabaseTestsWithFiles.java containing tests which used to reside in model, but since they also depended on importer, the architecture test now complains. Since they are supposed to test BibDatabase and BibEntry, it should be OK to hard code the entries rather than parsing them.

#1648 Comment 3:
@JabRef/developers anything else at the moment here? There are some things remaining, but it would be nice to merge this and not risk complicated rebasing. In total there's been a significant step towards the wanted architecture (and, if nothing else, any remaining issues is made clearer with this PR).

#1648 Comment 4:
LGTM :+1:  Please have a look at the Codacy Issues. 

#1648 Comment 5:
OK, I fixed the comments (and note that only one of the comments and Codacy issues were generated by this PR ;-)).

#1648 Comment 6:
@JabRef/developers I merge this now. Nothing is really changed (except for moving things around), and there has at least been some reviewing.

--------------------------------------------------------------
#1645 Comment 1:
Potential issue: when deleting an entry all references to it in `crossref`and `related` is removed, which is good. However, when undo:ing, that information is not restored. Similarly, undoing after removing a BibTeX key doesn't restore `crossref`and `related`. Undoing works for plainly changing the key, as this will trigger new events.

Not sure what the best solution is. Either not removing the keys in the fields, leading to an inconsistent database, or keeping it as it is, that the information is lost. I cannot really see how to actually undo it. It is of course possible to add undo information from the listener, but then it will be a separate undo compound compared to the remove, so one will need to undo twice...

Apart from that, this PR should be ready for review.

#1645 Comment 2:
Anything else here?

#1645 Comment 3:
Looks good to me.

#1645 Comment 4:
I changed so that each BibDatabase creates and adds a KeyChangeListener, so
it will always be present.

I must have downloaded some updates on my mobile broadband, so I have very
limited data left for the rest of the month. Hence, all updates will come
Thursday evening (when I'm back with WiFi).

#1645 Comment 5:
The tests will pass again once #1697 is merged.

#1645 Comment 6:
This is dangerious. 
I removed  a large number of book entries to only update with a new version of them exported from Bookends. All the _incollection_ entries crossrefed with them have lost their crossref field. 
I thought the **update** would not delete the fields: only update when there is change on the key. That is what BibDesk does. It never delets the keys. 

Unless you can implement it like the BibDesk, I think it is better to put this feature into the Cleanup tools. The user can call for it only when she wants to update changes. It is dangerous otherwise. I was shocked when I see all of them have lost their link. if not for Timemachine, I would be crying by now. 
--------------------------------------------------------------
#1644 Comment 1:
Am not sure what counts as a large database. My database has currently 9883 entries, out of which 591 use crossref information. I do not perceive any slowdown in daily use.

#1644 Comment 2:
Thanks @ilippert! I'd say that it counts as a large database here, especially considering the amount of crossref entries.

I've updated the code a bit and added a CHANGELOG entry describing the change.

#1644 Comment 3:
OK, I thought it would make sense if one could see which fields are resolved (if nothing else to not confuse some users), so I added that as well. This is a different setting since I think there are different things to want to see required and optional fields and which field that are resolved. At the moment resolved field have precedence if both are enabled.

<img width="892" alt="capture15" src="https://cloud.githubusercontent.com/assets/8114497/17491414/d8189f64-5da7-11e6-98a7-f2cd3608cd4a.PNG">

Good thing is that the check for optional/required/resolved is now only done if any of the flags are enabled, and, hence, the rendering should be slightly faster compared to before when not enabled.

#1644 Comment 4:
Could you add an example bib file (maybe artificially generated) to show the effects of your change. I see your screenshot, but I want to try it for myself. -- Up to now, I did not use resolved fields at all as it seems that bibtex/biblatex resolves them differently and I don't know, how far JabRef follows this. Moreover, copy and paste does not work intuitively, but this is addressed at #1677.

#1644 Comment 5:
Here is a bib-file to show a bit (must use extension .txt for GitHub). Make sure you show year, date, and month (this also shows that we should try to normalize the month display based on database type, I think). 
[resolvedatabase.txt](https://github.com/JabRef/jabref/files/418847/resolvedatabase.txt)

#1644 Comment 6:
I checked it with normal JabRef config. The "background color for resolved fields" doesn't seem to have any effect, but it should.

### normal operation

<img width="429" alt="sp160817_081811" src="https://cloud.githubusercontent.com/assets/1366654/17726430/2f2d09e6-6453-11e6-8fa3-4c6540c9b890.png">

### resolved

<img width="636" alt="resolved" src="https://cloud.githubusercontent.com/assets/1366654/17726448/50181a06-6453-11e6-92b1-cac1ee76749b.png">

#1644 Comment 7:
You mean it should be enabled by default or that enabling it doesn't lead to any changes? There should be a light-gray background... 

#1644 Comment 8:
OK, I think I understand what you meant. Either way, I fixed a problem related to that now.

Which leads to another question: how should we deal with marking mandatory fields if there are, say, "author/editor" and exactly one of them is mandatory, both are mandatory, or it is mandatory to have one of them? Now, the column name is simply compared with the list of mandatory fields, so it only works for single field columns.

#1644 Comment 9:
The "Background color for resolved fields" seems to have no effect here:

![grabbed_20160817-213158](https://cloud.githubusercontent.com/assets/1366654/17750305/0cc6a816-64c2-11e6-93ed-a5f7269258cc.png)

Regarding "author/editor" -> Why not splitting the name using "/" and then checking each of them during the column name comparison? I know, we should use some cool data structures. Since we are aiming for JavaFX, this can be that dirty IMHO.

#1644 Comment 10:
You need to tick "Color codes for resolved fields".

The splitting can be easily done. The question is just what the logic should be? Say that a column shows "author/doi", "author" is a mandatory field, but only the "doi" is present. Color?

#1644 Comment 11:
Is it possible to enable "Color codes for resolved fields" as soon as one changes the color for resolved fields?

Color: If (at least) one mandatory field is missing: Color it red. Otherwise, normal color. In your example, the field would be red: Some content is there, but not the mandatory one.

#1644 Comment 12:
Currently, only the number is colored red, so I do not think that is actually the answer. There may, for example, be another column with "editor" which is present and the entry is a book. I know it sounds complicated (and made up examples), but I thought about it and I do not really see what logic should be used for marking required and optional fields when there are multiple fields in one column.

Maybe the easiest way is to just enable the resolved entry marking by default? While it is possible, with the current code structure it will be quite hacky (since the buttons are initialized in one loop, I will have to single it out, etc, now, since it is the last one, at the moment, it is quite reasonable, but not really a nice solution).

#1644 Comment 13:
For consistency one should in that case also do the same thing for the other color codes (required/optional) and grid lines. Maybe one can pass a JCheckButton to the ColorButton as an extra argument, passing null for all other cases?

#1644 Comment 14:
I added automatic enabling for those three cases...

#1644 Comment 15:
Here is one suggestion about the Crossref: 
It would be nice if the **BookTitle** could be displayed, rather than the **Title**

That, is when the parent entry has only BookTitle (not the title--due to the problems of Bibtex; we cannot use the Title unless we migrate to BibLatex). 

Here is a Proceeding with the Booktitle: [Collection](https://snag.gy/ySOs67.jpg)

Look at the following link: the Booktitle is not visible: 
[crossrefered](https://snag.gy/JEk4dC.jpg)

https://snag.gy/JEk4dC.jpg
#1644 Comment 16:
@Dellu 
it might be the case that you can achieve the desired effect by setting in the jabref preferences|Entry table columns| a field name to e.g. title/booktitle/chapter.
The effect is that if available the first, and if not available the second field name (and so on) content for the field is shown.
#1644 Comment 17:
sorry, yes, now I see more clearly. My fault for commenting too swiftly.
--------------------------------------------------------------
#1642 Comment 1:
As a bonus, I cleaned up in the constructors of `TypedBibEntry` and only kept two public:

```
    public TypedBibEntry(BibEntry entry, BibDatabaseMode mode)
    public TypedBibEntry(BibEntry entry, BibDatabaseContext databaseContext)
```

skipping the latter one, this could reside in `model` but I'm sure there's some other good argument not to keep it there.

#1642 Comment 2:
And extracted the preferences to XMPPreferences.

#1642 Comment 3:
Honestly, I am not sure if this is worth the effort. The current XMP functionality builds upon an oudated library (apache pdfbox). We only keep to this, since newer versions of said library dropped the functionality we need. Hopefully, they re-introduce it and once they do, all our current XMP code will land in the bin.

I'll have a look at your changes nonetheless.

EDIT: No other remarks code-wise than your changes below. Just please make sure through manual testing that the XMP feature still works ;-)

#1642 Comment 4:
I have never used the XMP feature... ;-) But all 28 tests still works.

#1642 Comment 5:
`./gradlew check` is failing on my machine and on travis.

```
java.lang.NullPointerException
    at net.sf.jabref.logic.xmp.XMPSchemaBibtex.setBibtexEntry(XMPSchemaBibtex.java:291)
    at net.sf.jabref.logic.xmp.XMPSchemaBibtex.setBibtexEntry(XMPSchemaBibtex.java:279)
    at net.sf.jabref.logic.xmp.XMPSchemaBibtexTest.testSetBibtexEntry(XMPSchemaBibtexTest.java:250)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
...
```

#1642 Comment 6:
I fixed the test.

#1642 Comment 7:
Thanks! For some reason the tests were not executed on Travis after the
final commit, but as I just moved one file I thought it shouldn't affect
anything.  (I have problems running anything from gradlew locally, but the
actual test passed...)

--------------------------------------------------------------
#1641 Comment 1:
Remove the old code. It can be restored at every point. That's why version control exists ;)

#1641 Comment 2:
I removed it now. Although I rarely go back in the repository to see how things were solved earlier... (Btw, there are some more example of commented out code in that file, but I left it for the moment. Things like almost getting next page fetching to work.)

--------------------------------------------------------------
#1640 Comment 1:
No need to regret, I won't force you to format every equals implementation equally ;-)

No harm can come from the intial check you implemented for the equals methods (it's a performance optimization after all). 

I'll merge this right away.

--------------------------------------------------------------
#1638 Comment 1:
Looks good!

Is it possible to comment multiple entries?

```
@Comment{
@Article{
...
}
@Book{
...
}
}
```

Guess it is...

#1638 Comment 2:
Great!

And just to be sure, I added another unit test for a `@comment` that contains multiple entries.

--------------------------------------------------------------
#1637 Comment 1:
Some comments: 
- ~~There will be a more intelligent text in the right column. Now I just took the title. The idea is to use some layout formatter to get a nice string.~~ Now there is a slightly more intelligent text.
- ~~It is possible to drag entries from the main table, but hard to know for sure which entry is in the editor when dropping.~~ Disabled drag and drop as it doesn't make sense with the current select entry -> update entry editor 
- The key column can be edited and the right column updates appropriately.
- ~~No support for entries changing keys (yet, this is already an issue for e.g. the crossref field and should be solver independently).~~ Fixed in #1645 
- ~~The buttons for the crossref field are wrong. I just removed two to make it look like one cannot move entries up and down (since there can only be one entry there).~~ Fixed
- ~~It looks like it is possible to right-click on an entry an select it in the main table, but it doesn't work (yet).~~ Fixed
- ~~When moving entries up and down as well as adding them, there are some weird things going on. Maybe it is needed to synchronize absolutely every access to the underlying list?~~ Fixed
- The "links" tab is just something I made up in "Set up general fields". crossref (which should be a single line field as the key, btw, if this PR is not finished) and related should be treated as regular fields.

#1637 Comment 2:
@JabRef/developers : This can be tested at http://builds.jabref.org/entryfield/ now as it works quite well. Make sure that you show the `crossref`, `related`, and/or `entryset` field(s) in some tab. With this it would also make sense to start thinking about `citedby`/`references` fields as it will be easily implementable now.

#1637 Comment 3:
I'm having some problems getting a bibtex key auto completer to work in the table. Has anyone worked with the auto completer and knows how it works?

#1637 Comment 4:
Can we first do something without autocompleter?

I worked with the auto completer ~5 years ago, but I have nearly forgotten anything. And it was a mess.

#1637 Comment 5:
Is the current state that we "only" have to test and then this is good to be reviewed?

#1637 Comment 6:
Yes, I think that it is good to try out. Apart from the auto completer and drag-and-drop (which seems quite hard to get right since the entry editor is updated when selecting fields) this should be OK.

#1637 Comment 7:
Do you have time to work on the functionality a bit?
- [ ] After clicking `+` and double clicking on `Unknown entry`, the editor of the bibtex key has to be focused
- [x] When double clicking the second column, nothing happens. "Select" should be executed
- [ ] When pressing `+` and then the "go down" button, an exception is raised

```
Exception in thread "AWT-EventQueue-0" java.lang.IllegalArgumentException: Row index out of range
        at javax.swing.JTable.boundRow(JTable.java:2143)
        at javax.swing.JTable.setRowSelectionInterval(JTable.java:2166)
        at net.sf.jabref.gui.fieldeditors.EntryLinkListEditor.moveEntry(EntryLinkListEditor.java:343)
        at net.sf.jabref.gui.fieldeditors.EntryLinkListEditor.lambda$new$3(EntryLinkListEditor.java:124)
```
- [ ] I have to restart JabRef to get "Other fields" shown. Steps: New database, add entry with `surelynotknown = {value}`, add another entry, switch back to first entry. No tab "Other fields shown". This might really be out of scope.

#1637 Comment 8:
Autocompletion: @stefan-kolb might know something (because of #1136), but this might be too far away. @stefan-kolb We would "just" need to have an AutoCompleter for all existing bibtex keys. If this is easy possible, that would be fine.

#1637 Comment 9:
[BibtexKeyAutoCompleter](https://github.com/JabRef/jabref/blob/ee08252a495c8951206201829651a2c320893735/src/main/java/net/sf/jabref/logic/autocompleter/BibtexKeyAutoCompleter.java) ?

#1637 Comment 10:
Yes, the auto completer is there. I just cannot get it to work in a table cell...

#1637 Comment 11:
I removed more unused code. Added double click (and a place holder for focusing on the bibtex key field, which I do not know how to do). I couldn't trigger the error you mentioned, but noted that the last edit is not always saved properly. For example, if one selects a new entry. I do not think this happened earlier, but not sure.

--------------------------------------------------------------
#1636 Comment 1:
I recently tested the version on Windows in a branch locally,  worked good. The only thing which failed was the test you already corrected.

--------------------------------------------------------------
#1635 Comment 1:
LGTM code-wise. One remark though: We decided in the last devcall that we want to replace the custom cookie implementation of JabRef with some external library. We haven't decided which one to use yet, so some more tests do certainly not hurt.

--------------------------------------------------------------
#1634 Comment 1:
Add changelog entry for the bug fix, then merge this in.

#1634 Comment 2:
Did that. I initially ignored it since it was a quite harmless bug that probably very few people would even notice.

#1634 Comment 3:
Documenting improvements of JabRef does not harm :wink:

--------------------------------------------------------------
#1631 Comment 1:
Regarding the fileDialogs and eventual nulls, please don't change that much, as I am rewriting them completely in #1336. I will only make merging harder ;)

#1631 Comment 2:
I only changed where the extension List was set to null and where the un-null setting of a File was optional leading to an NPE. The "possible" nulls I leave. :-)

#1631 Comment 3:
Added CHANGELOG entries for the NPE bugs I corrected. @JabRef/developers : I think we should try and merge those fixes before next release. ;-)

#1631 Comment 4:
I checked the 35 equals methods of JabRef and there is clearly not a single pattern in how they are implemented. I'm not sure if `getClass` is the universal solution here. Sure, it is faster than `instanceof` but the use is dependent on the class, see e.g. http://stackoverflow.com/questions/4989818/instanceof-vs-getclass

Might be good to get some consensus on this and add it to the code guidelines. 

The other interesting question is if this should stop merging. Now I have updated it, but in this PR this was a very minor part and the alternative would have been to just not introduce the null check in the first place. The question is really if that would have been a better alternative? It is another thing if issues are introduced by incomplete code. To me it is not a problem, but I am thinking how new contributors react. There is a risk that they won't fix these minor issues if they are part of a bigger one or that they will stop contributing.

#1631 Comment 5:
Regarding equals consensus is easy. Effective Java sets the standard here. Let me quote the rules for implementing equals (for a deeper explanation, please refer to the book):
1. Use the `==` operator to check if the argument is a reference to this object. If so, return true.
2. Use the `instanceof` operator to check if the argument has the correct type. f not, return false.
3. Cast the argument to the correct type.
4. For each “significant” field in the class, check if that field of the argument matches the corresponding field of this object. If all these tests succeed, return true otherwise, return false.
5. When  you  are  finished writing your equals method, ask yourself three questions: Is it symmetric? Is it transitive? Is it consistent?

Also, note:
- Always override `hashCode` when you override `equals` (hashCode also has very strict rules)
- Don’t try to be too clever
- Don’t substitute another type for Object in the equals declaration

Regarding JabRef, most equals methods are probably broken in one way or the other. We should gradually replace these with correct implementations. From my point of view, incorrect equals methods should prohibit the merging of a PR. It is not so hard to implement a correct one (since most IDEs generate it), so it something that we can ask from people in my point of view. If you do it, it should be correct. As a side note, your implementation does not fully follow the rules, the first null check is not necessary as it is included in the third check (`null instanceof SomeClass` will always return false). This is just a performance issue, though, not a correctness one. However, you still need to provide a proper implementation of `hashCode`, otherwise the classes will fail to work when used in a `HashMap`. I'd suggest you let your IDE generate an implementation.

#1631 Comment 6:
My point was rather going from a broken `equals` to a slightly less broken `equals` (which is what happened here) rather than introducing a broken `equals`. Was the alternative of not touching the `equals` at all better? Simpler for sure.

I agree with you and, apart from the `this == oher` check is more or less how I usually write mine (no explicit checking for null).

Eclipse seems not to be one of those IDEs though. Or I haven't found the switch to make it more clever than `super(other)`...

#1631 Comment 7:
You would have gotten away without touching equals ;-) My point is: If you touch it, you should go all the way.

Eclipse generates you these methods via the menu: Source-> "Generate hashCode() and equals()". Your cursor needs to be in the class in which you want to generate the methods. In the following dialog, you can select the significant attributes of the class.

#1631 Comment 8:
Yes, that's my point. My question is if that is better? ;-)

Ahh, OK! Thanks! The generation based on warnings seems to be different.

#1631 Comment 9:
I added your bullets in the Wiki.

#1631 Comment 10:
Great! So this PR is now good to go, right? (at least from my point of view)

#1631 Comment 11:
Be warned about the Eclipse generated equals methods, it is not always ideal/correct.
using instanceOf makes sense if you want subtypes to be equal. But that is a philsophocial questions...;)
And for HashCode there is the nice Object.hash() method.

#1631 Comment 12:
I merge this now. Do not think it can be much better. ;-)

--------------------------------------------------------------
#1630 Comment 1:
OK, this is not flawless. Generating the database a second time in the same JabRef session leads to duplicate entries. Third time, tripled entries and so on...

#1630 Comment 2:
Apart from the things mentioned above, LGTM code-wise. But since I do not use open office, I have not tested the feature itself.

--------------------------------------------------------------
#1629 Comment 1:
I'm not sure if we really need didn't, couldn't and what's but otherwise LGTM :+1: 

#1629 Comment 2:
Found two small flaws - otherwise this is good to go.

Just merge after fixing!

#1629 Comment 3:
Thanks! I only searched for strings ending with AUX to fix and quickly browsed for the other issues (which I clearly missed).

I change to "A SAX" when I'm at it.

--------------------------------------------------------------
#1628 Comment 1:
From my side it looks good. :+1: 

--------------------------------------------------------------
#1627 Comment 1:
LGTM!

--------------------------------------------------------------
#1626 Comment 1:
LGTM

@oscargus how does this affect #1607 ?

#1626 Comment 2:
No idea. Probably a bit of resolving independent of who merges first. The feeling is that it is easier to merge the PR without moving of files first, but I'm not sure if that is true or if I just want less work. ;-)

#1626 Comment 3:
By the way, there is a preference setting "Enforce legal characters in BibTeX keys". Is that really needed?

The difference is the characters in `"{}(),\\\"#~^'"` but not in `"{}(),\\\""` so `"#~^'"`. I'm wondering if we upset many people by always enforcing legal characters?

#1626 Comment 4:
@oscargus: My changes were quite small and would be relatively easy to redo, so it's ok for me if you go first.

Regarding the BibTex keys: We have already upset at least one person in #1272. We talked about this issue on the devcall right now and arrived at the following decision:
- The preference setting "Enforce legal characters in BibTeX keys" can be removed, hence we will only enforce `"{}(),\\\"#~^'"`.
- Key validation should be based on the mode (BibTeX, BibLaTeX). Especially BibLaTeX is more strict and there should be an additional validation that checks for the symbols that are not allowed in BibLaTeX

#1626 Comment 5:
OK! If anyone could have a look at the PR I'll merge it.

So basically, the (in the PR introduced) boolean argument to `checkLegalKey` should be replaced with isBibLatex? Is it clear what the set of symbols are for the two cases?

#1626 Comment 6:
And we considered moving the check to the integrity dialog.

#1626 Comment 7:
Should be good to go. 

Just as a side note: What are the "default" buttons in Preferences-> BibTeX key generator supposed to do? For me, only the button for the default pattern works and actually resets something. The other default buttons basically just delete what I have entered into the corresponding text field. This behavior is independent of this PR. 

#1626 Comment 8:
I think the default is that every type has the same key pattern, so it makes sense that the pattern is cleared when clicking Default.

#1626 Comment 9:
LGTM! :+1: 

#1626 Comment 10:
I'm not sure whether we discussed it in this context at the last devcall, but moving those classes will lead to another node in the registry for storing those preferences - if the storing mechanism is not adjusted.

#1626 Comment 11:
@matthiasgeiger: Are you sure? Didn't that already happen through #1635 by introducing the new `LabelPatternPreferences`? As far as I understand, the old label preferences get lost through this change, but will not so easily get lost in the future, since they are now normal preferences.

#1626 Comment 12:
Just tested it: v3.5 and current master reads and writes from/to  `HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\net\sf\jabref\logic\labelpattern` - your branch reads and writes from/to `HKEY_CURRENT_USER\SOFTWARE\JavaSoft\Prefs\net\sf\jabref\model\labelpattern`

#1626 Comment 13:
Caused by: https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/preferences/JabRefPreferences.java#L1151 and https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/preferences/JabRefPreferences.java#L1174
Maybe we should discuss again how to implement this better and provide migrations this time ;-)

#1626 Comment 14:
Migrations are overrated :-)

We should at least change that to 

`Preferences pre = Preferences.userNodeForPackage(JabRefMain.class);`

to avoid future issues.

Although not part of this PR, let us keep this open and discuss at the next devcall on how to proceed.

Refs:  #1257

#1626 Comment 15:
Another topic for the devcall: Can we rename this "LabelPattern..." stuff to "BibtexKeyPattern..." ? - I never understood why this is called "label pattern" :wink: 

#1626 Comment 16:
TODO in new PR after this one is merged:
- Integrate label pattern preferences tree into global preferences tree
- Rename label pattern to bibtex key pattern.
- Possible migration of old key patterns

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1623 Comment 1:
:+1: Really nice. What I am concerned about is the number of places we have to put this check. We should really think of a way where configuration changes can flow from the preferences to the GUI elements. Maybe use a event bus for the preferences as well, especially regarding the classes in the GUI package? This could maybe reduce the number of restarts that are required upon changing preferences. What do the other developers think? @JabRef/developers 

#1623 Comment 2:
It is a bit weird that the rows are not automatically resized on Windows. It seems like this happens for the heading but not the content rows. Maybe easier to send in a bug report to Oracle/Microsoft?

#1623 Comment 3:
We are not the first who stumble across this issue. And I doubt that it will be fixed for Swing. 
Fpr high dpi things, a  bit searching on SO found that source, which compares different sizes and dpi settings, including JavaFX:
http://kynosarges.org/GuiDpiScaling.html

#1623 Comment 4:
This isn't really the same thing as in the link, although it is somehow
related as it tries to solve the same problem. Still, bad rendering when
changing the font size is a fundamental issue. (Or is there some automatic
size parameter that must be enabled?)

I also doubt that they will fix it, though. Although it is probably quite
easy as it works for the heading row, so just copy whatever different row
height calculation is there.

#1623 Comment 5:
There is a better solution though (maybe better Googling before coding):

http://stackoverflow.com/questions/15568054/how-to-change-jtable-row-height-globally

I'll try this out. Guess it is look-and-feel dependent but worth a try.

#1623 Comment 6:
As there was recently a issue or forum discussion regarding this topic I just want to make sure that you are aware of two different configurations: There is the option to increase/decrease the table font size using the "View" menu and there is also the "Menu and label font size" in Preferences -> Appearance. The latter setting not only affects the "Menu and label font size" but also sets the font size in the entry editor and potentially at other places...

And I just saw that there is also a "Table row height padding" setting which might be reason for the strange height behavior...?

#1623 Comment 7:
The current behavior is affected by "Menu and label font size".

As far as I am concerned "Table row height padding" is only for the main entry table, as well as the explicit font setting and increase/decrease font size.

In the link there are arguments that this is a feature, so they will indeed not change it. (It appears as if the "ideal" default table row height is different on different OS to start with, so they decided to just use the same constant for all systems...)

#1623 Comment 8:
Found a consistent way to do this. It also applied for JTree. I think that the "global" approach is Look-and-feel-dependent so this seems to be the best way to do it.

#1623 Comment 9:
LGTM. Please extract the two lines of code to a separate method and then it's good to go (from my side :innocent:).

--------------------------------------------------------------
--------------------------------------------------------------
#1621 Comment 1:
I pass on rewriting to the new interface at the moment, but there is a rewrite of the code to make it very simple to add merging based on other fields.

I'll make one small fix (add ISBN as a FieldExtra) and then it is ready for review.

#1621 Comment 2:
With the current code structure it would be simple to allow marking of several entries and loop through them. Main issue I would guess is that there is no way to effectively canceling this operation at the moment, one will just have to go through everything and it is not straightforward to solve that part.

Should I still implement it?

#1621 Comment 3:
I think the looping through multiple entries should be done in another PR. And we have to think about how to handle this in general. The user should be able to abort such actions if they require user interaction per entry. 

#1621 Comment 4:
I agree that there should be some better mechanism for canceling multiple entries.

The conflicts are all for translations. I wait with rebasing until this gets an OK to be merged. 

Btw, I added merging from ArXiv as well to this PR.

#1621 Comment 5:
To me, it looks good. But I think the IdBasedFetcher would be really helpful to implement here. However, this can be done in another PR. 

#1621 Comment 6:
In general, this PR looks good to me 👍 Just a few minor remarks.

By the way, I still don't get why there are two different dialogs for comparing/merging entries (MergeEntryDialog vs the new MergeFetchedEntryDialog)

#1621 Comment 7:
I changed things based on your comments, but will not push until Thursday.

I wasn't completely sure if ArXiv was the only thing that used eprint so
didn't want to add the button before clarifying that. Now I introduced a
more general approach so will be easier to do that now.

Historical reasons. There are some differences in the handling of entries
at the end though which may complicate merging them. Most of the code is in
MergeEntries which generates the table though.

--------------------------------------------------------------
#1620 Comment 1:
Good idea! Please provide a screenshot.

#1620 Comment 2:
Preliminary screen shot:
<img width="544" alt="capture6" src="https://cloud.githubusercontent.com/assets/8114497/17080387/6df6ad78-512d-11e6-8e6f-f63a87f305af.PNG">

"Enabled" is change by double-clicking or right-click menu. I may add buttons as well (but may prefer a checkbox column, not sure how to implement that easily though)
.
Problem: `ProtectTermsLoader` should be provided to the formatters, but the static initialization in `JabRefPreferences` and `Formatters` makes it troublesome. This is really a quite good case where the formatter indeed needs some information from the preferences...

#1620 Comment 3:
New screen shot: 
<img width="554" alt="capture7" src="https://cloud.githubusercontent.com/assets/8114497/17083605/98cf51e8-51a6-11e6-93a3-28ed03db0359.PNG">

Width of the "Enabled" column is fixed.

This is sort of done now. Remaining issues (from my side):
- [x] Tests
- [x] The formatter doesn't work because of the static initialization in `Formatter` (no idea how to solve this really...)
- [x] Maybe one should remove possible duplicates from the final list
- [x] CHANGELOG
- [ ] Documentation (one word/phrase per line, comments use #, and last comment in file is description, so better start the file with `# Description`...)

#1620 Comment 4:
I pushed to upstream now, so you can try it out at http://builds.jabref.org/casekeeper in a while. Note that the actual formatting is not working...

#1620 Comment 5:
Looks like there are no builds if the PR is pushed to upstream at a later point...

#1620 Comment 6:
Thank you for doing this!   The field I work in (like all fields, I'm sure) has specific terms that JabRef doesn't recognize that I have to constantly repair if I want to take advantage of some of its automated case management.

#1620 Comment 7:
The idea was that this should have been included much earlier. :-)

Updated version with right-click menu support for easier management.

<img width="478" alt="capture11" src="https://cloud.githubusercontent.com/assets/8114497/17209975/50c653de-54c0-11e6-9dbb-deaff547e559.PNG">

Also possible to create new files from the management dialog

<img width="555" alt="capture10" src="https://cloud.githubusercontent.com/assets/8114497/17209990/5c57eea6-54c0-11e6-9b3d-b27c6fc4ca58.PNG">

I'm quite happy at the moment, so I will rebase and set "Ready for review".

#1620 Comment 8:
Conflicts in translations. Anything else missing here?

#1620 Comment 9:
Apart from the equals, LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1618 Comment 1:
LGTM in general, as it improves the code. I am uncertain about the StringUtil.NEWLINE constant. Maybe IO.NEWLINE would be better? Also, we should try to encapsulate these constants, e.g., DIRECTORY, within classes that provide methods which automatically handle the constant usage internally. But this does not have to be implemented right now. 

#1618 Comment 2:
I moved NEWLINE (and FILE_SEPARATOR) to OS. This is probably a better location than StringUtil anyway and both actually are OS dependent...

#1618 Comment 3:
There are two more Strings to potentially move from Globals:

```
    // Signature written at the top of the .bib file.
    public static final String SIGNATURE = "This file was created with JabRef";
    public static final String ENCODING_PREFIX = "Encoding: ";
```

`SIGNATURE` is not written anymore and is only used in `BibtexImporter` so makes sense to move it there and make it `private`.

`ENCODING_PREFIX` is used for both import and export. `SavePreferences`?

Moving these would remove quite a few of the remaining dependencies from `logic` to `Globals`.

#1618 Comment 4:
Very good PR in my point of view! This really kills a lot of ugly dependencies to `Globals` and moves constants to better places. I had been thinking for a while about `NEWLINE`, the new location is perfect!

--------------------------------------------------------------
--------------------------------------------------------------
#1616 Comment 1:
:+1:

#1616 Comment 2:
LGTM can you add a changelog, please? then, just merge it.

--------------------------------------------------------------
#1615 Comment 1:
Do we have a properly signed certificate? Adding exceptions are quite complicated otherwise (I noted after reinstalling as DOAJ apparently uses a self-signed certificate). I assume we do and then :+1:.

#1615 Comment 2:
We have a Cloudflare certificate.

#1615 Comment 3:
LGTM just merge

--------------------------------------------------------------
#1614 Comment 1:
LGTM merge this in.

--------------------------------------------------------------
#1611 Comment 1:
I can confirm the bug but next time please create an issue for this and assign it to yourself if you want to fix it. Also please use the "copy version to clipboard" functionallity in the About dialog in the help menu to easily paste your JabRef-, OS- and Java-version.

#1611 Comment 2:
No remarks? 

#1611 Comment 3:
In general good. :+1:  But I would recommend adding some test with invalid formats, e.g. if an exceptions is thrown (expected) or whatever. 

#1611 Comment 4:
Hm an Excpetion should be not thrown, except if the reader would be null. If the format is invalid then the entries list will be empty, but no exception will be thrown. I'll added tests for both.

#1611 Comment 5:
Any other remarks?

#1611 Comment 6:
LGTM, just one remark: can you keep the test files as minimal as needed inside the tests? No need for 300 attributes when you can recreate the test issue with one or two.

#1611 Comment 7:
Ok, I've minimized the testfile for the issue.

#1611 Comment 8:
Maybe fix the two Codacy warnings (https://www.codacy.com/app/simonharrer/jabref/pullRequest?prid=289709) and add a key to the @misc entries. Otherwise im :+1: We need a second review from a @JabRef/developers tho.

#1611 Comment 9:
Just the collections,emptyList and the codacy and it's fine :+1:  ( I already reviewd the main parts before)

--------------------------------------------------------------
#1608 Comment 1:
LGTM :+1:

#1608 Comment 2:
I included `JournalAbbreviationLoader` in `LayoutPreferences`. Tests failing because of non-related connection issues.

--------------------------------------------------------------
#1607 Comment 1:
I added the initializer to JabRefMain. Again, a non-related test fails.

#1607 Comment 2:
This might be a good occasion for some more improvements in `LabelPatternUtilTest`. Some test methods do not have descriptive names (e.g. `testCheckLegalKey2`) and @tobiasdiez would probably complain that there are two many asserts in the test methods. This is ok from my point of view in most of the methods, but perhaps you could split `testCheckLegalKey` into tests for the different accent types?

Apart from these things: LGTM

#1607 Comment 3:
I think this test splitting better wait until the new checkLegalKey is implemented... I merge this for now, so the move can happen.

--------------------------------------------------------------
#1606 Comment 1:
I would prefer a single class which contains a preview entry, which is then used for both style and preview.  What do you think?

#1606 Comment 2:
Shouldn't be a problem and makes sense. I guess there are two for
historical reasons (plugin). I'm even wondering if there isn't a third one
although it is somehow hidden in the code and never seen... (Only used as
some sort of initialization.) Didn't find it yesterday though.

#1606 Comment 3:
Now there is a single preview entry.

#1606 Comment 4:
I would always create a new bib entry instead of reusing it. Returning a copy is more robust, as you never know who modifies this entry, resulting in strange preview behavior. With this in place, just go ahead and merge. 

--------------------------------------------------------------
#1605 Comment 1:
@simonharrer how should the toggle for the preview panel and the entry editor work in your opinion?
Since the preview has nothing to focus the three phase toggle is not suitable here. For the entry editor on the other hand, I can imagine using the three phases. Any opinions on that (from anyone of course, just refering to @simonharrer because it was him to mention the idea in the first place)?

#1605 Comment 2:
#1525 is merged. Will there be updates on this PR?

#1605 Comment 3:
I took this issue to myself and coded a quick solution.

OpenOffice/LibreOffice is now able to be toggled.

#1605 Comment 4:
Refs https://github.com/koppor/jabref/issues/54

#1605 Comment 5:
I tried it: Works good. Code LGTM.

#1605 Comment 6:
~~When a subclass does **NOT** implement an abstract method, how should I mark it?~~
Nevermind, the `UnsupportedOperationException` seems a good option.

#1605 Comment 7:
Code looks good to me now (thanks for the quick changes!). I'll merge it in.

--------------------------------------------------------------
#1604 Comment 1:
LGTM

--------------------------------------------------------------
#1602 Comment 1:
Nice idea. I would even go one step further and
- Make FieldName an enum. This would probably require to introduce overloads accepting the enum, e. g. `getFieldOptional(FieldName field) { return getFieldOptional(field.name()) }`. With the aim to replace strings completely using the [extended enum pattern](https://blogs.oracle.com/darcy/entry/enums_and_mixins)
- Introduce helper methods in BibEntry which return values for common fields, e.g. `getAuthors() { return getFieldOptional(FieldName.Authors); }`

#1602 Comment 2:
:+1: 
Some remarks:
- Instead of using `FieldName.AUTHOR_FIELD` I would propose to omit the `_FIELD` suffix. `FieldName.AUTHOR` is less clumsy and would result in easier to read lists of field as they are used in the entry type definitions...
- What will happen to those "OR" fields such as `"year/date"` - directly use this as a constant? Or use a method `orField(FieldName.YEAR, FieldName.DATE)`?

Regarding the `enum` usage: Basically this would be the better approach - but as the the user can define his own "custom fields" things get rather complicated as there always must be two ways to deal with field definitions

#1602 Comment 3:
:+1: but I would just use string constants for now, being in line with the argument from @matthiasgeiger .

#1602 Comment 4:
@matthiasgeiger One can use the [extended enum pattern](https://blogs.oracle.com/darcy/entry/enums_and_mixins) for user-defined fields. It would roughly look like:

``` java
interface FieldName { 
  String getName(), 
  List<FieldName> getAliases(),
  FieldName convertToBibLatex(),
  FieldName convertToLatex(),
  ...
}

enum StandardFieldName implements FieldName { 
  Authors("authors", ...), 
  Title("title", ...), ... 
}

class UnknownFieldName implements FieldName {
  UnknownFieldName(String name) {...}

  @Override getName() {return name; }
  @Override ...
}
```

#1602 Comment 5:
That Extended Enum looks interesting.

2016-07-19 11:34 GMT+02:00 Tobias Diez notifications@github.com:

> @matthiasgeiger https://github.com/matthiasgeiger One can use the extended
> enum pattern https://blogs.oracle.com/darcy/entry/enums_and_mixins for
> user-defined fields. It would roughly look like:
> 
> interface FieldName {
>   String getName(),
>   List<FieldName> getAliases(),
>   convertToBibLatex(),
>   convertToLatex(),
>   ...
> }
> enum StandardFieldName implements FieldName {
>   Authors("authors", ...),
>   Title("title", ...), ...
> }
> class UnknownFieldName implements FieldName {
>   UnknownFieldName(String name) {...}
> 
>   @Override getName() {return name; }
>   @Override ...
> }
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1602#issuecomment-233580290, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5JbGFc85zPL5Hy9RjS6OqV-4uWQuks5qXJoJgaJpZM4JPM_L
> .

#1602 Comment 6:
Hm, this could work, but on the other hand, it introduces additional complexity into the model, and everybody working with the model then must learn this pattern. I would like to keep the model simple, and would at first use only such String constants.

#1602 Comment 7:
I've removed the `_FIELD` part for now. 

Considering `enum` one should maybe think about `InternalBibtexFields` as well, creating a class/enum that can contain all information about a field (maybe including column widths etc).

Combined fields, I was thinking of just doing a string concatenation (as they are just constants in a few places), but it may make sense to create a function for this.

#1602 Comment 8:
There are two types of combined fields: one with `/` as separator for columns and one with `;` as separator for preferences. `FieldNames.orFields(List<String)` and `FieldNames.andFields(List<String)`?

#1602 Comment 9:
I think I'm happy for now. A bit tedious and there are quite a few fields to convert... Most of the most common ones should be converted already though. May be better to merge now as it is quite boring rebasing with conflicts...

@tobiasdiez : I think adding get-methods clearly makes sense, although I also think that `getAuthors()` should return `Optional<AuthorList>`. :-)

#1602 Comment 10:
I think this is a huge step forward, and would merge this ASAP. 

#1602 Comment 11:
:+1:  Just merge after rebasing!

#1602 Comment 12:
I merge this now. The failing test seems to relate to a lack of internet connection rather than anything else. Also, I do not understand how to get things up and running with the new medline fetcher, but that shouldn't affect this PR...

--------------------------------------------------------------
#1601 Comment 1:
LGTM! :+1:

--------------------------------------------------------------
#1599 Comment 1:
LGTM

--------------------------------------------------------------
#1597 Comment 1:
We voted against it at #514. At that time, the test worked locally, too. It seems, we are relying on the tests on Travis only. Can the tests themselves be fixed?

[Simon said](https://github.com/JabRef/jabref/pull/514#issuecomment-164757267):

> I would vote for always reading only with UTF_8 set explicitly instead of relying on the default encoding. 

#1597 Comment 2:
Should we even support any other encoding than UTF-8? There are quite a few cases where the encoding must be specified in the source and at the moment it is a bit tricky to really know what to set. Get the encoding from preferences or go with UTF-8?

#1597 Comment 3:
The problem are mostly the tests. Some already set explicit UTF8, some don't,
As we therotically support other encodings in the bib files/exports/imports, it should be always used the Setting, in my humble opinion

#1597 Comment 4:
In general, you always have to specify the encoding for every I/O operation you do. Setting it through gradle would make the tests pass, but if a user uses a different platform dependent encoding, the code may brake. To detect these breakages, it is best to make everything explicit, and not change the environment. 

#1597 Comment 5:
Another argument: I want to execute the tests within IDEs as well, without gradle. And they should pass there as well. Hence, just switching gradle to UTF-8 is no solution.

#1597 Comment 6:
Current status: tests run in IntelliJ, but not in gradle.

The tests should be self-contained. We should aim to fix the tests.

--------------------------------------------------------------
#1596 Comment 1:
I have no idea why the test fails, however, it seems to be a Linux related problem.
Could anyone please test my code on Linux? 

#1596 Comment 2:
No idea why the tests fail. Interesting that the NPE test is failing as well...

#1596 Comment 3:
@oscargus  Yeah, that bothered me, too.  I tested on a Linux VM and it only fails there.
I will try to debug further. 

#1596 Comment 4:
I will debug it tomorrow at university. I have absolutely no idea why it fails. All stuff is done in the BaseClass in the Before Method.

#1596 Comment 5:
Okay, only the Exeption test did not work...

#1596 Comment 6:
Do you need any help here?

#1596 Comment 7:
@tobiasdiez  Yes, I still have no idea why the test is failing only on the CI Server.  Both under win and linux all tests are passing. Do you have a clue what the reason can be?

#1596 Comment 8:
You could try to get more information from Gradle about the failing test. Maybe run it with --stacktrace in the travis configuration, and have a look at the gradle test configuration so that the full stack trace is shown. This could help to find the cause. 

#1596 Comment 9:
Just a quick guess: maybe the `@Before` method from the base class is not called and thus the root directory is null, which gives the NPE. You might try to call the initialization method explicitly, see http://stackoverflow.com/a/2132852/873661

#1596 Comment 10:
@tobiasdiez  Thanks . I already thought that it may be related to the sublassing.
I will investigate this option

#1596 Comment 11:
Okay, not it only fails at the `tearDown`method, when restoring the prefs.
@oscargus  Could you please have a look, as you recently changed the Globals.pref stuff?

#1596 Comment 12:
Well, I didn't actually change anything there. Only encapsulated the use of it in a number of places, so shouldn't affect this.

#1596 Comment 13:
Finally all tests green :cake: 

#1596 Comment 14:
:+1:

#1596 Comment 15:
Hm, what about the still marked `@Ignore` test?

#1596 Comment 16:
@simonharrer  The formerly ignored NPE test works now, too. 
If no more things, then I would squash and merge.

#1596 Comment 17:
Go ahead. Nice job! :) Maybe we can reduce the number of ignored tests over time.

--------------------------------------------------------------
#1595 Comment 1:
Good! Please add a note in the Wiki, as kind of design guideline

#1595 Comment 2:
[![LGTM](http://lgtm.in/p/kqcpCUP6q)](http://lgtm.in/i/kqcpCUP6q)

--------------------------------------------------------------
#1594 Comment 1:
Are these classes logic or gui? What is the complete work flow? ImportInspector? Merging? (Adding empty fields may not be enough.)

#1594 Comment 2:
They are logic and try to extract the non-gui part from the current `EntryFetcher`. Thus the workflow is not changed (at least not with this PR).

#1594 Comment 3:
Is generally fine for me. 

One remark: There are currently two different workflows for the "SearchBasedFetchers". 
Normally one hits the "Search" button after inserting some search query and a list of found entries is presented, after selecting the desired entries they are imported. 
However, at least for the GoogleScholar fetcher there is another dialog presenting more details to "preselect" the entries which should be shown in the list of found entries (I think the intention is to reduce the amount of queries).

Is the proposed "shallow" search method used in this case? Or is this difference in the workflow currently not really covered, yet?

#1594 Comment 4:
I think the workflow is supported by the two methods `performShallowSearch` and `performDeepSearch`. I assume that the dialog is presented if `performDeepSearch` is present. I think that one needs an additional class having only `performShallowSearch` and a second one containing both methods.

My concern is that the intermediate results might not be available as bibtex entries, but as HTML only. I think, the `ImportInspectionDialog` was used for that, wasn't it.

What about error messages? I assume the aim is to use `LOGGER` only and to use the error console? I used to like the GUI dialogs showing errors, but OK for me to remove them to improve the code. (Until now, this was done by the `OutputPrinter status`, wasn't 

@zellerdev will try to port GVKFetcher and the ISBNToBibTeX fetcher to the new infrastructure. He will do a PR on your repo, is that OK, @tobiasdiez?

#1594 Comment 5:
For the FulltextFetcher it would be awesome if the FullText finding could be run as part of a Cleanup operation, e.g. globally finding fulltext for all entries.
This should be kept in mind

#1594 Comment 6:
Thanks for the feedback. 
@matthiasgeiger, @koppor  yes I thought about covering the two-stage search by the deep and shallow methods. Maybe this is not the best idea and one needs a different approach for the Google search. Thus for now I would concentrate on the simple fetchers which get all the metadata in one query.

@koppor The result from the server is of course HTML (or XML, JSON,...). It is the task of the fetcher to translate the response to something meaningful, i.e. to `BibEntries`. I expanded the arXiv fetcher to outline how this works (in fact the arXiv fetcher now understands free text queries and not just ids). I also included a way to notify the caller about errors...by, well, throwing exceptions (with meaningful error messages). Maybe the fetchers also need to post some events to let the GUI know about the progress. 

@Siedlerchr Good idea. However a bit out of the scope of this PR. Could you file a new issue for it? Thanks!

So the plan for this PR is now to use the new interfaces parallel to the old code (so that I don't have to rewrite every fetcher).

#1594 Comment 7:
So PR is ready for review. 
The new fetcher can now be included via a wrapper. In this way the fetcher can be transformed to the new interface step-by-step without the need to refactor everything at once.

If I get the ok for merge, then I (or @zellerdev) will move `HelpFiles` to logic and thereby fix the failing architecture test.

#1594 Comment 8:
Many of the current fetchers will only fetch a limited number of entries. Typically based on user input. How is that going to be handled here?

#1594 Comment 9:
Whereas I think the interface redesign is a good thing, I'd like to throw a few things for discussion.
1. The interface hierarchy is too complex in my opinion why not just use:
   - WebFetcher: Has two methods for SearchBasedFetcher & IdBasedFetcher
   - IdFetcher
   - FulltextFetcher

The web fetcher hierarchy seems artificial to me. Why do we ultimately need one method interfaces?
1. I really don't like the effect that we merge all fetchers into one class, e.g. your ArxiV.java class.
   Some fetcher are complex enough on their own so why create new 1000 lines classes being capable of searching, id fetching and full text retrieval. Let us just use 3 classes for the three types of fetching.

#1594 Comment 10:
On another note: I don't think that `HelpFile.java` belongs into the logic package.

#1594 Comment 11:
@oscargus Right now every parameter has to be passed to the fetcher via the constructor. Maybe it would make sense to include the number of results as a method parameter. Right now I don't have a feeling on how many fetcher actually support this (or if a common fixed value of say 30 would also work). 

@stefan-kolb The idea to distinct between ID-based and text-based fetchers came from #383 and #550. Right now the interfaces only have one method but this might change in the future (for example, a method to check validity of a given ID would make sense for the ID-based fetcher). 
If a fetcher is complex enough, then one of course still decompose the functionality in different classes. For the arXiv fetcher it felt like all the functionality is essentially given by one method (callApi) and the other methods are just different wrappers around it. 
Do you have a good idea how to handle for the help files in fetchers (logic) if HelpFiles stays in gui?

#1594 Comment 12:
I still don't get why these two types of fetcher methods cannot live in one interface.
Maybe this is more of a problem of our implementations than of the architecture abstraction?
I haven't checked the usage of the HelpFiles yet, tho I think this has to be managed by the GUI somehow.

#1594 Comment 13:
The helpfiles could be under the logic,, as they do not contain any gui related methods or any other related thing.
They just serve as a kind of Container class, they simply store the name of the HelpPage-Markdown file in an Enum.
The assembling of the url and opening is in the gui in HelpAction.

#1594 Comment 14:
I think a two-stage search is preferred in many situations. All is not
really an option and sometimes one would really like to go for more than
100 (which is a more reasonable number). Personally, I often use JabRef as
a search engine to find interesting papers (or rather, I search for a
specific paper and then find related ones so it makes sense to not have a
too narrow query, also some publishers has a logic or on the search terms
so you get more hits the more terms you add).

Just try searching Springer or DOAJ for some common term, "efficient" or
"Smith" or something.

I think this can be solved though by adding another call so query -> number
of hits -> number to fetch -> list of entries.

#1594 Comment 15:
Thanks Oscar for bringing up this aspect. 

I think the main reason for introducing this step was to reduce the number of requests fired to the different providers as some of them are rather quick with blocking IPs crawling to much information in a short time.
Thus the number of matches to be shown is not only dependent on the intention of the user (find a single paper vs. search for all possible papers matching the search) but also might have technical reasons... 
However, personally I don't like the workflow "Enter term" > "Start search" > "Determine number of hits and ask user how much hits should be displayed" > "List chosen number of hits" 
I think "Enter term" > "Start search" >"List first X hits" + "Label: Showing first X of Y hits" + Button "get next X hits" would be better... but this would require some more methods in the Interfaces to start fetching from/to a given offset...

#1594 Comment 16:
@simonharrer and @matthiasgeiger have persuaded me that I'm dumb, please merge as intended. Maybe the naming can be improved a little bit but this is NP-hard.

#1594 Comment 17:
OK, so how should blocking be avoided? I agree that @matthiasgeiger's approach is preferred, but there must be some support for fetching an arbitrary number of items.

--------------------------------------------------------------
#1593 Comment 1:
Overall, one step in the right direction! However, there is one immediate issue that we need to consider: If we decouple a class completely from `Globals` and `JabRefPreferences`, for instance by just passing String values read from the preferences as parameters to the constructor, we might run into refreshment bugs. This means that if someone changes the preferences via the GUI, the change might have no effect on JabRef, since the value is not re-read every time it is needed. The obvious solution that comes to my mind to avoid this is the Windows approach: Always restart JabRef for preferences changes. What do @JabRef/developers think?

#1593 Comment 2:
> The obvious solution that comes to my mind to avoid this is the Windows approach: Always restart JabRef for preferences changes.

:weary: I don't like this. It already unnerves me that in some occassions a restart is needed. 

I don't have the time (and I don't want to :wink:) check this whole PR... but using params with the current settings, or recreating the object instances on pref changes is not possible?

#1593 Comment 3:
@matthiasgeiger At least I do not really know where every preference is needed. And I also do not know if it is possible to just recreate certain parts of JabRef on demand, without a restart of the program (because JabRef is just so tangled and that is what we are trying to improve here). @oscargus: Can you perhaps look at all occasions where you removed `Globals` and `JabRefPreferences` in this PR and try to guess if there might be problems when preferences are changed?

Could the event system be a way to make this work? (Think of a `PreferencesChange` event)

#1593 Comment 4:
It is definitely a problem for `HtmlToLatexFormatter`, but maybe we should remove that support anyway. It may be a problem for the AutoCompleter (not sure where the preferences are used there, if they are just passed on to LayOut, in which case it is used for formatting the File-formatters, so probably not an issue).

There are some way to alleviate this though:
- In `JournalAbbreviationLoader.getRepository()` the `JournalAbbreviationRepository` is only generated once. Here one can probably check if the preferences (configuration object) have changed, and in that case generate a new `JournalAbbreviationRepository`. This would improve the behavior compared to the current one (before this PR).
- In `CustomExportList` the `JabRefPreferences` are passed to every call. This is something I was considering fixing and only use the one from the constructor, but it is actually a feature here.

As it is said that this is an evolving process, what remains to be done? I think dropping the preferences from `HtmlToLatexFormatter` if nothing else. There are some clear cases where a specific preferences class and the generic one are both passed. This is something for later. Anything else?

#1593 Comment 5:
Though it is an evolving process, we should not introduce bugs in the meantime :-) In `HTMLToLatexFormatter`, you can remove the preferences configuration (which you already did). 

As for the `AutoCompleter`, it should really still work and update as before the PR. So, if it doesn't at the moment you should implement an update of the preferences for the `AutoCompleter`, e.g. by recreating and resetting the object if changes in the preferences occur. 

The whole rationale is: JabRef should behave in the same fashion after this PR as it did before (with the exception of `HTMLToLatexFormatter`). Architecture refactorings should not change functionality. It is quite hard for me to guarantee this, so it really depends on your intuition and testing.

If you find it too hard to implement a preferences update at a certain position, it would be better if you just reverted the dependency refactoring for that position. Then we can have a closer look at the specific dependency in another PR.

#1593 Comment 6:
Regarding `AutoCompleter`: it is currently (in the `master` branch) not updating when the preferences are changed. This PR actually makes it easier to update (although it is indeed behaving the same as before at the moment).

#1593 Comment 7:
Ok, then LGTM!

#1593 Comment 8:
To be more precise: `JournalAbbreviationLoader.getRepository()` used to get `Globals.prefs` on the first call. Now it is passed as an argument. Hence, any relevant changes in the preferences between starting (where e.g. `AutoCompleter` is initialized with the current `Globals.prefs` and later call `getRepository()`) and the first actual call to `getRepository()` (not sure when that is, it might be at start up as well and then there is no change) will be ignored now. However, the fundamental issue that any subsequent changes to the preferences after `getRepository()` is called first are ignored is still the same.

I think that the idea of a `PreferenceChanged` event is really the way to go. Although not obvious how to easily implement it at a "higher level", i.e. at the classes passing the preferences on rather than in the classes using the preferences.

#1593 Comment 9:
LGTM :+1: after having a quick look

#1593 Comment 10:
I should just note that I was incorrect about `AutoCompleter`/`JournalAbbreviationLoader`. It seems quite clever and I missed the point of having an `update` method. Everytime anything(?) related to the `JournalAbbreviationLoader` is changed in the preferences it is indeed updated.

#1593 Comment 11:
Please rebase and merge. 

--------------------------------------------------------------
#1591 Comment 1:
LGTM

--------------------------------------------------------------
#1590 Comment 1:
The whole purpose of this PR was indeed to add the missing dash if it otherwise looks like an ISSN, yes. That works at the moment.

Would we actually need a clean up action then? If properly used, the ISSN class would provide automatic clean up, right? Which is useful, but may be annoying?

Btw, I doubt using the different parts explicitly is very useful though. But if there is a valid use case where the string is not enough, so sure. Should the parts then be `String` or `int` (x is 10 and only appears in the checksum)?

It really looks like over-engineering to me, I must say though...

#1590 Comment 2:
Extracted an `ISSN` class for checking validity and cleaning up.

#1590 Comment 3:
I am missing tests for the ISSN class. Otherwise, LGTM.

--------------------------------------------------------------
#1589 Comment 1:
LGTM! :+1:

#1589 Comment 2:
one minor remark: "ISRN" which is used in Biblatex TechReports could - or should - be added 

Apart from that: LGTM

--------------------------------------------------------------
#1588 Comment 1:
LGTM

#1588 Comment 2:
Please rebase and merge.

--------------------------------------------------------------
#1587 Comment 1:
LGTM! :+1: 

#1587 Comment 2:
LGTM - @lenhard And don't forget to squash :wink: 

--------------------------------------------------------------
#1586 Comment 1:
LGTM just extract the validation logic, as it could be useful elsewhere, and then merge this in.

#1586 Comment 2:
OK! Without the `toString()` it makes sense (and is easier to cope with than ISSN, as there isn't an "almost correct" ISBN format...).

--------------------------------------------------------------
--------------------------------------------------------------
#1584 Comment 1:
LGTM just merge after you removed the generated comment

--------------------------------------------------------------
#1583 Comment 1:
changes LGTM :+1: 

However, the usage of "magic numbers" for the diff modes should be avoided - but this can also be solved in another PR :wink:

#1583 Comment 2:
Just a minor comment, otherwise looks good.

Have a thought on my suggestion and decide if you want to implement it. Afterwards rebase and merge.

#1583 Comment 3:
@matthiasgeiger I agree. However, I do not really get how to map a `JComboBox` and an `enum`...

#1583 Comment 4:
`new JComboBox(EnumType.values())` should work

--------------------------------------------------------------
#1582 Comment 1:
please fix codacy

#1582 Comment 2:
Done.

#1582 Comment 3:
Very nice PR, only minor comments from my side 👍 

#1582 Comment 4:
Locally, I got following exceptoin

```
:compileJavaC:\git-repositories\jabref\jabref\src\main\java\net\sf\jabref\BibDatabaseContext.java:1: error: An unhandled exception was thrown by the Error Prone static analysis plugin.
package net.sf.jabref;
^
     Please report this at https://github.com/google/error-prone/issues/new and include the following:

     error-prone version: 2.0.10
     Stack Trace:

```

After disabling the error prone plugin (just remove the line with `errorprone` in build.gradle), I could test it.

My preferences look like this:

![grabbed_20160717-150310](https://cloud.githubusercontent.com/assets/1366654/16900781/9aea4982-4c2f-11e6-9d04-09a93db8b793.png)

Why is the space to the right not fully used?

Other categories of the preferences do use it:

![grabbed_20160717-150434](https://cloud.githubusercontent.com/assets/1366654/16900792/cf24af58-4c2f-11e6-8c28-c0fb02426271.png)

Featurewise: Just using `C:\Program Files\ConEmu\ConEmu64.exe` just starts a new instance. The old instance has to be reused. Thus, my command line is `ConEmu64.exe /single /dir "c:\users"`. As a consequence, the whole parameter string should be configurable with `%DIR` as placeholder for the directory name.

#1582 Comment 5:
Okay, I'm going to add a new option called "execute". Where should I describe that `%DIR` is a placeholder? Below, as labeled text?

#1582 Comment 6:
Labeled text sounds good.

#1582 Comment 7:
The feature is ready. Please test the feture with some terminal emulators.

_Screenshot:_
![oc_sc1](https://cloud.githubusercontent.com/assets/15609468/16902619/f00e61fc-4c64-11e6-90f9-93ce98a258d4.png)

#1582 Comment 8:
Execute Command only is sufficient. Specify terminal emulator is not necessary IMHO. - Use default terminal emulator is good. That means: Please provide two choices. The Browse button can go to execute command and replace the whole string when it is pressed.

When I press the button, I get no feedback. Typically, JabRef writes "Externel viewer called" or something like that.

There is no need to underline the note field and to put %DIR in italics. Just write it in plain text. This also makes it easier for translators.

Put `C:\Program Files\ConEmu\ConEmu64.exe /single /dir "%DIR"` as default value for "execute command" (on Windows).

Works also with paths with spaces: :+1: 

#1582 Comment 9:
@koppor 

> Execute Command only is sufficient. Specify terminal emulator is not necessary IMHO. - Use default terminal emulator is good. That means: Please provide two choices. The Browse button can go to execute command and replace the whole string when it is pressed.

"Specify terminal emulator" option has been removed.

> When I press the button, I get no feedback. Typically, JabRef writes "Externel viewer called" or something like that.

Done.

> Put C:\Program Files\ConEmu\ConEmu64.exe /single /dir "%DIR" as default value for "execute command" (on Windows).

Done.

#1582 Comment 10:
LGTM :+1: 

#1582 Comment 11:
I can confirm that this works with ConEmu on my machine. I have a different path to ConEmu than the default, but changing the preferences worked without an issue. Can be merged from my point of view.

#1582 Comment 12:
Good work!

--------------------------------------------------------------
#1581 Comment 1:
@oscargus Do the tests from #1464 pass in your branch?

#1581 Comment 2:
@stefan-kolb as it was only `\chi` that was failing, I would expect that, yes. The other two did already work. (Right?)

#1581 Comment 3:
@oscargus It was only the \chi, yes because \c is handled as special character. If my test from the PR pass we can merge my test PR into your branch and then merge your fix :smile: 

#1581 Comment 4:
In general, I would like tests for this PR.

#1581 Comment 5:
My PR #1464  includes tests for the bug.

#1581 Comment 6:
@stefan-kolb There is a `\chi` first at the second row of the screen shot. Turned out all commands starting with c didn't work as c was hardcoded into Globals as an accent, so `\chi` was interpreted similar to if it had said `{\c{h}}i` and since `\c{h}` wasn't listed it was simply removed. Now `\c{h}` works as well, giving ḩ .

@tobiasdiez: I was considering that. However, the main feature is adding support for accented unicode characters and they are a hassle to type properly... Nor will they make much sense except lots of comments. For example, spot the difference between ä and ä...

#1581 Comment 7:
@oscargus Can you just cherry-pick my commit from the PR and you have your first test :smile: 
And then just close my PR afterwards :+1: 

#1581 Comment 8:
I added some tests now.

@stefan-kolb I'm afraid that is a bit out of my comfort/knowledge zone... My solution would be to almost simultaneously merge both PRs. :-) 

#1581 Comment 9:
@oscargus Then just copy my tests and close the PR :smile: 

#1581 Comment 10:
@stefan-kolb That should be within grasp. :-)

#1581 Comment 11:
LGTM thanks for the quick solution! :)

#1581 Comment 12:
LGTM :+1: 

#1581 Comment 13:
LGTM :+1: just some minor remarks about naming variables and tests

--------------------------------------------------------------
#1577 Comment 1:
Please resolve conflicts.

#1577 Comment 2:
Any remarks?

#1577 Comment 3:
Apart from `isInternalField` I think this is ready to be merged. Well done!

#1577 Comment 4:
See the discussion in #1583, comment by lenhard on obsolete commit. Can move anywhere (within `model`) basically, but for readability it would be nice to still use `isInternalField`.

#1577 Comment 5:
Just two small changes and I'm OK with it :+1: 

#1577 Comment 6:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1575 Comment 1:
Where is the configurable date format usable?

#1575 Comment 2:
Right now it is used in the `timestamp` field as far as I know. I guess that people may have their own format and then if we remove it, there will be a bit of hassle...

#1575 Comment 3:
In general, JabRef should only focus on the bibtex/biblatex specification for the standard fields.
Only user defined fields should accept a different style.

#1575 Comment 4:
So what about `timestamp`? Historically there's been support to generate
your own format (and call it anything). Most likely people are not using
ISO format since that has only recently been the default.

I think the conclusion really is that we cannot drop the support for
arbitrary date format since we once introduced it. I think the major issue
really is that we need to propagate the format, although not that far and
one can extract some class `TimeStampPreferences` to encapsulate it.

#1575 Comment 5:
@oscargus The time discussion refs https://github.com/koppor/jabref/issues/130. Maybe, we should migrate away from `timestamp` to `date-added` and `date-modified` and use the format already provided by some other software.

#1575 Comment 6:
I like the idea of having those two fields  instead of the timestamp. We
should only make clear, that these fields are non standard biblatex/bibtex
fields.
As far as I found out, at least BibDesk uses them, from what I read maybe
Citavi or Mendely, too.

2016-07-20 19:18 GMT+02:00 Oliver Kopp notifications@github.com:

> @oscargus https://github.com/oscargus The time discussion refs
> koppor#130 https://github.com/koppor/jabref/issues/130. Maybe, we
> should migrate away from timestamp to date-added and date-modified and
> use the format already provided by some other software.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1575#issuecomment-234017772, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AATi5JgJtRf67CEiMMSVicRbsm1aCMi3ks5qXliAgaJpZM4JKNkH
> .

#1575 Comment 7:
Fine with me. I guess we should provide a migration functionality before dropping the configurable format and field name support.

#1575 Comment 8:
I've rebased. Anything else at the moment?

#1575 Comment 9:
Could you sum up what has been done here, and the associated pros and cons? Especially regarding a CHANGELOG entry, this is required anyway. 

#1575 Comment 10:
At the moment it is primarily replacing `SimpleDateFormat` (for good
reasons) in a number of places and making sure that the BibLatex fields
related to dates get their result from the DatePicker in the correct format
(yyyy-MM-dd as specified by BibLatex). A ChangeLog entry might describe the
latter as a bug fix, if anything.

The discussion is really about if we should keep the field usually called
`timestamp` and if we should allow the user to specify the format of this
field.

#1575 Comment 11:
And: JabRef preferences are injected in a few places plus replacing an array with a List in ZipFileChooser.

#1575 Comment 12:
What I think would be cool:
1. Create two new fields (date-added, date-modified) which use default ISO-based time stamps which cannot be configured by the user. The user can only say that he wants these fields or not.
2. Create a migration from timestamp to the new fields.
3. Reuse the existing preference setting for the new fields. We should still use one setting to enable both fields and should not make it too fine granular.

#1575 Comment 13:
I agree that those two fields are better. Won't happen in this PR though as it is a quite big job. See https://github.com/koppor/jabref/issues/130 as well.

Anything else in this PR? See it as primarily making the format of the `date` field independent of the preferences (which it should be) and that we got rid of some of the SimpleDateFormat uses (see #1154, second checkbox almost clickable...).

#1575 Comment 14:
Then this is good to be merged.

#1575 Comment 15:
Anyone has a good idea why the tests are failing? Locally they pass and `Cookie` is not even executed when running the test...

#1575 Comment 16:
The problem is our custom Cookie handler which seems to be implicitly called by the `HTTPUrlConnection.getResponseCode,` considering the stacktrace:
And I guess it comes from the User Agent and is some Travis related stuff. Maybe travis uses some kind of proxy/whatever 

Edit// Maybe you can change the date usage of the CookieHandler, too? Still uses SDF

```
 at net.sf.jabref.logic.net.Cookie.<init>(Cookie.java:85)

            at net.sf.jabref.logic.net.CookieHandlerImpl.put(CookieHandlerImpl.java:58)

            at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:728)

            at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:647)

            at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1536)

            at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1441)

            at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)

            ... 2 more
```

#1575 Comment 17:
OK, turns out the problem was that the server started to use a two-digit year in the last few days... Now that format is also supported, although, as I understand it, it is not a valid format for a cookie.

--------------------------------------------------------------
#1574 Comment 1:
And probably after #1472 as well...

#1574 Comment 2:
Nice work! I am looking into architectural structure at the moment as well. I would only move one class, as mentioned above.

I think it would be cool if we got the `AutoSaveManager` to work independent of the GUI, but that would mean a rewrite. Thus, it is out of the scope of this PR.

#1574 Comment 3:
Thanks! The main purpose was really to see which classes are "easily" testable (=logic) at the moment.

#1574 Comment 4:
LGTM :+1: 

--------------------------------------------------------------
#1573 Comment 1:
LGTM

#1573 Comment 2:
To me too.

--------------------------------------------------------------
#1572 Comment 1:
LGTM

#1572 Comment 2:
LGTM :+1: 

#1572 Comment 3:
I have only a few small remarks. :+1: for merge in general

--------------------------------------------------------------
#1571 Comment 1:
LGTM

--------------------------------------------------------------
#1570 Comment 1:
LGTM! You could add one more test for checking duplication for empty bibtex keys, e.g. two entries with no bibtex keys.

#1570 Comment 2:
I have some small remarks. It would be nice if you could fix them although this was already merged in. Thanks.

--------------------------------------------------------------
#1569 Comment 1:
Merged this in so that there would be no later merge conflicts with #1568.

--------------------------------------------------------------
#1568 Comment 1:
Since I managed to convert all calls I renamed `getEntryByKeyOptional` to `getEntryByKey` and removed the original `getEntryByKey`.

#1568 Comment 2:
LGTM

--------------------------------------------------------------
#1567 Comment 1:
LGTM :+1: 

#1567 Comment 2:
LGTM :+1:, rebase and merge.

--------------------------------------------------------------
#1565 Comment 1:
Shouldn't this be queriable from the undo/redo action? So each action that can be made undo/redo should have an identifier describing its action.

#1565 Comment 2:
You mean basically move the `updateText` logic to a method for the UndoAction and RedoAction classes and have a single call in `JabRefFrame` like `updateUndoAndRedoTexts` which calls these to methods?

Yes, that might be a better idea. However, I'm not really sure if one also needs to change the corresponding classes in the preamble editor and string dialog. (Nor, actually, how it works there now...)

#1565 Comment 3:
It can indeed be queried. However, the actual undo/redo classes are in BasePanel but the actions associated to menu and toolbar are defined in JabRefFrame, providing the undo/redo class instance. So, the undo/redo class have no idea about its tooltip.

When I tried it out now, it appeared much more flaky, completely ignoring "change field" edits. No idea why this happens as it worked well earlier. This happens also in master so trying to figure out what might have changed... Most (all?) other types of edits can be undone, but "change field"...

#1565 Comment 4:
@JabRef/developers : I'm not opening a new issue, but can you please check to see if you can undo field changes in the current master? It seems like it stopped working sometime between creating this PR and now. From debugging I can tell that `addEdit()` is indeed called as it should, but somehow the edits are not stored. This appears to only happen for "change field" edits as the other ones I've tried are OK.

I've looked through the recent commits multiple times to try to figure out what have changed, but at no luck...

#1565 Comment 5:
@JabRef/developers: Just after posting, I think I found the issue... No emergency...

#1565 Comment 6:
The problem was actually discovered because of this and just having worked with #1575 (which I will fix later) and fixed in #1576. Totally unrelated to any recent commit.

#1565 Comment 7:
I don't like that the UndoManager has to know about the frame. Thus I would propose to use "inversion of control" here. That is, the CountingUndoManager throws an event (using the new EventBus) whenever the last undoable action changes. In the frame you can then subscribe to this event and change the display accordingly. In the event you can store the undoable event (of type `UndoableEdit`) and then simply call `event.getUndoPresentationName()` to get the description.

Using events in a similar manner, you can also move the `panel.updateEntryEditorIfShowing();` callings from the undo manager to the frame.

#1565 Comment 8:
OK, EventBus is introduced and I think the structure is clearly better. It would now be nice if there are more "advanced" `getPresentationName()` for the Undoable actions with content from the actual action. Not in this PR though.

#1565 Comment 9:
There is a minor flaw which may not be so easy to solve (and is not that serious): if one makes an edit in the entry editor and directly selects a different tab, the undo/redo state is from the previous tab. Also, when trying to undo in the new tab, the state is not updated as an Exception is thrown and the code never gets to the place where the update is done.

#1565 Comment 10:
Rebased. Anything else here?

#1565 Comment 11:
I improved the information a bit:

<img width="743" alt="capture13" src="https://cloud.githubusercontent.com/assets/8114497/17418713/2add1ed4-5a9a-11e6-9755-63ff21339ac8.PNG">

--------------------------------------------------------------
#1564 Comment 1:
It would be nice, if you could take a look at the date format which gets entered, too:
For example, when I select a date from the calendar, it gets entered as :  `2016.07.09`
OS lang is German, but JabRef is english. 
The ideal solution would be that the date is entered initially in ISO format, yyyy-MM-dd

#1564 Comment 2:
LGTM :+1: but it would be nice if you could also fix the problem @Siedlerchr mentioned.

#1564 Comment 3:
I'll see what I can do @Siedlerchr Turned out I didn't have the date field
enabled in my version and I didn't prioritize getting it there.

What should the correct way be? Based on system preferences? Isn't there a
preference setting for it? (Writing on my phone...)

Will be a separate PR though.

#1564 Comment 4:
@oscargus always in iso-format yyyy-mm-dd since this as what biblatex expects.

#1564 Comment 5:
Ah, that's right. I just remembered the part about system language. :-)

#1564 Comment 6:
@oscargus  Just change your db to biblatex and it will the there ;)

--------------------------------------------------------------
#1563 Comment 1:
Well, now it is more like the actual feature request. The reverse linking is not obvious how to implement graphically and relates to https://github.com/koppor/jabref/issues/14 as well.

#1563 Comment 2:
I kept the button name and didn't understand the lambda thing. Other than that, the comments are honored.

#1563 Comment 3:
@oscargus  Forget about the lambda thing. I oversaw that it contains more than one method :confused: 

--------------------------------------------------------------
#1562 Comment 1:
LGTM :+1: just some very small remark. You can merge it in afterwards.

--------------------------------------------------------------
#1561 Comment 1:
Looks good, can be merged in my point of view.

--------------------------------------------------------------
#1560 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#1559 Comment 1:
LGTM :+1:

#1559 Comment 2:
I merge this in and try to add a test later. Yes, really.

--------------------------------------------------------------
#1557 Comment 1:
More quality control regarding internationalization is really a good idea. LGTM!

--------------------------------------------------------------
--------------------------------------------------------------
#1555 Comment 1:
LGTM!

#1555 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#1552 Comment 1:
LGTM!

#1552 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#1549 Comment 1:
Good work 👍

#1549 Comment 2:
I am really happy that you are working on this. Is it correct, that the "global search" window will be abandoned? I have no idea whether it is causing any conflict with the current implementation of the search mechanism, but I am one of those who is using it rather extensively. 

There are two scenarios, where a global search is useful:
1. Often I create a separate bib file for a project (e.g. a journal article), where I put all related papers. Some of them are of interest just for this project and are not supposed to be part of my database core (e.g. newspaper articles). Hence, I often use search queries that include results of the core and project related file
2. I have a bib file for papers which I use in a certain context, but that haven't been read thoroughly yet. Some of them will eventually be moved to the 'core database'. Also in this case I use a global search to find results within both bib-files.

Both scenarios could be managed by creating groups, and if global search gets abandoned, I will certainly do. However, I like the tab based style of several bib files very much, because I don't have the feeling that my project related articles get lost in my huge database with thousands of entries

#1549 Comment 3:
:+1: for keeping the global search window. Please readd it. @bartsch-dev There are many JabRef users having more than 10 bib files. They do not want to click through all 10 files for each search.

#1549 Comment 4:
Another aspect: What happens if the horiztonal space is not enough to display all icons and the search bar? Will the searchbar be displayed beneath the icon bar? 

#1549 Comment 5:
Based on another issue the minimum width of the window is already around 1000 pixels (depending on look-an-feel, OS, etc), so it is crucial that it will fold.

But it indeed looks promising!

#1549 Comment 6:
if the window is too small for the toolbar it will now wrap between the normal buttons and the searchbar.

The search result Dialog will now remember its location; the global search has a shortcut (ctrl+shift+f, #573); enter in the result dialog will select the entry in the BasePanel (#617); the Reuslt window is cloasable with ctrl+w if fdocused (https://github.com/JabRef/jabref/issues/573#issuecomment-232284156); and the result dialog won't stay at top anymore if the MainFrame is focused and they are on top of each other.

#1549 Comment 7:
Please resolve conflicts.

#1549 Comment 8:
> enter in the result dialog will select the entry in the BasePanel
- I have two databases open and search for a keyword
- I open the global search and it finds my result entries from both databases
- I press enter on an entry and it focuses the correct tab but <b>it always selects the first entry in this tab</b>

EDIT: It does focus the correct entry if I am already in the right tab, but if it has to focus a different tab it always selects the first entry.

Did I missunderstand the sentence or is this a bug?

#1549 Comment 9:
Should be fixed now!

#1549 Comment 10:
Is it possible to work on the global search in this PR, too? 
- [x] The shortcut ctrl+shift+f should focus the search field if it is empty (instead of doing a globally searching the empty string)
- [x] ESC in the global search should focus the search field. Currently, the focus just stays where it was
- [x] The global search popup should show the bib file name

#1549 Comment 11:
implemented all 3 things.

#1549 Comment 12:
What happens if the window is too small? Will the search bar be moved to the new line? A lot of people use JabRef only with 1024x768 resolution.

#1549 Comment 13:
Yes, if the width is too small the entire searchbar will move into a new line.

#1549 Comment 14:
What I've done so far:
- SearchBar
  - instead of each bib database having its own, the searchbar is now in the Toolbar
  - if the window width is too small the whole searchbar will move into a new line
  - added shortcut: global search `ctrl+shift+f`; if the search field is empty it focus the searchbar
  - fixed: when searching the first match will be selected if the current selection is no match
- SearchResultWindow
  - the window will now remember its location
  - each entry now shows which bib file it belongs to
  - when the user closes the window (without selecting an entry) the searchbar is focused
  - when the user double clicks on an entry it will correctly be selected in the bib file
  - `enter` will select the entry in the bib file  (#617)
  - added shortcut: closing the window `ctrl+w` (https://github.com/JabRef/jabref/issues/573#issuecomment-232284156)
  - the result window won't stay on top anymore the main frame is focused

What do you think?

#1549 Comment 15:
Sounds good :wink:

I'll test it later and give you some feedback

#1549 Comment 16:
Good job! Almost all your described functionality is working fine. :+1: 

The exception is "fixed: when searching the first match will be selected if the current selection is no match" - this still is not working for me in "filter" mode.

Some ideas for further improvments:
- the database column in the result window should be longer - the current width is determined by the word "database" and only the first 9 characters of the filename is shown.
- in windows re-accessing the result window after switching the focus to another application is hard as it is not added to the windows task bar (was no issue before as it was modal 'above' the JabRef main window)
- I'm not sure whether it might be helpful to use a (titled?) border to group the search related textfields, buttons and labels (see https://docs.oracle.com/javase/tutorial/uiswing/components/border.html) - or maybe align the search stuff on the right side? 

#1549 Comment 17:
> The exception is "fixed: when searching the first match will be selected if the current selection is no match" - this still is not working for me in "filter" mode.

When no entry was selected at all the search wouldn't select a match, it now does. Did you mean that?

> the database column in the result window should be longer - the current width is determined by the word "database" and only the first 9 characters of the filename is shown.

The database column is now as wide as the author column.

> in windows re-accessing the result window after switching the focus to another application is hard as it is not added to the windows task bar (was no issue before as it was modal 'above' the JabRef main window)

The SearchResultFrame will now show in the Taskbar (you can focus it with the global search shortkey too).

> ...  or maybe align the search stuff on the right side? 

I wanted to do that too, but if I do that the toolbar is not wrapable anymore.

#1549 Comment 18:
> > The exception is "fixed: when searching the first match will be selected if the current selection is no match" - this still is not working for me in "filter" mode.
> 
> When no entry was selected at all the search wouldn't select a match, it now does. Did you mean that?

As far as I understand you description of the fix always the first matching entry should be selected if the search if the currently selected entry is not a match of the search. Right?

This is working fine if the "float" mode is active - but does not work in the "filter" mode: The preview or entry editor is still showing the entry selected before performing the search (which is not visible in the list of matches at all):
![unbenannt](https://cloud.githubusercontent.com/assets/676652/17137970/570e3f82-533e-11e6-909a-9f17ad3855d1.png)

#1549 Comment 19:
Your PR is currently broken:

```
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException: 4
        at net.sf.jabref.gui.search.SearchResultFrame.setWidths(SearchResultFrame.java:305)
        at net.sf.jabref.gui.search.SearchResultFrame.init(SearchResultFrame.java:155)
        at net.sf.jabref.gui.search.SearchResultFrame.<init>(SearchResultFrame.java:135)
        at net.sf.jabref.gui.search.GlobalSearchWorker.<init>(GlobalSearchWorker.java:35)
        at net.sf.jabref.gui.search.GlobalSearchBar.performGlobalSearch(GlobalSearchBar.java:206)
        at net.sf.jabref.gui.search.GlobalSearchBar.lambda$new$1(GlobalSearchBar.java:117)
        at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
...
```

#1549 Comment 20:
Sadly I cannot reproduce your problem!

#1549 Comment 21:
I will be gone the next 2 weeks. I will be continuing working then.

#1549 Comment 22:
What needs to be done for this PR to be closed?

#1549 Comment 23:
Please fix my minor comments. @matthiasgeiger Any additional comments? Otherwise, I would merge this in. (After double check CHANGELOG.md and headers)

#1549 Comment 24:
Could you please make `Search globally` make a toggle button and change the functionally of the button before to behave acoordingly?

If the search globally is on, the global search is active. Otherwise, the search string is local for each database.

#1549 Comment 25:
You can also use the icon `earth` (Codepoint F1E7) and `earth-off` (F1E8;) for this.

#1549 Comment 26:
As I was just writing something similar as @matthiasgeiger , here are the images for reference:

![earth](https://cloud.githubusercontent.com/assets/8114497/17968273/2fc2d1a4-6acc-11e6-8a75-6717c32fee4b.png)
![earth-off](https://cloud.githubusercontent.com/assets/8114497/17968272/2fc1e708-6acc-11e6-96ec-ba5cebc7a14a.png)

#1549 Comment 27:
added a global mode to the search
- if the global mode is off
  - each tab has its own searchterm
  - the search result dialog only shows local findings
- if the global mode is on
  - in each tab the searchterm is the same (taking the one when it was activated)
  - the search result dialog shows findings in all bib files

#1549 Comment 28:
Does the help file need an update?

#1549 Comment 29:
The global search needs to be added to the help file.
The `show results in window` functionality needs to be described too.

#1549 Comment 30:
What is the current status on this? Is there anything @bartsch-dev should do here?

#1549 Comment 31:
Looking at the localization files and the changelog it seems like you have some merge problems.
Fixing the localization files should fix travis CI. Also try to fix codacy/pr issues.

#1549 Comment 32:
I've got an issue with the focus. Discussed personally with @bartsch-dev. Would merge after that is fixed.

#1549 Comment 33:
I fixed the focus problem.
I also addressed a traversal problem after you abort the searcht (hit <kbd>ESC</kbd> in the searchbar).
Now the User can jump from the searchbar to the Main table with <kbd>ctrl</kbd> + <kbd>Enter</kbd>

#1549 Comment 34:
Searchbar disappers at certain occaisions. Please try to increase/decrease the width of JabRef and you'll see that at some point, it disappears:

![grabbed_20160908-224223](https://cloud.githubusercontent.com/assets/1366654/18366072/86d91e9a-7615-11e6-84f9-81e71f2ebb89.png)

![grabbed_20160908-224233](https://cloud.githubusercontent.com/assets/1366654/18366080/8cd6214e-7615-11e6-8696-6453ac4f92a2.png)

It also happens during the search if "no results found" is appended. Then, the searchbar disapears after having nothing found:

![grabbed_20160908-224028](https://cloud.githubusercontent.com/assets/1366654/18366014/443e09b0-7615-11e6-9978-41331842a1b3.png)

![grabbed_20160908-224043](https://cloud.githubusercontent.com/assets/1366654/18366024/4b7496c2-7615-11e6-884d-fae815de5d89.png)

#1549 Comment 35:
fixed

#1549 Comment 36:
Tested with bce1bf5 - not fixed:

![jabref-global-search](https://cloud.githubusercontent.com/assets/1366654/18416353/69048144-7812-11e6-99e7-7f61db3c51ba.gif)

--------------------------------------------------------------
#1548 Comment 1:
LGTM :+1:

#1548 Comment 2:
LGTM

--------------------------------------------------------------
#1546 Comment 1:
LGTM :+1: 

#1546 Comment 2:
LGTM :+1: 

#1546 Comment 3:
LGTM :+1:

--------------------------------------------------------------
#1545 Comment 1:
Yeah, but there is one problem! It works only for UTF8 databases.
If I switch my db to ASCII (right click on the bib tab) or whatever Encoding, my Unicode would be screwed again...

#1545 Comment 2:
Correct. However, in that case all the other HTML exports will also screw up as they state UTF-8 as well.

(Btw, ASCII and ISO 8859-1/Latin 1 will work...)

#1545 Comment 3:
A possible argument (apart from being lazy and providing a quick fix) is that we cannot convert from any other encoding apart from UTF-8 anyway. So even if we go Unicode -> LaTeX -> HTML it will only work for UTF-8.

A better option might be to add a layout formatter that outputs the database encoding string.

#1545 Comment 4:
Yeah. I think we should stay with your quick fix first. I doubt that people use other weird encoding than UTF-8 together with the HTML export. And if really, they can still do a Quick Search + Replace in the HTML code.

#1545 Comment 5:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1541 Comment 1:
LGTM :+1: in general. Just some small remarks. Can be merged after these are fixed.

#1541 Comment 2:
Can this be merged?

#1541 Comment 3:
why did the gradle script change? Otherwise, LGTM.

#1541 Comment 4:
Gradle script is back to normal.

--------------------------------------------------------------
#1539 Comment 1:
Only minor remarks. LGTM.

#1539 Comment 2:
LGTM, just merge after you addressed the minor comments.

#1539 Comment 3:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1535 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1532 Comment 1:
Besides the minor comment: LGTM

#1532 Comment 2:
@koppor Thanks for your additions. Can you please fix my small comments (just push directly to the branch).

#1532 Comment 3:
@tobiasdiez Your opinion regarding the [codacy issues regarding the initialization with already-set default values](https://www.codacy.com/app/simonharrer/jabref/pullRequest?prid=271317)?

#1532 Comment 4:
@koppor: I don' care 😸 Complaining about unnecessary code in the most verbose programming language ever feels a bit sarcastic...

#1532 Comment 5:
This is an improvement of #1459.

--------------------------------------------------------------
#1529 Comment 1:
Thanks @mlep!

--------------------------------------------------------------
#1526 Comment 1:
Looks good :+1:  ! 
Instead of the "+" Button  would suggest simply the text "Add".
What is the purpose of the "-" Icon? Deletion? If yes, a kind of trash can symbol would be more suitable

#1526 Comment 2:
I updated the description and added screenshots for the latest commit. Is it really the best idea to add the "+" to the end of the list of journal abbrevaitions? This would mean the user always has to scroll to the bottom to add more journal abbreviations to the list. In my opinion this is less ideal than having a button that is always visible and in the same place. Any thoughts?

#1526 Comment 3:
Personally, I prefer inline editing for lists/tables with only a handful of columns. See for example http://designingwebinterfaces.com/ultimate-guide-to-table-ui-patterns. The very first row could be an "insert row", i.e. it shows (in italic) "Create new abbreviation" and when you click you just have an empty textfield to insert the new abbreviation. 

Other from that, I really like how the dialog looks. Maybe change the close/remove icon? Btw what is the purpose of this "JabRef Lists" button at the bottom?

#1526 Comment 4:
@tobiasdiez so when clicking on the edit icon on the right the column should be editable?
The "JabRef Lists" button shows the jabref built in journal abbreviations which are not modifyable. In the swing version there is a "view" button to show these abbreviations in a separate window.

#1526 Comment 5:
@boceckts Yes exactly, clicking edit (and I would also support double clicking) makes the row editable. Mhh on second thought, one might not even need the edit button but show it directly in the cell upon mouse hover and a single click then makes the cell editable. Decide based on what is easier to implement. 

For the "JabRef List" button, you also have a JabRef built in list in the drop-down. What is the difference here?

#1526 Comment 6:
@tobiasdiez The built in lists in the drop down will only appear when the toggle button is activated

#1526 Comment 7:
Is there a need to hide it from the drop-down list? If not, then I would just remove the toggle button.

#1526 Comment 8:
@tobiasdiez I just thought it's nice to give the user  the option to only display their custom lists

#1526 Comment 9:
@boceckts Please remove "JabRef lists" button. :sunflower: 

#1526 Comment 10:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1526?src=pr) is 10.79% (diff: 4.20%)

> Merging [#1526](https://codecov.io/gh/JabRef/jabref/pull/1526?src=pr) into [javafx](https://codecov.io/gh/JabRef/jabref/branch/javafx?src=pr) will increase coverage by **0.02%**

``` diff
@@             javafx      #1526   diff @@
==========================================
  Files           705        707     +2   
  Lines         46412      46379    -33   
  Methods           0          0          
  Messages          0          0          
  Branches       7637       7630     -7   
==========================================
+ Hits           5002       5008     +6   
+ Misses        40963      40921    -42   
- Partials        447        450     +3   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [bc6f0c9...0524ca4](https://codecov.io/gh/JabRef/jabref/compare/bc6f0c929ebc9730064e884c619805c94d0db1f9...0524ca49bd8d384a10ebbece4a9a32f6e51b28cf?src=pr)

#1526 Comment 11:
I just made some final remarks. After these are fixed, this PR can be merged in my opinion. @koppor pls do the final review & merge, thanks.

@boceckts (and the all others who worked on this PR): good job! I really like your code, especially that you wrote tests to implement the logic! One can see that you learned a lot in the last few weeks.

#1526 Comment 12:
I think I now addressed all of your comments.

#1526 Comment 13:
I'll merge this now, since it looks good to me and all the javafx code will be finally reviewed anyway.

#1526 Comment 14:
Does not work in `javafx`. @boceckts Can you please check?

```
Exception in thread "JavaFX Application Thread" java.lang.IllegalStateException: Cannot load net.sf.jabref.gui.journals.managejournalabbreviations
        at com.airhacks.afterburner.views.FXMLView.loadSynchronously(FXMLView.java:94)
        at com.airhacks.afterburner.views.FXMLView.initializeFXMLLoader(FXMLView.java:101)
        at com.airhacks.afterburner.views.FXMLView.getView(FXMLView.java:113)
        at net.sf.jabref.gui.journals.ManageJournalAbbreviationsView.showAndWait(ManageJournalAbbreviationsView.java:201)
        at net.sf.jabref.gui.journals.ManageJournalsAction.lambda$actionPerformed$0(ManageJournalsAction.java:21)
        at com.sun.javafx.application.PlatformImpl.lambda$null$173(PlatformImpl.java:295)
        at java.security.AccessController.doPrivileged(Native Method)
        at com.sun.javafx.application.PlatformImpl.lambda$runLater$174(PlatformImpl.java:294)
        at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:95)
        at com.sun.glass.ui.win.WinApplication._runLoop(Native Method)
        at com.sun.glass.ui.win.WinApplication.lambda$null$148(WinApplication.java:191)
        at java.lang.Thread.run(Thread.java:745)
Caused by: javafx.fxml.LoadException: No resources specified.
/C:/git-repositories/jabref/jabref/build/resources/main/net/sf/jabref/gui/journals/managejournalabbreviations.fxml:22

        at javafx.fxml.FXMLLoader.constructLoadException(FXMLLoader.java:2597)
```

#1526 Comment 15:
@koppor I will look into it, did this happen after the javafx branch has been updated?

#1526 Comment 16:
@koppor Ok so I tracked the issue and came to the conclusion that the this pr #1918 causes the exception. As described in the pr's description @tobiasdiez had to out comment the line `bundle = Localization.getMessages();` since otherwise the localization tests would fail. After adding it back it works for me again.

#1526 Comment 17:
@boceckts do the localization tests also work after readding the `bundle = ...` line?

#1526 Comment 18:
No but it gives me the same errors when the line is out commented, I'm not sure if this statement is causing the failing tests..

#1526 Comment 19:
Yes, this happens with the current javafx branch (merge of master). I did not check the state before the merge. My gut feeling is that the merge broke it. But I'm not sure.

I is **not** about failing tests, it is about that "Options -> Manage Journal Abbreviations" is a noop.

#1526 Comment 20:
Yes it's about opening the dialog. But still, re-adding the line as described by me two comments ago fixes the issue for me. 

#1526 Comment 21:
Reenabled in #1935.

--------------------------------------------------------------
#1525 Comment 1:
I think you should leave a comment in the changelog

#1525 Comment 2:
Please fix failing check.

#1525 Comment 3:
I think that is currently the only way to print the preview. Unless one enables the preview toolbar, which, if I recall correctly, is only supported by manual editing of the preferences... But I may be wrong here.

#1525 Comment 4:
I have disscussed the new bindings with @koppor. As far as I remember he said that print entry preview isn't needed at all.

#1525 Comment 5:
- Printing preview: just add it to the right-click menu
- I would put the websearch on Alt + 4 (more important then OpenOffice)
- for the same reason, OO -> Alt + 0
- Remove default Toggle Toolbar shortcut (can't imagine that this is useful for somebody, I would leave alt + num for toggling real panes)
- What is the difference between F7 and Alt + F7, both are mapped to the same command according to your table.

#1525 Comment 6:
I fixed my table regarding Automatically set file links (F7 was the right one)

#1525 Comment 7:
Please also test how this works in conjunction with the emacs mode.

#1525 Comment 8:
Ok I'll look into it.

#1525 Comment 9:
- [ ] tab in the main table: When I click on an entry and select tab, the next entry should be selected. Current behavior: next cell in the entry table is selected.

#1525 Comment 10:
Better support of groups:
1. Open a bib file with groups and 10 entries.
2. Click on entry 10
3. Click on a group
4. Press cursor down

Effect: Cursor moves to the first entry in the entry table

Desired effect:
- [ ] Next group is selected

Side comment:
- [ ] When the group window has the focus, tab should jump to the first entry in the entry table.

#1525 Comment 11:
Maybe one should consider that Tab always cycles to the next frame if there is nothing to select in the current subwindow. For example, tab in entry list goes to entry preview / edit. Tab in some field in entry edit goes to next field, but tab in last field goes to group window. Tab in group window goes to next sidepane component and from there back to the entry list. 

#1525 Comment 12:
@koppor I don't think tab for the next entry is a convenient interaction. As I encountered when working with the customize entry type dialog, lists and tables are all navigated with the arrow keys, so the next enry is reached by pressing arrow-down. I think we should keep that consistent as it is right now. Do you agree?

#1525 Comment 13:
I have to agree with @Braunch 

#1525 Comment 14:
- [x] Printing preview: just add it to the right-click menu
- [x] I would put the websearch on Alt + 4 (more important then OpenOffice)
- [x] for the same reason, OO -> Alt + 0
- [x] Remove default Toggle Toolbar shortcut (can't imagine that this is useful for somebody, I would leave alt + num for toggling real panes)
- [x] What is the difference between F7 and Alt + F7, both are mapped to the same command according to your table.

#1525 Comment 15:
@Braunch Currently, when pressing tab, the next cell in the entry table is selected. One cannot do anything at a cell, can I? For instance, when pressing space on the url/doi file column, I would expect that the same behavior as when left-clicking is done. This currently doesn't happen. So, either jump to the next line via tab or do something meaningful when a single field in the table is focused.

#1525 Comment 16:
@tobiasdiez 

> Printing preview: just add it to the right-click menu

Print preview is already a part of the right-click menu of the preview pane. Is that what you wanted me to do?

#1525 Comment 17:
@koppor concerning your Side Comment

> When the group window has the focus, tab should jump to the first entry in the entry table.

I think the "show entry table" shortcut is ment for that. When I am in the groups window and press "alt + 1" the entry table regains the focus. Does this suffice?

#1525 Comment 18:
I am thinking about ways to handle multiple selected entries when clicking print entry preview within the right click menu. Should all the entries be printed or only the one the mouse was hovering over while clicking?

#1525 Comment 19:
I updated the description, I would use that as a potential blogpost.

#1525 Comment 20:
So are there any more changes you want me to include?

#1525 Comment 21:
I discovered a bug with the `PrintEntryPreview` action in the right click menu, it wouldn't work if the `EntryPreview` isn't active. So I changed my code to open the `EntryPreview` if it's not active.

#1525 Comment 22:
I think edit preamble is kind of unnecessary.

#1525 Comment 23:
Do you mean the hotkey or the function at whole?

#1525 Comment 24:
@mairdl The hotkey. The function is also not very useful probably, but the hotkey for it is even more unneeded for such a seldomly used action.

#1525 Comment 25:
I'll remove it in that case.

#1525 Comment 26:
Is there something else to add/delete/change?

#1525 Comment 27:
Does the "cycle" functionality for groups also work for the web search? (Focus if opened and not focused, close if focused and hotkey is pressed).

#1525 Comment 28:
The toggle functionality is in a different PR: https://github.com/JabRef/jabref/pull/1605
and yes it does work there.

#1525 Comment 29:
Are there any more changes to be done or can this be merged?

#1525 Comment 30:
Please resolve conflicts and prepare a blog post for https://github.com/JabRef/www.jabref.org (as pull request)

#1525 Comment 31:
Side note: There is still a bug open regarding the key bindings (https://github.com/JabRef/jabref/issues/1235) - Perhaps you can have a look this as well?

#1525 Comment 32:
I created a PR for my blogpost over at https://github.com/JabRef/www.jabref.org/pull/58

#1525 Comment 33:
Blog article at http://blog.jabref.org/2016/08/15/HotkeyRevision/
Currently, no help page on the hot keys.

--------------------------------------------------------------
#1524 Comment 1:
I am not sure whether we can rescue these integration tests at all. Maybe we have to skip this, and add them for JavaFX, which is maybe more stable.

I do not like that the Timer is a deamon, as this complicates things unnecessarily.

#1524 Comment 2:
Maybe we should have an online discussion about the daemonized timer. I would like to have UI tests to discover issues like #1551 as soon as possible and not when an interested user downloads the latest build. :innocent: 

#1524 Comment 3:
Discussed with @simonharrer 
- Side effects of daemonized timer are production JabRef is not clear
- The UI tests cause much trouble
- Our GUI code is of low quality
- We think that we will migrate to JavaFX and better UI code

Decision: Postpone until we have a better UI code

--------------------------------------------------------------
#1522 Comment 1:
Thanks! Just rebase.

#1522 Comment 2:
rebased

--------------------------------------------------------------
--------------------------------------------------------------
#1518 Comment 1:
LGTM, the failing checks seem to be caused by other updates.

#1518 Comment 2:
LGTM :+1:

--------------------------------------------------------------
#1517 Comment 1:
Looks good :+1: 

#1517 Comment 2:
Had just some minor remarks.
LGTM :+1:

#1517 Comment 3:
Please write a test, as I have the hunch that the name is created wrongly. Then, this can be merged.

#1517 Comment 4:
@simonharrer you were right, I fixed it.

Not checking for null on the `getExtensions()`-Method still bothers me, as there is no way of ensuring it (other than hinting at it in the JavaDoc).
Writing a test is also not easily possible, as asfaik getting all subclasses of a class via reflection is not possible.

Thus this should only merged when #1487 is merged which fills all the missing extensions.

#1517 Comment 5:
Looks fine. Some additional comments. After you addressed them, this can be merged.

#1517 Comment 6:
@simonharrer This should have merged only after #1487 (as written above), b/c now when trying to import entries into the db it throws NPEs since almost no extensions is known and there is no null-check.

#1517 Comment 7:
I solved this by merging the other PR directly as well. :)

--------------------------------------------------------------
#1511 Comment 1:
LGTM :+1: 

#1511 Comment 2:
Some tests are failing and it would be great if you could push your branch to the jabref repo as this facilitates testing by simply running a build from http://builds.jabref.org/

#1511 Comment 3:
OK fixed the failing tests and the build is available under http://builds.jabref.org/fix1507/. (Will fix the checkstyle issues after green light for merge)

--------------------------------------------------------------
#1501 Comment 1:
please fix codacy issues

#1501 Comment 2:
Looks good to me now :+1: 

#1501 Comment 3:
Anything else I should change?

--------------------------------------------------------------
#1491 Comment 1:
Is this deletion optional? Some tools have "clean up thoroughly". Maybe, some users don't want to have their settings to be destroyed. OK, they can export their settings. Maybe, we should display a warning that also their settings are lost when uninstalling.

--------------------------------------------------------------
--------------------------------------------------------------
#1488 Comment 1:
Hm, thanks for your fix! How did you correct this? I just automatically created the icon files with some tool. I wonder what went wrong...

#1488 Comment 2:
:+1: Thanks for fixing!

@JabRef/developers shall we release 3.4(.1) for Mac OS X?

#1488 Comment 3:
I restored the old "JabRef-icon-mac.icns" file - Maybe this tool deletes some OSX specific metadata, because I also had some problems modifying the new file, because it had a dimension of 0x0 instead of 512x512

#1488 Comment 4:
Okay... Stefan tries to recreate a valid *.icns file with the "standard logo" which should be used.

#1488 Comment 5:
Okay I used Greenfish icon editor. Just exported as Mac icon file...

#1488 Comment 6:
@chochreiner Can you try this icon file and amend it in your branch if it is working?
[jabref.zip](https://github.com/JabRef/jabref/files/306924/jabref.zip)

#1488 Comment 7:
works fine

#1488 Comment 8:
Thank you again Christoph :smile: 

--------------------------------------------------------------
#1487 Comment 1:
Please fix the minor things. After this, mark it again for ready-for-review and we will merge this in. 

--------------------------------------------------------------
#1486 Comment 1:
LGTM

#1486 Comment 2:
:+1: 

--------------------------------------------------------------
#1483 Comment 1:
LGTM :+1:

#1483 Comment 2:
LGTM :+1: 

#1483 Comment 3:
LGTM

#1483 Comment 4:
Ok, let's merge this in :smile: :+1: 

--------------------------------------------------------------
#1480 Comment 1:
You should describe your changes in the Changelog.md and also add tests for the changes

#1480 Comment 2:
This PR shows, that the general rule that squashing everything in one commit does not always make sense. In such a large PRs, formatting changes should not be done.

#1480 Comment 3:
Some comments:
- Please do not use inheritance. Use composition instead. The GUI should use an instance of the fetcher. The fetcher should be usable without the GUI if one wants to automate this in another context. In this effect, you can remove this whole "protected" stuff in the fetchers, as this is no longer required.
- This is a really long PR and hard to review. Use small commits instead. And add much more text describing your PR in case it is that long. 

#1480 Comment 4:
And I do not get this PR. In most GUI classes, the only dependency to the GUI is the JOptionPane, which is basically used only as an enum. In these cases, we could move the items to the logic almost directly.

--------------------------------------------------------------
#1479 Comment 1:
Very good work :+1:, only a few remarks from my side.

#1479 Comment 2:
Please do not include the generated classes. Try to use https://github.com/jacobono/gradle-jaxb-plugin to generate them. Does that work?

#1479 Comment 3:
Can you please document the source of the XSD you used to create the JAXB classes. Thanks!

#1479 Comment 4:
@koppor I didn't get the plugin work. But I've wrote an ant task, that I've found [here](https://joerglenhard.wordpress.com/2012/01/10/xjc-and-schemagen-with-gradle/). This works local, but for some reason travis ci says, that src/main/gen is a non existend directory.

@matthiasgeiger I wrote the source as a comment in the xsd file(s), is that ok ? 

#1479 Comment 5:
Made some comments, but in general LGTM

#1479 Comment 6:
LGTM :+1: 

#1479 Comment 7:
So can this be merged in ? Or are there any other remarks?

#1479 Comment 8:
Sorry, but this does not work at all for me.

Steps to reproduce: 
- go to https://www.ncbi.nlm.nih.gov/pubmed/?term=flu
- select one or more entries
- click on "Send to:" -> "File" -> "XML"
- Open JabRef and try to "Import into new database" the created XML file

What happens? There are two dialogs showing nothing: 
![medline-import1](https://cloud.githubusercontent.com/assets/676652/16837231/581cd4a4-49c2-11e6-97a4-02212208c3ec.png)

![medline-import2](https://cloud.githubusercontent.com/assets/676652/16837232/584be41a-49c2-11e6-9176-d2a2243c21b2.png)

Followed by an error message:
![medline-import3](https://cloud.githubusercontent.com/assets/676652/16837242/61c485f6-49c2-11e6-88c7-a4e2c25937e8.png)

Am I doing sth wrong?

#1479 Comment 9:
Yeah you're right. I'm getting the same problem. But for some reason, the files that I've tested are working. I'm looking for the problem.

#1479 Comment 10:
@matthiasgeiger now it should work. I'm not sure why, but somehow the first two lines
`<?xml version="1.0"?>
<!DOCTYPE PubmedArticleSet PUBLIC "-//NLM//DTD PubMedArticle, 1st January 2016//EN" "http://www.ncbi.nlm.nih.gov/corehtml/query/DTD/pubmed_160101.dtd">`
 were causing trouble. My solution is to skip the first lines, till we reach the first line, that contains <pubmedarticle>, <pubmedarticleset>, <pubmedbookarticle> or <pubmedbookarticleset>.

#1479 Comment 11:
XML parsers should do that work. Do not walk through XML by hand.

Please remove this method and try the solution presented at http://stackoverflow.com/a/22204172/873282

`xsr.next();` from XMLStreamReader seems to be your friend.

#1479 Comment 12:
Other than my small comments: looks good (codewise). Haven't tried the UI.

#1479 Comment 13:
I've adressed the comments. Are there any other remarks? 

#1479 Comment 14:
LGTM

#1479 Comment 15:
So can this be merged? 

--------------------------------------------------------------
#1477 Comment 1:
Note that the whole SQL code will be replaced by something more smooth in #1451.

--------------------------------------------------------------
#1475 Comment 1:
:+1:

--------------------------------------------------------------
#1474 Comment 1:
Why does it make sense that the explicit group extends the keyword group? I do not see any advantages from that, despite making it more complex. Is really a lot of code saved? Maybe duplicating a few lines of code (in explicit and keyword group) creates a simpler structure overall?

#1474 Comment 2:
I think it makes sense that the explicit group derives from keyword group. A keyword group allows to collect all entries which contain a given word in a specified field. The explicit group does exactly the same thing except that only the `groups` field is of interest. 

If you have a look at the [ExplicitGroup class](https://github.com/JabRef/jabref/blob/e13d7f10b23e3b03c9f6425704ad46a973c90023/src/main/java/net/sf/jabref/logic/groups/ExplicitGroup.java) you will notice that it contains absolutely no logic about how to determine the matched entries. This is completely handled by the keyword group. (It might even make sense to expand the class hierarchy chain and let `KeywordGroup` derive from `SearchGroup` since in the end it only a very specific search query is used.) 

#1474 Comment 3:
Thanks for the detailed explanation - makes sense. :)

Instead of relying on the class, I would recommend to introduce an enum that differentiates the group types, and which is returned through a method getType which each class overwrites if necessary. 

--------------------------------------------------------------
--------------------------------------------------------------
#1472 Comment 1:
Any comments? Can I merge this in (of course after fixing compile errors)?

#1472 Comment 2:
Overall looks good, just some small remarks from my side :+1: 

#1472 Comment 3:
@Siedlerchr Thanks for you feedback. Incorporated it and rebased.

#1472 Comment 4:
@tobiasdiez after rebase and successful tests, this can be merged as well.

--------------------------------------------------------------
#1471 Comment 1:
Ok, I'd like to put this up for discussion.

User comments are now kept under the following circumstances:
- Above any BibEntry
- Above any BibtexString
- Comments at the end of the file

This is independent of whether an entry is changed/reformatted, but not if it is deleted. If it is reformated, user comment text is located exactly one blank line above the reformated entry.

User comments are still not kept when:
- Above meta data comments
- Above the Preamble
- Contains JabRef's ENCODING_PREFIX
- Above an entry that has been deleted

Is this good enough? It should be sufficient in most scenarios and work if someone opens his non-JabRef bib file with JabRef. If someone starts adding arbitrary text between JabRef's Metadata, though... The latter is hard to achieve since we do not store the serialization of MetaData. If we want to, I'd have to make some additions to our MetaData objects. I could also store the comments between meta data and add them as a bunch at the end of the file, but then the relative position gets lost. Before I do more work, I'd like to clarify the following points:
- Does the storage of arbitrary text above MetaData really matter?
- Is it ok to delete comments if the entry below them is deleted?

#1471 Comment 2:
Looks good to me. Just had some more or less minor remarks (mostly about the testing code). 

I think we don't need support for comments between JabRef metadata.

#1471 Comment 3:
@tobiasdiez If not mentioned otherwise, I addressed your comments above.

We tend to differ when it comes to testing in general, though. I really prefer integration tests when doing anything with reading/writing. In JabRef, these things are inherently coupled. To implement this PR (write out user comments correctly), I also had to do significant changes to reading. So, as long as no overwhelming majority of @JabRef/developers pressures me to write unit tests, I will rather write integration tests.

#1471 Comment 4:
LGTM. I think integration tests are more valuable. So this would suffice for me. 

#1471 Comment 5:
Great! Let us talk briefly about this during the next devcall and decide if we take it into 3.5 or 3.6.

#1471 Comment 6:
For 3.6

#1471 Comment 7:
@lenhard Please squash the commits via Github when merging this :smile: 

--------------------------------------------------------------
#1470 Comment 1:
It shows `The command "./gradlew check integrationTest" exited with 1`, which should not be caused by this PR. LGTM.

#1470 Comment 2:
The problem are always the GUI tests. It's annoying...

#1470 Comment 3:
As I said in #1181, there should be some additional handling of author names with Jr part like `von Last, Jr, First`. Moreover, the code probably has to go into the AuthorList parser.

#1470 Comment 4:
I think (as outlined in https://github.com/JabRef/jabref/issues/1181#issuecomment-209390160), that `Jr` are seldom and that I need a thing working for 80% of the cases and not covering 100%. We just looked at `AuthorListParse.getAuthor()` and it seems to be _very_ difficult to include the special treatment there. We would have to include hard coded strings for `jrPart` to be able to distinguish them from other strings.

The fix works for me and really improves my workflow.

#1470 Comment 5:
Do you often have authors separated by colons? I would have guessed this is also a very seldom case.

#1470 Comment 6:
In my opinion, the cleanup operations / save actions should respect the bib(la)tex standard before anything else. Otherwise they keep reformatting valid bibtex and thus become useless. 

Sorry, but I just can't see an automatic way to correctly determine the authors if they are only separated by comma. Consider strings like
`Surname, Jr, First, Surname2, First2`
or `Surname, First, First2 Surname2`.

#1470 Comment 7:
Is a comma even allowed for separating authors in Bib(la)tex?

#1470 Comment 8:
IMHO we discussed the separator at some other place that biblatex can be configured to use something else than `and`, but I do not find the source.

In bibtex, `and` really has to be used.

This tweak happens only if **only commans** and **2 or more commas** and **even number of commas**

Thus, it will currently. destroy both of your examples. - We can include a checker if your special cases ( `Jr`) and parts with one word only (`Surname`, `First` at the second example) and not handle these.

I still think that you have these special cases, but that these are not the majority of the cases.

#1470 Comment 9:
I'm fine with every change as long as standard bibtex names don't get destroyed. So in particular:
- Last, First and Last2, First2 and Last3, First3
- Last, First and Last2, First2 and Last3, First3 and First4 Last4 (this should be converted to Last4, First4)
- Last, Jr, First and Last2, First2
- Last and Last2, First2 and Last3, First3 and Last4, First4

Moreover, semi-correct names using semicolon should still be converted to the correct format (i.e. replace every `and` in the above examples with a semicolon in the input). Please add corresponding tests.

#1470 Comment 10:
:open_mouth: - completely overseen that case. :see_no_evil: - Thank you for clarifying!

@bruehldev Please include that test and fix the issue. I indicated the necessary change (check for `value.containts(" and ")`) at the appropriate place.

#1470 Comment 11:
Please check whether your improvement also solves #1504 by adding the example as an additional test case.

Thanks!

#1470 Comment 12:
What is the status of this?

#1470 Comment 13:
I added the test with "von", "zu", "van".  I also covered the related issue (https://github.com/JabRef/jabref/issues/1504). 
What can i do additionally to close this pull request?

#1470 Comment 14:
At least: Fix [codacy issues](https://www.codacy.com/app/simonharrer/jabref/pullRequest?prid=249695) and resolve conflicts.

#1470 Comment 15:
@tobiasdiez 
i moved the entire code to AuthorList.parse and solved the merge conflict with a hard reset to upstream/master. 

#1470 Comment 16:
Did someone deleted commit where i moved the code to authorlist.parse? Right now i'm not even quite sure if i even pushed it :smile:. Should i push it again or should we leave the code in normalizenameformatter?

#1470 Comment 17:
I think I saw the code there yesterday anyway. And I didn't delete it... ;-)

#1470 Comment 18:
I added the new test and changed your remarks @Siedlerchr .
Thank you very much.
Theres still the question left if we move the code to authorlist.parse. 
I think it doesn't really matter so i left it in NormalizeNameFormatter.

#1470 Comment 19:
@JabRef/developers  Any strong opinions on having the code In NormalizeNameFormatter or Authorlist.parse?

#1470 Comment 20:
Yes, `Authorlist.parse` mainly because the test coverage for this method is way higher as for the name formatter (and for consistency reasons).

#1470 Comment 21:
Okay, i will move the code to `Authorlist.parse`.  Since i already did that on my computer at home i'll do that this evening and use the existing local commits.

#1470 Comment 22:
Rebased to upstream master. Should be ready to merge now

#1470 Comment 23:
As far as I can see the new code is still in the NormalizeNamesFormatter. Please also add the cases mentioned in https://github.com/JabRef/jabref/pull/1470#issuecomment-223537954 as tests for the AuthorList.parse method, i.e. as `assertEqual(expectedAuthor, Authorlist.parse(...))`. Thanks. 
Ready-for-review removed until this is done.

#1470 Comment 24:
@tobiasdiez sorry for the wrong statement. I thought it was pushed, From now on i will double check my uploaded code. 

I added the test cases for semicolons. The standart format is already tested by threeAuthorsSeperatedByAnd, testMultipleNameAffixes, testNormalizeAuthorList. I hope it's okay that i'm using last2,3,4 and first2,3,4 as names in the semicolon test. 

--------------------------------------------------------------
--------------------------------------------------------------
#1466 Comment 1:
LGTM :+1: 
Just one question:

> (missing localization has not been detected automatically as a variable has been used.

Is this a problem of the python? scripts we use and could it be implemented?

#1466 Comment 2:
Not a problem of the Python scripts as they are more or less obsolete by now. 
I think this is not implemented in `LocalizationParser.java` which is used in the tests that check the localizations.

#1466 Comment 3:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1464 Comment 1:
@oscargus how much effort would this be to implement a solution? You are our expert for encodings. :)

#1464 Comment 2:
Regarding the encodings in general there is a quite substantial list. The weird thing, which I do not get, is that sometimes the Unicode characters ends up wrong. In the particular case `\chi` is not converted correctly (Unicode 967) while both `\phi` (966) and `\psi` (968) works without any problems... There is a related issue #1264 with another character `\v{S}` (352) behaving the same way. No obvious reason why exactly those characters should misbehave... In the latter case `\v{S}` is converted to a square, which can be converted back to `\v{S}`...

#1464 Comment 3:
Implemented in #1581 

#1464 Comment 4:
Can delete the branch? @stefan-kolb @oscargus 

--------------------------------------------------------------
#1463 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1461 Comment 1:
LGTM

#1461 Comment 2:
LGTM :+1:

#1461 Comment 3:
Thank you very much. I tested the result and it appears to work well.
I know the following may be too much to ask, but I nevertheless wanted to pose one more related question: If the \emph appears within a book title, which will usually be typeset in italics already, \i0 needs to be inserted in the RTF rather than \i in order to obtain the desired result (namely that the emphasized text appears in roman instead of in italics). Would this be possible to implement within the current formatter? Please let me know if you need a detailed example.

#1461 Comment 4:
Can you please open a new issue for that? Also, if you or your colleague still has interest in contributing, we would love to see a refactoring of the formatter!

--------------------------------------------------------------
#1460 Comment 1:
LGTM

--------------------------------------------------------------
#1459 Comment 1:
Your tests mostly cover the `Version` class, did you also test (at least manually) if the new version dialog shows up as expected (on the start if newer version is available or not if you already pressed ignore this update)? I guess this is not easy to test with real data as you are already on the latest version when running this branch.

#1459 Comment 2:
Good work 👍
I have made a few minor comments but when they are addressed it's fine by my side.

#1459 Comment 3:
Can't this be done by a) mocking the current version (mocking prefs?!) and
b) mocking http? We already did both somewhere else in the code.

#1459 Comment 4:
Looks good to me too. Just some minor remarks and a bigger one for the handling of the dev version in isNewerThan.

For testing: UnitTests are not really possible since it's a GUI thing (and mocking is not possible for UI tests, right?). But you can change the version information in the gradle file, build it and then run it (i.e. pretend that you have an older version). Or for the sake of testing, you can also modify the BuildInfo class to return a hard-coded version.

#1459 Comment 5:
I should have considered all mentioned issues.
Some methods can't be extracted to another class (e.g. `JabRefGUI#checkForNewVersion()` to `Version` b/c then they would violate the strict separation of the logic from the gui).

#1459 Comment 6:
Hm, I am missing a CHANGELOG. :(

#1459 Comment 7:
Hm, I could swear I wrote one.
Should I write it quickly and open another PR, or do you push it directly onto the master?

#1459 Comment 8:
I added it directly.

--------------------------------------------------------------
#1453 Comment 1:
I am still an advocate of separate read/write classes which handle the serialization in both ways because:
- Using an Interface with fromString/toString methods would allow to make this more explicit in the code and ensure that these methods are not renamed by accident
- Using separate classes for reading/writing would make the classes themselfs smaller and allow a better separation of concern. 
- Easier to test as one only needs to look at a single cread/write class with its own test.

#1453 Comment 2:
Yes, you are right that separate read/write classes are probably even better. Nonetheless, I find the changes made in this PR are still an improvement and I'm quite satisfied with the result. (Satisfied enough to have no motivation for introducing new read/write classes)

#1453 Comment 3:
I changed the names. Thanks for the feedback!

--------------------------------------------------------------
#1452 Comment 1:
Adressed comments .

#1452 Comment 2:
Perfect, thanks!

#1452 Comment 3:
One untranslated string remaining!
(Move_linked_files_to_default_file_directory_%0=)

#1452 Comment 4:
@mlep: Thanks for spotting! I added the missing key directly on master via 2cef8e19b4c66f90e72009244b312ad208982635

--------------------------------------------------------------
#1451 Comment 1:
Issue: https://github.com/JabRef/jabref/issues/970

#1451 Comment 2:
Looks good overall, just some minor remarks :+1:   Please also add some new Database tests.

#1451 Comment 3:
Why do you want to include Oracle? What is the reasoning here? Is this a DB that is likely to be used in this context? I am not really sure as Oracle is expensive and hard to maintain.

I am against changing the events and adding a location to them. Why must this be differentiated in the first place?

All the metadata must be stored in the DB as well, including biblatex or bibtex mode (this is not something the user should change). Also do not forget the save actions, as they have an influence on the values in the DB as well. 

What happens if a change locally cannot be stored in the DB as there are conflicts?

#1451 Comment 4:
Me really wants Oracle. Some bigger institutes use Oracle and they don't want to run other databases. At least, this is, what I understood.

I will contact them again and ask how important Oracle is.

Currently, it seems that the hard part of the Oracle implementation is already done. The synchronization via events seems to be easy - see implementation hints at https://github.com/JabRef/jabref/issues/970.

#1451 Comment 5:
Ok, then please remove the lib file and use a file from maven repositories for the ojdbc.jar

#1451 Comment 6:
@simonharrer 

> Why must this be differentiated in the first place?

`DBSynchronizer` class listens to EntryEvents like `EntryAddedEvent` and pushes the new entry to the server. Such an event is sent from the method `BibDatabase.insertEntry`. The problem is that `DBSynchronizer` (and other classes in `remote` package) itself also use local methods such as `BibDatabase.insertEntry` or `BibEntry.setField` to update the local database. In this case the sent event should not trigger the SQL inserting/updating/deleting methods again (see https://git.io/vrHOw). But as I described in the code comments, if we remove the EventLocation it would not harm. It only causes a little redundancy.

> All the metadata must be stored in the DB as well, including biblatex or bibtex mode...

Okay, this is going to be implemented.

> Also do not forget the save actions, as they have an influence on the values in the DB as well.

Unfortunately I didn' t understand that completely. Now if you work on remote database you've still the possibility to save the file locally. Otherwise the changes are pushed by EntryEvents. Are there some other data which are involved within the saving process?

> What happens if a change locally cannot be stored in the DB as there are conflicts?

In this mode the newest version is held by remote database. Changes are going to be pushed automatically and every time you push an entry your local database is also going to be updated (this process is going to be accelerated via hashing etc). So there is no scenario a conflict can occur except connection problems. But in this case the editor should restrict any editings (TODO). Or two people are working at the same time at one field. In this case the last push will win.

#1451 Comment 7:
The save actions control stuff like that a specific field must be lower or upper case letters. Think about it: person A always uses lower case letters for the title, and person B uses always upper case letters for the title - what effect will this have on the database sync when basically the same data is used? They will create a lot of traffic if they work concurrently as the save of one will overwrite all the title fields of the other, and it will create conflicts. You can only overcome this if both know the correct save actions, and that is the reason why the save actions are stored in the metadata. 

Regarding resolving conflicts: sounds ok to be practical. It feels wrong, however, from my background with using version control systems. 

#1451 Comment 8:
I think it would be very profitable to unite the code for file-based exports with the code for sql-exports. For example, I really like the `immediately sync changes to the sql database` feature, which also would be nice for bib-files (similar to intellij's autosave). On the other hand some features which are currently missing for sql exports (like save actions or how external changes are handled) are already present for bib files. 
I did some refactorings in #1472 to make this unification easier.

#1451 Comment 9:
Currently I'm working on save actions. As I see the remote synchronization differs a lot from the local saving of metadata and defaults (think about the relational structure). Unifiying the code would dissolve the `remote` package and a lot of things would have to be moved/passed through to `BibtexParser`/`BibtexDatabaseWriter` which would blow up those classes. Furthermore it would cost a lot of time which is not present.

Currently I'm going to implement this in `remote` package. If there is some time capacity left after the first release, we could make some considerations to implement this and other customer wishes.

#1451 Comment 10:
@simonharrer @koppor It seems that ojdbc.jar is not longer available in maven repositories.
(see http://central.maven.org/maven2/ojdbc/ojdbc/14/)

`compile group: 'ojdbc', name: 'ojdbc', version: '14'` in `build.gradle` causes:

```
Execution failed for task ':tasks'.
> Could not resolve all dependencies for configuration ':runtime'.
   > Could not find ojdbc.jar (ojdbc:ojdbc:14).
     Searched in the following locations:
         https://jcenter.bintray.com/ojdbc/ojdbc/14/ojdbc-14.jar
```

#1451 Comment 11:
@obraliar Yes, they are no longer avaiable at the public maven repo, but Oracle has now its own repo. https://blogs.oracle.com/dev2dev/entry/how_to_get_oracle_jdbc

 However, it requires an account. I think @koppor  should register that for jabref:
http://docs.oracle.com/middleware/1213/core/MAVEN/config_maven_repo.htm#MAVEN9012

#1451 Comment 12:
Full meta data synchronization: Done.
Removing BibTex/BibLaTex radio boxes and using prefs instead: Done.
Tests for all classes localized in remote package: Done.

#1451 Comment 13:
From my position this is ready to get merged.

#1451 Comment 14:
Please resolve the conflicts.

#1451 Comment 15:
Can you update the summary in the very first post what this PR has now implemented and what is still open. What part has automated tests, etc.?

#1451 Comment 16:
@koppor: Done resolving conflicts.
@simonharrer: I updated the description (1. message) after every bigger commit. So it should be up-to-date. Now I just added a new screenshot and some points regarding to the last few commits. Are there some points not clear?

#1451 Comment 17:
I'm using MySQL 5.7 and I can open a connection to my remote database (actually, using localhost). However, copy-pasting this entry fails:

```
@Article{Lokkerbol201451,
  author        = {Lokkerbol, J. and Weehuizen, R. and Mavranezouli, I. and Mihalopoulos, C. and Smit, F.},
  title         = {Mental health care system optimization from a health-economics perspective: where to sow and where to reap?},
  journal       = {The journal of mental health policy and economics},
  year          = {2014},
  volume        = {17},
  number        = {2},
  pages         = {51-60},
  note          = {cited By 1},
  __markedentry = {[Laura:4]},
  abstract      = {Health care expenditure (as % of GDP) has been rising in all OECD countries over the last decades. Now, in the context of the economic downturn, there is an even more pressing need to better guarantee the sustainability of health care systems. This requires that policy makers are informed about optimal allocation of budgets. We take the Dutch mental health system in the primary care setting as an example of new ways to approach optimal allocation. To demonstrate how health economic modelling can help in identifying opportunities to improve the Dutch mental health care system for patients presenting at their GP with symptoms of anxiety, stress, symptoms of depression, alcohol abuse/dependence, anxiety disorder or depressive disorder such that changes in the health care system have the biggest leverage in terms of improved cost-effectiveness. Investigating such scenarios may serve as a starting point for setting an agenda for innovative and sustainable health care policies. A health economic simulation model was used to synthesize clinical and economic evidence. The model was populated with data from GPs' national register on the diagnosis, treatment, referral and prescription of their patients in the year 2009. A series of `what-if' analyses was conducted to see what parameters (uptake, adherence, effectiveness and the costs of the interventions) are associated with the most substantial impact on the cost-effectiveness of the health care system overall. In terms of improving the overall cost-effectiveness of the primary mental health care system, substantial benefits could be derived from increasing uptake of psycho-education by GPs for patients presenting with stress and when low cost interventions are made available that help to increase the patients' compliance with pharmaceutical interventions, particularly in patients presenting with symptoms of anxiety. In terms of intervention costs, decreasing the costs of antidepressants is expected to yield the biggest impact on the cost-effectiveness of the primary mental health care system as a whole. These "target group -- intervention" combinations are the most appealing candidates for system innovation from a cost-effectiveness point of view, but need to be carefully aligned with other considerations such as equity, acceptability, appropriateness, feasibility and strength of evidence. The study has some strengths and limitations. Cost-effectiveness analysis is performed using a health economic model that is based on registration data from a sample of GPs, but assumptions had to be made on how these data could be extrapolated to all GPs. Parameters on compliance rates were obtained from a focus group or were based on mere assumptions, while the clinical effectiveness of interventions were taken from meta-analyses or randomised trials. Effectiveness is expressed in terms of years lived with disability (YLD) averted; indirect benefits such as reduction of lost productivity or lesser pressure on informal caregivers are not taken into account. Whenever assumptions had to be made, we opted for conservative estimates that are unlikely to have resulted in an overly optimistic portrayal of the cost-effectiveness ratios. The model can be used to guide health care system innovation, by identifying those parameters where changes in the uptake, compliance, effectiveness and costs of interventions have the largest impact on the cost-effectiveness of a mental health care system overall. In this sense, the model could assist policy makers during the first stage of decision making on where to make improvements in the health care system, or assist the process of guideline development. However, the improvement candidates need to be assessed during a second-stage 'normative filter', to address considerations other than cost-effectiveness.},
  affiliation   = {Da Costakade 45, 3521 VS, Utrecht, The Netherlands,},
  document_type = {Article},
  groups        = {, Primary care setting, Simulation, Costs},
  keywords      = {rank3},
  source        = {Scopus},
  url           = {https://www2.scopus.com/inward/record.uri?eid=2-s2.0-84907412987&partnerID=40&md5=1a93e7fc3caaa5ae1affccb613abb516},
}
```

I was reading above that "groups" are not yet supported in the shared DB support. Since I'm missing it, I'm wondering whether there is an older jabref version and a MySQL version in which this functionality worked properly. Thanks for any feedback.

#1451 Comment 18:
Since groups are a very important feature, @obraliar will work on groups in this PR, too. Other than groups, the feature is ready to be investigated.

#1451 Comment 19:
@Goldfinger2007: Your BibEntry contains some characters, which invalidates the SQL query. This is going to be fixed. Thanks for the test.

#1451 Comment 20:
Conflict resolution with [Optimistic Offline Lock](http://martinfowler.com/eaaCatalog/optimisticOfflineLock.html) :+1:

After resolving the minor issues from above, I vote for merging to prevent the continuous merging conflicts.

<s>
Things to be solved after merging (Starting from Thursday, 2016-08-18):
- [ ] Database properties dialog:
  - [ ] Do not show "Save sort order" - database sorts arbitrarily :innocent: 
  - [ ] Do not show "Database protection" - makes no sense in a shared database setting
- [ ] Session restore: JabRef should open all `[shared]` tabs after startup
- [ ] Store used connections in the "open remote database dialog"
  </s>

Follow up at https://github.com/JabRef/jabref/issues/1703

#1451 Comment 21:
@obraliar Could you please answer http://discourse.jabref.org/t/new-sql-structure/197/4 ? Thanks!

--------------------------------------------------------------
#1449 Comment 1:
Thanks! 👍

#1449 Comment 2:
3 untranslated string remaining. They are hidden in the middle of the file:
Online_help=
Level=
booktitle_ends_with_'conference_on'=

There is also one in the menu file:
Online_help=

--------------------------------------------------------------
--------------------------------------------------------------
#1447 Comment 1:
LGTM

#1447 Comment 2:
Thanks for your comments :+1:

--------------------------------------------------------------
#1443 Comment 1:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1440 Comment 1:
LGTM

#1440 Comment 2:
LGTM :+1:

--------------------------------------------------------------
#1438 Comment 1:
I vote for leaving it for now and focusing on the current system instead.

We try to wait for the feedback on using JavaFX from the stupro to decide how much effort a change would be.  

#1438 Comment 2:
In my opinion there is no problem in partly switching to the new JavaFX technology. Either you embedd JavaFX elements in swing using `JFXPanel` as shown here or you port whole dialogs as shown in #1390 . Looking at the code of both pull requests it is quite easy to separate the JavaFX code from the core swing code.
I also think it looks much better than the more out dated swing ui and is much more customizable. Although I wouldn't change the style of the new elements too much for the beginning as there could be a very inconsitent look and feel against the swing components.

#1438 Comment 3:
How much work is it to get this merged into javafx? Does the current work on grouping influence this PR?

#1438 Comment 4:
Around 1-2 weeks for a working minimal version (display of the groups tree and adding/editing of groups) but a few more until all current features are included.

#1438 Comment 5:
I just close this PR as we currently focus on other issues. We will reopen as soon as we continue working on it.

#1438 Comment 6:
Any news on this? I would still be quite interested in the JavaFX rework, especially since this was supposed to provide the functionality proposed in https://github.com/JabRef/jabref/issues/1904 
The latter would be quite helpful when dealing with many (~1000) groups.

#1438 Comment 7:
We will now continue with our efforts to move on to JavaFX (there are already some dialogs implemented).

However, I don't know if and when @tobiasdiez will be able to continue on this.
#1438 Comment 8:
Thanks - hmm, I see. Do you think it would be necessary to reopen this issue (just to raise awareness)? Or is it all right the way it's now?
--------------------------------------------------------------
--------------------------------------------------------------
#1435 Comment 1:
if an field is empty, use another field to generate BibTeX key.

#1435 Comment 2:
Hi. Thank you for your willingsness to improve JabRef. The thing is, however, that I do not understand what you are trying to accomplish here. Can you please elaborate what kind of feature you are trying to add and what problem this new feature solves?

#1435 Comment 3:
Closing this issue due to inactivity :zzz: 
Please reopen the issue with additional information if the problem persists.

#1435 Comment 4:
Test cases are really required to illustrate the issue solved.

--------------------------------------------------------------
--------------------------------------------------------------
#1429 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1427 Comment 1:
LGTM :+1: 

#1427 Comment 2:
LGTM

--------------------------------------------------------------
#1426 Comment 1:
Looks good and works as expected :+1:

#1426 Comment 2:
Thanks for the review. I'll merge this in now...

--------------------------------------------------------------
#1423 Comment 1:
LGTM

Please update the 
- [x] guide for the translations 
- [x] and the contribution.md as well

#1423 Comment 2:
@simonharrer Please just do a follow up PR with more restructuring, e.g., release groups etc. I need the localization stuff to be in there now.

--------------------------------------------------------------
#1422 Comment 1:
LGTM

#1422 Comment 2:
:+1: 

--------------------------------------------------------------
#1411 Comment 1:
Looks good overall.

I guess it makes sense to move the encoding, since it is nothing specific to `BasePanel`. However, it increases method call chains in quite a few places, which get the encoding via the panel. Maybe it is worth to consider leaving the `getEncoding`, `setEncoding` methods in `BasePanel` and have them delegate to `MetaData`, so you can write `panel.getEncoding()` instead of `panel.getBibDatabaseContext().getMetaData().getEncoding()`. WDYT?

#1411 Comment 2:
Yes you are right, the call chain gets lengthly with this change. In my opinion, this is not really a "bug" but more a feature in the sense that you now see that some other methods should be changed as well. For example the `export` or `saveDatabase` method can now simply accept a BibDatabaseContext and then get the encoding themselves. Moreover, the BasePanel has absolutely no business to know about the file encoding, since it is a GUI class. Thus I would prefer not to reintroduce the shortcut methods.

#1411 Comment 3:
Compromise: add a getEncoding method to the BibDatabaseContext. 

#1411 Comment 4:
There seems to be a lot of NPE according to the travis report. When this is fixed, we can merge this in. 

--------------------------------------------------------------
#1410 Comment 1:
LGTM

#1410 Comment 2:
:+1: 

--------------------------------------------------------------
#1409 Comment 1:
I restructured variable positioning as discussed in #1408 and turn MAX_BACK_HISTORY_SIZE, LINE_LENGTH, and INDENT into proper preferences.

@JabRef/developers What about turning the `bibtex` package into a subpackage of `logic`? Or should that rather stay a top-level package?

#1409 Comment 2:
The more stuff is in the logic package, the better. 

#1409 Comment 3:
Ok, from side this is good to go. I even was able to move some more classes into the model package.

#1409 Comment 4:
LGTM

#1409 Comment 5:
LGTM, just some minor remarks.

What I do not understand is the purpose of the bibtex package. Some of the classes seem like they do not have anything to do with writing or parsing bibtex and are rather general, for example the comparators. Maybe it would make sense to completely dissolve the bibtex package by moving the parsing logic to the import package and writing to export...in the end the bibtex format is just a special import-export format.

#1409 Comment 6:
@tobiasdiez Thanks for your remarks, I will integrate them as well.

As for the bibtex package: Its existence is a historical thing and I do not know the exact motivation behind. It seems like "bundle parsing and writing of pure bibtex", but, with the addition of new importers and exporters, responsibilities shifted and mixed over time. The big advantage we have now is that the package moved to logic, which means that there is a guarantee that it is independent of GUI code and it can be re-used for new GUI stuff with relative safety. If we move it out of logic (to importers or exporters) we loose that advantage. Ultimately, the goal should be to get the GUI independent code from the import/export package into logic as well.

Out of topic: I just noticed the codecov report. How the hell did code coverage increase by a wooping 11.27% with this PR? I didn't even write new tests. This has to be an error.

#1409 Comment 7:
I implemented the above comments and the PR is once again ready to go from my side.

One remark: `COL_DEFINITION_FIELD_SEPARATOR` cannot go to `GUIGlobals`, since this would create dependencies from logic to gui. Therefore, I moved it into `COL_DEFINITION_FIELD_SEPARATOR` to `Globals`. This is fair, I think, since the variables relates to our BibTeX sytnax and field content, which is independent of the GUI.

I still don`t get how the coverage can have increased that much.

--------------------------------------------------------------
#1405 Comment 1:
Welcome to the JabRef developing community. Could you please change the name of your pull request and the commit message to English, as we are not able to speak Portuguese. 

We do not allow swing classes in the model package, hence, we cannot accept this PR in its current form. 

Why do you want to make sure that a bibtex key has to have at least the length 2 and the first character must be a letter? Do you have any source for this or is this just a personal best practice?

#1405 Comment 2:
Closing this PR due to inactivity :zzz: 
Please reopen the PR with additional information if wanted.

--------------------------------------------------------------
#1403 Comment 1:
I think this bug was already fixed in #1374.

#1403 Comment 2:
Ah ok. Then this is only a small code improvement. 

#1403 Comment 3:
Yes, of course. I missed that while merging and replaced the code without paying attantion that it was already fixed.

--------------------------------------------------------------
#1401 Comment 1:
@tobiasdiez WDYT? You changed the code before.

#1401 Comment 2:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1397 Comment 1:
You should also record your changes in the readme

#1397 Comment 2:
LGTM

#1397 Comment 3:
For somehow the travis-ci is failing because an integration test, scrollingThroughEntryList, fails.

#1397 Comment 4:
LGTM, too. Just some minor remarks for readability. 

--------------------------------------------------------------
#1393 Comment 1:
Thanks :+1: 

--------------------------------------------------------------
#1391 Comment 1:
What was changed here?

#1391 Comment 2:
LGTM

--------------------------------------------------------------
#1390 Comment 1:
UI Looks good :+1:  Just one thing you should change regarding the UI: Don't ask questions in dialogs. Because that is too much "cognitive expenditure" for the user. Label the buttons with a clear description: (e.g. Reset Keybinding, Back to Dialog).
Maybe offer a button "Restart JabRef now", if this is technically possible.

See here for a discussion on Why Questions with Yes/No are a bad idea
http://ux.stackexchange.com/questions/9946/should-i-use-yes-no-or-ok-cancel-on-my-message-box

#1390 Comment 2:
A few comments regarding the UI:
- Unify capitalization of headings (`File` vs `EDIT`), preferably via a global css property
- Better formatting of shortcuts, i.e. `Ctrl + C` instead of `ctrl C`
- Move `Default` button more to the left and rename it to something like `Reset all`
- Rename `OK` button to `Save`
- Remove light gray column separation
- Increase space between list and the buttons at the bottom (are there standards for such things? research and document them)
- The error/information dialogs look a bit bloated since they have two headings (in the dialog window header and in the first row next to the icon). If you can style these dialogs, I would prefer a flat layout without the window border (similar to https://developers.google.com/apps-script/images/style-dialogs-do.svg or https://debajitcrm.files.wordpress.com/2015/01/image_thumb7.png?w=757&h=396) or without the first row (https://i-msdn.sec.s-msft.com/dynimg/IC725781.png) 

#1390 Comment 3:
@tobiasdiez I have now adressed most of your comments. I called the default button `Reset binding` since it resets the selected binding only, except there is none selected. Also I wasn't really sure what you meant with "remove light gray column separation".
Also the issue with blank symbols in localized strings in fxml files as described in #968 still exists. For this reason you will see a '_' in the screenshots below in the `Reset binding`  button, otherwise the fxml file can't be loaded.

Here are some new screenshots

![screen shot 2016-05-25 at 16 54 19](https://cloud.githubusercontent.com/assets/15340757/15544877/984b4e2e-229a-11e6-80df-fdcbaf80aac3.png)
![screen shot 2016-05-25 at 16 53 44](https://cloud.githubusercontent.com/assets/15340757/15544905/b2a3db38-229a-11e6-85c7-e1529512ac0c.png)
![screen shot 2016-05-25 at 16 52 53](https://cloud.githubusercontent.com/assets/15340757/15544933/ceff195a-229a-11e6-9172-87be90569dfe.png)

#1390 Comment 4:
Looks pretty good! Nice job :+1:
Overall the code is also fine, just some minor refactorings needed.
The only thing I'm missing are tests, especially for KeyBindingsDialogViewModel.

For bonus points: the `KeyBindingRepository` is essentially a map between `KeyBinding` and a string representing the actual binding. In my opinion it would be better to replace the map by a list. That is `KeyBinding` contains directly `get/setActiveBinding` (besides `getDefaultBinding`) and then the repository is just a `List<KeyBindings>`.

Spaces in the language keys should work as soon as https://github.com/JabRef/jabref/pull/1426 is merged.

#1390 Comment 5:
I addressed most of the comments. Unfortunately I wasn't able to figure out how to include a icon from the webfont in the `TreeTableCell` just yet.

#1390 Comment 6:
Which Icon do you want to include? 
The icons are organized in an enum here: https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/IconTheme.java

Just search for the css code which is shown at https://materialdesignicons.com 
If the icon is not already used you have to add it to the `JabRefIcon` enum.
You can find the cheatsheet showing the needed codepoints here: https://materialdesignicons.com/cheatsheet

To actually get an `Icon` you'll have to call `getIcon()` or `getSmallIcon()` on an enum element. 
E.g., `IconTheme.JabRefIcon.NEW.getIcon()`

#1390 Comment 7:
The new changes are hard to review because many unchanged lines are marked as changed (probably line ending problems). But I really like the new Dialogs class (in particular :+1: for taking the time to write a meaningful documentation).

Regarding the icon, you just set the font via `-fx-font-family: 'MaterialDesignIcons';` and set the unicode identifier as the text, see https://github.com/JabRef/jabref/pull/1438. For some reason the icon codepoints differ from the ones used by JabRef (e.g. `IconTheme.JabRefIcon.MAKE_KEY` results in a folder icon) @matthiasgeiger do you know why?
Edit: you also need to load the font as in https://github.com/JabRef/jabref/pull/1438/files#diff-714bc6a7e9d4aca70ed8b733a7c75ed8R72

#1390 Comment 8:
No idea why the codepoints differ... 

Is it possible to directly use the .css version of the font in JavaFX?

#1390 Comment 9:
Any idea on why the icons are still not loading correctly?
![missingicons](https://cloud.githubusercontent.com/assets/15340757/15743826/74588b9c-28c8-11e6-83c1-62ab368fa200.PNG)

#1390 Comment 10:
@tobiasdiez your version of the groups panel is showing me no icons as well..
![noicons](https://cloud.githubusercontent.com/assets/15340757/15746247/0d127ef8-28d6-11e6-888d-245677c5ef27.PNG)
 After some research I found this [website](http://www.guigarage.com/2014/10/integrate-custom-fonts-javafx-application-using-css/) explaining the issue in a UPDATE note at the bottom of the thread: 

> As I learned today the shown code isn’t working in Java versions >= 1.8u60. Starting with this version the attribute “font-family” is ignored and you have to use the real name of the TTF.

So I changed the attribute `-fx-font-family` to `-fx-font-family: 'Material Design Icons';` and with the spaces in the name it works on Java 1.8.0_91 and windows 7 64bit.
The question is whether `-fx-font-family: 'Material Design Icons';` also works on Java versions prior to 1.8.0_60. If not this would mean a JavaFX version of JabRef automatically requires Java 1.8.0_60 or above. Or if we use `-fx-font-family: 'MaterialDesignIcons';` then JabRef users running on Java versions above 1.8.0_60 won't see the icons.
This is also relevant when considering #1438 

#1390 Comment 11:
For me (java 1.8.0_91, Win10) both versions display icons. However, only for `'Material Design Icons'` the codepoints are correct. So use the version with spaces. 

#1390 Comment 12:
Good work!
I just have a few remarks about the general usage of view models and databinding.

The idea of this ViewModels is the following:
- Expose fields (as properties) so that the view can easily bind to them (but only expose things you really need in the view)
- Listen to changes to the underlying data and update accordingly. These changes are then propagated to the view via the binding.
- Expose methods which modify the underlying data, the view never calls the logic methods themselves.
- In the best case scenario, **you never access the view or its controls directly but for setting up the binding (so only in initialize()).**

So in your case you have two ViewModels:
For the whole dialog:
- Expose bindingsTree and selectedItem
- Listen to external changes (which is setKeyBindingsRepository) and update bindingsTree then.
- Expose methods for resetting all keys, save changes, closing the dialog and relaying key pressed events to the selected item

For the item in the table: (KeyBindingViewModel)
- Expose displayName and binding
- No need to listen for changes since keybindings cannot be modified except in this dialog
- Expose methods for changing the keybinding

The reason for this "binding over everything else" philosophy is that you can easily write tests. For example:

``` java
KeyBindingDialogViewModel dialog = new blabla();
dialog.setRepository(some mocked rep);
AssertEqual(expectedTree, dialog.bindingsTree);
% If this test passes then you know that the correct things are displayed in the dialog (except if you forgot to bind the vew to `bindingsTree`)

KeyBindingDialogViewModel dialog = new blabla();
dialog.setRepository(some mocked rep);
AssertCalls(mockedRep.resetBindinings(), dialog.resetBinding());
AssertEquals(defaultTree, dialog.bindingsTree);
% Check that the dialog relays the click to the correct method and updates view (only thing that can fail is again that the binding of the buttonclick is not bound to  dialog.resetBinding()

KeyBindingDialogViewModel dialog = new blabla();
dialog.setRepository(some mocked rep);
dialog.selectedIBinding = some mocked binding view model
AssertCalls(mockedBinding.setNewBinding, dialog.keyPressed(event))

KeyBindingViewModel binding = new blabla();
AssertCalls(repository.change(), binding.setNewBinding(event))
AssertEquals("Ctrl + Alt + f4", binding.KeyBinding);
```

Can you please try to add these tests?

#1390 Comment 13:
I added some tests for the dialog view model

#1390 Comment 14:
Nice! I only have some minor remarks about the naming of the tests and their general structure (only one assert per test). If these small issues are fixed, this PR can be merged from my point of view!

#1390 Comment 15:
I refactored the test class.
Also I changed the FXDialogs to always show blocking dialogs and changed the way to create camel case bind names as there was a problem with the import of WordUtils.

#1390 Comment 16:
Ok, ready to go from my point of view! @JabRef/developers what do you think?

#1390 Comment 17:
Please rebase and remove the `BibTeX` localization key. Then I'll merge this in. (except if @JabRef/developers has more remarks)

#1390 Comment 18:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1390?src=pr) is **28.64%**

> Merging [#1390](https://codecov.io/gh/JabRef/jabref/pull/1390?src=pr) into [javafx](https://codecov.io/gh/JabRef/jabref/branch/javafx?src=pr) will increase coverage by **17.84%**

``` diff
@@             javafx      #1390   diff @@
==========================================
  Files           703        704      +1   
  Lines         46304      46395     +91   
  Methods           0          0           
  Messages          0          0           
  Branches       7634       7636      +2   
==========================================
+ Hits           5000      13288   +8288   
+ Misses        40857      31976   -8881   
- Partials        447       1131    +684   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e22433f...15c7522](https://codecov.io/gh/JabRef/jabref/compare/e22433fa7f388fb42642299c00e6ba0b95bcdc8b...15c75224c644f566a2070d2f7294c7551ef23601)

#1390 Comment 19:
@tobiasdiez The BibTeX localization key is used in the `KeyBindingCategory` class.

#1390 Comment 20:
I found out travis ci uses different import orders for javafx than what is specified in eclipse.settings. I quickly changed it in #1518 so using "organize imports" in eclipse will work for javafx.

#1390 Comment 21:
Please be aware that menu translations are done using `Localization.menuTitle` and not by `Localization.lang`. See cb3729628cff8daba86546abea52fc4c9f46863d.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1387 Comment 1:
oh - there is already #1384 in the pipeline which fixes this :grimacing: 

#1387 Comment 2:
Oh damn, I found it a few days ago but didn't had time to fix it until today.
I'll close mine, his looks far more sophisticated.

--------------------------------------------------------------
#1386 Comment 1:
Why would they loose their group membership if they get deleted? Is this really required? @tobiasdiez what do you think as our group expert? :)

#1386 Comment 2:
I can confirm the issue. The problem seems to be connected to the functionality "Automatically assign new entry to selected group", although disabling this option doesn't solve it. 
If the user undos the deletion of an entry, then apparently it is treated as a new entry and added to the currently selected group.
Note that the problem also occurs with dynamic groups so that the proposed fix in this PR does not really solve the issue. I would prefer a fix which really addresses the problem at its root, i.e. how undos are treated.

#1386 Comment 3:
I added an undo-flag to the `EntryAddedEvent` and told the `GroupListener` to don't add the entry to the current marked group if the flag is set.

#1386 Comment 4:
What is status here? Is the solution of @bartsch-dev acceptable to you @tobiasdiez ?

#1386 Comment 5:
Yeah, it is probably the best way to solve the problem. Good work :+1: 

--------------------------------------------------------------
#1385 Comment 1:
We should think about the effects on performance here. I really do like the stay in sync feature, but how much does this slow the UI down? If I have 300 groups and 6000 entries which are evaluated after each change in any field, it could really go down performance wise. 

#1385 Comment 2:
Yes you are right, there might be performance issues. For my database with 500 entries and a handful of groups this wasn't a problem. Do you have a db with more entries and groups so that I can test the performance?

#1385 Comment 3:
Amazing that you fixed so much issues :+1: !

#1385 Comment 4:
Can you please evaluate on the remark of Simon and then rebase so we can merge this in for v3.4 :smile: ?

#1385 Comment 5:
There are some performance related issues, however they are not really intrinsic to this PR. The problem is that some database open post actions modify every entry and thus trigger many repaints of the group tree. I will address this in a new PR.

#1385 Comment 6:
Think about the save actions as well - they also trigger a lot of entry changes. Hence, to me, it is still an issue of the group tree. Maybe only update the tree if no change happened for 500ms?

--------------------------------------------------------------
#1384 Comment 1:
LGTM

--------------------------------------------------------------
#1383 Comment 1:
Please also add a screenshot for these new javafx dialogs. 
Moreover, it would be nice if you could address the issues https://github.com/JabRef/jabref/issues/882, https://github.com/JabRef/jabref/issues/872 (I think, this is already covered with this PR...in this case please add a changelog entry) and https://github.com/JabRef/jabref/issues/819, which are all connected to the error console. 

#1383 Comment 2:
Please adress the Language-key related errors, The first build failed because there were still some obsolete keys...

#1383 Comment 3:
@tobiasdiez @Siedlerchr slowly, slowly... let the students check this PR first and wait until it is labeled with "ready-for-review" :wink:

#1383 Comment 4:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1383?src=pr) is 28.39% (diff: 10.52%)

> Merging [#1383](https://codecov.io/gh/JabRef/jabref/pull/1383?src=pr) into [javafx](https://codecov.io/gh/JabRef/jabref/branch/javafx?src=pr) will increase coverage by **17.61%**

``` diff
@@             javafx      #1383   diff @@
==========================================
  Files           705        705           
  Lines         46412      46332     -80   
  Methods           0          0           
  Messages          0          0           
  Branches       7637       7639      +2   
==========================================
+ Hits           5002      13154   +8152   
+ Misses        40963      32053   -8910   
- Partials        447       1125    +678   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [bc6f0c9...9e9bbc2](https://codecov.io/gh/JabRef/jabref/compare/bc6f0c929ebc9730064e884c619805c94d0db1f9...9e9bbc213dafb36d06dc2c0bf0e5ea3fd86243b1?src=pr)

#1383 Comment 5:
I am having trouble to hide the developer information. The css file probably needs some changes, I tried to set the visibilty but that didn't work out. @tobiasdiez Do you have some tips to handle this? 

#1383 Comment 6:
Sorry for my later answer. Normally you do this by using a PseudoClass `inactive` and change it with `pseudoClassStateChanged`, see for example https://github.com/JabRef/jabref/pull/1438/files#diff-9a2c5dd139caeeb5e3e3eebb9adb24b3R92. Then you can style them via `.list-cell:active` and `.list-cell:inactive`.

I would however only use the PseudoClasses for real styling purposes, for example `.list-cell:error` shows an error icon and sets the font color to red. Filtering should really happen on the basis of the viewmodel to which the listview binds (as you have done it right now).

For debugging UI issues, the tool Scenic View is very helpful (http://fxexperience.com/scenic-view/). I had some problems with running it separately and bind it to JabRef. However, adding it to the dependencies (Project Structure -> Modules -> Dependencies -> Add) and then invoke `ScenicView.show(scene);` somewhere works.

#1383 Comment 7:
@tobiasdiez 
I have created FilterList to filter messages. But I have one problem to view correctly entries in Listview (have a look at my Screenshot). It only runs correctly if entries run out of the Listview. I have created a Test Button to test this behavior. This Test Button generates 1 entry in System.out, throws 1 exception and generates 1 entry in the Cache. This will be removed later.
Can you help me and tell me, why Listview doesn't displays the entry correctly?

![notcorrectview](https://cloud.githubusercontent.com/assets/13031192/16559695/e877d2d2-41ee-11e6-831e-47dfbef4af97.PNG)

#1383 Comment 8:
Sorry but I don't understand where your problem is. It looks like it prints the Test Cache message as well as the (first line of) the error stack trace. The system.out is ignored as I would have expected since you hide low priority messages. 

#1383 Comment 9:
Hi @tobiasdiez ,
So i will explain you, what is my problem.
- The ListView shoulds show you all log entries and other entries like system.out and exception, if the button "Development Information" disable.
- If the button on click, it shoulds hide all system.out and exception entries.
  I have handle this will a filterlist. But the behavior by showing of entries is not correct.
- Reproduct:
  - Start error console
  - Click on "Test" Button (1 time or more times)
  - Click on  "Development Information" Button
  - Click on this again
    If you do so like i have written, then you will understand my problem.
    Sorry about my bad english. I hope that you understand what I mean. I need you help or some tipp how i can clear this problem :-)

Thx you

#1383 Comment 10:
Thanks for the additional description. I added a comment to ErrorConsoleViewModel which should help you to solve the problem. 

For the next time, please try to add some tests first. There were quite a few things which could have been wrong:
- Are the messages correctly passed to the T-Stream?
- Do they have the correct priority?
- Is filtering of the list working properly? 
- And finally: is is just a problem with the way how messages are displayed in the list view.

The first 3 options could have been ruled out by automatic tests. It would be good if you could add corresponding tests (which also require some positve refactoring, like making `filteredList` a (public) class variable and moving its initialization to the constructor).

#1383 Comment 11:
There are three solution for this problem with create issue function:
- **Solution 1:** Using of a GitHub API to create issue directly from JabRef with log in data, which user not like to do it. But I think, that way will be nice solution and GitHub will get more member (take a look in create issue dialog screenshot).
  From customer: it will be nice this solution with a default account, but it will be not work.

![create issue with github api](https://cloud.githubusercontent.com/assets/13031192/17296487/cece12a0-5801-11e6-97d0-9b81c05e65ee.PNG)
- **Solution 2:** Using OAuth2 to create issue directly from JabRef without log in data, but the user must give the application access in their account to use it, That will be difficult for some user.
- **Solution 3 (This is my actual implement solution):** Create issue over default browser with help of saved log and exception information in clipboard.  (take a look in create issue pop up screenshot).

![create issue with default browser](https://cloud.githubusercontent.com/assets/13031192/17297508/4aabf744-5806-11e6-92b4-43193a6257b1.PNG)

After close or click on OK Button. The default browser will open and show create issue site with default title (automatic bug report-"current time with this format yyyyMMddHHmmss") and a default issue description (JabRef version, operating system version, Java version). During the show of this create issue site, the log and exception information will be saved in clipboard. So the user can be paste it for detail information in issue description. (take a look in create issue in default browser with paste detail information screenshot)

![new issue](https://cloud.githubusercontent.com/assets/13031192/17297662/f1a18bf4-5806-11e6-8fc7-0a08455eb788.PNG)

#1383 Comment 12:
Which one did you implement?

#1383 Comment 13:
I really like the copied-to-clipboard-solution. Its simple yet effective. 

#1383 Comment 14:
Can you please post a new screenshot of the actual look?
Edit// and could you please test the look on HIDPI screens,too?

#1383 Comment 15:
This is the new look of error console dialog:

![errorconsoledialog](https://cloud.githubusercontent.com/assets/13031192/17666726/e6bc1ad2-6301-11e6-9000-d6364a97b2be.PNG)

with button "Developer information" it will show you the exceptions and outputs, if it is exist.
You can copy the log and create issue directly from errorconsole. :-)

EDIT: I have test it on display with 1920 x 1080. I think, that it is all okay ;-)

#1383 Comment 16:
Please fix this bug:
- When you activate the "developer information" button and then click "Copy Log" the exceptions will get hidden even though the "developer information" toggle button is still active.
- Pressing the "developer information" button twice will show the exceptions again.

#1383 Comment 17:
Please update your screenshots.

#1383 Comment 18:
Please fix bug:
- Open the developer information console
- Click show "Developer information" toggle button to show exceptions
- Click "Ok" button
- Open the developer information console
  "Developer information" toggle button is now deactivated again but the list view still shows the exception and the colour of the exception is black instead of red.

#1383 Comment 19:
Any idea for a better icon? As pointed out in #1742 there is much more information than just errors here. It might even be better to skip the icon. (What about the information icon?)

#1383 Comment 20:
Some suggestions:
- I would use the [Console image](https://mdn.mozillademos.org/files/5597/web-console-commandline-highlighted.png) instead of the red error symbol. Also move it above the list and add some description left to it. In spirit "we now give you an insight into the inner workings of JabRef's brain. This might help to diagonize the root of problems. Please use the button below to inform the developers about an issue.
- Rename "create issue" to "report issue". Move "copy log" button to the left to group it with the other buttons there. Rename "ok" to "close".
- Do we really need a way to hide errors and warnings? I think every log entry should be shown to the user (i.e. no "developer information button"). I know, you spent a lot of time to implement it but I just don't see any advantages in having such a button.
- Add a small non-obtrusive icon in front of every line which indicates if it is an error / warning / info. Similar to https://mdn.mozillademos.org/files/5597/web-console-commandline-highlighted.png.

#1383 Comment 21:
Some minor remarks and a bigger one with the icons, once they are fixed I'm fine with this.
All in all I really like how the console looks now. Good job 👍 

#1383 Comment 22:
@tobiasdiez: I have merged and done feedback

#1383 Comment 23:
Thanks for the update. The code looks better now. I have just a few more remarks, then this can be merged. @koppor pls do the final review

#1383 Comment 24:
@tobiasdiez @koppor: feedbacks are done. Only this teestream thing, i am not sure how to fix it 😄 

#1383 Comment 25:
Maybe someone else from @JabRef/stupro can help. @bartsch-dev maybe? It's a kind of architectural decision.

#1383 Comment 26:
Try to use StreamEavesdropper instead of TeeStream

#1383 Comment 27:
@tobiasdiez Is this what you meant with moving the code to the streamEavesdropper?

#1383 Comment 28:
Yes this looks better.
So now I had a look at the code. If I understand it correctly, then there already exist two ways of listen to logger messages:
- GuiAppender: listens to everything which goes through the Log4j API (i.e. `LOGGER.log(...)`) and writes it to Cache
- StreamEavesdropper: listens to everything which goes through the System streams (`System.out/err`) and writes it to some streams

And you added:
- LogMessages: listens to everything and writes it some some internal list

Could you refactor the code so that everything is only written ̀to the internal list of  `LogMessages`, i.e. get rid of the Cache class and the printstreams in `StreamEavesdropper`. (And please add code comments to the classes, it was hard to understand what they actually do)

Appendum for myself:
Since there is essentially no code which still uses `System.out/err.printLn`, I would actually try to get rid of the `StreamEavesdropper` completely. Only problem: uncaught exceptions are not written via the Log4j interface. But this could be solved by setting the [default handler](http://stackoverflow.com/a/2344830/873661).

#1383 Comment 29:
@tobiasdiez I have refactored and have done feedback. Hope it will be merged this time 😄 

--------------------------------------------------------------
--------------------------------------------------------------
#1380 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1380?src=pr) is **28.46%**

> Merging [#1380](https://codecov.io/gh/JabRef/jabref/pull/1380?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-<.01%**

``` diff
@@             master      #1380   diff @@
==========================================
  Files           700        700          
  Lines         46230      46230          
  Methods           0          0          
  Messages          0          0          
  Branches       7632       7632          
==========================================
- Hits          13159      13158     -1   
- Misses        31947      31948     +1   
  Partials       1124       1124          
```
1. File `...eListenerServer.java` (not in diff) was modified. [more](https://codecov.io/gh/JabRef/jabref/commit/edc699d3edcaaaa362edaf441f856e7e1b26e285/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F72656D6F74652F7365727665722F52656D6F74654C697374656E65725365727665722E6A617661) 
   - Misses `+1` 
   - Partials `0` 
   - Hits `-1`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [537f495...edc699d](https://codecov.io/gh/JabRef/jabref/compare/537f495b7be13a5b73eb383d36863f8d711978b3...edc699d3edcaaaa362edaf441f856e7e1b26e285)

--------------------------------------------------------------
--------------------------------------------------------------
#1378 Comment 1:
It depends on what you want to achieve, displaying the content of a webpage or giving the user access to a fully functioning web browser inside JabRef. Also note that javascipt, possibly java and even flash are also activated inside the `WebView` component. Also my JRE crashed once when naviagting through a pages with a lot of javascript. - So I don't know how reliable the component is.
![screen shot 2016-05-11 at 12 27 33](https://cloud.githubusercontent.com/assets/15340757/15178624/eb3ef6fa-1776-11e6-97a0-0920380bbc8b.png)
If you want the user to be able to navigate but only on the given website you can add a `listener` to the `locationProperty()` of the engine of the `WebView` component and filter which websites should be loaded. Same goes if the user shouldn't be able to navigate on JavaFX.
If you only want to display the website with its correct html and css appearance on SWING I would prefer using the `javax.swing.JEditorPane` and use the methode `setPage(<aURLObject>)`.
Otherwise the JFXPanel is exactly the component you need to use for adding JavaFX components into SWING components.

#1378 Comment 2:
Thanks @boceckts for the review and the helpful comments. 
The swing component does not work since for some reason it is not able to render the embedded MathJax equations.

@JabRef/developers ready to be merged?

#1378 Comment 3:
LGTM

But fix l10n issues first.

--------------------------------------------------------------
--------------------------------------------------------------
#1376 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1376?src=pr) is **28.47%**

> Merging [#1376](https://codecov.io/gh/JabRef/jabref/pull/1376?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-12.06%**

``` diff
@@             master      #1376   diff @@
==========================================
  Files           700        700           
  Lines         46229      46232      +3   
  Methods           0          0           
  Messages          0          0           
  Branches       7631       7633      +2   
==========================================
- Hits          18734      13160   -5574   
- Misses        27495      31948   +4453   
- Partials          0       1124   +1124   
```
1. 2 files (not in diff) in `.../jabref/sql/importer` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C2F696D706F72746572) 
   - Misses `+15` 
   - Partials `+14` 
   - Hits `-29`
2. 2 files (not in diff) in `.../jabref/sql/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C2F6461746162617365) 
   - Partials `+2` 
   - Hits `-2`
3. 6 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C) 
   - Misses `+35` 
   - Partials `+18` 
   - Hits `-53`
4. 12 files (not in diff) in `...jabref/specialfields` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F7370656369616C6669656C6473) 
   - Misses `+26` 
   - Partials `+9` 
   - Hits `-35`
5. 3 files (not in diff) in `.../sf/jabref/pdfimport` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F706466696D706F7274) 
   - Misses `+26` 
   - Hits `-26`
6. 9 files (not in diff) in `...f/jabref/model/entry` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F656E747279) 
   - Misses `+3` 
   - Partials `+47` 
   - Hits `-50`
7. 4 files (not in diff) in `...abref/model/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F6461746162617365) 
   - Misses `+17` 
   - Partials `+14` 
   - Hits `-31`
8. 2 files (not in diff) in `.../net/sf/jabref/model` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C) 
   - Misses `+3` 
   - Partials `+10` 
   - Hits `-13`
9. 2 files (not in diff) in `...sf/jabref/migrations` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6967726174696F6E73) 
   - Misses `+36` 
   - Hits `-36`
10. 2 files (not in diff) in `.../sf/jabref/logic/xmp` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e37db3b2f5920a91993ae8d2ed2fafb3833925eb/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F786D70) 
    - Misses `+8` 
    - Partials `+47` 
    - Hits `-55`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5e257cc...e37db3b](https://codecov.io/gh/JabRef/jabref/compare/5e257cc3e19667877f559100fca921de12a580a5...e37db3b2f5920a91993ae8d2ed2fafb3833925eb)

--------------------------------------------------------------
#1375 Comment 1:
Build fails due to unused imports

#1375 Comment 2:
Fixed.

--------------------------------------------------------------
--------------------------------------------------------------
#1373 Comment 1:
LGTM

Please add a changelog with the recommendation that save actions with the name of the appropriate save action should be used. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1367 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1367?src=pr) is **40.51%**

> Merging [#1367](https://codecov.io/gh/JabRef/jabref/pull/1367?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+12.07%**

``` diff
@@             master      #1367   diff @@
==========================================
  Files           699        699           
  Lines         46204      46227     +23   
  Methods           0          0           
  Messages          0          0           
  Branches       7627       7633      +6   
==========================================
+ Hits          13140      18727   +5587   
+ Misses        31940      27500   -4440   
+ Partials       1124          0   -1124   
```
1. 2 files (not in diff) in `.../jabref/sql/importer` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C2F696D706F72746572) 
   - Misses `-15` 
   - Partials `-14` 
   - Hits `+29`
2. 2 files (not in diff) in `.../jabref/sql/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C2F6461746162617365) 
   - Partials `-2` 
   - Hits `+2`
3. 6 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C) 
   - Misses `-35` 
   - Partials `-18` 
   - Hits `+53`
4. 12 files (not in diff) in `...jabref/specialfields` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F7370656369616C6669656C6473) 
   - Misses `-26` 
   - Partials `-9` 
   - Hits `+35`
5. 3 files (not in diff) in `.../sf/jabref/pdfimport` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F706466696D706F7274) 
   - Misses `-26` 
   - Hits `+26`
6. 9 files (not in diff) in `...f/jabref/model/entry` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F656E747279) 
   - Misses `-3` 
   - Partials `-47` 
   - Hits `+50`
7. 4 files (not in diff) in `...abref/model/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F6461746162617365) 
   - Misses `-17` 
   - Partials `-14` 
   - Hits `+31`
8. 2 files (not in diff) in `.../net/sf/jabref/model` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C) 
   - Misses `-3` 
   - Partials `-10` 
   - Hits `+13`
9. 2 files (not in diff) in `...sf/jabref/migrations` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6967726174696F6E73) 
   - Misses `-36` 
   - Hits `+36`
10. 2 files (not in diff) in `.../sf/jabref/logic/xmp` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ac69b5fe319a6435589f6ef9cdcafe0ef38d4522/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F786D70) 
    - Misses `-8` 
    - Partials `-47` 
    - Hits `+55`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [34fbe76...ac69b5f](https://codecov.io/gh/JabRef/jabref/compare/34fbe7681dec9d102392eccd0ed2e59139e69ad8...ac69b5fe319a6435589f6ef9cdcafe0ef38d4522)

--------------------------------------------------------------
#1361 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1361?src=pr) is **28.41%**

> Merging [#1361](https://codecov.io/gh/JabRef/jabref/pull/1361?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will not change coverage

``` diff
@@             master      #1361   diff @@
==========================================
  Files           695        695          
  Lines         46266      46266          
  Methods           0          0          
  Messages          0          0          
  Branches       7646       7646          
==========================================
  Hits          13144      13144          
  Misses        31992      31992          
  Partials       1130       1130          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [3817a44...cbea612](https://codecov.io/gh/JabRef/jabref/compare/3817a44e02104c607021d7f28b3f92e223e3692d...cbea6124f9fe8828d6fc6269cda986dc9c4c0f85)

#1361 Comment 2:
I created an `abstract class AbstractUITest` since the Undo test ( #1380 ) and the entry table test were using the same functionality. The scrolling though entry table test should now also work on windows os. @tschechlovdev  can you confirm that?

#1361 Comment 3:
should work now on windows :+1: 
can you please squash the commits, so that it is easier for others to review this PR?

#1361 Comment 4:
Is there any feedback on this Pull-Request?

--------------------------------------------------------------
--------------------------------------------------------------
#1358 Comment 1:
I noticed that, while starting JabRef with no opened databases.

#1358 Comment 2:
LGTM :+1:

#1358 Comment 3:
This refs #463.

#1358 Comment 4:
Does it fix #463 completely?

--------------------------------------------------------------
#1355 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1355?src=pr) is **27.56%**

> Merging [#1355](https://codecov.io/gh/JabRef/jabref/pull/1355?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1355   diff @@
==========================================
  Files           695        695          
  Lines         46296      46294     -2   
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7650          
==========================================
  Hits          12759      12759          
+ Misses        32437      32435     -2   
  Partials       1100       1100          
```
1. 2 files (not in diff) in `...va/net/sf/jabref/gui` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/08c87479978059d5ab487326d07f25af6d111c12/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F677569) 
   - Misses `-2`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [f968736...08c8747](https://codecov.io/gh/JabRef/jabref/compare/f9687367e8b9fe67c02ec59169581430e5d87067...08c87479978059d5ab487326d07f25af6d111c12)

#1355 Comment 2:
ATM the crossRef Test is failing, I get a timeout. Otherwise this build is fine.

#1355 Comment 3:
LGTM

Please address my comment, then this can be rebased and merged.

#1355 Comment 4:
Gradle test execution fails on travis (Code 137 -> Travis issued a SIGKILL) . Seems to be a memory/resource  related problem:
https://github.com/travis-ci/travis-ci/issues/2882

#1355 Comment 5:
Can be merged. 

--------------------------------------------------------------
--------------------------------------------------------------
#1350 Comment 1:
I suggest merging this. For the discussion on a validity checker for ooStyle I will create a new Issue.

--------------------------------------------------------------
#1349 Comment 1:
Tested it. Works, but requires for Urls a http:// to be present.
a simple `www.google.de` does not work. But it also does not work with `explorer "www.google.de"` from the start menu. So I assume this is some windows behaviour.

It would be nice to have a cleanup for this then or maybe we should automatically do this.

--------------------------------------------------------------
#1348 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1348?src=pr) is **27.56%**

> Merging [#1348](https://codecov.io/gh/JabRef/jabref/pull/1348?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will not change coverage

``` diff
@@             master      #1348   diff @@
==========================================
  Files           695        695          
  Lines         46294      46294          
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7650          
==========================================
  Hits          12759      12759          
  Misses        32435      32435          
  Partials       1100       1100          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [abb1f56...0a3012a](https://codecov.io/gh/JabRef/jabref/compare/abb1f56b4d592ba834619188d9c5725956cfc726...0a3012aa48487ba5eba0786104bc2bdad0ab71c0)

#1348 Comment 2:
LGTM

--------------------------------------------------------------
#1346 Comment 1:
Go for it! :+1: 

--------------------------------------------------------------
#1344 Comment 1:
Would it make sense to use this for the other menu as well, which can be used from within the right-click menu? Or is this not an issue there?

#1344 Comment 2:
the right-click menu works as intended - nevertheless this PR also adds the Level 0 - Level 5 notion there

#1344 Comment 3:
LGTM

#1344 Comment 4:
Can you please quickly rebase this, then I'll merge this in.

#1344 Comment 5:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1344?src=pr) is **27.56%**

> Merging [#1344](https://codecov.io/gh/JabRef/jabref/pull/1344?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-0.87%**

``` diff
@@             master      #1344   diff @@
==========================================
  Files           699        695     -4   
  Lines         46227      46294    +67   
  Methods           0          0          
  Messages          0          0          
  Branches       7633       7650    +17   
==========================================
- Hits          13145      12759   -386   
- Misses        31954      32435   +481   
+ Partials       1128       1100    -28   
```
1. 5 files (not in diff) in `.../net/sf/jabref/event` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6576656E74)
2. 2 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C) 
   - Misses `+1`
3. 3 files (not in diff) in `...jabref/specialfields` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F7370656369616C6669656C6473) 
   - Misses `+1`
4. 2 files (not in diff) in `...f/jabref/model/entry` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F656E747279) 
   - Misses `+9` 
   - Partials `+1` 
   - Hits `+8`
5. 2 files (not in diff) in `...abref/model/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F6461746162617365) 
   - Misses `+3` 
   - Partials `+1` 
   - Hits `-1`
6. 2 files (not in diff) in `...sf/jabref/logic/util` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F7574696C) 
   - Misses `+16` 
   - Partials `-4` 
   - Hits `-12`
7. 2 files (not in diff) in `...f/jabref/logic/msbib` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F6D73626962) 
   - Misses `+345` 
   - Partials `-14` 
   - Hits `-302`
8. 4 files (not in diff) in `...jabref/logic/cleanup` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F636C65616E7570) 
   - Misses `-1` 
   - Hits `-4`
9. 5 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `+24` 
   - Hits `-24`
10. 3 files (not in diff) in `...t/sf/jabref/importer` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/264e61ff13ed5768b36641b4eebc4238d99e3c33/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F696D706F72746572) 
    - Misses `+5` 
    - Hits `+1`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [dd96a7b...264e61f](https://codecov.io/gh/JabRef/jabref/compare/dd96a7ba6bc5f99d247d9a3f31e6fd13e98fa44b...264e61ff13ed5768b36641b4eebc4238d99e3c33)

#1344 Comment 6:
done

#1344 Comment 7:
Merci :smile: 

--------------------------------------------------------------
#1343 Comment 1:
i squashed the commits and opened a new PR #1344 

#1343 Comment 2:
Why not a `git push -f` on your `OSXbackgroundColor` branch?

#1343 Comment 3:
I've already seen way to many problem with git push -f, so I try to avoid it.

--------------------------------------------------------------
#1336 Comment 1:
Good idea to refactor the file dialogs :+1:. Just one small comment so far: could you please make the methods non-static (and probably move the passed frame to the constructor). In this way the code becomes more testable because the file dialog can be mocked away.

#1336 Comment 2:
@tobiasdiez  Yes, I already came up with a solution for this. I will probably use some kind of FactorPattern to create the dialogs. That reduces the number of constructors/method overloads.

#1336 Comment 3:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1336?src=pr) is **27.54%**

> Merging [#1336](https://codecov.io/gh/JabRef/jabref/pull/1336?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1336   diff @@
==========================================
  Files           694        696     +2   
  Lines         46262      46335    +73   
  Methods           0          0          
  Messages          0          0          
  Branches       7649       7655     +6   
==========================================
+ Hits          12733      12759    +26   
- Misses        32432      32476    +44   
- Partials       1097       1100     +3   
```
1. 2 files (not in diff) in `...va/net/sf/jabref/gui` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/5371fd432d2d250943be418839a3f95965609ce5/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F677569) 
   - Misses `-2` 
   - Partials `+3` 
   - Hits `+22`
2. 1 files (not in diff) in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/5371fd432d2d250943be418839a3f95965609ce5/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Hits `+4`
3. File `...ClipboardAction.java` (not in diff) was created. [more](https://codecov.io/gh/JabRef/jabref/commit/5371fd432d2d250943be418839a3f95965609ce5/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F616374696F6E732F436F707956657273696F6E546F436C6970626F617264416374696F6E2E6A617661)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [71eca69...5371fd4](https://codecov.io/gh/JabRef/jabref/compare/71eca696817ab9d4099937e52db627562e851934...5371fd432d2d250943be418839a3f95965609ce5)

#1336 Comment 4:
What is the status here? I'd love to see these changes inside JabRef 3.5!

#1336 Comment 5:
Unfortunately I have not that much time atm. But I will try to see how far I get the next days. Mabye at the weekend I can get some time for it. Atm another project ist due on sunday...;)

#1336 Comment 6:
Got some time working on it.

#1336 Comment 7:
Ready for review.

#1336 Comment 8:
I really like the new FileDialog class and its fluent interface. The code needs some cleanup in general (remove commented-out code and debug prints, no abbreviations, ...) and then I think it is good to go.

#1336 Comment 9:
Adressed comments. @tobiasdiez  Not sure if I understand you right on how I should handle the WorkingDir-Prefs-stuff.
To me it does not make sense to pass the Working dir to the constructor from an external call. It would create unnecessary dependencies to the prefs.  Or what was your idea?

#1336 Comment 10:
@oscargus  Could you please have a look why the `cleanupCasesAddsBracketAroundAluminiumGalliumArsenid` test is failing?
Locally all is okay for me. I have no idea what it could cause on Travis.  And I didn't touch any of the cleanup code in this PR . :confused: 

--------------------------------------------------------------
#1335 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1335?src=pr) is **27.57%**

> Merging [#1335](https://codecov.io/gh/JabRef/jabref/pull/1335?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1335   diff @@
==========================================
  Files           694        694          
  Lines         46262      46259     -3   
  Methods           0          0          
  Messages          0          0          
  Branches       7649       7650     +1   
==========================================
+ Hits          12733      12755    +22   
+ Misses        32432      32404    -28   
- Partials       1097       1100     +3   
```
1. File `...es/MergeEntries.java` was modified. [more](https://codecov.io/gh/JabRef/jabref/commit/e1ff632743977c798da9938f02b30a826d22fb6a/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F6D65726765656E74726965732F4D65726765456E74726965732E6A617661) 
   - Misses `-6` 
   - Partials `0` 
   - Hits `+6`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [71eca69...e1ff632](https://codecov.io/gh/JabRef/jabref/compare/71eca696817ab9d4099937e52db627562e851934...e1ff632743977c798da9938f02b30a826d22fb6a)

#1335 Comment 2:
Although this is not common to MS Word users, it looks more readable. Could you remove the underline property and check if that looks better? - underline is the MS Word thing...

:+1: for the test cases. I would have used package-private, but I think, we discussed that and voted for `public` instead of using no visibility modifier.

LGTM. Migrations from `CHANGE_ADDITION_STYLE` and `CHANGE_REMOVAL_STYLE` to `CHANGE_STYLE` are not needed -> users simply have to click their preferred style again.

#1335 Comment 3:
Without the underline some changes (especially small one character changes) are hard to spot.

#1335 Comment 4:
Then it's OK for me. :smiley: 

#1335 Comment 5:
LGTM

--------------------------------------------------------------
#1330 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1330?src=pr) is **27.52%**

> Merging [#1330](https://codecov.io/gh/JabRef/jabref/pull/1330?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will not change coverage

``` diff
@@             master      #1330   diff @@
==========================================
  Files           694        694          
  Lines         46362      46362          
  Methods           0          0          
  Messages          0          0          
  Branches       7676       7676          
==========================================
  Hits          12759      12759          
  Misses        32498      32498          
  Partials       1105       1105          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [694840a...ce37f3d](https://codecov.io/gh/JabRef/jabref/compare/694840ab020bcef1227c8b2543d57f9c8a9e74bf...ce37f3d669b252399046db1850dea21866cc7944)

--------------------------------------------------------------
--------------------------------------------------------------
#1328 Comment 1:
Thank you for your contribution :smile: !

#1328 Comment 2:
Sure thing. It is the least I can do :).

On Saturday, April 30, 2016 9:33:04 AM CDT Stefan Kolb wrote:

> Thank you for your contribution :smile: !
> 
> ---
> 
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/JabRef/jabref/pull/1328#issuecomment-215977269

--------------------------------------------------------------
--------------------------------------------------------------
#1325 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1325?src=pr) is **27.55%**

> Merging [#1325](https://codecov.io/gh/JabRef/jabref/pull/1325?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1325   diff @@
==========================================
  Files           695        696     +1   
  Lines         46383      46406    +23   
  Methods           0          0          
  Messages          0          0          
  Branches       7677       7684     +7   
==========================================
+ Hits          12760      12783    +23   
  Misses        32519      32519          
  Partials       1104       1104          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [2575753...6f9574c](https://codecov.io/gh/JabRef/jabref/compare/2575753fc3acbd116e81b8ac5f75905564e269bf...6f9574c5f293647c999cb6bb8bebca66a621e053)

#1325 Comment 2:
LGTM :+1:

--------------------------------------------------------------
#1319 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1319?src=pr) is **27.51%**

> Merging [#1319](https://codecov.io/gh/JabRef/jabref/pull/1319?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will not change coverage

``` diff
@@             master      #1319   diff @@
==========================================
  Files           695        695          
  Lines         46383      46383          
  Methods           0          0          
  Messages          0          0          
  Branches       7677       7677          
==========================================
  Hits          12760      12760          
  Misses        32519      32519          
  Partials       1104       1104          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by 6d38a3f

--------------------------------------------------------------
#1318 Comment 1:
Please check the order of the imports: https://travis-ci.org/JabRef/jabref/builds/126478088

#1318 Comment 2:
Hm, will check my Eclipse settings again,.

#1318 Comment 3:
`gradlew eclipse` should be enough --> We are generating the correct settings. No need for manual intervention.

#1318 Comment 4:
@koppor  Fixed the import order. The setting was not activated in my Eclipse saving options. 

#1318 Comment 5:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1318?src=pr) is **27.51%**

> Merging [#1318](https://codecov.io/gh/JabRef/jabref/pull/1318?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will not change coverage

``` diff
@@             master      #1318   diff @@
==========================================
  Files           695        695          
  Lines         46382      46382          
  Methods           0          0          
  Messages          0          0          
  Branches       7677       7677          
==========================================
  Hits          12760      12760          
  Misses        32518      32518          
  Partials       1104       1104          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1aa2145...522607b](https://codecov.io/gh/JabRef/jabref/compare/1aa214510eee23cc586aad116780e4a875538e00...522607b2804067a4d52c4444fd2238a480d9f0a2)

#1318 Comment 6:
LGTM :+1:

--------------------------------------------------------------
#1317 Comment 1:
LGTM

#1317 Comment 2:
:+1: 
Nice! Can't wait to see the screenshots after a successfull circleci build ;-)

#1317 Comment 3:
Screenshots are only created in travis-ci :D

#1317 Comment 4:
Will adapt upload-to-builds.jabref.oeg.sh - or does anyone else want? :)

--------------------------------------------------------------
#1316 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1316?src=pr) is **27.52%**

> Merging [#1316](https://codecov.io/gh/JabRef/jabref/pull/1316?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1316   diff @@
==========================================
  Files           693        694     +1   
  Lines         46350      46246   -104   
  Methods           0          0          
  Messages          0          0          
  Branches       7677       7639    -38   
==========================================
- Hits          12745      12726    -19   
+ Misses        32500      32426    -74   
+ Partials       1105       1094    -11   
```
1. 2 files (not in diff) in `...bref/logic/formatter` were created. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F666F726D6174746572)
2. 2 files (not in diff) in `.../net/sf/jabref/logic` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963)
3. 4 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `-2` 
   - Partials `-2` 
   - Hits `-2`
4. 2 files (not in diff) in `...f/jabref/gui/cleanup` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F636C65616E7570) 
   - Misses `-3`
5. 2 files (not in diff) in `...va/net/sf/jabref/gui` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F677569) 
   - Misses `-2`
6. 3 files (not in diff) in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/ab74a31f4e50eb762daafd16116f9045521d6a59/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Hits `+2`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [212201a...ab74a31](https://codecov.io/gh/JabRef/jabref/compare/212201a8901e5559d42c53f185252b27c1f6d125...ab74a31f4e50eb762daafd16116f9045521d6a59)

#1316 Comment 2:
Is it correct that the old format can be loaded with versions up to and including 3.3 and then saved in the new format? If then I think we can safely delete this now.

#1316 Comment 3:
@oscargus Yes, you are right.

#1316 Comment 4:
This is a good opportunity to improve exception handling a little bit. I would go for `java.util.IllegalFormatException` in most cases. Apart from that, and the failing checkstyle warning, this looks good to me.

#1316 Comment 5:
Ok, I improved the exception handling.

#1316 Comment 6:
I am unsure whether it might be smarter to turn `ParseException` into a `RuntimeException`. We would still have better typing and would not be forced to declare it everywhere.

But it is really hard to tell which way makes more sense here. I'll throw my hat in for merging this. We can easily change this in the future if we find unchecked exceptions to be more convenient here.

#1316 Comment 7:
@lenhard  We should avoid throwing RuntimeExceptions at all cost, as those are unchecked and not catachable. They should be only used if the situation is unrecoverable:
http://stackoverflow.com/questions/27578/when-to-choose-checked-and-unchecked-exceptions

#1316 Comment 8:
@Siedlerchr Sorry, but I can't leave that standing as it is :-)

RuntimeExceptions are also Exceptions, they just do not need to be declared in method signatures and it is not mandatory to write exception handling code for them. Nevertheless, they _can be caught_ and dealt with in the same fashion as regular checked exceptions. 

The debate between checked and unchecked exceptions is ages old and there are valid arguments for using both types. Usually one of the two sides is more "cool" at a certain point in time and API designers overuse it (see Java APIs designed at the turning of the millenial). Things are also not as simple as described in that stackoverflow post (and I could argue that the post says we should use unchecked exceptions). One perceived downside of checked exceptions is the following: if you overuse them, then all your code is cluttered with exception handling blocks that you get tired of writing and end up doing abysmal exception handling, such as `catch(Throwable e) {}`, which you so frequently find in JabRef.

Anyway, let's keep the checked exception in this PR.

#1316 Comment 9:
So I think we can rebase and merge this in. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1309 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1309?src=pr) is **27.39%**

> Merging [#1309](https://codecov.io/gh/JabRef/jabref/pull/1309?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-0.00%**

``` diff
@@             master      #1309   diff @@
==========================================
  Files           694        694          
  Lines         46428      46435     +7   
  Methods           0          0          
  Messages          0          0          
  Branches       7688       7690     +2   
==========================================
  Hits          12720      12720          
- Misses        32611      32618     +7   
  Partials       1097       1097          
```
1. File `...orFocusListener.java` (not in diff) was modified. [more](https://codecov.io/gh/JabRef/jabref/commit/63ecb1f4bd53c4b4937b29f6d9a1c4a4983b3902/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F6669656C64656469746F72732F4669656C64456469746F72466F6375734C697374656E65722E6A617661) 
   - Misses `+7` 
   - Partials `0` 
   - Hits `+1`

[![Sunburst](https://codecov.io/gh/JabRef/jabref/pull/1309/graphs/sunburst.svg?size=200&src=pr)](https://codecov.io/gh/JabRef/jabref/pull/1309?src=pr)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by 63ecb1f

#1309 Comment 2:
LGTM - apart from the small JavaDoc issues

#1309 Comment 3:
LGTM :+1:

#1309 Comment 4:
Same here. Looks good. @koppor: Is this ready to merge or do you want to implement more improvements?

--------------------------------------------------------------
#1308 Comment 1:
regarding the comments from @koppor looks like a merge conflict was "solved" by "Force ours"...

@ayanai1 This is a "quick" but in most cases not a valid solution to resolve conflicts... The changes you reverted were made intentionally!

#1308 Comment 2:
What is the current status here?

#1308 Comment 3:
We are looking forward to our next programming-marathon on Tuesday the 19th. This PR is on the agenda for that day.

#1308 Comment 4:
@ayanai1 Could you please push the changes you make, so that we can see the progression? 

#1308 Comment 5:
Follow up at #1655

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1304 Comment 1:
LGTM

#1304 Comment 2:
@simonharrer Would you merge this in?

--------------------------------------------------------------
#1301 Comment 1:
Closed, because duplicate of #1300

--------------------------------------------------------------
#1300 Comment 1:
LGTM

--------------------------------------------------------------
#1298 Comment 1:
Just one minor comment, otherwise this looks good. Please rebase.

#1298 Comment 2:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1298?src=pr) is **27.49%**

> Merging [#1298](https://codecov.io/gh/JabRef/jabref/pull/1298?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-<.01%**

``` diff
@@             master      #1298   diff @@
==========================================
  Files           694        696     +2   
  Lines         46259      46419   +160   
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7677    +27   
==========================================
+ Hits          12755      12760     +5   
- Misses        32404      32555   +151   
- Partials       1100       1104     +4   
```
1. 3 files (not in diff) in `.../net/sf/jabref/logic` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963)
2. 1 files (not in diff) in `...n/java/net/sf/jabref` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566)
3. 2 files (not in diff) in `...bref/logic/formatter` were created. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F666F726D6174746572)
4. 2 files (not in diff) in `...jabref/logic/cleanup` were created. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F636C65616E7570)
5. 1 files (not in diff) in `...n/java/net/sf/jabref` were created. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566)
6. 4 files (not in diff) in `...f/jabref/model/entry` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F656E747279) 
   - Misses `+8` 
   - Hits `-12`
7. 5 files (not in diff) in `.../jabref/logic/groups` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F67726F757073) 
   - Misses `+22` 
   - Partials `+3` 
   - Hits `-1`
8. 3 files (not in diff) in `...jabref/logic/cleanup` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F636C65616E7570) 
   - Misses `+6` 
   - Hits `+8`
9. 3 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `-2` 
   - Partials `-2` 
   - Hits `-2`
10. 3 files (not in diff) in `...t/sf/jabref/importer` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/941240f674c02e07a8aae88010b1c0f9dd4a3a6f/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F696D706F72746572) 
    - Misses `-5` 
    - Partials `+1` 
    - Hits `-1`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [7230a80...941240f](https://codecov.io/gh/JabRef/jabref/compare/7230a809da3e138e362b56366043c4a18b267ca1...941240f674c02e07a8aae88010b1c0f9dd4a3a6f)

--------------------------------------------------------------
--------------------------------------------------------------
#1296 Comment 1:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1296?src=pr) is **27.43%**

> Merging [#1296](https://codecov.io/gh/JabRef/jabref/pull/1296?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1296   diff @@
==========================================
  Files           694        694          
  Lines         46430      46378    -52   
  Methods           0          0          
  Messages          0          0          
  Branches       7688       7688          
==========================================
  Hits          12722      12722          
+ Misses        32611      32559    -52   
  Partials       1097       1097          
```
1. 2 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C)
2. 15 files (not in diff) in `...ref/importer/fetcher` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F696D706F727465722F66657463686572)
3. 3 files (not in diff) in `.../jabref/gui/preftabs` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F7072656674616273) 
   - Misses `-3`
4. 2 files (not in diff) in `...t/sf/jabref/gui/help` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6775692F68656C70) 
   - Misses `-44`
5. 3 files (not in diff) in `...va/net/sf/jabref/gui` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F677569) 
   - Misses `-5`
6. 1 files (not in diff) in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/720eeeb60d97f1ebd1aaa9cd9936ab56a8579cab/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566)

[![Sunburst](https://codecov.io/gh/JabRef/jabref/pull/1296/graphs/sunburst.svg?size=660&src=pr)](https://codecov.io/gh/JabRef/jabref/pull/1296?src=pr)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by 720eeeb

#1296 Comment 2:
I have no clue where the missed files come from. :innocent: 

#1296 Comment 3:
Main question: Why there is no assertEquals with two comparative parameters of the same type like: `... assertEquals(BibEntry shouldBe, BibEntry is) { ...` ?
I noticed that such a function would be used very often. Could I possibly write one?

#1296 Comment 4:
Because you can just use the assertEquals of JUnits Assert class for this case and for lists too.

--------------------------------------------------------------
#1287 Comment 1:
Maybe it is enough with ' on' to cover workshop etc? Good idea though!

#1287 Comment 2:
The code looks good, but I'm not sure what the use case for such a checker is.
(By the way, if I remember correctly your words were that all the checkers should be extracted to separate classes as soon as a new checker is added :smile_cat: )

#1287 Comment 3:
Good idea just to check whether it ends with ' on'. Should produce even better results. 

The checker should detect typical errors made by newcomers and experts with large databases, i.e., encoding the best practices we have all learned over time. 

#1287 Comment 4:
So "let's turn the music on" is not a valid booktitle? I still don't see why I would have a booktitle ending on "conference on". But probably that's just because I'm to inexperienced with citing conference proceedings. 

The biblatex manual says 

> Things like “Proceedings of the Fifth XYZ Conference” go into the titleaddon or booktitleaddon
> field, respectively.

and provides the example 

```
@inproceedings{salam,
  author       = {Salam, Abdus},
  editor       = {Svartholm, Nils},
  title        = {Weak and Electromagnetic Interactions},
  date         = 1968,
  booktitle    = {Elementary particle theory},
  booksubtitle = {Relativistic groups and analyticity},
  booktitleaddon= {Proceedings of the Eighth Nobel Symposium},
  eventdate    = {1968-05-19/1968-05-25},
  venue        = {Aspen{\"a}sgarden, Lerum},
  publisher    = {Almquist \& Wiksell},
  location     = {Stockholm},
  pages        = {367-377},
}
```

#1287 Comment 5:
Hm, I only use bibtex, so I cannot say something about the usage in biblatex. In bibtex, all is put into the booktitle, as shown in the tests. 

The rule can have some false positives, similar to the Pages check as some journals have page numbers like this `4:1--4:56` but I think it is useful in a lot of cases (and has been in my own file). 

#1287 Comment 6:
Context: at least IEEE has been hopeless in writing conference titles
like `Electronics,
Circuits and Systems, 2002. 9th International Conference on` and I
regularly see those incorrect booktitles in papers I read. There's even
code in JabRef to sort it out upon import, but if you download directly you
get entries like:

@INPROCEEDINGS{1046205,
author={O. Gustafsson and L. Wanhammar},
booktitle={Electronics, Circuits and Systems, 2002. 9th International
Conference on},
title={Bit-level pipelinable general and fixed coefficient
digit-serial/parallel multipliers based on shift-accumulation},
year={2002},
volume={2},
pages={493-496 vol.2},
keywords={adders;distributed arithmetic;logic design;pipeline
arithmetic;shift registers;bit-level pipelinable general/fixed coefficient
multipliers;bit-level pipelined multipliers;digit-serial/parallel
multiplication;digit-serial/parallel multipliers;distributed arithmetic;low
hardware complexity design;maximal cascaded full-adder number;pipeline
arithmetic;shift-accumulation;shift-accumulators;Adders;Arithmetic;Circuits;Clocks;Energy
consumption;Hardware;Pipeline processing;Process design},
doi={10.1109/ICECS.2002.1046205},
month={},}

They had similiar issues for journals, but that seems to be correct in IEEE
Xplore now, although there are probably millions of downloaded entries out
there...

(Seems like markdown is not working properly for me right now...)

#1287 Comment 7:
Ok, then it makes sense to add such a checker. Would merge, but the build is failing for some reason.

#1287 Comment 8:
I keep it to 'conference on' for now just because this is the most problematic thing. 

#1287 Comment 9:
LGTM :+1: for merge now that I understood the purpose of this checker...

--------------------------------------------------------------
#1282 Comment 1:
Looks good!

#1282 Comment 2:
LGTM

Please rebase and merge

#1282 Comment 3:
Thanks! Fixed in JabRef-3.4dev--snapshot--2016-04-29--master--694840a.jar

--------------------------------------------------------------
#1281 Comment 1:
Great stuff! Love it :heart: 

#1281 Comment 2:
LGTM :+1: 

#1281 Comment 3:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1279 Comment 1:
LGTM :+1:

--------------------------------------------------------------
--------------------------------------------------------------
#1277 Comment 1:
Do we have any tests for that?`Would it make sense to add a test for that?

#1277 Comment 2:
No there are no tests in place and I have no idea how to test the class without doing some bigger refactorings.

#1277 Comment 3:
LGTM

May be we could write a test for creating the auto save file by extracting a method which does not depend on the UI?

--------------------------------------------------------------
#1276 Comment 1:
Looks good! No objections code-wise.

--------------------------------------------------------------
#1274 Comment 1:
Thank you!

--------------------------------------------------------------
#1273 Comment 1:
Please add a screenshot of the changes. 

#1273 Comment 2:
Well, the visual change isn't much. What you can do to try to see the point
is to increase the menu font size (significantly) in JabRef and then invoke
the old integrity check. With the current PR it looks OK then, so if
anything I should add a screen shot what it looks like without this PR. ;-)

#1273 Comment 3:
Without this PR
<img width="298" alt="capture2" src="https://cloud.githubusercontent.com/assets/8114497/14752820/b3355172-08d1-11e6-85ec-18359283a97d.PNG">

With this PR
<img width="295" alt="capture" src="https://cloud.githubusercontent.com/assets/8114497/14752819/b331086a-08d1-11e6-9144-d70876b885ee.PNG">

However, I noted that this seems to be a Windows problem as my Linux machine at work doesn't behave like this. There, the table font size is not increased when increasing the menu and label size (in fact, the menu size is not increased, only the label size). So maybe one should bring some more clarity into this.

#1273 Comment 4:
The same thing happens when viewing the preferences by the way. Once a good solution is found, the same should be applied there.

#1273 Comment 5:
LGTM

Please rebase and merge it

#1273 Comment 6:
Yes looks good.

#1273 Comment 7:
Please rebase and merge @oscargus :)

--------------------------------------------------------------
#1269 Comment 1:
Possible solution: use prepared statements, which should solve this issue automatically. And they should be faster and safer to execute as well. 

#1269 Comment 2:
@simonharrer  Yep, I would support that. And second you could use them for MYSQL as well

#1269 Comment 3:
Another issue: the we currently support the export of a JabRef database to an SQL file using the syntax for MySQL or PostgreSQL. But this SQL file does not contain the correct escape logic, and it is very hard to get this info out of JDBC without a database connection. Hence, I would suggest to remove these actions, as I cannot see how they are useful without the correct escape logic. 

#1269 Comment 4:
LGTM :+1: 

--------------------------------------------------------------
#1265 Comment 1:
Instead of converting the enum back to a String before passing it into HelpAction, can you just pass the enum and convert it to a String only when the URL is created or called?

#1265 Comment 2:
Yeah that could be possible.

#1265 Comment 3:
LGTM :+1: with the changes @simonharrer proposed.

#1265 Comment 4:
The Enum formatting is an Eclipse thing, I tried around with the options, but could not get it right:
See: http://stackoverflow.com/questions/6676305/how-to-stop-eclipse-formatter-from-placing-all-enums-on-one-line

#1265 Comment 5:
Added OpenOffice help-page. 
Added missing Localization for OO:
Now all Fetchers (excecpt ScieceDirect and Bibsononomy) are done

#1265 Comment 6:
@simonharrer @tobiasdiez  Rebased into one commit. Ready for merge?

#1265 Comment 7:
Hm, tests fail. Can you have a look? Otherwise it is ok to merge.

#1265 Comment 8:
I have no idea why the GUI test for creating new entries failed. I didn't change anything related to that.
Locally a gradlew check worked.

#1265 Comment 9:
@simonharrer  Now all tests are green ;)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1260 Comment 1:
LGTM,  it would be nice if you could add a screenshot for the UI changes.

#1260 Comment 2:
LGTM

Rebase and merge

#1260 Comment 3:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1260?src=pr) is **27.37%**

> Merging [#1260](https://codecov.io/gh/JabRef/jabref/pull/1260?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-0.07%**

``` diff
@@             master   #1260   diff @@
=======================================
  Files           695     694     -1   
  Lines         46382   46366    -16   
  Methods           0       0          
  Branches       7677    7693    +16   
=======================================
- Hits          12760   12694    -66   
- Misses        32518   32575    +57   
+ Partials       1104    1097     -7   
```
1. 2 files (not in diff) in `...t/sf/jabref/exporter` were created. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6578706F72746572)
2. 2 files in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Misses `+2` 
   - Hits `+2`
3. 5 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C) 
   - Misses `+13` 
   - Partials `+3` 
   - Hits `+16`
4. 2 files (not in diff) in `...abref/model/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F6461746162617365) 
   - Partials `-2` 
   - Hits `+2`
5. 2 files (not in diff) in `.../net/sf/jabref/model` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C) 
   - Misses `-2` 
   - Partials `-3` 
   - Hits `-2`
6. 5 files (not in diff) in `.../jabref/logic/groups` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F67726F757073) 
   - Misses `+76` 
   - Partials `-4` 
   - Hits `-21`
7. 3 files (not in diff) in `...jabref/logic/cleanup` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F636C65616E7570) 
   - Misses `+12` 
   - Partials `+1` 
   - Hits `-14`
8. 3 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `+6` 
   - Hits `-3`
9. 3 files (not in diff) in `.../importer/fileformat` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F696D706F727465722F66696C65666F726D6174) 
   - Misses `+1`
10. 15 files (not in diff) in `...ref/importer/fetcher` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/4141ccf39f97a2ad9db7eff70704424d3a844ea6/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F696D706F727465722F66657463686572)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1aa2145...4141ccf](https://codecov.io/gh/JabRef/jabref/compare/1aa214510eee23cc586aad116780e4a875538e00...4141ccf39f97a2ad9db7eff70704424d3a844ea6)

--------------------------------------------------------------
#1259 Comment 1:
Très bien. Merci beaucoup pour ta contribution.

--------------------------------------------------------------
#1250 Comment 1:
LGTM

--------------------------------------------------------------
#1246 Comment 1:
LGTM but can you please add a test for the fix.

#1246 Comment 2:
Yes, but not right now. Good point!

#1246 Comment 3:
Could you please add a test for it so we can merge this in :smile: ? We already closed the related issue.

#1246 Comment 4:
Done! Will merge when I see that the tests pass.

--------------------------------------------------------------
--------------------------------------------------------------
#1243 Comment 1:
Worth a try! :+1:

There are probably more field components where something similar is required. I tested looking up DOI and switching to source view and it wasn't updated (not with your fix though), so probably we should add it consistently if it is the solution.

#1243 Comment 2:
Does setting the doi directly for the entry also update the display? I.e. does `entryEditor.getEntry().setField("doi", result)` instead of JTextComponent.setText works?

#1243 Comment 3:
Yeah, looks like this works too.

#1243 Comment 4:
:+1: 

--------------------------------------------------------------
#1241 Comment 1:
Please fix Codacy issues and reorganize imports. We set this to a new format lately, thats why the tests are failing. See https://github.com/JabRef/jabref/issues/1091

#1241 Comment 2:
I fixed the codacy issues and addressed the comments.

#1241 Comment 3:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1241?src=pr) is **28.21%**

> Merging [#1241](https://codecov.io/gh/JabRef/jabref/pull/1241?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+0.77%**

``` diff
@@           master   #1241   diff @@
=====================================
  Files         696     694     -2   
  Lines       46398   46335    -63   
  Methods         0       0          
  Branches     7692    7678    -14   
=====================================
+ Hits        12730   13072   +342   
+ Misses      32570   32134   -436   
- Partials     1098    1129    +31   
```
1. 2 files in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/20371ad24c738c5e6150e2465bf45a3dd76bd505/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Misses `-266` 
   - Partials `+15` 
   - Hits `+251`
2. 2 files (not in diff) in `...sf/jabref/logic/util` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/20371ad24c738c5e6150e2465bf45a3dd76bd505/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F7574696C) 
   - Misses `-16` 
   - Partials `+4` 
   - Hits `+12`
3. 2 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/20371ad24c738c5e6150e2465bf45a3dd76bd505/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `-43` 
   - Partials `+2` 
   - Hits `+41`
4. 3 files (not in diff) in `...t/sf/jabref/exporter` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/20371ad24c738c5e6150e2465bf45a3dd76bd505/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6578706F72746572) 
   - Misses `-55` 
   - Partials `+11` 
   - Hits `+44`

[![Sunburst](https://codecov.io/gh/JabRef/jabref/pull/1241/graphs/sunburst.svg?size=660&src=pr)](https://codecov.io/gh/JabRef/jabref/pull/1241?src=pr)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by 20371ad

#1241 Comment 4:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1241?src=pr) is **28.41%**

> Merging [#1241](https://codecov.io/gh/JabRef/jabref/pull/1241?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+0.84%**

``` diff
@@             master      #1241   diff @@
==========================================
  Files           695        695          
  Lines         46294      46267    -27   
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7646     -4   
==========================================
+ Hits          12759      13144   +385   
+ Misses        32435      31993   -442   
- Partials       1100       1130    +30   
```
1. 2 files (not in diff) in `...sf/jabref/logic/util` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/fa7c7dae216d2dddecff7c756122d72516f93665/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F7574696C) 
   - Misses `-15` 
   - Partials `+4` 
   - Hits `+11`
2. 2 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/fa7c7dae216d2dddecff7c756122d72516f93665/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `-49` 
   - Partials `+1` 
   - Hits `+48`
3. 3 files (not in diff) in `...t/sf/jabref/exporter` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/fa7c7dae216d2dddecff7c756122d72516f93665/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6578706F72746572) 
   - Misses `-55` 
   - Partials `+11` 
   - Hits `+44`
4. 2 files in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/fa7c7dae216d2dddecff7c756122d72516f93665/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Misses `-271` 
   - Partials `+11` 
   - Hits `+260`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b4e8e5a...fa7c7da](https://codecov.io/gh/JabRef/jabref/compare/b4e8e5ae1792c66a5845ed60e9782e9fa6921217...fa7c7dae216d2dddecff7c756122d72516f93665)

#1241 Comment 5:
I've addressed the comments.

#1241 Comment 6:
LGTM :+1: - just some minor remarks.

#1241 Comment 7:
Codecov/changes fails, but I don't know why. Does someone know the reason?

--------------------------------------------------------------
--------------------------------------------------------------
#1238 Comment 1:
:+1: LGTM

#1238 Comment 2:
@oscargus in the url field, your detection now finds html encoded characters. Maybe we should exclude the check for the url field?

#1238 Comment 3:
@oscargus same holds true for the odd number of unescaped '#' warning, which also occurs in a url field of mine. 

--------------------------------------------------------------
#1236 Comment 1:
Can you provide a screenshot? Are there any issues with the other side pane elements, e.g., Fetchers?

#1236 Comment 2:
Yes and no :smile: (at least I didn't discovered any issues with other panes)
![untitled](https://cloud.githubusercontent.com/assets/5037600/14641484/cd90de34-0646-11e6-9033-2f85d05401d3.jpg)

#1236 Comment 3:
This looks rather strange at the bottom over the status bar... Is there some overlap? 

Edit: Okay... it always has looked strange ;-)

#1236 Comment 4:
Hm, what I see: it could happen that the window size render the group function unusable. 
1. Shrink window so that there is only space for the fetcher
2. Groups pane shrinks as well, showing basically no entry anymore

Is this the case?

#1236 Comment 5:
@matthiasgeiger Yes, the status bar has no border and thus there is no separation to the side pane.
@simonharrer No, the groups pane does not shrink below a certain size (two groups displayed). If not enough space remains to show all groups, then a scrollbar is displayed.

#1236 Comment 6:
LGTM

--------------------------------------------------------------
--------------------------------------------------------------
#1231 Comment 1:
@oscargus LGTM

Can you fix the things you mentioned in your own comments and just merge this in?

#1231 Comment 2:
I think this should be OK now.

--------------------------------------------------------------
#1230 Comment 1:
What is the status here?

#1230 Comment 2:
@oscargus _push_ :)

#1230 Comment 3:
Rebased. Still methods instead of classes. No Path. So basically some encapsulations of variables and replacing long lambdas with methods.

--------------------------------------------------------------
#1229 Comment 1:
:+1:

#1229 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#1228 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1224 Comment 1:
To be more precise, `BibteXMLImporter` (the one with the small `t`) was added again in 4354e8d1c330f14f69228e639d4e2556b42101f0.

#1224 Comment 2:
Thanks for cleaning up my mess :smile_cat: 

#1224 Comment 3:
The problem on windows is the case insensitivity regarding files...

--------------------------------------------------------------
#1221 Comment 1:
We have the issue, that all lines have been changed. How did you do the translation? Using the web ui of GitHub or using the desktop?

UPDATE: I assume, everything was correct at your side. Just at the side of the JabRef repo, it was wrong.

#1221 Comment 2:
Oh, it's the fault of the JabRef repo somehow. I tried to fix it in 20979a7 and included your translation in 5a1ed8e. Thank you for the fix!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1217 Comment 1:
LGTM :+1:
I think we slowly approach the point where it might make sense to extract the checkers as separate classes. @simonharrer what do you think?

#1217 Comment 2:
Hm, yes, would make sense @tobiasdiez . I would merge this in with the current structure but for the next checker we should create separate classes. 

#1217 Comment 3:
Go ahead an merge this in.

--------------------------------------------------------------
#1216 Comment 1:
Idea: at the moment we have a somewhat intermingled relationship between JabRefMain, JabRef, JabRefFrame and now the ArgumentProcessor. Especially the purpose of the JabRef class is not that clear. 

I think it would be best if we could make the relationship more clear, especially separating the GUI and the CLI. I am currently unsure how it should be done, but I think making the relationship between the CLI and the GUI more explicit with interfaces could help as well as working on this unclear JabRef class. 

At the moment the flow is directed using "Main -> CLI -> GUI" but does the CLI really need a dependency of the GUI? Maybe it should be converted to something like the following:

```
Main calls CLI and get a cliResult
Main calls GUI with cliResult
GUI decides whether to start up depending on the cliResult
```

This would allow to separate CLI and GUI, testing CLI without any GUI parts. 

#1216 Comment 2:
Good idea! I think that this PR, if nothing else, makes it a bit easier to see the connections. For example, the JabRef instance was passed in some placed where it actually wasn't needed since processArguments behaved as a static function, although it wasn't declared as one and the JabRefCLI field was reinitialized on each call anyway. I'll try to dig a bit more into it.

#1216 Comment 3:
I've looked into it a bit more carefully now and it, sort of, already works like that.

In `JabRef.java`, first the ArgumentProcessor is called, processing all the CLI stuff.

Then, if we are happy there, JabRef closes. If not, the GUI is started providing the required information from the ArgumentProcessor.

I do not really see the dependency on the GUI in the CLI (especially now that the CLI is no longer in `JabRef.java`. The only thing that can be argued in that `JabRefMain` starts `JabRef` as `invokeLater`, but I have no idea why a new thread is used there and what is then executed in the main thread.

#1216 Comment 4:
There is an import of `JabRef` in `ArgumentProcessor` but that is to the static method `openBibFile` which should not necessarily be in `JabRef` (and maybe not at all as there should be other ways to do the same thing, the special thing here seems to be if the auto save is considered or not).

Of course one can imagine moving `JabRef.openWindow()` to a separate class as that is where the GUI really starts.

#1216 Comment 5:
OK, the new structure looks like this:
- `JabRefMain` is replaced with `JabRef`.
- `JabRefGUI` starts up the GUI from the constructor and is the place to go for the static `JabRefFrame` `mainFrame` earlier in `JabRef`
- `AutosaveAwareDatabaseLoader` now resides the openBibFile method

#1216 Comment 6:
I think this can be merged. I do like the new structure. However, why not rename JabRef to JabRefMain to make it explicit that this class is used for starting?

#1216 Comment 7:
Oh, I thought JabRef made much more sense to start from than JabRefMain. :-) For sure that is what I would have guessed for if I was trying to figure out the main class.

--------------------------------------------------------------
#1215 Comment 1:
With the benchmarks in place, you might also try out the recommendations of http://stackoverflow.com/questions/4285083/fastest-way-to-perform-a-lot-of-strings-replace-in-java and http://stackoverflow.com/questions/16228992/commons-lang-stringutils-replace-performance-vs-string-replace.
. So using Apache's StringUtils.replace() and/or 

> Don't make a pattern for every single replaceAll line, but try to combine them (regex has a OR operator) and let Pattern optimize the regex. Do use the compiled pattern and don't compile it in every call, it's fairly expensive.

#1215 Comment 2:
At the moment there are (almost) only replace, so very few actual regexes. There are a few cases where the several characters are replaced with the same, so in those cases it may be worthwhile to use an or-regex.

Still, I think the way to go here (for HTML to LaTeX) would be to parse the string and once either HTML tags or HTML-encoded characters are found those are replaced, rather than blindly replacing all possible characters. In that way one can probably honor more tags as well.

#1215 Comment 3:
I would not prematurely optimize things which does not reduce the speed of JabRef. 

#1215 Comment 4:
Except that optimizing code is quite fun. :speedboat: 

I'm quite sure #405 should be fixed now.

#1215 Comment 5:
What is the current state here? Can this be merged?

#1215 Comment 6:
This should be good to go now. Only better compared to the earlier version although of course, the "correct" way to convert can be argued infinitely...

#1215 Comment 7:
Thanks @oscargus :+1: 

--------------------------------------------------------------
#1214 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#1213 Comment 1:
github marks the whole file as changed - have you accidentally changed the encoding of the file?

#1213 Comment 2:
Strange: I have simply edited the 2 strings in my usual browser. I do not think I could have changed the encoding even if I wanted...

#1213 Comment 3:
Strange... if you don't mind I'll add the two strings manually.

#1213 Comment 4:
Sure about strange, And sure you can add them manually

#1213 Comment 5:
Done in dad863b8ceae804a4dd9268bb2df1a05ea4b3718.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1208 Comment 1:
:+1: LGTM

#1208 Comment 2:
LGTM :+1: 

#1208 Comment 3:
:+1: 

--------------------------------------------------------------
#1207 Comment 1:
Any comments or can I rebase and merge?

#1207 Comment 2:
I do not fully understand why the getCLIId method is removed? How is the importer selected from CLI now? 

Also, since there is a method setCliId, maybe that should change name as well (as it appears as getCLIId is sometimes replaces with getId, somehow, it seems like getCLIId is a better name, but no strong opinions).

Many changes are related to imports and replacing extension strings with a list of extension strings, right?

#1207 Comment 3:
Now I think I understand why. However, I think that getCLIId and getFormatName in general should return different things...

#1207 Comment 4:
Well, maybe I do not understand the code fully (again, tired), but what I was worried about with getId doesn't seem to the case, so to me this looks good!

#1207 Comment 5:
There is a method getId (previously getCLIID) in ImportFormat which constructs the id based on the name of the formatter. Thus some of the hand-coded ids in the specific importers could be removed.

I couldn't find the method `setCLIID`. Where does it exists?

#1207 Comment 6:
I saw `"REPEC New Economic Papers (NEP)"` and then that getId() used that string which caused one comment, but then I saw the tests and realized that one wasn't supposed to type something like that. :-) Now, I also know why.

:+1:

#1207 Comment 7:
Waiting for the last #547 to be merged - then, this PR can clean up all the importer code uniformly. 

#1207 Comment 8:
This is unblocked now. Go 4 it. :)

--------------------------------------------------------------
#1206 Comment 1:
LGTM :+1:

#1206 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#1203 Comment 1:
Any idea why Tracis gives the message " allFilesMustHaveSameKeys FAILED"?
I cannot find the key that is wrong or missing...
Please, help!

#1203 Comment 2:
There are missing keys in language files. Please merge with most recent master.
If that doesn't help run `gradlew -b localization.gradle generateMissingTranslationKeys`.

#1203 Comment 3:
I merged it manually.

#1203 Comment 4:
The initial file is still 13 days old on Master. Doing the changes online, I used the most recent (no interaction with a recently merged pull request).
Using gradlew, both the original and my modified version give the same results:

> ----> No missing keys.
> ----> No possible obsolete keys (not in English language file).

I am stymied...

--------------------------------------------------------------
--------------------------------------------------------------
#1201 Comment 1:
LGTM

#1201 Comment 2:
LGTM :+1:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1197 Comment 1:
LGTM

#1197 Comment 2:
:+1: 

--------------------------------------------------------------
#1196 Comment 1:
LGTM :+1:

#1196 Comment 2:
Is it possible to align the Buttons horizontally? In your Screenshot the DOI field requires so much space but a DOI is always a single line with at most ~50 characters

#1196 Comment 3:
LGTM (the suggestion of matthias could be followed if you have time @stefan-kolb but I would merge this for 3.3 either in this or in the improved state. 

#1196 Comment 4:
We should not do it into v3.3 because of two new translation strings:

```
Lookup_DOI=
No_DOI_found=
```

See also https://github.com/JabRef/jabref/pull/1050#issuecomment-209641393

#1196 Comment 5:
We should make an exception here, as this feature is really awesome. 

#1196 Comment 6:
We can rethink the layout later on I think. it is flawed in general...

#1196 Comment 7:
:+1: for making the exception - DOI is is language independenden and "lookup" should be understandable for most users :wink: 

--------------------------------------------------------------
--------------------------------------------------------------
#1194 Comment 1:
Looks good!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1190 Comment 1:
@Joshua-Ramon-Enslin  : You are so fast! Thank you!

#1190 Comment 2:
Okay, seems like the pull request went through but to the old pull request instead of the actual JabRef. Hope this is okay.
In the new one I fixed the mistakes pointed out above.

#1190 Comment 3:
There is still one comment left above.
`Please_select_which_JabRef_databases_do_you_want_to_import\:=Silahkan_memilih_basisdata_JabRef_untuk_diimpor/:`

#1190 Comment 4:
Thanks a lot :smile: :+1:  

#1190 Comment 5:
Looks like not all needed Keys are there as the build is failing with `allFilesMustHaveSameKeys`.

#1190 Comment 6:
Quality check are very picky... Well, that's why they have been implemented...

I believe the problem comes from here:
Currently, the file has the key:
Removed_all_subgroups_of_group_"0".
It should be:
Removed_all_subgroups_of_group_"%0".

Additionnaly: colon missing in the translation of
Select_target_SQL_database:=Pilih_basisdata_SQL_target

#1190 Comment 7:
The updates here say it's okay now. Hope that suffices. Thanks for your help!

--------------------------------------------------------------
#1189 Comment 1:
Before I merge again... will there be some further updates? :wink: 

#1189 Comment 2:
This should be the last one for Indonesian: After merging, the menus will be fully translated into Indonesian.

#1189 Comment 3:
:+1: 

--------------------------------------------------------------
#1186 Comment 1:
:+1: 

--------------------------------------------------------------
#1185 Comment 1:
:+1: 

--------------------------------------------------------------
#1184 Comment 1:
:+1:

--------------------------------------------------------------
#1183 Comment 1:
Could someone of the linux users please take a look at that failing test? Can't reproduce that on win.

#1183 Comment 2:
Indeed, this works on my Linux computer: I get the menus translated in Brazilian Portuguese.
Great!

#1183 Comment 3:
@Siedlerchr The problem is again casing: In `Languages.java` Portuguese is added as `LANGUAGES.put("Brazilian Portugese", "pt_BR");` - and this locale abbreviation is used in the tests to find the files...

However, the format `pt_BR` or `languange_COUNTRY` are the official abbreviations so I don't like to change all keys and files to lowercase but I'd prefer to remove the lowercasing on resource loading. Can you change this in this PR?

#1183 Comment 4:
This could also be the opportunity to correct the missing "u":
"Brazilian Portugese" --> "Brazilian Portuguese"

#1183 Comment 5:
@matthiasgeiger  I will look at it, however the problem with the case is implicit in the EncodingControl, there a Locale is passed in the ResourceBundle methods (which in fact is the JAVA SDK implementation). 
However, the Locale Object is internally converted to lowercase --at least that is what I saw.
I will setup my VM today for testing directly on linux.

#1183 Comment 6:
Ah okay... I thought we do this lowercasing somewhere... if this is an internal JDK thing it is indeed easier to use lowercase for our files.

#1183 Comment 7:
This is caused by the misuse of the Locale class. See http://stackoverflow.com/questions/3318465/missingresourceexception-cant-find-bundle-for-base-name.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1172 Comment 1:
Groups are highlighted when an entry is selected. Can you make the correction in this PR? Or should I merge this in and you create a new PR for the new change?

--------------------------------------------------------------
#1171 Comment 1:
Awesome! Thank you!

#1171 Comment 2:
@matthiasgeiger there is a not successful automatic test. Looks that I have nothing to do with it... something to do on my side? And, by the way, I missed one string... what means From Import string?

Cheers

#1171 Comment 3:
I don't really know why the code coverage sinks - causing to fail this check. But this is no problem - we'll merge this anyway.

Regarding the missing string "From import" You can see the context in this screenshot:

![import-dupblicates](https://cloud.githubusercontent.com/assets/676652/14452891/dca97864-0091-11e6-9961-ee103fa81db1.png)

If you find an entry using the web search which already exists in your database, you can open this dialog to check whether those entries are really duplicates and which information should be used. On the left side there is the existing entry - on the right side there is the new entry "from [the] import".

Do you want to add the missing string? Or you can provide me the translation here and I'll add it.

Regards

#1171 Comment 4:
Oh... I just checked your translation. Unformatunately you escaped special characters using the "HTML syntax" (e.g., `&oacute;`). This does not work for "normal" Java strings. 

We'll be able to convert this, but I'm curious how this happend. Have you escaped this manually? Or has this happened automatically? If so, which tools have you used to create the translations?

#1171 Comment 5:
Hi Matthisas,

I think that for a single entry it is better that you translate it. 
Tried to do it in github but I'm ending with the usual mess. Git/Github 
is a beast I haven't been able to cope with yet.

I think we should translate two strings, taking into account the context:

Line 570

Remove_entry_from_import=Eliminar_entrada_importada

Line 1302

From_import=Entrada_importada

Cheers

Jorge

El 12/04/16 a las 09:38, Matthias Geiger escribió:

> I don't really know why the code coverage sinks - causing to fail this 
> check. But this is no problem - we'll merge this anyway.
> 
> Regarding the missing string "From import" You can see the context in 
> this screenshot:
> 
> import-dupblicates 
> https://cloud.githubusercontent.com/assets/676652/14452891/dca97864-0091-11e6-9961-ee103fa81db1.png
> 
> If you find an entry using the web search which already exists in your 
> database, you can open this dialog to check whether those entries are 
> really duplicates and which information should be used. On the left 
> side there is the existing entry - on the right side there is the new 
> entry "from [the] import".
> 
> Do you want to add the missing string? Or you can provide me the 
> translation here and I'll add it.
> 
> Regards
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub 
> https://github.com/JabRef/jabref/pull/1171#issuecomment-208757628

#1171 Comment 6:
@matthiasgeiger  One of the difficulties in translating the entries is to know the context in which a specific string is used. I have always thought there was no easy way to find in which window a specific string was displayed; and here you come directly with a screen shot!
So: is there an easy way to find the proper window, or does one have to be wizard?

#1171 Comment 7:
Well... annoying... I just edited the file which was cloned after git 
clone....

And I noticed that the strings were scaped like html. So I wrote the 
text normally (with accents and all) and then replaced the characters 
(¿,,¡ñ,+á,é,... etc) for the equivalente html encoding. I simply used 
kate for the edition.

Cheers

Jorge

El 12/04/16 a las 09:45, Matthias Geiger escribió:

> Oh... I just checked your translation. Unformatunately you escaped 
> special characters using the "HTML syntax" (e.g., |&oacute;|). This 
> does not work for "normal" Java strings.
> 
> We'll be able to convert this, but I'm curious how this happend. Have 
> you escaped this manually? Or has this happened automatically? If so, 
> which tools have you used to create the translations?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub 
> https://github.com/JabRef/jabref/pull/1171#issuecomment-208760654

#1171 Comment 8:
Ooops: there is a space in the translation "Entrada importada"....

#1171 Comment 9:
@jtornero Thanks for the strings and the explanation. There some few cases where longer texts are styled using HTML - However, for most cases you can directly use unicode characters.

@mlep Depends on the point of view whether some magic is needed or not :wink: You need to work withe the code and even then it is not always easy to produce the screens (e.g., for error messages).  What I did here was: Performing a full text search on the whole jabref project for `"From import"` (note: with space here, as there are spaces in the code, `_` is only relevant for the properties files). I found the string in the dialog for duplicate resolution and then I looked up, how to create the dialog for "import duplicate detection". 
So, as you can see: Not so easy to correctly show the context of the translations - even for us developers who know where to look.

#1171 Comment 10:
@matthiasgeiger Lesson: translators can ask developers if, by chance, magic can operate...
Thanks! :+1: 

#1171 Comment 11:
Merged with https://github.com/JabRef/jabref/commit/7dee04666f0f0dfe5f7658e67f633541def997e1.

Thanks again, Jorge!

--------------------------------------------------------------
#1170 Comment 1:
LGTM :+1:

--------------------------------------------------------------
#1169 Comment 1:
There seems to be a flaw in your description...

Coveralls and Coverity are removed and replaced by codecov and codacy?

#1169 Comment 2:
Reasoning:
- Most coverity have been fixed. 
  - 13 identified medium issues are false positives.
  - we needed gradle work arounds to get it working
- Codacy invests in its future and will integrate other tooling; also offers a badge
- Coveralls is slower as codecov; used 

--------------------------------------------------------------
#1168 Comment 1:
LGTM :+1:

#1168 Comment 2:
LGTM :+1: 

#1168 Comment 3:
Should we readd YearUtil as a cleanup to convert two digit years to four digit years?

#1168 Comment 4:
If we add it, we should make use of the java 8 functionality instead of the own ugly parsing:
http://stackoverflow.com/questions/32505490/how-to-change-the-base-date-for-parsing-two-letter-years-with-java-8-datetimefor

and this one:
http://stackoverflow.com/questions/29490893/parsing-string-to-local-date-doesnt-use-desired-century

--------------------------------------------------------------
#1167 Comment 1:
Good, but I think you missed one: 
`FindUnlinkeFilesDialog->initalizeAction()`

#1167 Comment 2:
Not really. That one can be replaced with `PositionWindow`. This holds for `ImportInspectionDialog` as well. At the moment those two use another mechanism for this. I won't change that now though.

--------------------------------------------------------------
#1166 Comment 1:
Thanks!

--------------------------------------------------------------
--------------------------------------------------------------
#1161 Comment 1:
LGTM :+1:
Could you please also add a test in FormatterTests that  getExampleInput does not return null or an empty string?

--------------------------------------------------------------
#1160 Comment 1:
LGTM :+1:
Sorry for having missed them.

--------------------------------------------------------------
#1159 Comment 1:
LGTM :+1: just a few remarks.
For the formatters a better support for parametrized tests like [JUnitParams](https://github.com/Pragmatists/JUnitParams) would be nice.

#1159 Comment 2:
I want to get this into v3.3 as i have another commit based on that, which adds `getExampleInput()` to Formatters to improve  #1050

#1159 Comment 3:
LGTM as it is.

#1159 Comment 4:
I rebased onto master

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1152 Comment 1:
Thanks!

--------------------------------------------------------------
--------------------------------------------------------------
#1150 Comment 1:
@melTr Thank you for improving the French localization. Your contribution is very welcomed! If you find any other improvements, do not hesitate to commit them.

#1150 Comment 2:
Thank you for your contribution.

--------------------------------------------------------------
#1149 Comment 1:
Looks very nice! :+1:

The MD thing is a bit challenging and either way we will do it wrong for one of the cases. If I were in medicine I would probably prefer not to expand MD (especially).

#1149 Comment 2:
LGTM 

--------------------------------------------------------------
#1148 Comment 1:
Would postpone it after Release because of the many new language Keys.

#1148 Comment 2:
Makes sense.  I added the 3.4 tag and will rebase and merge once 3.3 is released.

--------------------------------------------------------------
#1147 Comment 1:
:+1: 

--------------------------------------------------------------
#1146 Comment 1:
LGTM

--------------------------------------------------------------
#1144 Comment 1:
I am in favour of this solution, because it breaks the link between our class structure and hard-coded strings in the layout files of random people. The switch may be long, but it is very easy to read. 

As you suggest, we should delete the deprecated "Author" formatters.

Let's decide on this at the upcoming devcall!

#1144 Comment 2:
Just make sure that http://help.jabref.org/en/CustomExports/ is updated accordingly and note:

"Custom formatters

If none of the available formatters can do what you want to achieve, you can add your own by implementing the net.sf.jabref.export.layout.LayoutFormatter interface. If you insert your class into the net.sf.jabref.export.layout.format package, you can call the formatter by its class name only, like with the standard formatters. Otherwise, you must call the formatter by its fully qualified name (including package name). In any case, the formatter must be in your classpath when running JabRef."

(I do not have any opinion on this, just want to make sure that things are not obviously broken.)

#1144 Comment 3:
LGTM :+1: 

#1144 Comment 4:
@tobiasdiez Could you open a new issue for your "By the way" thing and post the excerpt from the help page? I couldn't quickly find the paragraph you're referring to.

--------------------------------------------------------------
--------------------------------------------------------------
#1142 Comment 1:
Hm seems like Gradle encountered probs at CI server:
`./gradlew test died unexpectedly`

#1142 Comment 2:
Yes, a few recent PRs have run into this. Would guess at something
temporary at their servers.

#1142 Comment 3:
Thanks @Siedlerchr . I changed it based on your suggestion. We should try to look for similar code (seems like there is room for a PMD rule here almost).

--------------------------------------------------------------
#1140 Comment 1:
![LGTM](https://cdn.meme.am/instances/500x/37661228.jpg)

#1140 Comment 2:
Jstor as a database still exists, I think. Why should we want to delete the fetcher for that? Which Format does the fetcher return?

#1140 Comment 3:
Please see the referenced pull request: https://github.com/JabRef/jabref/pull/1140. 

> JSTOR is exporting BibTeX and has no own format anymore.

Should we check the statement at #1140 again?

Attached the screenshot of a current export:

![grabbed_20160408-072403](https://cloud.githubusercontent.com/assets/1366654/14374838/e6e3dd22-fd5a-11e5-90c7-9bc070a3bcfd.png)

#1140 Comment 4:
What is meant by "Remove unused JSTOR code"?
Is it
"remove the code specific to the old JSTOR format (because there is no need for it since JSTOR directly generates BibTeX format), but keep JSTOR as a fetcher"
or
"remove the code specific to the old JSTOR format and the JSTOR fetcher"
?

#1140 Comment 5:
To clarify things:
- JSTOR format is obsolete, hence, the JSTOR format importer was removed in a PR some time ago
- JSTOR fetcher fetchting entries from the JSTOR database still makes sense, as we can just use their bibtex export.
- BUT: we currently have two broken JSTOR fetchers

Hence, I second this removal. Hopefully, we can add a correctly working JSTOR fetcher in the future. 

#1140 Comment 6:
The JSTOR fetcher is [removed since version 3.0](https://github.com/JabRef/jabref/blob/master/CHANGELOG.md#removed-3), because [it was not working](https://github.com/koppor/jabref/issues/66). That fetcher fetched a proprietary format, which is not supported by JSTOR any more.

#1140 Comment 7:
Thank you for the clarification!

--------------------------------------------------------------
#1139 Comment 1:
Thank you for your contribution!

--------------------------------------------------------------
#1138 Comment 1:
LGTM :+1: Nice work.

--------------------------------------------------------------
#1137 Comment 1:
Hard to use, just close.

--------------------------------------------------------------
--------------------------------------------------------------
#1135 Comment 1:
GUI test seems to brake after a few runs. They are really quite unstable :(

--------------------------------------------------------------
#1133 Comment 1:
@simonharrer  Replaced it with your alternative. Sounds better :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1126 Comment 1:
Thank you very much for your contribution :+1: .
I just made some comments. Please fix these small issues and rebase, then we will merge this in.

#1126 Comment 2:
Sorry to take so long to address the comments and fix the code. I had other projects that needed attention. Thank you for your consideration of my code change.

#1126 Comment 3:
Thanks for your revision. 
LGTM :+1:

--------------------------------------------------------------
#1125 Comment 1:
- [ ] new screen is not automatically translated, while all other pages are translated

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1117 Comment 1:
:+1: 

--------------------------------------------------------------
#1116 Comment 1:
When merging this in please use squash merge to make it easy to revert this change when this is obsolete for OpenJDK later on.

#1116 Comment 2:
:+1: 

#1116 Comment 3:
Oh, where did 4aa0d5b go? As far as I can see, only ac0bae5 (which is very short in comparison to the changes shown above) has been cherry-picked?

#1116 Comment 4:
#1145 : related?

--------------------------------------------------------------
#1114 Comment 1:
Oh my, I can't commit into your branch and my push resulted in a new branch in the JabRef repo... Can you just apply this 2c8b6e428d7b023bd7657111893e223447f128f2 here and afterwards we can merge this PR and delete my duplicate branch.

#1114 Comment 2:
I'm back home without computer but will sort it out tomorrow.

#1114 Comment 3:
Again, why do you think it is better to reintroduce the FormatChars formatter instead of editing the provided export layouts in resource.layout.iso690txt and .ris ?
In my opinion 
`\begin{author}\format[LatexToUnicode,Iso690NamesAuthors]{\author}`
more understandable then
`\begin{author}\format[FormatChars,Iso690NamesAuthors]{\author}`

#1114 Comment 4:
Feel free to edit it. I'm not saying that it is better, but that it was a
quicker fix (for something I didn't break...) than editing those files,
updating the help files and handling issues posted by people having their
own export formats broken.

#1114 Comment 5:
@JabRef/developers what you do think about it? Move forward and use LatexToUnicode as the name or be backwards compatible?

#1114 Comment 6:
We have to be backwards compatible here. Users built `layout` files which depend on these names.

In the next step, we have to offer migrations for `layout` files. (Reference is IMHO http://help.jabref.org/en/CustomExports/).

#1114 Comment 7:
I close this issue in favor of the alternative solution implemented in #1144

--------------------------------------------------------------
--------------------------------------------------------------
#1112 Comment 1:
@chochreiner any idea why the L&F selection is hidden on Mac OS X?

#1112 Comment 2:
LGTM :+1:

#1112 Comment 3:
I've only had a quick look at it, but i guess it is because only the default L&F shows the the OSX specific first dropdownmenu

at a first glance, there is no reason why this menu should be disabled - apart from the fact that IMHO only the default L&F looks good 

#1112 Comment 4:
Seems reasonable to me :+1: So we keep it this way.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1108 Comment 1:
Thanks :+1: 

--------------------------------------------------------------
#1107 Comment 1:
No: one is for the file Menu_fr.properties, the other for the file JabRef_fr.properties.

I should have made the title more explicit, sorry. And I should definitely learn how to commit changes using command lines, so that I can have several commits in one PR.

#1107 Comment 2:
my bad sorry :smile: 

--------------------------------------------------------------
--------------------------------------------------------------
#1105 Comment 1:
Mhh. I'm against reintroducing FormatChars as a class. Reasoning:
- I don't like the name at all and it is not obvious what a `FormatChars` - formatter does.
- Even if we would like to support FormatChars for backwards compatibility, then there are better solutions for that. Just insert a corresponding if statement in `LayoutEntry.getLayoutFormatterByClassName` (and even better, remove the reflection stuff completely).

#1105 Comment 2:
Ok, as long as it works next Friday anything goes for me...

#1105 Comment 3:
Regarding naming I conceptually agree but it's been around for 10+ years so... (even before Unicode was well established) Legacy etc...

#1105 Comment 4:
I removed the FormatChars part and put it in #1114 so that there is a quick fix available before the release...

--------------------------------------------------------------
#1103 Comment 1:
Ready for review. 

#1103 Comment 2:
Really like this. However, we cannot easily benchmark the GUI performance. But we can benchmark the MainTableDataModel from #1100 which does all the heavy lifting regarding sorting, filtering, etc. 

It would be awesome if we could track the progress of these benchmarks, but that would require something like a jenkins. Probably something for the future. 

#1103 Comment 3:
I changed the code accordingly to your comments.

Yes it would be nice to have an overview of the performance for each PR. Since JMH writes the results to a text file in build\reports\jmh, it shouldn't be to hard to get the numbers.

#1103 Comment 4:
:+1: LGTM

--------------------------------------------------------------
#1102 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1100 Comment 1:
L(fast)TM :+1: 

#1100 Comment 2:
LGTM :+1:

#1100 Comment 3:
Running the benchmarks with this PR merged in shows that the writing speed was improved by an additional factor of 10 (being now at roughly 60k entries per second). Good job :+1: 

#1100 Comment 4:
Considering users reported JabRef to be slow, this is a great improvement (worth being advertised in the blog!). 

#1100 Comment 5:
The problem is, I think currently we lack people writing these blog posts... :)

#1100 Comment 6:
@simonharrer: A problem? Here is the stub of a solution.
I collated various information from different issues. I am not sure I got everything right, hence, @JabRef/developers, feel free to improve it!
Note: I think we should cite the names of people doing the work (code does not come out of the blue, right?), and invite users to give us feedback.

For later on: who is in charge of the blog?

%%%%%%%%%%%%%%%%%%%%%%%%%%

# A faster JabRef is coming!

Some users reported JabRef was slow on large databases (thank you for the feedback!). This was especially the case for three operations:
- loading a database
- saving a database
- searching through a database.

During a search, the user interface could become very unresponsive, which is indeed quite annoying... Well, this time will be over soon: Programmer @simonharrer has recently contributed code making search much faster (https://github.com/JabRef/jabref/pull/1100).

Preliminary tests have been carried out on a database with 100000 entries (is it big enough for you?). They shows that JabRef is now 10 times faster at searching: about 60000 entries are searched per second.

If you want to give a try: http://builds.jabref.org/master/ **(this is a development version. So, be carefully, and back up your data!)**. Your comments are welcomed at https://github.com/JabRef/jabref/pull/1100

_About opening large databases:_ work is under way to speed it up You can follow this development at https://github.com/JabRef/jabref/issues/1094

#1100 Comment 7:
Great, now we need the blog of the Stupro project so the students and alsomlep and other can add small blog posts!

#1100 Comment 8:
the blog is already online, I think. 

#1100 Comment 9:
It is here: http://www.jabref.org/blog/
For a new post, one has simply to add a new .md file with the proper header to https://github.com/JabRef/www.jabref.org/tree/gh-pages/_posts, right?

#1100 Comment 10:
@mlep 
I have a database of about 1300 articles. What is really slow with Jabref is scrolling (using either the wheel or dragging the scrollbar) - it is just never smooth.

#1100 Comment 11:
@lc9275 I have a database the same as as yours, and scrolling is ok.
First of all, could you confirm scrolling is slow for you when using the last development version (on a copy of your database): http://builds.jabref.org/master/

#1100 Comment 12:
@mlep That solved the problem, nice and smooth! I was using a dev version of a month or two ago. Thanks for the quick feedback, and I am happy it is solved in the current version.

#1100 Comment 13:
@lc9275 donations http://www.jabref.org/#sections50-donations keep us going :)

--------------------------------------------------------------
#1097 Comment 1:
I moved the field arrays to InternalBibtexFields, renamed BibtexSingleFieldProperties to FieldProperties, made AuthorNameChecker check all field with PERSON_NAMES property, and added support for integer (partial) and gender fields. Screen shot for gender field (which is mocked because of #1101), "Single male name" is now only "Male name" etc.

![screenshot-3](https://cloud.githubusercontent.com/assets/8114497/14278019/f0d90596-fb25-11e5-8733-c22862dbf387.png)

#1097 Comment 2:
Please rebase and merge. 

--------------------------------------------------------------
#1096 Comment 1:
In General it could be helpful to have a look at the DublinCoreSchema Implementation.
I think that could ease the creation of the BibTex schema

#1096 Comment 2:
Thanks for your comments! I am integrating them and am starting to get the tests working. 

One problem I am facing is that xmpbox seems to leave out all `rdf:` tags. Are those important for us?

Edit: The rdf information seems to be inserted only upon serialization.

#1096 Comment 3:
Regarding `rdf:`: This refs #938.

#1096 Comment 4:
@koppor: Thanks, this provides some context. In this PR, I'll only do the migration to the new pdf library though and not to a new format.

#1096 Comment 5:
@JabRef/developers I think I have a run into a show-stopper when it comes to replacing jempbox with xmpbox.

The problem is that the parser that ships with xmpbox, `DomXmpParser` is very strict with namespaces and cannot parse any xmp meta data that contains non-standard namespaces. Needless to say, our jabref namespaces are not contained in pdf standards... The parser relies on the standard facilities of Dom handling in Java, but it so well encapsulated that it is impossible to inject additional namespaces in any fashion. The following test illustrates this in a nutshell:

``` Java
  @Test
    public void testParsing() throws XmpParsingException {
        String testData = "<?xpacket begin=\"ï»¿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?><x:xmpmeta xmlns:x=\"adobe:ns:meta/\">\n" +
                "  <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n" +
                "    <rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\" rdf:about=\"\">\n" +
                "      <dc:description>\n" +
                "        <rdf:Alt>\n" +
                "          <rdf:li xml:lang=\"x-default\">The success of the Linux operating system has demonstrated the viability of an alternative form of software development ï¿½ open source software ï¿½ that challenges traditional assumptions about software markets. Understanding what drives open source developers to participate in open source projects is crucial for assessing the impact of open source software. This article identifies two broad types of motivations that account for their participation in open source projects. The first category includes internal factors such as intrinsic motivation and altruism, and the second category focuses on external rewards such as expected future returns and personal needs. This article also reports the results of a survey administered to open source programmers.</rdf:li>\n" +
                "        </rdf:Alt>\n" +
                "      </dc:description>\n" +
                "      <dc:creator>\n" +
                "        <rdf:Seq>\n" +
                "          <rdf:li>Kelly Clarkson</rdf:li>\n" +
                "          <rdf:li>Ozzy Osbourne</rdf:li>\n" +
                "        </rdf:Seq>\n" +
                "      </dc:creator>\n" +
                "      <dc:relation>\n" +
                "        <rdf:Bag>\n" +
                "          <rdf:li>bibtex/bibtexkey/Clarkson06</rdf:li>\n" +
                "          <rdf:li>bibtex/booktitle/Catch-22</rdf:li>\n" +
                "          <rdf:li>bibtex/journal/International Journal of High Fidelity</rdf:li>\n" +
                "          <rdf:li>bibtex/pdf/YeKis03 - Towards.pdf</rdf:li>\n" +
                "        </rdf:Bag>\n" +
                "      </dc:relation>\n" +
                "      <dc:contributor>\n" +
                "        <rdf:Bag>\n" +
                "          <rdf:li>Huey Duck</rdf:li>\n" +
                "          <rdf:li>Dewey Duck</rdf:li>\n" +
                "          <rdf:li>Louie Duck</rdf:li>\n" +
                "        </rdf:Bag>\n" +
                "      </dc:contributor>\n" +
                "      <dc:subject>\n" +
                "        <rdf:Bag>\n" +
                "          <rdf:li>peanut</rdf:li>\n" +
                "          <rdf:li>butter</rdf:li>\n" +
                "          <rdf:li>jelly</rdf:li>\n" +
                "        </rdf:Bag>\n" +
                "      </dc:subject>\n" +
                "      <dc:title>\n" +
                "        <rdf:Alt>\n" +
                "          <rdf:li xml:lang=\"x-default\">Hypersonic ultra-sound</rdf:li>\n" +
                "        </rdf:Alt>\n" +
                "      </dc:title>\n" +
                "      <dc:date>\n" +
                "        <rdf:Seq>\n" +
                "          <rdf:li>1982-07</rdf:li>\n" +
                "        </rdf:Seq>\n" +
                "      </dc:date>\n" +
                "      <dc:format>application/pdf</dc:format>\n" +
                "      <dc:type>\n" +
                "        <rdf:Bag>\n" +
                "          <rdf:li>InProceedings</rdf:li>\n" +
                "        </rdf:Bag>\n" +
                "      </dc:type>\n" +
                "    </rdf:Description>\n" +
                "    <rdf:Description xmlns:bibtex=\"http://jabref.sourceforge.net/bibteXMP/\" rdf:about=\"\">\n" +
                "      <bibtex:abstract>The success of the Linux operating system has demonstrated the viability of an alternative form of software development ï¿½ open source software ï¿½ that challenges traditional assumptions about software markets. Understanding what drives open source developers to participate in open source projects is crucial for assessing the impact of open source software. This article identifies two broad types of motivations that account for their participation in open source projects. The first category includes internal factors such as intrinsic motivation and altruism, and the second category focuses on external rewards such as expected future returns and personal needs. This article also reports the results of a survey administered to open source programmers.</bibtex:abstract>\n" +
                "      <bibtex:author>\n" +
                "        <rdf:Seq>\n" +
                "          <rdf:li>Kelly Clarkson</rdf:li>\n" +
                "          <rdf:li>Ozzy Osbourne</rdf:li>\n" +
                "        </rdf:Seq>\n" +
                "      </bibtex:author>\n" +
                "      <bibtex:bibtexkey>Clarkson06</bibtex:bibtexkey>\n" +
                "      <bibtex:booktitle>Catch-22</bibtex:booktitle>\n" +
                "      <bibtex:editor>\n" +
                "        <rdf:Seq>\n" +
                "          <rdf:li>Huey Duck</rdf:li>\n" +
                "          <rdf:li>Dewey Duck</rdf:li>\n" +
                "          <rdf:li>Louie Duck</rdf:li>\n" +
                "        </rdf:Seq>\n" +
                "      </bibtex:editor>\n" +
                "      <bibtex:journal>International Journal of High Fidelity</bibtex:journal>\n" +
                "      <bibtex:keywords>peanut, butter, jelly</bibtex:keywords>\n" +
                "      <bibtex:month>#jul#</bibtex:month>\n" +
                "      <bibtex:pdf>YeKis03 - Towards.pdf</bibtex:pdf>\n" +
                "      <bibtex:title>Hypersonic ultra-sound</bibtex:title>\n" +
                "      <bibtex:year>1982</bibtex:year>\n" +
                "      <bibtex:entrytype>inproceedings</bibtex:entrytype>\n" +
                "    </rdf:Description>\n" +
                "  </rdf:RDF>\n" +
                "</x:xmpmeta><?xpacket end=\"w\"?>";
        InputStream is = new ByteArrayInputStream(testData.getBytes(StandardCharsets.UTF_8));
        DomXmpParser parser = new DomXmpParser();
        XMPMetadata meta = parser.parse(is);
    }
```

The result is:

``` Java
   org.apache.xmpbox.xml.XmpParsingException: Cannot find a definition for the namespace http://jabref.sourceforge.net/bibteXMP/
        at org.apache.xmpbox.xml.DomXmpParser.checkPropertyDefinition(DomXmpParser.java:853)
        at org.apache.xmpbox.xml.DomXmpParser.parseChildrenAsProperties(DomXmpParser.java:290)
        at org.apache.xmpbox.xml.DomXmpParser.parseDescriptionRoot(DomXmpParser.java:234)
        at org.apache.xmpbox.xml.DomXmpParser.parse(DomXmpParser.java:198)
        at net.sf.jabref.logic.xmp.XMPUtilTest.testParsing(XMPUtilTest.java:1444)
```

So unless there is something I did not see, the question is how to proceed. I do not think we should write our own customn xmp parser, as long as jempbox still exists. We might be able to update to pdfbox-2.0.0 and keep jempbox, but that needs to be evaluated separately.

#1096 Comment 6:
From what I see we are not the only ones have problems with the XMPBox DomParser.
Maybe you could ask on the pdfbox mailing list if there is a way to get it done 

#1096 Comment 7:
+1 for asking at the mailing list. Or report an issue at https://issues.apache.org/jira/browse/PDFBOX/. Others seemed to have had issues too: https://issues.apache.org/jira/browse/PDFBOX-2416.

Are we sure that old JabRef versions wrote the correct XMP data? :innocent: 

Do we really need that XMP thing. Shouldn't we replace it in the long term by something else? See https://github.com/JabRef/jabref/issues/938#issuecomment-195750242

I cannot really judge now, because I have too little knowledge about this metadata thing in PDFs.

#1096 Comment 8:
Ok, I will ask at the mailing list, but I get the feeling that [the developers of pdfbox switched to xmpbox _because_ they want strict parsing (i.e., rejecting non-standard extensions to xmp meta data](https://mail-archives.apache.org/mod_mbox/pdfbox-dev/201111.mbox/%3CCAMPCuthT8-xunvhRxgn86v23hRVFptRsNSGsj63FUtNgjXx-6Q@mail.gmail.com%3E).

Regarding the relevance of the XMP feature, I really have no clue. I am not using it and do not know someone who does. If we do not need it, I would be very happy to throw it away. Is there any chance to find someone who knows and uses the feature and can shed some light on this? 

We could disable it for v3.3 and wait until someone complains ;-)

#1096 Comment 9:
And here is [the reply from the pdfbox mailing list](http://mail-archives.apache.org/mod_mbox/pdfbox-users/201604.mbox/%3C570BD3AF.4040800%40t-online.de%3E):

> This is a known problem, yes xmpbox does not support custom namespaces, 
> this was noticed too late (xmpbox is closely related to preflight, which 
> checks for PDF/A). It is on the list of things to discuss for 2.1
> 
> "- discussion/decision on XMP (shall we enhance XMPBox, restore Jempbox, 
> base on Adobe's XMP library, join forces with the FOP project …)"
> 
> Until then, the workaround is to keep using jempbox.

So that pretty says it. For now, we cannot switch to xmpbox. I'd suggest to leave this PR open until there is a new release of xmpbox.

#1096 Comment 10:
I just close the issue. We will find it again when [querying for on-hold issues](https://github.com/JabRef/jabref/issues?utf8=%E2%9C%93&q=label%3Aon-hold+).

#1096 Comment 11:
What is the status here? I couldn't find any related bug on https://issues.apache.org/jira/browse/PDFBOX/fixforversion/12328837/?selectedTab=com.atlassian.jira.jira-projects-plugin:version-summary-panel.

#1096 Comment 12:
There is no change, really. We cannot use the most recent version of pdfbox, so our options are:
1. Completely re-write XMP-handling with a different library
2. Encode everything into the dublin core schema instead of a BibTeX schema
3. Wait and see if custom schemas are reenabled with pdfbox 2.1

Currently, we are going for option 3. However that might be a long wait. "Long" as in "years". 

#1096 Comment 13:
:+1: for dublin core. Seems to be the best option.

#1096 Comment 14:
This was the basis for https://github.com/JabRef/jabref/pull/3710, so this is integrated and not a freeze anymore.
#1096 Comment 15:
I am glad to hear that my work was of some use in the end :)
--------------------------------------------------------------
#1095 Comment 1:
This can be merged. The questions remain, but are not really affecting the PR as such.

--------------------------------------------------------------
#1093 Comment 1:
LGTM :+1:
Just some small remarks.

#1093 Comment 2:
I further refactored the OS classes to remove redundant code.
Edit// It would be nice if someone could test this on OSX and Linux, too. Only to make sure that all actions still work correctly. 

#1093 Comment 3:
I liked the fix before. I don't like the refactoring so far. For me it would have been a better solution to first merge the fix and later discuss the changes in the logic and the general architecture in a separate PR.

#1093 Comment 4:
@stefan-kolb  Well. That would be no problem. as I have split it up in 2 commits.
What do the others think?

#1093 Comment 5:
I looked a bit further around and saw some more relating things to ExternalFileType which could be improved. However, that would take some more time to fix and be beyond this scope. Will do that in a different PR.
For this PR and the 3.3 I would use the first commit as base with minor modifications (cmd to explorer)

#1093 Comment 6:
Rebased the changes. 

#1093 Comment 7:
:+1: LGTM

#1093 Comment 8:
LGTM :+1: 

--------------------------------------------------------------
#1090 Comment 1:
Looks good! Just some minor comments. 

#1090 Comment 2:
Apart from the minor comments, looks good to me. Just fix these and this PR is good to go.

Regarding the import statements: It reads a little strange in this PR, as sometimes the statements are coalesced to a `*` and sometimes they are expanded (which is probably done by your IDE). However, we have no policy on that and I am not aware of a generally-accepted policy or performance-related benefits of either version. So it doesn't really matter from my point of view.

#1090 Comment 3:
I think expanded is quite nice since it shows exactly which dependencies
are added or removed. On the other hand they lead to quite a lot of "unused
import" warnings...

#1090 Comment 4:
Thanks for your comments. I will address them later this evening. 
Regarding the import stuff, I think we should discuss it at  #1091. I have absolutely no opinion about combining them or the right sort order (I never really cared about the imports so far), but I think we should come up with an accepted standard so that not every PR resorts imports... 

--------------------------------------------------------------
#1089 Comment 1:
I rearranged the Imports a bit (using the settings @tobiasdiez describes in #1091).

#1089 Comment 2:
Looks good to me me! @JabRef/developers anybody else any comments? Maybe we could integrate that in v3.3 already?

#1089 Comment 3:
Apart from my comment regarding the CHANGELOG this is fine and can be merged.

#1089 Comment 4:
Moved the changelog entry from `fixed` to `changed`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1086 Comment 1:
LGTM :+1:

#1086 Comment 2:
Are you done? @oscargus :) Stefan and myself are currently looking at the pull requests and trying to reduce the huge amount (>30) by merging them when suitable.

#1086 Comment 3:
Now I think I'm done. :-) If nothing else I have teaching now...

--------------------------------------------------------------
--------------------------------------------------------------
#1084 Comment 1:
Some minor fixes. 

#1084 Comment 2:
Disable_highlight_groups_matching_entries= is the last entry under the groups menu. It disables highlighting of groups. I propose the simple `Keine Gruppen hervorheben` as a translation.

#1084 Comment 3:
Fixed some missing dots and also translated the missing strings in Menu properties 
Fix failing test

#1084 Comment 4:
So bin alle nochmal durchgegangen. Gute Arbeit! :smile: Wenn du die Anmerkungen noch einarbeitest können wir die Übersetzungen mergen, denke ich.

#1084 Comment 5:
Reworked the commented sections.
BibTex is now BibTeX with uppercase X in all lang files

#1084 Comment 6:
LGTM :+1: 

#1084 Comment 7:
LGTM too

#1084 Comment 8:
I now have a problem with #1087. 
When I try to merge it, I get all things double

#1084 Comment 9:
Probably an encoding problem. Are you using Eclipse for editing the
translations?

#1084 Comment 10:
Nope, I use Notepad++. I think the problem is that @tobiasdiez added a String in all lang files.
The problem I have now is that the untranslated German Strings get added  again when I merge his commit into my branch.
ATM I have the fear that my translations would somehow get lost. 
And yes, encoding is another problem. Now I have all Strings escaped...

#1084 Comment 11:
Make a copy of your file and try rebase instead of merge. Not sure if it
actually helps, but I only merge from upstream/master, when updating PRs I
always rebase  (not saying that it is better, but I know how it works...).

#1084 Comment 12:
Now all changes included and rebased 

--------------------------------------------------------------
#1083 Comment 1:
Nice work.

Some comments:
- Why did you disable the test? Why did it fail on the CI server?
- Due to having a the BibDatabaseContext, one could remove a lot of unused fields for the metadata or the bibdatabase (see codacy checks)
- The new method about determining the file directories within the BibDatabaseContext uses the preferences a lot which we did not want in the logic part. I would not change this at the moment, but just to keep in mind for further changes, as they should be moved to the Defaults class which encapsulates these preferences for a particular BibDatabaseContext. 
- It would be nice to use `Path` instead of `File` which is the new API since Java 7. Maybe something for our cleanup advocate @oscargus ? :)

#1083 Comment 2:
To be honest, I have no idea why the test fails. Apparently it can't find the build.gradle file...I guess that the mocking fails, maybe because of different preferences. Is it ok if I merge this PR in and create a new issue for the test and the usage of global preferences in BibDatabaseContext (since I think both issues are related in the end)?

#1083 Comment 3:
Hm, I do not like that, as there is a reason why the test fails. And this functionality is critical. Master should be stable. 

#1083 Comment 4:
@tobiasdiez Could you provide the full error message of the failing test? Maybe someone has an idea how this could be fixed 

#1083 Comment 5:
As I thought, in the end it was only a problem with the mock. Should be fixed now.

--------------------------------------------------------------
#1082 Comment 1:
@Siedlerchr: yes, I thought of that independently. :-)

@tobiasdiez: not that I've seen. I cannot really figure out why this was done in the first place. With the change, the UnsupportedEncodingException is caught among other potential fetching problems with IOException in the next higher method and it is returned that it wasn't able to fetch.  Not obvious why one would like to bypass this and send a RuntimeException up among the calls.

#1082 Comment 2:
Ok, then this can be merged in my opinion.

--------------------------------------------------------------
--------------------------------------------------------------
#1079 Comment 1:
Thanks!

--------------------------------------------------------------
--------------------------------------------------------------
#1077 Comment 1:
The current auto completion has two modes:
- a case sensitive mode
- a case insensitive mode

The case sensitive mode is activated when one types a word that has mixed case, e.g., `gZhhUh`.
If the word is only lowercase the auto completion will perform a case insensitive mode.

The case sensitive mode is straight-forward: It will lookup a word that can be completed from the current partial word.
Case insensitive lookup tries to find a word that can be completed from the input based on ignore case search. If it found one, it will still present the word in its original casing, e.g., `some -> Something`

**Discussion point**
What is the purpose of the case-insensitive mode? The detection (only lowercase in word) seems arbitrary to me. How should the completion be performed in general or what are typical algorithms for this? I would either suggest case-sensitive or a possibility to configure this but no auto detection?!

All Shells (UNIX) are case sensitive by default.

#1077 Comment 2:
Ok, I got something working here now. Massively refactored the code (god was this hard to read :sob:).
I'm still not quite happy with the result, but I hope this will be a starting point for more improvements with a readable codebase.

@JabRef/developers WDYT? I'd be happy if you try the version with a few use cases of your own to check whether it is working correctly for you. http://builds.jabref.org/auto-complete/

#1077 Comment 3:
LGTM :+1:

#1077 Comment 4:
@JabRef/developers Does it work for you? Should we merge this in or any further suggestions?

#1077 Comment 5:
Would it make sense for the NameAutoCompleter to work for all fields with BibtexSingleFieldProperties.PERSON_NAMES set? I do not really know how it works today, but I seem to recall that it wasn't obvious if the same AutoCompleter was used for both "author" and "editor". (Haven't had time to test it yet.)

#1077 Comment 6:
Would be possible, currently it only works on author and editor.

```
if ("author".equals(fieldName) || "editor".equals(fieldName)) {
             return new NameFieldAutoCompleter(fieldName, preferences);
```

#1077 Comment 7:
I quick checked. Currently only those two fields have the property `BibtexSingleFieldProperties.PERSON_NAMES` set.

#1077 Comment 8:
Correct but there's is a PR (don't know the number now) which adds 20 or so
fields.

#1077 Comment 9:
Ah ok. We could do something like this:

```
if (InternalBibtexFields.getFieldExtras(fieldName).contains(BibtexSingleFieldProperties.PERSON_NAMES)) {
            return new NameFieldAutoCompleter(fieldName, preferences);
        }
```

But I get NullpointerExceptions in the tests due to the InternalBibtexFields relying on Globals.prefs (InternalBibtexFields.java:125)

#1077 Comment 10:
OK! These dependencies are annoying... Mock JabRefPreferences?

#1077 Comment 11:
> What is the purpose of the case-insensitive mode? The detection (only lowercase in word) seems arbitrary to me.

Is this still a valid question? If yes: I was thinking that casing causes more keys to type (shift key). Thus: being lazy should instruct JabRef to search for everything. Being non-lazy (capital letter), I want the tool to search only for these cases as I demand something specific.

In [powerline-shell](https://github.com/milkbikis/powerline-shell) or Windows CMD, the search IMHO also is case-insensitive.

I have not researched for typical algorithms the recent time. When refactoring the auto completion a few years ago, I found nothing useful. However, I did not document my search.

#1077 Comment 12:
Quick test:
- author field
- `Kwantes, PieterM. and Van Gorp, Pieter and Kleijn, Jetty and Rensink, Arend`
- Change `V` in `Van Gorp` to `v`
- go to the end of the line, type `and v`.
- One cannot type `v`
- title field
- Text: `Towards Compliance Verification Between Global and Local Process Models`
- Go to the end of the entry
- type `and`
- `about` is displayed and the accepted characters are `abo` and not the typed `and`.

The typed characters have to be kept! The autocompletion must not override the user's input.

I can send you my large bib file privatly. Don't want to share it publicly.

#1077 Comment 13:
```
Exception in thread "AWT-EventQueue-0" java.lang.StringIndexOutOfBoundsException: String index out of range: -67
        at java.lang.String.substring(String.java:1931)
        at net.sf.jabref.gui.autocompleter.AutoCompleteListener.insertKeyAndSuggestion(AutoCompleteListener.java:148)
        at net.sf.jabref.gui.autocompleter.AutoCompleteListener.keyTyped(AutoCompleteListener.java:104)
        at java.awt.Component.processKeyEvent(Component.java:6490)
```

#1077 Comment 14:
This PR is superseeded by #1136

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1072 Comment 1:
I use doubleclick and think it is a quite neat feature. Especially when only a single field is available.

#1072 Comment 2:
Regarding browse I believe it can be useful in combination with filespecific fields (which we currently try to avoid, so I'm fine with the removal).

#1072 Comment 3:
Double-click might be a neat feature, but is neither intuitive from a UI usage perspective nor shown anywhere. So it is just a feature that can be used by insiders which is really not what I think is our intention.

#1072 Comment 4:
Maybe. What about a tool tip text then? I would expect requests to get it back if we remove it.

#1072 Comment 5:
Intuitive to me would be 2 options:
- Adding a open button to the right (ugly)
- Highlighting the text so that one can see it is clickable (problems when one wants to only edit it)

#1072 Comment 6:
I use that doubleclick feature, too. It is natural to expect Jabref to open the link etc then.
I agree with @oscargus, to me a tooltip à la "Double click to open URL/DOI" would be an easy solution

#1072 Comment 7:
Ahh, I realise that I have been talking about the entry table and not the
entry editor (which I now realise the discussion most likely is about).

Still, I think that a tooltip might do the trick. One can also double click
the date field to set the current date and I think the owner field to
update the owner.

#1072 Comment 8:
>  It is natural to expect Jabref to open the link etc then.

To be honest I've never experienced that double clicking a **text input field** opens a link or does anything with the text except **marking** it.

#1072 Comment 9:
@stefan-kolb  I thought you meant the Entry Table DOI Field

#1072 Comment 10:
I mean this DOI field:
![image](https://cloud.githubusercontent.com/assets/2141507/14186710/e9362322-f77f-11e5-8fac-4b1af2ec99b1.png)

#1072 Comment 11:
I would propose to add an inline-button, in the textbox, similar to something like the clear symbol here
![](http://knackforge.com/sites/default/files/selection_032.png)
which appears on mouse-over and opens the url. Not sure if this can be done with Swing or should wait until JavaFX. Until then an ugly `Open` button might be an interim solution.

#1072 Comment 12:
@tobiasdiez We have already discussed with the "clear search" button. Unfortunately, this is no built in function of Swing and requires some quick ugly hacks to implement. But I agree, in general that would be the nicest solution.
However, for the moment I would add an "open" button - especially as @stefan-kolb will already add another button for the "fetch from DOI" logic.

#1072 Comment 13:
Ok, this is ready for your comments!

#1072 Comment 14:
Looks good to me! I'd really like to keep the right-click menu though.

With this PR the use of the entry editor has slightly changed from editing to actually using the information (although it was hidden there earlier through double-click). Not sure if it is worth thinking about what we really want the entry editor for.

#1072 Comment 15:
:+1: LGTM

--------------------------------------------------------------
#1071 Comment 1:
Fixes #989 

#1071 Comment 2:
Good work. When this is done I will add the missing German strings.

#1071 Comment 3:
@Siedlerchr You should wait with translating as a) we'll discuss #1013 and 920 today in a DevCall which is highly affecting the l10n files as there will be a whole bunch of new/changed translations and b) we should ask our longstanding German translator @domwass if he has time to translate. (As I learned that he's more experienced than me producing better and more consistent translations :wink:)

#1071 Comment 4:
Regarding my time: there is none left at the moment (I’m writing a book which is due in two weeks). So go ahead, I will look into it as soon as I will have some time left. 

#1071 Comment 5:
Thanks for the feedback! And good luck with your book!

--------------------------------------------------------------
#1069 Comment 1:
GVK's `date` is always 4 digits?

#1069 Comment 2:
I use it a lot, and never got other "dates" than 4-digits.

#1069 Comment 3:
@koppor You changed this in b2c8db5458fb46b5581b7018897f67c8cf010bcc from year to date. 

The reason seems to be related to #1018: GVK returns Biblatex entries (regardless of the chosen mode)...

#1069 Comment 4:
OK for revert. Current JabRef displays "year" in the "Required fields", which it IMHO did not back in 2015.

#1069 Comment 5:
Reverted in 93fdb02ee5889d0e0cf9b41a2af763cc306fbe49

Thanks for the help, especially @teertinker :smile:  

--------------------------------------------------------------
#1067 Comment 1:
Nice, when you're ready to merge you can also add a changelog entry :smile: 

#1067 Comment 2:
Tricky :-) With my limited non-native swedish, I can only be of limited help. Maybe an alternative? After all, a BibTeX entry is nothing but an _element_ of a BibTeX database. So how does _ett BibTeX element_ sound to you?

#1067 Comment 3:
There's no "Eintrag" in Swedish? :smile: 

#1067 Comment 4:
According to my dictionary, Eintrag translates to införande (~ Eintragung, Registrierung) or anteckning (~ Anmerkung), neither of which seem very fitting here.

#1067 Comment 5:
Google proposes "entry - inträde, post, inresa, tillträde, artikel, entre".
But as I do not speak any swedish I cannot decide whether those make any sense ;-)

#1067 Comment 6:
Element is OK but there might be better ones (strictly it can be used, but sounds a bit _krystat_). Same with post. Artikel is sort of interesting as well, but there's the duplicate meaning article.

#1067 Comment 7:
I think post is probably the best. That is what is commonly used in databases, so from that perspective it should be OK. Thanks all for your input!

#1067 Comment 8:
Just merge this before releasing 3.3. Most menu entries are translated and a decent part of the other strings (I use a plain text editor, so no idea what percentage). I will add a few more every now and then, but would need to install some standard software in Swedish to figure out certain terms, like "redo"... ;-)

--------------------------------------------------------------
#1066 Comment 1:
Were does the font come from? Helvetica is not a system font on WIndows for example.
Will be a fallback to Sans-serif then?!

#1066 Comment 2:
I would rather suggest to use one of the Open-Source Fonts from the LIberation Sans family.
They are an replacement to Arial and they are used in LO/OO, too. 
So Linux-users are not required to install the propietary fonts.

https://en.wikipedia.org/wiki/Liberation_fonts
Or for Helvetica a replacement of the Tyre Gyro fonts 
https://wiki.ubuntuusers.de/Schriftarten/

#1066 Comment 3:
Helvetica and Arial will give the same font on all systems as they are both in the list of "standard sans-serif fonts", so on Windows Arial will be used and on Linux whatever the standard sans-serif font is (probably as Christoph says). To me Arial is just the ugly cousin of Helvetica (which is one of the standard 14 postscript fonts), so it is more a matter of principles and values rather than any practical difference (unless you have both installed, in which case you most likely work with typography and probably prefer Helvetica anyway).

#1066 Comment 4:
An option is of course to go with "sans-serif", see http://www.w3schools.com/cssref/pr_font_font-family.asp

#1066 Comment 5:
Can you add a image showing the differences here? As the Fallback will probably work on every OS I am OK with your change.

#1066 Comment 6:
the "default" solution for this in HTML/CSS would be `<font face="Arial, Helvetica, sans-serif">...</font>`

#1066 Comment 7:
There shouldn't be any visible differences (although I think I do have
Helvetica installed). Maybe the best thing is to skip the personal
preferences and go with sans-serif.
Den 31 mar 2016 11:29 skrev "Stefan Kolb" notifications@github.com:

> Can you add a image showing the differences here? As the Fallback will
> probably work on every OS I am OK with your change.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1066#issuecomment-203848749

#1066 Comment 8:
Yes, if we were convinced that Arial is the best font to be used. Which I do not think we are, but just put the standard sans-serif Windows font there. 

#1066 Comment 9:
> To me Arial is just the ugly cousin of Helvetica 
> 
> There shouldn't be any visible differences

This is why I never really understood these _Arial vs. Helvetica_ discussions... :stuck_out_tongue_winking_eye: 

#1066 Comment 10:
I think the main thing is that Arial is considered to be Microsoft (which
strictly isn't true) and therefore bad. Especially if you grew up with Unix
and Postscript and so on.

And they are visually not identical. It was more a statement of that the
HTML renderer will pick the other if the requested isn't available.

However, to avoid (more) purist discussions I will change to sans-serif and
then it is up to the OS to decide which is the "best"
Arial/Helvetica/Whatever font available.

#1066 Comment 11:
:+1:

We should not waste more time on this ;-)

For me also the order "Helvetica, Arial, sans-serif" would be okay...

#1066 Comment 12:
While reading on Arial vs Helvetica I found this little quiz where one of the logos is in Arial the other in Helvetica. I could not see any differences...  :astonished:
http://www.ironicsans.com/helvarialquiz/

#1066 Comment 13:
:-)

19 out of 20, but I must admit that a few days ago I would have ended up on
about 10 (random).

--------------------------------------------------------------
#1064 Comment 1:
No test, because a test requires an online connection? :innocent:
Other than that: LGTM :+1:

#1064 Comment 2:
LGTM :+1:

--------------------------------------------------------------
#1061 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#1060 Comment 1:
Thanks :+1: 

--------------------------------------------------------------
#1057 Comment 1:
@tobiasdiez  Coud you or someone else merge this in please? Only 1 line affected.

--------------------------------------------------------------
#1056 Comment 1:
Export now all entries by default

--------------------------------------------------------------
#1054 Comment 1:
Context: 
- Decision to add new entries at the end
- User wants to have other sort options
- User wants to have other sort options as default

The idea is that a user can configure a `bib` template, which contains the default "preferences" for a database, such as the bibtex key patterns and the sort order configuration. When the user creates a new `bib` file, the template is used.

We discussed sometime ago the plethora of preferences. Maybe that approach could help to reduce that. However, the system of a `bib` template could increase complexity. Since I care for sharing and group editing of `bib` files, I want to a) have as much as possible bib-affecting configurations (directory, key patterns, ...) in the `bib` file itself (See for instance #180) and b) enable new users to have a properly configured `bib` file and not requiring an expert to configure JabRef.

a) is IMHO mostly achieved
b) is some thing we are working on to have correct default settings. My personal feeling is that some groups, however, do not want to follow our conventions (for instance, bibtex keys, sort order) and thus require different settings.

Maybe I should open a separate issue asking for support of "bib template". :innocent: 

#1054 Comment 2:
@koppor commented on the wrong issue?

#1054 Comment 3:
@tobiasdiez No, not the wrong issue. I tried to give some context above. Hope, that helps to understand my text.

--------------------------------------------------------------
--------------------------------------------------------------
#1052 Comment 1:
Since now there is still a bit time until 3.3 will be released, I would prefer if this PR is merged before the release. I think it is stable enough. Main reason is that the functionality is really handy in conjunction with JabFox since Zotero saves the files in an odd Mozilla profile folder.

#1052 Comment 2:
LGTM :+1: 

Please rebase and merge this in. 

--------------------------------------------------------------
#1050 Comment 1:
Looks good to me :+1: Just a few small remarks which should be fixed then this can be merged in.

#1050 Comment 2:
@tobiasdiez  Applied your proposed changes.
Instead of "Run selected field formatters" it is now  "Run listed field formatters"

#1050 Comment 3:
I think this looks good. @koppor what do you think?

#1050 Comment 4:
Why is this assigned to @koppor ? What is blocking this?

#1050 Comment 5:
 #1038 is my request and I'd like to have the example displayed. For that, I need #1159 to get through.

My aim to have the dialog understandable to users.

Further, I need to test the thing, for which I didn't have time yet. :see_no_evil: 

#1050 Comment 6:
<s>\- [ ] When changing the focus of the list, the description does not update. Is it possible to update the description when the focus of the list changes?</s>

<s>\- [ ] When the formatters are disabled, it is not clear, where the description comes from. Maybe hide the field?</s>

![grabbed_20160410-140135](https://cloud.githubusercontent.com/assets/1366654/14410050/ce3f2512-ff24-11e5-96a1-c60a92247b76.png)
- [ ] When I enable the formatting, no formatter is selected. Could there the first formatter (if available) be enabled?

Change at the combobox works.

#1050 Comment 7:
@koppor  The focus of the description only updates when you select it in the combobox. It would be otherwise too confusing, if the combobox displays Formatter A and you select Formatter B in the list. Which one should be displayed then?
From my point of view the Workflow atm is: Select the field e.g. abstract and select the formatter to add to the list. Therefore the description is referring to the current selected formatter.

The other things regarding the enabling/disabling could be done easily

As tomorrow my new semester starts, I don't know if I can get this whole thing done in time for v3.3 Release on (Friday?). 

#1050 Comment 8:
@Siedlerchr Do you still have time?

#1050 Comment 9:
Yep, wil look at it this evening or tomorrow morning.

#1050 Comment 10:
The thing is that a user might now, what a specific formatter does when opening the dialog the first time. As far as I remember, we have some default formatters enabled and the user doesn't know what to do.

<s>Therefore, this quick suggestion. Note that I added the formatter string at the sketch at #1038. That was aimed to reduce confusion somehow :innocent: </s>

Decision from developers: Tooltip on existing formatters is enough.

#1050 Comment 11:
Decision: we merge as is. @Siedlerchr Could you just resolve the conflicts? :innocent: Thank you for working on it.

#1050 Comment 12:
@Siedlerchr Can you please rebase this, so we can merge?

#1050 Comment 13:
Will do this today evening.

2016-04-13 10:51 GMT+02:00 Stefan Kolb notifications@github.com:

> @Siedlerchr https://github.com/Siedlerchr Can you please rebase this,
> so we can merge?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1050#issuecomment-209310723

#1050 Comment 14:
We decided to use the existing translation string instead of introducing new ones a few days before the release. (Refs #1128)

"Run_listed_field_formatters" (wished) -> "Run field formatters" (existing)

#1050 Comment 15:
[![LGTM](http://lgtm.in/p/4EbBDqGPn)](http://lgtm.in/i/4EbBDqGPn)

--------------------------------------------------------------
--------------------------------------------------------------
#1047 Comment 1:
Now I think it is time to have this checked. A build can (soon) be downloaded from http://builds.jabref.org/oorefactoring

The split between gui and logic is not done yet, but is rather straightforward (waiting for some opinions on com.sun.star in logic). Also, the improved detection is not done, but seems like a separate issue somehow (and currently I do not have any good idea how to do that nor do I have access to all platforms...).

The major change is the new style selection dialog and underlying mechanism. Now, all files are shown in a single dialog, so no automatic searching of all subdirectories etc. This will also allow for easier integration of more JabRef-provided style files (just add the resource name to StyleLoader). The drawback is that users will have to add all their style files again.

![newstyledialog](https://cloud.githubusercontent.com/assets/8114497/14076209/1839ee08-f4e0-11e5-94c4-4ed398a19151.jpg)

These changes made some preferences obsolete. Is there a mechanism to remove obsolete preference keys from the preference file?

#1047 Comment 2:
OK, seems like I did a bit of work on the autodetection anyway...

Both Windows and OS X is restructured and something similar can be done for Linux. However, I'm not convinced with the suitability of the current default directories for Linux. Does anyone have some information about where different distributions tends to install OO/LO? My Linux machine is centrally administered and have all software in /sw, but I guess that isn't really standard...

Much quicker on Windows now and in case one have both OO and LO installed on OS X you get to pick which one. Still untested on OS X, but I didn't change anything fundamental...

#1047 Comment 3:
On Linux there a few standard dirs for software.
I could later check on my other Ubuntu pcs where it is installed.
At the meantime this post lists all the basic (standard) bin dirs
http://askubuntu.com/questions/60826/where-is-the-default-folder-for-apps

#1047 Comment 4:
Regarding your question on structuring: There should be no dependencies to any GUI technology in the classes in logic. That is, no class in logic should have a UI class in its import statements (that is ensured automatically by the architecture tests). 

Transitive dependencies that come via external jars are a gray area to some degree (for reasons of practicality). If you have a jar that bundles UI and logic code, it is fine to use it in our logic package as long as you do not access the UI classes in the jar. Otherwise, better keep these dependencies in the gui package. 

You have mixed types of dependencies. `com.sun.star.beans` and `com.sun.star.container` can be referenced in logic without problems. `com.sun.star.uno` should also be fine. `com.sun.star.text` has GUI and non-GUI content, so it depends on the usage, and `com.sun.star.frame` should definitly not be referenced from logic. Unless you can separate these dependencies, rather keep the referencing classes in GUI.

#1047 Comment 5:
Thanks for clarifying. I guess it is really OOBibBase and OOUtil that require a bit of thinking. OOUtil is primarily a set of static methods, one which contains swing stuff, so that can easily be moved to a separate class (or just into a calling class). Regarding the sun stuff it is indeed not obvious where to draw the line, but I'll make an attempt based on your discussion.

Exceptions will go based on where they are thrown unless that somehow breaks the logic vs gui rule (although I do not think that will/can happen).

#1047 Comment 6:
`OpenOfficeFileSearch` and `AutoDetectPath` can be improved for Linux and once that is done, the idea is to make a similar flow as for Windows/OSX. That is: get list of candidate directories, search through them, if nothing found open a file dialog, if more than one found pick from list, finalize. Similar to JabRefDesktop one can have an interface and then a class for each OS. I'm a bit confused regarding Linux at the moment though, so I need much more input there. Maybe it is better to merge after review and sort out the Linux search and the structure later.

#1047 Comment 7:
I had a look at your distribution of oo classes to the gui/logic packages and it seems fine! I also aggree that we could merge this now and improve linux support later. The current PR is already quite big and, thus, quite hard to review. Most codacity issues are uncritical from my point of view.

Unless you do not think that something is missing, we can rebase and merge.

#1047 Comment 8:
I think it should be as good as/slightly better than before so I'll try to
rebase later on tonight and then merge it in.

#1047 Comment 9:
@oscargus  The only problematic I see from the codacy is the catching of a Throwable in 
`src/main/java/net/sf/jabref/gui/openoffice/AutoDetectPaths.java`
`public boolean runAutodetection() {`

Avoid  catching a Throwable or a general Exception as it may include non-related errors, e.g. OutOfMemory or others.
http://javarevisited.blogspot.de/2014/02/why-catching-throwable-or-error-is-bad.html

#1047 Comment 10:
@Siedlerchr To be fair to @oscargus: That issue did exist before. Codacy sometimes just detects issues as new, although they are old, if a related class is modified.

Anyway, it is certainly an issue and is also easily corrected, so @oscargus please change it to a proper exception before merge.

Btw.: JabRef is full of such issues. Just search for usages of Throwable. If anybody has the time and is in the mood for easy and small code improvements, go ahead :-)

#1047 Comment 11:
Yes, there are a number of Throwables caught in JabRef, but I haven't dared
to change them as I do not know enough about it. But I've been tempted to
just replace all Throwable with Exception throughout the code...

#1047 Comment 12:
And, yes, moving the files shows all issues as new and no fixed issues...

#1047 Comment 13:
Ok, Exception is better than Throwable, but still quite bad :-) You should always catch the most concrete type (IOException, etc.) to avoid catching other Exceptions accidently. That really depends on the code inside the try-catch-block.

#1047 Comment 14:
One of the sun methods throw Exception. Apart from the Throwable I believe
that most of the code catches as detailed exceptions as possible  (as I
spent some time earlier tuning that). If I remember correctly quite a bit
of the Exception/Throwable catching in JabRef is of a rather generic type:
run some methods which doesn't explicitly throw something and surround them
with a try block just in case so that nothing breaks if an exception is
thrown (to avoid halting the application I assume). Most old GUI-build code
is like this.

I'll have a look at the Throwable and see what I can do.

#1047 Comment 15:
Good to know about the Codacy issues thing. Already wondered a couple of times about this :confused: 

For the concrete case the init method which shows the dialog seems to be responsible for it.
A quick look shows that there is no Exception Handling necessary.
To be on the safe side you could initialize the foundPahts to false.

One minor thing in the long Autodetect method : I would suggest to split up each case specifid (OSX, Windows, Linux) in an own method and then simply returning true/false. 
Apart from this: Great work :+1: 

#1047 Comment 16:
Thanks!

My plan is to split it in another way, selecting a class for the commands which are different, but we'll see what happens in the end. Separate functions would have been a good idea now indeed.

--------------------------------------------------------------
#1046 Comment 1:
Looks good! Have you tried the formatter in bst and seen if it formats incorrectly as well? I think that we should try to use that as much as possible instead of trying to reinvent it.

The only major comment is that getAuthors return different types. I think it makes sense to keep getAuthorList (or use a different name).

--------------------------------------------------------------
#1045 Comment 1:
If it was called "Find/replace" it would belong in search. ;-) (I guess that is the historical reason, but I agree that Edit is better.)

#1045 Comment 2:
No objections here. Can you do a rebase, so we can merge it for v3.3?

--------------------------------------------------------------
--------------------------------------------------------------
#1041 Comment 1:
Is the parsing case insensitive? Is that tested?

#1041 Comment 2:
@oscargus The value is parsed case-insensitive.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1037 Comment 1:
I don't like the boolean parameter to much. I would prefer if the `performSearch` method is not changed but a second method `performLiveSearch` (including the check) is introduced. Otherwise good job.

#1037 Comment 2:
I do not know why I so rarely use overloading (which this is a sort of)... I changed now. performSearch() and performSearchIfLive()

#1037 Comment 3:
Changed to the "sync" icon. Not sure why Eclipse formats the IconTheme file as it does, but I cannot get around it...

![newsearch](https://cloud.githubusercontent.com/assets/8114497/14059281/cc582706-f33c-11e5-8f64-84c3c935eb26.jpg)

#1037 Comment 4:
Found auto-renew so changed to that. Basically a mirrored version of sync, so clockwise arrows.

#1037 Comment 5:
Hm, idea: what about issuing the search request only after 500ms of nothing happened in the text field? This would require less icons and less buttons the user has to interact and understand, and could provide similar results. what do you think @oscargus 

#1037 Comment 6:
I see your point regarding the number of buttons, but then it seems like one either has a small enough database and then it is probably just annoying or you have a big database in which case it might still not solve the issue.

It seems like this setting and filter/float are user preferences rather than search preferences (in the sense that  you won't change this depending on your current search, as opposed to regex and case). Maybe one should tuck the user preferences away as they are more rarely changed. I mean, you would like to have live search by default but be able to disable it if required. I can also imagine that some people want to get rid of autocompletion sometimes (with that said I haven't checked if one can configure it). An "advanced settings" button with pop-up menu?

#1037 Comment 7:
I am somewhat unsure where we should be heading here. I think we should try to reduce the number of preferences the user can input as JabRef has so many options, it can make it very hard to use. 

If we detect whether the database is small, medium or large in size, we could adjust the search automatically somehow? So it will not update immediatly if there are more than 1k entries? Or use a formula which computes the amount to wait between after a search. The issue is not the search itself (which is done in a separate thread) but the update of the UI after the search is done. 

So basically, we could try to keep track of the search queries that are currently active through an atomic counter. And only update the UI when the counter has reached the value 1. 

#1037 Comment 8:
I agree on the preference thing in general. Still I think this is a rather straightforward setting and more importantly it doesn't really break anything if set the "wrong" way.

Somehow, these automatic things will always turn out bad for some users and then they cannot change it. Apart from that I agree that it should be possible to come up with a scheme that is reasonable for most users. However, I'm not convinced it is worth the effort compared to the simple and fully waterproof switch. :-) 

To me it can even be hidden in the preferences under a "performance" tab, where that and e.g. the new cell formatting can be switches off if required. All bells and whistles on, but can be disabled if performance is suffering.

I have some thoughts related to preferences in general and will open an issue any day now.

#1037 Comment 9:
Hm, ok. Maybe the quickest thing is to add a settings dropdown menu using some kind of wrench or so symbol in the search bar. There, we can also move the float thing as well. 

#1037 Comment 10:
@oscargus nevertheless, I think we should ensure this overlapping of searches does not happen. This could maybe help enough already, reducing the pain of having a large database without loosing the live feature. 

#1037 Comment 11:
I'm with Simon here and think a button is not necessary. Why not just perform a search every time directly after the input changed? If the user types quicker then the search is performed, then the old search is just aborted and a new one started. So for small databases you see a direct consequences, for larger ones you get a delayed response. The only thing required for this approach is to make sure that an ongoing search does not block inputs in the search field.
Google also somehow manages to show live results without a toggle instant search button and I believe their database is bigger than the average bib file :smile: 

#1037 Comment 12:
So the user response in #1034 is irrelevant?
Den 29 mar 2016 21:48 skrev "Tobias Diez" notifications@github.com:

> I'm with Simon here and think a button is not necessary. Why not just
> perform a search every time directly after the input changed? If the user
> types quicker then the search is performed, then the old search is just
> aborted and a new one started. So for small databases you see a direct
> consequences, for larger ones you get a delayed response. The only thing
> required for this approach is to make sure that an ongoing search does not
> block inputs in the search field.
> Google also somehow manages to show live results without an instant search
> button and I believe their database is bigger than the average bib file [image:
> :smile:]
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1037#issuecomment-203069727

#1037 Comment 13:
No of course not, but I find the part `blocking further typing into the search box` the most critical and annoying. If the input in the search field is not blocked, the user will not notice that we actually search in the background.

#1037 Comment 14:
Ah, OK! Now I understand your comment. Sure, that would be another way to solve it. Probably better from many perspectives.

#1037 Comment 15:
I tried to implement a settings button and while it works I'm not really fond of the results. I've tried having both one menu item for filter/float (which is quite unclear) and having radio buttons for both options (which is better as one can have the full sentence), but I think that the additional icon is still the best. The whole search bar is quite compact now, so I do not think that the previous width problem is relevant. Also, if/when live search is removed (e.g. if non-overlapping search is implemented and works for 100000 entries...) it will be easier to just remove the button rather than remove the menu etc.

#1037 Comment 16:
Do you think this is still necessary or this can be closed in favor having a faster overall search?

#1037 Comment 17:
No, if the search speed has improved as much as it seems, I do not think this one is required. (If it turns out to be, it is easy to recover.)

--------------------------------------------------------------
--------------------------------------------------------------
#1035 Comment 1:
I've fixed all(?) comments. One thing happened though. What is the difference between the two BibEntry under test here? (The test shouldn't look like this, but I kept both for now.)

``` java
    @Test
    @Ignore
    public void getFieldOrAliasDateWithYearNumericalMonth() {
        Assert.assertEquals("2003-03",
                (BibtexParser.singleFromString("@ARTICLE{HipKro03, year = {2003}, month = 3 }")).getFieldOrAlias("date"));
        emptyEntry.setField("year", "2003");
        emptyEntry.setField("month", "#3#");
        Assert.assertEquals("2003-03", emptyEntry.getFieldOrAlias("date"));
    }
```

The first assertion passes, but not the second. Seems to be something with the parser?

#1035 Comment 2:
What happens if you remove the # in the month field? 

#1035 Comment 3:
Then it works, but that is a different test case. (I was surprised that the original test case worked, I only saw it in another test a few lines above.)

#1035 Comment 4:
I have the other test case `getFieldOrAliasDateWithYearNumericalMonthString`

#1035 Comment 5:
But `#3#` is not a valid month format, or is it? as `getFieldOrAliasDateWithYearAbbreviatedMonth` works, I don't see a problem here.

#1035 Comment 6:
Maybe there isn't a problem. However, if the corresponding statement was in
a .bib-file it would apparently be parsed as 3 and not #3# .

I remove that test then.

--------------------------------------------------------------
#1033 Comment 1:
Thanks for your contribution!

Are you planning to submit some more entries? 
If so, I would wait with merging this in.

#1033 Comment 2:
I'm planning to submit more entries. @matthiasgeiger 

#1033 Comment 3:
Great! 

You can simply make more commits in your fork, which will end up in this Pull Request.

Just tell us, when you are done and we will merge your commits in the master branch.

Edit: I just tagged the title as "work in progress" (=WIP)

#1033 Comment 4:
Just a small note: there are about 150\* obsolete strings in the translation file. My guess is that you translate strings you see in JabRef and at the moment that is good practice. Once #869 is merged there will be stricter checks for obsolete keys.

(*) Many of them are older, so there are hardly 150 obsolete strings without translations. Still, it would be a waste of your time to translate those obsolete ones.

#1033 Comment 5:
It's done! @matthiasgeiger 

#1033 Comment 6:
Thank you very much for you contribution. I`ll merge this now in. If you have further translations, feel free to open a new Pull Request. 

--------------------------------------------------------------
#1032 Comment 1:
Looks good. As there have been Date and  Time API Changes in Java 8, maybe you can use some of them:
http://javarevisited.blogspot.de/2015/03/20-examples-of-date-and-time-api-from-Java8.html

#1032 Comment 2:
I added an issue regarding replacing SimpleDateFormat. It was used in 23 places if I remember correctly. Good link!

--------------------------------------------------------------
#1030 Comment 1:
LGTM

#1030 Comment 2:
Other than the use of Optional in CitationManager.java OK to merge.

--------------------------------------------------------------
#1029 Comment 1:
LGTM

#1029 Comment 2:
Have not that much time but there might be one problem: Some users have configured the table to show "author/editor". After a quick look at your changes I suppose that this might be troublesome?

#1029 Comment 3:
If anything it will work even better. At least once InternalBibtexFields is updated to cover all the different Biblatex fields that contains a list of person names. At the moment there shouldn't be any difference as I can see.

#1029 Comment 4:
Okay. Then: Go for it! :wink:

--------------------------------------------------------------
#1028 Comment 1:
Issue: https://github.com/JabRef/jabref/issues/969

#1028 Comment 2:
This commit should also demonstrate the structure of the new event system.

Discussions are welcome.

#1028 Comment 3:
I just want to point out that there is an event system for BibDatabase. Which is not that much used. Maybe it can be used as inspiration/replaced.

#1028 Comment 4:
This does demonstrate how the API of Google Guava works, but not how it can really be used at JabRef. Should we use one bus for everything? Should we use one bus per "thing" such as BibDatabase etc. - This is also [discussed at the documentation](https://github.com/google/guava/wiki/EventBusExplained#why-must-i-create-my-own-event-bus-rather-than-using-a-singleton).

Please double check the usage of `net.sf.jabref.model.database.DatabaseChangeEvent`. I think, the whole code around `net.sf.jabref.model.database.DatabaseChangeEvent` should be replaced with the Guava thing. Instead of `net.sf.jabref.model.database.DatabaseChangeEvent.ChangeType` there should be different classes. Then, it is possible to use the power of the [EventBus](https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/eventbus/EventBus.html). Important excerpts of the documentation: "which accepts a single argument of the type of event desired; " and "The EventBus instance will determine the type of event and route it to all registered listeners.". This enables to use a single bus with dedicated events such as `FieldContentChanged` etc.

Thus, please update this PR to
- [x] <s>Introduce a Global EventBus into `net.sf.jabref.Globals`</s> Introduce an EventBus object being passed around. This enables better testing.
- [x] Make `DatabaseChangeEvent` abstract and add subclasses according to `DatbaseChangeEvent`
- [x] Rewrite the currently existing code to use that event bus instead of `net.sf.jabref.model.database.BibDatabase.addDatabaseChangeListener(DatabaseChangeListener)` and `net.sf.jabref.model.database.BibDatabase.removeDatabaseChangeListener(DatabaseChangeListener)`

#1028 Comment 5:
Yes, it actually only demonstrates the base function. I think we should have a separate package for that. So I created a new one and created a interface, which should normalize the usage of Google guava. Now we are going to replace the existing listeners and as @koppor  already observed to prepare a global event bus.

#1028 Comment 6:
Mhh...I'm not sure that a global event bus is the right way to go. It adds another global object, makes debugging harder, everyone gets informed about everything (it is hard to listen only to changes to a certain database) etc. But of course it also has its advantages. What is the opinion of the other @JabRef/developers here?

#1028 Comment 7:
I think its OK to use one. Therefore we use different `Event` objects, which should prevent the chaos.

#1028 Comment 8:
On the one hand, I don't like to pass around the EventBus object everywhere. It is a global thing and used everywhere. Maybe we should place it in `net.sf.jabref.gui.GUIGlobals`.

On the other hand, I agree that a global object makes testing difficult.

Let's hear about design ideas by the others. This, however, doesn't stop @obraliar replacing the old event system. The "location" of the EventBus object can be changed later on.

#1028 Comment 9:
@obraliar Please do not take further action until @JabRef/developers decided which way to go.

#1028 Comment 10:
No opinions? If not, we would begin to discuss the details internally within the stupro group.

#1028 Comment 11:
Sorry, but (in contrast to other developers) I do not see why we need an event system. Everything we need should be doable with the plain old observer pattern and the benefit of an event bus is not clear to me. 

This will be discussed in a devcall, which may or may not take place soon.

#1028 Comment 12:
Now all entry events only base upon Google's Guava Bus System.
The integrated event system (listener registration, event posts & receivements, etc.) works.

Here are some new findings:
- We have to use one EventBus for each BibDatabase, cause there may be more than one opened. A main event such as `AddEntryEvent` should not affect all opened databases.
- For all other events that do not affect BibDatabase we could introduce one general EventBus. This part of introduction is very easy, but I see no need for that yet.

#1028 Comment 13:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/1028?src=pr) is **27.56%**

> Merging [#1028](https://codecov.io/gh/JabRef/jabref/pull/1028?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master      #1028   diff @@
==========================================
  Files           695        699     +4   
  Lines         46294      46290     -4   
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7641     -9   
==========================================
- Hits          12759      12758     -1   
+ Misses        32435      32433     -2   
+ Partials       1100       1099     -1   
```
1. 2 files (not in diff) in `...va/net/sf/jabref/gui` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/7a38d878600853354ef48904a74cb5ecb18a639a/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F677569) 
   - Misses `+2`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1023c50...7a38d87](https://codecov.io/gh/JabRef/jabref/compare/1023c50c7cfc293811761a01afa3211e4eb88672...7a38d878600853354ef48904a74cb5ecb18a639a)

#1028 Comment 14:
Please add a test case where you subscribe to the eventbus of the database and test if the events added, removed, and changed are properly raised?

#1028 Comment 15:
Besides the minor comment, it looks good to me.

@obraliar Can you also replace `net.sf.jabref.model.entry.BibEntry.addPropertyChangeListener(VetoableChangeListener)? As far as I could see, there is no need for the vetoing so a normal event bus can be used per entry.

#1028 Comment 16:
@koppor Done replacing VetoableChangeListener.

Can not understand, why codecov is failing.

#1028 Comment 17:
The code looks good. 
@JabRef/developers do we really need a devcall here? It is not an eventbus in the sense that there exists a global event dispatcher but the eventbus just presents a simpler way to throw events per object. 

I'm :+1: for merging.

#1028 Comment 18:
[![LGTM](http://lgtm.in/p/qjdMkyEnq)](http://lgtm.in/i/qjdMkyEnq)

#1028 Comment 19:
@JabRef/stupro could you please add some short notes to the wiki on how to push and subscribe to events (using the eventbus). Thanks!

#1028 Comment 20:
Done. See https://github.com/JabRef/jabref/wiki/Code-Howtos#using-the-eventsystem

--------------------------------------------------------------
--------------------------------------------------------------
#1025 Comment 1:
You might also access the IEEEXplore API directly to ommit the three URLDownloads?
http://ieeexplore.ieee.org/gateway/
We also need some tests, otherwise its hard to check the functionality of the fetcher.
try to use open access articles from IEEE?
http://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=6287639

#1025 Comment 2:
I was considering that, but parsing HTML seemed like a ~~better~~ easier solution (for me) compared to XML.

Regarding tests, I have no idea how to make a proper test since the outcome of the test will be IP-number dependent... It seems quite useless to have a test that pass independent of if the PDF was downloaded or not. Input is warmly welcome!

#1025 Comment 3:
The result of this stamp link http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7421926 is IP dependent?
-> http://ieeexplore.ieee.org/ielx7/6287639/7419931/07421926.pdf?tp=&arnumber=7421926&isnumber=7419931

The tests for the fetchers are not for checking if a PDF is downloaded, but if the correct URL is transferred?!

#1025 Comment 4:
Regarding the HTML solution: In my opinion it is more likely that the API remains stable than the HTML structure. Therefore, I always tend to use some API if possible.

#1025 Comment 5:
The URL that is provided from the API (and the first step of my method) is an URL to a HTML page which loads the PDF in a frame (to show copyright etc and probably prohibit exactly what we are doing). Therefore, the second regexp is still needed and if you do not have access to the PDF you will not be able to get the actual PDF URL which is what the method should return.

I fully agree with your point regarding API, it was more a matter of being able to add the functionality at all that lead me down the HTML road, of course I can regexp the first URL from the XML using the exactly same code just as well ;-).

#1025 Comment 6:
Yes, try that link from a non-University computer... (Such as your phone.)

#1025 Comment 7:
OK, let me rephrase that. That particular link was open access, so, well, that was a very good point! Thanks!

#1025 Comment 8:
I thought so...you made me wonder :smile: 

#1025 Comment 9:
I also test the other fetchers with open access articles, its the only way to make it work consistently everywhere and still be able to get a failing test if something changed.

#1025 Comment 10:
Tests are added. :-)

The somehow positive argument for the current approach is that it isn't even dependent on the API. Since it is based on DOI lookup and a rather generic reg exp, the DOI resolution page can be changed and it should still succeed. Then, of course, it is probably more likely that the intermediate frame page and the stamp mechanism is changed than the API...

#1025 Comment 11:
I think it is a cool addition :smile: ! However, I'm still not really happy with the regex approach, let's see what the others think!

#1025 Comment 12:
LGTM

#1025 Comment 13:
I'm not so happy with the addition of the download via the URL. Whereas it is convenient, I'd like to keep the Fetchers based on "immutable" values. Something like DOI or Eprint should normally stay the same. A URL is not a goog identifier in my opinion. This suggestion is more like a general discussion for keeping the implementations of the fetchers focused and not cluttering them with a lot of download options (by DOI, Eprint, URL, Title,...). WDYT?

#1025 Comment 14:
What is great in your approach is that you check for a IEEE DOI and skip if it is not issued by the vendor. This could be nice for the other fetchers too as we save HTTP request etc. However, I'm not sure if we can savely find out all DOIs that can be issued by a vendor.

#1025 Comment 15:
The main reason for adding URL support is that IEEE also have some papers
without IEEE DOI. That was the main reason for adding the URL-part. Adding
more DOI doesn't work as those publishers sends elsewhere (or to an
intermediate page where one can select provider).

It is primarily only useful for older bib-files as the current IEEE search
doesn't add it. Not sure what e.g. Google provides. However, with better
meta data search it can be quite useful. At the moment it was more a
convenience thing to be able to populate my old bib-files with PDFs.

#1025 Comment 16:
Is anything missing here or can this be merged?

#1025 Comment 17:
Apart from the disagreement on using the URL or not it can be merged.

#1025 Comment 18:
The thing is that even using the DOI one will currently need to rely on a given URL as the DOI points to a HTML page with a frame in which the PDF is loaded. If they would change that, one would also need to change the code.

The benefit, as stated above, is that papers with non-IEEE DOI on IEEE Xplore, can now be downloaded. This hold, e.g., for IET papers (Electronic Letters among others). Now, for this a better solution would indeed be to use the API as that provides the URL (as far as I can tell). Still, the HTML parsing must be done, but then one could get around the non-IEEE on IEEE Xplore issue. (It is not as easy as adding more DOI series, see http://dx.doi.org/10.1049/el.2012.0577 as an example.)

--------------------------------------------------------------
#1022 Comment 1:
Looks nice :+1: 

But the usage here is not intuitive to me. We already have a display of the diff here as both values (former and the fetched entry) are displayed next to each other. 
Also, the usage of the dialog is not clear now as you always select to keep the left or the right version.
However, currently the right version is a complex diff, but not a display of the version we select.

I also have a field that shows the result of the merged entry to the user, which lets me wonder what the advantage of the displaying a diff is.

#1022 Comment 2:
It was requested at some stage (by @koppor ?) and I think the main point is
that it sometimes can be tricky to see the difference between two fields.

If the difference is significant it is indeed more confusing with the
current format. Assuming that we do not come up with a good heuristic for
"significant", the resulting entry can be quite useful.

One thing that struck me now is to always show the diff in the non-selected
field. Would that make more sense?

#1022 Comment 3:
Another "solution" might be to add a checkbook to the far right that enables the diff view (and possibly a preference if it should be on or off by default).

#1022 Comment 4:
Nice idea.

I would opt for a symmetric version. I.e. highlight all diffs on both sides similar to how kdiff3 handles this. So the red diff in the above picture would only show on the left side.
![kdiff3](https://screenshots.debian.net/screenshots/k/kdiff3-qt/6669_large.png)

#1022 Comment 5:
Don't get me wrong, but I'm not quite sure if we really need such functionality. Seems a bit overpowered for such an easy merge task from my point of view. In the end it's just a Bibtex entry and not a huge source code diff. 

#1022 Comment 6:
@tobiasdiez I was thinking about that. However, in most cases the left entry is the original (well, not in the plain merge entries, but when merging DOI information and when called from the ImportInspectionDialog) and this will make it even more cluttered (or how would it look, I cannot really generalize the idea from your screen shot, partly because line differences are not really relevant here).

The current formatting is quite similar to [latexdiff](https://www.ctan.org/pkg/latexdiff) so frequent users of that might appreciate it.

@stefan-kolb I think that when you get two almost identical abstracts and need to pick one, you will appreciate it. :-) But I agree that for large differences it is of less use and also that in some cases (e.g. differently formatted names), it is probably more of a problem.

Btw, if you look carefully at the screen shot you can see that it is not fully working. That should be fixed now.

#1022 Comment 7:
Its hard to explain in words and I have to admit the screenshot is also not too helpful. Let me try again:
The idea was to highlight additions. So 
left: **This text only occurs left,** same text.
right: same text**, except that this is right.**
(in your version it would be for right ~~This text only occurs left,~~ same text**, except that this is right.**). Changes (i.e. `A` vs `a`) could be highlighted using a different color.
In this way you have a more symmetric view and don't run into the problems mentioned by @stefan-kolb.

#1022 Comment 8:
@tobiasdiez Thanks for the explanation, I believe I got it now. I think that it can be done like that as well. However, I believe that both methods are good, so in that case I will support both (I assume that there could be people that want to turn it off completely as well...).

#1022 Comment 9:
OK, I have added a diff mode based on what I understood from @tobiasdiez. The code structure is at least slightly better now, but the fundamental code is indeed quite ugly.

What should one call the three different diff modes? "Plain text" seems quite obvious, but then? "Latexdiff style" is a possible alternative for the first example, but what about the one below?

Input on formatting is also welcome. I'm thinking about using CSS, which seems to be a slightly better idea than old school tags I guess.

![clipboard02](https://cloud.githubusercontent.com/assets/8114497/14003392/8d0d0198-f152-11e5-8b61-29cde44bce3c.jpg)

#1022 Comment 10:
There's a bit of a problem to push the latest version now. Not sure what happens, but I'll try again tomorrow.

#1022 Comment 11:
I added the option to select between word and character based diffs now, so one can select between five different modes. Builds available at http://builds.jabref.org/diff/ if you want to try it out.

Still to be done:
- [x] Store the last diff mode (will do once the number of them are decided)
- [x] Determine suitable names for the diff modes

#1022 Comment 12:
I am against having five different modes - too much choice for the user. I propose to remove the symmetric ones, and maybe use either latex word or character diff. For me, the word diff seems to be more helpful. 

#1022 Comment 13:
I propose plain text and latex diff character. I see a use for larger text passages like abstract or review where I think diff style character is best. In general I wouldnt include such hacker functionality at all since I think my eyes can see the differences between two strings best in plain text except for the two exceptions mentioned. I would be OK with such a compromise. Let's see what the majority decides.

#1022 Comment 14:
Thanks @oscargus for this feature. Very useful!

To me, the "LaTeXdiff style - character" is the most useful: I can quickly grasp the differences. However for a small difference in a long text (such as an abstract), the "LaTeXdiff style - single word" may better show it.

I believe Plain text is not useful. My rational is that the software should help me see the differences: Why should I have a mode that make me spend time on searching for differences?
Just my opinion.

Also (please, let me know if I should open a new issue):
- mouse scrolling is very very slow for the top part of the window (while it works as expected on the lower part --- both right and left sides).
- I never got the abstract from the DOI...  :cry:
- It would be convenient if pressing "ESC" could close this window (like for other windows).

#1022 Comment 15:
Not sure what the consensus is here, as I understand it these are the standpoints:

| Person | Preference |
| --- | --- |
| @stefan-kolb | Plain text (maybe latexdiff, character) |
| @simonharrer | Plain text, latexdiff, word (maybe character) |
| @tobiasdiez | symmetric |
| @mlep | latexdiff, character (maybe word) |

Remaining @JabRef/developers: do you want to have a say?

I've updated with a new version with the latexdiff version in both modes, so:
- Plain text
- Show diff - word
- Show diff - character

Haven't removed the symmetric code yet though.

@mlep : will try to add ESC-closing! The mouse scrolling I'm not really sure how to fix (and do not notice).

#1022 Comment 16:
To me, the current state looks good enough(tm). I would recommend making the Diff - Latex - Chars the default. 

#1022 Comment 17:
OK! I went for that.

#1022 Comment 18:
About  ESC-closing and mouse scrolling, shall I open 2 new issues (for later triage)?

#1022 Comment 19:
@mlep, it might be the safest...

#1022 Comment 20:
I really like the symmetric version you posted in https://github.com/JabRef/jabref/pull/1022#issuecomment-200574905. 

#1022 Comment 21:
I do not have any strong opinions. I like the idea to be able to see the differences (obviously) and I do not really see it as a problem if there are quite a few variants. Most people would try them out and find one or two useful and leave it there. The overhead in terms of preferences is the same as well.

It is more or less just to revert the last commit, add translations for the symmetric case (and come up with good names, which seems to be the most tricky part if we have two variants), and change the default (as that was part of the commit).

#1022 Comment 22:
FYI: I preferred the "Show diff" because the "Symmetric" requires me to look at both sides of the window to find the differences. It seems I am the laziest of you all...  :flushed:

#1022 Comment 23:
Can be merged as well. Go ahead. :)

#1022 Comment 24:
Suggestion: in a few weeks, encourage users to test this feature and give us feedback (via blog post and email to user list)

#1022 Comment 25:
Can we please make `plain`default? Do you find this intuitive:
1.
![image](https://cloud.githubusercontent.com/assets/2141507/14647039/35368fc4-065c-11e6-8bd5-d8ea5e830e08.png)
Or this:
2.
![image](https://cloud.githubusercontent.com/assets/2141507/14647054/42bbe9dc-065c-11e6-807e-4b4ce88f101b.png)

#1022 Comment 26:
This or this? I prefer this.

**Suggestion:** since it is not urgent to decide about it, let's ask the community of users to test this feature and vote for the preferred one and the ugliest one. A good opportunity to have some input from users.

BTW, if you agree on this, I can take care of it.

#1022 Comment 27:
Seems like I'm alone here :cry: ? I just cannot see the output in the first pic...

#1022 Comment 28:
I thought that someone suggested to use that as the default, but maybe not.
Anyway, there was a point of not having plain text as default, namely to
show the users that something had happened. Now they will at least notice
that something did change and be able to turn it off (as opposed to
noticing the drop-down when the text looks more or less the same.)

Names are quite interesting though as there are huge changes if the name
formats are different and it may be tricky to see the actual difference.
Not sure if we should normalize the names before showing them? Then it
would be easier to spot actual differences.

(Also, if I were to edit your references there would be fewer
differences... ;-))

#1022 Comment 29:
@oscargus The pictures are just from auto retrieved entries, didn't set anything there in my bib :smile: 

#1022 Comment 30:
If I remember correctly, the decision of the devcall was to have `plain` as default...  

#1022 Comment 31:
@stefan-kolb I was primarily thinking about all the {} in the left hand entry, but I know that we have different opinions there. :-)

@tobiasdiez OK, I had no idea. Must be something I made up myself then.

#1022 Comment 32:
@oscargus Yeah, in that case it wasn't me. Think the entry comes from Zotero or so... :smile: 

--------------------------------------------------------------
#1021 Comment 1:
:+1: 

--------------------------------------------------------------
#1020 Comment 1:
:+1:

Can you rebase and merge this in?

--------------------------------------------------------------
#1016 Comment 1:
LGTM :+1: 

#1016 Comment 2:
:+1: 

--------------------------------------------------------------
#1014 Comment 1:
Good work! :+1:

#1014 Comment 2:
@Siedlerchr Btw, you should assign your commit email with your Github account, see https://github.com/JabRef/jabref/pull/1014/commits/758e7c2d6fe6cb9e8a82f4bfda2f601608647344

#1014 Comment 3:
@oscargus Fixed.
@stefan-kolb I just added my git mail address to my github account as secondary mail address.

#1014 Comment 4:
Was done by Eclipse. Will change this back

--------------------------------------------------------------
#1013 Comment 1:
By the way, I would prefer to capitalize the first word in the name of the Formatters, i.e.  ̀Normalize month`

#1013 Comment 2:
I can only second starting the names with capital letters.

#1013 Comment 3:
- [ ] Examples have to be separated from the description, to prevent translations of them.
- [ ] Examples should be stored as `from` and `to`.

#1013 Comment 4:
... or examples should be in the form " _from_ **>** _to_" - storing them independently is not neceessary.

#1013 Comment 5:
I merge this now in. Hopefully I got every name and description right...

#1013 Comment 6:
@tobiasdiez : Among the added localization strings, what does "Completely_the_field." means?

#1013 Comment 7:
@mlep Thanks for pointing out the strange description string. I fixed it in #1087.

#1013 Comment 8:
@tobiasdiez Great. Thank you for tidying up JabRef Localizations.

--------------------------------------------------------------
#1010 Comment 1:
Mhh....I am missing an assertion in these tests, i.e. reading the exported file and checking that it is empty. 

#1010 Comment 2:
I have changed the code based on all(?) comments. Major implications:
- Now, all exporters returns an empty file for an empty set of entries and are tested for this. Earlier, some heading information was generated
- All exporters are now tested that they throw an NPE with a null database or null entries list
- The change that fixes #1001 is in practice reverted and solved such that the ExportFormat calls add all entries instead of null for all entries
- The test disabled in #1005 is active again
- I had to break the new guideline in #1012 to be able to test all exporters for NPEs in a simple way, if there's a better way please let me know

(This shows that adding a quite crappy initial test can lead to good things. :-))

#1010 Comment 3:
As the export is now not performed for empty databases (entries lists), as a side effect, the coverage is more accurate now as well. Earlier it increased quite a bit, but no actual testing was done (well, apart from that the code executed without any errors).

#1010 Comment 4:
This looks way better then the initial PR. Good job!

#1010 Comment 5:
Not obvious that Parameterized is executed before BeforeClass, but once I figured that out...

#1010 Comment 6:
LGTM

#1010 Comment 7:
I think this is probably as far as we get right now and that the code is quite OK since it is rather general and only tests what is actually tested (or how to formulate it...).

--------------------------------------------------------------
#1009 Comment 1:
:+1: LGTM

--------------------------------------------------------------
#1008 Comment 1:
:+1: LGTM

--------------------------------------------------------------
#1007 Comment 1:
LGTM :+1:.
This should also be added to the wiki.

#1007 Comment 2:
I just described it in the wiki:
https://github.com/JabRef/jabref/wiki/Code-Howtos#loading-files-from-resources

--------------------------------------------------------------
#1006 Comment 1:
LGTM

--------------------------------------------------------------
#1005 Comment 1:
What was the problem with this test? 

#1005 Comment 2:
See comment in the commit that closed #1001 (cannot easily link it from the phone). Basically that in an ExportFormat passing null as a list of BibEntry means that all entries should be exported.

--------------------------------------------------------------
#1003 Comment 1:
I really like that you removed all those null's. What I wondered after reading the last change in `Util`: can all these null return values (and now Optional.empty) be replaced by `UnknownExternalFileType`?

#1003 Comment 2:
Yes, that is a relevant question. I do not fully understand the workings, but it seems to make sense and I pondered around that for a while.

#1003 Comment 3:
I think that the current logic is that when we want to show a table or get an icon, UnknownExternalFileType is used. If not, Optional.empty()/null.

#1003 Comment 4:
I looked over the code again and reverted some of the Optional arguments. So now, instead of passing an optional and then at the end realising it is empty the data is never passed in the first place. Major impact on the DroppedFile-stuff which is almost back to the initial state.

--------------------------------------------------------------
#1002 Comment 1:
The width 1024px is near and would match a low resolution. I think, however, that nearly no one is using that low screen resolution anymore. I assume that 1080 is the minimum width required to show the toolbar. Thus, this change is OK.

#1002 Comment 2:
If 1024 is enough, I would go with that. Unlikely, but could be people with older/smaller laptops that would appreciate it. If not, go ahead and merge it.

#1002 Comment 3:
1024px is not enough. 1080px is needed which is why I chose it (at least for my tests, correct me if I'm wrong).

#1002 Comment 4:
I can use 978 on my Windows 7 laptop. The buttons do move slightly closer, but all are visible. 

Interesting thing though: the external application button becomes wider when making the window more narrow...

#1002 Comment 5:
Hm, I tested it on Ubuntu...

#1002 Comment 6:
Yes, it is probably OS dependent... Not sure what the best approach is here... More than 840 for sure though...

#1002 Comment 7:
I'd say try it. If someone complains pick another value. Still, it will only be used for the first start...

#1002 Comment 8:
@JabRef/developers @chochreiner Can you guys check on different OS and give your minimum numbers? Can be shown `Options -> Preferences -> Show Preferences`

#1002 Comment 9:
On the CentOS machine in my office 1050 is the minimum and the external application button-thing doesn't happen. (I have a 1050 x 1680 screen and it is OK to run it maximized there, which is a good thing in itself.)

CentOS 6.7 - GNOME 2.28.2
GTK - 1050
Metal - 887 (application button thing)
Plastic - 887 (application button thing)

#1002 Comment 10:
Windows 10: 
- WindowsLAF: ~820px
- MetalLAF: ~890px
- Plastic: ~890px

Ubuntu 14:
- GTKLAF: ~1080px
- MetalLAF: ~910px
- Plastic: ~910px

#1002 Comment 11:
Linux Mint LMDE: 1024 is fine. With lower values (down to 800), the right part of the toolbar is missing (because icons are big).

#1002 Comment 12:
BTW: The 2015 survey outlined an "awful display with HiDPI screens". Anyone able to test it?

#1002 Comment 13:
I have a 2560 x 1440 (which is maybe not HiDPI anymore since it is a 27") and I think that with the current, larger, icons it is OK. Of course, being able to change the size of the icons would be nice, especially when the smaller icons are used in buttons.

#1002 Comment 14:
Hm, I don't see any big problems:
1920x1080 on 24" with Win7
INTEGER mainWindowSizeX 865 | 840
Still seeing all Icon in the Toolbar, that is the minimum size. If I resize it further, the Donate button gets lost.
![toolbarjabref](https://cloud.githubusercontent.com/assets/320228/13949289/79f74462-f024-11e5-9d21-0a0c03dace04.png)

#1002 Comment 15:
for OSX I need ~1111px to list all icons in the toolbar on a 13,3-inch (2560 x 1600) display (native UI)

#1002 Comment 16:
Ouch, this is huge...

#1002 Comment 17:
maybe it is possible to mark some activities as optional and let the users design their custom toolbars  or at least hide not needed activities

> On 22 Mar 2016, at 17:37, Stefan Kolb notifications@github.com wrote:
> 
> Ouch, this is huge...
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub https://github.com/JabRef/jabref/pull/1002#issuecomment-199894140

#1002 Comment 18:
We proposed to use 1024 x 768 according to http://www.w3schools.com/browsers/browsers_display.asp which should cover every display size. 

--------------------------------------------------------------
#999 Comment 1:
Is it possible to write a simple UI test for it? :innocent:

Refs #507 

#999 Comment 2:
UI-Test, I will try to write one

#999 Comment 3:
Added GUI Test und fixed Checkbox label not displaying correclty

#999 Comment 4:
The code looks good, so I give my :+1: for merging if you add a nice looking screenshot :smiley: 

#999 Comment 5:
@tobiasdiez  Here you are:
![dbproperties](https://cloud.githubusercontent.com/assets/320228/13907253/784b77ae-eeea-11e5-8a61-a72b953537ac.png)

#999 Comment 6:
@oscargus  
I tried to fix this, but I could not get the damn JList resized horizontally or vertically. I tried around a lot. 
The code for this is located in `FieldFormattersCleanUpPanel`

From this one it sounded very simple:

http://alvinalexander.com/java/edu/jgoodies-formlayout-grow-fill/3-fixing-jgoodies-formlayout-sizing.shtml
Edit// This is how it scales after my fix
![dbpropertiesresized](https://cloud.githubusercontent.com/assets/320228/13959063/c75f28cc-f052-11e5-94b2-016eb93417f8.png)

#999 Comment 7:
My code did everything except horizontal sizing (and I also tried a
lot...), so check there for possible hints. I think that when spanning
multiple columns using a fourth alignment argument to .xyw is one thing.

#999 Comment 8:
@Siedlerchr : I think it is good to go, so please rebase and it can be merged.

(I reserve the right to fix/change(?) the scaling at some stage. :-))

#999 Comment 9:
@oscargus  Okay, otherwise I would have looked at the GUI resizing in more detail the next days

#999 Comment 10:
@Siedlerchr Up to you. I just wasn't sure what the status of the PR was and was thinking of merging it (if it was possible). Feel free to look at the resizing. :+1: 

#999 Comment 11:
@oscargus  As I just rebased it on the master I would suggest merging it for once now, so that the biggest changes (e.g. the Comboxes) are into it.
The resizing are only some minor things.  I will try to experiment with them in the next days and release it then as a new pr.

--------------------------------------------------------------
--------------------------------------------------------------
#997 Comment 1:
The current DatabaseChangeEvent system can be improved. At the moment only ADDED_ENTRY and REMOVED_ENTRY events are fired, not CHANGED_ENTRY or CHANGING_ENTRY. It also seems like an event is fired multiple times(?). For example, adding an entry in an external editor triggers at least three events...

--------------------------------------------------------------
#996 Comment 1:
Is it really impossible to add a test case?

#996 Comment 2:
Enhanced the tests a little bit and added a null-check while inserting an object into the database.

#996 Comment 3:
LGTM :+1: 

#996 Comment 4:
Thanks for fixing the bug I had introduced. 
The changes look good.

Please try to adhere to the convention for tests outlined in the wiki https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases, especially the naming of the tests and only one test per test method. Comments test methods shouldn.t be necessary but the test name should contain all the information. 

#996 Comment 5:
After some minor naming improvements, this can be merged in in my opinion. Good job.

--------------------------------------------------------------
#994 Comment 1:
Indeed it is. I have figured out a method for this, so I'll apply it to all files when I rebase.

#994 Comment 2:
Now (almost) everything is actually encoded in UTF-8. There are some odd flaws and I had to sort the Chinese translations to sort a few things out. There are probably duplicates for some translations caused by the merging, but as far as I know that doesn't cause any problems. Maybe we should add a check for that later on as well?

#994 Comment 3:
LG in my opinion. I'm not sure if we really want to merge this before the release of 3.3 since it is a rather large change.

#994 Comment 4:
I see your point, but let me tell you how the change is made (can be good for later reference): 
1. Load the file in Eclipse (I have some plugin which shows the escaped Unicode as actual Unicode, I think it helps).
2. Ctrl-a Ctrl-c
3. Open the same file in NotePad++
4. Ctrl-a Ctrl-v
5. Save in NotePad++

The only potential drawback of not merging now is that there will be more duplicates when rebasing later with files possibly not entirely in UTF-8. Not a major issue.

#994 Comment 5:
There are indeed some files with duplicates... IntelliJ is highlighting them as errors, so its rather easy for me to get rid of them.

I'll do this and push the result in the repository here.

As it is rather easy to check whether the changes work by simply running JabRef in all languages I would merge this in for the 3.3 release.

#994 Comment 6:
Result is [here](https://github.com/JabRef/jabref/compare/oscargus-fewertranslations)... if there is no veto I'll merge this directly into `master` without creating another pull request after lunch :wink:

#994 Comment 7:
Looks good!

2016-03-31 9:28 GMT+02:00 Matthias Geiger notifications@github.com:

> Result is here
> https://github.com/JabRef/jabref/compare/oscargus-fewertranslations...
> if there is no veto I'll merge this directly into master without creating
> another pull request after lunch [image: :wink:]
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/994#issuecomment-203796214

--------------------------------------------------------------
#992 Comment 1:
Uh... isn't @Siedlerchr currently working on this dialog (see #958 and #957)?

#992 Comment 2:
Öhm, you didn't need to do that, as I am already working at this ;)
See assigned label. 

#992 Comment 3:
I know. However, since I've struggled with JGoodies earlier I thought you
could use some input (regarding your question in that issue). Use it as
inspiration. :-)

#992 Comment 4:
Yeah, it was the scaling of the Icons to the buttons. I will try later, I think the solution is to putt the Icon Button and the other Buttons in a button bar. 

#992 Comment 5:
I think I solved that part (only tested on Linux where it looked OK to
start with though).

The key thing I did was to use "fill".

#992 Comment 6:
@Siedlerchr Shall we merge this in and you work with @oscargus' improvements as a basis or do you prefer to create another PR beginning from scratch?

#992 Comment 7:
I will manually try to apply the fixes because I changed some more in the
layout (removed  Textfields etc)

2016-03-18 9:59 GMT+01:00 Matthias Geiger notifications@github.com:

> @Siedlerchr https://github.com/Siedlerchr Shall we merge this in and
> you work with @oscargus https://github.com/oscargus' improvements as a
> basis or do you prefer to create another PR beginning from scratch?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/992#issuecomment-198264982

--------------------------------------------------------------
#988 Comment 1:
What happens if I am scrolling through the list of entries in the table via the keys? Does the focus can jump away to the field editor if it is open? From what I recall, we had the issue I mentioned before and had to remove the functionality to automatically focus the first field. Please test this exhaustively with different entry editors for different entry types open and then scrolling via keys.

#988 Comment 2:
I am going to figure that out after our exam this week. So your comment is recognized :)

#988 Comment 3:
I had a chat with @koppor  today. @bruehldev  and I will write an automated test for this in our upcoming sprint (starting on monday 25th april). When this is done we should have verified if the focus is lost on scrolling or not.

#988 Comment 4:
What is the current status here?

#988 Comment 5:
I have run the Integration tests on it and tried it manually. The entry tables focus is not lost when going through the entries. Only when opening the entry editor as intended.

#988 Comment 6:
I wonder why the travis jobs are not executed? Because you violate the correct imports order, and this cannot be merged without the build failing at the moment.

#988 Comment 7:
I will fix the order soon. Probably on Friday. Maybe pushing on the branch will then trigger the jobs again.

#988 Comment 8:
LGTM :+1:, just fix the import order (and improve the changelog), then this can be merged in from my point of view

#988 Comment 9:
Can this be merged?

#988 Comment 10:
why did the gradlew scripts change?

#988 Comment 11:
otherwise LGTM

#988 Comment 12:
Gradle scripts are back to normal.

#988 Comment 13:
OK :+1: 

--------------------------------------------------------------
#987 Comment 1:
Looks good!

#987 Comment 2:
In principle LGTM

#987 Comment 3:
[![Coverage Status](https://coveralls.io/builds/5466279/badge)](https://coveralls.io/builds/5466279)

Coverage increased (+0.04%) to 26.494% when pulling **7adae910c0468e19e468b40562e94019e4c1f06f on refactor-database-code** into **70a65a60ccbfe2311246ad9c0329b296a967820c on master**.

#987 Comment 4:
Can you merge this in?

#987 Comment 5:
Hm, I am not completely sure this introduces some bugs. Should I wait for directly after the release?

--------------------------------------------------------------
#986 Comment 1:
:+1: 

--------------------------------------------------------------
#985 Comment 1:
Other than the micro comments: LGTM :+1:

#985 Comment 2:
@koppor I am not sure whether they were micro comments or nano comments. Why would you say that they are micro comments?

--------------------------------------------------------------
#983 Comment 1:
:+1: 

#983 Comment 2:
Reverted the change the @Siedlerchr asked for, but did a force push so that it wasn't changed back and forth...

--------------------------------------------------------------
#982 Comment 1:
:+1: (Just one question and one space...)

I guess an intermediate step would be to have a List of ids instead of a Set as that list should probably have a smaller memory footprint compared to bibentry, but as long as it is not a problem (and I guess it isn't, even with thousands of entries), this seems to be the way to go!

#982 Comment 2:
:+1: 

--------------------------------------------------------------
#981 Comment 1:
Awesome

--------------------------------------------------------------
#980 Comment 1:
LGTM

--------------------------------------------------------------
#979 Comment 1:
Very good points! Too much copy-paste (as usual). Will sort it out tomorrow.

#979 Comment 2:
Looks good. Other improvements can be made in separate PRs. 

--------------------------------------------------------------
#975 Comment 1:
The updated pull request template is fine for me. 

But in my opinion the previous Issue-Template was better ;-)

#975 Comment 2:
@koppor when you change this, can you also add `Screenshots added (for bigger UI changes)` to the PR template? Thanks. :+1: 

#975 Comment 3:
We should add a hint that if they are using a dev version of JabRef they should always first try the latest version before reporting a bug. While it is good that they use the dev version and try new stuff before it is released, in the last days it happened more often that they reported bugs that were already fixed in the most recent version.

#975 Comment 4:
Done.

#975 Comment 5:
Wouldn't it make sense to ask the user to try the latest development version as well? Or at least look at the ChangeLog of the development version?

#975 Comment 6:
For full versions I think its ok to shift this responsibility on our side. For development versions a user should make sure it is broken on the latest dev build.

#975 Comment 7:
Thanks @koppor for the changes. I merge this in for now. Further modifications can be made in a new PR.

--------------------------------------------------------------
#974 Comment 1:
LGTM

--------------------------------------------------------------
#968 Comment 1:
Travis CI uses Jdk 1.8.0_31, and because of this cannot compile this. 

#968 Comment 2:
As it says in the error message the class javafx.scene.control.Alert can not be found since this has been introduced in Java 8_40 along with javafx.scene.control.Dialog. However this is a essential part in creating a javafx gui since it is basically the equivalent class to JOptionPane / JDialog classes in swing.
Is it possible to update the jdk version of the Travis CI?

#968 Comment 3:
Please do investigate on this. 

#968 Comment 4:
@boceckts  This is currently a problem with Travis,but it can be updated:
https://github.com/travis-ci/travis-ci/issues/3259

This one looks the most promising:
https://github.com/travis-ci/travis-ci/issues/3259#issuecomment-130860338

#968 Comment 5:
@boceckts As JabRef uses both CircleCI and Travis and tests for both OpenJDK and JRE, there won't be a simple solution.

#968 Comment 6:
For cicle CI
Higher jdk versions than Build 25 (this was from one blog post) seem to be not available, a workaound seems to be this hack:
https://discuss.circleci.com/t/java-version/2435

Edit//  This one here for installing new version of qt5 seems to be related/similar:
https://discuss.circleci.com/t/using-qt-5-with-circleci/88

#968 Comment 7:
Thank you for all your feedback, I'm goinig to further investigate on this.

#968 Comment 8:
I created a new AboutDialog class which handles its initialization itself as previously. This way there are less changes and imports in the JabrefFrame class.
The improvements mentioned in the previous comments are also included.

#968 Comment 9:
Interestingly I found out that circle-ci is already using java8 u40:

> Using Java 1.8.0_40 from /usr/lib/jvm/jdk1.8.0/jre
> From the log of:
> `./gradlew -Pdev=true -Pinstall4jDir="install4j6" clean release --stacktrace || exit 0`

#968 Comment 10:
Thanks for pointing this out, I already wondered since I didn't touch the circle.yml yet the tests are passing on CircleCI.

#968 Comment 11:
Please ensure that this version of JabRef also runs under Linux with OpenJDK.

#968 Comment 12:
As this states https://docs.travis-ci.com/user/trusty-ci-environment/ it should be possible to switch to the trusty beta build environment where we should be able to use the open jdk 1.8.0_60. I'm going to try this first before manually testing it.

#968 Comment 13:
Hm from the log of the build with the changed travis.yml it seems that the build uses the open jdk 1.8.0_45 but can not find the javafx packages. Is javafx even supported by the open jdk?

#968 Comment 14:
@boceckts  JavaFX is part of the OpenJDK.
http://openjdk.java.net/projects/openjfx/

From what I see it is a problem of Ubuntu Trusty, the javafx is a kind of separate package, which is not yet backported to trusty:
https://bugs.launchpad.net/ubuntu/+source/openjdk-8/+bug/1398660

You can also spefiy multiple sdks:
Please do this to add oraclejdk (and remove openjdk until it gets implemented)
https://docs.travis-ci.com/user/languages/java#Testing-Against-Multiple-JDKs

#968 Comment 15:
I have changed the travis configuration file to use the newest version of the oracle jdk with the trick mentioned by @Siedlerchr .

#968 Comment 16:
Hm, this is a real problem. I'm not sure if we should continue with moving to JavaFX if it does not come natively with the openjdk in ubuntu. We can require Ubuntu users to install the oraclejdk, but we will get a lot of discussion and flaming for that.

#968 Comment 17:
If I get it right, the problem is mainly Ubuntu 14.04 LTS - the newer non-LTS versions should support openjdk8 (and hopefully JavaFX ;-))

#968 Comment 18:
@matthiasgeiger  @lenhard 
Yes, the javaFX is official part of the openjdk, but it is a separate package.
 However, it has not been back ported to Ubuntu 14.04 LTS.

From what I read one could use the debian Version:
https://packages.qa.debian.org/o/openjfx.html

I am not that deep into Linux, so no idea.

#968 Comment 19:
The next LTS is 16.04, which will have openfx support. (double check needed
- I only assume it, because ubuntu used to use debian/unstable as basis)

Backwards compatibility concerns did not stop us to make all plugins stop
working and to switch from Java6 to Java8. I am very optimistic in our move
to JavaFX. Especially because of supporting high res displays and because I
don't see how we can quickly make JabRef a high-quality webapp - code-wise
and usability-wise.

#968 Comment 20:
And of coruse, if you install the orcaclejdk than it's not a problem in
14.04, too.

2016-03-24 0:03 GMT+01:00 Oliver Kopp notifications@github.com:

> The next LTS is 16.04, which will have openfx support. (double check needed
> - I only assume it, because ubuntu used to use debian/unstable as basis)
> 
> Backwards compatibility concerns did not stop us to make all plugins stop
> working and to switch from Java6 to Java8. I am very optimistic in our move
> to JavaFX. Especially because of supporting high res displays and because I
> don't see how we can quickly make JabRef a high-quality webapp - code-wise
> and usability-wise.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/968#issuecomment-200576178

#968 Comment 21:
World upside down: @koppor is enthusiastic about a breaking change and I am sceptical? You convinced me. 

So this PR is ready to merge, right? Locally, I am still getting a compilation error, because it cannot find `AlertType`, although I am using the oracle jdk 1.8.073 under Win10, but that might also be due to some other local issues.

#968 Comment 22:
You may need to conifgure your Eclipse to include the javafx libs correctly:
See the second answer:
http://stackoverflow.com/questions/22812488/using-javafx-in-jre-8

2016-03-24 9:30 GMT+01:00 Jörg Lenhard notifications@github.com:

> World upside down: @koppor https://github.com/koppor is enthusiastic
> about a breaking change and I am sceptical? You convinced me.
> 
> So this PR is ready to merge, right? Locally, I am still getting a
> compilation error, because it cannot find AlertType, although I am using
> the oracle jdk 1.8.073 under Win10, but that might also be due to some
> other local issues.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/968#issuecomment-200732451

#968 Comment 23:
I am using IntelliJ, but yes it was just a configuration issue. To me, the dialog looks like this:
![jabref-about-dialog](https://cloud.githubusercontent.com/assets/1515701/14021180/b6309638-f1da-11e5-8894-3a89e14f8be4.png)
Looks like variables are not read correctly?

#968 Comment 24:
I have the same thing with the old about dialog, too when I run it from eclipse directly.

#968 Comment 25:
I think you need to configure eclipse/IntelliJ to run/build via gradle. 

#968 Comment 26:
Yes, if I build the release jar and start it from the console, the about dialog looks correct on master. However, if I build the release for this branch it looks like this:
![jabref-about-dialog](https://cloud.githubusercontent.com/assets/1515701/14026317/9a8b9b86-f1f2-11e5-9131-f75c3e0884d6.png)
Also nothing happens if I click on the empty menu item. What else am I doing wrong?

#968 Comment 27:
@lenhard  Yes, I experience the same after I applied the changes.  I'll take a look
Edit// I found the problem, but I don't understand it :confused:  
@boceckts Please have a look.

In the file AboutAction.java, when I add a`System.out.println()` before it works correclty.
If I uncomment it again, I experience the same behaviour as mentioned above.

``` java
 @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("Action performed");
        Platform.runLater(() -> dialog.show());
    }
```

#968 Comment 28:
This is a really strange behaviour as it works fine for me. However I have seen a fellow student having the same issue only that it was not reproduceable and appeared sometimes on the first execution after he pulled my changes. Further executions always worked for him though. Since there was no error message in the console it might be an issue on how/where you start it? I will further investigate and try to reproduce the effect on different operating systems. Which os and java version did you use?

#968 Comment 29:
Your comments make this sound very much like a threading issue. Platform.runLater also executes on the FX thread, right? @Siedlerchr perhaps adding the sysout leads to a synchronization that doesn'the necessarily happen otherwise. 

#968 Comment 30:
I tried a bit around and for me adding this line in AboutDialog:
`fxmlLoader.setController(new AboutDialogController())`
fixes the problem.
I can run it from Eclipse and it shows the code directly.
After doing a gradlew release I can run it with java -jar and it works, too.  (Win 7, x64 java 8u72
The same with gradlew run

#968 Comment 31:
@Siedlerchr this line should be called implicitly since the fx:controller attribute is set in the AboutDialogLayout.fxml file. This happens on my windows 7, x64 and java 8u73 after I pulled changes from the remote. Strangely if I don't change any files at all and re-run the execution it works fine and stays that way. @Siedlerchr Can you remove the line and check if execution works as normal now?

#968 Comment 32:
> Strangely if I don't change any files at all and re-run the execution it works fine and stays that way. 
> @Siedlerchr Can you remove the line and check if execution works as normal now?

Yes, this is really odd behavior. I now experience the same.
Seems like it is only the first run which is problematic. All further runs seem to be ok

#968 Comment 33:
After investing quite some time to set up virtual machines I tried a lot to reproduce this odd behaviour on different os' and came to the following conclusion. 

**How I tested:**
1. I updated my Java Version to 1.8.0_77 (execpt for openjdk 1.8.0_66  and openjfx 8u60 which were the newest versions I could find)
2. I cloned my repository (if not already available)
3. If I had a local working branch named "AboutDialogFX" I first deleted this one.
4. Executed 'git checkout origin/AboutDialogFX'
5. Executed './gradlew run'
6. Check for menu item and open the about dialog if applicable
7. Close Application and repeat step 5-7, four times (and more)

**Results:**

Windows 7, 64bit, java8u77
1. run: About Jabref menu item available and dialog opens normally
2. run: **Menu item not available and dialog won't open, no exception**
3. run: About Jabref menu item available and dialog opens normally
4. run: About Jabref menu item available and dialog opens normally
**After trying a trying more runs, the 9th run showed the same behaviour as the 2nd one**

MacOsX 10.11.1, java8u77
1. run: About Jabref menu item available and dialog opens normally
2. run: About Jabref menu item available and dialog opens normally
3. run: About Jabref menu item available and dialog opens normally
4. run: About Jabref menu item available and dialog opens normally
_After trying a trying more runs, the same behaviour occured_

Ubuntu 14.04, 64bit, oracle java8u77
1. run: About Jabref menu item available and dialog opens normally
2. run: About Jabref menu item available and dialog opens normally
3. run: **Menu item not available and dialog won't open, no exception**
4. run: About Jabref menu item available and dialog opens normally
**After trying a trying more runs, the 6th, 7th and 8th run showed the same behaviour as the 3rd one**

Ubuntu 14.10, 64bit, oracle java8u77
1. run: About Jabref menu item available and dialog opens normally
2. run: About Jabref menu item available and dialog opens **but does not show elements and doesn't respond**
3. run: About Jabref menu item available and dialog opens normally
4. run: About Jabref menu item available and dialog opens normally
**After trying a trying more runs, the 6th run showed the same behaviour as the 2nd one**

Ubuntu 14.10, 64bit, openjdk8u66 openjfx8u60
1. run: About Jabref menu item available and dialog opens normally, **however build does not finish when closing JabRef, console stays at '> Building 85% > :run'**
2. run: About Jabref menu item available and dilalog opens normally, **however build does not finish when closing JabRef, console stays at '> Building 85% > :run'**
3. run: About Jabref menu item available and dialog opens normally, **however build does not finish when closing JabRef, console stays at '> Building 85% > :run'**
4. run: About Jabref menu item available and dialog opens normally, **however build does not finish when closing JabRef, console stays at '> Building 85% > :run'**
_After trying a trying more runs, the same behaviour occured_

**My Conculsion**

From my perspective this strange behaviour looks like something in java is not always 'initialized' when the application launches. As there is no exception even when the menu item is not shown I doubt the fault is in my commits. It also seems like the behaviour appears at random and cross platform on (almost) all oracle jdks (at least with version 8u77). I don't really know how to proceed as there is clearly something wrong but I have no idea how to fix this...

#968 Comment 34:
I have no idea, but good work in trying out the different configurations! :+1: 

#968 Comment 35:
I tried it with the [modified version](https://github.com/boceckts/jabref/pull/1) and it seems to be fine there. I think the issue is the method initComponentsInFXThread. As far as I can see there is no need to init the about action in the FXThread. So just add the menu entry as usual and then init the FX dialog in AboutAction.actionPerformed. Maybe this is worth a shot. 
Moreover, when you write `no exception`, did you also had a look at the help > error console? I had it quite a few times that no exception dialog was shown but an error message was logged there.

#968 Comment 36:
@tobiasdiez I will have a look at the modified version soon. Since I started the build from the console I looked at the os specific terminal/console and yes there is about 16xtimes this sentence in the console "OpenGL Warning: crPixelCopy3D:  simply crMemcpy'ing from srcPtr to dstPtr" on windows and ubuntu. But regardless if the about JabRef menu item is there or not. On ubuntu there is an additionally "libGL error: core dri or dri2 extension not found" and "libGL error: failed to load driver: vboxvideo" in the console. With "no exception" I meant something like a java Exception with a stacktrace pointing to a faulty line of code.

#968 Comment 37:
@boceckts Thanks for the details. What I meant is the JabRef internal error console available under the help menu. While trying out some JavaFX stuff I had the feeling that some of the error messages just got lost (for example, change the fxml file to something invalid...then the about menu item does not show up but there is no exception), but some of them showed up in the internal error console. 

#968 Comment 38:
@tobiasdiez Thanks for the tip! I thought everything that gets written to the internal JabRef Error Console also gets printed to the console I started it from? But I had a look at it and still didn't find any exceptions.
This new version creates a new dialog each time the user clicks on the About JabRef menu item. In the previous commit i only wanted to create the dialog once and store it in an object to speed up things when opening the dialog multiple times. This worked just fine for mac and windows but strangely enough the dialog looked different for every second time I opened it on ubuntu 14.04/15.10 with the latest oracle jdk. I didn't test this commit as excessive as the first one but it seems like the "hidden menu item" bug doesn't appear anymore and the window looks the same even when opening it multiple times on all my test systems.
The big disadvantage I see is that each time I want to open the dialog it takes time to create it first. It may not matter for such a small dialog but needs to be considered when porting bigger dialogs such as the preferences one in the same way.

#968 Comment 39:
We recently discussed in the devcall how to further proceed with this PR. 
Please implement the following points:
- Use the [afterburner.fx library](https://github.com/AdamBien/afterburner.fx) to hard-coding of fxml or css file names. See https://github.com/boceckts/jabref/pull/1 (no need to use the dependency injection stuff)
- Add static strings to the fxml file, so for example `text="%Close"`. The preceding percentage sign makes sure that the text is automatically translated.
- As you mentioned above, a central css file should be created to define the general look (e.g. background color)
- The design of the dialog can be improved a bit. You can take the about dialog of intelliJ or firefox (or whatever you like) as a source of inspiration. There is no need to stick to the old JabRef layout.

There were a few more remarks, which I want to make directly against the code. But right now it seems like there are merge problems.

## 

Remarks for the next dialogs implemented in JavaFX:
- You might try out the MVVM pattern as sketched in https://github.com/boceckts/jabref/pull/1. We want to evaluate which pattern works better with JavaFX.
- A quick mockup of how you plan to design the dialog would be nice before you actually implement it. Most dialogs are ~~horrible~~ hard to use and should be improved.

#968 Comment 40:
@tobiasdiez I updated my branch against JabRef/master but the pull request is on JabRef/javafx which hasn't been updated. I think updating the JabRef/javafx branch would resolve the commit chaos.

As for the design I thought about using an accordion element to display the different section titles e.g. authors, developers and the user can expand whatever he wants to see. 

#968 Comment 41:
I updated the javafx branch to the same commit you are based. So once you update the PR hopefully the large amount of false changes disappears. 

I made some small comments to the code (by default, these are only visible in a collapsed state here on github for some reason). In general, the code really looks good! :+1: I especially like the FXAlert class.

So codewise this PR can be merged in from my point of view. Regarding the design, I liked the previous version a bit more. @JabRef/developers any ideas how the dialog should look like? Our dialog shows more infos than in other programs (like IntelliJ) so it hard to copy their design...

#968 Comment 42:
I just updated the javafx branch to the latest HEAD (in master).

#968 Comment 43:
The comments are addressed now @tobiasdiez .
I have to note two things though, before someone else finds them.. :)
For me the localization of strings specified in the fxml file does not work for strings with an underscore (_). If I specified "%Copy_Version" in the fxml file it would give me a button text saying "Copy_Version" instead of "Copy Version". That's why I implemented the workaround with setting the button text to a string property of the controller ("${controller.copyButtonText}") and translating it there.
Second thing to note is that when using the afterburnerfx library the resource files (.css, .fxml) need to be in the same directroy as the View (e.g. AboutDialogView) in the resource folder. I first wanted to put them in the resources in a package gui.help instead of net.sf.jabref.gui.help but it could not be found and so far I haven't seen a possibility to set the path of the fxml and css files in the FXMLView class or its subclass.

#968 Comment 44:
LGTM :+1:
Regarding the underscore in the localization string: this is strange.
As far as I can see, the FXML loader simply calls `resources.getString(aValue);` with the provided key, see http://hg.openjdk.java.net/openjfx/8/master/rt/file/tip/modules/fxml/src/main/java/javafx/fxml/FXMLLoader.java. If the key is not found, then an exception should be thrown. Probably, the resource is found, but not fixed (so `Copy_Version` is returned). Does it work if you change the value to `Copy\ version` in the language file?

Did you tried out if `%Copy version` (with space) or with escaped space `%Copy\ version` in the fxml file works? Probably not...

#968 Comment 45:
I tried writing "%Copy_Version", "%Copy Version" and "%Copy\ Version", the first gave me "Copy_Version" and the last two gave me an exception with the message "Resource "Copy Version" not found." and "Resource "Copy\ Version" not found.". The errors persited when changing the language file to a key Copy\ Version.

#968 Comment 46:
Ok, thanks for testing. One last shot: does `Copy_Version = Copy\ Version` (or `Copy_Version = justToTest`) in the resource file and `%Copy_Version` work?

#968 Comment 47:
The first one gives the desired result. the second one works as well.

#968 Comment 48:
Should I change it and use "Copy_Version=Copy\ Version" in the Localization file?
Also this is an issue when translating single words to multiple words in a different languages. For example I translated "Contribution=Beitrag_leisten" and used text="%Contribution" in the fxml file. Setting the language to german gives a tabbed pane named "Beitrag_leisten" instead of "Beitrag leisten". So maybe it is best to always use the controller injected methode for translating strings?

#968 Comment 49:
Probably the cleanest version would be to derive a new class from ResourceBundle which incorporates the same logic as the translate method, i.e. something along the lines

``` java
public Object handleGetObject(String key) {
  String propertiesKey = new LocalizationKey(key).getPropertiesKeyUnescaped();
  translation = resBundle.getString(propertiesKey);
  return new LocalizationKey(translation).getTranslationValue();
}
```

We will discuss this matter in the next devcall. But if you are motivated, then you are of course allowed to implement such a solution. Or you channel your motivation to the next dialog and create a [mockup](https://jabref.mybalsamiq.com/projects/ui/grid), as you prefer. 

#968 Comment 50:
Well I wanted to port the customize key bindings dialog but I wouldn't change its layout since in my opinion it's quite practical.

#968 Comment 51:
We should sit together and think about a good design. I would like to have tabs instead of these strange pull down menus. Reason: responsiveness of the UI. If I click something, I want to read the things instantly. Proposal: Fix the minor issues here, then merge and then think about a good design of the dialog.

I liked the JabRef 3.2 About dialog more - maybe we can put each heading into a tab and render the first two paragraphs above that.

![grabbed_20160425-090444](https://cloud.githubusercontent.com/assets/1366654/14776156/cd671c7a-0ac4-11e6-9f7c-8ce02bb76a6f.png)
![grabbed_20160425-090519](https://cloud.githubusercontent.com/assets/1366654/14776162/dc647e02-0ac4-11e6-8d5c-6edd3fc11f7b.png)

#968 Comment 52:
For reference: The current state of the dialog:

![grabbed_20160425-090724](https://cloud.githubusercontent.com/assets/1366654/14776203/2ac91b48-0ac5-11e6-95f9-807c472de3bb.png)

#968 Comment 53:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/968?src=pr) is **27.32%**

> Merging [#968](https://codecov.io/gh/JabRef/jabref/pull/968?src=pr) into [javafx](https://codecov.io/gh/JabRef/jabref/branch/javafx?src=pr) will decrease coverage by **-0.00%**

``` diff
@@           javafx    #968   diff @@
=====================================
  Files         696     699     +3   
  Lines       46446   46557   +111   
  Methods         0       0          
  Branches     7703    7705     +2   
=====================================
+ Hits        12719   12721     +2   
- Misses      32628   32738   +110   
+ Partials     1099    1098     -1   
```
1. 2 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/eeb7cf31d1364e8f9e8df199e86a67886b58980c/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
   - Misses `-1` 
   - Hits `+1`
2. 2 files (not in diff) in `...n/java/net/sf/jabref` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/eeb7cf31d1364e8f9e8df199e86a67886b58980c/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566) 
   - Partials `-1` 
   - Hits `+1`

[![Sunburst](https://codecov.io/gh/JabRef/jabref/pull/968/graphs/sunburst.svg?size=660&src=pr)](https://codecov.io/gh/JabRef/jabref/pull/968?src=pr)

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by eeb7cf3

#968 Comment 54:
I changed the code accordingly to your comments.
Note that at the current stage the dialog can not be shown as it throws an exception with the message `Resource "Copy Version" not found`.

#968 Comment 55:
I will now merge this PR in (in the JavaFX branch) so that you can work on further dialogs. 

You are right, the keyboard shortcuts dialog looks relatively good. The "grab" button is probably superfluous and "Default" should specify if it resets just one shortcut or all. Moreover, I like the design in the Vivaldi browser:
![pic](http://st1.bgr.in/wp-content/uploads/2015/12/vivaldi_keyboard-shortcuts.jpg)
See also the description https://help.vivaldi.com/article/keyboard-shortcuts/.
I especially like that the shortcuts are grouped.

#968 Comment 56:
Current state is still not that nice.

![grabbed_20160907-185247](https://cloud.githubusercontent.com/assets/1366654/18321048/adfb1936-752c-11e6-9860-038c2c9d26cf.png)

I know that removing code is hard, but could you please make the dialog appearing more than the old one and showing all information **nice** in one place? I think, we can show it on one page (maybe not the developers). We do not need collapsing for one liners.

#968 Comment 57:
I will simplyfy it and remove the tab view.

#968 Comment 58:
@JabRef/developers opinions to the following design?

![aboutdialogfx](https://cloud.githubusercontent.com/assets/15340757/18347890/8bf6e8b4-75c8-11e6-9f00-f0e4cfc427f1.png)

#968 Comment 59:
Looks good! Just one minor thing, the URL for contributing seems to be not aligned at the same height as the label

#968 Comment 60:
Looks way better!
Only criticism:
- The background color of the header is...well...ugly :smile: 
- Display the URLs is unnecessary, better link text 
- Remove border around the authors field (if easily possible)
- The license is wrong ( ? @koppor ? )
- The sub-header "Developer" and "Authors" don't stand out.

I would slightly reorganize everything, but your version is also fine
![image](https://jabref.mybalsamiq.com/mockups/4942065.png)
(without the underlined text, that's a relict from the markup software)

#968 Comment 61:
@tobiasdiez  and no Comic Sans MS style (as from the mockup) http://www.comicsanscriminal.com/  ;)

#968 Comment 62:
So there are two new versions similar to what @tobiasdiez suggested.
(For some reason the authors contain weird characters for me)

![screen shot 2016-09-09 at 12 40 38](https://cloud.githubusercontent.com/assets/15340757/18384543/589c80e6-768b-11e6-9268-a502718835eb.png)
![screen shot 2016-09-09 at 12 45 01](https://cloud.githubusercontent.com/assets/15340757/18384544/5a42405c-768b-11e6-8368-72494a77562f.png)

It really looks a bit weird to me with so much space in the top but the information to display is rather small, maybe resize the dialog a bit smaller?

#968 Comment 63:
I tried a smaller width for the dialog and personally this is my favorite, all the headings and information are left aligned and the icon has a small reflection which does not interfere with any text. Opinions are welcomed.

![screen shot 2016-09-09 at 15 54 17](https://cloud.githubusercontent.com/assets/15340757/18389466/53fc3372-76a6-11e6-8bfc-8374df7190f2.png)

#968 Comment 64:
The small dialog looks good.  :heart: 

#968 Comment 65:
Yes I really love the smaller dialog. Good work! Where is the PR?? I want to merge it right-away :smile: 
(small suggestion: maybe move the "Developers" headline a bit down to increase the separation to the previous text)

#968 Comment 66:
@boceckts  Could you please test with the gradle change  I introduced in #1945 and see if authors now are displayed correctly`?. And please check the encoding of the Authors file (should be UTF-8 without BOM)

#968 Comment 67:
@Siedlerchr the encoding is set to UTF-8 without BOM but unfortunately your changes have no effect for me.
@tobiasdiez There it is 😄 and I moved down the sub heading a little bit.

#968 Comment 68:
Regarding the encoding problems, I just fixed it with #1954.  Please try again with the changes I made (gradle changes + version info)
And check: `src\main\resources\build.properties` if it is correctly encoded as utf8 without bom.

--------------------------------------------------------------
#966 Comment 1:
:+1: The alternative is to parse the regex and guess when a space is used as separator and when not. I would opt to be strict on regex parsing (as you propose) and rely on the users that they are able to use `|` when they want to search for alternatives.

#966 Comment 2:
Have a look at SearchQueryHighlightObservable at method fireSearchlistenerEvent. There, you can add another elseif which handles regex based searches which does not use the sentence analyzer.

--------------------------------------------------------------
#965 Comment 1:
A next step would be to integrate the code for the OpenOffice Path detection, too:
https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/openoffice/AutoDetectPaths.java

#965 Comment 2:
@Siedlerchr Good point, but this requires more work as the logic is mixed with file chooser dialogs etc.

#965 Comment 3:
:+1: 

#965 Comment 4:
Nice improvement!

Does it make sense to use the state pattern here? That is, the JabrefDesktop class has an internal OS object which is initialized to the correct OS in the constructor and most of the methods just pass through to the OS class. Has the advantage, that the `if(OS.Windows) ... elseif(OS.Linux)` disappear. 

#965 Comment 5:
@tobiasdiez Definitely worth a shot! :+1: 

#965 Comment 6:
The problem is that we need to have an implementation for each of the OS then + a OS-independent implementation. This is not the case which makes it hard to implement that correctly now, as far as I can see.

#965 Comment 7:
Mhh, but isn't the JabRefDesktop the OS-independent version (at least from the outside it doesn't matter what OS is used) and the newly created classes are the OS-dependent version?

My idea was to write 

```
if(OS.Windows)
   NativeDesktop os = new Windows();
if(OS.Linux)
   NativeDesktop os = new Linux();
```

in the constructor of JabRefDesktop (where `os` is a private field) and then call for example `os.openFile(link, "ps");` instead of the three if clauses.

#965 Comment 8:
Yeah, I got your idea, but there need to be a lot of things touched to make this work consistently. Let me give it a try...

#965 Comment 9:
I'll for example get problems with this method:

```
    public static void openFolderAndSelectFile(String fileLink) throws IOException {
        if (OS.WINDOWS) {
            WINDOWS.openFolderAndSelectFile(fileLink);
        } else if (OS.LINUX) {
            LINUX.openFolderAndSelectFile(fileLink);
        } else {
            File f = new File(fileLink);
            Desktop.getDesktop().open(f.getParentFile());
        }
    }
```

As openFolderAndSelect is not implemented for OSX yet.

```
        if(NATIVE_DESKTOP.isPresent()) {
            NATIVE_DESKTOP.get().openFolderAndSelectFile(fileLink);
        } else {
            File f = new File(fileLink);
            Desktop.getDesktop().open(f.getParentFile());
        }
```

#965 Comment 10:
Ah ok. If it is two much work, then just leave it as it is right now. I think it is already a big improvement over the older code.

#965 Comment 11:
Ok, I tried to unify this stuff as much as possible. Might introduce some new behavior that need to be fixed later on. Still got problems with the preferences that are used via ExternalFileType that force me to keep the code inside the gui package and JabRefDesktop for now.

--------------------------------------------------------------
#964 Comment 1:
 #871 this seems to be related to the about dialog

#964 Comment 2:
Please create your pull requests against the javafx branch instead of master.

#964 Comment 3:
As requested see #968 

--------------------------------------------------------------
#961 Comment 1:
This is a follow up to #230.

--------------------------------------------------------------
#956 Comment 1:
:+1: 

--------------------------------------------------------------
#955 Comment 1:
@matthiasgeiger : Hello, could this pull request be merged?

#955 Comment 2:
@mlep: can you please rebase and I'll merge it.

#955 Comment 3:
Hello @oscargus , I do not what does "rebase" exactly means...  In fact, I carried out all these changes online.

#955 Comment 4:
Ah, OK! It basically means "apply your changes again on the latest version
of the file", which is done by a command so no need to actually do it again
for you.  No need to worry though. I'm sure someone with more knowledge
than me can merge this. (The reason being that someone managed to squeeze
in a few new strings, so now Github can not simply combine the files.)

#955 Comment 5:
Hm, I just merge this in by following the instructions given at the link under **command line instructions**. 

#955 Comment 6:
Oh there's a link. :-)

#955 Comment 7:
Thanks for merging.
Where is the link ?!?

#955 Comment 8:
The link is no longer here, as it only appears when there is a conflict with the pull request. :)

#955 Comment 9:
Was it something like:

> This branch has conflicts that must be resolved
> Only those with write access to this repository can merge pull requests.

?

#955 Comment 10:
Yes, but as I do have the rights, it shows a link there with instructions to merge it manually. 

#955 Comment 11:
OK. I first thought I had missed to read the instructions...

--------------------------------------------------------------
#954 Comment 1:
:+1: 

--------------------------------------------------------------
#951 Comment 1:
:+1: can be merged directly from my opinion. Nice work. Good foundation for further improvements.

--------------------------------------------------------------
#950 Comment 1:
I'm a bit ambiguous regarding if the formatter really should add . and guess that initials should be separated... I think we should decide on this.

Of course it helps improving the references from some perspective. Still it seems like two different use cases: 

1) good author formatting in -> unified formatting out
2) shit author formatting in -> make some guesses and provide most likely better formatting out.

Not sure if they should be the same formatter. I would like 1) automatically, but not necessarily 2).

Not sure how Bibtex will handle A L Some... Probably not as initials.

Shouldn't it be Olsen, Y. Y.? (But then Y.-Y. Olsen shouldn't be separated.)

Two more (actual) author names which might be good for tests: Kenneth O and fred harris.

#950 Comment 2:
Maybe we should rename the current code to "PersonListFixer" and use the AuthorList functionality for "PersonsFormatter" (which I find a better name than AuthorFormatter as also editor lists can be formatted)

#950 Comment 3:
Makes sense. And maybe get rid of the ordering and only focus on initials (which I guess is the main thing it does when ordering is excluded). Agree with "person".

#950 Comment 4:
I have absolutely no idea how the AuthorsFormatter works, but in my humble opinion it should be a two liner: parse author string to PersonList and then call `getNormalizedString` or something like that on the PersonList object (so this is what you have changed here). Having two classes essentially doing the same thing fells redundant. So I would propose that you now add all the functionality of the old formatter to the PersonList class to fix the tests.

#950 Comment 5:
@tobiasdiez I think, your suggestion is done at f8d33fd7e9ae93766b036fc51db6d0967d09e75b. I assume you meant `AuthorList` as there is no `PersonList`.

I discovered `net.sf.jabref.logic.mods.PersonName`, which also does some magic parsing, but not as magic as `net.sf.jabref.logic.formatter.bibtexfields.AuthorsFormatter.format(String)`.

With my screenshot above, I wanted to highlight that AuthorsFormatter is trying to _fix_ names.

If I get you right, you talk about usecase "1)". AuthorsFormatter is mainly for usecase "2)". This demonstration PR makes AuthorsFormatter to fulfill usecase "1)".

For an import of data, for example via [FreeCite](http://freecite.library.brown.edu/), the authors have to be post-processed. (use-case 2)). 

Maybe, the current AuthorsFormatter should be called `ArbitraryPersonsToBibtexPerons`? And a new formatter `NormalizePersons` should be introduced. The NormalizePersons is also available as save action, but the ArbitraryPersonsToBibtexPerons is not. This does too much and should only be called "controlled".

#950 Comment 6:
I suspect with use case 1 and 2 you mean the different cases as outlined above by @oscargus. While I see that these two different use cases exist in practice, I wouldn't separate them that clearly in the code. 
In my opinion all the author related stuff should be handled by the AuthorList class (or as you proposed PersonList). This means:
input -> parse by AuthorList -> output to sensible format

The first step should be the same for both use cases and only the second step might be different for "good" vs "bad" data. 

But as I said above, I have not a very deep understanding of this Author-formatting business. 

#950 Comment 7:
The main reason to have two cases is that one of them is based on guessing
and basically cannot be systematically reversed.

#950 Comment 8:
Since the code of the two use cases fundamentally differs and the guessing could go wrong, I would vote for keeping it separated. I understand, however, the user perspective to have only one formatter.

In the current state, I don't have resources to work on improving the fix algorithm. Would it be OK to keep them separated for now and to aim for an integration later?

#950 Comment 9:
Small note: the recently released version 3.3 of biblatex changed a few things related to naming. Citing their changelog

```
INCOMPATIBLE CHANGE - There have been major changes to the handling of
  name lists in order to generalise name handling beyond the narrow
  confines of the legacy bibtex name parts of "last, first, prefix,
  suffix".
```

So they were apparently not happy with the standard ("legacy") bibtex format. Me might have a closer look at how biblatex handles author lists.

#950 Comment 10:
What is the current status here? @koppor Should we close this for now and work on it later if we have time? I think this is not that pressing at the moment, isn't it?

#950 Comment 11:
I found the method expandAuthorInitials in ImportFormatReader(!) which does AL -> A. L. etc. Moved it to logic.util.StringUtil in #1138 

#950 Comment 12:
This was only a demo of making us aware of the differences between AuthorList and AuthorsFormatter. Think, this is really not urgent.

--------------------------------------------------------------
#949 Comment 1:
Think, you will have to rebase on master as soon as #948 went through :innocent:

#949 Comment 2:
@koppor  It is only existing in the non-english translation files.
I didn't want to delete it, as it can be reused for a translation and simply adding the %0 parameter could possibly change the semantics for some languages. Don't know if any language may has it the other way round

#949 Comment 3:
I thought: better some translation than none.

Please look carefully on my regular expression. It just adds the new translation:

![grabbed_20160312-163252](https://cloud.githubusercontent.com/assets/1366654/13723799/1a705c06-e870-11e5-8337-2c8abed069f2.png)

#949 Comment 4:
Changed the translations now.
Do I have to rebase now?

#949 Comment 5:
Could you merge your last two commits into one? (`git rebase -i HEAD^^` and so on)

Then, we have to wait until #948 is merged. Then, you can rebase.

#949 Comment 6:
#948 is merged

#949 Comment 7:
@Siedlerchr Please do as described at https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master to have one commit in this PR.

#949 Comment 8:
@koppor  Done. Just got stuck with rebasing. The reset helped.

#949 Comment 9:
:+1: looks good.

--------------------------------------------------------------
--------------------------------------------------------------
#947 Comment 1:
I'm unsure whether this is the correct behavior: If I delete multiple entries at once, all of them should be restored. I thought that the undo/redo concept of JabRef is that always undo and redo actions are packaged as a whole.

Is it a valid workaround to globally flag whether an redo/undo action is in progress and thus no new undo thing is put on the undo stack.

#947 Comment 2:
I would also prefer that the undo stuff is fixed so restoring several bibentries works. 

#947 Comment 3:
But good that you found out the reason for the failing multiple entries! :+1:

#947 Comment 4:
OK, I'll look further into it and search for a better solution!

#947 Comment 5:
@bartsch-dev can you point me to the code where the insertion adds a new change in the undomanager? As far as I see, the revert action just calls database.insert() which does not call the undo manager. Thanks.

#947 Comment 6:
When an entry is about to being restored [`UndoableRemoveEntry#undo()`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/undo/UndoableRemoveEntry.java#L62) is called.
The entry is inserted back into the database which fires a [`DatabaseChangeEvent`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/model/database/BibDatabase.java#L185) and calls [`SpecialFieldDatabaseChangeListener#databaseChanged(DatabaseChangeEvent e)`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/specialfields/SpecialFieldDatabaseChangeListener.java#L25) and adds another Edit into the `undoManager`.
If we follow that trail we see that the `UndoManager` trims the Edits (line 502) which calls `die()` (line 244) and kills the `NamedCompound`which contains the other entries we haven't undone yet.

#947 Comment 7:
I wonder whether it is a solution to add a second paramter to `insertEntry` indicating whether the action should be a silent change or not. - Or add a second method `insertEntrySilently`.

#947 Comment 8:
Thank you @bartsch-dev for you helpful explanation! I think the cleanest way is to remove the `SpecialFieldDatabaseChangeListener` and let the calling code handle the undo-management. I.e. if I call database.insert() then I also have to create the undo event there. Otherwise we have problems everywhere with handling multiple changes (undo an import?). I think this strategy is also applied everywhere else, at least the group interface handles the undo thing itself.

But maybe you come up with another solution.

#947 Comment 9:
When removing the `SpecialFieldDatabaseChangeListener`, it should be taken care that the special fields still work. 

Currently, the fields are stored in the keyword field and are put into normal fields to enable rendering in the table. If the `SpecialFieldDatabaseChangeListener` is removed, this rendering IMHO won't take place any more.

When we rewrite the special fields (https://github.com/koppor/jabref/issues/84), this might change.

#947 Comment 10:
Another working solution I found was to create a new `UndoableEdit` which manages multiple Entries with a List. When undoing the removal it uses the new `addEntries()`-Method inside `BibDatabase` which adds all the Entries and after that finally fires the DatabaseChanges.

#947 Comment 11:
@koppor @tobiasdiez WDYT?

#947 Comment 12:
As I explored deeper into the code I noticed that the Undo which the `SpecialFieldDatabaseChangeListener` adds doesn't do anything. Basically it's an empty `NamedCompund` (which gets discarded by the `UndoManager`).

Can that confirm anyone?

#947 Comment 13:
Currently without code here. But double check that the stars in the column
rating are displayed in all undo cases. Deleting/adding an entry is OK, but
what about undo/redo of adding keyword "rank1" in the keyword field? - My
feeling is that undo/redo if that won't work when the updatelistener is
changed.

Also if an entry with keyword "rank1" is added -> is the column "ranking"
updated to show one star?

#947 Comment 14:
The [`SpecialFieldDatabaseChangeListener`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/specialfields/SpecialFieldDatabaseChangeListener.java#L18) only reacts on the insertion of entries.

On another note, when changing the rank of an entry you have to click into the Entry List to repaint it. But I think there was opened an Issue on that a short time ago.

#947 Comment 15:
I deleted the `SpecialFieldDatabaseChangeListener` and adjusted l10n.
As far as I can tell everything works just fine (tested it with deleting/undoing entries with rank/marked/color marked; @tschechlovdev maybe you can do some additional testing?).
I removed the ID generation in `UndoableRemoveEntry` since its not necessary.

I have NO idea why circleCI fails and how to fix it.

#947 Comment 16:
```
:compileJava/home/travis/build/JabRef/jabref/src/main/java/net/sf/jabref/gui/BasePanel.java:1324: error: cannot find symbol

        database.addDatabaseChangeListener(SpecialFieldDatabaseChangeListener.getInstance());

                                           ^

  symbol:   variable SpecialFieldDatabaseChangeListener

  location: class BasePanel
```

Should be quite obvious what is wrong and not be that hard to fix?!

#947 Comment 17:
Woops, I slipped there. I extracted some code for another Bugfix which will get its own PR and extracted too much.
Now all checks pass but before that the build on circleCI exceeded the memory of 4G (no typing error, but I think circleCI meant 4GB) and failed.

#947 Comment 18:
LGTM :+1:
Its nice that a bug can be fixed by removing code.

#947 Comment 19:
Special fields functionality is disturbed by this patch.

## Steps to reproduce
1. open [special-fields.bib](https://github.com/JabRef/jabref/blob/master/src/test/resources/testbib/special-fields.bib)
2. double click on second entry (key: entry-with-rank2)
3. Go to "BibTeX source"
4. Copy the complete string into notepad++
5. Close the entry editor
6. Change `rank2` to `rank4` in both the key and the keywords field
7. Mark everything
8. Copy into the clipboard
9. Focus JabRef. Ensure that the entry editor is really closed
10. Click into the white area
11. paste the entry (using ctrl+v)
12. expected: four stars shown at ranking column; as is: no stars shown at ranking column

![grabbed_20160412-083537](https://cloud.githubusercontent.com/assets/1366654/14451731/8d057f68-0089-11e6-898b-60117395ad0c.png)

## Intermediate solution
1. Open the editor
2. Go to the "General" tab
3. Change `rank4` to `rank3`
4. Save
5. Change `rank3` to `rank4`

## General remarks

I know that the keyword-based synchronization is a code which is not that straight forward as other code in JabRef. I personally like the functionality to have columns shown which are based on keywords I made. The reason might be that I sometimes edit my bibtex files manually, which also [nearly half of the survey participants do](http://www.jabref.org/surveys/2015/analysis).

#947 Comment 20:
Thanks for that detailed explanation.

IMO the addition of the Undo-Object in [`SpecialFieldDatabaseChangeListener`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/specialfields/SpecialFieldDatabaseChangeListener.java#L25) is not useful.
Mostly because its added before the more important Undo-Object, the undo of the entry paste, and when you undo the paste this undo-Object is irrelevant. 

#947 Comment 21:
@bartsch-dev Could you add an integrationTest, meaning a test for the UI demonstrating the undo/redo behavior? Then, we don't have to rely on the [above manual steps](https://github.com/JabRef/jabref/pull/947#issuecomment-208730863) for testing. @bruehldev and @Braunch should be the experts in UI testing.

#947 Comment 22:
I'll do it it the next sprint, which starts today.

#947 Comment 23:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/947?src=pr) is **27.55%**

> Merging [#947](https://codecov.io/gh/JabRef/jabref/pull/947?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will decrease coverage by **-0.91%**

``` diff
@@             master       #947   diff @@
==========================================
  Files           700        695     -5   
  Lines         46231      46292    +61   
  Methods           0          0          
  Messages          0          0          
  Branches       7631       7649    +18   
==========================================
- Hits          13158      12753   -405   
- Misses        31949      32439   +490   
+ Partials       1124       1100    -24   
```
1. 5 files (not in diff) in `.../net/sf/jabref/event` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6576656E74)
2. 1 files (not in diff) in `...n/java/net/sf/jabref` were deleted. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A6162726566)
3. 2 files (not in diff) in `...va/net/sf/jabref/sql` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F73716C) 
   - Misses `+1`
4. 2 files (not in diff) in `...jabref/specialfields` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F7370656369616C6669656C6473)
5. 2 files (not in diff) in `...f/jabref/model/entry` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F656E747279) 
   - Misses `+9` 
   - Partials `+1` 
   - Hits `+8`
6. 2 files (not in diff) in `...abref/model/database` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6D6F64656C2F6461746162617365) 
   - Misses `+3` 
   - Partials `+1` 
   - Hits `-1`
7. 2 files (not in diff) in `...sf/jabref/logic/util` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F7574696C) 
   - Misses `+16` 
   - Partials `-4` 
   - Hits `-12`
8. 2 files (not in diff) in `...f/jabref/logic/msbib` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F6D73626962) 
   - Misses `+345` 
   - Partials `-14` 
   - Hits `-302`
9. 4 files (not in diff) in `...jabref/logic/cleanup` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F6769632F636C65616E7570) 
   - Misses `-1` 
   - Hits `-4`
10. 6 files (not in diff) in `.../net/sf/jabref/logic` were modified. [more](https://codecov.io/gh/JabRef/jabref/commit/d2d809637d7f03dfb1d634f6cfdb706a653afd01/changes?src=pr#7372632F6D61696E2F6A6176612F6E65742F73662F6A61627265662F6C6F676963) 
    - Misses `+24` 
    - Hits `-42`

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [50fe6d7...d2d8096](https://codecov.io/gh/JabRef/jabref/compare/50fe6d7499239fa2f04354697411495b79691e74...d2d809637d7f03dfb1d634f6cfdb706a653afd01)

#947 Comment 24:
LGTM

Please rebase to allow it to be marged

#947 Comment 25:
Please resolve the conflicts.

#947 Comment 26:
I rebased and resolved the conflicts.

#947 Comment 27:
Tests fail in master. Can you have a look? Otherwise, I will revert this merge. 

#947 Comment 28:
Hm, that's very strange (the tests in this PR passed).
I will look into it.

#947 Comment 29:
After a quick study I noticed that assertJ is simply to fast for JabRef, meaning that the entry table after opening the database is simply not loaded and thus cannot be found. By increasing the delay between events from assertJ (`robot().settings().delayBetweenEvents(500);`) it can be averted but I don't like it that way as it depends on the power of the executing machine.
I will look further into it tomorrow.

You can revert the merge if you like, that way we can have a clean commit without a mess in between.

#947 Comment 30:
The test seems to fail randomly. :(

Making it stable enough is fine for me. 

#947 Comment 31:
@bartsch-dev  have you tried using robot().waitForIdle() ? 
This should wait until the Ui loaded the table without defining a timeout that slows the tests down on faster machines.

#947 Comment 32:
That doesn't work.
A simple solution was to open an empty table at the very beginning, that way the loaded database opens without delay.

I'll open a new PR in a second.

--------------------------------------------------------------
#946 Comment 1:
Tried to address all comments and created different commits for different issues to ease reviewing - hopefully.

#946 Comment 2:
LGTM

#946 Comment 3:
Fixed in eb26ff3.

--------------------------------------------------------------
#945 Comment 1:
:+1:

#945 Comment 2:
:+1: rebase and merge

--------------------------------------------------------------
#944 Comment 1:
LGTM

#944 Comment 2:
This fixes #941, doesn't it?

#944 Comment 3:
Side comment: The entires in Menu_*.properties had to be removed, too. See 04cff82.

#944 Comment 4:
Further changes in the language files are done at #948. Still missing: Medline, OAI2, ACM, ... are still in the language files. @Siedlerchr Do you want to take over?

#944 Comment 5:
First this fix was for #941, but I did not remove the GVK long Description. Is still useful. About the rest I can document this on the website.
Oh, I just saw that I only checked the normal language property files. Will continue removing and will propose a PR for documentation on the website

--------------------------------------------------------------
#942 Comment 1:
From what I understand in this discussion, that the US exporting laws would apply if you distribute the software from an US Server:
http://security.stackexchange.com/questions/7015/us-export-control-on-open-source-libraries

The best solution would be to load it dynamically and not distribute it with JabRef.
Then users can download the library, put them in the folder and use it.

#942 Comment 2:
To be honest I don't think it is worth to make such a hassle just because of a partially working PDF content importer functionality. I mean how often do we really need this? Isn't it acceptable if we need to get the BibTex entry by a DOI or set it manually if the PDF is encrypted? It really just is a problem if we do not already have the BibTEx entry (which is probably often the case) or don't supply a DOI etc. Think we could discuss this in a call if I'm not the only one concernced about such a change.

#942 Comment 3:
It's also about XMPUtil, which is really used in the wild. I agree that write-protected PDFs are not the majority of the PDFs in the wild.

With this patch, we could distribute JabRef without BouncyCaslte and users requiring that feature can compile a crypto-aware JabRef for themselves. Linux distributions can decide for themselves whether they want to enable that feature in their binary distributions.

#942 Comment 4:
LGTM :+1:

#942 Comment 5:
DevCall result: We want to enable reading of write-protected PDFs as they are not that seldom. In the future, JabRef [will have better support for PDF text and PDF comments](https://github.com/JabRef/jabref/wiki/FeatureRequests-Sorted#make-a-better-use-of-my-linked-files-please) (#139). Thus, this PR enables treating of more PDFs.

--------------------------------------------------------------
--------------------------------------------------------------
#939 Comment 1:
I wouldn't change the canonical serialization. It is canonical because we don't normalize anything. 

In my opinion the tests for the XMP class should be improved. Proposed solution:

``` java
BibEntry entry = new Entry();
entry.setField("author", "K. Crowston");
entry.setField("field", "data");  // or if you prefer use the parser, but I think the code will be shorter and better maintainable in this way 

XMPUtil.writeXMP(pdfFile, entry, null);

List<BibEntry> result = XMPUtil.readXMP(pdfFile.getAbsoluteFile());
BibEntry expected = entry.clone(); // or new BibEntry(entry), whatever the method is called
expected.setField("author", "Crowston, K."); // we expect normalized author, so we need to state it in the test and don't hide it in a changed equals method.
BibEntryAssert.equals(Arrays.listOf(expected), result);
```

#939 Comment 2:
I think so, too. One could add a normalized format, but at the moment I do not see any help in there right now. Other things are much much much more pressing. :)

--------------------------------------------------------------
#937 Comment 1:
Looks good :+1:

#937 Comment 2:
:+1: 

#937 Comment 3:
:+1: 

#937 Comment 4:
Does the panel show up again when selecting another entry after deleting one? If so :+1: 

#937 Comment 5:
Yes, it does.

#937 Comment 6:
We really should consider to implement an event system...

#937 Comment 7:
:+1: for the event system (maybe use the stuff that comes with google guava. 

--------------------------------------------------------------
#933 Comment 1:
@koppor WDYT?

#933 Comment 2:
Ok for me. Refs #935.

--------------------------------------------------------------
#931 Comment 1:
Issue: https://github.com/JabRef/jabref/issues/462

#931 Comment 2:
You should also include an else case for unsupported operating systems giving some sort of information message

#931 Comment 3:
Please squash commits and try to limit your first line of the commit message to 50 characters or less

#931 Comment 4:
All done. Thank you for your advices :+1: .

#931 Comment 5:
Very good :+1: 

#931 Comment 6:
Now just merge all commits into one and then this can be merged in my opinion. Good work!

#931 Comment 7:
What about the coverage? I just rebased the branch.. I think it's up on the additional code which is not tested jet (/src/main/java/net/sf/jabref/exporter/SaveDatabaseAction.java: Lines 349 and 393)

#931 Comment 8:
Good point. You should definitely add tests. Some hints:
- writing tests right now is not practical, since invoking the method results in opening a console -> hard to test
- so the only thing we can test is that the right command is invoked -> need to mock `Runtime` -> need to move the code to a new class so that we can inject the runtime as a dependency in the constructor. (by the way, the new class should live in `logic`)
-  now you want to achieve 100% coverage, so you need to change the OS in your tests. Hard to do if the corresponding fields are static final fields. So the members of the `OS` class should be converted to be non-static instance members in order to just mock them. (consider using enum instead of three boolean fields)

Yes looks like a lot of work just to test 10 lines...but these changes also result in structural improvements like less static methods, clear dependencies etc.

Feel free to ask you if you need more help. 

#931 Comment 9:
I'm going to create new ticket about this test for the second sprint, cause the first one with this issue is over.

#931 Comment 10:
I think the effort to test these 10 lines of code is not worth the effort in that case. I would use the time for more important tasks. 

Otherwise, :+1: from me to merge this in. 

PS: Be aware that #961 may require you to use another icon code as it has changed since then. 

#931 Comment 11:
Please rebase on master (resolve the conflicts) [and squash everything in one commit](https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master for a short howto). Please doublecheck the icon because of #961.

#931 Comment 12:
Even if you decide not to test the code, then I still prefer a move to a new class with non-static method in the `logic` package. @simonharrer what do you think?

#931 Comment 13:
@koppor Done resolving conflicts and updating icon code.

#931 Comment 14:
@tobiasdiez I don't get your wish: `openConsole` is a `logic`?

I would leave as is and do a (separate) complete refactoring of JabRefDesktop if needed.

#931 Comment 15:
Yes for me `openConsole` is logic or, if you want, creating the `open console command` is logic and maybe invoking it (i.e. runtime.exec) is kind of gui. I think if it is added to JabRefDesktop, then it will stick there forever. So better place it right the first time. But I have no strong opinion about this...

#931 Comment 16:
So ready to merge?
@koppor Or should we port `openConsole` to `logic` package? In my opinion there is no suitable class yet to get it in there. We would have to create a new one, probably in `logic/util`.

--------------------------------------------------------------
#930 Comment 1:
Looks good!

#930 Comment 2:
Code looks good.

I don't see the current state in the toolbar. - The radio indicators change. I don't see any change in my database, but that was also the case before your change.

#930 Comment 3:
Change in the database? Why should there be a change in the database?

What are you not seeing in the toolbar? All toolbar stuff works on my machine. 

#930 Comment 4:
Yeah, only the group window should have a change.

Could we implement "highlight" as change in the background color (maybe the JabRef colour) and not via underline? :innocent: -> Filed as #932

<s>Where in the toolbar should I see something?</s>

#930 Comment 5:
I do not want to mess with the groups code at the moment, as this is done by @tobiasdiez currently - avoding any merge conflicts. 

The toolbar has not been changed, but the menu itself now shows the state of the toogle-actions. 

#930 Comment 6:
Please rebase, then this can be merged in my opinion. 
@koppor can you please open a new issue for your suggestion regarding highlighting.

#930 Comment 7:
I had to improve this fix: previously, two boolean preferences were used to describe the three states DISABLED, ANY and ALL. The combination (true, true) of the booleans was not allowed. I replaced this by using a single string preference which is either "all", "any" or anything else which resorts to DISABLED. I did not implement any migrations as I would take it into account if the behaviour changes upon upgrade as the user can easily change the setting manually. Should not be a hassle. 

#930 Comment 8:
Would it make sense to create an enum for these states?

#930 Comment 9:
I tried to create an enum, but ended up creating a separate preferences class with methods for each setting. 

#930 Comment 10:
I wonder whether MDSD would have been of any help here :innocent: 

#930 Comment 11:
???

--------------------------------------------------------------
#929 Comment 1:
1./2.: The usage of DOIs was requested by a user: If the PDF contains a DOI string, the data of the DOI should be used and not the guessed content. - With old JabRef code, that code worked. Do you have a proposal to bring that functionality back?

3.: The parsing results are better for Springer and IEEE papers than with other existing open source scrapers and Mr. DLib. That fact has to be regarded, too.

#929 Comment 2:
The DOI finding should work again now, but the DOI class has quite some redundant code now, as I need to exclude spaces from the findInText regex. I don't know if there are any DOIs out there that include spaces but theoretically it seems to be allowed...

#929 Comment 3:
For me `src/test/resources/encrypted.pdf`is not raising any exception. Also, `importEntries` is not throwing any `IOException`, which is propagated to other methods later on. The functionality is really flawed....

#929 Comment 4:
Spaces should be encoded as %20 in a DOI, so I do not think it will be a problem, see https://www.doi.org/doi_handbook/2_Numbering.html#2.5.2.4

I seem to recall that we changed the encoding of DOIs at some stage, maybe this should be revisited?

#929 Comment 5:
So you mean we can replace the EXACT_DOI pattern with the DOI_PATTERN?!

--------------------------------------------------------------
#928 Comment 1:
:+1: 

#928 Comment 2:
:+1: 
and sorry for introducing this bug in the first place.

--------------------------------------------------------------
#926 Comment 1:
Looks good to me :+1: 

#926 Comment 2:
Looks good! :+1:

#926 Comment 3:
- Please extract the setting of the key bindings as a method. Otherwise, looks good to me too. 
- For each action, one has to register a string two times, one at the input map and one in the action map, e.g., "print". Can you extract variables so that this is made more clear? A local variable for each of the blocks should suffice, making it a constant moves it away from the code in question, hence, just create a local one. 

#926 Comment 4:
Extracted the key bindings and the actionMapKeys.

#926 Comment 5:
:+1: 

--------------------------------------------------------------
#925 Comment 1:
:+1: 

#925 Comment 2:
When is the equals required (except for simplifying this test)? Seems like one can add them later if required.

The PR looks good!

#925 Comment 3:
No as far as I can see equals is never used for the formatters (and also no getKey().equals which could be replaced with an internal equals).

--------------------------------------------------------------
#924 Comment 1:
:+1: 

--------------------------------------------------------------
#922 Comment 1:
The background of the regex-solution is the issues pointed out by Codacy, requiring a locale to do "proper" toLowerCase/toUpperCase. This doesn't solve every issue related to that, but at least a few... Shouldn't be that frequently used so performance is an issue.

#922 Comment 2:
Why not just pass Locale.EN to the to*Case methods?

#922 Comment 3:
Yes, that is of course a simple solution. :-) However, there's no need (in the general case) to support other languages? Considering that we still have Unicodesupport. What happens to ß?

#922 Comment 4:
yes, but when comparing it to a constant later, it is not that much of an issue, I think. 

#922 Comment 5:
Could you please update this and just use toLowerCase with Locale.EN? Then, this can be merged in. 

#922 Comment 6:
Changed back (but kept the uni/dep/etc detection, which IMHO is better now).

#922 Comment 7:
LGTM

--------------------------------------------------------------
#918 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#916 Comment 1:
Looks good to me.

--------------------------------------------------------------
#915 Comment 1:
Nice. Looks good. But I would add a note that resetting the perferences requires a restart (see change the language or the remote settings). 

#915 Comment 2:
Good point. An info message is now shown.

#915 Comment 3:
Looks good to me. 

--------------------------------------------------------------
#912 Comment 1:
Looks good to me. Rebase and merge this. 

--------------------------------------------------------------
#910 Comment 1:
In general, this looks good to me. But I would welcome if you wait with merging this in until #847 is accepted (because otherwise rebasing this other PR will be a hell)

#910 Comment 2:
@tobiasdiez  No problem.  What about including the few changes to the group related classes here in your PR? 

#910 Comment 3:
We should be able to merge this now.

#910 Comment 4:
Yes, but quite a few of the files has been moved since the original PR... I would almost suggest redoing compared to rebasing/merging... Good luck @Siedlerchr! :+1: 

#910 Comment 5:
Yeah, I will look at this in the next days. I think many of these things already have been taken into account.

#910 Comment 6:
Bump :innocent: 

#910 Comment 7:
## [Current coverage](https://codecov.io/gh/JabRef/jabref/pull/910?src=pr) is **27.56%**

> Merging [#910](https://codecov.io/gh/JabRef/jabref/pull/910?src=pr) into [master](https://codecov.io/gh/JabRef/jabref/branch/master?src=pr) will increase coverage by **+<.01%**

``` diff
@@             master       #910   diff @@
==========================================
  Files           695        695          
  Lines         46296      46293     -3   
  Methods           0          0          
  Messages          0          0          
  Branches       7650       7650          
==========================================
  Hits          12759      12759          
+ Misses        32437      32434     -3   
  Partials       1100       1100          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [f968736...fc9da2f](https://codecov.io/gh/JabRef/jabref/compare/f9687367e8b9fe67c02ec59169581430e5d87067...fc9da2f83b5fb49103c23389e07b5de30c582e46)

#910 Comment 8:
@koppor  Re-added the changes. Some issue were already fixed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#906 Comment 1:
:+1: 

--------------------------------------------------------------
#905 Comment 1:
Looks good to me, except for the stream closing issue due to possible reuse. 

#905 Comment 2:
Did you had time to check the issue with the stream?

#905 Comment 3:
No, not yet. Hopefully this weekend...

#905 Comment 4:
I imported some databases of different types and it seems like it works. I therefore seems like closing Readers does not close the parent Stream, although it apparently is enough to close the Stream to also close the Reader.

#905 Comment 5:
As far as I can see, the only thing that is missing here is a rebase on master, right?

#905 Comment 6:
Yes , it should be OK.

--------------------------------------------------------------
#904 Comment 1:
Personally, I prefer if/elseif constructs over switch, since it is so easy to introduce a fall-through bug. However, in the case of the `Layout` class, the switch increases readability in my point of view. So this is fine, as are the remaining changes.

--------------------------------------------------------------
#903 Comment 1:
:+1: 

#903 Comment 2:
I think the method 

```
public String doLayout(BibEntry bibtex, BibDatabase database) {
        return doLayout(bibtex, database, null);
    }
```

in layout.java should be changed too. 

And then there is 

```
@Test
    public void testHighlightingInvalidParameter() {
        String content = "Test Word Content";

        TextArea ta = new TextArea("", content);

        //should not matter at all
        ta.highlightPattern(null);
    }
```

which also sets the highlightPattern to null...thus I would expect (i.e. add test for it) that an NPE is thrown.

Otherwise :+1: 

#903 Comment 3:
I think that is the method I changed. Is there another method (I searched, but rather quickly)?

Yes, the layout package could benefit from more testing...

#903 Comment 4:
No you are right...you exactly changed the method I mentioned. My bad :smile:.
What I meant in the second part is that setting the higlightPattern to null does not throw an exception (since the test pass) although I would have expected one. So probably a Objects.requireNonNull is missing somewhere.

#903 Comment 5:
But there is a corresponding method in LayoutEntry, which I think should be fixed as well.

Ah, OK! I'll have a look (or maybe the highlighter is never invoked in the test case?).

#903 Comment 6:
I fixed the other place as well, but happened to change to more use of switching... In the long term it would make sense to change the integers now used to an enumeration.

I also realized that all `\n` are stripped from the fields when doing a layout, so even though e.g. HTMLChars will convert the line breaks to something clever, they are not there anymore once the formatter is invoked... Not sure where they go missing though...

#903 Comment 7:
:+1: 

--------------------------------------------------------------
#902 Comment 1:
Thank you for your contribution @lrtfm 

We are always looking forward to help, and would be glad to see further pull requests from you in the future. :)

--------------------------------------------------------------
#901 Comment 1:
:+1: 

--------------------------------------------------------------
#900 Comment 1:
Looks good! Except that it won't work with nested aux-files...

Maybe it is time to move this to logic.auxparser and gui.auxdialog? (Or use the same naming in both packages.)

#900 Comment 2:
Looks good to me.
One remark: I don't like that the parse method is invoked in the constructor. Maybe it is worthwhile to adopt the structure of the BibParser. There the parser has essentially one public method `parse()` which returns a `ParseResult` containing all the information.

#900 Comment 3:
:+1: Anything to wait for or should we merge?

#900 Comment 4:
:+1: 

--------------------------------------------------------------
#899 Comment 1:
codacy complains about an unused import `Globals` in `IntegrityCheck.java`.

Apart from that: :+1: 

#899 Comment 2:
Hm, I took the code from `SynchronizeFileField` line 129 and forward. If this is the correct way, the code needs to be fixed there as well. 

#899 Comment 3:
The SynchronizeFileField works for some reason although the code is in the end the same... I have no idea why. 

I removed the unused import.

--------------------------------------------------------------
#897 Comment 1:
- When you use try-finally and then return the connection, the connection you return in these methods is always closed. So these changes are probably wrong. 
- Why do you add the Serializable interface? This does not make sense to me. Can you please explain your reasons?

#897 Comment 2:
Regarding Serializable, it is to get rid of the corresponding Coverity warning. Maybe better to remove the check?

I can confirm that using try-with on the Connection doesn't work. The code must be significantly refactored to get around this.

#897 Comment 3:
> Maybe better to remove the check?

:+1:

#897 Comment 4:
Ah shit, I didn't thought about that with the connection. 
Edit// The coverity check outlined resource leaks in the Exception case, that the connection does not get closed. That was the reason for the fix.

The serialiable thing is not necessary, but it is recommend in the Api Doc:
http://stackoverflow.com/questions/8642012/why-should-a-comparator-implement-serializable
And here:
http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html

>  Note: It is generally a good idea for comparators to also implement java.io.Serializable, as they may be used as ordering methods in serializable data structures (like TreeSet, TreeMap). In order for the data structure to serialize successfully, the comparator (if provided) must implement Serializable.

#897 Comment 5:
The serializable thing only makes sense if the comparator is implemented in a separate class, but not just part of a really big class with lots of other fields. In our case, we do not use serialization, hence, we can skip these issues. 

#897 Comment 6:
Okay. Then it should be marked as suppressed in coverity, this would then clear the overview.
https://ondemand.coverity.com/help/suppressing-issues  (filter by issue type fits best, I think)

For the connection thing I will try to come up with another solution that works.

#897 Comment 7:
Yes, we should suppress them. If you like, you can have a go at adding this yml file as part of this PR. 

#897 Comment 8:
Reworked as new PR.

--------------------------------------------------------------
#894 Comment 1:
I am against this PR as forEach is in my opinion not helping here. It makes debugging much more complicated (hard to debug and step through), the stacktrace is getting polluted and it does not save much space. 

To me, the forEach is the least useful of the streaming functions. ForEach is also technically something which does not exist in the purely functional world, as a forEach explicitly aims to create side effects. To me, I always want to work with streams without any side effects, I only want to create new elements in the stream based on existing elements (map), filter them or merge them together (reduce). 

#894 Comment 2:
I second Simon here.

#894 Comment 3:
Fair enough.

--------------------------------------------------------------
#893 Comment 1:
:+1: 

#893 Comment 2:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#887 Comment 1:
:+1: 

--------------------------------------------------------------
#886 Comment 1:
:+1: 

--------------------------------------------------------------
#884 Comment 1:
Merging this as the changed visibility of the constructors prohibits a proper build at the moment.

#884 Comment 2:
If you pass null to the database, then getResolvedField is invoked with a null database. Thus the crossref functionality is not supported in the rename pattern. I think this is not a big deal, but easy to fix (just pass the right db)

#884 Comment 3:
I think that at the moment null is always passed in the code.

(Which also means that it the two one- and two-argument constructors are
only used in tests they can be removed and nulls passed, which of course is
the current behaviour but seems to make more sense to provide alternative
constructors if they are used in actual code...).

--------------------------------------------------------------
--------------------------------------------------------------
#879 Comment 1:
Please remove the unused imports according to the codacy warnings. Otherwise I think it is fine.

--------------------------------------------------------------
#877 Comment 1:
I think it would look better if the check boxes were aligned vertically. 

#877 Comment 2:
![untitled](https://cloud.githubusercontent.com/assets/5037600/13378951/a13543c2-de17-11e5-88f1-b1097e913f4f.png)
You are right!

#877 Comment 3:
When I compare both UIs (before/after) this PR, we loose a lot of documentation and guidance for the user. Because how, the user has to think which formatters would be well suited for which fields to be helpful, making it harder to configure it correctly. We need to find a way to fight this. Why not add a section about suggestions which can be checked/unchecked and upon change change the table with the actions as well?

#877 Comment 4:
All the previous cleanup actions appear as the default value for the field formatters:

```
activeFormatterCleanups.add(new FieldFormatterCleanup("date", BibtexFieldFormatters.DATE));
activeFormatterCleanups.add(new FieldFormatterCleanup("month", new MonthFormatter()));
activeFormatterCleanups.add(new FieldFormatterCleanup("title", new CaseKeeper()));
activeFormatterCleanups.add(new FieldFormatterCleanup("title", new UnitFormatter()));
activeFormatterCleanups.add(new FieldFormatterCleanup("title", new LatexFormatter()));
activeFormatterCleanups.add(new FieldFormatterCleanup("title", new HTMLToLatexFormatter()));
```

So opening the cleanup dialog for the first time shows essentially the same information as previously (this is not apparent from the screenshots since I already removed some of the default values).

I could add a button which resets the field formatters to their default value (or if you prefer adds the default formatters). 

#877 Comment 5:
- Make paths of linked files relative if possible could also be a Formatter, and hence, added to the save actions.
- A button which resets to the defaults is a good idea.
- We really need to think how the formatters can be better explained to the user. Would it make sense if each formatter itself has a short localized description how it works, similar to the sentences used before which are shown in the table as well?

#877 Comment 6:
New update with:
- Reset button (in cleanup dialog as well as in database properties dialog)
- Add descriptions of the formatters as tooltips in the list and in the combo box (not ideal, but better then nothing).
  ![untitled](https://cloud.githubusercontent.com/assets/5037600/13585691/825ade24-e4bd-11e5-88a3-3033f6096e96.png)

Adding the "Make paths relative" cleanup as a save action should be covered with #878. I don't want to implement this cleanup as a formatter (formatters are just in-out converters without any side-effects).

#877 Comment 7:
- [x] keep name concept. Key is for serialization. Name is for display. Description is a long text.
- [ ] improve keys and names of formatters - separate issue #920 with a table: key and name
  - e.g., `unit` as key
  - e.g., Name: DateFormatter -> NormalizeDateToYYYYMMDD
- [x] Add description text as box below the line of "Enter field name" updated upon change of dropdown
  - e.g., "Normalizes dates ..."

#877 Comment 8:
Added now a description text box. From my side this PR can be merged in. The only missing thing is the naming of the formatters, but I would prefer if this would be a separate PR (not sure how much time I have the next days and since this is a blocker for 3.3....)
![untitled](https://cloud.githubusercontent.com/assets/5037600/13647844/3c4b6e56-e636-11e5-8a35-ff118ba1ab3e.png)

#877 Comment 9:
Last point: what happens when the description is longer than this line? Does it wrap automatically? Does it allow to use newlines for formatting?

#877 Comment 10:
Since this is just an JLabel, all the nice limitations and/or features come along. So no, there are no automatic line breaks except if you put everything around <html> tags and you also need to use `<br>` for a new line. 

#877 Comment 11:
Hm, this limits the description we can display there. Nevertheless, I think it is best to merge it for now and then do the improvements in another PR. Just rebase and get this in.

#877 Comment 12:
I really like it and only have minor issues, which I also can file as separate issue if it is too much effort to resolve now.

Is it possible to display a description with "the given field" in place of the field name if no field is given? Reason: I find the empty description irritating and thought that the content of the white box was the description.

Above at "Save sort order", one can select a field. I would have expected the same choice for the selection of the fields to apply the save action. Reason: I am too lazy to input the field name manually.

I experience layout issues at the end - The dialog height should be the size of all content including the white box, shouldn't it?

![grabbed_20160313-212741](https://cloud.githubusercontent.com/assets/1366654/13731147/ab897bee-e962-11e5-84ff-a9546b62021e.png)

#877 Comment 13:
I added your suggestion about adding "the given field". Could you please open an issue for the other things? Thanks!
I'll now merge this in. 

--------------------------------------------------------------
--------------------------------------------------------------
#875 Comment 1:
Looks good!

I guess one can argue where the method should reside, but since there are arguments for both locations I do not have a strong opinion.

No serious Codacy issues, but one the other hand quite easy to fix.

#875 Comment 2:
@oscargus Thanks for the feedback. I'm also not sure where to put these parsing (and serialization) code. But since right now everything seems to lie in BibParser, I put it there. 
I now fixed the codacy errors.

#875 Comment 3:
Would it be possible to create a converter class which can transform String <-> CustomEntryType in both directions?

#875 Comment 4:
This should be possible yes... I created #888 to discuss where to put the parsing and serialization logic.

#875 Comment 5:
Based on the discussion during the dev call this morning, I moved the code back to the CustomEntryTypesManager. So this PR now just contains the bug fix and nothing more.

#875 Comment 6:
Looks good to me. 

--------------------------------------------------------------
#874 Comment 1:
Regarding DefaultFormBuilder: there is an alternative JGoodies approach. However, it has been decided to leave it as is as a Javax conversion is planned (any year now...).

I haven't looked at the code carefully, but what happens with {} around e.g. capitals?

#874 Comment 2:
Ah thanks for your hint. Yeah, it seems like it needs more checking for special cases. I will try to come up with a solution to this. 
I noticed that the authors name Arp{\'\i}rez, then appears as Arp{i}rez et al. [2003] 

#874 Comment 3:
I tried some variants, e.g. adding the curly braces "manually" before and end.

` if (StringUtil.isInCurlyBrackets(field)) { //braces at the start and the end of the string

```
        sb.insert(0, "{");
        sb.append("}");
        System.out.println("In Curly Braces SB " + sb);
    }
    return sb.toString().replace("&dollar;", "$"); // Replace &dollar; with $`
```

this works well for Authors. However ,the problem is that I have no control over the field type. This creates then a problem when you have an entry with curly braces around the Title Field. Those curly Braces would then be printed in the generated Bibliography...
Any ideas appreciated.

#874 Comment 4:
I haven't tried it, but I think that OOBibBase.getCitationMarkerField is the place to try. Basically:
1. Check if there are surrounding braces.
2. Format (using the old formatter that removes all braces).
3. If there were surrounding  braces, add them back before returning the formatted string.

A potential problem is author lists which starts and ends with braces, but are not enclosed, say `{\AA}sa Stor{\aa}`, but there are methods for checking that in #863 (IntegrityCheck.BracketChecker), so as long as the basic mechanism is working one can always improve step 1 later.

#874 Comment 5:
Thanks for your tip. I think I found a working solution. 
In fact I copied the method and added a Check for curly braces (code is based on the integrity checker), like you proposed.
The copied method is 
Manual tests look promising. I will add some unit tests. 

#874 Comment 6:
Found a solution by enhancing the StringUtil method and by adding a check for Curly brackets in
`getAuthorCitationMarkerField`

The only thing which bothers me, is that it is kind of "double code". I thought about this, but did not come up with a nice solution. Maybe one of you has an idea.

#874 Comment 7:
I think you can simply check if field is "author" or "editor" in the old method. Not 100% correct but there are other methods using similar logic.

(I guess ideally each field of the predefined entry types should have properties, e.g. if it is a name field.)

#874 Comment 8:
Apart from that I think the PR looks good to go!

(I believe that one probably can add a bit of code to handle escaped curly brackets for the rare cases that someone needs to put a single `\{` in a field... But hardly anything important.)

--------------------------------------------------------------
#873 Comment 1:
:+1: LGTM

--------------------------------------------------------------
#870 Comment 1:
Besides the micro-comments: LGTM :+1:

#870 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#869 Comment 1:
Good idea to clean this up. What you still need to do to make this cleanup complete:
- [x] change the python script which is called via the localization.gradle so that it not only adds the keys but also deletes unused keys, kind of a sync functionality; maybe we can rename the long method to something short which says `syncPropertyFiles`
- [x] add assertions to your two test methods which make the build fail if there are unused keys in any properties file
- [x] take into account that we not only have english but also other languages

#869 Comment 2:
Assertions are added. Not sure if my Python skills are good enough to sort out the removal. I assume that one will need to rewrite the complete translation file when removing the entries. Regarding other languages it could work as when adding: English is manual, python-script to remove from other languages.

#869 Comment 3:
Nice. To help you in your python skills, I have implemented the script - you can use this code:

```
$ git diff
diff --git a/scripts/syncLang.py b/scripts/syncLang.py
index 40fb077..02ce513 100644
--- a/scripts/syncLang.py
+++ b/scripts/syncLang.py
@@ -60,6 +60,19 @@ def append_keys_to_file(filename, keys):
     f.close()


+def remove_keys_from_file(filename, keys):
+    lines = open(filename).readlines()
+    lines_to_write = []
+    for line in lines:
+        add = True
+        for key in keys:
+            if(line.startswith(key+"=")):
+                add = False
+        if add:
+            lines_to_write.append(line)
+    open(filename, 'w').writelines(lines_to_write)
+
+
 def compare_property_files_to_main_property_file(main_properties_file, other_properties_files, append_missing_keys_to_other_properties_files):
     keys_in_properties_file = get_keys_from_lines(read_all_lines(main_properties_file))

@@ -86,6 +99,9 @@ def compare_property_files_to_main_property_file(main_properties_file, other_pro
             print "----> Possible obsolete keys (not in English language file):"
             for key in keys_obsolete:
                 print key
+
+            if append_missing_keys_to_other_properties_files:
+                remove_keys_from_file(other_properties_file, keys_obsolete)
             print ""

```

Have a look at the allFilesMustHaveSameKeys test as well, as it can be extended to ensure that all language files have only the keys in the english file and only those. 

#869 Comment 4:
@oscargus do you need any help with this PR?

#869 Comment 5:
I think it should be OK. I had missed that you provided the missing Python
functions though. Thanks!

#869 Comment 6:
I can't find the problem in the Russian translation file... The Python script doesn't find the problematic line, but apparently the Java parser finds it...

#869 Comment 7:
in `http://www.bouncycastle.org/` the `:` is not escaped.

#869 Comment 8:
in `File_rename_failed_for_%0_entries.=\`there is an escaped space. Maybe that is the issue?

#869 Comment 9:
bouncycastle is not in the file anymore and the space I've tried. However, it seems like #, :, and ! (and =) should be escaped, so I'll try those (just found some information...).

#869 Comment 10:
I am not sure if # has to be escaped. I think, we only escape colon, equals and backslashes. 

#869 Comment 11:
Tests are OK on my machine locally. Very strange.

#869 Comment 12:
According to Wikipedia: 

```
# You are reading the ".properties" entry.
! The exclamation mark can also mark text as comments.
# The key and element characters #, !, =, and : are written with
# a preceding backslash to ensure that they are properly loaded.
```

Doesn't work on my local machine, but now I have at least escaped all characters. Some translations were not correctly escaped (including the Russian). Still no success though...

#869 Comment 13:
If one removes the ! in the three first comments, the extra string doesn't contain a !. Removing all comments also removes the #. But really out of ideas at the moment...

#869 Comment 14:
I have read up a bit more. As I understand it:
- = and : should be escaped if they are in the key
- # and ! should be escaped if they are the first character in the key

Still, these characters can always be escaped.

(Doesn't help though...)

#869 Comment 15:
hm, you could try to debug the test and see why it fails. Or create a small main class which does this only for the russian language. As it works on my machine, I am unable to help here. :-(

#869 Comment 16:
I've tried this (by print-out-debugging), but since the whole file is loaded through `properties.load(is);` I cannot even figure out when the extra entry is inserted (and the Map/keySet is not in any order I can figure out).

But I just made some progress! Using a Reader and setting the encoding to "UTF-8" lead to that the obsolete key is `#!`...

#869 Comment 17:
"The encoding of a .properties file is ISO-8859-1, also known as Latin-1."... Bad idea to encode it in UTF-8 then...

#869 Comment 18:
Bah! Almost three hours because someone saved a file in an invalid encoding... Anyway, now I think that it is working and that the translations are slightly easier to maintain.

#869 Comment 19:
Does  [ISO-8859-1](https://de.wikipedia.org/wiki/ISO_8859-1) really cover Russian characters?

#869 Comment 20:
Somehow, yes. By using Unicode escaping it is claimed that it works anyway.
What that means in practice I'm not really sure about.

I also notes that the Japanese translation used UTF-8 without any problems,
so I cannot say that I fully understand it...

#869 Comment 21:
My Notepad++ says that all those files are saved in UTF8 (regardless what the comment says) - but russian was the only one not saved with "UTF8 without BOM".

#869 Comment 22:
OK! I changed the encoding properties in Eclipse and then it worked, but
clearly the diff was quite small... Maybe my edit in the Wiki was a bit
quick...

#869 Comment 23:
Ok, then can this be merged?

Btw. we use a custom written class which enables loading properties files encoded in UTF8 instead of the default ISO.... 

#869 Comment 24:
OK! I just checked the test class and there it seemed to use the standard
reader.

Since the tests pass I strongly believe that it can be merged now.

One should probably try to use the Russian translation on various platforms
to fully confirm that no problems occurred as quickly as possible.
(However, based on the minimal diff for the final commit I cannot really
see what could have happened.)

#869 Comment 25:
Hm, then the test class should use the UTF-8 reader as well. 

#869 Comment 26:
The difference is (if I understand the code correctly), in the tests the files is loaded with `properties.load(is)`, i.e. a `Properties`-method to obtain a `Map` while in the actual translation a `ResourceBundle` is used.

I changed the properties.load now to use a Reader with UTF-8 and as far as I can read up this is what ResourceBundle eventually use: http://stackoverflow.com/questions/4659929/how-to-use-utf-8-in-resource-properties-with-resourcebundle

However, when working on #994 Eclipse all of a sudden decided to use Unicode escaping...

#869 Comment 27:
I added escaping for # and ! as well (a bit annoying is we happens to use the translation string `"#mon# undefined"` and it ends up to be a comment...).

I can also confirm that with the current format of the ru-files it works fine on my Windows 7 laptop.

#869 Comment 28:
I suppose it has sth do to with the Python script not reading the files in UTF8:
http://stackoverflow.com/questions/10971033/backporting-python-3-openencoding-utf-8-to-python-2
And I strongly would advise to let the properties files in UTF8, makes work for the tranlators easiert.

#869 Comment 29:
No, nothing to do with Python. I think @matthiasgeiger s comment about "UTF8 without BOM" is the key thing here. (And no, the comment has nothing to do with it, not sure why it is there...)

I quite sure that the Russian files are indeed saved as UTF-8 now as well (based on the small final diff). #994 is a bit more doubtful though... Either way, good editors will handle it transparently, but we should probably wait before merging #994.  

#869 Comment 30:
I've found a good way to actually store the files in UTF-8, even those that are now mixed (like the French translation). See the latest commit. Should I go ahead and convert all files?

#869 Comment 31:
Maybe @JabRef/translators should state their opinion here. Since [popeye](https://github.com/JabRef/popeye) works perfectly, I would see no reason for keeping outdated encodings.

#869 Comment 32:
For me, files can be converted.

#869 Comment 33:
+1

#869 Comment 34:
Please also add a gradle task to call the new functionality

#869 Comment 35:
It is already done. The (easiest) solution was to do both adding new and
remove obsolete in the same command. I also tried to make the test print
similar instructions, but it seems like that doesn't work...

#869 Comment 36:
@oscargus  Hm the test instructions are coming from the `convertPropertiesFile` in `LocalizationConsistencyTest`
There the Sentence with "Execute...." is printed

#869 Comment 37:
Maybe I didn't finish it...

#869 Comment 38:
FYI the problem was that the `fail(...)` terminates the test before the information could be printed.

Just merged this in...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#865 Comment 1:
I am suprised that so much code is unused. But I do like it that we can throw so much unused code away! :)

:+1: 

#865 Comment 2:
I suspect that in all that code JabRef was providing the multiple root directory access functionality discussed in https://github.com/JabRef/jabref/issues/496 :-)

#865 Comment 3:
Could be like that, yes. Doesn't it work for you anymore?

#865 Comment 4:
Sorry, so near end of my PhD I don't dare update, for fear of loosing access to thousands of references. My understanding is that the functionality I am using was 'never there' (none on the team understood what I was on about, and hence the lengthy  [#496](https://github.com/JabRef/jabref/issues/496)). I  thought you may have seen something that may have been enabling it, and was forewarning.

#865 Comment 5:
@oscargus Over Easter I updated to ver3.2 to try fix a Search issue. My install still finds the files I have residing in the old legacy pdf file structure that is not in the same tree as the JabRef files! No symbolic or hardlinks present, so I believe in magic! :-)  It must be coded elsewhere. happy Easter.

#865 Comment 6:
@ajbelle this PR is not in 3.2 so maybe a bit too early to be fully relieved. ;-) However, I know of some code which currently supports different directories for different file types and I won't remove that. Not sure if that code is enough, but it might in fact be.

#865 Comment 7:
This code was primarily related to the UI side, so any buttons magically showing up next to the PDF-field etc.

--------------------------------------------------------------
#864 Comment 1:
Looks good to me! Just rebase on master and this can be merged.

#864 Comment 2:
Looks good! Some minor comments, which probably can be ignored/fixed later.

--------------------------------------------------------------
#863 Comment 1:
Maybe it should be possible to configure which integrity checks one would like to use? (Not in this PR, but as a general idea.)

What happens if there's a string? Is it resolved?

#863 Comment 2:
We could add an option to the Integrity Check UI which ones to display or which type of check to ignore. I would always do every check as they do not take very long. 

#863 Comment 3:
@tobiasdiez thank you for all your comments here. I think I got a much better design now - which I think is better than the one before. What do you think?

#863 Comment 4:
Looks really good! Two very small comments:
- The Checker interface can now be made private, right?
- I don't like the naming assertWrong / Correct. How about assertHasErrors? But this is a little bit longer...

Can be merged in from my point of view.

#863 Comment 5:
Hm, good points. But I currently have no better naming in mind. I want to keep the word _assert_ and keep it short. What about assertValid vs. assertInvalid?

Nevertheless will I merge this as this is an interesting improvement of the integrity check functionality. 

--------------------------------------------------------------
#858 Comment 1:
When is this updated? Will this update on the fly if I change the config?

#858 Comment 2:
Don't think so as the FieldEditor is somehow cached i think.

#858 Comment 3:
What is the state here? What is missing to get this merged?

#858 Comment 4:
@stefan-kolb is working on it. I removed the label to make it clear that is currently under work. 

#858 Comment 5:
Think its ok to merge.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#854 Comment 1:
You are getting fond of these code analysis programs, right? :smiley: 
:+1: for  merge.

#854 Comment 2:
Yeah, they are great! No need to think! :-) (Well, sometimes...)

--------------------------------------------------------------
#853 Comment 1:
:+1:

Now I only want a formatter that removes ' around fields. A colleague does that as that also keeps the casing... However, I guess it may be a rare use case for the general public...

#853 Comment 2:
:+1: nice. I especially like the data driven test of all formatters! Good idea.

#853 Comment 3:
LGTM :+1: 

--------------------------------------------------------------
#852 Comment 1:
Hm, why should we store two cleanup preference sets? I would propose to simplify it to use the same cleanup preferences for the quick cleanup and the full cleanup. 

#852 Comment 2:
Actually, two separate cleanup sets was the main selling point for me. I often change between a "full" cleanup (This makes however sometimes some wrong changes which I have to revert using version control) and a smaller cleanup which I run after every import. In the long term I suspect we will have quite a bunch of cleanup presets for import, save, normal cleanup, export, ...

#852 Comment 3:
So what happens with this PR? Should I rebase?

#852 Comment 4:
- Add option under Quality
- Change to apply save actions

#852 Comment 5:
@tobiasdiez could you implement this maybe targetting 3.3? Could be a low hanging fruit, and reducing the large amount of open PRs. :)

#852 Comment 6:
No, not for 3.3.
I think it is better to wait with this PR until the SaveActions are completely converted to cleanup operations (right now they are only a subset). 

#852 Comment 7:
I think, it can be merged, even though not all SaveActions are converted to cleanup operations. Is there an issue for it?

#852 Comment 8:
We decided in a devcall (or private call with @simonharrer?) that an additional quick cleanup causes confusion. Thus the idea was to have a button in the entry editor which directly applies the save actions.

#852 Comment 9:
Closing this issue due to inactivity :zzz: 
Please reopen the issue with additional information if the problem persists.

--------------------------------------------------------------
#851 Comment 1:
Long term fix would be to not indent at all, and just write `key = value`. 

#851 Comment 2:
The indent has been agreed upon during the discussion at #116 and it seems to be liked by users [as there was a question regarding it on tex.stackexchange](http://tex.stackexchange.com/q/294906/9075).

No indent would us bring closer to original bibtex format, but away from the biblatex format.

Example from page 32 of biblatex's manual:

![grabbed_20160228-152131](https://cloud.githubusercontent.com/assets/1366654/13379758/f559ea04-de2e-11e5-8a82-5ca7ccec4a57.png)

(:+1: for devall)

#851 Comment 3:
Decision: Do not merge. Do the long term fix described at https://github.com/JabRef/jabref/issues/574#issuecomment-193718235.

#851 Comment 4:
Refs #1043

--------------------------------------------------------------
--------------------------------------------------------------
#848 Comment 1:
As an added bonus, the special field buttons are enabled and disabled depending on if any database is open.

--------------------------------------------------------------
#847 Comment 1:
If you push to upstream there will be an automatic build which will be easier to try out.

#847 Comment 2:
Good idea! The build is now available under http://builds.jabref.org/groupAuto/

#847 Comment 3:
I think we should put all the groups classes in the logic part now under test. 

#847 Comment 4:
Yes of course there should be tests.... but I think this will be something for a next PR.

#847 Comment 5:
:) I wanted to stop the mentality to postpone tests as the consequences are that if we want to release, we release untested code or have to keep track of the pull requests to come for the tests. Maybe this is something for the devcall. 

#847 Comment 6:
The new TreeNode class should now have a test coverage of 100%. Of course there are still many untested lines of code in the groups package...but one could not hope to change the whole JabRef world in one PR :smile: 

Anyway this PR now ready for review

#847 Comment 7:
Very nice. Looks good to me. If you have time, have a look at the logic.group classes and try to make everything final, especially the *Change classes. Also have a look at the codacy warnings, as some of them make sense. 

#847 Comment 8:
Ok, I will do the code cleanup later. Should I merge this PR then in or wait until 3.3 is released?

#847 Comment 9:
I think we should wait for 3.3 to be released, which will happen soon I think. 

#847 Comment 10:
Does this also fix the issue with moving groups in #839 ?

#847 Comment 11:
No, I think the bug is still not fixed with this PR. Feel free to write a fix!

#847 Comment 12:
This can be merged now. 

#847 Comment 13:
Done. 

#847 Comment 14:
:+1: 

--------------------------------------------------------------
#844 Comment 1:
Try doing the following:

git checkout master
git fetch upstream
git merge upstream/master
git push
git checkout mysqlFix
git rebase master
(in case of any conflict resolve them, git add ., git rebase --continue)
git push --force origin mysqlFix

#844 Comment 2:
Thanks for the git commands! it seems working now.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#841 Comment 1:
I fixed the equation issue and added support for some more LaTeX text styles. For example, \textsuperscript and \textsubscript are supported for both HTML and OO.

This also means that the preview looks quite a bit better now.

#841 Comment 2:
Please fix the failing tests. Then this can be merged in as well. 

#841 Comment 3:
Converters could be added to the Save Actions under the Formatter Interface as well. 

#841 Comment 4:
Yeah, I just noted that they failed. :-)

That's what you get trying to distinguish  italic and emphasise...

I'll correct it later and merge. Thanks!

#841 Comment 5:
Indeed. I'll also extract the Unicode formatter from HTMLConverter now that
they are not tightly connected anymore.

#841 Comment 6:
Ok, please add the label ready-for-review again when you are done with the other changes. 

#841 Comment 7:
It turned out that it also made sense to move the layout formatters from export.layout to logic.layout, so the final(?) commit is handling that. Some minor refactoring had to be done, but nothing controversial.

#841 Comment 8:
I'm giving up on this PR for now... Doesn't really make sense to add a JournalAbbreviationRepository argument to PdfImporter or MoveFileAction, although that is required if it is propagated (and now I've only gone two steps back...). Will be back after a week or so of holidays (true story, nothing to do with this)...

Accessing a global variable is a single formatter or passing an argument to hundreds of non-related classes to possibly be used in a single formatter? I'm not convinced it is worth it...

#841 Comment 9:
The idea is that the GUI part can have globals, whereas the logic does not. With this in mind, the PdfImporter or MoveFileAction do not need to have this class, but can merely pass in the global variable if necessary. Does this make sense?

#841 Comment 10:
It makes sense from the perspective that I understand where to start/stop. :-)

#841 Comment 11:
:+1: LGTM (but can you remove the unused imports, please?)

#841 Comment 12:
All(?) imports are now removed and I managed to sort out the PdfCleanup thing as well.

Feel free to merge. :-)

#841 Comment 13:
Sorry for being such a pain in the ass with this abbreviation thing...but one last remark: did you tried out the Pdf rename cleanup as a user? I think the dialog always passes a null repository to the cleanup worker which in the end would result in a NPE. Not sure through...

--------------------------------------------------------------
#837 Comment 1:
:+1: 
Looks good to me. I made some very small remarks to improve readability of the tests. The naming could be improved at some points to also include the expected behavior (i.e. naming along methodUnderTest_TestCase_ExpectedBehavior...for example removeWhitespaceFromNullThrowsException) 

#837 Comment 2:
Thanks for the input! I've renamed some of the tests. While I agree with you that accurate naming is good, here there would be lots of "FormatTextExpectFormatted"... I've changed the name where it might not be "obvious" what the expected result would be (for some definition of obvious...).

#837 Comment 3:
I know the naming can be a hassle. Normally, one wants descriptive test names so that the name of a failing test directly tells you what went wrong (without looking at the source code of the test). I think this is now the case with (most) tests you added.

--------------------------------------------------------------
#836 Comment 1:
Something about how to formulate feature requests?

#836 Comment 2:
I think, the current feature requests are formulated quite well. I don't want to let users search for hours. OK, I add a pointer to https://github.com/JabRef/jabref/wiki/FeatureRequests-Sorted, https://github.com/JabRef/jabref/labels/feature, and https://github.com/JabRef/jabref/labels/enhancement.

#836 Comment 3:
On the one hand, I am unsure whether such a strong text keeps users from submitting improvement requests. On the other hand, we have so many open issues so that a reduction of new issues is really helpful.

#836 Comment 4:
Decision in dev call: keep templates small.

--------------------------------------------------------------
#835 Comment 1:
They could be imported from IntelliJ IDEA, but I think nobody does this. Hence, they can be removed. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#831 Comment 1:
:+1: 

#831 Comment 2:
:+1: 

--------------------------------------------------------------
#830 Comment 1:
Should be documented in the documentation that we have an additional LayoutFormatter available. 

#830 Comment 2:
Yeah, that will be a separate PR (or can one do a joint PR to two different repositories?). Added a ChangeLog entry though.

#830 Comment 3:
:+1: I would link the other PR for the documentation. 

#830 Comment 4:
(English) Documentation at JabRef/help.jabref.org#5

--------------------------------------------------------------
#828 Comment 1:
@koppor do you know how to host files and redirection on www.jabref.org?

#828 Comment 2:
File hosting: Even though it is possible to add files by adding them to https://github.com/JabRef/www.jabref.org (gh-pages branch), I would propose to create a new URL `test.jabref.org`, where we host such files. We should not mix pages.

Redirections: They are possible at GitHub using HTML redirects: https://help.github.com/articles/redirects-on-github-pages/. However, these are not the redirects, we are aiming for. I can setup `test.jabref.org` on my private server and create some redirects.

#828 Comment 3:
Ok, we can mock the HTTP request via WireMock. Should be way better than having an external dependency to our homepage.

--------------------------------------------------------------
--------------------------------------------------------------
#826 Comment 1:
Can you add a CHANGELOG entry?

Would it be possible if you can push this directly as a branch of the JabRef repository? Because then, CircleCI automatically builds new binaries online which are made available for download. For this, I added you as a collaborator for this repository. 

#826 Comment 2:
Is fine on windows. Thank you. :)

--------------------------------------------------------------
#821 Comment 1:
Very nice!
A few remarks or suggestions:
1. For the GUI: Maybe add a line break after the checkbox, so that the controls for adding a new save actions are below the checkbox (and maybe add some indention). Write "field" in the textbox and delete it upon focus (similar to how the search box works). Decrease width of delete button. Besides that It is already prettier then the usual JabRef UI :smile: 
2. I think the `SaveAction` and `CleanupFormatter` classes can be merged with `FieldFormatterCleanup` (all of them essentially just store a field and a formatter). Is `CleanupFormatter` even used? Moreover, the `SaveActions.applyActionForField` method is covered by `FieldFormatterCleanup.cleanup`. Replacing `SaveAction` by `FieldFormatterCleanup` has also the advantage that the `SaveActionsPanel` can be used to add arbitrary formatters as cleanup operations in the cleanup dialog.

#821 Comment 2:
@tobiasdiez Thanks! `FieldFormatterCleanup` and `SaveAction` indeed seem very replaceable. I'll try to merge the two. This means I have to add implementations of `equals`, `hashCode`, and `toString` to `FieldFormatterCleanup`.

I'll also try to add your remaining suggestions regarding layout and `Objects.requireNonNull`.

#821 Comment 3:
Ok, here's the new UI:
![save actions2](https://cloud.githubusercontent.com/assets/1515701/13058425/75526b3e-d423-11e5-9463-b3277cf4c163.png)
The formatting changes also killed the prior resizing bug :) Any other suggestions?

As a side note: I seems that not all formatters that have been implemented have been added to the respective management classes. For instance, `net.sf.jabref.logic.formatter.bibtexfields.LatexFormatter` is not available in `BibtexFieldFormatters`. Is there a reason for that? If not, I would simply add the missing formatters, which would make them available as a save action.

#821 Comment 4:
Looks good to me! :+1: 

Just a quick note from the User perspective: This should really be explained somewhere... we need a help page and a documenation for each formatter, as they may not be as selfexplanatory as needed (e.g., the mentioned "LatexFormatter")

#821 Comment 5:
Looks good to me too! 
Maybe the display names of the formatter can be improved, but this is just a minor point.
:+1: to merge this in.

#821 Comment 6:
Currently, I am displaying the formatter keys, not the display names. I'll have a look at that :)

#821 Comment 7:
I had a look at the formatter display names and, to be honest, they are quite bad ("bad" as in "non-informative"). The keys are much better. For instance "TitleCaseChanger" is better than "Title". Therefore, I will keep using keys for the display.

Anyways, @matthiasgeiger is of course right. There is little use for this feature if it is not documented somewhere in the help files. I would suggest to do that in a separate PR, however. As far as I understand it needs to be done in another repo as well?

When we have concluded the discussion on the meta-data format for save actions, this PR can be merged from my point of view.

#821 Comment 8:
The formatters are explained at http://help.jabref.org/en/CustomExports/. Section "Built-in export formatters". Unfortunately, we do not offer anchors to headings (see https://github.com/JabRef/www.jabref.org/issues/24).

#821 Comment 9:
Ok, I changed the serialization format of save actions according to the description by @tobiasdiez The new format looks like this:

```
@Comment{jabref-meta: saveActions:enabled;pages[PageNumbersFormatter,DateFormatter,]title[LowerCaseChanger,];}
```

Formatters are grouped for the fields within `[...]` and separated by commas.

The parsing logic is now considerably more complex, but for the sake of serialization beauty... :) 

Any other comments on the format? 

I have written a few more unit tests and done some manual bug testing, but it would probably be good if someone else did some manual testing, too.

#821 Comment 10:
Is it possible to omit the last `,`?

#821 Comment 11:
Nice PR! Here my few comments:
- Why do we need the enabled flag stored in the file? For me, it is enabled if there are save actions, and disabled when there are no save actions. 
- Serialization format: we could put each field on a separate line, similarly to the groups serialization. 
- Should we provide some recommendation which save actions are sensible? Maybe something like a button that activates the recommended save actions automatically?
- Should we translate/i10n the names of the formatters?

#821 Comment 12:
Ok, I have again integrated most of the remarks by @koppor, @oscargus, and @simonharrer .

@koppor: Now, it is mandatory to omit the last `,`

Regarding the comments by @simonharrer 
- I introduced the enable flag to mimic Eclipse save actions. Say, you want to quickly turn off save actions to do some weird testing stuff in your bib file. Without the enable flag, you have to delete your save actions. For reenabling them, you have to build all actions from scratch. The enable flag is a very easy way to take care of this.
-  The save actions are now serialized in separate lines per field
- A recommended set of actions sounds reasonable (we could hardcode a default set in case there is nothing configured in the file). But what kind of actions should that be? Personal preferences on that surely vary a lot, so I am quite unsure on what to recommend. Maybe we should give this some time and see which actions we use personally?
- Formatter naming is still a mess, so I would avoid adding unnecessary translations at the moment. When we build help pages, we can come up with better formatter names and, then, introduce a translation.

Once again, the PR is ready for review and/or merge from my point of view.

#821 Comment 13:
if you have only one save action, the serialization looks a little bit awkward:

```
@Comment{jabref-meta: saveActions:enabled;booktitle[SuperscriptFormatter]
;}
```

What about something like which would be more git-friendly

```
@Comment{jabref-meta: saveActions:enabled;
booktitle[SuperscriptFormatter]
;}
```

---

Another idea for the enable-flag: you could disable all controls when the flag is disabled, so that they can only be edited if they are enabled, similar to the Eclipse settings. Would this make sense?

---

For me, they do not work. Nothing is changed upon save. I use the following configuration:

```
@Comment{jabref-meta: saveActions:enabled;pages[PageNumbersFormatter]
booktitle[SuperscriptFormatter]
;}

@InProceedings{Pautasso2015TowardsWorkflowBenchmarking,
  author =    {Pautasso, Cesare and Ferme, Vincenzo and Roller, Dieter and Leymann, Frank and Skouradaki, Marigianna},
  title =     {{Towards Workflow Benchmarking: Open Research Challenges}},
  booktitle = {Proceedings of the 16th Conference on Database Systems for Business, Technology, and Web},
  year =      {2015},
  pages =     {1-20},
  address =   {Hamburg, Germany},
  month =     {March 2-6},
  file =      {:Pautasso2015TowardsWorkflowBenchmarking.pdf:PDF},
  keywords =  {benchflow}
}
```

and the save actions should change some things in there.

#821 Comment 14:
The comments by @simonharrer and @tobiasdiez are implemented. 

Now, there are newlines in the serialization as desired and the GUI components are disabled if the checkbox is unchecked.

Furthermore, an embarrasing bug discoverd by @simonharrer has been fixed and thanks to @tobiasdiez the tests look way better. 

Once again, this PR is open for review.

#821 Comment 15:
Idea: would a TrimFormatter make sense? One that trims the value of the field? Or is this done by the serialization algorithm?

Defaults:

```
@Comment{jabref-meta: saveActions:enabled;
pages[PageNumbersFormatter]
month[MonthFormatter]
booktitle[SuperscriptFormatter]
;}
```

 I wanted to add `author[AuthorsFormatter]` as well but it has problems with author names having latex symbols in it, hence, I cannot recommend this. 

#821 Comment 16:
I searched hard but I have nothing more to complain about :cry: 
So :+1: for merging it in.

@simonharrer Yes a trim formatter would be sensible (and it is somewhere on my idea-todo-list). 
I kind of remember that months should be just a number in BibLatex so I wouldn't recommend the MonthFormatter (in BibLatex mode). 

#821 Comment 17:
It is pretty annoying if you add a save action, then see what it did (as there is no documentation, and even with documentation, you probably want to try it out) and you cannot make it reverse, only using version control. Before this is released, we need an undo functionality, I think. 

Instead of a documentation, we could simply define a few "test strings" per formatter which can be returned with an additional getter in the `Formatter` interface, and present them as well as their result on calling the formatter in the UI to display what a formatter is doing. 

Maybe using the `JSearchTextField` would be a little bit nicer for the UI, as it automatically shows text and when the focus is removed and the field is empty, this text is shown again. You could use something like `enter field, e.g., title or author`. We could rename `JSearchTextField` to something without search in its name and move it to a ui util package. 

With save actions, we need to ensure that if we call them twice (save again), they add more stuff. This should be tested somehow, as otherwise, users will complain. Maybe use the same example strings used as a documentation replacement?

Duplicate entries can occur in the UI, e.g., I can add pages[PagesNumberFormatter] multiple times. Upon close, this is cleaned up. Could be left as it is, I think. Just a remark from my side. 

Icons (+, -) could be used instead of the text on the buttons. 

#821 Comment 18:
I'd like to sum up what needs to be done to get this PR merged:
- _Undo functionality_: In principle, this is supported. The `SaveActions` use `FieldFormatterCleanup` and I can easily return a `List<FieldChange>` upon applying save actions, like for the cleanup functionality. Just how should an undo be integrated here? How can that be integrated with `BibDatabaseWriter`? As far as I know, JabRef currently cannot undo a save operation. How should that be achieved?
- _Better text field_: @simonharrer Can you refactor the `JSearchTextField` as you described, so I can use it for save actions?
- _Duplicate detection_: I can add a duplicate check when adding save actions.
- _Button icons_: This should be a trivial change in `SaveActionsPanel`. I'll look for something.

#821 Comment 19:
@lenhard see 702913bed084ce3684db337320bf3b801f3cca96 for the refactored text field

#821 Comment 20:
Again, the things I stated above are implemented and, hopefully, this can soon be merged.

Just a few remarks:
- Personally, I like the text "Add" and "Delete" better than the Icons that are displayed now, but whatever...
- Undoing save actions after save works via the menu Edit -> Undo. For some reason the key binding CTRL + Z does not trigger an action after save. I consider this a bug that should be fixed outside of this PR.

#821 Comment 21:
- Strange side effect: if I add save actions, the save sort order is added as well. I just enabled the save actions, and this was added:

```
+@Comment{jabref-meta: saveOrderConfig:original;;false;;false;;false;}
+
+@Comment{jabref-meta: saveActions:enabled;
+pages[PageNumbersFormatter]
+;}
+
```
- Removing all save actions and disabling it does not remove them from the file. 

```
+@Comment{jabref-meta: saveOrderConfig:original;;false;;false;;false;}
+
+@Comment{jabref-meta: saveActions:disabled;;}
+
```

Even when they are enabled but have no configuration, they are stored.

```
+@Comment{jabref-meta: saveOrderConfig:original;;false;;false;;false;}
+
+@Comment{jabref-meta: saveActions:enabled;
+;}
+
```

I propose to only store them if they are really used. Otherwise, nothing should be stored in the bib file. 

And the serialization format changes if save actions are enabled or disabled, as shown in the examples above.  

#821 Comment 22:
And it's implemented.

I guess this PR will never end, will it? ;-)

#821 Comment 23:
Mhhh... maybe it is better to apply the save actions not in the DatabaseWriter but in another place (savesession?). Because of separation of concerns and so... What do you think? 
(I would also remove the `undoable` prefix in the field changes name. The field changes are apriori just a list of changes and have no ability to be reverted. The revert functionality is added by the UndoableFieldChange class) 

#821 Comment 24:
Could you also please add the TrimFormatter and RemoveBracesFormatter from #853. Thanks!

#821 Comment 25:
Once more, the above comments are implemented and this PR is ready for review. Discussion points:
- I added the default actions as recommend by @simonharrer 
- @tobiasdiez Regarding the relocation of the application the save actions: I am not convinced why `SaveSession` would be a better place for applying the save actions. Right now `SaveSession` is more of a storage object for information regarding a save. If we integrate the application of save actions, `SaveSession` would need to know about `BibEntry`, which it currently doesn't. Moreover, the `BibDatabaseWriter` also resorts the entries, so why not apply the save actions there? It also requires the application of save actions before writing. All in all, I currently could not find a better place for applying save actions, but I am still open for suggestions.
- I took the liberty to implement a new feature: I you choose `all` as field name in the save actions, the selected formatter will be applied to all fields of all entries in the database. Say you want to always trim all fields, this sounded useful. However, the `TrimFormatter` in its current fashion does not work, since `BibEntry.getField` for some reason returns a trimmed version of the field content regardless of the content of the GUI. But that is a bug unrelated to this PR, which _won't_ be fixed in this PR. As another example, lower casing all fields works just fine.

(Note: I will take care about the codacy stuff in a final step after we aggree on merging the current feature set, but not now when things might still change)

#821 Comment 26:
I'm in favor of merging this in! (Especially since I want to use the feature :smiley: ).

@lenhard It was more a feeling that the application of save actions might have a better home somewhere else. But your are right, the DataBaseWriter is probably the right place for now.

#821 Comment 27:
About the icons: why not use the icons for adding and removing files in the Entry Editor -> General?

Otherwise this seems good to be merged. 

#821 Comment 28:
Nice job :+1: 

--------------------------------------------------------------
#817 Comment 1:
All requested test cases from https://github.com/JabRef/jabref/pull/505 have been successfully implemented.

#817 Comment 2:
Ready to merge?

#817 Comment 3:
:+1: LGTM

#817 Comment 4:
Prepare for merge (merge commits)?

#817 Comment 5:
LGTM, too.
Two last remarks:
- `RisImporterTest2.bib` is not used, right? Delete it.
- Rename `RisImporterTest2.ris` to `RisImporterCorrupted.ris` (since this what the file represents, isn't it?)

Finally squash all commit together then this can be merged in.

#817 Comment 6:
Done.

--------------------------------------------------------------
#814 Comment 1:
:+1: 

#814 Comment 2:
Thanks! I fixed those things now.

#814 Comment 3:
Can you please double check as there are a few occasions where you simply call get without verifying if the value is null. 

#814 Comment 4:
I have double-checked and expanded the potential cases. It was a bit confusing in `DroppedFileHandler` as the code clearly assumes that null is not returned, so it wasn't obvious what to do (nor how to access the critical part to test it). Found an unused method though...

#814 Comment 5:
Oh, in the tests, I didn't handle it since the tests would fail from a null return anyway, so might just as well fail in an NPE as in an incorrect assertion?

#814 Comment 6:
Hm, in the tests, you should create an assertion before, ensuring that it is present. 

#814 Comment 7:
OK! The tests are fixed now (and, yes, it makes much more sense now). However, they are all ignored...

--------------------------------------------------------------
--------------------------------------------------------------
#812 Comment 1:
:+1: 

--------------------------------------------------------------
#810 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#807 Comment 1:
Thanks for this PR!

Ideally, I guess, one would like to set parameters pairwise as `dbStrings.addParameter("allowMultiQueries", "true")` and then have `dbStrings.getParameters()` form the correct connection string (see e.g. https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/logic/net/URLDownload.java ). However, I assume that this may be the only parameter of interest to add...

#807 Comment 2:
@Siedlerchr could you rebase this on master? There is also a good chance that this fixes your failing tests.

#807 Comment 3:
@lenhard  Yes, I wil check it this evening.

#807 Comment 4:
I have recreated the PR on the current upstream master branch, so ignore this one here.
(I'm still figuring out that whole git mergin stuff)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#804 Comment 1:
:+1: 
Good to go, except some minor remarks.

#804 Comment 2:
Thanks! I've updated accordingly.

--------------------------------------------------------------
#799 Comment 1:
`TeX` is misleading as this lets me think about pdflatex and latex or pure tex. Maybe "Default bibliography mode" as we treat the bibliography?

#799 Comment 2:
:+1: 
Two minor remarks:
- I would write "BibTeX" and "BibLaTex" instead of everything upper case (what are our convention on this?)
- You can rename JabRefPreferences.BIBLATEX_MODE to something containing 'defaut' without forcing migration (i.e. leave the underlying string unchanged)

#799 Comment 3:
The spelling is discussed at https://github.com/koppor/jabref/issues/73. BibTeX is set, but Biblatex or BibLaTeX is not yet finally decided.

#799 Comment 4:
Looks good to me. 

--------------------------------------------------------------
--------------------------------------------------------------
#797 Comment 1:
I moved the `quote()` method from StringUtil to EntryUtil to make the model part independent again. Ideally one should also move (and use) unquote and maybe some more method.

#797 Comment 2:
Hm, I do not like it that the quote method is moved. I vote for moving everything back as before as it creates strange dependencies. A little bit of duplication is not a large issue, but I did like the FileField class before much better than the proposed version. 

#797 Comment 3:
Why not move all the string related helper methods (quote and encodeStringArray) to the StringUtil class?

#797 Comment 4:
Because it will create a dependency from model to util, which is not
allowed. I'll move things back and duplicate a bit of the code.

#797 Comment 5:
Mhhh... but wouldn't it be cleaner to move the code in question from model to logic if it relies on StringUtil?  (For example the parse method in FileField definitely classifies as logic). In my opinion, the whole EntryUtil class should be moved to logic (actually, there is not a single method in EntryUtil which deals with entries...) 

#797 Comment 6:
I agree with that, but then model won't be independent, which is also a
nice feature.

#797 Comment 7:
No, what I meant is the following:
Move all the code which directly or indirectly relies on StringUtil (quote, encodeArray, ...) from the models package to logic. Hence there will be no reference to StringUtil in the model. For example, also move the FielField.parse() method to some class in logic. In this way the model still is independent from logic, but logical code which was previously in model is now in logic.

#797 Comment 8:
Sorry, I meant logic, not util. StringUtil resides in logic.

I may still be missing something here though...

#797 Comment 9:
I do not want to introduce dependencies for the model (which currently has no dependencies on other code in JabRef) just because of one or two very simple methods. This, from my point of view, is simply not worth it, and therefore, I would take code duplication into account. 

#797 Comment 10:
Things are restored, so a generic quote method in StringUtil and a hard-coded in FileField.

--------------------------------------------------------------
--------------------------------------------------------------
#793 Comment 1:
Ahh, wasn't ready to be merge yet... I'll create and merge the final corrections (and open an issue as it turned out that the problem I tried to solve wasn't introduced here).

#793 Comment 2:
Hm, sorry, I was in a merge frenzy ... :(

#793 Comment 3:
No worries. Fixed now.

--------------------------------------------------------------
#790 Comment 1:
It looks like I forgot that, in the English version, the key and the translation should be identical.
Another way to solve the issue?

#790 Comment 2:
I would suggest to not use a translation here as INSPIRE and Archive.org cannot be translated. 

#790 Comment 3:
Good idea. Note: more database are listed in the Menu_en.properties

#790 Comment 4:
@mlep need any help?

#790 Comment 5:
Thank you for the reminder.
To solve this issue, the java code has to be modified. I do not think I have the knowledge for this...

#790 Comment 6:
Well, it is really not so complicated. Maybe you want to try? Otherwise create an issue where you mention all the translations which do contain names which cannot be translated, so someone else can implement this. 

In the Java files, you only need to replace `Localization.lang("Search JSTOR")` with `Localization.lang("Search %0", "JSTOR")` which requires a `Search_%0` in the property files. 

#790 Comment 7:
I have just looked at it, but could not find the proper Localization.lang() commands...
So, I have opened the issue #941. I hope this help.

--------------------------------------------------------------
#788 Comment 1:
Please rebase. 

--------------------------------------------------------------
#787 Comment 1:
Removed the forgotten print-out...

--------------------------------------------------------------
--------------------------------------------------------------
#784 Comment 1:
Ok, then I think this is fine to merge!

--------------------------------------------------------------
#782 Comment 1:
Ah, sorry and thanks!

#782 Comment 2:
Where is the test case? :innocent: 

#782 Comment 3:
@koppor Apparently there are no tests for this method (although there is bunch of tests for the class...), since otherwise they would have catched the bug. But feel free to add tests :smiling_imp: 

--------------------------------------------------------------
--------------------------------------------------------------
#778 Comment 1:
Thanks for the contribution. Makes sense!

Next time, please create a branch for your PR. I think that there may be some problems merging from your master branch so I let someone more knowledgeable do it.

#778 Comment 2:
Could you add a CHANGELOG entry, please?

For us, it is not soo much an issue if this is on the master branch. So when a CHANGELOG entry is added, we can merge this in. 

But maybe we should refactor the code to avoid these if statements whether we have a database connection or a file handle. 

#778 Comment 3:
I added the Fix to the CHANGELOG. 
These are my first steps in open source contribution so please forgive me the beginnner faults. ;-)

#778 Comment 4:
Thanks @jensdoecke. 
Can you please shortly explain why you tested that `out` is a connection and not that `val` is not null? 

#778 Comment 5:
In my opinion is the code more readable.

I prefer something like this:
When the object is a connection, I want to check if it is a MySql DB.

Instead of the assumption:
When the object is null, it must be a FileOutputStream and no Connection, so I don't check the dbParams.

#778 Comment 6:
Ok thanks for this clarification and your pullrequest. In my opinion, this can be merged in. :+1: 

#778 Comment 7:
Thanks for the PR :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#771 Comment 1:
The problem is that the right hand side MUST be evaluated here. An option would be to write:

`hasWritten =  writeField(entry, out, value, hasWritten, indentation) || hasWritten;`

but right now the tests are failing because of this change. (And the above wouldn't arguably be an improvement really.)

For the latter two cases (`isEmpty()`) it is OK to do like you have proposed, but not really a major benefit. I guess this is primarily important for statements like `if (a != null && a.someMethod())`.

Do not let this discourage you though! Thanks for the interest in improving the code quality, but sometimes these automatic tools are not really able to figure out the purpose of the code. (Trust me, I've cleaned up lots of JabRef code and sometimes the "obvious" improvement breaks something...)

--------------------------------------------------------------
#769 Comment 1:
Maybe better implemented in https://github.com/JabRef/custom-imports

#769 Comment 2:
Indeed! Didn't know of it.

From a testing perspective it may be interesting to somehow connect that
repository, but I agree that the current update is better off there. Should
I add the test as well? I guess that eventually it would be nice to have
tests for the custom importers stored there.

#769 Comment 3:
Yes, please add it directly to the other repository. There are integration possibilities, but I am not sure if we should invest much time on this at the moment. 

#769 Comment 4:
Closed as should be done in other repository. 

--------------------------------------------------------------
#767 Comment 1:
LGTM

--------------------------------------------------------------
#765 Comment 1:
This implements what is discussed in #763 so depending on the answer to that question this should be merged or not.

#765 Comment 2:
:+1: 

--------------------------------------------------------------
#762 Comment 1:
More or less the same changes as in #718 :crying_cat_face: 

#762 Comment 2:
Oh no...

#762 Comment 3:
Wait with merging this until after #718 is merged. I will then rebase (and see if there are any changes left...).

#762 Comment 4:
#718 is merged.

#762 Comment 5:
Is this still relevant?

#762 Comment 6:
New attempt in #793 (and #795).

--------------------------------------------------------------
#761 Comment 1:
Yeah, keep them. Just do
- git gui
- [x] amend last commit
- unstage the change of JabRef_en.properties
- commit
- push with [x] force overwrite.

Then, this PR should be updated correctly.

#761 Comment 2:
@koppor Thanks for the instructions. Worked.

#761 Comment 3:
I have no clue, why the tests fail. Could merge the master branch and rebase? I tried to describe the steps at https://github.com/JabRef/jabref/pull/689#issuecomment-173824448

#761 Comment 4:
@koppor I think the failing test has nothing to do with this PR since the same test also fails locally for me with the current master. 

The PR looks good to me & can be merged in.

#761 Comment 5:
I just noticed that on the FAQ Section in the Website, the wrong Pull Request is linked in the Section "Q: I have an ISBN"  At the moment #791  is linked and not #761 

#761 Comment 6:
I corrected it. Thanks for pointing it out.

--------------------------------------------------------------
#760 Comment 1:
For me there are too many things done inside one PR. Cleanups, even fixing a bug! It is hard to check whether it is ok. If you are sure stuff is alright (renaming a variable, smaller stuff) just commit it to master and create a PR for the stuff that other people should take a look at (e.g. the bug).

--------------------------------------------------------------
#758 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#755 Comment 1:
Looks good to me! :+1: 

#755 Comment 2:
Would be cool if we can increase the test coverage, especially for the newly created branches. Otherwise LGTM :+1: 

#755 Comment 3:
I added tests for all uncovered branches in TypedBibEntry and after two LGTM will merge this in. @oscargus have fun rebasing :smile: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#744 Comment 1:
:+1: makes sense

--------------------------------------------------------------
#740 Comment 1:
LGTM :+1:. As usual, I would love to see only one commit. You know the usual `git reset upstream/master` stuff?

#740 Comment 2:
Ahh, thanks! I usually develop on Windows but now I used a Linux machine... 

#740 Comment 3:
@koppor it was one commit and then I tried to use the github for desktop application to create a pull-request. This added for some reason the second commit. I will go back to the command line....

#740 Comment 4:
Please rebase on master as one commit, so it can be merged. 

#740 Comment 5:
It is already fixed in your PR #715.

--------------------------------------------------------------
#739 Comment 1:
Not sure why the tests fail. Although it is related to internet connections, I cannot really see that it has anything to do with the things I've modified since those fetches rely on Unirest and not URLDownload...

#739 Comment 2:
Seems like the tests pass now (without changing anything). I removed some Coverity warnings as well so that I just didn't repush the same stuff twice.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#733 Comment 1:
:heart_eyes:

#733 Comment 2:
:+1: 

#733 Comment 3:
What about adding a ChangeLog entry?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#728 Comment 1:
:+1: makes sense. 

#728 Comment 2:
Would probably be better to integrate a proper PDF viewer in that case.

I must say though that on my 2560x1440 screen, the preview is sort of OK sized.

#728 Comment 3:
What about adding a ChangeLog entry?

#728 Comment 4:
@stefan-kolb @oscargus is right: Should be added to the CHANGELOG

#728 Comment 5:
Is already done https://github.com/JabRef/jabref/blob/master/CHANGELOG.md

#728 Comment 6:
Oh... :astonished: 

--------------------------------------------------------------
#727 Comment 1:
:+1: 

--------------------------------------------------------------
#726 Comment 1:
:+1: 

--------------------------------------------------------------
#724 Comment 1:
Great! :+1: 

#724 Comment 2:
@matthiasgeiger maybe you can improve the design of the about dialog, as it is not really nice on the eyes. :)

--------------------------------------------------------------
--------------------------------------------------------------
#722 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#719 Comment 1:
I think that there are good arguments to have a configurable separator and even have two different separators, one "fundamental" and one for hierarchical keywords, see #628 and #705. Therefore, I close this PR.

--------------------------------------------------------------
#718 Comment 1:
Could you rebase this on master as both pre-requisite PRs are already merged in. So this could be completed now. 

#718 Comment 2:
One question: currently the save methods take parameters `boolean checkSearch, boolean checkGroup` which specify that only entries satisfying the active search / group selection are exported or saved. As far as I can see, these boolean parameters are always set to false (which means all entries are exported). Should I remove both parameters?

#718 Comment 3:
I guess that if this is merged in first, it should be quite OK to rebase #762 (although many changes are redundant).

Regarding your question: it would be nice to be able to save like this, but I guess it is another of JabRefs almost finished/commented out and then removed features... Considering that one can save selected entries and it is quite easy to see which entries are in the active group/search selection, I'd say remove.

#718 Comment 4:
I think the code is now mature enough to be reviewed. I added some notes above in the first post. Sorry that this PR is rather big.

#718 Comment 5:
I also pushed it to the branch [JabRef/databaseWriter](https://github.com/JabRef/jabref/tree/databaseWriter) so that a build should be available under http://builds.jabref.org/. 

#718 Comment 6:
Do we have the "only update if it changed" functionality for the preamble, strings and comments as well?

#718 Comment 7:
For strings and the epilogue yes, for the preamble kind of (the text in the preamble is stored and exactly rewritten, but the preamble tag and newlines around it are not stored). For the metadata there is no such functionality.

#718 Comment 8:
@tobiasdiez Regarding the two parameters (https://github.com/JabRef/jabref/pull/718#issuecomment-178262570): Aren't they used for "Save selected as plain BibTeX..."?

#718 Comment 9:
@koppor No it is not used for this function. "Save selected..." gets all the selected items and pass them to the save function. The code in question reads

``` java
if (selectedOnly) {
                session = FileActions.savePartOfDatabase(
                        panel.getBibDatabaseContext(),
                        file, Globals.prefs,
                        panel.getSelectedEntries(), encoding, FileActions.DatabaseSaveType.DEFAULT);
            } else {
                session = FileActions.saveDatabase(panel.getBibDatabaseContext(),
                        file, Globals.prefs, false, false, encoding, false);
            }
```

#718 Comment 10:
Please rebase. I think this should be merged. 

One suggestion regarding the SavePreferences: You could create a new instance after the call of a setter. This would result in the benefits of having final variables and it still allows to create derivations of this. 

```
SavePreferences prefs = new SavePreferences(Globals.prefs);
SavePreferences otherInstance = prefs.withEncoding("utf8");
assert prefs != otherInstance && !prefs.equals(otherInstance)
```

#718 Comment 11:
Rebased and implemented the `withEncoding` suggestion (i.e. removed all setters in the preferences...you really don't like them, right? :smile: )

#718 Comment 12:
In my case (JabRef 3.2 on 32- and 64-bit Windows the problem is not fixed. Original lines
% Encoding: windows-1250

@PREAMBLE{{\providecommand{\noopsort}[1]{}}}   (or @Preamble ...)

are always changed to
% Encoding: windows-1250@PREAMBLE{{\providecommand{\noopsort}[1]{}}}

after saving changed bib file.

Kind regards,
Janez Komelj

#718 Comment 13:
@jkomelj You have to use the [latest development version](http://builds.jabref.org/master/) or wait for the release of 3.3 (probably in 1-2 weeks)

#718 Comment 14:
Thank you

--------------------------------------------------------------
#717 Comment 1:
will be reopened

#717 Comment 2:
I think it should be BibTeX if we should be really consistent:

https://en.wikipedia.org/wiki/BibTeX

--------------------------------------------------------------
--------------------------------------------------------------
#715 Comment 1:
Very, very nice! :+1: 

#715 Comment 2:
Any last comments @JabRef/developers? I plan to merge this in soon as the effort to keep this PR up-to-date with master is really high due to the high amount of changes. 

#715 Comment 3:
LGTM :+1: 

#715 Comment 4:
I cannot launch JabRef at this branch:

```
Exception in thread "AWT-EventQueue-0" java.util.NoSuchElementException: No value present
        at java.util.Optional.get(Optional.java:135)
        at net.sf.jabref.specialfields.SpecialFieldValue.getAction(SpecialFieldValue.java:108)
        at net.sf.jabref.gui.BasePanel.setupActions(BasePanel.java:1084)
        at net.sf.jabref.gui.BasePanel.<init>(BasePanel.java:198)
        at net.sf.jabref.gui.JabRefFrame.addTab(JabRefFrame.java:1599)
        at net.sf.jabref.gui.JabRefFrame.addParserResult(JabRefFrame.java:1402)
        at net.sf.jabref.JabRef.openWindow(JabRef.java:682)
        at net.sf.jabref.JabRef.lambda$start$24(JabRef.java:133)
```

It works well on master.

#715 Comment 5:
My above issue was #751, which now has been fixed by Oscar in master.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#712 Comment 1:
will be opened as a new pull request

--------------------------------------------------------------
#711 Comment 1:
@lenhard: I have already implemented the other half of #520 (Make sorting configurable in database properties & write it to file). Code is coming soon...

#711 Comment 2:
@tobiasdiez: that feature has always been available :)

--------------------------------------------------------------
#709 Comment 1:
Thanks for your contribution! Two quick things:

1) Please create a separate branch for each pull request instead of working in your master branch.

2) Always include the exception in the log command, e.g., `LOGGER.error("File could not be opened", e);` In that way there's no need to do any `getMessage()`.

#709 Comment 2:
@1) I'll use feature branches for the next pull request.

@2) should be fixed with the new commit

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#703 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#700 Comment 1:
Hm, it does not compile. 

#700 Comment 2:
Yeah, fixed now...

#700 Comment 3:
:+1: 

--------------------------------------------------------------
#699 Comment 1:
Can you do such cleanup directly in master? I think this makes more sense, as we do not need to review every small change and improvement. :+1: :smile: 

#699 Comment 2:
Sure. Hopefully I won't mess up... Or I do it in a two-step approach as it is easier to double-check the changes here and good to run all tests. But I can take care of the merging myself.

#699 Comment 3:
:+1: :trophy: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#693 Comment 1:
:+1: 
One could also consider to return an optional from getField but this probably requires more changes.

#693 Comment 2:
I was also thinking about that. Would it make sense to add two more methods:

``` java
Optional<String> getOptionalField(String field)
String getDefaultField(String field, String defaultReturnValue)
```

These would make the code look pretty much nicer in quite a few places. 

#693 Comment 3:
Ended up adding `getFieldOptional` as the default value can be easily obtained through `orElse`...

#693 Comment 4:
Why keeping both `getField` and `getFieldOptional`? Why not really replacing the return type of `getField`? That would make `BibEntry.java` consistent within itself. (And I'd remove the `hasField` method, too).

#693 Comment 5:
Because getField is used in 600 places... Also hasField should be faster than getField and in enough places one is actually just looking for that information.

#693 Comment 6:
I'll discuss this at JabCon. :runner:

#693 Comment 7:
Do that. There may be refinements to the PR in the meantime. You can only
convert that many getField requests per day...

#693 Comment 8:
Long term: getField should return optional and getFieldOptional should be removed  as this causes confusion with the getOptionalFields
Short term: merge this PR as is

--------------------------------------------------------------
--------------------------------------------------------------
#691 Comment 1:
Did you test whether the functionality is still working?

#691 Comment 2:
Yes, it is working. I'm thinking that maybe one should move the files into logic and gui, respectively?

#691 Comment 3:
I have not been able to find nested .aux-files to try on, but generating a .bib-file based on a larger .bib-file and an .aux-file works well.

--------------------------------------------------------------
--------------------------------------------------------------
#689 Comment 1:
Your commit 33bd952df6c002f1ec06a2b07d59d1f3692e9c44 changes each line in the file. Did you use Eclipse eGit? This causes issues at Windows because of the line endings or [to change to `LF` at the git checkout](http://stackoverflow.com/a/13154031/873282). I would recommend to always use `git gui` instead of eGit.

Please read [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md) which explains some details on the PRs. Especially that one should not use the `master` branch: All future updates to your master branch will be shown here in this PR. This is a known issue.

Finally, for small changes such as merging the master branch or the correct usage of the [localization](https://github.com/JabRef/jabref/wiki/Code-Howtos#using-localization-correctly), please do
1. `git fetch upstream --prune`
2. `git merge upstream/master`
3. `git reset upstream/master`
4. `git gui`

In git gui, review and commit your changes. Then do a force push to overwrite your changes here. This squashes all commits into a single one. If you want to keep multiple commits, please continue reading at [using-git-rebase](https://help.github.com/articles/using-git-rebase/).

The first two steps are basically https://help.github.com/articles/syncing-a-fork/, where step 4 is skipped.

Hint: At Windows: set the environment variable `LANG` to `en`.

You can also send me a private mail if you have any issues in using git.

#689 Comment 2:
And can you please merge your 4 commits into 1 commit as well as add a changelog entry describing your change?

What is more:
- Localization.lang does not use %s as placeholders but %0 and %1 etc. 
- When updating Localization.lang keys, we have a test in place which ensures that the localizations are correct. You may need to look into this as well. 

#689 Comment 3:
Thanks for all the tips. I will look at this today in the evening.

#689 Comment 4:
@Siedlerchr I think this would be helpful to be merged in for the next release. Could you perhaps complete the PR in the next days?

#689 Comment 5:
@simonharrer  I've been busy, but I will try to finish the PR tomorrow.

#689 Comment 6:
Duplicate of #761 

--------------------------------------------------------------
#688 Comment 1:
I think, minor version updates can always be directly made in the master branch. Also with generally mayor version updates, but this refs #271 and #507.

I think, the [PdfContentImporter](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/importer/fileformat/PdfContentImporter.java) is the only component using these libraries, which is still [untested](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/PdfContentImporter.java?ref=f53cb380ef8f1ae7bd5cf4a159ddc7b02634e14b).

#688 Comment 2:
Yeah, I just wasn't sure how to not mess up, so I thought this was a safer way. :-)

--------------------------------------------------------------
#683 Comment 1:
So then either `URLDecoder.decode` or `URI.toASCIIstring` converts `#` to `%23`? Of course not impossible, but seems like one has used the incorrect methods in that case.

I think the main things it does is replacing space with %20 in the URLs and removing any `\url{...}` commands. There will probably be users that will run into problems, but maybe one can add a URL cleanup that does the corresponding thing?

I think an alternative solution would just be to do a `replaceAll("%23","#")` at the end.

#683 Comment 2:
The problem is that is really hard to correctly encode a URL if we are not aware of its structure. Regardless of what methods we use.
So if we are not completely sure we need it, we should probably not do this.

#683 Comment 3:
:+1: sounds reasonable.

#683 Comment 4:
@koppor what do you think about this? Especially is it possible that users have a `url={\url{http://google.com}}` in their bibfile? And what about escaping symbols for latex like `%`or `#`?

#683 Comment 5:
Unsure. The method comment states following:

> make sure an URL is "portable", in that it doesn't contain bad characters that break the open command in some  OSes. A call to this method will also remove \url{} enclosings.

That reads perfectly fine.

OK, I also read the following

> // FIXME: everything below is really flawed atm

Maybe, we should cleanup the URL fields and not do the cleanup at the place of opening. Although I see the issue of malicious bib files which could have an URL executing malicious code. However, that risk is so low that I would not count on it.

Meaning: :+1: and open a new issue for CleanUp.

--------------------------------------------------------------
#681 Comment 1:
:+1: 

--------------------------------------------------------------
#677 Comment 1:
:+1: (except my minor comment)

#677 Comment 2:
Corrected... for some reason the code style was not imported correctly in Intellij.

#677 Comment 3:
Hm, I just use the default Intellij code style. :)

#677 Comment 4:
@tobiasdiez: what do you think should be done to fix the above issues completely?

#677 Comment 5:
@lenhard In my opinion JabRef should add new lines after the encoding and preamble. I'm working on a solution right now (including a 'bit' of refactoring to make testing easier).

#677 Comment 6:
@tobiasdiez Ok, good to hear! I'll concentrate on other issues then.

--------------------------------------------------------------
#663 Comment 1:
Just a few minor remarks, otherwise :+1: 

#663 Comment 2:
Edited the Changelog (and added the issue that reported the thing I fixed). The exception things I do not really know what to do about. Of course the exception handling can be improved further, but compared to the previous code, this is at least a bit improved.

#663 Comment 3:
Rebased again. Anything else that needs to be fixed? I know that the Exception handling is not brilliant, but nothing I introduced (it is probably slightly more brilliant now though...).

--------------------------------------------------------------
--------------------------------------------------------------
#658 Comment 1:
In the spirit of moving things from JabRefPreferences, wouldn't it make sense to let the ProxyPreferences class access the preferences directly?

So: `ProxyPreferences proxyPrefs = new ProxyPreferences()` and `proxyPrefs.save()` (possibly with a JabRefPreferences as an argument).

#658 Comment 2:
Yes you are right, this would also be a possibility. 

What I aim at in the end is to reduce the public interface of the `JabRefPreferences` class to like 20 methods which store/retrieve only complex types. In this way also the serialization is hidden in the class and the caller doesn't have to worry how to convert to string/boolean etc. Then it would be also very simple to replace the whole class with something completely different, for example writing the preferences as a json file.

#658 Comment 3:
I now moved some code from the JabRefPreferences class to the new ProxyPreferences class as @oscargus suggested. Looks indeed cleaner.

#658 Comment 4:
- no state in ProxyPreferences
- IDEA: logic and model should not know JabRefPreferences
- JabRefPreferences must not know ProxyPreferences; defaults and keys in JabRefPrefences

#658 Comment 5:
Done & rebased.

--------------------------------------------------------------
#657 Comment 1:
In the english translation, the key and the value must always be the same. To fix the failing tests, you need to change the key as well for all language files and the Localization.lang usage of this key in the Java source code. 

#657 Comment 2:
OK. Well, I believe it is better for the project I do not touch the java code. Do you want me to submit an issue?

#657 Comment 3:
Please go ahead and change the code directly in here. We will review it to make sure nothing is broken. :)

#657 Comment 4:
I am doing it currently with Notepad++. "Find in Files." I will commit directly in master as this a minor issue

Refs https://github.com/koppor/jabref/issues/73

#657 Comment 5:
Blindly replacing "bibtex" by "BibTeX" in `*.java` and `*.properties` cannot be done. Each change has to be reviewed manually. Although `100%` look good in the English language file, some languages such as Brazilian seem to like to write everything in lower case:

```
no_base-BibTeX-file_specified=nenhum_arquivo_bibtex_de_base_especificado
```

--------------------------------------------------------------
--------------------------------------------------------------
#652 Comment 1:
:+1: less nulls :)

--------------------------------------------------------------
#648 Comment 1:
I would change the changelog entry to just describe the added functionality without refering to the other issue as it suggest another approach in my opinion.

#648 Comment 2:
LGTM :+1: 

#648 Comment 3:
Please rebase, then this can be merged in. 

#648 Comment 4:
Fixed and rebased

--------------------------------------------------------------
--------------------------------------------------------------
#641 Comment 1:
The `JournalAbbreviator` formatter could borrow (or "inherit") some of those tests while you're at it, increasing the coverage three more lines. :-)

(To me, with limited review knowledge, it looks good!) 

#641 Comment 2:
The thing is that each time an abbreviation is required, the whole abbreviations have to be read from the disk. When using an abbreviation formatter in the output which is used for each entry, this can lead to a significant performance impact.

#641 Comment 3:
Ok, then the abbreviation loader has to be passed down the whole dependency tree....
I don't like that the main frame is the central object providing access to the loader, but, well, it was the only omnipresent class. 

By the way, I also removed the singleton instance in `EntryFetchers`. I think it is ok to init them every time they are needed.

Second remark: the abbreviation formatter is not used... 

#641 Comment 4:
Hmmm, the formatters are loaded by Class.forName. Because of this, Eclipse/IntelliJ cannot detect that they are used, but they are used. And another requirement: the need a default constructor. Because of this, your solution does not work. You still need a global variable for the abbreviations which is referenced from this formatter. 

Maybe we should add a test that every class which implements the formatter interface has a default constructor available. Could be done through reflection maybe. 

#641 Comment 5:
Now the `JournalAbbreviator` is no longer loaded via `Class.forName()`. So the approach via dependency injection does work but there were quite a few places using layouts...

So now I know why JabRef has so many globals and statics... removing one (which I thought would be a small change) resulted in 400+ line changes...bah

#641 Comment 6:
As discussed, a new global variable for the abbreviation loader is introduced (only used by GUI code). The logic & exporter code still uses dependency injection.

Rebased & ready to be merged

#641 Comment 7:
Hm, can you have a look at the unused imports? I think there are a lot of them right now. And please rebase on master. 

#641 Comment 8:
Yes your are right, there were quite a few unused imports.
Removed them now and rebased.

#641 Comment 9:
Should I rebase and merge it in or do you have any other remarks?

#641 Comment 10:
:+1: from my side. Rebase and you can merge this in directly. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#633 Comment 1:
Thank you for the contribution. Can you please indent the lines correctly which were in the then-block of the removed if-condition? Apart from that, this can be merged in from my point of view. 

#633 Comment 2:
Hm, would like to merge it, but github says it has conflicts. Can you have a look into this, please?

#633 Comment 3:
Probably ChangeLog-conflicts...

#633 Comment 4:
By the way, when merging the ChangeLog (if that is the one with the conflict), note that the entry starting `Fixed #608` is actually the correct format. My bad for starting the new version with a made up format (but I'll take care of it eventually, a PR fixing most of it is in #602).

#633 Comment 5:
Ok, I think it should be fine now

#633 Comment 6:
I thought I'd give it a try to see how merging works. :-) Hope I didn't break anything...

#633 Comment 7:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#626 Comment 1:
@JabRef/developers : Will there be a 3.1.1 soon? I think this fix should be included in a release ASAP as the export was faulty in 3.1.

#626 Comment 2:
Would make sense. But maybe wait a week or so to add more bug fixes. 

--------------------------------------------------------------
#619 Comment 1:
I was considering that (and can of course do it). However, as a very temporary object I thought it was a bit overkill. But easily done. Will fix it.

#619 Comment 2:
Didn't know that Eclipse sorted everything out in just a few clicks. Nice!

--------------------------------------------------------------
#616 Comment 1:
The issues are mainly related to GUI concerns, hence, the switch currently would have no effect on the test results. I would postpone this until we have GUI tests in place. 

#616 Comment 2:
As mentioned at https://github.com/travis-ci/travis-ci/issues/2968#issuecomment-149164058, we could switch to [Trusty beta](https://docs.travis-ci.com/user/trusty-ci-environment/).

#616 Comment 3:
https://travis-ci.org/JabRef/jabref/jobs/101143676 hm, does not work with trusty beta. 

--------------------------------------------------------------
--------------------------------------------------------------
#611 Comment 1:
Fixed comments and a few minor other changes.

#611 Comment 2:
LGTM

--------------------------------------------------------------
#610 Comment 1:
Other than the comments: LGTM :+1: 

#610 Comment 2:
Fixed the comments and added a few more tests.

#610 Comment 3:
LGTM :+1: (except the small things I commented on)

#610 Comment 4:
:+1: from my side. I only added some minor comments. 

#610 Comment 5:
Fixed the comments (except that I didn't remove the JavaDoc comments, but will avoid adding them, these ones were copy-and-pasted...).

--------------------------------------------------------------
--------------------------------------------------------------
#605 Comment 1:
Oh, that change surely was much effort. Unfortunately, I find the old way more fitting even though the bibtex / biblatex mode switching was difficult. Why not using `EntryType`, but only as "proxy" to the real type dependent on the bibtex/biblatex mode? (I currently don't know the GoF pattern name for that :see_no_evil:)

All entries should have a (non-abstract) `EntryType` and there should be (abstract) `BibtexEntryType` and `BiblatexEntryType`. All of them should implement `IEntryType` offering `hasAllRequiredFields`etc. `EntryType`and `*EntryType` should not be in a inheritance relation. `EntryType` should proxy to the appropriate Bib(la)texType depending on the mode.

#605 Comment 2:
Thanks Olly for your feedback. 

Let me elaborate a little about why I've chosen to store the entry type as a String. 
The type of the entry is per se a state-less information. `@article{}` signifies an article in the bib file independent on any preferences in JabRef. I think it it thus a good idea to also have a state-independent representation of the same information in JabRef. In other words, I prefer a system where the type is stored in the `BibEntry` class independent on anything else (much like the `author` field is also stored as a string and not as a `AuthorList` object). Then in a latter step this data can be enriched by the preference-dependent information about optional and required fields. This reflects more or less the impression I got from #495 that we came to the conclusion to see the `BibEntry` class only as a data object without any logic. 

Now you can think about implementing such a system in Java. The easiest way and the one I have chosen in this PR is to store the type as a String variable. One can also store the type information as an enum (as I have suggested in #501), but this feels over-engineered (especially since there is no code checking whether a entry is an article or a book). 
The second step is to augment this information by optional/required fields. I have chosen a constructor-based approach, but maybe your idea about using the proxy pattern is better. I have to think about it more.

#605 Comment 3:
Regarding `String` vs `AuthorList`: I would have preferred that BibEntry uses `AuthorList`. Possibly calculated on demand and not during creation of the object. Similar for the `files` field.

Unsure whether I'm wrong. I would pack as much "interpreted" data in BibEntry and get rid of Strings as much as possible... Maybe, we then reimplement an in-memory relational database system. For instance, if we store the "crossref" as reference and not as string. What if the referenced entry is deleted and then recreated etc.

#605 Comment 4:
Ok, as requested here a short summary in bullet list form.

_Status quo_: Parser converts the string "article" to a BibType class instance and saves this in the entry.
- (--) Makes changing from BibTex to BibLatex mode hard as the type stored in every entry has to be changed.
- (-) Adds additional dependency in the parser (BibTypes class).
- (-) The parser has to know whether we are in BibLatexMode or in BibTexMode. However, a priori this information is not necessary to parse a bib file.
- (+) Does not store the type information as a String

_PR_: Parser stores the type information as a plain string in the entry. This string will be converted to BibType class when needed
- (+) Changing from BibTex to BibLatex mode is easier since the required/optional fields are used only in a few places. 
- (+) Makes dependencies clearer (which class needs to know the BibType or BibTex/BibLatex mode).
- (+) Parser does not depend on BibType class and on BibLatexMode.
- (0-) Stores the type information as a string. However, this is in my opinion no real caveat. The previous code also contains something like `if(entry.getType().getName() == "article")' which is now replaced by`if(entry.getType() == "article")`. So often the name of the BibType is used, which somehow destroys the advantage. 

_Alternative solution_: Store type information as an enum in the entry and convert this enum to a BibType when needed.
This approach keeps all the advantages but does not have the "stringy problem". It feels however a little bit overengineered (mainly because there are "unknown" types which are not covered by a simple enum)

#605 Comment 5:
Refs #551 

#605 Comment 6:
- TypedBibEntry as a wrapper around BibEntry; TypedBibEntry has high level API, BibEntry has low level API
- TypedBibEntry -> BibEntry; BibEntry -> RawBibEntry

#605 Comment 7:
Rebased (not sure why there is a merge commit....) and introduced TypedBibEntry aka GoodEasyGodBibEntry (is this the correct way to implement it?). 

Todo (other PR): BibDatabase.getResolvedField should accept Optional database.

--------------------------------------------------------------
#604 Comment 1:
I need to double-check a few things here...

#604 Comment 2:
Should be good to go again.

#604 Comment 3:
:+1: except two minor comments.

--------------------------------------------------------------
#603 Comment 1:
Automatically generated files should not be changed. If they produce warnings, we have to live with it at the moment. 

--------------------------------------------------------------
#602 Comment 1:
Also "solves" #534.

#602 Comment 2:
I need to investigate further. In #110 I identified the bibtex VM (`net.sf.jabref.bst.VM`), which can handle bsts. Seems to be very complete. I am aware that citastionstyles (see #119) is the successor of `bst` files. I am currently unsure, whether citation styles really cover all cases and if users can easily switch.

In the case of biblatex vs. citationstyles, I am pretty sure that biblatex is more powerful. When reading the documentation of [biblatex-apa](https://www.ctan.org/pkg/biblatex-apa), I don't think that a [621 line XML](https://www.zotero.org/styles/apa) can have the same functionality. But you can convince me of the opposite. - I know that this doesn't help in the bst vs. citation styles case though.

#602 Comment 3:
The BST engine is intact (and should probably be used more, e.g. in
generating  author formats). It was just the OO connection  (method
insertBST in OpenOfficePanel (?)) that was removed.

#602 Comment 4:
Could you say a few words about the expected funtionality behind insertBST or is it a mystery? :innocent:

#602 Comment 5:
Well, it's got a hard coded .bst file in it:

``` java
wrapper.loadBstFile(new File("/home/usr/share/texmf-tetex/bibtex/bst/ams/amsalpha.bst"));
```

The other indication of incompleteness is `BstWrapper.java` with the following method:

``` java
public Map<String, String> processEntries(Collection<BibEntry> entries, BibDatabase database) {
        // TODO: how to handle uniquefiers?

        // TODO: need handling of crossrefs?
        String result = vm.run(entries);
        return parseResult(result);
    }
```

In addition, IEEEtran.bst introduces lots of additional LaTeX-commands, so the cleaning provided in `parseResult` will not take you that far. While the idea of using .bst is excellent, in this case I think it is still better to define reference style through the other definition files.

(I've been thinking about generating previews using .bst, but cleaning up the .bbl is a mess in the general, or at least the IEEEtran.bst, case and the same thing is bound to happen here. For previews, I think a feasible way is to generate a PNG/PDF and display it, but that won't really be of any use here.)

#602 Comment 6:
Also, there's not even commented out menu items etc or any configuration.

An option would also be to keep the .bst-stuff but get rid of the push-to-application-button (and other commented out things, there are three potential buttons which are not used). Will also simplify things a bit.

#602 Comment 7:
Seems like the final commit solves #607 if nothing else.

#602 Comment 8:
Should we open an issue then which reads "Add bst support for OpenOffice" referencing this PR?

Regarding the previews: I assume, you mean the preview panel? I thought, the BibtexVM can be used as is for that?

#602 Comment 9:
Yes, I think it makes sense to open an issue.

Yes, the VM can be used, but for some .bst-files (e.g. IEEEtran.bst) there will be quite a bit of non-trivial latex code to parse...

--------------------------------------------------------------
#601 Comment 1:
LGTM. I don't use the plugin and I think, no one else of the other developers do. Therefore, I fully trust you :palm_tree:

--------------------------------------------------------------
#600 Comment 1:
Sure, a lambda does the job as well. If I recall it correctly, the syntax for your first example should be:
`List<String> colNames = this.readColumnNames(conn).stream().filter(!columnsNotConsideredForEntries::contains);`

But let's first see if this really solves the issue of @fishforbreakfast. http://builds.jabref.org/ seems to be down at the moment, so I cannot provide a jar. Once this is fixed, we'll get back at this issue. 

#600 Comment 2:
@lenhard You can provide a deep link to the jar using CircleCI: https://circle-artifacts.com/gh/JabRef/jabref/2214/artifacts/0/home/ubuntu/jabref/build/releases/JabRef-3.2dev--snapshot--2015-12-28--fix-599--372d06d.jar

I'm working on getting builds.jabref.org up and running again. We migrated to a new server, but the migration did not fully succeed. :disappointed: 

#600 Comment 3:
Ok, thanks!

#600 Comment 4:
As a side note: We forgot the terminal operation. A correct lambda syntax is `List<String> colNames = this.readColumnNames(conn).stream().filter(column -> !columnsNotConsideredForEntries.contains(column)).collect(Collectors.toList());`

--------------------------------------------------------------
#597 Comment 1:
I think the underlying problem is that we have no good implementation of equals for `BibEntry`. Anyways, this looks fine for me!

#597 Comment 2:
In this case it wouldn't have helped as both objects can be null, so "hard"
to figure out which to use equals on anyway (which is why the warning
returned).

I've seen quite a few cases in the code where two objects are operated on
and either one of them may be null. Is there a good way to write this?
Somehow one would like to have four cases, which of course can be achieved
by four `if else`, but is there another way?

#597 Comment 3:
If both objects can be null, then there is no way to avoid explicit null checks, I think. If at least one of them was guaranteed to be non-null, a single equals comparision would do. But, alas, that doesn't help here.

There is far too much returning of null in the code...

--------------------------------------------------------------
#596 Comment 1:
With all mean all except the OpenOffice ones, which are considered in #594 

#596 Comment 2:
Looks good. This is long overdue and we get more compile-time checking regarding the preferences.

--------------------------------------------------------------
#595 Comment 1:
I just tried to check if this is fixed, but I am still getting the error:

```
java.io.IOException: Cannot parse number of hits
    at net.sf.jabref.importer.fetcher.ACMPortalFetcher.getNumberOfHits(ACMPortalFetcher.java:400)
    at net.sf.jabref.importer.fetcher.ACMPortalFetcher.processQueryGetPreview(ACMPortalFetcher.java:134)
    at net.sf.jabref.importer.fetcher.GeneralFetcher$3.run(GeneralFetcher.java:241)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:744)
```

The exception is thrown, since the matcher seems to find no match. Maybe `getNumberOfHits` should return zero in this case instead of throwing the exception?

#595 Comment 2:
Ahh, that's right. Final fix: "let's remove all the checking as I have much better regexps now...". Not sure it I'll start up Eclipse again today, but I'll take care of it. :-)

#595 Comment 3:
Sounds good :smile: And no need to hurry, there are enough other pull requests to review.

#595 Comment 4:
Should be good to go now.

#595 Comment 5:
Confirmed, works for me as well. Thanks a lot!

--------------------------------------------------------------
#594 Comment 1:
Looks good. Is it possible, that the dependency on "unoil.jar" can be removed?

#594 Comment 2:
unOil.jar was in a separate directory before (changing the default paths to be the same for unOil and the other jars, where jurt.jar is the one searched for, was the biggest change to get it to work with the most recent versions of OO and LO).

--------------------------------------------------------------
#592 Comment 1:
Looks good!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#584 Comment 1:
Looks good. In my opinion, final does not need to be used everywhere, e.g. for method parameters it does not really matter, but it also does no harm. 

Removals of printStackTrace are always appreciated :-)

#584 Comment 2:
Yes, I slowed down a bit on the final parts in later PRs. Now, I've set up the filters on some things I think is relevant and makes an actual difference. :-)

#584 Comment 3:
LGTM :+1:

Unsure about the `final` declarations. We can also configure Eclipse to add them where appropriate. Found it a bit irritating. Don't know, what the others think.

--------------------------------------------------------------
#583 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#581 Comment 1:
Besides my comments, everything looks good!

#581 Comment 2:
Apart from the dropped database, the comments are handled. 

I couldn't resist cleaning up a bit in BibDatabase (committing only two changed comments isn't enough...). But hopefully nothing controversial there.

#581 Comment 3:
The changes in `BibDatabase` are reasonable. As is the rest of this PR.

--------------------------------------------------------------
#580 Comment 1:
:+1: 

--------------------------------------------------------------
#579 Comment 1:
I'm using the assertEquals(BibEntry shouldBeEntry, BibEntry entry) that was already present to compare each entry of the lists.

#579 Comment 2:
Yeah, I saw the next lines, but what is `Assert.assertTrue(expectedEntries.containsAll(actualEntries));` doing?

#579 Comment 3:
First I wanted to check if both lists contain the same entries, later I check if the order of the entries is the same. Bu this line is probabbly redundant.

#579 Comment 4:
How is `same` defined? If `BibEntry.equals()` is used, this will fail.

#579 Comment 5:
Yes you are right contains uses equals, it therefore fails.

#579 Comment 6:
I don't know why I even wanted to compare a input stream with a list. The methode I need for the medlineplain importer test should compare two lists of bibtex entries...
This compares all entries of the lists with their canonical representation.

#579 Comment 7:
I think a `Assert.assertEquals(list one, list two)` already exists in JUnit and does exactly what you implemented in the new `assertEquals`. See http://stackoverflow.com/a/12495556

#579 Comment 8:
Yes but it uses the equals methode of the BibEntry. As stated by @koppor above we do not want to use equals but rather check the entries canonical representations for equality.

#579 Comment 9:
In my opinion it would be cleaner to overwrite the equals method in `BibEntry` (checking id, type and fields directly) and then use the built-in methods instead of comparing based on `canonicalRepresnation`. @koppor what was the reason to dismiss this option?

#579 Comment 10:
Unknown side effects which need to be investigated time consumingly. Because of this we first wanted to have a solution which can later be switched.

--------------------------------------------------------------
#577 Comment 1:
I realized that it makes sense to add a method that returns the FileType directly (as Optional), as this is a quite common case. Hence, I changed to WIP.

#577 Comment 2:
LGTM :+1: 

--------------------------------------------------------------
#576 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#575 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#572 Comment 1:
By the way, does somebody know why the tests fail on the ci server but pass locally? Is there a secretly hidden preference controlling whether the file type is added?

#572 Comment 2:
Any comments on this one? Should I rebase?

#572 Comment 3:
- model.FileField.parse
- Preferences rework

#572 Comment 4:
I implemented everything we had discussed yesterday. In particular:
- Remove CleanupUtil class by moving its methods to appropriate cleanup classes (and use FileField instead of FileListTableModel)
- Reimplement counting of unsuccessful renames
- Add tests for rename files and make relative cleanups
- Rework cleanup preferences

However, I didn't make CleanupPreset stateless (i.e. it still contains setter) because I don't want to create a constructor accepting 19 booleans...Any idea how to proceed here? 

#572 Comment 5:
Why not use a list of enums, each enum stands for a cleanup that is active aka true. 

#572 Comment 6:
Because this would be too simple :smiley: . Nice idea :+1: 

#572 Comment 7:
Awesome PR. Thanks for the contribution!

--------------------------------------------------------------
--------------------------------------------------------------
#568 Comment 1:
:+1:

--------------------------------------------------------------
--------------------------------------------------------------
#566 Comment 1:
Hm, from the code it seems that this was never used or set. :+1: 

#566 Comment 2:
One use case was presented in `src/main/java/net/sf/jabref/gui/BibtexFields.java` (removed in #581):

```
// a alternative displayname, e.g. used for
// "citeseercitationcount"="Popularity"
```

--------------------------------------------------------------
#560 Comment 1:
Maybe, the UI also has to display lower case values or should it use the (currently removed) CamelCase functionality? I don't like the current `EntryUtil.capitalizeFirst` solution (found in MainTableColumn.java).

#560 Comment 2:
In my opinion, it should use lower case, since we are standardizing on that. I'd say you are free to implement what you find more beautiful :)

#560 Comment 3:
:+1: on lower case. 

--------------------------------------------------------------
#557 Comment 1:
May help in implementing #544

#557 Comment 2:
Will rebase and honor the comments (where appropriate), but not in a few days.

Merry Christmas! :christmas_tree: :santa: 

#557 Comment 3:
Seems like I got a bit of time on my hands anyway.

Rebased, fixed, and a few more tests added.

#557 Comment 4:
Not sure when I will have time to continue, so feel free to merge if you think so.

@tobiasdiez : The new `SimpleFileList` will enable making file related cleanup actions independent of the gui package. Some testing may be good though, although it is basically a copy of `FileListTableModel` with all the non-required stuff removed.

I will add tests eventually and also change all (remaining) code which now use `FileListTableModel` without the need of a complete `ExternalFileType`.

#557 Comment 5:
OK, now I will try to leave this for a while so that it can be reviewed and possibly merged. Otherwise, it will just increase and increase. :-)

#557 Comment 6:
Rebased

#557 Comment 7:
Rebased again. Anything missing here?

#557 Comment 8:
Not sure if this is the correct/best way to do it, but it seems to work.

#557 Comment 9:
I do not like having singletons or global variables, as code with singletons or global variables becomes extremely hard to test. But I do not have any idea how to solve this issue at the moment - maybe JabRef is stuck with such things for eternity. ;)

#557 Comment 10:
This has been merged manually, plus 2 hours of rework by @stefan-kolb and myself. 

One note for the future @oscargus : it contained a lot of ideas, but please keep PRs small :) then, we can merge small ideas quickly

But thanks for the effort on creating this PR @oscargus :smile: 

--------------------------------------------------------------
#554 Comment 1:
Please add a CHANGELOG entry. 

#554 Comment 2:
There's a section of the CHANGELOG labelled "Removed". Better to use that.

Good work in finding out all the details regarding the importer!

#554 Comment 3:
:+1: 

--------------------------------------------------------------
#553 Comment 1:
Please rebase on master, squash the four commits into a single one and add a CHANGELOG entry.

--------------------------------------------------------------
#551 Comment 1:
I am against implementing a hack. I would vote to implement it right from the start as these hacks make it more complicated to switch a right solution. 

#551 Comment 2:
I am aware of #501. IMHO This pull request merely adds tests for the current status quo and enables the GVK Parser tests to run through.

I can also remove all test code and just commit my quick fixes in `GVKParser.java`.

#551 Comment 3:
Superseeded by #605. Our upcoming `TypedBibEntry` and `RawBibEntry` will solve all issues.

--------------------------------------------------------------
#547 Comment 1:
BibtexEntry is called BibEntry now. Not sure how the CircleCI tests passes, but that is the reason that the Travis CI tests won't.

#547 Comment 2:
I'm afraid i cant use the BibEntry. Somehow i can't use the libary ("BibEntry cannot be resolved to a type"), but i fetched my upstream.

#547 Comment 3:
Do you have a package net.sf.jabref.model.entry.BibEntry? model/entry/BibEntry.java
I'm more surprised that you still have BibtexEntry.java.

#547 Comment 4:
I updated the branch with BibEntry. We will solve the package problem with our  tutor. Thanks Oscar

#547 Comment 5:
For now I took care of the smaller changes, more changes coming soon

#547 Comment 6:
Added more test files and added testing against bibtex files.

#547 Comment 7:
@boceckts Is this ready for review? Then please add this label?

#547 Comment 8:
Testcoverage is at only ~80% so far for MedlineImporter and at ~90% for MedlineHandler

#547 Comment 9:
What is the status here? DL was beginning of match.

#547 Comment 10:
Please rebase everything on master and create on commit. Description is here: https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master Please use `git gui` for your commit. Please do not delete other test files.

There should no commits handling the InspecImporter in this pull request. Inspec has been handled in #356

#547 Comment 11:
I am running into a problem in the `GrammerBasedSearchRule.java` it is missing some required imports. The missing ones are `net.sf.jabref.search.SearchBaseVisitor`, `net.sf.jabref.search.SearchLexer` and `net.sf.jabref.search.SearchBaseParser`

#547 Comment 12:
@mairdl You have to run `gradlew generateSource`.

#547 Comment 13:
Now it seems to work, thank you.

#547 Comment 14:
The test are now parameterized as suggested by @tschechlovdev. Also I removed the copyrighted abstract.

#547 Comment 15:
Please fix codacy issues. 

#547 Comment 16:
Codacy issues should be fixed now.

#547 Comment 17:
I'd like to move the issue #1267 to a seperate PR, to have a cleaner cut 

#547 Comment 18:
So you have created a test for importing two or more entries which fails?

#547 Comment 19:
No, but @koppor wants tests even if it not fails

#547 Comment 20:
Yes. And these tests should be included here, I think. 

If the tests fail, the failing tests in conjunction with the bugfix can be in another PR.

#547 Comment 21:
The failed tests can be included here with `@Ignore("Will be fixed in a future PR")` so that there is no huzzle with git, can't they?

#547 Comment 22:
Yes, of course and this is an even better solution. :wink: 

#547 Comment 23:
After some testing i came to the conclusion that this bug/issue is not a problem in the current development version. At the moment I am struggeling to coming up with the right test case. At the moment I am thinking of using a `file.bib` wit some pubmed entries and then importing it with the RISimporter and checking if it works properly. But that seems a bit unfitting for the MedlineImporter.

#547 Comment 24:
What is the current status of this PR?

#547 Comment 25:
waiting for some feedback regardnig the issue #1267 and my comment and also on comments from me regarding the use of a `StringJoiner`

#547 Comment 26:
@simonharrer your suggested version leads to some problems 

#547 Comment 27:
Since this PR blocks #1207, I would prefer that we merge this as quickly as possible. So just ignore the issue #1267 for the moment.

#547 Comment 28:
@mairdl hm, then revert it to the state without my suggestion, and rebase. We try to merge this in quickly as it blocks #1207 

The remaining issues can be fixed in a separate PR.

#547 Comment 29:
ok i will revert it asap

#547 Comment 30:
I reverted the changes of StringUtil and added a ignored label to the tests that would fail.

#547 Comment 31:
Thanks. Please open a new PR then for the fix of the failing test. :)

--------------------------------------------------------------
#546 Comment 1:
Ready-built versions available at http://builds.jabref.org/usetextanalyzer/

#546 Comment 2:
The idea is great. I'd love to have the result of "Parse with Freecite" integrated the same way.

However, could you provide us with an example entry? When I tried the following entry, only "12" is highlighted.

```
Binz, Tobias; Breiter, Gerd; Leymann, Frank; Spatzier, Thomas: Portable Cloud Services Using TOSCA. In: IEEE Internet Computing. Vol. 16(03), Los Alamitos, CA, USA: IEEE Computer Society, 2012.
```

![grabbed_20151221-114440](https://cloud.githubusercontent.com/assets/1366654/11929037/3b8412c6-a7d8-11e5-8ac0-045fca816857.png)

#546 Comment 3:
Yes, that is indeed one of the problems. The year is found and later on processed in several steps before the actual position is stored. This is still slightly better than the original version of TextAnalyzer. I couldn't really bother to work more on it yesterday as there were so many other issues. However, this particular one should be rather manageable. 

If you add page numbers those will be correctly extracted (but incorrectly highlighted) as well.

#546 Comment 4:
What about this PR? Any idea how to progress there? Is it good enough already to be merged? Does it already create value or improves the code quality of JabRef?

#546 Comment 5:
The problem is that TextAnalyzer only can guess very few fields (year, pages, volume, journal) and not really consistently. The GUI issues can be fixed quite quickly, but I do not think it is worthwhile as long as TextAnalyzer is not more mature.

It is worthwhile merging from the perspective that if anyone gives it a go, TextAnalyzer is slightly better now. However, the GUI part should probably be removed for now, commenting out lines 232-233 in TextInputDialog for easy restoring.

But I strongly believe that no one will improve TextAnalyzer enough, so it may be better to remove it completely.

#546 Comment 6:
We decided at JabCon that we remove this feature. 

--------------------------------------------------------------
#543 Comment 1:
:+1: 

#543 Comment 2:
:+1: 

--------------------------------------------------------------
#542 Comment 1:
- `Réflexions` => `R{\'{e}}flexions`
- There is a hard coded list in CaseKeeperList mainly for Electrical Engineering. Ideally one should be able to provide more than one list, which easily can be selected based on subject area, and also keep a user defined list of commonly occurring words where the capitals should be kept. Why? There are names which are more or less common in certain areas. If I were into search engines I would add "Page", but probably not in other areas. Also, if you import "HOW TO TEST JAVA PROGRAMS" you do typically not want to keep it that way just because the database provided you that.
- No, that doesn't work, but it would be nice if it did. Currently, very few tags are honored and all are stripped.

#542 Comment 2:
@oscargus Thanks! This was very helpful.

I close this PR as its originally purpose is fulfilled (and for some reason it was based on my master and not the correct branch...)

#542 Comment 3:
@tobiasdiez I don't get why it's original purpose is fulfilled. Is there "better" code in the master branch already?

#542 Comment 4:
It is now surpassed by #572.

--------------------------------------------------------------
--------------------------------------------------------------
#540 Comment 1:
I replace the `"".equals(text)` with `text.isEmpty()` in "all" files where applicable, except for (most of) the Importers where it requires a bit of checking to see if the String is set to empty in the first place. (There are 60 occurrences in those files.)

--------------------------------------------------------------
#538 Comment 1:
Optional should work. Will read up on it.

#538 Comment 2:
:+1:

--------------------------------------------------------------
#536 Comment 1:
Fixed those things and a really stupid bug...

In general, what is the better approach for these types of warning dialogs?
- Like now, a static method showing the dialog and not returning anything? (`Dialog.showDialog()`)
- As the first approach, creating an object on which a method is directly called (still not returning anything)? (`new Dialog.show()`)

#536 Comment 2:
Will rebase...

#536 Comment 3:
I favor classes/instances over static methods. In that case, both is possible. 

#536 Comment 4:
May be good to go now.

--------------------------------------------------------------
#531 Comment 1:
Please add a CHANGELOG entry as this fixes #479 

#531 Comment 2:
Probably some line ending issue as all lines in ImportFormatReader are marked as changed and a new copy of the CHANGELOG is appended at the start of it.

--------------------------------------------------------------
#530 Comment 1:
Fix confirmed by reporter in #526 

--------------------------------------------------------------
#525 Comment 1:
This time I ask before: Can I merge this? :wink:

#525 Comment 2:
Yes! ;-)

#525 Comment 3:
:+1: 

--------------------------------------------------------------
#519 Comment 1:
are you done? ;)

#519 Comment 2:
Haha, yes, I think so. :-) (It seems like UndoableFieldChange handles clearing properly.)

--------------------------------------------------------------
#517 Comment 1:
I was a bit too quick. There were more issues of this type, so I fixed them all and pushed without seeing that it was already merged.

#517 Comment 2:
I'll open a new PR (seems to be the best solution).

--------------------------------------------------------------
#515 Comment 1:
I had a personal discussion with @bartsch-dev, that the current BibtexImporter is _not_ aware of the encoding header. The reading of JabRef's encoding header is implemented in `OpenDatabaseAction` and not somewhere in the BibtexParser.

Therefore, there is _no_ test of different encoding strings and it can IMHO only handle ASCII encoded files.

#515 Comment 2:
I would let this go through and handle the usage of the open method of `OpenDatabaseAction` in a separate issue.

#515 Comment 3:
Note that none of the files written at https://github.com/JabRef/jabref/wiki/BibTeX are tested here.

#515 Comment 4:
Fixed all the mentioned issues.
The `git` part in the file was, as already mentioned, the title of the book which i took as an example.
I also added some examples from https://github.com/JabRef/jabref/wiki/BibTeX.

#515 Comment 5:
I think this can be merged in.

#515 Comment 6:
As discussed in https://github.com/JabRef/jabref/issues/558#issuecomment-195430095, it is not necessary to refactor `OpenDatabaseAction` because of this importer.

--------------------------------------------------------------
#514 Comment 1:
Tests should not depend on the default encoding of the system. I would vote for always reading only with UTF_8 set explicitly instead of relying on the default encoding. 

--------------------------------------------------------------
#513 Comment 1:
It is impossible to review this PR. Could you please do the usual `git fetch --all --prune`; `git merge upstream/master`; `git reset upstream/master`; `git gui`  + commit + force push chain?

#513 Comment 2:
Coverage is [90%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/RepecNepImporter.java?ref=2d294130b5b4773aa32358cc507698f28dbbceb2). I think, more is hard to achieve. Nevertheless, it should be tried to cover the [missed line 473](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/RepecNepImporter.java?ref=2d294130b5b4773aa32358cc507698f28dbbceb2#l-473).

Further, an IOException can be simulated using the Mockito framework. See https://github.com/zellerdev/jabref/commit/d78831caca83c170516b0b5b7aa52dd0d0f5fd9a

#513 Comment 3:
Good job :+1: 
@koppor if you are happy with [85% coverage](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/RepecNepImporter.java?ref=68d076e484cb821a3d3307bd5adaaab5cfa42aac), then this can be merged in from my point of view.

#513 Comment 4:
This test is about RepecNepImporter. **No changes on other classes should be done**. Please remove the change on `MsBibImporter.java`.

#513 Comment 5:
Otherwise, it's OK for me.

--------------------------------------------------------------
#512 Comment 1:
Is there any real data tested? Is Ovid used in the wild?

#512 Comment 2:
The tests look good. However, quite a few information get lost upon import. For example, in the 7th file there is no keywords, language and issn information. Could you pls try to implement a few more mapping rules? 

#512 Comment 3:
Importer improved to imports the following fields: doi, issn, language and keywords.

#512 Comment 4:
Thanks! Looks good and has 100% test coverage! Can you pls rebase / merge so that it can be merged in?

#512 Comment 5:
Please resolve the conflicts.

--------------------------------------------------------------
#511 Comment 1:
Why do you use `txt` as file extension? Shouldn't it be `xml`? Is BibTeXXML not an XML format?

#511 Comment 2:
Coverage of the related BibTeXMLHandler: [31,70%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/BibTeXMLHandler.java?ref=d78831caca83c170516b0b5b7aa52dd0d0f5fd9a)

#511 Comment 3:
At the current stage no imports are actually checked (there is not a single test of a successful import). These should be added!

#511 Comment 4:
Could you please convert a few existing small bib-files with [BibtexXML](https://sourceforge.net/projects/bibtexml/?source=navbar) to xml and then try to read the output back in JabRef. In this way we ensure that JabRef is able to properly read the 'real' BibtexXML-format.

#511 Comment 5:
I will update the tests as soon as possible. Right now I have issues with the converter.

#511 Comment 6:
`testIsRecognizedFormatAccept()` and `testImportEntriesArticle2()` are ignored because JabRef only accepts xml files with the syntax `<bibtex:"fieldname">`. The BibteXML converter creates xml files without `bibtex:`. So only `<"fieldname">`. 
Because of that the `testIsRecognizedFormatAccept()` fails and the `testImportEntriesArticle2()` gets an error.

Refs #898 

#511 Comment 7:
Get the codacy warnings fixed as well, please. 

#511 Comment 8:
Fixed codacy warnings and updated the test so all checks are succesful and removed conflicts with base branch.

#511 Comment 9:
why is the test testImportEntriesArticle2 ignored? I thought when not using a prefix, the importer can handle the import?

#511 Comment 10:
No. The Importer can only import BibTeXML files with the prefix 'bibtex:'. That is one reason why the importer needs to be reimplement. For example if I convert a .bib file with an external tool to BibTeXML there is no 'bibtex:' prefix.
Now the question why I ignore testImportEntriesArticle. Well because the importer reads all tags/fields from the BibTeXML file when using BibtexEntryAssert. Even article. So an empty field is imported but the .bib file has no article field. So there is a fail comparing the files.

#511 Comment 11:
So you plan a rewrite of the import logic which passes all tests in another PR, right? Normally, PRs only adding tests which are ignored should not be merged as they do not move the codebase forward - they are like a huge TODO. From my point of view, we could make an exception in that case as it is the stupro. Hence, LGTM. 

#511 Comment 12:
I don't like that there are quite a few tests which are identical except that the type of the entry is changed. This a perfect case for a parametrized test case. Using parametrized tests also gets rid of the nearly identical test files. All of this was actually discussed in one of the recent importer PRs...

#511 Comment 13:
@tobiasdiez WDYT?

#511 Comment 14:
I still think that there are too many test files. The input can easily be created from a string and also the bibentry can be created directly. So the parametrized test should not contain a fileName as a parameter but a map XMLType -> BibTeXType.
But on second thought, such a map would just replicate the map present in the importer file. @koppor do you think it is worth to test each conversation to have a high test coverage? In my opinion, one conversation as a test would suffice.

#511 Comment 15:
I really like the test files. They could be used by other importers, too. Reason: For non-programmers this is more readable and one can really inspect whether the importing is reasonable. One does not have to read the code.

#511 Comment 16:
But do we need to test the conversation of each type? I would create a test that the conversation works in principle and then just have a Map<String, String> in the importer class. In my opinion there is no need to replicate this information as tests (probably you also get a high coverage with the map approach :) )

#511 Comment 17:
I like that each type is tested. What happens if the implementation is changed? For instance, if XSLT is used for conversion. The aim of the plethora of test cases is to cover as much usecases as possible and not as much code as possible :sun_with_face: 

#511 Comment 18:
Coverage [96,87%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/BibTeXMLHandler.java?ref=9c000dded0bc2406a9ba5afe5d833a323837ee63) and [75.86%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/BibTeXMLImporter.java?ref=9c000dded0bc2406a9ba5afe5d833a323837ee63). Not more achievable.

LGTM.

#511 Comment 19:
I still prefer that the type conversation is implemented analogously to BiblioscapeImporterTestTypes

#511 Comment 20:
One last remark: try not to use forEach, this is the worst method in using streams as it produces side effects. 

--------------------------------------------------------------
#510 Comment 1:
Seems to be some line ending issues here as well.

#510 Comment 2:
Please do the usual `git fetch --all --prune`,  `git merge upstream/master`, `git reset upstream/master`, forced push (via git gui) cycle to generate **one** commit. This eases reviewing. We do NOT have the man power to review 5 or more separate commits.

This should also solve the failing build.

#510 Comment 3:
[Coverage 90,74%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/SilverPlatterImporter.java?ref=65e35bbaacd841def034b6228c8bd6ef1b5918bd). Please try to increase it.

#510 Comment 4:
Coverage is now [96,22%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/SilverPlatterImporter.java?ref=c35a2e6ec290f2ff1acd6fad331810ef7e12deb8). The missed lines are mostly for incomplete entries (pages and title in chapters). Think, it's OK to miss them.

#510 Comment 5:
The test is good (except some minor remarks). However the importer is pretty bad (it misses a lot of fields like language and issn). @koppor do you think it is worthwhile to invest resources in improving the importer?

#510 Comment 6:
Formatting should be checked (CTRL+SHIFT+f at the new lines). Doublecheck with git gui.

A personal discussion revealed, that this importer is not used in the wild. Think, it could be left as is for now.

I have no clue, how similar this format to other formats. Maybe, this can be checked after all tests are merged.

#510 Comment 7:
Maybe, it can be checked whether the format is similar to the CopacImporter: https://github.com/JabRef/jabref/pull/310#issuecomment-168193536

#510 Comment 8:
@zellerdev prepares a comparison matrix of SilverPlatter, Copac, and RIS to help to understand the different import formats.

#510 Comment 9:
I _think_ that the nbib format obtained from PubMed is quite similar to RIS
and this is clearly a format used in the wild  (based on feature requests
for other tools). Could be worthwhile including.

#510 Comment 10:
Yeah we should include the *.nbib format. Just had a use case were I needed to import one.
http://www.ncbi.nlm.nih.gov/pubmed/23633646

#510 Comment 11:
What is the status here?

#510 Comment 12:
I'm waiting for feedback, wether the test is ok now.

#510 Comment 13:
LGTM :+1: just some very small comments

#510 Comment 14:
I've added the comments.
But the tests fail, because of an AssertionError in testImportEntries2(): expected <1> but was <0>.
This error comes from BibtexEntryAssert.assertEquals(). But I checked wether the size of the list is 1 with Assert.assertEquals() and that seems to be ok. So I don't know why this error is comming.

#510 Comment 15:
The corresponding line is `Assert.assertEquals(1, result.getDatabase().getEntryCount());` so there is a problem while parsing the bib file and not of the importer. Does opening the bibfile in JabRef works?

#510 Comment 16:
No it doesn't works. It says, that no entries were found.

#510 Comment 17:
I found the problem. Now the import of the bib file works. I also changed the test to a parameterized test.

#510 Comment 18:
Except my very minor comments :+1: LGTM

#510 Comment 19:
I adressed the comments and squashed all commits into one commit.

#510 Comment 20:
:trophy: 

--------------------------------------------------------------
#509 Comment 1:
Please open WIP pull requests only if you need review during the creation of the PR to let it guide your implementation. The current state of this PR I cannot review because it basically contains no real value yet. 

--------------------------------------------------------------
#508 Comment 1:
Coverage of MsBibImporter.java: [92.85%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/MsBibImporter.java?ref=3fa43b7e140914285653758b620e094d6ec3bcd8). Coverage of MSBibDatabase.java: [38,07%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/msbib/MSBibDatabase.java?ref=3fa43b7e140914285653758b620e094d6ec3bcd8), but the relevant parts of the importer seem to be covered. Coverage of MSBibEntry.java: [26.23%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/msbib/MSBibEntry.java?ref=3fa43b7e140914285653758b620e094d6ec3bcd8). `getBibtexRepresentation` from there is not fully covered and neither related methods. For me, these should be tested, too.

#508 Comment 2:
Could you pls split `testImportEntries`? At least move the empty xml file to an separate test. 
Otherwise: :+1: 

#508 Comment 3:
Looks good. 
However, there a few information which apparently get lost upon import (for example, `issue` and `issn`). Could you add these mappings pls?

#508 Comment 4:
It's not, like the mappings don't exists. issue is shown as number in the bibfile. I don't know why it is represented as number, but i could change the name to issue if you want. 
The mapping for the standardNumber also exists in 

``` java
    private void parseSingleStandardNumber(String type, String bibtype, String standardNum, HashMap<String, String> map) {
        // tested using http://www.javaregex.com/test.html
        Pattern pattern = Pattern.compile(':' + type + ":(.[^:]+)");
        Matcher matcher = pattern.matcher(standardNum);
        if (matcher.matches()) {
            map.put(bibtype, matcher.group(1));
        }
    }

    private void parseStandardNumber(String standardNum, HashMap<String, String> map) {
        if (standardNumber == null) {
            return;
        }
        parseSingleStandardNumber("ISBN", "isbn", standardNum, map); /* SM: 2010.10: lower case */
        parseSingleStandardNumber("ISSN", "issn", standardNum, map); /* SM: 2010.10: lower case */
        parseSingleStandardNumber("LCCN", "lccn", standardNum, map); /* SM: 2010.10: lower case */
        parseSingleStandardNumber("MRN", "mrnumber", standardNum, map);
        /* SM: 2010.10 begin DOI support */
        parseSingleStandardNumber("DOI", "doi", standardNum, map);
        /* SM: 2010.10 end DOI support */
    }
```

the problem is, that you have to write  :ISBN:1234-5678. So i didn't know, that I have to put a : before ISBN

#508 Comment 5:
Is there some other mapping that I should add or something that I should change? Or ist the test so far ok ?

#508 Comment 6:
The "regenerate eclipse settings" confuse me. Could you do a single commit as described at https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master?

#508 Comment 7:
Meanwhile, we learned about parameterized tests. Please split up your test class into two. One for iterating on testfiles and checking matching of the imported `xml` and the `bib`(see https://github.com/JabRef/jabref/blob/master/src/test/java/net/sf/jabref/importer/fileformat/PdfContentImporterTestFiles.java) and one for everything else (see https://github.com/JabRef/jabref/blob/master/src/test/java/net/sf/jabref/importer/fileformat/PdfContentImporterTest.java).

There, you also see the usage of `net.sf.jabref.bibtex.BibtexEntryAssert.assertEquals(Class<? extends Object>, String, List<BibEntry>)` (which is an improvement of the long-available `net.sf.jabref.bibtex.BibtexEntryAssert.assertEquals(Class<? extends Object>, String, BibEntry)`)

As a final step, the `...Files` test cases could be generalized: The only difference are 
- the formatter
- the filenames to test
- the extension of the input test file

#508 Comment 8:
I splitted the test class into two classes and tried to generalize the ...Files

#508 Comment 9:
The refactoring of the tests is good and the commits are easy to review. Thank you for that.

However, I don't see a generalization of the tests. I expected an abstract class being the parent class. This class has a constructor getting passed: the formatter, the filenames to test, and the extension of the input test file.

The importer code is pretty simple, because the whole logic is in MSBibDatabase.java, covered [33,87%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/msbib/MSBibDatabase.java?ref=aacca4a894c069f4efd8109b1ad486fdf80ae7d0) and MSBibEntry.java, covered [42.09%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/msbib/MSBibEntry.java?ref=aacca4a894c069f4efd8109b1ad486fdf80ae7d0).

When I said "neither related methods. For me, these should be tested, too.", I meant for instance `mapMSBibToBibtexType`, which [is nearly not covered](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/msbib/MSBibEntry.java?ref=aacca4a894c069f4efd8109b1ad486fdf80ae7d0#l-909).

Since your project is now in the "production" phase and not in the warmup any more, I expect the numbers of both MSBibDatabase.java and MSBibEntry.java to raise to nearly 100%.

#508 Comment 10:
I tried to increase the test coverage, but the problem is, that most of the methods in the MsBibDatabse and the MsBibEntry only used in the class MSBibExportFormat. So they're not used when importing a msbib file. Is it ok to test them, when testing the MSBibExportFormat?

#508 Comment 11:
Yes of course you can create tests for the export and thereby test MsBibDatabse and -Entry. But please create a new test class for the exporter and don't mix it up with the tests for the importer.

I think the test coverage for the importer methods is on a good level. So if you prefer we can merge this in and you open a new PR with the tests for the exporter (not sure how your project is structured).

#508 Comment 12:
It would fit into our plan, so I will work on the exporter test and open a new PR for the tests of the exporter. 

#508 Comment 13:
@tobiasdiez @koppor Are you fine with merging this in?

#508 Comment 14:
Yes looks good to me.

--------------------------------------------------------------
#507 Comment 1:
Wow, if that works, then it's terrific!

#507 Comment 2:
It does work already. :) The failing build is a sign that the remaining two null pointer exceptions need to be fixed. 

#507 Comment 3:
Nice work :+1: 

#507 Comment 4:
As already said today: :+1:

Two things:
- running those GUI checks (naturally) opens the GUI - so running "all tests" before a commit gets quite unnerving - I'm not sure how to deal with this... running the tests only at circle ci?
- the current tests seem to be dependent on the chosen language and therefore fail if another language is set:
  `org.assertj.swing.exception.ComponentLookupException: Unable to find component using matcher org.assertj.swing.driver.JMenuItemMatcher[label='File|New database'].`  - a solution might be to set the prefs for the tests accordingly

#507 Comment 5:
Aren't there any test frameworks that run in headless mode?

#507 Comment 6:
I have not found any library that is still maintained and support this. 

#507 Comment 7:
There are some indications in the documentation that this might be possible with assertJ Swing: 
See http://joel-costigliola.github.io/assertj/assertj-swing-lookup.html -> "Scope of component lookups" and 
http://joel-costigliola.github.io/assertj/swing/api/org/assertj/swing/core/ComponentLookupScope.html

#507 Comment 8:
@matthiasgeiger hm, can't find any of these indications.

#507 Comment 9:
http://joel-costigliola.github.io/assertj/swing/api/org/assertj/swing/core/ComponentLookupScope.html#ALL - if a UI component can be found without being shown it can be tested without being shown?

#507 Comment 10:
No. If you test without the robot, then you have a headless mode. But I think you cannot test meaningful unit tests without the robot. 

#507 Comment 11:
For the record: Screenscraping UI test framework: http://www.sikulix.com/

#507 Comment 12:
I'm not sure if I like these kind of tests or not.
On the one hand it is of course good to increase the test coverage. Hence, the more tests the better. However, these 15% increase actually don't say anything since the tests are quite weak (there are no assertion statements??). For example, the folder "SpecialFields" went from 2% to 50%. Seeing these numbers, I would actually expect that the logic in these classes is relatively well-tested. But this is not the case. So the increase in code coverage actually says nothing and can be quite misleading.

Additionally, these kind of tests are rather fragile since they fail in case of trivial changes (like renaming the corresponding button). 

Personally, I would wait with GUI tests until after the migration to JavaFX and until the GUI is relatively stable. For the moment, there are enough untested logic classes which should be covered first.

#507 Comment 13:
The thing is: with these tests we can easily spot some major issues which are hard to detect without the tests, e.g., that Swing classes are accessed outside the EDT thread or that exceptions occur upon clicking some buttons. And with only the 80 lines of code, five issues have been unearthed. Hence, the effort/benefit ratio is actually quite good. 

#507 Comment 14:
I really want to get this through. We could add a gradle build switch disabling the GUI testing. I want to have this in ensure that (when possible) the answer of a FAQ is backed by a test case. This will improve the documentation very much.

#507 Comment 15:
Looks good to go! The Mime-test seems to be failing every now and then...

#507 Comment 16:
The thing is, locally, they work. On the CI server, it somehow fails cause of timeouts as some windows may open not quick enough. I tried to increase the timeouts I could increase, but it did not solve the problem. 

I am leaning towards closing this PR, and just live with the fact that we cannot test our GUI. What is the opinion of the other @JabRef/developers ?

#507 Comment 17:
So, the tests are now working on travis and on circleci. The original problems were coding errors in one of the tests (which is still not working properly, but is ignored now).

As for getting the tests to work within IntelliJ, I am really at a loss. Why does the IDE receive no test events when executing the test class? Any hints @simonharrer 

Once we get that working there are still a few hurdles to jump. We need to find a proper syntax to test newly opened dialog windows. After that, there are practically hundreds of test we _could_ write.

#507 Comment 18:
Is the "proper syntax to test newly opened dialog windows" a show stopper? Besides that, is IntelliJ support the only other show stopper?

No issues (at first sight) with Eclipse.

![grabbed_20160311-192545](https://cloud.githubusercontent.com/assets/1366654/13711475/0f115f38-e7bf-11e5-80e9-7483b243c11c.png)

#507 Comment 19:
We can test a lot with this at the moment already. I vote to merge this in and work on that when bugs arrive. 

#507 Comment 20:
:+1: for merge if these GUI tests are not taken into account for the general test coverage metric.

#507 Comment 21:
It would be nice, if they would increase the calculated coverage ;-)

This does not yet work, however I'll merge this in!

#507 Comment 22:
In my opinion ui testing is a pretty good thing. On the other hand @tobiasdiez also has a point. When we are changing from swing to javafx, all the effort will be for nothing. So I thought about two options that we have, if we want to do ui testing anyway (and I do).

The first would be to use sikulix and screenscraping to do the tests independent from the ui-framework.
The thing is, when doing the conversion to JavaFX the layout might also change, but maybe using new screenshots is easier and faster then new tests.

The second solution is to try writing test interfaces that represent the use-case-flow without doing anything to the ui and in parallel write assertJ tests that use the interfaces. When converting the ui to javafx we could then still use the interfaces and only need to change the ui controlling framework. 

When we finished writing the assertJ test for #988 , @bruehldev  and I will have a look at sikulix and determine how much effort it is to write tests with it, so we can  estimate what solution is best suited for the conversion. Any opinions on my suggestions?

#507 Comment 23:
@Braunch  Completely agree with you. We should not focus on creating so much gui tests.
Regarding JavaFX tests, there is this (older) blog posts about different GUI Testing Frameworks for JavaFX: http://qaware.blogspot.de/2015/03/gui-tests-for-javafx.html

#507 Comment 24:
I also wouldn't worry too much about GUI tests. For JavaFX the databinding mechanism makes it relatively easy to test the ui without actually running the application (this more or less corresponds to the test interfaces you are speaking about). 

--------------------------------------------------------------
#506 Comment 1:
Please rebase this on master. This should also get the build to work on CircleCI.

#506 Comment 2:
I didn't created this Test. These comments where already there and I didn't touched them while I tested the rest of it.

#506 Comment 3:
Even if you did not create these tests, please have a look and either explain the comments or delete them. 

Another issue: the tests do not cover 100% of the importer. Have a look at https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/IsiImporter.java?ref=2d237028d5494f4533344acf5b232c08d3170ae9

#506 Comment 4:
Coverage increased to [98,01%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/IsiImporter.java?ref=27a0b94ecf2df2c005adf409b6e03847db39ffbd). [Line 280](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/IsiImporter.java?ref=27a0b94ecf2df2c005adf409b6e03847db39ffbd#l-280) seems to be difficult to cover, the others should be manageable.

#506 Comment 5:
Current coverage [98,01%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/IsiImporter.java?ref=27a0b94ecf2df2c005adf409b6e03847db39ffbd). We merge nevertheless. If possible, create a **new pull request** increasing the coverage again.

--------------------------------------------------------------
#505 Comment 1:
[Not fully covered](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/RisImporter.java?ref=b89d758f48d1e461ded1dcea997b1d08f71b428b). Is it possible to get this for line 95, too?

RIS is a very widely used import format. The tests should be really good here.

@obraliar and @mairdl Could you please check https://github.com/JabRef/jabref/issues/296

Could you also check https://github.com/JabRef/jabref/issues/399#issuecomment-160138158 and check whether Mendeley exports the `file` field somehow in the RIS format? Please answer at #399. If Mendeley does export the field, at a test case for it!

#505 Comment 2:
@obraliar This test fails, please fix. Please also work together with @zellerdev @mairdl and @ayanai1 to answer https://github.com/JabRef/jabref/pull/310#issuecomment-168193536

#505 Comment 3:
This test fails due to the bug (see https://github.com/JabRef/jabref/issues/296). So it shouldn't be up on the test method.

#505 Comment 4:
@obraliar Could you try to fix the bug? You are probably the only person since ages which looked at the RIS importer code. So you are the perfect candidate to fix this bug :) It looks like it comes down to a few if statements.

It is usually a good idea to write a test replicating a bug (which you have already done). Then fix the bug. Here the test verifies that the bug is indeed fixed. Finally, leave the test as a regression test to prevent that the same bug is reintroduced later.

#505 Comment 5:
Could you please add a test for the RIS given at http://bibtexml.sourceforge.net/examples.html#ris, too? You can reuse the `bib` files @zellerdev will use from there for #511.

#505 Comment 6:
@obraliar Please also address http://tex.stackexchange.com/questions/288511/failing-to-import-into-jabref-3-0 and resolve the conflicts.

#505 Comment 7:
@obraliar Please build and integrate a test case for the RIS file available in #742

#505 Comment 8:
New pull request at #817

--------------------------------------------------------------
#504 Comment 1:
Ready to merge?

#504 Comment 2:
Something went wrong. I'm going to reset the branch to current master and to apply changes.

#504 Comment 3:
Now this test should also be ready. Can you check it please?

#504 Comment 4:
The `*testFiles` file looks good. Regarding the typ conversion test, I propose the following modifications also using parametrized tests (the code might not compile):

``` java
@Parameter(value = 0)
public String biblioscapeType;

@Parameter(value = 1)
public String expectedBibType;

@Parameters
public static Collection<String> types() {
    return biblioscapeToBibTypeMap; // Essentially, just in the double array format as described in https://github.com/junit-team/junit/wiki/Parameterized-tests        
}

@Test
public void importConvertsToCorrectBibType() {
    String input = 
        '+--AU-- Baklouti, F.
        +--YP-- 1999
        +--KW-- Cells; Rna; Isoforms
        +--RT-- ' + biblioscapeType;

    List<Entries> entries = import above string using the procedure described in one of previous PRs (should be in your wiki)

    BibEntry entry = new BibEntry();
    entry.setField("author", "Baklouti, F.");
    entry.setField("keywords", "Cells; Rna; Isoforms");
    entry.setField("year", "1999");
    entry.setType(expectedBibType);
    BibtexEntryAssert.assertEquals(Colletions.singletonOf(entry), entries);
}

```

#504 Comment 5:
Done.

#504 Comment 6:
LGTM :+1: 

#504 Comment 7:
Commits were merged.

#504 Comment 8:
I went through the [concrete coverage](https://codecov.io/github/JabRef/jabref/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fjabref%2Fimporter%2Ffileformat/BiblioscapeImporter.java?ref=dba4eb1133317e77cb0fa02e6be7835a4073ef1e). Do you also test for types not covered at [the if-cascade](https://codecov.io/github/JabRef/jabref/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fjabref%2Fimporter%2Ffileformat/BiblioscapeImporter.java?ref=dba4eb1133317e77cb0fa02e6be7835a4073ef1e#l-213)? If yes, I cannot explain, why the [last else if](https://codecov.io/github/JabRef/jabref/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fjabref%2Fimporter%2Ffileformat/BiblioscapeImporter.java?ref=dba4eb1133317e77cb0fa02e6be7835a4073ef1e#l-230) is only partially covered.

Why are statements not covered in the [inbook case](https://codecov.io/github/JabRef/jabref/src%2Fmain%2Fjava%2Fnet%2Fsf%2Fjabref%2Fimporter%2Ffileformat/BiblioscapeImporter.java?ref=dba4eb1133317e77cb0fa02e6be7835a4073ef1e#l-244)?

#504 Comment 9:
I just changed some fields (types) in test files which were responsible for lower coverage. Now it should be OK.

#504 Comment 10:
The goal is **not** to produce a minimal set of tests to get 100% coverage. What happens if one changes the importer code? Then, the tests might cover more if there are more tests.

Therefore, I don't understand, why you changed tests in 42f02862bb23bb0c2d8e instead of simply adding new tests aiming to cover the missed branches.

#504 Comment 11:
I didn't add new files, because the existing files are testing some code areas multiple times. Therefore I made sure that the changes would not affect the previous tests. Should I undo the changes and create new files anyway?

#504 Comment 12:
That's what I meant with "minimal set of tests". - Yes, please undo the change of the tests and add new ones.

Furthermore, please try that your tests are not in contrast to existing data. For instance, stating the wrong page range for an existing paper.

#504 Comment 13:
Now ready? Should I squash the commits?

#504 Comment 14:
Yes, Please squash the commits and than we'll merge this in.

#504 Comment 15:
Done.

#504 Comment 16:
@koppor @matthiasgeiger Merge this in if your happy with it :smile: 

--------------------------------------------------------------
#502 Comment 1:
:+1: 

--------------------------------------------------------------
#501 Comment 1:
So, what are your opinions on this idea? Should I start implementing it properly or is there a better way to solve this issue?

#501 Comment 2:
New and simpler solution can be found in PR #605.

--------------------------------------------------------------
#500 Comment 1:
The refactorings are fine, from my point of view.

The detection is based on in-memory operations on collections, so no need to worry about speed at the moment.

If I understand the algorithm correctly, any database that contains a non-Biblatex/non-Bibtex type will be categorized as Bibtex. So, a database with one BibLatex entry and a customn entry would be detected as Bibtex. Is that really the desired result? I would rather ignore all non-Bibtex / non-Biblatex types for the decision (CustomEntry, UnkownEntry, IEEETranEntry, ...) and do the decision solely on valid types with Bibtex as the default result.

#500 Comment 2:
@lenhard No it should always detect as Biblatex if it finds one exclusive entry. 

#500 Comment 3:
The algorithm looks good to me. I would move the detection class into the logic package instead of model, but that is your decision.

Strangely, the CircleCi test says there are still compilation errors due to the renamings. As far as I can see locally, all is fine.

--------------------------------------------------------------
#491 Comment 1:
Changelog is missing. Otherwise :+1: 

--------------------------------------------------------------
#488 Comment 1:
I've coded in Java before, but never contributed to an open source project, so here goes.... I welcome your feedback!

Basically the idea here was that I'm a heavy IEEEXplore user and I like having all the fields.  I noticed keywords were missing and also the month was not working in the latest version (V3.0).  Then I looked under the hood and started getting up to speed and realized that Jabref was parsing the HTML result instead of downloading the full Bibtex records (which are available).  And this functionality seemed to be breaking from time to time as IEEE would update the web interface.

Rather than just complain as I have done in the past, I decided I would try to fix this.

So this update partially rewrites the fetcher to now perform the search using a newer script in IEEEXplore (the freesearchresult.jsp is being deprecated next month) which directly gives data in JSON.  Then the article numbers are used to construct a second query for the Bibtex records.  As I was finishing this I saw Oscar's note about the new API for IEEE, which gives results in XML (search results only, not the bibtex record).  Probably it makes sense to eventually switch to this, but I had already written the JSON part at that point.

I also cleaned up the code, removing the old HTML parsing stuff.  I kept the extensive clean-up routine since it seems like this still improves the formatting consistency (the IEEE Bibtex records still aren't the greatest).  Let me know what you think!

#488 Comment 2:
Thank you for the PR. This is exactly the spirit we are looking for! :)

Would you mind creating tests as well? This would allow use to determine when this will break. You could start of by looking at the `GoogleScholarTest` which tests a special kind of fetcher, namely, the full text finder. 

#488 Comment 3:
Thanks for the comments.  I'll try to add some tests when I have more time, and I'll have a look at `GoogleScholarTest`. I didn't see an existing test for the basic `EntryFetcher`, or anything that implements it -- would be useful as a reference, if it exists.

#488 Comment 4:
We currently have very little code coverage through tests, but we are trying to improve. For the GVKFetcher, there is a test, but it works in a different way as it basically is a parser only. 

#488 Comment 5:
Thanks for the review, see my comments above in the outdated diff.  Is the preferred way to respond there, or in a new note here?  I am also new to git and github.  Learning all kinds of stuff. Thanks.

#488 Comment 6:
Awesome, yes, that way it the preferred one! Can you still have a go at providing tests? We really aim to improving code coverage here one test at a time. 

#488 Comment 7:
Sure, yes I plan to try that. It might take a bit of time since I need to learn tests as well.

#488 Comment 8:
I'll try to resolve the conflicts and hope that tests will be added in a separate pull request :innocent: 

--------------------------------------------------------------
#487 Comment 1:
The importer class is a very small one. 100% covered: https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/PdfXmpImporter.java?ref=fb612f9bb0acdca18317dbc6fb3c657c9eb3907d

Very closely related is XMPUtil. Not covered completely: https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/logic/xmp/XMPUtil.java?ref=fb612f9bb0acdca18317dbc6fb3c657c9eb3907d I would vote to let this through and do a full coverage of XMPUtil in a separate pull request.

#487 Comment 2:
Good work. :+1: 
Please just rename the tests and fix some minor issues.
I think you forgot to add the `encrypted` and `empty` pdf. 

#487 Comment 3:
the `encrypted.pdf` already was at `src/test/resources/encrypted.pdf`. Since no other test uses the file anymore i will move it.

#487 Comment 4:
Eclipse shows the warning that the InputStreams are not closed. Reading the code, this seems to be true. Could you please use try-with-resources?

![grabbed_20151222-120709](https://cloud.githubusercontent.com/assets/1366654/11953947/911af66a-a8a4-11e5-92ae-63c1302552a9.png)

#487 Comment 5:
Fixed all the issues mentioned above.

As i just noticed, the `encrypted.pdf` is also used by `XMPUtilTest.java` (my IDE couldn't find the usage at first).
Should I leave the file at its original place or should I alter the path defined in `XMPUtilTest.java`?

#487 Comment 6:
I would propose to leave it as `src/test/resources/`, because the file is used at both your test case and `XMPUtilTest`. The new path `.../jabref/importer/fileformat` indicates that the file is only used at the respective class and not elsewhere.

#487 Comment 7:
OK, I left it there and fixed my `PdfXmpImporterTest`. Everything should be fine now.

--------------------------------------------------------------
#486 Comment 1:
Good idea. I noted a few other things as well, following your idea of using lists instead of arrays. We can merge this in soon. 

#486 Comment 2:
Also see #324 

#486 Comment 3:
@simonharrer Your suggestions are now implemented. From my side, this PR is ready to be merged.

@stefan-kolb I didn't noticed anything strange while writing tests for the autocompleters. Probably the bug #324 is only a gui problem.

#486 Comment 4:
Maybe we should address #324 in another pull request. Merging this in. 

--------------------------------------------------------------
#485 Comment 1:
:+1: 

--------------------------------------------------------------
#484 Comment 1:
Hmm... Seems like this only works for the JabRef.class logger. Not sure why or if there's an easy way to make it work for all classes...

#484 Comment 2:
I would like to have that setting in the preferences or in the Error Console. Like a button "enable debug logging for this session". or "enable debug logging" with a confirmation dialog that debug logging is activated until restart of JabRef.

Regarding the change of the log level, I don't really know.

#484 Comment 3:
Yeah, me too. CLI was a quick way to check it though. :-)

http://stackoverflow.com/questions/13760095/java-dynamically-change-logging-level

#484 Comment 4:
Hm, maybe the option should also increase the number of log statements saved in the log statement cache. At the moment, the cache is set to 500 statements, see the `net.sf.jabref.logic.logging.Cache` class. 

--------------------------------------------------------------
#478 Comment 1:
:+1: Looks good. 

--------------------------------------------------------------
#476 Comment 1:
The important change is in PostgreSQLExporter where the connection is not automatically closed, which is probably what causes the issue.

The other changes are:
- Better code by not having two try directly following each other (now both statements are in one try)
- Avoided duplicate translations which is bound to give warnings using another locale

The reformatting may make it hard to see though.

#476 Comment 2:
@oscgarcus If you created the branch in `upstream` (meaning `JabRef/jabref`) instead of your fork, the build would be available at http://builds.jabref.org/. Reason: We authenticate the upload with an SSH key which doesn't seem to be available when branches of forks are being built. - Refs https://github.com/JabRef/jabref/issues/473#issuecomment-162327856

I created a `databasefix` branch in the main repo and now the build is available at http://builds.jabref.org/databasefix/.

#476 Comment 3:
:+1: 

#476 Comment 4:
For reference, this PR is now primarily hosted in JabRef/jabref databasefix. I'll try to keep this branch updated as well.

#476 Comment 5:
Any updates on the progress of this PR?

#476 Comment 6:
Not really. It works again, but there are some issues with escaping which probably should be fixed (but is not introduced as far as I can tell between 2.11 and 3.0). So, the issues I introduced in 3.0 is removed, which is the part I was primarily looking at solving, but some other issues with the database management have been revealed. 

#476 Comment 7:
Please add CHANGELOG and rebase on master. We will merge this then. Other issues can be fixed in other PRs.

#476 Comment 8:
Rebased and added change log entry.

--------------------------------------------------------------
--------------------------------------------------------------
#474 Comment 1:
Overall good implementation, which lets us move away from having to import the Globals class everywhere. When my two other comments are adressed, this is ready to be merged.

#474 Comment 2:
I changed the `Objects.requireNonNull(preferences);` usage.

Can I change the tests in a new PR please. At the moment, these tests are ignored anyway - so there is no loss in commenting out these assert statements. I plan to rewrite the tests completely, but this is a bigger project so I prefer to do it in a new PR.

--------------------------------------------------------------
#472 Comment 1:
Looks like follows:

![grabbed_20151205-225839](https://cloud.githubusercontent.com/assets/1366654/11610469/bf3126ea-9ba3-11e5-8b8a-fc9b5d97a97d.png)

"Author/Editor" is OK.

Unsure if "Journal/Publisher" is confusing. I think, `booktitle/journal` would be the right correspondence. We should replace the default "journal" column by `booktitle/journal` and maybe add the `publisher` column as default column.

How often is `InBook` used? Consequently, `title` should become `chapter/title`, but that heading is confusing.

#472 Comment 2:
I'd also vote for journal/booktitle (as that is what I use, dealing primarily with journal and conference papers). On the other hand, a good thing with this PR is that it indicates that these things are possible and how to do it.

#472 Comment 3:
The journal says where an article is published. Similarly, the publisher is...well... the publisher of the book. So I would advocate the proposed `journal/publisher`. Booktitle would probably only make sense for articles in conference proceedings. I think articles and books are the most common types, so we should focus on them.

@koppor: `InBook`s also have an author and title, so there shouldn't be a problem.

#472 Comment 4:
Guess it depends on scientific area. I would possibly argue that in general, a publisher doesn't really add any important information, even for books, while in the case of conference papers, the booktitle is crucial. (I know that the publisher is important to create a valid reference, but it doesn't really add any information when browsing a database.)

#472 Comment 5:
In my discipline (computer science), I'd see the correspondence as follows (bibtex fields)

| inproceedings | journal |
| --- | --- |
| title | title |
| author | author |
| booktitle | journal |
| publisher | publisher |
| year | year |

For instance, take an Elsevier article (http://www.sciencedirect.com/science/article/pii/S0268401215000808). The publisher is Elsevier, but the Journal is "International Journal of Information Management". Elsevier publishes more than one journal.

I read "where something is published" as the conference and the concrete journal. The conference is stored in "booktitle", whereas the concrete journal is stored in "journal". Both kinds of works are published by a publisher.

Is it different in your discipline @tobiasdiez?

#472 Comment 6:
I do not think @tobiasdiez disagrees with that analysis, but I got the
impression that he cites more books than conference papers. In that case I
can probably agree that publisher is the "next" field to add (mainly
because of lack of others).

Journal/booktitle/publisher? (Except for the very long heading...)

#472 Comment 7:
Ok apparently the majority is for booktitle. Hence I changed it accordingly. 

My reasoning was indeed based on `book`s for which the publisher is the equivalent of a journal. Since books occur more often in my database, I thought this addition was more valuable. For `InProceedings` the booktitle indeed makes more sense.

#472 Comment 8:
I suppose, `journal/booktitle/publisher` is too confusing? I really agree that the column `journal/booktitle` is empty too often if many books are in the database.

I'll merge it and let's see what others say. :sunflower: 

--------------------------------------------------------------
#469 Comment 1:
:+1: 

#469 Comment 2:
How on earth do I make sure that a test on CircleCI starts in BibLatex mode? The test works on my computer, but it seems like the BibLatex-version of the test doesn't start in BibLatex-mode... Current approach:

``` java
@Before
public void setUp() throws Exception {
        Globals.prefs = JabRefPreferences.getInstance();
        biblatex = Globals.prefs.getBoolean(JabRefPreferences.BIBLATEX_MODE);
        Globals.prefs.putBoolean(JabRefPreferences.BIBLATEX_MODE, true);
}
```

(and of course restoring in @After.)

#469 Comment 3:
> java.lang.AssertionError: expected:<net.sf.jabref.model.entry.BibLatexEntryTypes$1@38e92bb1> but was:<net.sf.jabref.model.entry.BibtexEntryTypes$1@18b49f09>

Could you add a toString Method for the entry types classes?

> How on earth do I make sure that a test on CircleCI starts in BibLatex mode? The test works on my computer, but it seems like the BibLatex-version of the test doesn't start in BibLatex-mode... Current approach:

Hm, should work. 

#469 Comment 4:
I would replace the third statement by a more generic approach as shown at https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases. Otherwise, I think, that this the current way to go.

Then, all test classes changing the preferences look similar.

#469 Comment 5:
@simonharrer : Yes, I was thinking about that. However, it is not strictly the same since (at least in the application) a user may redefine the "article" entry type. From a test perspective I guess it can be OK for now though. However, for a complete test, one would actually like to redefine a standard field and make sure that the original is restored once the custom field is deleted and then I cannot see any other way than to check it like this.

@koppor: OK, could do that. Didn't read those line that carefully so I thought I was doing the same. :-)

#469 Comment 6:
@koppor: overwritePreferences in not public...

#469 Comment 7:
@oscargus Adapt it accordingly. @lenhard Will have a look as this concept is IMHO invented by him.

#469 Comment 8:
Hmm, of course the length test will fail as well... Any idea why CircleCI refuses to switch to BibLatex mode? Maybe it makes sense to just remove the BibLatex-test version (as it is currently not testing the BibLatex-mode anyway) for now?

#469 Comment 9:
Could you try to add a test case whether the current mode is BibLaTeX that we are really sure that the switch does not work? On the one hand, an idea would be to have the preferences stored externally. On the other hand, I would not understand why a change in a HashMap succeeds locally and not on CircleCI.

BTW: Fine with me to add an `@Ignore` tag to the whole biblatex type test class if we can't move forward here.

#469 Comment 10:
I restored the original tests comparing objects, but added `@Ignore` to the BibLatex-test. Added the test:

``` Java
    @Test
    public void textIsThisBibLatex() {
        assertTrue(Globals.prefs.getBoolean(JabRefPreferences.BIBLATEX_MODE));
    }
```

#469 Comment 11:
Appears as if that test passed, so somehow the initialization of EntryTypes is done before the preference is changed...

#469 Comment 12:
Yes, you are right. The `EntryTypes` class uses a static initializer which is only called once when loading the class for the first time. During that time, it sets of the entry types, and ignores the value afterwards. We should refactor this, as we aim to have a file-based bibtex/latexmode switch instead of a global one. 

#469 Comment 13:
Weird though that the test works on my computer, so there the
initialization of EntryTypes is apparently not done before the mode is
switched.

Anyway, with database-local EntryTypes this will be solved (eventually).
May require quite a bit of refactoring though, considering how things work
now (or maybe not). I guess the major thing will be that one cannot create
entries without having a database, which already is that way in the UI.

#469 Comment 14:
Nevertheless, I vote for merging this PR, as it is still helpful, despite being unable to test everything to its fullest. 

#469 Comment 15:
For the record: I wrote the `overwritePreferences` method to be able to write tests for `JabRefPreferences`. The method wasn't needed anywhere else, so I reduced visibility as far as possible. If you need more far-reaching visibility, this is fine.

#469 Comment 16:
Could you please explain the reason for the test

``` java
CustomEntryType newArticle = new CustomEntryType("article", requiredFields,
                BibtexEntryTypes.ARTICLE.getOptionalFields());

bibtexentrytypes.addOrModifyCustomEntryType(newArticle);
// Should not be the same any more
assertNotEquals(BibtexEntryTypes.ARTICLE, bibtexentrytypes.getType("article"));
```

I would have expected that the test should fail (i.e. that the entry is still considered an article). Indeed, with the implementation of #379 this tests fails.

#469 Comment 17:
"article" is now a custom type with the same name as a standard type.

I saw this comment in the remove-method which inspired the test:

```
// In this case the user has removed a customized version
// of a standard type. We reinstate the standard type.
```

This is also the reason that I check against the actual type and not against the name.

#469 Comment 18:
I would have expected that all entry types with the same name are considered equal. So even `assertEquals(BibtexEntryTypes.ARTICLE, BibLatexEntryTypes.ARTICLE)` should return true, shouldn't it?

#469 Comment 19:
A Bibtex article and a BibLatex article differ in the fields they require or have as optional. They should not be considered equal.

#469 Comment 20:
But what is then the best way to say that an entry has a specific type without using explicit strings?
I thought a `assertEquals(BibtexEntryTypes.ARTICLE, entry.getType())` was a neat way to test weather the entry is an article. This test is already used in some tests.

But if bibtex types are considered different from biblatex types and from customized types, then the result of the above statement depends on the state of the program while parsing / creating the entry. 

#469 Comment 21:
Sorry, I don't see the problem with that. The types are different, so why should we treat them as equal? 

--------------------------------------------------------------
#468 Comment 1:
I added some more test cases to get the coverage up and fixed @stefan-kolb's comment.

#468 Comment 2:
If you want feedback for a PR, it is best if you publish your branch on the jabref repository. Because in that case, CircleCI can automatically build a version with your improvements. Otherwise, it is much more cumbersome for the other developers to try out your changes. 

#468 Comment 3:
OK! I'll do that!

#468 Comment 4:
OK, now I pushed to upstream instead and the branch shows up in the list of branches. Will be patient for the tests to finish, but after that there may be a version to test.

#468 Comment 5:
Ok, tried it. Seems good. But got 4 false positives in my library. But these four false positives refer to very very similar entries. In addition, it found an entry the previous algorithm did not find. So this is better from my perspective. 

I vote for merging. 

#468 Comment 6:
This uncovered another issue, namely, #477 

#468 Comment 7:
Should the merge entries dialog also open if the DOIs differ? http://link.springer.com/chapter/10.1007%2F978-3-642-14292-5_55 and http://link.springer.com/chapter/10.1007%2F978-3-642-14292-5_54 are considered as duplicates here.

#468 Comment 8:
Standards such as BPMN 1.0 and BPMN 2.0 are considered as duplicate. Also different editions of a book (Weske: Business Process Management). But I think, all of this has nothing to do with the new implementation ^^.

--------------------------------------------------------------
#467 Comment 1:
Nice idea. 

I would prefer a class LastFocusedTabPreference with two methods setting the lastFocused Path and getting the lastFocusedP Path, putting the functionality of setting/comparing at a single place instead of two different places in the large JabRef class. 

#467 Comment 2:
You mean that the lines 

```
Globals.prefs.get(JabRefPreferences.LAST_FOCUSED);
---
String focusedDatabase = getCurrentBasePanel().getDatabaseFile().getAbsolutePath();
prefs.put(JabRefPreferences.LAST_FOCUSED, focusedDatabase);
```

should be moved to a separate class? I can do this but I doubt that this helps with the spaghetti code in `JabRef.java`  :smirk:

#467 Comment 3:
It only helps a little bit, I admit, but laboriously the squirrel lives. :)

I had something as the following in mind:

```
public class LastFocusedTabPreferences {

    public void setLastFocusedTab(File file) {
       // make absolute path, set, ...
    }

    public File getLastFocusedTab() {

    }

    public boolean hasHadLastFocus(File file) {
       // true if file.absolutePath.equals(getLastFocusedTab())
    }

}
```

With that, you can save a few lines. Have a look at the `RemotePreferences` class, it does something similar. 

#467 Comment 4:
Ok, I understand. This is indeed cleaner and easier to use. One last question before I implement your suggestion: wouldn't it be better to move these two methods into JabRefPreferences instead of creating a new class? This would allow to make the field `LAST_FOCUSED` private so that nobody gets the idea to use the good old `get/put(String)` methods.

#467 Comment 5:
Hm, with this argument, the JabRefPreferences class would get extremely large if we did this for every preference field. Because of this, I would like to keep it separated. 

#467 Comment 6:
Done.

#467 Comment 7:
Please harden the class and rebase, then this can be merged.

#467 Comment 8:
Thanks for your feedback @simonharrer. I feel the code improved considerably through it. I added the suggested null tests now. Hence this should be good to go.

--------------------------------------------------------------
#465 Comment 1:
I'll fix the independence thingy.

--------------------------------------------------------------
#464 Comment 1:
:+1:

I'd add copyright headings to all new files.

--------------------------------------------------------------
#460 Comment 1:
Actually not. It turns out that Entry<String,String>.toString() returns "key=value". Which is a bit unexpected, but makes sense and especially is efficient here.

#460 Comment 2:
Ah ok. :)

--------------------------------------------------------------
#459 Comment 1:
After going through the documentation, I found it. JabRef can have a directory per database. But what if you and me have different directories? Do we have to agree to one? Normally, it's simply the directory of the .bib file (meaning `.` is used as database directory). But what if the users somehow share a bibliography and use different directories? Then, this feature comes in. I can set another directory then you do. Both settings are serialized in the `bib` file. With `-<loginname>` as suffix in the `jabref-meta` field. If JabRef saves a file and my loginname matches the name stored in the `bib` file, it chooses that directory. If no match is found, it uses the "General file directory" of the bib file. If that is not found, it uses the one configured at "Options -> Preferences -> External programs" ("Main file directory").

Here some text from the documentation and mailing lists, but I think, the documentation has to be improved. :sunrise: 

When thinking of it, we should offer the users a button "use current directory" next to "General file directory" and add a little help text that "." denotes that. Or render `.` as `<directory of the bib file is used>`. Then, hopefully, the "User-specific file directory" can be dropped. - I don't see any other use case. Why would I share a bib file and not share the PDFs? If I share the PDFs together with the bib file, a relative directory can be put in "General file directory".

Possibly, the "General file directory" should be stored _relatively_ from the current directory of the bib file.

## FAQ

 http://jabref.sourceforge.net/faq.php: "Then at the field “General file directory” choose the directory specific for the database. If you want to set a directory for you only and other users should use the default directory, use the field “User-specific file directory”"

## File help

http://jabref.sourceforge.net/help/FileLinks.php:
"Finally, in the Database properties dialog you can set a user-specific file directory, which will be valid only when you are the one working on the bib file."

## Mail from the mailing list

(by @ThomasA)
https://sourceforge.net/p/jabref/mailman/message/27008930/
"As of revision 3449, JabRef supports an 
option to specify a user- and host-specific file directory in the 
database properties. This allows each user of a particular database to 
store her/his personal path setting in the database. It furthermore 
allows the same user to specify different paths on different computers 
(must have different host names)."

#459 Comment 2:
Thanks @koppor for this detailed clarification! I think we might simplify this somehow :smile: 

#459 Comment 3:
We need a better internal datastructure.

--------------------------------------------------------------
#456 Comment 1:
:+1: 

--------------------------------------------------------------
#453 Comment 1:
Please do not use abbreviations in variable names, especially if the variable is used in a large method. If the method would be only three lines, the name does not matter much. 

#453 Comment 2:
Had some problems moving the branch between computers, so hopefully the online edit worked...

--------------------------------------------------------------
#452 Comment 1:
Awesome.

#452 Comment 2:
Before I invest much time to fix it...

@JabRef/developers **Are we dropping support for the "PDF/PS" column in the main table?**

In this column potential contents of the "legacy fields" `pdf` and `ps` are shown... 
In #251 the legacy tools are already dropped...
And we already have the abilility to define special columns based on a filetype (e.g. show a column for Excel files) - so it would be possible to show specific columns for PDFs (stored in the `file` field).

#452 Comment 3:
Yes, support has been dropped for pdf/ps fields all over the place, we should do this as well for the main table. 

#452 Comment 4:
:+1: for removing these legacy columns.

Could someone create a FAQ entry (in htdocs) or send me a plain FAQ on how to mimic that behavior with the "special columns"?

#452 Comment 5:
Very nice PR. With this, we already have a 3.1 :)

#452 Comment 6:
@koppor: 

> Q: The 'PDF/PS' column in the main table is missing - how can I restore them?
> A: As the BibTeX fields `pdf` and `ps` are migrated to `file` the table column was obsolete. However, it is possible to define columns specifically for each file type in the preferences. (See: Preferences -> Entry Table Columns -> Show extra columns)
> ![show-extra](https://cloud.githubusercontent.com/assets/676652/11607936/60b0f44e-9b5b-11e5-9f8f-06abf035115c.png)

@simonharrer Mhmm... but this gui stuff is quite unnerving :wink:

#452 Comment 7:
And we already have issues with the pdf/ps columns, which no longer seem to work correctly: #498
This confirms the need for their removal.

#452 Comment 8:
Just rebased - from my point of view the current state is good enough to be merged into master.

#452 Comment 9:
:+1:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#446 Comment 1:
Thanks for the update!

--------------------------------------------------------------
#441 Comment 1:
:+1: looks good to me. The stupro PRs may have to rebase after this is merged. 

#441 Comment 2:
Maybe, but I do not think so. However, it may be that the IsiImporterTest is not longer needed once the StuPro tests are merged. Either way, we can wait with merging this if it is a potential problem (or I remove the final commit which is the one potentially causing problems, I guess.)

#441 Comment 3:
It would be best if you would remove the final commit, then I can merge your changes immediately. 

#441 Comment 4:
OK! I've done that and hopefully stored the removed commit in such a way that it can be recreated. :-)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#433 Comment 1:
Comments in https://github.com/JabRef/jabref/pull/362 must be addressed!

#433 Comment 2:
Superseeded by  #504

--------------------------------------------------------------
--------------------------------------------------------------
#429 Comment 1:
Thanks for the fixup PR. 

--------------------------------------------------------------
#427 Comment 1:
Replaced with #440 

--------------------------------------------------------------
--------------------------------------------------------------
#424 Comment 1:
Please add a CHANGELOG entry. Otherwise, it is good to be merged.

#424 Comment 2:
Is it really required? I can of course do it, but since it is more of an internal change I thought it didn't make sense. (Or do people actually edit the preferences by hand?)

#424 Comment 3:
Hm, well, in this case, it is debatable as the preference was never setable through the GUI. But if you would have loaded a preference.xml, you were able to change this - which is now not possible anymore. Hence, I would add a line. Otherwise, for internal changes, no CHANGELOG entry is required (normally, as no rule without an exception :)

#424 Comment 4:
:+1:

#424 Comment 5:
Done!

--------------------------------------------------------------
#422 Comment 1:
:+1: 

#422 Comment 2:
Can you please rebase on master?

#422 Comment 3:
Mhmm... that was a quick merge... 

Two things: 
1. see comments
2. 3.0.1 is currently not released - so each merge to master will a) be automatically part of 3.0.1 (not 3.1) or b) requires effort to be excluded from the 3.0.1 release 

#422 Comment 4:
v3.1 milestone means needs to be done by 3.1 release but may be earlier.

#422 Comment 5:
I know - but we should discuss the strategy for those bugfix releases (probably not here :wink:)

--------------------------------------------------------------
#418 Comment 1:
BTW: The tests in `net.sf.jabref.logic.fetcher` and the `URLDownloadTest` still fails because the Authenticator is not initialized in unit tests.

#418 Comment 2:
Why is the codecov/project check marked as failed but shows passed on details?

#418 Comment 3:
Is marked as fail as you added code which is not covered by a JUnit test, reducing code coverage. But we do not have a GUI strategy yet. And you added mostly GUI code, hence, no problem there. 

#418 Comment 4:
I forgot to create a special branch for this PR... Hmmm.

#418 Comment 5:
This is not a big problem - as long as you do not start working on another issue in your master branch :wink:

#418 Comment 6:
Hmm, if I change the proxy settings, a restart is required.

#418 Comment 7:
We have other settings which upon change indicate to the user that JabRef has to be restarted for the settings to be applied. See the remote preferences under AdvancedTab. Maybe reuse the code from there. 

#418 Comment 8:
Hmm, looking for config changes in six values looks quite ugly with `if` conditions. I can create a HashMap or StringBuilder out of these values and later on just compare the hash values. Or do you have any other suggestion?

#418 Comment 9:
You just need to compute the final proxy string `username:password@hostname:port` which you can easily compare and then the two remaining boolean variables. 

#418 Comment 10:
That's what I have implemented with a StringBuilder. Comparing the hashCode is much faster than comparing the string. ;-)

#418 Comment 11:
Okay, please check my PR.

#418 Comment 12:
Thank you for the PR. Nice and clean implementation! We would gladly accept more PRs from you. ;)

--------------------------------------------------------------
#407 Comment 1:
Rebased and fixed spelling error.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#403 Comment 1:
If you refactor this, we may also rename the methods in `Localization.java`. `#lang` may be named `#msg` or `#message` for example.

#403 Comment 2:
@JabRef/developers please review, as I would like to merge it. Important changes are given in the first post of this PR. 

#403 Comment 3:
:+1:  works fine and looks good to me

--------------------------------------------------------------
--------------------------------------------------------------
#396 Comment 1:
I do like this. Can there be any issues if a previous file has an encoding format that is not understood and is loaded with a newer version of jabref?

#396 Comment 2:
As far as I can see there is no problem. The encoding from the file is given to `Charset.forName()`, which is the same behavior as previously. Maybe some encodings are now written to the bib-file in a slightly different way, but this shouldn't be a big problem.

#396 Comment 3:
Ok. Please rebase, I will merge it in. 

#396 Comment 4:
Rebased.

--------------------------------------------------------------
#394 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#392 Comment 1:
OK, let's get this through. If we need the code, we'll revert the commit.

--------------------------------------------------------------
#391 Comment 1:
Nice. Hm, what to do when two entries share a line? E.g. `@article{key1, title={a}}@article{key2, title={b}}`?

#391 Comment 2:
In that case, the current implementation fails.

But that gives me an idea: Isn't `@` a valid delimiter that is only used for setting bibtex entry types, but forbidden in other parts of the file? If so, I could use it for reading the file, instead of the newline character. This is very easy to do with a `Scanner` and would make things way easier.

#391 Comment 3:
There is the issue of comments, which potentially can contain `@`. But as far as I know, everything outside of `@xxx{..}` is a comment.

#391 Comment 4:
The `@` symbol can also occur in an entry, for example in an email-address. The current implementation has also the problem that it fails if the entry has no bibtex key. I fear there is no easy way to find an entry in a bibtex file without actually parsing it completely.

#391 Comment 5:
Isn't it possible to add a reference to the source line and column during parsing? This should be offered by ANTLR somehow, isn't it?

I assume that [JBibTeX](https://github.com/jbibtex/jbibtex). Doesn't support that. Refs #123.

#391 Comment 6:
@oscargus: that would not be a problem. It's more of a problem if an `@` is within an entry

@koppor: This is work in progress. I'll start commenting when I have something closer to finalization. Do we want to parse the file twice? If so, then jbibtex might be an option. Can you tell me if jbibtex writes back an entry in exactly the same format (up to every line feed character) as it was read?

@tobiasdiez Thanks, I am aware of that. This is work in progress. I'd first like to arrive at a solution that does the round-trip for a well-structured database. Then, I'll modify it to match incomplete entries.

#391 Comment 7:
Ok, now this works nicely with my large local database that doesn't include analomies.

Now comes the hard part: Properly reading and writing files with strange content. This is also the reason why some tests are failing at the moment. I might need to discuss some of these aspects and will ping you in this thread if I am unsure.

#391 Comment 8:
Dammit, I wanted to get some work done today and now I am only coding JabRef...

Anyways, this seems to work (and passes the tests)! I ditched my previous parsing logic and rewrote it in integration with the `BibtexParser`, which wasn't as hard as I claimed above (my bad). 

I am now able to store each entry exactly as it is in the file. Each entry serialization contains all text from its end up to the end of _previous_ entry. The main problem with this is that with this logic, the first entry also stores the file header and then the header is serialized twice when rewriting the file. I was able to get around that with some hacking, but there might still be edge cases I am not yet aware of.

To sum up, this needs some more manual testing, but should be pretty close. Feedback is welcome :)

#391 Comment 9:
Tested it manually with some entries and it works smoothly! 

Good job! :+1: 

#391 Comment 10:
Should we really introduce this in v3.0 already? I'm not entirely sure it works on all occaison. For instance, I haven't tested it with strings in the bib file so far.

#391 Comment 11:
I think this is something for v3.1.

#391 Comment 12:
:+1: For postponing. I think, we don't need a separate `release` branch, do we? We are just careful with mering the next days :8ball: 

#391 Comment 13:
There are problems with newlines in this PR. If I open JabRef, save the current file without modification, and close JabRef multiple times over, then the save removes newlines between entries step by step. Currently, I am not at all sure why that is.

#391 Comment 14:
Working again. 

In the current version, all newlines / whitespaces at the end of the file, those that follow the last entry, are deleted. I don't really see a problem with that, or am I wrong?

#391 Comment 15:
For version control, you always want to have an empty line at the bottom. http://stackoverflow.com/questions/5813311/no-newline-at-end-of-file

#391 Comment 16:
Why? The only argument in the stackoverflow discussion you link is "because C says, there should be one". That's not really convincing for a BibTeX file.

Anyways, this shouldn't be too hard to implement, so I'll just do it.

#391 Comment 17:
I should have been clearer. Not the selected answer but one of the others is more relevant:

```
If you add a new line at the end of the existing file which is not having a newline at the end already, the diff will show old last line also as modified, when conceptually its not.

At least one good reason to add a newline at the end.
```

#391 Comment 18:
https://github.com/JabRef/jabref/commit/9b46dc28043dd41a62edd65ae33a37b9c5e76be1#diff-63c594fa122cbaa34c72e860d42a75efR2372 

Praxisbeispiel ;-)

#391 Comment 19:
Ok, this seems to work (I also tested with BibTeX strings and JabRef comments) and is ready to merge from my side. If somebody has further remarks and comments (or, god forbid, bugs), this is the time :)

Since this change is big and our test set is not so big, I would object to release this into the wild immediately. Since a bugfix release is imminent for 3.0, I guess we should still wait with merging?

#391 Comment 20:
Just to be sure: Is it possible to keep lines outside entries? For instance at https://github.com/JabRef/jabref/blob/v3.0/src/test/resources/testbib/cleanup.bib, the lines above `@article{test,` should IMHO be kept when writing the file again.

#391 Comment 21:
@koppor: I don't think JabRef ever did that. I might be wrong of course. From what I know, the parser only parses stuff that starts with `@` and is a `preamble`, `string`, `comment`, or any entry type. I also can't find code in `FileActions` that saves arbitrary text.

If we want to store arbitrary text as well, then this is new functionality and should be done in a separate PR. 

#391 Comment 22:
I just checked on master and can confirm that the text is removed.

#391 Comment 23:
Even unrecognized comments by the user are removed, see https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/importer/fileformat/BibtexParser.java#L250

#391 Comment 24:
By the way, the `BibtexParser` still includes code for reading the version number (`This file was created with JabRef X.Y`). Since we stopped writing that, should I delete the parsing code?

#391 Comment 25:
AFAIK, we use that information for file upgrades. Maybe we should move the file update functionality in clean up or something other more accessible. I think, the "upgrade warning" dialog can be disabled permanently, which is not helpful when opening an old file half a year later.

#391 Comment 26:
As far as @simonharrer knows :smile: the version number is not used anywhere. Can you provide evidence for such file upgrades?

#391 Comment 27:
e.g. https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/migrations/FileLinksUpgradeWarning.java#L65

#391 Comment 28:
@matthiasgeiger But that does not really depend on the version information. The version is checked, but also every file written by JabRef 3.0 is marked as problematic. The file links upgrade really depends on whether the file contains fields named `pdf` or `ps`. It wouldn't make a difference `isActionNecessary` always returned true, regardless of the version.

Anyways, if you really really want the version parsing, we can keep it.

#391 Comment 29:
okay... I have to confess that I only performed a "find usages" search without truly checking whether the usages are really needed.

So feel free to remove those lines ;-)

#391 Comment 30:
I removed the old meta flag and version parsing. Version headers are now simply removed on rewrite. File upgrade functionality ultimately depends on preferences (and on whether JabRef finds errors in the file to begin with).

#391 Comment 31:
So, from my point of view this PR is complete and ready to merge.

@koppor and I did some more testing with more advanced things like meta-data and it seems fine. I'm not guaranteeing the absence of bugs, but there should be no more obvious mistakes. 

Somebody else can take a final look and merge this with master.

#391 Comment 32:
Looks good to me. It worked with my large .bib file without any issues. 

#391 Comment 33:
@simonharrer Could you check what happens if you change the sort ordering of the file? Change the ordering. If everything is OK, change the ordering and change an entry. :rabbit2: I it doesn't work, maybe we drop the ordering possibilities of entries within JabRef now or leave that as open issue.

#391 Comment 34:
What do you think is the problem here? When I change the sort ordering, the order of the entries is changed in the file. But nothing else is. And if I also change an entry, this entry is changed as well. I do not get what you imply. 

--------------------------------------------------------------
#390 Comment 1:
:+1: 

#390 Comment 2:
@kojiyokota Also added added some missing keys to [JabRef_ja.properties](https://github.com/JabRef/jabref/blob/1332070cb62a8990567831a10f026d31acfc1738/src/main/resources/l10n/JabRef_ja.properties). Don't know if that information comes too late.

#390 Comment 3:
@koppor Not a problem - I just wondered why some keys are already present in the Japanese l10n :wink:

#390 Comment 4:
I have looked at the discrepancies between the keys and their English localization.
Since it is clean-up time, some keys should be updated. And since it is better for everybody that I do not modify the java code :wink:, here is the list.  

Based on the master branch,
In  **Menu_en.properties**:

```
Find_And_Fix=     should be Find_and_Fix=
Save_selected_as_plain_BibTeX_...= should be Save_selected_as_plain_BibTeX...=
```

In  **JabRef_en.properties**:

```
Add_Group= should be Add_group=
Add_Subgroup= should be Add_subgroup=
An_Exception_ocurred_while_accessing_'%0'= should be An_Exception_occurred_while_accessing_'%0'=
An_SAXException_ocurred_while_parsing_'%0'\:= should be An_SAXException_occurred_while_parsing_'%0'\:=
Available_fields= should be Allowed_BibTeX_fields=
                                                    (based on the context of use)
Bibtex_entry_creation= should be BibTeX_entry_creation=
Cite_selected_entries= should be Cite_selected_entries_between_parenthesis=
                                                    (based on the context of use)
Cut_pr= should be Cut=
Database_\:= should be Database\:=
Edit_file_link= should be Save_file=
                                                    (based on the context of use)
Error_occured_when_parsing_entry= should be Error_occurred_when_parsing_entry=
Import_Metadata_from:= should be Import_metadata_from\:=
Input= should be= Work options= 
                                                    (based on the context of use)
Messages_and_Hints= should be Hints_and_Warnings=
                                                    (based on the context of use)
no_base-bibtex-file_specified= should be no_base-BibTeX-file_specified=
No_exceptions_have_ocurred.= should be No_exceptions_have_occurred.=
Password_:= should be Password:=
Remove_all_subgroups= should be Remove_subgroups=
                                                    (based on the context of use)
Reset_file_type_definitons= should be Reset_file_type_definitions=
Server_Hostname_:= should be Server_Hostname\:=
Server_Type_:= should be Server_Type\:=
Show_optional_fields= should be Show_optional_field=
Sort_Automatically= should be Sort_automatically=
Sort_fields_in_alphabeta_order_(as_ver_2.10)= should be Sort_fields_in_alphabetic_order_(as_ver_2.10)=
Sort_fields_in_old_fasion_(as_ver_2.9.2)= should be Sort_fields_in_old_fashion_(as_ver_2.9.2)=
Starts_the_import_of_bibtex_entries.= should be Starts_the_import_of_BibTeX_entries.=
Text_Input_Area= should be paste_text_here=
To_set_up,_go_to_<B>Tools_->_Manage_journal_abbreviations</B>= should be To_set_up,_go_to_<B>Options_->_Manage_journal_abbreviations</B>=
Unable_to_connect_to_freecite_online_service.= should be Unable_to_connect_to_FreeCite_online_service.=
Username_:= should be Username:=
```

#390 Comment 5:
Thanks for another few hours work :wink: 

#390 Comment 6:
@koppor should be blamed: he is the one pointing me to this thread... :wink: 

#390 Comment 7:
Phewww... should be ready to merge...

#390 Comment 8:
Ahh one thing to be discussed... maybe @mlep can help here:

Should we resort the files somehow? 

All already translated keys to top - all untranslated to the end? 

Sorting translated/untranslated alphabetically?

#390 Comment 9:
I vote for alphabetically in total. 

Why:
- scripts can easily add entries
- no manual moving of untranslated into the translated section when translating
- version control can show nice diffs for adding translation texts

Btw. nice work here!

#390 Comment 10:
In general I agree, but depending on the workflow of the translaters it might be useful to seperate all untranslated items from the ones already translated... 

#390 Comment 11:
I would propose to merge this quickly, as it affects a lot of different lines in the code. And the effort should not be wasted. 

#390 Comment 12:
:+1: 

I'll add the remaining German translations directly in `master`.

#390 Comment 13:
To make things easier, when empty keys are added to a file, they are added at the end. This way the translators find them easily (not everybody is using Popeye). 
And, from time to time (typically near the release of a new version), we sort them alphabetically.

#390 Comment 14:
:+1: 

I would propose to group the entries by usage in the UI, so that related entries are appearing next to each other. I know that this is more difficult to maintain, but more easy for the translators.

I think [popeye](https://github.com/JabRef/popeye) can sort the columns according to empty entries.

#390 Comment 15:
Mhmm... I will not group those ~1500 lines by UI usage :wink:

#390 Comment 16:
Some comments about sorting the keys.
Sorting alphabetically could be ok, provided that untraslated keys are grouped at the end of the file. Using popeye could be helpful in locating untraslated keys, but once translated it's difficult to came back to the just translated key, maybe to reword or reuse part of the translation. Furthermore, in some cases I put comments above or below the translated keys (e.g. when the context is not clear): when sorting alphabetically the comments will be lost. BTW, could it be possible to put comments at the end of the line?
So, I second the proposal from @mlep: sorting alphabetically but keep untraslated keys at the end of the file.
Even better would be grouping by usage, but I understand the difficulty to mantain. 

--------------------------------------------------------------
#387 Comment 1:
LGTM :+1:

Regarding the resetting of the preferences. "reset" is the same as "delete"? Offering resetting is nice, but not mandatory for the PR. We can do that later. For now, I'd prefer https://github.com/koppor/jabref/issues/47.

--------------------------------------------------------------
#381 Comment 1:
Don't you think people will freak out when the firewall asks if the program should accept connections? (Or whatever happens?) Anyway, could be worth a try.

#381 Comment 2:
Could not reproduce that the firewall prompts for accepting connections when used locally. I did this by removing all firewall exclusions and then started jabref twice with remote connections enabled on Windows 10. Can someone else please confirm this on their machine?

#381 Comment 3:
Sorry, I didn't test it. I just assumed that there might be some issues with this and that the "general public" gets confused and scared.

#381 Comment 4:
:+1: 

#381 Comment 5:
Hm, this effectively disables running multiple JabRef versions simultaneously. 

#381 Comment 6:
That'S the intention: I really dislike that JabRef opens multiple Windows. We have tabs for multiple databases. I don't get the use case for multiple windows.

I know that we should have both somehow to mirror Firefox behavior. However, I don't assume that so many database files are opened in parallel. I know that Internet Explorer long refused to offer tabs, because the multiple window concept was more appealing.

--------------------------------------------------------------
#380 Comment 1:
When in biblatex mode, could you add `month = {<monthnumber>}` instead of `bibtexFormat`. See [biblatex](https://www.ctan.org/pkg/biblatex) manual on page 20. Text for "month" field.

#380 Comment 2:
Good point! Should be sorted out now.

#380 Comment 3:
At first, I thought this is a really nice feature. But then I thought about it a little bit and found the following issues
- what if someone uses JabRef without bibtex or biblatex, e.g., by using the open office bridge? 
- what if someone used the month field wrongly, e.g., just putting the month in their local language?

But the really problematic thing is that a dropdown field is used. And when someone has put in a value that is not recognized by the dropdown field (old value is invalid, e.g., "März" instead of March), then this value is lost upon save and not shown in the UI. Because the dropdown while either show nothing or the first value of the dropdown. And with this information, the user is not able to fix this problem as he cannot easily see the previous value and he will not be notified that there even is a previous value. 

Because of this, I vote for an improvement or exclusion of this feature. 

#380 Comment 4:
The dropdown is displayed additionally to the text field. One can input plain text instead of using the drop down. I tried to input "test123" and it saved perfectly. I don't see why this should cause troubles.

![grabbed_20151122-153012](https://cloud.githubusercontent.com/assets/1366654/11324287/f27229da-912d-11e5-9594-9830b0b2dd54.png)

#380 Comment 5:
Ah ok. I just have looked at the code and misunderstood things - and I did not try the feature out... sorry.

--------------------------------------------------------------
#379 Comment 1:
Regarding `#`: It might be that JabRef diverges from BibTeX's format. [BaseFrameHelp](http://jabref.sourceforge.net/help/BaseFrameHelp.php) states that `#` is used to reference strings. Is that BibTeX standard? [StringEditorHelp](http://jabref.sourceforge.net/help/StringEditorHelp.php) also states that "this syntax is specific for JabRef, and differs slightly from the bibtex notation that is produced when you save your database". Do you have time to investigate further?

Regarding your commits: The first two (a3a4b57 and 408a1a0) seem to be merge commits but also contain modifications by you. This is very hard to review. Proposal: make a _single_ clean commit based on master.
1. (already done, just for the record) Ensure that `Jabref/master` is up to date. GitHub doc: https://help.github.com/articles/syncing-a-fork/
2. ensure that the latest `master` is merged into `parser`
3. `git checkout parser`
4. `git reset master`
5. commit - preferably using `git gui` to really investigate the differences.
6. commit and `git push -f`

Result: **one** commit in branch `parser` showing the difference to master.

#379 Comment 2:
The sharp symbol is used differently in Bibtex and Jabref. In Jabref it is used to mark a string which shouldn't be enclosed in {} (or ""). In Bibtex it is used as a separator between enclosed text and strings. So I think it very much makes sense that `date = {1-4~} # nov` ends up as `1-4~#nov#` (which is what is shown in the JabRef entry editor, right?).

#379 Comment 3:
To clarify further (if needed) `1-4~#nov#` in JabRef means that `1-4~` will be enclosed and `nov`is a string alias/key. In the Bibtex file it means `{1-4~}` or `"1-4~"` and `nov` concatenated with `#` inbetween.

#379 Comment 4:
@koppor I remember to have analyzed the regex used by `BibtexParser.isRecognizedFormat` and that I recognized some shortcomings (as stated above). While trying to fix them, I realized that there is no simple check to recognize a valid bibtex file without actually parsing it. And since the `isRecognizedFormat` actually tried to match a regex on every single line (in the worst case), I thought that it is an easier way to just parse every bib file and then state the errors. (Moreover, the method was used on import but not while opening a database). But if you prefer, I can reinsert it.

Yes, in bibtex the sharp symbol is used to concatenate strings as @oscargus explained. See also for example http://www.bibtex.org/Format/ . Apparently the current state works, so I just wanted to go safe and double-check if this is really the expected behavior. Thanks @oscargus for the clarifying words.

Ps: Yeah, I will clean up the git history... 

#379 Comment 5:
Regarding the `#` issue: I would propose that we remove bibtex incompatible behavior. Is it possible that we exchange JabRef's character "`#`" to backtick "`"?

#379 Comment 6:
For me, it's OK to remove it. Just a comment in the code to this discussion. Maybe directly to your explanation above.

#379 Comment 7:
I do not think it is incompatible, just confusing. :-) Using `#...#` to directly define strings in JabRef is quite well established and most of the time it is used "stand-alone", so only the string in the field (journal and month abbreviations). Somehow, to me, it only becomes a problem once things are concatenated and one tries to compare the bibtex field with the JabRef field and realize that the same character is used.

Backtick is anyway a bad choice since it is a combining accent (on most(?) keyboard layouts) and therefore require two key presses. (GitHub is really annoying me in that respect.)

#379 Comment 8:
The (German) keyboard layout [neo](http://www.neo-layout.org/) offers the backtick with a single key (and a modifier key).  :stuck_out_tongue_winking_eye:

I don't quite get the usage of `#...#`. Is it also written as such in the bib file or is it just a rendering thing in JabRef? I can live with the latter even though I find it confusing if the `bib` differs from the UI.

#379 Comment 9:
Just rendering in JabRef. Try writing `#a#` in a field, it will show up as `a` (not `{a}`) in the bibtex source. Write `a#b#` and it will be `{a} # b`.

#379 Comment 10:
Could I please get feedback about the last two open points (`GUIGlobals.META_FLAG` and the tests about newlines). Thanks!

#379 Comment 11:
> Made EntryType an abstract class which implements the Comparable interface and overwrites equals(Object other). Thus new expressions like entry.getType() == BibtexEntryTypes.ARTICLE return the expected result.

The second sentence is wrong. == never calls equals or hashCode or comparable, it simply checks if both reference the same instance in the heap. Because of this, I would not make the EntryType an abstract class. 

> Remove BibtexParser.isRecognizedFormat since the code has quite a few shortcomings (whitespace before @ or closing brackets on new lines were a problem) and the execution was quite slow for big files

To reiterate an inline comment: we aim to detect whether a file is a bibtex or biblatex file. This code can help with this. We should not delete it, but improve it. 

> Related to the previous point, the GUIGlobals.META_FLAG flags should be moved to another place (they are not GUI, but parser/writer logic). What would be an appropriate new home for them?

Agreed. Maybe a new class called JabRefDataFormat? It is currently used in MetaData and BibtexParser. I think we should assemble all read/write logic in a single place instead of distributing it over so many classes, as the MetaData class itself does not need to know how it can persist its structure. But I am open for other ideas regarding placing and naming. 

>  There are 4 tests at the end of the file starting with test. These tests fail (without the @Ignore tag) but I'm not sure what they test and what would be the expected behavior in these cases.

I think we should investigate. 2022983 refers to an issue number, somehow. Maybe to an old sourceforge number?

#379 Comment 12:
SourceForge changed global numbering of bugs to local numbering of bugs years ago. But they have redirects. Just use https://sourceforge.net/p/jabref/bugs/2022983/ as URL and it will redirect to https://sourceforge.net/p/jabref/bugs/679/.

#379 Comment 13:
Ok, I was wrong about the `==`. What I actually meant was that the line `Assert.assertEquals(BibtexEntryTypes.ARTICLE, e.getType());` works as expected. 

I liked the idea of a new `JabRefDataFormat` class and moved the meta flag there.

@koppor thanks for finding the old bug report! It says that the problem was multiple spaces in file names (which would explain the naming of the tests). However, I think this bug is not fixed: if you assign a file with multiple spaces to a entry. After saving and reopening the database, the file is no longer found. Somehow the spaces are lost during parsing, which is exactly why the tests fail.

From my side, this can be merged in. If you have no further remarks I would rebase on master.

#379 Comment 14:
Ok, should I rebase (and thus probably delete some of your code comments)?

#379 Comment 15:
Can you please rebase this on master?

#379 Comment 16:
Rebased. 

It should be noted that I reversed a changed made in #469. Namely, Bibtexentry types are just compared by name (so a bibtex type with the same name as a biblatex type is considered the same). Otherwise all the new tests would break in biblatex mode as then getType() returns the biblatex type. Furher discussion of this point at #495.

#379 Comment 17:
I removed all the code overwriting the `equals()` method for entry types. Thus now the PR just contains the added tests.From my side, this is ready to be merged in.

#379 Comment 18:
The issue with the isRecognizedFormat still persists. Will discuss in developer call how to proceed there. We need to check what effects will this have to set it to true. Maybe the current method is good enough?

#379 Comment 19:
@tobiasdiez Please rebase. Will merge this right away then. We decided in the dev call that returning `true` is OK for import format detection. 

#379 Comment 20:
Rebased, but the findByDOI fails (probably a problem with the CI server not the code...)

--------------------------------------------------------------
#378 Comment 1:
@JabRef/developers Please checkout this branch and run `GVKParserTest` locally. I updated from `jdk1.8.0_51` to `jdk1.8.0_66` and all tests fail here. The field ordering changed. The fields are not sorted as provided at https://github.com/JabRef/jabref/blob/gvk_fetcher/src/test/resources/net/sf/jabref/importer/fetcher/gvk_result_for_797485368.bib. Does this relate to https://github.com/koppor/jabref/issues/34 somehow?

#378 Comment 2:
Looks good to me. 

#378 Comment 3:
GVK search doesn't work for me, using JabRef 3.0 on Windows 7. After starting a search I get no response. The progress bar goes on and on and on until I hit "cancel". Other searches (DOAJ, DBLP, IEEE) work. The used search terms work in GVK itself, too.

#378 Comment 4:
Works fine for me... 

What are the search terms you have used? 
Are there any messages in the error console (Help -> Show Error Console)?

#378 Comment 5:
Search term examples: "marketing", "Papula,Lothar",  "Papula, Lothar", "wlan", "mtbf"

Output of Error Console:

Exception in thread "JabRef CachedThreadPool" java.lang.NullPointerException: Every BibtexEntry must have a type.
    at java.util.Objects.requireNonNull(Unknown Source)
    at net.sf.jabref.model.entry.BibtexEntry.setType(BibtexEntry.java:125)
    at net.sf.jabref.model.entry.BibtexEntry.<init>(BibtexEntry.java:76)
    at net.sf.jabref.importer.fetcher.GVKParser.parseEntry(GVKParser.java:367)
    at net.sf.jabref.importer.fetcher.GVKParser.parseEntries(GVKParser.java:63)
    at net.sf.jabref.importer.fetcher.GVKParser.parseEntries(GVKParser.java:40)
    at net.sf.jabref.importer.fetcher.GVKFetcher.fetchGVK(GVKFetcher.java:170)
    at net.sf.jabref.importer.fetcher.GVKFetcher.processQuery(GVKFetcher.java:111)
    at net.sf.jabref.importer.fetcher.GeneralFetcher$4.run(GeneralFetcher.java:288)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)

#378 Comment 6:
Reproducible. Is caused by unknown entry types inside the fetcher.

#378 Comment 7:
Please continue discussion in #447.

#378 Comment 8:
@hauschke Workaround: Switch to BibLaTeX mode

--------------------------------------------------------------
#377 Comment 1:
Looks OK. The only thing is `TextAnalyzer`. I think, this could need a more thorough check: It seems that this class can be used to parse plain text references. Would be an offline alternative to the FreeCite parsing. [PRRV](https://sourceforge.net/projects/jabrefprrvp/) also seems to do parse text citations. I don't know, what's better, but I would not delete `TextAnalyzer` without having investigated alternative code. I understand that the current code is used nowhere. However, I would more like to put it into production than deleting it. For instance, the code could help at "Paste entries from plain text" when no internet connection is available.

#377 Comment 2:
OK! I'll figure out how to recover that file. Seemed like a waste to delete it, but since it wasn't used... If you have any feedback on https://github.com/koppor/jabref/issues/25 this is another case where we could throw away fully usable, non-trivial code, which is currently unused (except for a constructor, which in turn is unused).

#377 Comment 3:
I think, following steps should do the trick:
1. `git rebase -i "HEAD^"`
2. in the opened text file, replace `pick` by `edit`, save and close
3.  `git gui`
4. select the file in the lower left box 
5. choose "Commit" -> "Unstage from Commit"
6. select the file in the top box
7. "Commit" -> "Revert changes", accept
8. close git gui (no commit necessary)
9. `git rebase --continue`

#377 Comment 4:
Great, that worked! (Except that I my GUI was in Swedish...) Thanks! 

#377 Comment 5:
Change to English: set environment variable `LANG` to `en`. I personally don't like the German translation of `git gui`.

--------------------------------------------------------------
#375 Comment 1:
I think this is valuable. If you have time and improve it a little bit plus rebase on master, I think we can merge this in. 

#375 Comment 2:
I'll do that. Maybe tonight, but cannot promise anything. There are indeed only minor things. I'll wait with the KeyWords class, but I think it makes sense in the long term to have a separate class to deal with this. There may also eventually be something similar for linking entries, but I will need to think more carefully about that...

#375 Comment 3:
Might be good to go now.

--------------------------------------------------------------
#374 Comment 1:
Hm , this looks really convenient :smile: 
But I'm not sure if we should hard code such proprietary stuff into our application.
I was also concerned about the IEEEtranBSTCTL entry type as it really is just a hack of the style and no entry.
I think the entry type is a good compromise.
I don't know what the @JabRef/developers think about this.

#374 Comment 2:
Yes, why not :dolphin:? I'm not sure whether there are other `bst`s outside having even more different types. Think, we covered [biblatex](https://www.ctan.org/pkg/biblatex) and the "ordinary" BibTeX types completely. A quick search of `bst` did not reveal more types. I think, even [custombib](https://www.ctan.org/pkg/custom-bib) does not support more types. If there is more, users can do [custom entry types](http://jabref.sourceforge.net/help/CustomEntriesHelp.php).

#374 Comment 3:
This code does not introduce complexity, but the gain is also small as this supports only a very minor edge case. I am undecided whether we should introduce this. 

#374 Comment 4:
I :heart: software which simplifies life. Therefore, this improvement should really come in :boom:. A good support for the IEEE style could be advertised at [the IEEEtran homepage](http://www.michaelshell.org/tex/ieeetran/) or even at the [IEEE page "Manuscript Templates for Conference Proceedings](http://www.ieee.org/conferences_events/conferences/publishing/templates.html). :dragon:

#374 Comment 5:
@koppor: Your comments look as if you should be careful with your caffeine / theine intake.

#374 Comment 6:
:dash: - I'm addicted to [Baola](http://baobab.org/BAOLA-sparkling-drink) and [neuronade](http://neuronade.com/), formally known as [nijoz](http://www.spiegel.de/unispiegel/wunderbar/nijoz-neuronade-gehirndoping-aus-der-brausetuete-a-964584.html). :herb::innocent: 

![Image of Baola](http://baobab.org/bilder/produkte/normal/BAOLA-Erfrischungsgetraenk.jpg)
![Image of Neuronade](http://neuronade.com/wp-content/uploads/2015/09/Neuronade-Logo-2015-e1442053558296.jpg)

#374 Comment 7:
I agree that it is a minor thing. The thing is that using IEEEtranBSTCTL is actually really convenient, but non-obvious that it could/should be used. My main argument would be that the code overhead is really small and the yes/no boxes will only show up in this particular case, otherwise people will be unaware of it. (But probably quite happy when they get aware of it.)

(Originally support for this type was introduced as JabRef tended to remove/change unknown entry types, but apparently that was changed yesterday.)

I have an issue (https://github.com/koppor/jabref/issues/21) that aims at providing a special interface for this type, to simplify it even further. However, at the moment I think this is probably enough.

I'll fix the suggestion by @koppor and hope for the best.

#374 Comment 8:
I've changed the code according to @koppor 's suggestions.

Regarding @stefan-kolb 's(?) comment that this should reside in IEEETranEntryTypes (can't find the comment now) I'm not really sure. All other field properties are defined in BibtexFields, and while it may make sense to define these things in BibtexEntryTypes, BiblatexEntryTypes, and so on, I cannot really see how it can be done in a convenient way (this could for example include field checkers, which are defined by the fields rather than the IntegrityCheck looking for specific fields). So for now, I keep this similar to the rest of the fields.

#374 Comment 9:
I also remember stefan-kolb's comment, but can't find it, too. Let's merge this and adapt it if we find the comment :innocent: 

#374 Comment 10:
I think I (sort of) considered what he could have meant in the final cleanup. Still, one could think about how the field properties and checkers should be defined. In the entry type definitions or in the EntryEditor/IntegrityChecker. It becomes a bit more interesting when we introduce all the new entry types.

For example, filedyear in patent: should IntegrityChecker have a list of all possible year-related fields or should IEEETranEntryTypes set some flag that filedyear is a year field?

--------------------------------------------------------------
#373 Comment 1:
Nice. A test for the FileHistory class would be even nicer. :)

#373 Comment 2:
Looks good to me. 

#373 Comment 3:
@koppor Probably you should check the latest PR. I think you are commenting on an old commit. Now most methods are one or two lines...

#373 Comment 4:
Sorry for that! Following minor things remain. <s>I merge and hack the first one.</s>
- <s>`List` instead of `LinkedList` (line 27)</s> - `addFirst` is not offered by `List`.
- `TODO for next PR` :innocent: 

#373 Comment 5:
No problems! I appreciate the feedback from you and @simonharrer ! (and the rest as well, of course.)

--------------------------------------------------------------
#371 Comment 1:
Sounds good :+1: 

#371 Comment 2:
I must admit that I thought I found AssertUtil in the non-test source tree, but now I realize it wasn't the case... Anyway, I guess it is slightly better situated in the new location.

--------------------------------------------------------------
#370 Comment 1:
What about replacing all string representation of encodings by [`Charset`](https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html)? Then on export `getEncoding.name()` returns the correct description "UTF-8".

#370 Comment 2:
Sounds like a good idea! We should give it a try.

#370 Comment 3:
@tobiasdiez great advice! `Charset` already implements the correct encoding name translation. All we have to do is through it into `Charset` and read it our again and we can skip the hack:

``` java
pr.setEncoding(Charset.forName(reader.getEncoding()).name());
```

#370 Comment 4:
Please merge master: We did a mayor overhaul of the OpenDatabaseAction: Deleted code etc. 

#370 Comment 5:
@lenhard Glad this was helpful. I think the code would even further improve if the ParserResult (and maybe some other classes) doesn't hold the encoding as a string but as a `Charset`, i.e. `public Charset getEncoding()` and similarly for `setEncoding`.

#370 Comment 6:
@koppor Done!
@tobiasdiez Sure. But I think this should be part of a new PR, since this PR just attempts to fix one particular issue.

--------------------------------------------------------------
--------------------------------------------------------------
#362 Comment 1:
In the future, create a separate branch for each improvement. Now, you cannot use your `master` branch any more, because all commits to `master` go into this pull request. See https://github.com/JabRef/jabref/pull/306#issuecomment-155374056 for a similar case.

#362 Comment 2:
I think, @bartsch-dev posted an http://web.archive.org link to a test file for the Biblioscape importer to @bruehldev.

#362 Comment 3:
I wrote the link in the Biblioscapeimportertest.java file in the first
lines and pushed it.

#362 Comment 4:
@bruehldev i don't see your comment in the first lines. Please check where you pushed them. Please try to address our comments (if possible).

#362 Comment 5:
Follow up is #504

--------------------------------------------------------------
#361 Comment 1:
The current code does not allow for putting the encoding manually in the header, maybe with empty lines at the beginning or some comment lines above. Not sure if that will be an issue.

#361 Comment 2:
Maybe more test cases are required to test encoding headers different from `UTF-8`. Like your `CP1252`.

#361 Comment 3:
@koppor I changed the "defaultEncoding" in the test file not for JabRef. Since all the test bib files have UTF-8 encoding in the header, this was the easiest way to check if the specified encoding was correctly determined (otherwise defaultEncoding == encoding of files, so even if inferring the encoding from the header fails, the tests pass). I fear I don't understand your second comment. 

#361 Comment 4:
What bothers me is that you changed the defaultEncoding variable for all existing tests instead of creating a new test where the defaultEncoding would be wrong, and the real encoding of the file must be selected. 

#361 Comment 5:
I updated the code accordingly. By the way, somebody with greater knowledge about the code structure should move the `loadDatabase()` method to another place. The `OpenDatabaseAction` class contains quite a lot of gui stuff while this method is purely logic.

#361 Comment 6:
Good idea. This should probably be done. Can you open an issue for this, please?

#361 Comment 7:
Looks good to me. 

One minor thing: maybe make the files and strings static so that they are not recreated for each test. 

#361 Comment 8:
:+1: 

--------------------------------------------------------------
#359 Comment 1:
:+1: 

--------------------------------------------------------------
#357 Comment 1:
@simonharrer Feedback implemented.

#357 Comment 2:
:+1: looks good to me. 

--------------------------------------------------------------
#356 Comment 1:
It seems like my commits have some issues, but I don't get the problem. Can someone help me out?

#356 Comment 2:
I do not think it is your commit that causes problems. For some reason the SpringerLinkFetch test fails.

#356 Comment 3:
@mairdl I think, it would make sense if you squash all commits into a single commit and to a `git push -f`. You could also do a `git rebase master` as described at https://github.com/JabRef/jabref/pull/379#issuecomment-158661990. After having done that, the rest by CircleCI should not fail any more.

#356 Comment 4:
LGTM :+1: 
(can be merged in if the small comments are fixed)

#356 Comment 5:
:+1: with the condition that the comments above are implemented (see assert equals of BibEntry)

#356 Comment 6:
Thats fine with me since I got lost in that discussion. I'll implement that in the evening or tomorrow. 

#356 Comment 7:
I reverted the branch but the parallel changes on the assert method did not get merged, since my last commit made it private again. Before investing more time in git stuff I just made it public again. 

#356 Comment 8:
@Braunch: To reduce the mess, just rebase on recent master and squash everything into one commit. A description is available at https://github.com/JabRef/jabref/wiki/Tools#rebase-everything-as-one-commit-on-master

#356 Comment 9:
Is it ready for a merge now?

#356 Comment 10:
`testCompleteBibtexEntryOnJournalPaperImport` still has one not addressed comment. Please rename the commit to something more meaning full like `Test for InspecImporter`. Other than that :+1: for merge.

#356 Comment 11:
@Braunch: I don't know, what you did, but all commits seem to be lost. Please use `gitk` to investigate and ask someone else (@mairdl?) if he still has a local copy. He should NOT delete his local code. If all of you deleted it, you have to use the hard man git tooling and look for: `git reflog` is your friend. See for example at http://gitready.com/advanced/2009/01/17/restoring-lost-commits.html.

#356 Comment 12:
@koppor I think Chris(braunch) squashed all commits into 1

#356 Comment 13:
@mairdl It looks like follows on my site:

![grabbed_20160318-231122](https://cloud.githubusercontent.com/assets/1366654/13893450/bde8a1d4-ed5e-11e5-8115-8f2b7fde6e09.png)

10ffb1c is a<s>n empty commit</s> huge commit  and 3e4c73c shows a removal of empty lines. Where is the single commit you are talking about?

#356 Comment 14:
@koppor Now i understand what you mean, my bad. I'll contact @Braunch.

#356 Comment 15:
I hope my last commit fixed that. Otherwise I am doing something wrong with git.

#356 Comment 16:
Tests are failing, please investigate.

#356 Comment 17:
Now the tests are working 

#356 Comment 18:
@tobiasdiez @koppor  @simonharrer Are you happy enough with it now? We can squash the commits via the merge button.

#356 Comment 19:
Interesting that the code coverage decreases according to codecov by 0.85% in a PR which aims to increase test coverage. Very strange. 

#356 Comment 20:
I think it is because the code in this PR is based on an older code base, so fewer tests included and the comparison is against the (at the time of the push) current master. Push again and it would decrease > 2%...

--------------------------------------------------------------
#355 Comment 1:
Regarding the test with installer. Please consult https://github.com/JabRef/jabref#release-process

But looks good :+1: 

#355 Comment 2:
:+1: we are currently in the process of moving to install4j installers. This should be integrated there as well. 

#355 Comment 3:
Why make it gray? The picture is purple, should it be purple?!

#355 Comment 4:
Strange... on my system it is more gray than purple but on the screenshot it is more purple. Anyway, I took the main color in the jabref icon and made it a little bit lighter.

#355 Comment 5:
What about taking the exact same color, to free the 'R' as Windows does with their icons? 

#355 Comment 6:
I oriented myself on MS Office.
![untitled](https://cloud.githubusercontent.com/assets/5037600/11217275/caa43b32-8d4f-11e5-9a27-b812b937c0b4.png)

But the same color actually looks better, in my opinion.
![untitled2](https://cloud.githubusercontent.com/assets/5037600/11217471/b86c9274-8d50-11e5-8932-1ffed77500eb.png)

If somebody could give me the exact color code (#4F5F8F seems to be slightly off), then I will update the PR.

#355 Comment 7:
So what about this one? 
Color: #4F5F8F
Personally I'd prefer it that way, looks more stylish.

![image](https://cloud.githubusercontent.com/assets/2141507/11217506/ecd8acdc-8d50-11e5-816a-2ecf854a9d4c.png)

#355 Comment 8:
You were faster :smile: 
Good work :+1:

#355 Comment 9:
:+1: 

#355 Comment 10:
@JabRef/developers Does this work for any of you? Not working for me in the current setup.

#355 Comment 11:
What does "not working" mean? Here, there is a difference with and without `JabRef.VisualElementsManifest.xml` in `C:\Program Files\jabref`. I do the following command to let Windows know that I played around with the manifest file:

```
(ls "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\JabRef\JabRef.lnk").lastwritetime = get-date
```

System: Windows 8.1 Pro, JabRef 64bit.

What I don't see is a background with one color, I see a background with some shading. However, the color changes depended of the presence or absence of `JabRef.VisualElementsManifest.xml`.

with:
![w](https://cloud.githubusercontent.com/assets/1366654/11385159/598ed228-9316-11e5-9e23-4f33a1d93c98.png)

without:
![wo](https://cloud.githubusercontent.com/assets/1366654/11385150/449f2a3e-9316-11e5-8f65-6d8b23ebf65d.png)

#355 Comment 12:
I don't see a custom background at all. I'm on Windows 10.

#355 Comment 13:
So it is currently a manual step, which should be integrated in the new install4j process (if possible)?

#355 Comment 14:
No, no manual Step, install4j works perfectly. Only for debugging issues there are manual steps required.

#355 Comment 15:
Okay... does not work for me. After installing and selecting "Pin to 'Start'" i only see the an uncolored background on Win10 (but I'm not sure whether if have changed some Windows prefs regarding this feature as I do not use the start tiles for other "Apps")

#355 Comment 16:
Hm, install4j should put the file in the folder with the exe file. 

#355 Comment 17:
It is placed inside the jabref folder but has no effect for me. Maybe Matthias and I have overidden anything in Windows? Does it work for you Simon?

#355 Comment 18:
Windows 10 Pro Version 1511 Build 10586.11 displays purple background.

![grabbed_20151125-114228](https://cloud.githubusercontent.com/assets/1366654/11395184/e9e07158-9369-11e5-8354-e21fc3f01f9a.png)

Steps taken: Download 64 bit installer from http://builds.jabref.org/master/. Install. Open Windows Startmenu (additional step since I use [Classic Shell](http://www.classicshell.net/)). Right click on JabRef (should be there), "Pin to Start menu" (or similar). At the right side: Scroll down and see all apps. The last app is "JabRef" and displayed as shown above.

#355 Comment 19:
I think the problem happens if you already had Jabref installed on the computer and install the new version in the same folder. The problem is then that the shortcut pointing to the executable (usually `C:\ProgramData\Microsoft\Windows\Start Menu\Programs\JabRef\JabRef.lnk`)
is not updated. But Windows just reads the manifest file if this shortcut changes. Does it work if you invoke the command posted by @koppor in https://github.com/JabRef/jabref/pull/355#issuecomment-159449481?

#355 Comment 20:
The command does not work for me.

```
(ls "C:\Users\Stefan\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\JabRef\JabRef.lnk").lastwritetime = get-date
".lastwritetime" kann syntaktisch an dieser Stelle nicht verarbeitet werden.
```

I'll try to update Windows to the latest Patch release and see if it works, at least it does for Simon.

#355 Comment 21:
Works on my machine (tm) ;-)

I uninstalled all JabRef versions before. 

#355 Comment 22:
(not working after removing all jabref versions and a new clean install in another for win10 build 10240)

#355 Comment 23:
@stefan-kolb did you tried it in a powershell or usual command shell? should work as powershell.
@matthiasgeiger uninstalling Jabref might not work because the lnk file is not removed during uninstall?

#355 Comment 24:
I've installed it in a new start menu "folder" so this should not be the problem.

#355 Comment 25:
Works now after update to Win10 1511 Build 10586 :+1: 

#355 Comment 26:
@stefan-kolb Tooltip: [ConEmu](https://conemu.github.io/). Dropdown right of the "+": "Shells" -> "PowerShell"

#355 Comment 27:
Ok, so it is probably the update that fixes the problem. The other solutions do not work for me.

#355 Comment 28:
Maybe related: https://github.com/koppor/jabref/issues/57

--------------------------------------------------------------
#354 Comment 1:
Please use rebase --interactive to squash the commits with messages like `""` or `see last commit`.

#354 Comment 2:
@boceckts `java.lang.StringIndexOutOfBoundsException: String index out of range: -1` during test. Please fix :innocent:

#354 Comment 3:
@boceckts Please squash the whole branch history into one commit. The magic command is `git rebase master`. See https://github.com/JabRef/jabref/pull/379#issuecomment-158661990 for a longer discussion.

#354 Comment 4:
Commits sind nun zu einem Commit zusammengefasst, index out of bounds exception gefixt und die Testmethoden sind nun leicht abgeändert zu AssertEquals.

#354 Comment 5:
Commit looks good :+1:, but the test fail. Could you please investigate?

#354 Comment 6:
Welche Tests genau? Wenn ich die Klasse MedlinePlainImporterTest.java als JUnit Test ausführe, laufen alle Test bei mir ohne Fehler..

#354 Comment 7:
Siehst du hier beim Pull-Request die Meldung "All checks have failed"? Screenshot:

![grabbed_20151122-153227](https://cloud.githubusercontent.com/assets/1366654/11324302/3f069240-912e-11e5-9e03-bb9782a14bd0.png)

Du kannst dann auf "Details" bei "ci/circleci" klicken. Dort steht dann "junit failures: testIsRecognizedFormat - in net.sf.jabref.importer.fileformat.MedlinePlainImporterTest". Hier kannst du auf "more info" klicken. Da steht dann

```
java.lang.NullPointerException
    at java.io.Reader.<init>(Reader.java:78)
    at java.io.InputStreamReader.<init>(InputStreamReader.java:97)
    at net.sf.jabref.importer.ImportFormatReader.getReaderDefaultEncoding(ImportFormatReader.java:352)
    at net.sf.jabref.importer.fileformat.MedlinePlainImporter.isRecognizedFormat(MedlinePlainImporter.java:69)
    at net.sf.jabref.importer.fileformat.MedlinePlainImporterTest.testIsRecognizedFormat(MedlinePlainImporterTest.java:50)
```

#354 Comment 8:
@simonharrer changed it to !contains.
@koppor Seems like one character in the name of the test file was a different case than what I wrote in the java test class.

#354 Comment 9:
Your test file looks good. Seems to cover seven different entry types with different fields and different settings (doi, multine line titles). However, your test only treats two of them. Why don't you check all test entries?

You could check the result via prepared bibtex files. See https://github.com/JabRef/jabref/blob/6293b4d8ee9409afb25b402643a31904b56e33a0/src/test/java/net/sf/jabref/importer/fetcher/GVKParserTest.java. We are trying to get https://github.com/JabRef/jabref/pull/378 through so that others can use these test improvements, too.

#354 Comment 10:
@boceckts We are ready to go from our side. Please have a look at [GVKParserTest.java](https://github.com/JabRef/jabref/blob/1332070cb62a8990567831a10f026d31acfc1738/src/test/java/net/sf/jabref/importer/fetcher/GVKParserTest.java).

#354 Comment 11:
The Unit Test failes because multiple comments are being imported with a newline separator. However in the bibtex source the new lines are being ommitted therefore the assertion fails when testing with a import file using multiple comments such as "MedlinePlainImporterTest2.txt vs MedlinePlainImporterTestBib2.bib".

#354 Comment 12:
Now using try-with-resource whenever I use the ResourceAsStream methode.
Renamed methodes and removed some comments. 
Added all test files to a list to check for recognized format.
Extracted test logic from testImportSingleEntriesInSingleFiles to separate it from the actual testing data.

#354 Comment 13:
Good work :+1: . 
Some tests are hard to read since they compare a medline import with a bib import. So it may be hard to see why they fail.

Better test specific features in small test cases (and maybe leave one big "integration" test). For example, (using pseudo-code)

``` java
public importParsesDoi() {
  Stream stream = StreamFromString("PMID-22664220" + "\n" + "AID - doi:10.1016/j.cpr.2005.02.002");
  List<Entries> entries = Import(stream);

  BibEntry expected = new BibEntry();
  expected.setField("doi", "10.1016/j.cpr.2005.02.002"); 
  Assert(entries = Collections.singletonList(expected));
}
```

could replace the test `4`. See also https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases and http://stackoverflow.com/questions/782178/how-do-i-convert-a-string-to-an-inputstream-in-java.

#354 Comment 14:
Your test fail, because `equals` is not working on the canonical representation. We are afraid that changing `equals` (and `hashCode`) leads to unwanted side effects.

Therefore, please add a method to `BibtexEntryAssert` for comparing Lists (please use the List interface, not the ArrayList implementation). There, you can use `assertEquals(BibEntry shouldBeEntry, BibEntry entry)` for comparing the entries themselves.

#354 Comment 15:
Please also try to get rid of the warnings by eclipse. I think try-with-resources is the solution, isn't it?

![grabbed_20151223-182645](https://cloud.githubusercontent.com/assets/1366654/11981432/be4ad002-a9a2-11e5-8d88-f1bc099d4a3b.png)

#354 Comment 16:
#579 

#354 Comment 17:
Added more test methodes to cover more if conditions and included the suggestions of the comments.

#354 Comment 18:
Looks very good to me! I just pointed out some smaller things. If they are fixed, this can be merged in (from my point of view).

#354 Comment 19:
Thank you for the comments, I removed the unnecessary NotEquals and added tests for the remaining entries in the test file.

#354 Comment 20:
[Coverage 98.65%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/MedlinePlainImporter.java?ref=6d09b72bd7cd97b6ab537905fe6142748f87ce8c). I assume that covering [line 126](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/MedlinePlainImporter.java?ref=6d09b72bd7cd97b6ab537905fe6142748f87ce8c#l-126) was difficult, because there is no entry where the fourth character of the second line is NOT `-`. Or similar :smiley: 

--------------------------------------------------------------
--------------------------------------------------------------
#352 Comment 1:
`@Other` is used in many bib files. Including my personal `bib` file. We have to offer a migration path. Currently, the entry editor does not open, because of `java.util.Objects.requireNonNull` (see below). One cannot quit JabRef after this error.

With [othertype.bib](https://github.com/JabRef/jabref/blob/94712c96b0069734b33c8ecff4b293c052bf2186/src/test/resources/testbib/othertype.bib), I get the error message `unknown entry type: other:test`. Did the parsing of the lines changed? Did the parsing change? Why is the colon (`:`) not recognized any more as separator?

In general: JabRef should still be able to handle arbitrary custom types. Even if not configured in the bib file. I heard from some persons that they manage contacts and we cannot forsee all customized types. To test that, I added [reallyunknowntype.bib](https://github.com/JabRef/jabref/blob/94712c96b0069734b33c8ecff4b293c052bf2186/src/test/resources/testbib/reallyunknowntype.bib).

```
Exception in thread "AWT-EventQueue-0" java.lang.ExceptionInInitializerError
    at net.sf.jabref.gui.entryeditor.EntryEditor.updateSource(EntryEditor.java:571)
    at net.sf.jabref.gui.entryeditor.EntryEditor.setupSourcePanel(EntryEditor.java:555)
    at net.sf.jabref.gui.entryeditor.EntryEditor.<init>(EntryEditor.java:194)
    at net.sf.jabref.gui.BasePanel.getEntryEditor(BasePanel.java:2075)
    at net.sf.jabref.gui.MainTableSelectionListener.editSignalled(MainTableSelectionListener.java:241)
    at net.sf.jabref.gui.MainTableSelectionListener.mouseClicked(MainTableSelectionListener.java:284)
    at java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:270)
    at java.awt.Component.processMouseEvent(Component.java:6528)
    at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
    at java.awt.Component.processEvent(Component.java:6290)
    at java.awt.Container.processEvent(Container.java:2234)
    at java.awt.Component.dispatchEventImpl(Component.java:4881)
    at java.awt.Container.dispatchEventImpl(Container.java:2292)
    at java.awt.Component.dispatchEvent(Component.java:4703)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
    at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4542)
    at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
    at java.awt.Container.dispatchEventImpl(Container.java:2278)
    at java.awt.Window.dispatchEventImpl(Window.java:2750)
    at java.awt.Component.dispatchEvent(Component.java:4703)
    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
    at java.awt.EventQueue.access$500(EventQueue.java:97)
    at java.awt.EventQueue$3.run(EventQueue.java:709)
    at java.awt.EventQueue$3.run(EventQueue.java:703)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
    at java.awt.EventQueue$4.run(EventQueue.java:731)
    at java.awt.EventQueue$4.run(EventQueue.java:729)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
    at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
    at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
Caused by: java.lang.NullPointerException
    at java.util.Objects.requireNonNull(Objects.java:203)
    at java.util.Arrays$ArrayList.<init>(Arrays.java:3813)
    at java.util.Arrays.asList(Arrays.java:3800)
    at net.sf.jabref.model.entry.CustomEntryType.getRequiredFields(CustomEntryType.java:91)
    at net.sf.jabref.model.entry.EntryType.getRequiredFieldsFlat(EntryType.java:44)
    at net.sf.jabref.bibtex.BibtexEntryWriter.<clinit>(BibtexEntryWriter.java:72)
    ... 38 more
```

#352 Comment 2:
The closing seems to be prevented by

```
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
        at net.sf.jabref.model.entry.CustomEntryType.getRequiredFieldsString(CustomEntryType.java:112)
        at net.sf.jabref.JabRefPreferences.storeCustomEntryType(JabRefPreferences.java:1338)
        at net.sf.jabref.logic.CustomEntryTypesManager.saveCustomEntryTypes(CustomEntryTypesManager.java:44)
        at net.sf.jabref.gui.JabRefFrame.tearDownJabRef(JabRefFrame.java:812)
        at net.sf.jabref.gui.JabRefFrame.quit(JabRefFrame.java:917)
        at net.sf.jabref.gui.JabRefFrame$CloseAction.actionPerformed(JabRefFrame.java:1759)
        at net.sf.jabref.gui.JabRefFrame$3.windowClosing(JabRefFrame.java:563)
```

#352 Comment 3:
Is the closing bug fixed with e725a5ee2f4a9e33ac616d38c2104f75aa545655 ?

#352 Comment 4:
I'll take a look after the lecture. Thanks for the Testing!

#352 Comment 5:
Saving works now.

#352 Comment 6:
I don't get any exceptions. Except that you get the message that the type is unknown which is expected. What should change in your opinion? I also got these messages before the current change.
Only Other gets the same message know as it must be changed by the user to a known type or set as custom type. I can also migrate it to 'Misc' automatically if prefered.

#352 Comment 7:
Fixed in `master` :tiger2: :+1: 

--------------------------------------------------------------
#351 Comment 1:
#349 

--------------------------------------------------------------
#347 Comment 1:
:+1: 

Please add a changelog entry.

--------------------------------------------------------------
#343 Comment 1:
Is still [WIP] or can this be merged?

#343 Comment 2:
Not sure. I think it works, but since it is a threading issue, it is hard to know for sure. However, using a naïve approach doesn't work (I've tried that earlier), so something is working better now. It is probably more likely that some tables are thread-safe where it isn't required.

#343 Comment 3:
Hm, can you rebase this? I think then we should merge this as it improves the code still. 

#343 Comment 4:
Rebased.

--------------------------------------------------------------
#342 Comment 1:
The symmetry between parser and writer is realized through the class `FieldContentParser`, which is used during parsing (`BibtexParser`) and writing (`LatexFieldFormatter`). Both of these in turn use `StringUtil`. We agreed to leave field content alone from now on and that includes wrapping from my point of view.

#342 Comment 2:
OK! So even fixing a bug in the wrapping? :-)

#342 Comment 3:
It looks like that. good job ;-)

#342 Comment 4:
findEncodingForStrings is removed in #396 

Hm, I would suggest to create test cases for getParts and try to get an idea what this method does by the test case results. From what I understand it does a kind of substring which is also affected by curly braces. 

#342 Comment 5:
Done. Still tests for two methods are missing, but I think it makes sense to merge it as I do not understand what getParts does and findEncodingsForStrings is not used ( @tobiasdiez is this method of interest in relation to #396 ? Now that you have a fresh view of the encoding.).

#342 Comment 6:
OK! I assume that #396 will be merged eventually. Yes, I agree that it theoretically seems like a feasible way to go. :-) Well, apart from a few rebase commands, I guess that there's no obvious drawback in not merging this PR now.

#342 Comment 7:
I'll have a go at getParts eventually. Seems like we had thread-unsafe commenting at the end. :-)

#342 Comment 8:
Ok, just open up a new PR for this. 

--------------------------------------------------------------
--------------------------------------------------------------
#339 Comment 1:
I have no idea if that code is correct, but the line break I blame on Gmail...

--------------------------------------------------------------
#338 Comment 1:
:+1:

--------------------------------------------------------------
#337 Comment 1:
:+1:

#337 Comment 2:
This might destroy biblatex support. As EntryTypes.getType may return a biblatex version if biblatex is activated. 

#337 Comment 3:
OK! So then it should be the other way around? Never use BibtexEntryTypes.*?

#337 Comment 4:
Hm, would make sense, yes. But there may be exceptions, probably. We should investigate this. 

#337 Comment 5:
Damn it, we should really investigate it. We really like constants and it is common practice to use constants instead of strings. In the meantime, a comment should be added to BibtexEntryTypes.\* to never use them in the code (and reference this pull request). :innocent: 

--------------------------------------------------------------
#336 Comment 1:
I get the thing about localization. But I do not get why you inlined the static method.

#336 Comment 2:
To me it seemed easier from a maintenance perspective to inline it instead of having static functions in a different file that is only used once anyway. Maybe one should to the same with toggleAbbreviation in fact, since it is only used once a few lines up.

#336 Comment 3:
I think the `toggleAbbreviation` method should be moved to the logic where it can be tested easily. 

#336 Comment 4:
That's an even better idea! :+1: I'll do that.

#336 Comment 5:
I ended up inlining the function, but adding a test for the particular call used there.

#336 Comment 6:
I reintroduced the toggleAbbreviation method as requested, but at the same time found some other unused methods which I removed.

--------------------------------------------------------------
#335 Comment 1:
Can you please rebase on current master so that I can merge this in?

#335 Comment 2:
I will merge this in. But you missed a few tests as the code coverage shows for the StringUtil class. 

#335 Comment 3:
Yes, but they will show later (I moved the tests twice in different PRs...).

#335 Comment 4:
The missing test (makeBibtexExtension) is because I removed that function and made use of getCorrectFileName instead (where ever that change is...).

#335 Comment 5:
Oh, yeah. You mean that it is not fully tested? Correct! I only added tests for those methods I played with (and I don't know how to get that coverage information without pushing and creating a PR...).

#335 Comment 6:
[EclEmma](http://eclemma.org/) seems to be the tool of choice for code coverage.

--------------------------------------------------------------
#334 Comment 1:
To get nicer formatting (I recognize the annoying behaviour): mark a suitable part of the code (like the whole function call in this case, i.e. rows 403-407) and press Shift+Ctrl+F.

#334 Comment 2:
Hm, the issue with this is that we now use the same icon for opening an existing database and opening a folder. Because of this, we did not add the folder icon to the open folder action as we only want to use unique icons per action. 

#334 Comment 3:
What about instead using [library-plus](https://materialdesignicons.com/icon/library-plus) and [library-books](https://materialdesignicons.com/icon/library-books) for new and open database, respectively? They would also harmonize nicely with the [Save all icon](https://materialdesignicons.com/icon/content-save-all). 

#334 Comment 4:
As the icon is no longer used in the IconBar (where there was a 1*1px "missing icon" before) I do not think we need an icon for "open folder" which would only be used in the right-click menu and menu bar.

--------------------------------------------------------------
#332 Comment 1:
Implements all improvements from #104 

Please try this out. 

#332 Comment 2:
Looks good. Is there any volunteer to update the help?

I assume that a green field indicates that something has been found and a red field that something is missing. Could we choose some softer colors? The contrast to the other colors in JabRef is too high.

## Advanced Search

I assume, that [advanced search](http://jabref.sourceforge.net/help/SearchHelp.php), e.g., `author=kopp`,  stops working with this patch?

### Examples

#### Red box, but results displayed

![grabbed_20151120-165700](https://cloud.githubusercontent.com/assets/1366654/11304305/baa00022-8fa7-11e5-8a9f-380b47ea430f.png). 

I cannot click on anything here

#### Green box, no result displayed

![grabbed_20151120-165506](https://cloud.githubusercontent.com/assets/1366654/11304259/7d8a5642-8fa7-11e5-9028-ebae5defc7d3.png)

#332 Comment 3:
I don't know whether the following exception has to do something with that - at each key press:

```
Exception in thread "AWT-EventQueue-0" javax.swing.text.StateInvariantError: GlyphView: Stale view: javax.swing.text.BadLocationException: Length must be
positive
        at javax.swing.text.GlyphView.getText(GlyphView.java:137)
```

```
WARNING: Warning: could not get message translation for "This search contains entries in which any field contains the term <b>%0</b>" for locale en
```

```
Exception in thread "AWT-EventQueue-0" java.lang.ArrayIndexOutOfBoundsException
```

#332 Comment 4:
The Exception is something else. Relates to #184.

![grabbed_20151120-172717](https://cloud.githubusercontent.com/assets/1366654/11305256/13527cf0-8fac-11e5-9381-d0e4e7b59c25.png)

#332 Comment 5:
- Advanced search should work. I can try this out again. 

#332 Comment 6:
This PR is open for the final review. Then, it can be merged in. 

#332 Comment 7:
Documentation has still to be improved? Or is there still an "incremental search"?

"Clear search" works not as intended: After removing the text from the search box "open results in new window" still shows the results. (This button is also never disabled - which might be sensible in case no search has been performed yet).

Already asked before: Toggle search is removed intentionally?

Apart from this: Still awesome :wink:

#332 Comment 8:
Toggle search is removed by intent, as it is annoying and hidden from the user. 

Documentation is now updated. Thanks for the info!

Hm, handling the open results in new window and global search could be improved, yes. Makes sense to enable/disable them appropriately. Good idea!

#332 Comment 9:
LGTM :+1: 

#332 Comment 10:
Looks good here. Minor issues are follows. If they are hard to fix, just let it go through and fix afterwards.

#332 Comment 11:
Fixed all existing issues. Please test it again as this uncovers a lot of issues that are related to the search in other components....

#332 Comment 12:
:+1: 

#332 Comment 13:
Works good on my site. I don't use groups :innocent:.

The only thing I noticed is an issue with the key/value-search

I expected

```
kopp leymann
```

and 

```
author=kopp author=leymann
```

To reveal the same results.

However, I have to add an `and` inbetween:

```
author=koppor and author=leymann
```

Maybe, that's a really different issue.

#332 Comment 14:
And this is not introduced by this PR ;-)

#332 Comment 15:
This is why you have to read the HELP file ;) Btw. when hovering over the search query, you get a description what will be searched for. 

#332 Comment 16:
I like the indication of the advanced search. Possibly, we could use a really different icon? I think, we only use colors for changing the background, not the font itself. If we decide to really change the color, it should be more like black or something. Red is a signal color and is typically used to indicate that something is wrong. See also the highlighting in the box if nothing is found.

Quick rendering proposal: Mirror the glass so that the circle is shown at the upper right corner. Do not change the color at all. Or use one of following icons: `torch`,  `eye`

#332 Comment 17:
Changing
- background looks awful
- color black: is hard to see the change
- mirror is too hard to see
- other icon: torch I could not find in the material design icons. Eye is already used elsewhere. 

Hence, I leave it at red for the moment.

#332 Comment 18:
Permalinks did not work here.  Damn it, I can't find the torch here again. Will try later on again and send a screenshot ;)

#332 Comment 19:
The name I meant was "flashlight". Sorry.

If that doesn't work out, please try color rgb(102, 255, 255)

![grabbed_20151126-181814](https://cloud.githubusercontent.com/assets/1366654/11428287/266a3f7c-946a-11e5-9539-7ce2408dbb49.png)

#332 Comment 20:
Your suggested color would also be ok. I do not like it when the icon changes. This is confusing. 

#332 Comment 21:
I think we can merge this in. The problem by combining group selection and search is a much bigger effort which at the moment there is not time for. The current improvements should be good enough. Search is on my machine (i7, 8gb ram, ssd) very very fast, even with a 6800-entry-bibtex-file it is still usable with only short wait times. The problem is not the search itself, but the GUI updates associated with it. This may be optimized later on if an issue arises.

#332 Comment 22:
LGTM :+1: 

--------------------------------------------------------------
#331 Comment 1:
:+1:

I assume you long thought about whether the prefix `net.sf.jabref.util` is necessary in some cases. :8ball: 

#331 Comment 2:
:+1: - should be merged quickly as so much files are affected... 

Will definetly produce conflicts with #329 :stuck_out_tongue_winking_eye: 

--------------------------------------------------------------
#330 Comment 1:
@oscargus Tooltip for screenshots: [GrabNDrop](http://www.scyv.de/gnd/).

--------------------------------------------------------------
#329 Comment 1:
Rebased, but will have to double-check more carefully to see that everything worked out as expected.

#329 Comment 2:
Can you please rebase so that this can be merged in?

#329 Comment 3:
I'll do that after #335 is merged as that will probably create new conflicts...

#329 Comment 4:
As far as I can tell all tests are still here.

--------------------------------------------------------------
#327 Comment 1:
:+1: 

--------------------------------------------------------------
#322 Comment 1:
:+1: 

--------------------------------------------------------------
#321 Comment 1:
Could you add some real EndNote entries? Currently, there seem only test entries to be tested, but no real-life entries.

### Minor comments
- Is `txt` really the extension for EndNote entries?
- You don't need to make separate commits for each method you test. **Before** issuing the pull request, you can do `git rebase -i`, merge the commits and push afterwards. Or a `git push -f` if you already pushed the commits into your repository.
- Please use present tense in the commit messages. See http://chris.beams.io/posts/git-commit/, 
  https://git-scm.com/book/ch5-2.html, and 
  [the discussion on stackoverflow](http://stackoverflow.com/questions/3580013/should-i-use-past-or-present-tense-in-git-commit-messages)

#321 Comment 2:
Please rebase on master so that circleci and codecov will show correct results.

#321 Comment 3:
We discovered, that EndNote is also capable of importing `RIS` format and that both IEEExplore and Springer export `RIS` as "EndNote". (See for example http://link.springer.com/chapter/10.1007/978-3-662-44879-3_8 and http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4578545).

EndNote imports both: The RISFormat and the EndNote format (es exported by JabRef). I vote for removing the EndNote importer and focus on the RisImporter.

Furthermore, I vote for removing the EndNote exporter and focus on testing the RISExporter.

#321 Comment 4:
I started a [discussion at jabref-users](https://sourceforge.net/p/jabref/mailman/message/34627267/). It seems that [users want to keep support for the old format](https://sourceforge.net/p/jabref/mailman/jabref-users/thread/c01c8e1e734a0bc12db55495a8ca0e80%40mail.swcp.com/#msg34627364).

#321 Comment 5:
Just leave it as it is right now. :)

#321 Comment 6:
OK for me even though some minor issues remain: https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/EndnoteImporter.java?ref=6fb8635b36920b760e3e003d169e4a4fb78626ef - line 194, line 227.

#321 Comment 7:
Fixed the mentioned issues and did some more refactoring.

#321 Comment 8:
The tests with small test files should be tested by inline strings as described here: https://github.com/JabRef/jabref/pull/354#issuecomment-166359106

#321 Comment 9:
I agree with using direct equals tests than using bib files. However, tests with full bib files should not vanish.

We told the students to have a look at [GVKParserTest.java](https://github.com/JabRef/jabref/blob/master/src/test/java/net/sf/jabref/importer/fetcher/GVKParserTest.java) and do similar testing. :innocent: 

#321 Comment 10:
Coverage [97.90%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/EndnoteImporter.java?ref=824f4672ccb57cd053a2d480d420d661eb4f270a). I don't see more test cases to turn the the yellow lines into green ones.

If the test cases and test files get speaking names, I'm fine with it. @tobiasdiez Do you agree?

#321 Comment 11:
Yes, looks good to me :+1: 
Just a minor point: add assertions that the bibentry-type is correct.

#321 Comment 12:
I used `be0` because it's the first item in the list, changed it to `be`.

The `Endnote.book.example.enw` was exported from a Library, I removed the space.

--------------------------------------------------------------
#320 Comment 1:
Looks good. Why not naming `JabRefException` `LocalizedExcpetion` to be closer to the intended usage of the class?

#320 Comment 2:
Since exceptions shouldn't be used to control the flow of control (eg [here](http://programmers.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why) or [here](http://stackoverflow.com/questions/729379/why-not-use-exceptions-as-regular-flow-of-control)) the problem of localizing exceptions shouldn't occur in the first place. As far as I understood, exceptions are there to be reported to us as bugs :). 

My rule of thumb is:
- Exceptions = where failure is not expected as an option
- (Boolean) return values = where failure might be an expected result

For example, the [SaveException](https://github.com/oscargus/jabref/blob/master/src/main/java/net/sf/jabref/exporter/SaveException.java) shouldn't derive from exception. And instead of throwing a SaveException it should be the return value of the save method (and then better renamed to SaveReturnValue). 

This is at least what I'm used from other programming languages / landscapes. 

#320 Comment 3:
@tobiasdiez I don't agree. 
The bottom line of the discussions you linked above is that "`Exceptions` should not be used to control the **normal** flow" (e.g. using an `Exception` to leave a loop). 
**But**, `Exceptions` are explicitly allowed and should be used for _exceptional cases_. 

_(Sticking stricly to "do not use exception to control the flow" paradigm would render_ **_all**_ _checked exceptions obsolete as each handling of checked exceptions steers the control flow in a program...)_

Regarding your example: When a file is saved in JabRef this should work in almost each case - an error during saving is an _exception_, which most often occurs due to an underlying `IOException`. Therefore, it is reasonable to throw an `Exception` to indicate the _exceptional termination_ of a save method.

The `SaveExceptions` are used at various places in the code: In `void` methods, in methods returning a `SaveSession`, ... - so it is not possible to define one `SaveResult` which is returned from the methods which may produce an error during saving. Even if it would be possible (for example by providing a generic saveMethod which is used throughout the code - you still have to do some "exception handling": What if the method returns `false` or a String `"Saving failed due to an IOException`? The result has to be checked by the method caller and must be handled somehow. If saving was not possible, all the things which rely on a saved file cannot be executed - so you depend on constructs like this:

``` java
if (saveResult.isSuccess()) { 
  // ... do the work and return something useful
} else {
  // return null? 
  // return another "wrapper object" containting not the intended result but a flag indicating failure?
}
```

And this goes all the way through the code back to the origininal call in the UI. 

I think using a `throws` declaration at the methods and catching the exception late in the UI is the more appropriate way (especially if you see the "application logic" as an isolated part of the system which is used by the UI only through API calls).

At the end [something to read what shows why I have problems with the current way of exception handling in the JabRef code](https://today.java.net/article/2006/04/04/exception-handling-antipatterns). I think we can find more than one instance of each "anti pattern" in our code base :wink:

@koppor This should be the "root JabRef exception" replacing the usage of raw `Exception`which must be caught by a `catch (Exception e)` :cry:  It also should be extended by other more specific exceptions such as the  `SaveException`.
So the ability to provide a localized message is only one aspect of the `JabRefException`.

#320 Comment 4:
@matthiasgeiger 
Ok, you are right in many points. Nonetheless, I think it is not a good idea to directly output exceptions to the user (except for debugging). Exceptions is something for cases where Jabref shouldn't be able to recover from the failure. If the save operation goes wrong, then the code should catch the corresponding exception and write a message to the user. In pseudocode:

```
    handle(NoSpaceException)
       show(you have not enough space on your disk to save)
    handle(FileExistsException)
       show(there exists already a file with the same name. do you want to overwrite?)
    handle(OtherException)
       error(I don't know why the save operation didn't work. please report this bug to the developers)
```

Yes, it is more work then a simple `show(exceptionMessage)` but in my opinion the better way to go. 

#320 Comment 5:
We are actually doing exactly this?!

The SaveException wraps the techncial reason and is thrown to the UI where the non-technical message and the causing `Exception` are logged - and the user is informed by a dialog only showing the non-technical, localized message.

#320 Comment 6:
If there are no objections regarding the concept I'll merge this PR - further improvements can either be made en bloc in another PR or on-the-fly when working on other issues.

#320 Comment 7:
LGTM :+1: 

#320 Comment 8:
Hmpf... there was a comment regarding translation in one of the commits which is no longer accessible due to the rebase - However, this is obsolete as Oscar has already changed this in `master`.

--------------------------------------------------------------
#319 Comment 1:
`and` is AFAIK the bibtex default. The idea of the `NameListNormalizer` is to convert pasted data from other sources into bibtex format. This allows for copying and pasting data from a literate section and improving it without much manual work. Alternative approach: Use the build-in "Prase with freecite" feature.

#319 Comment 2:
In LabelPatternUtil (e.g., in `net.sf.jabref.logic.labelPattern.LabelPatternUtil.authEtal(String, String, String)`), methods from `net.sf.jabref.model.entry.AuthorList` are used. I think, you search for `net.sf.jabref.model.entry.AuthorList.getAuthorsFirstFirstAnds()` or `net.sf.jabref.model.entry.AuthorList.getAuthorsLastFirstAnds(false)`.

#319 Comment 3:
Existing problems will be tricky to solve. Postponing to a later stage.

--------------------------------------------------------------
#317 Comment 1:
Just for info: IEEEtran.bst has a control field to handle this. Now, not everyone writes papers to be published by IEEE...

While I agree that three authors should be the limit, it may make sense to make this configurable (except that there may be lots of configurations).

--------------------------------------------------------------
#311 Comment 1:
What do you mean with (sort of)? Can you add a CHANGELOG entry, please? Why is OpenOffice now renamed to OpenOffice.org?

We have changed a lot of defaults from JabRef 2 to JabRef 3. Users upgrading will not get these new defaults. But I do not have an idea how to solve this with minimal effort.

#311 Comment 2:
Yes, forgot about CHANGELOG.

Sort of: it should be able to find all versions installed. However, as JabRef and OO/LO must both run in the same JRE and that OO only (easily) supports 32-bit JREs, it will be that JabRef running in a 64-bit JRE will not connect to OO, while one may still select it. There are some things related to that which I have not figured out, such as how to figure out if JabRef is running in a 32-bit or 64-bit JRE or if the 32-bit or 64-bit version of LibreOffice is installed (on Windows one can make an educated guess based on the directory it is installed in).

I should erase my JabRef preferences for a bit more testing, so it may be a good idea to put this on hold for a while.

#311 Comment 3:
Oh yeah, I was wrong about OpenOffice.org, that was the previous name. I guess OpenOffice works better than Apache OpenOffice.

Related: should we bother distinguishing between OO and LO or just use OO for both? Considering the 32-bit issue, it is easier to connect to LO at the moment (if you run a 64-bit JRE only).

#311 Comment 4:
One more thing... I should look at it more carefully to be 100% sure, but using a manual connection will update using the new "default" paths (which are present both in the Preferences and in the connection code).

This will by the way probably break using earlier versions of OO/LO. Should one keep support for those as well? Seems like more people will upgrade to OO 4-series or LO 5-series anyway (and it works with some earlier versions, not just sure when the change was done).

#311 Comment 5:
I would also lean towards loosing support for old versions of OO. We don't have the man power to maintain backwards compatibility. :fire:

#311 Comment 6:
What is the status of this PR? Ready for 3.0 or to be postponed for 3.1?

#311 Comment 7:
Apart from changing the OpenOffice.org naming, I think it is at least better than the current master version. Primarily since it looks for the correct paths. I will probably not have time until Thursday or Friday to sort these things out though, but I believe it makes sense to include it in 3.0.

#311 Comment 8:
@oscargus Could you add a CHANGELOG.md entry? Think, you can do it within seconds - hopefully.

Then, I'll let this through!

#311 Comment 9:
Plus can you rebase or merge so that the tests may run successfully on circleci?

#311 Comment 10:
I've done the changes (including rebase), but lack of internet access right
now.

Will commit this evening.

#311 Comment 11:
I've updated but the test fails on what looks like a totally unrelated issue.

#311 Comment 12:
@simonharrer Problem with the install4j task?!

#311 Comment 13:
Should be fixed in master now. 

--------------------------------------------------------------
#310 Comment 1:
Can you please have a look at https://ondemand.coverity.com/jobs/uj1ep5hu8118n66eqa61rs5ofc/results/f/4/8/9/620b152144b541f48db807c7eed9.html which indicates issues in the test class. Please close the resources with a try-with-resources block. 

Regarding the `testIsRecognizedFormat`, I think it would be better if there are two lists, one for the accepted and one for the rejected files which can then be iterated and check in a for loop each. This would allow to add all the other files from the other importers that will trickle in over the next month. 

#310 Comment 2:
Am I assuming right that you mean something like that?

``` java
    @Test
    public void testIsRecognizedFormatAccept() throws IOException {
        CopacImporter importer = new CopacImporter();
            LinkedList<String> list = new LinkedList<>();
            list.add("CopacImporterTest1.txt");
            list.add("CopacImporterTest2.txt");

            for (String str : list) {
                try (InputStream is = CopacImporterTest.class.getResourceAsStream(str)) {
                    Assert.assertTrue(importer.isRecognizedFormat(is));
                    is.close();
                }
            }
    }
```

#310 Comment 3:
Almost :) As you are using try-with-resources, the line `is.close()` is no longer needed. The try block takes care of that automatically.

#310 Comment 4:
I read somewhere that it is still recommended (by many) to keep the close(), primarily for readability/understanding I guess. Now, I haven't followed it that carefully though...

#310 Comment 5:
Do you have a link for that @oscargus ?

#310 Comment 6:
Maybe not. I tried to find it, but to no avail. I found something which might be what I referred to, but it didn't actually say exactly that. Rather, I found many examples without the close().

#310 Comment 7:
I just realized that a few fixes I implemented when going through coverty warnings this morning (see 5b66b9868e4c7ca97361ba44c2f2f89131828765) conflict with this PR. I fixed the resource leaks and the remainder of this PR is still valuable.

@zellerdev To get it into master, please merge master into your branch. Sorry for the inconvenience, I'll keep my hands off the importers from now.

#310 Comment 8:
I noticed that line 53 reads

```
Globals.prefs.put("defaultEncoding", "UTF8");
```

Could you please change that string to `UTF-8` and check if your test cases still work? - JabRef changed the strings to be more conforming to usual strings - see #155.

Furthermore, could you follow the pattern "If you modify preference, use following pattern:" stated at https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases?

#310 Comment 9:
I'd like to add that you should not refer to preferences via their string key, but rather via their static variable in `JabRefPreferences`, e.g.:

```
Globals.prefs.put(JabRefPreferences.DEFAULT_ENCODING, "UTF-8");
```

#310 Comment 10:
I think, it's easier for reviewing if you squash the whole commits into one commit. `git reset master` is your friend.

#310 Comment 11:
Coverage [100%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/CopacImporter.java?ref=f3bfd6edcb39b55ce4ef9bd3198112fbe5777abe). :+1:

While wondering why the import source is so small, I checked the header comment http://copac.jisc.ac.uk/faq/#format to check whether there are more fields. There, I found "How do I import Copac records in reference management software? (e.g. Endnote/Zotero)" which contains "If you use Reference Manager you can use the RIS filter to import Copac records."

@obraliar @mairdl @zellerdev @ayanai1 Could you please check whether RIS is really equal to Copac? Can you read each other's code and test cases and report back here?

In case they are equal, I would propose to merge the importer code.

#310 Comment 12:
@zellerdev I can't see what you changed why in your commit. In this case, it would have been better to add another commit. Then, I can easily see, what you changed after my approval. Now, I have to review the whole commit again and I don't know what I have been approved and what not.

#310 Comment 13:
I apologize for that. Because of the problems building the project I had  in the past this was a routine for me. I just included the suggestions you made on the top of the class.

#310 Comment 14:
After research we can say that the both file-formats are syntactically not the same. There are a lot of tags (like: SE, PU, PD, NT, HL, ...) in Copac which are note parsable with RISImporter. E.g. `NT` (Copac) <-> `N1` (RIS), which means 'notes'. On closer inspection at the line 163 in `CopacImporter.java` (else condition) it becomes clear, that Copac accepts all kind of tags which differ from those listed above. That's probably the reason why the code looks short. But I think that they could be merged anyway with the fact that the new importer will be able to parse a mix of Copac and RIS.

#310 Comment 15:
My feeling is that you inspected the code and not the format specifications and concrete results of the exporters linked somewhere from http://copac.jisc.ac.uk/faq/#format. Possibly, it is implicitly clear that the RIS format is completely covered? At #505, I don't see any testfiles of http://copac.jisc.ac.uk.

Is there any Copac format specification? Is there any RIS format specification? My feeling is that tags such as `SE` etc. should be treatable by RIS as well, but I'm not sure.

#310 Comment 16:
Updated CopacImporterTest so all checks are succesful and removed conflicts with base branch.

#310 Comment 17:
This PR is open since several months now. At this time I used the old method.
I now updated it to use BibtexEntryAssert.

#310 Comment 18:
@koppor WDYT?

#310 Comment 19:
Can you please rebase on current master?

#310 Comment 20:
Coverage [98,48%](https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/CopacImporter.java?ref=ede533d62b4ebcf69f2615605622e4dcf0e239c)

[![LGTM](http://lgtm.in/p/KT0PIyUZp)](http://lgtm.in/i/KT0PIyUZp)

#310 Comment 21:
Using java.nio for getTestFiles(), removed InspecSilverPlatter and replaced it with another Inspec file which is not recognized by copac and added a new method for BibtexEntryAssert using InputStreams and an ImportFormat as parameter to generate to lists to compare. I hope I solved everything as expected.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#307 Comment 1:
Can you please remove the `DONE` tags in your comments? 

#307 Comment 2:
DONE :sunglasses:

#307 Comment 3:
Sorry for being picky at the formatting. When reading the diff, the indents don't seem to be right. Besides the content of the code, we also want to have the formatting consistent to ease newcomers to read and understand the code.

Do you use Eclipse or IntelliJ? With the recent master, `gradlew cleanEclipse eclipse` should generate an Eclipse config with the right indent settings.

#307 Comment 4:
@koppor I totally agree about the formatting/indenting issues. However, the last time I run the formatter on the files resulted in many formatting changes. Is it possible that you run the formatter on the files after accepting the PR? Otherwise, my commit will be again screwed. 
Moreover, yes the searched text should be always highlighted. I don't understand the purpose of the preference. Maybe this should be done in a new PR.
The split button is necessary because both sides of the button are clickable whereas for a combobox only the right is clickable.

#307 Comment 5:
I will discuss that with the other developers. Meanwhile, I'd like to ask whether you are aware that [git gui](https://git-scm.com/docs/git-gui) can do line-based committing: Mark the lines to commit, right click, choose "stage lines to commit". Then, you can collect only the "important" modified lines. I would propose to do the formatting and create a new commit. Amending does not work as your PR already consists of two commits. You could use `git rebase -i` and then "fixup" the last two commits (DONE and formatting) into the first one. Afterwards, you have to do a `git push -f` ("force overwrite existing branch" in git gui). BTW: As far as I remember, it is possible to mark some lines in the code and then push "CTRL+SHIFT+f" to format. Then, the line-based commit is not necessary; only the merging of the three commits into one ("fixup" at `git rebase -i`).

#307 Comment 6:
I created a new branch `uisearchhistory` and merged the content there. We will continue working on the code there. Hope, that's OK!

--------------------------------------------------------------
#306 Comment 1:
Please have a look at https://codecov.io/github/JabRef/jabref/src/main/java/net/sf/jabref/importer/fileformat/CopacImporter.java?ref=1f46af69bd6c026af2392d9a7f045e332ae00ddc which shows a few cases that are missed by your tests.

#306 Comment 2:
Thanks for contributing! :wink:

Another quick tip: Please ensure that your git config includes a mail adress which is linked with github. This is a prerequisite for your contributions to show up in the github contributors list. See [GitHub Help](https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/) and [git manual](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup#Your-Identity).

#306 Comment 3:
May I ask you, why you have closed this pull request (PR)?

#306 Comment 4:
We had an internal email discussion. The issue of this PR is that it originates from the `master` branch and one cannot change the source branch. Therefore, a new PR will be opened with a more speaking source branch name.

#306 Comment 5:
Superseeded by #310.

--------------------------------------------------------------
#305 Comment 1:
Can you implement the `net.sf.jabref.logic.formatter.Formatter` interface in your `DatesCleanup` class, please? We try to implement all cleanup actions and formatters by using this interface. Have a look at the `PageNumbersFormatter` which is also part of a cleanup action as well.

#305 Comment 2:
I will change the tab to spaces. But what do you mean with the Formatter interface? As far as I can see, the PageNumberFormatter does not implement any interface. I copied the PageNumberFormatter file and changed the logic accordingly. 

#305 Comment 3:
In the master branch, the PageNumberFormatter does implement the Formatter interface. 

#305 Comment 4:
[net.sf.jabref.logic.formatter.bibtexfields.PageNumbersFormatter](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/logic/formatter/bibtexfields/PageNumbersFormatter.java)

#305 Comment 5:
Ok I understand now. Thanks.
But what is then the purpose of the class PageNumbersCleanup? It just delegates the work to the formatter class. In my opinion this does not provides any real simplification since the formatter can also be called directly in the CleanupAction class.
Should I implement a similar delegate mechanism for the date field or just remove PageNumbersCleanup?

#305 Comment 6:
We try to build a cleanup mechanism based on formatters. The idea is that we can register these actions in arbitrary places, e.g., onSave, onImport, onExport, cleanup, etc. and apply them to different fields. The formatters themself are independent of any logic and therefore easy to test. 

Try to replicate the same structure, please.

#305 Comment 7:
The Formatter interface is now used. However, this leads to the following problems with the code:
1. The DateCleanup class is now essentially a 1-1 copy of the PageNumberCleanup class.
2. The DateFormatter is not tested directly but only through the DateCleanup class. 

Essentially, the cleanup classes are now just passing through to the formatter and thereby create additional overhead. I would propose to remove one layer of abstraction using the following idea (would be a new PR):
Create a class `CleanupPreset` which collects all the possible formatters / cleanup operations and whatever the operation is activated or not. This class should also contain a method `cleanup(BibtexEntry)` which applies all the active formatters to the `BibtexEntry`. Maybe we also need a factory to create the (default) presets for save / import / export etc. Then on save (or cleanup or whatever) the appropriate preset will be created and then applied to the correct entries. I'm not sure whatever there should be an additional layer (i.e. move the cleanup method from the preset class to some commander) which keeps track of changes and allows them to be reverted.

#305 Comment 8:
I tried to address your large comment with several minor comments inline in the code. I hope you get the idea of what I am aiming for. 

#305 Comment 9:
@simonharrer Thanks for your feedback. I refactored the code around formatters and cleanup actions, while keeping your suggestions in mind. In the end, I opted in for encapsulating a lot of logic in the new `doFieldFormatterCleanup` method and `FieldFormatterCleanup` class. What do you think about these changes?

Ps: Why is there the LayoutFormatter interface as well as the Formatter interface?

#305 Comment 10:
Looks very nice now, your two now classes seems to a good approach to encapsulate this. Thank you. 

LayoutFormatter is currently used to define export formats. We did not want to touch this as we have not enough tests to catch all issues when chaging this. But the idea is to consolidate this at some point. 

#305 Comment 11:
Please rebase on master, so this can be merged in. 

#305 Comment 12:
Done!

--------------------------------------------------------------
--------------------------------------------------------------
#303 Comment 1:
What do you mean with "In GeneralFetcher, the key binding for "Fetch Medline" is defined, which seems a bit non-intuitive. Not sure how to proceed here."? Why is this non-intuitive?

#303 Comment 2:
I replaced the key binding in general fetcher with "Web search", which seems more intuitive. :-) What I meant was that it doesn't make sense that the GeneralFetcher defines the Fetch Medline shortcut nor defines "Fetch Medline" as the name for switching the search panel.

#303 Comment 3:
As the medline fetcher keybinding was a bug, can you report this in the CHANGELOG, please?

#303 Comment 4:
Can you please rebase this? Then it is good to be merged. Thank you!

--------------------------------------------------------------
#302 Comment 1:
:+1:

--------------------------------------------------------------
#301 Comment 1:
:+1: 

#301 Comment 2:
Great! Thanks.

#301 Comment 3:
So far, this is basically what I have checked for:
- lines with two instances of `lang` (i.e. possibly two calls to `Localization.lang()`)
- lines with two instances of `menuTitle` (i.e. possibly two calls to `Localization.menuTitle()`)
- lines with a call to `menuTitle` where the first character of the argument is not a `"`
- lines with a call to `lang` where the first character of the argument is not a `"`

For the final case, there are still some instances left. However, these require quite a bit of thinking/rewriting as far as I can tell.

From my perspective, I will not work further on this at the moment. However, if someone finds any false positives, please let me know, as I may have missed instances.

#301 Comment 4:
Oh, yeah. Some of the modifications are strictly not required. However, better safe than sorry, so now changing code somewhere is less likely to break a translation elsewhere.

#301 Comment 5:
I think, my [mail to jabref-devel on 2012-11-16](https://sourceforge.net/p/jabref/mailman/message/30107905/) provides some additional information that. Especially:

```
Possible obsolete key: delete_entry

JabRef-Source:
BasePanel.java:
(Globals.lang(bes.length > 1 ? "delete entries" : "delete entry"))

Solution
Move "?" to outside:
(bes.length > 1 ? Globals.lang("delete entries") : Globals.lang("delete entry"))
```

Maybe, that helps even today :sunflower: 

#301 Comment 6:
Hmm... sorry @oscargus  but I think we have a problem here.

Removing translations from the exceptions which are thrown is good - especially if the exception is only logged.
However, if the Exception message is shown at some point to the user it should be localized. 
In the current state of your PR this is not always ensured. One example:
In [BasePanel.java l. 1442](https://github.com/JabRef/jabref/pull/301/files#diff-92a266d65712209292ed1665e6bc2930R1442) the content of a `SaveException.java` is shown to the user in a MessageDialog. As the exception message was localized during creation (see for example [SaveException.java before your changes](https://github.com/oscargus/jabref/commit/c960b0afe11d34493878697a4a64c09c632914c1#diff-f513641de787eb1fe90118425120a4efL28)) the message was completely localized.
After your changes the `ex.getMessage()` part is always English.

@JabRef/developers I'm not sure what we should do here. Generally, I would propose: No localization at Exception instantiation - localization at the time a localized string is actually needed. 
However, this would result in calls like `Localization.lang(ex.getMessage())` which cannot be tracked by the Python script tracking all used/unused translation keys. 
Localizing only those exception message which are used somewhere else is also grap: Hard to find to out and even harder to ensure during the evolution of the code.
If we stay at the status quo: We have (potentially) bloated translation file which contains lots of keys which are shown never to the user (except he looks in the error console) and which may be harder for us the debug if a Japanese stack trace is pasted here. 

#301 Comment 7:
Good point. 

How often is the message of an exception displayed to the user in a translated way?

In principal, I prefer to translate at the latest point in time. Maybe instead of calling Localization.lang(ex.getMessage()) one could check the message and depending on its content return a specific translation. Something like

``` java
if("asdf asdfas".equals(ex.getMessage())) {
  return Localization.lang("super user-friendly text");
}
```

#301 Comment 8:
> How often is the message of an exception displayed to the user in a translated way?

Can't tell you. Analyzing this requires some time (SaveExceptions are shown only at one position (see above) - but created at 11 different positions in the code).
Another problem:
`throw new SaveException(Localization.lang("Save failed while committing changes") + ": " + ex2.getMessage());` - where ex2 refers to an `IOException` - your proposal would not work with such cases.

If a custom exception is shown to the user we might introduce another field "localizedMessage" which _can_ be created during instantiation and returned by a getter in the case a localized message is needed for the UI - but of course this does not help if an `Exception e` is caught. :scream_cat: 

#301 Comment 9:
I was sort of aware of this, but inspired by a comment from @koppor on my local version of the branch, I decided to still give it a go (I can revert it to the previous version if required).

I note that there is a method getLocalizedMessage() defined, which require that we subclass the Exception. However, if it is primarily SaveException in combination with BasePanel (which I think it is), it might be a viable alternative.

What I think @simonharrer meant (or at least a feasible solution) would be to do:
`throw new SaveException("Sfwcc:" + ex2.getMessage());` and then split based on `':'` or whatever is a good delimiter.

#301 Comment 10:
Please, no parsings with `:`. I would introduce new exceptions (inherit from SaveException) or use properties of SaveException for information of the filename. (Currently, I don't know whether Exceptions offer the possibility to add more information than using the message).

At the end, I would do `ex instanceof MyCoolException` or do an appropriate `catch` block (the more specific exceptions coming earlier) and inside the catch block outputting the user-friendly-text. Please, no `"asdf asdfas".equals(ex.getMessage())`. This is not typesafe and we are working hard to get rid from strings cluttered around the code. (See keybindings, preferences, ...)

#301 Comment 11:
Now, since `SaveException` is a JabRef exception, I plan to add a getLocalizedMessage() and set that with the translated string before throwing the exception. Hence, any dialog use getLocalizedMessage() and any logging getMessage(). OK?

I'll check carefully if there are other Exceptions that use this as well, but my impression is that with SaveException, we cover 90% at least (if not 100%).

#301 Comment 12:
`getlocalizedMessage()` sounds good! :dizzy:

#301 Comment 13:
For the future, please to try create small pull requests. It is hard to scan the changes of more than 300 lines. 

From my perspective, this PR looks good to be merged. 

#301 Comment 14:
I understand that. However, for this type of "brute-force" conversion PR, it is hard to keep them small. Shouldn't be that many more though. I've seen some translations that can be improved/replaced (using "%0" etc instead of concatenating strings), but this should cover quite a bit of it and most warnings are also removed now.

Moving GUIUtils back removed 15 or so files from the PR anyway. :-) 

#301 Comment 15:
I don't have much time to think it through - but I'm not convinced that the current solution regarding the localized messages in exception solves all problems... 

I hope I'll find some time this evening to explain my thougths.

#301 Comment 16:
@matthiasgeiger : You are correct. It doesn't solve all problems, but quite a bit of them. There are a handful or so exception messages which are not translated at the moment. However, I have not been able to fully figure out why they are translated (i.e., if there is a reason that they are translated to start with) and where they show up (some are quite obviously translated for a reason though). The way to solve this is to create subclasses of three(?) exception types which support getLocalizedMessage().

Somehow, at the moment, we get to choose between reports of missing translations or bug reports with stack traces in Japanese. ;-)

Also, looking at the complete translation/logging/error reporting situation, it can be improved. There is still quite a bit of exception handling which just prints the stack trace. I still find strings that should be translated. While most messages to SaveException is translated, it is also quite common that the exception message provided is "rt". Quite a few strings are built from concatenation, limiting the grammatical correctness of translations.

I think it would be brilliant if some guidelines for translations could be formed. Now, quite often, the strings doesn't include a full stop (.) nor are variables added with %0 etc. I also think it would be a good idea to make a major overhaul of this is one go, as a translator would benefit quite a bit of having the obsolete translations available when adding new, almost similar, strings.

#301 Comment 17:
Okay got some minutes time... 
You are right, your last commits are a big step in the right direction. The implementation of `getLocalizedMessage()` in `SaveException` is the right way to solve the issues and this should be adapted to more Exceptions.

But currently there still will be "mixed language" messages in the code as - for example in `FileActions.java` - you are creating localized messages which are relying on the implementation of `getLocalizedMessage()` method in standard API `IOException`s. And I don't think that, e.g., a `FileNotFoundException` does actually provide a localized message.

I have not checked whether the SaveExceptions in `FileActions.java` are only logged or actually displayed in the UI. But as you stated above:

> Hence, any dialog use getLocalizedMessage() and any logging getMessage().

We would use the getLocalizedMessage() only in dialogs/UI output. Maybe we should not append any technical messages from the cause at all? [An example is in `SaveSession`](https://github.com/oscargus/jabref/commit/1338137cff12a943b9e71888039d4e399bf46cee#diff-5cadfd8a296c63905e55cafd1321851fR130) where an IOException is caught:

``` java
throw new SaveException("Save failed while committing changes: " + ex2.getMessage(),
                Localization.lang("Save failed while committing changes: %0", ex2.getMessage()));
```

here it might be sufficient to append the ex2.getMessage() part only to the "logMessage" but not to the "UI message":

``` java
throw new SaveException("Save failed while committing changes: " + ex2.getMessage(),
                Localization.lang("Save failed while committing changes."));
```

However, this is only possible if the localized message is specific enough for the user to know what the problem might be... Applying this pattern consistently in whole project would require a huge effort, as the whole exception handling has to be improved: 
- clearer distinction between "API Exceptions" and JabRef exceptions we throw on our own
- replacing the catching and especially throwing of raw `Exception` (and even `Throwable` :scream_cat: )
- which requires: creating custom Exceptions with an implementation of `getLocalizedMessage()
- systematic usage of logging instead of System.out/err
- ...

This is enough stuff for some more huge PRs :wink:  - and I fear solving this in "batch-mode" will not be possible, but it requires quite some thinking time in various cases.

> I think it would be brilliant if some guidelines for translations could be formed. Now, quite often, the strings doesn't include a full stop (.) nor are variables added with %0 etc. I also think it would be a good idea to make a major overhaul of this is one go, as a translator would benefit quite a bit of having the obsolete translations available when adding new, almost similar, strings.

:+1: Full Ack! We should create a Wiki-Page for this - including the guidelines how to deal with localized exceptions :wink: 

#301 Comment 18:
Uhh... A few days ago, I just mentioned the existence of a few false positives, and now it seems a big trouble to a whole bunch of programmers... :-/

Anyway, I do not understand much at this very technical discussion.
Should the "guidelines how to deal with localized exceptions" be added to the wiki page regarding translation? (https://github.com/JabRef/jabref/wiki/Translating-JabRef) I guess not...

#301 Comment 19:
Don't worry @mlep you are not the cause of this trouble :wink:

The main trouble is the rather bad and inconsistent exception handling in the code...
Regarding the Wiki-documentation: No, this is not relavant for translators - but a guide for programmers how to enable localization in a "correct" way. (Still, a cross reference might be useful).

Regarding the PR: I think we can merge the current state as is and improve the Exception handling (and its localization) step-by-step.

#301 Comment 20:
As I understand it getLocalizedMessage() will just return getMessage() if it is not overridden, so it is safe from that perspective.

Regarding appending messages, I think it depends. Clearly, the current version is not correct though, but 

```
throw new SaveException("Save failed while committing changes: " + ex2.getMessage(),
                Localization.lang("Save failed while committing changes: %0", ex2.getLocalizedMessage()));
```

may be a viable alternative.

#301 Comment 21:
Yes, this would be the more appropriate alternative. However, currently (in master) a potential error dialog looks like this: 
![import-failure](https://cloud.githubusercontent.com/assets/676652/11103454/b3abf82a-88c2-11e5-8213-5e4eb224fe50.png)

I do not like this for two reasons: First, the second part is not guaranteed to be localized (not in our hands if exceptions not thrown by us are overwriting the getLocalizedMessage() method or not). And second and more important: No normal user can understand what is actually the problem here (The selected file has a wrong format and cannot be loaded). 

So **we** should actually provide localized and understandable messages for all dialogs directly shown to the user.

But this is all out of the scope of this PR and maybe we should discuss this further in #320 - although I think we generally agree on the way to handle this stuff :wink:

So again: Imho, the state here can be merged - and will be improved eventually in the course of #320 (or related direct pushes to master).

#301 Comment 22:
That was indeed an ugly dialog from so many perspectives. :-)

#301 Comment 23:
I just finished a first version of the "Exception Handling" and "Localization" HowTos in the Wiki:

https://github.com/JabRef/jabref/wiki/Code-Howtos

Feel free to contribute/check ;-)

#301 Comment 24:
:+1: 

#301 Comment 25:
:+1: 

--------------------------------------------------------------
#300 Comment 1:
:+1: 

--------------------------------------------------------------
#299 Comment 1:
Quick note from the breakfast table: I would remove all translations in log statements regardless whether they are used elsewhere. This would improve our ability to unterstand bug reports with logs from japanese users ;-)

Regarding the clean up of the language files: There is a python script which is - I think - able to detect unused translations. So this step could be quite automated. Right? @koppor @mlep

Am 07.11.2015 12:08 vorm. schrieb Oscar Gustafsson notifications@github.com:

> Trying to remove translated log messages, unless the translation is needed elsewhere. In that case I add a comment stating where the string is found.
> 
> I'll do this every now and then, so while not complete yet, it will be split in separate PRs (unless there are any objections).
> 
> ---
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/JabRef/jabref/pull/299
> 
> Commit Summary
> Inital set of translation removals
> File Changes
> M src/main/java/net/sf/jabref/JabRef.java (1)
> M src/main/java/net/sf/jabref/SearchManagerNoGUI.java (1)
> M src/main/java/net/sf/jabref/external/ExternalFilePanel.java (4)
> M src/main/java/net/sf/jabref/external/push/AbstractPushToApplication.java (1)
> M src/main/java/net/sf/jabref/gui/IconTheme.java (3)
> M src/main/java/net/sf/jabref/importer/fileformat/BibtexParser.java (2)
> M src/main/java/net/sf/jabref/model/database/BibtexDatabase.java (2)
> M src/main/resources/l10n/JabRef_en.properties (5)
> M src/main/resources/l10n/JabRef_es.properties (4)
> M src/main/resources/l10n/JabRef_fa.properties (5)
> M src/main/resources/l10n/JabRef_fr.properties (4)
> M src/main/resources/l10n/JabRef_in.properties (4)
> M src/main/resources/l10n/JabRef_it.properties (4)
> M src/main/resources/l10n/JabRef_ja.properties (5)
> M src/main/resources/l10n/JabRef_nl.properties (5)
> M src/main/resources/l10n/JabRef_no.properties (6)
> M src/main/resources/l10n/JabRef_pt_BR.properties (4)
> M src/main/resources/l10n/JabRef_ru.properties (5)
> M src/main/resources/l10n/JabRef_tr.properties (4)
> M src/main/resources/l10n/JabRef_vi.properties (5)
> M src/main/resources/l10n/JabRef_zh.properties (5)
> Patch Links:
> https://github.com/JabRef/jabref/pull/299.patch
> https://github.com/JabRef/jabref/pull/299.diff
> 
> —
> Reply to this email directly or view it on GitHub.

#299 Comment 2:
OK! I agree with the stand-point on translation in log messages.

I tried the translation script and there is a quite long list of possible obsolete keys (close to 100) and about 20 keys which are not in the translation files.

This basically means that I will replace the localization.lang for the log-messages, but not manually remove the keys at the moment.

At some stage, someone should do a major overhaul of the translation keys...

#299 Comment 3:
Among the obsolete keys found by the script, I found false positive. It means the script may need to be modified before to be made automatic

#299 Comment 4:
OK! Yes, I was a bit surprised to see some of the "obsolete" keys. For example: "delete_entry", "unknown".

#299 Comment 5:
This false positives may arise by the way the string is coded in JabRef sources. I do not know if the script or the java sources should be altered.

#299 Comment 6:
I vote for fixing the issues in the Java Source code as you already do in #301 

--------------------------------------------------------------
#298 Comment 1:
:+1: 

#298 Comment 2:
Any remaining issues? Otherwise we should merge this. 

#298 Comment 3:
Yes, one: I realized that this PR kills the OpenOffice connection (which works with some other minor changes in the code). I will revert the "correction" here and eventually provide a PR which works with the most recent versions of OpenOffice and LibreOffice. Only minor things (paths, switches etc) so should be able to include in 3.0.

#298 Comment 4:
I've reverted this change now. It should be noted that the current version does not work with the latest versions of OpenOffice and LibreOffice, but at least it is not incorrect any more.

--------------------------------------------------------------
#297 Comment 1:
You write in your list above that you have set Texstudio as a default, but in the code there is `"LyX/Kile"` set as the default value of the setting. 

Can you revert the parameter changes in `BooleanHolder` and `PopupItemActionListener`?

#297 Comment 2:
Oh yeah, there were more of those... Sure!

Hmm, weird! Quite convinced I wrote "TeXstudio" at some stage, but I'll fix that as well.

#297 Comment 3:
Ahh! Alright!

--------------------------------------------------------------
#294 Comment 1:
Please, could this be "copied" to branch dev_2.11?

#294 Comment 2:
Will Behrouz provide some more translated strings in the near future?

Then I would wait with the integration until a more reasonable amount of Strings is translated.

(Even if the Farsi translation will not make it into 2.11. - 2.80 (resp. 3.0) will be released soof afterwards).

#294 Comment 3:
Behrouz plans to complete the translation in the next 2 days.
In such a case, why not releasing it into 2.11?

#294 Comment 4:
Great! 
I think I misformulated this a bit. I meant, that the current status should not be part of a release - as most of the strings are not translated (and as 2.11 was planned to be released yesterday it would not have been included). 

But as the release will be delayed we might include the more complete version of the Farsi translation.

#294 Comment 5:
It makes sense. Thanks for clarifying.

#294 Comment 6:
Is it possible to use `git commit --author="Behrouz Javanmardi <javanmardy@live.com>"` so that Behrouz gets credit also by automatic tooling such as being listed as current contributor [on openhub](https://www.openhub.net/p/jabref/contributors?sort=latest_commit&time_span=12+months)?

#294 Comment 7:
I currently lean against inclusion of the translation in JabRef 2.11 as 3.0 is scheduled end of this month. I can, however, wait for a complete translation, but there is no need for Behrouz to rush through.

#294 Comment 8:
Should we integrate this for JabRef 3.1?

#294 Comment 9:
Same reasoning as before: I don't think it is useful to integrate the current state, as it will result in a UI which is 95% English with only a few words in Farsi.

#294 Comment 10:
I have just mailed Behrouz Javanmardi to know if he was able to send us a more complete localization.
BTW, a 5% Farsi localization could help in motivating new people in contributing to the localization.

#294 Comment 11:
Any progress on this?

#294 Comment 12:
How should we proceed with this PR?

#294 Comment 13:
I think we can close it for now, as nothing happened for several months. It can still be reopened when there is traction again. 

--------------------------------------------------------------
#292 Comment 1:
:+1: 

--------------------------------------------------------------
#291 Comment 1:
@oscargus if you have time, could you work on the comments? Then we can merge this in, and ship this feature alongside JabRef 3.0. 

#291 Comment 2:
I've implemented the changes (and a few more). Testing is still lacking though.

#291 Comment 3:
An idea regarding test files is implemented at [GVKParserTest.java](https://github.com/JabRef/jabref/blob/1332070cb62a8990567831a10f026d31acfc1738/src/test/java/net/sf/jabref/importer/fetcher/GVKParserTest.java).

#291 Comment 4:
Yes, I've noted that, but at the moment I do not see that there will be time to read up on it. But it is in fact the reason that I didn't hard code more tests using the current approach.

#291 Comment 5:
OK, let's this go through and improve testing afterwards. Refs https://github.com/koppor/jabref/issues/62

#291 Comment 6:
I just tested the Fetcher which works well from a technical standpoint - however, springer is returning some shitty dates (article published in year 2102 and so...) is this a general problem or do they currently have some problems? @oscargus 

#291 Comment 7:
I haven't noticed that problem earlier anyway (rather noted that quite a lot of papers had 2016 as year).

--------------------------------------------------------------
#287 Comment 1:
I think I'm done there. :-)

#287 Comment 2:
Looks good to me. 

#287 Comment 3:
One minor thing: The current title is "DOAJ (Directory of Open Source Journals)" which is much longer than the rest of the fetcher titles. This introduces horizontal scrollbars in the fetcher sidebar when using the default width:

![doaj-screenshot](https://cloud.githubusercontent.com/assets/676652/11044339/8ff615a2-8721-11e5-9a67-f2b1ca610747.png)

Apart from this, "ready to go" from my side, too.

#287 Comment 4:
There is no such property like [text-overflow](http://www.w3schools.com/cssref/css3_pr_text-overflow.asp) in SWING, is it? :star2: 

#287 Comment 5:
I think Java actually does snip too long texts - if the component has a fixed size. So this does not help here.

I'll merge the current state, but a potential improvement would be to define tooltips for the combobox to show some hints what the various abbreviations actually mean...

--------------------------------------------------------------
#286 Comment 1:
I find this PR very valuable (we need such improvements). The only thing I am unsure about is turning various methods static (see above). Can you explain the rationale behind this? Why is static needed here?

#286 Comment 2:
The `static` conversion is because Eclipse warns if methods could be made static. On the one hand, we could add `@suppresswarning` if we are sure that Eclipse is wrong. On the other hand, we could just turn off the `static` warning. I don't have strong a opinion about that. I currently lean towards making methods static if possible to show that they don't access instance variables.

#286 Comment 3:
As @koppor correctly pointed out, this is based on Eclipse warnings and
Eclipse warnings only. I've trusted it so far, but recently I've noted that
some warnings disappear when I fix other, to me seemingly unrelated,
warnings, so maybe I should read up a bit...

#286 Comment 4:
I tend to disagree with the warning and would prefer non-static versions. The problem with the use of static is that it leads to a higher degree of coupling within the system. Every user of a static method uses the very same instance (that is, the class) and this transitively couples two users although there might be no need for it. 

Don't get me wrong, the code works with both versions. Especially if the class is instantiated only once, as is the case in the above line I commented at, there is no difference execution-wise. It is merely a "design smell". I have the opinion that a design with a lot of use of static is "worse" than a more object-oriented design. If we consistently favor static over non-static, we end up with a purely imperative program, which means we are propably using the wrong programming language.

@JabRef/developers This is about a coding guideline and concerns everyone. So what are the opinions of the remaining people? Should we consistently fix the Eclipse warning regarding the use of static, or should we turn it off?

#286 Comment 5:
OK, I've read up and see the point. I'd say that maybe one should go through all the static methods and remove the static keyword and add warning removal in case it does not make sense to access the method in a static way.

For reference: I've done this in the earlier cleanups as well, so it may be better to go over it once and for all (although I can of course start by changing these ones back).

#286 Comment 6:
I agree with @lenhard - we should try to reduce the usage of `static` methods and not introduce new ones. 
Quick rule of thumb: 

> Static is sensible in Utility classes which provide independent small methods, e.g, `getIntValue(...)`. Static should be avoided in more complex "logic classes" - even if only static or no members are accessed. 

Objections? @lenhard 

I don't like `@suppressWarnings` annotations - so would either turn off this warning completely - or just ignore those warnings "manually", i.e., think about it and decide whether the usage is okay or not.

#286 Comment 7:
@matthiasgeiger full ack :+1: 

#286 Comment 8:
Could you review eb441846817b11 and efce4ec2eae5bd79e30 (unrelated, but I think, it's important, too)

#286 Comment 9:
@koppor Looks got to me. I imported the project into Eclipse and am not getting the warning at the above position. I also agree with you on the usage of "this": it should not be mandatory.

However, I found another Eclipse warning, we should be aware of here. In the following line

``` java
new FocusRequester(((BasePanel) JabRef.jrf.tabbedPane.getComponentAt(0)).mainTable);
```

Eclipse warns that `The allocated object is never used`. The warning is a false positive. `FocusRequester` starts itself in a separate Thread in its constructor (which is unsafe publication and a potential bug, but that is a different issue) and it does not matter that it is not used at this position. I don't think we should ignore the `unused` warning, but _we should not blindly delete every variable for which it occurs_. Instead, we should add a `@SuppressWarnings("unused")`, if it is a false positive.

#286 Comment 10:
I have removed the statics introduced in this PR.

#286 Comment 11:
Rebased on current master so it should be possible to merge this (unless any other issues arise).

#286 Comment 12:
Huh.... requires quite some time to scroll through all your changes :wink:

As you can see above I had a few remarks. 

Apart from those: Good job! Should be ready to merge (which should be easy after your rebasing - bonus kudos for this :trophy:)

#286 Comment 13:
Thanks for the review! Should be good to go now.

--------------------------------------------------------------
#283 Comment 1:
Yes, I would always add the exception as second parameter.

#283 Comment 2:
OK! I'll add the exception as a second parameter to all the discussed cases (and possibly some more if I encounter them...).

#283 Comment 3:
Thank you :star2: 

#283 Comment 4:
Should the log messages be translated? I guess not, but should I remove the translation of the already existing?

#283 Comment 5:
No translation. For consistency reasons, I would remove the translations.

Let the hunt for obsolete translations begin 😜 

#283 Comment 6:
I corrected the commented things, but have not sorted out the translations yet. It will not happen tonight as I thought I'd better remove the strings from the translation files as well. Therefore, once I get around to it, I will create a new branch for that.

#283 Comment 7:
Regarding the removal, maybe a python script could help (more than one hour 🙈). Or a sed script😜 

#283 Comment 8:
Not convinced that adding the exception as a second parameter is always a good idea... Now, since I added it, missing translations print the complete stack trace as well...

#283 Comment 9:
What do mean by "missing tranlsations print the complete stack trace as well"? Oh, you mean the messages jumping through the screen at JabRef start. Oh well, there really seems something to go really wrong. :see_no_evil: 

#283 Comment 10:
Correct!

WARNING: Warning: could not get message translation for "Empty BibTeX key" for locale en
java.util.MissingResourceException: Can't find resource for bundle java.util.PropertyResourceBundle, key Empty_BibTeX_key
    at java.util.ResourceBundle.getObject(Unknown Source)
    at java.util.ResourceBundle.getString(Unknown Source)
    at net.sf.jabref.logic.l10n.Localization.translate(Localization.java:57)
    at net.sf.jabref.logic.l10n.Localization.lang(Localization.java:112)
    at net.sf.jabref.logic.l10n.Localization.lang(Localization.java:116)
    at net.sf.jabref.importer.fileformat.BibtexParser.parse(BibtexParser.java:265)
    at net.sf.jabref.importer.OpenDatabaseAction.loadDatabase(OpenDatabaseAction.java:391)
    at net.sf.jabref.JabRef.openBibFile(JabRef.java:822)
    at net.sf.jabref.JabRef.openWindow(JabRef.java:645)
    at net.sf.jabref.JabRef.start(JabRef.java:160)
    at net.sf.jabref.JabRefMain.main(JabRefMain.java:8)

#283 Comment 11:
Is it just this special case? Then, only here, no passing of the exception 👍

Strange, that this string is not translated...

#283 Comment 12:
That is clearly the most common warning anyway... OK! I'll revert that tomorrow. Time for bed. :zzz: 

#283 Comment 13:
Fixed that translation exception printing now. (I have re-pushed all commits in open PRs as I realized that I had an incorrect email in all the previous commits. Was surprised that the commit stats looked as they did...)

#283 Comment 14:
Side note regarding the contribution statistics: Just add the other mail adresse to your github profile - then all your recent contributions will "officially" appear in the contributor list here at github.

#283 Comment 15:
Thanks! However, I tried that, but since it is not a valid email (, instead of .) it didn't work out. I've added some old emails now and hope that the SF-stats will show up. :-)

#283 Comment 16:
Hmm, I really thought that I had fixed all those... I'll give it a new go.

#283 Comment 17:
If so much things are changed it's easy to forget something :wink:

After checking all your changes I hope that together we have found all affected rows. :grimacing: 

Apart from that: Can be merged from my point of view.

#283 Comment 18:
Indeed! The thing was that I even searched for LOGGER and went through all the log messages (or so I thought). Found one more now, but I didn't have time for a complete search again.

--------------------------------------------------------------
--------------------------------------------------------------
#280 Comment 1:
:+1: for removing the configuration option.

I think, in typical programs, one can rename while the dialog is open. Therefore, I would always enable it.

--------------------------------------------------------------
#277 Comment 1:
:+1: 

--------------------------------------------------------------
#276 Comment 1:
:+1: 

But we should not expose the internal map. Can you create a new one based on the internal values?

#276 Comment 2:
Wanted to merge this, but tests seem to fail. Can you have a look @stefan-kolb, please?

--------------------------------------------------------------
#274 Comment 1:
:+1: looks good.

#274 Comment 2:
A few days ago @lenhard ranted in a chat about a JabRef dialog which was not visible on his screen as it was placed outside the visible area. (Can happen quite often if a notebook is used with and without external screens)

I have not tested whether is also happens here. But it might be useful to ensure that a Dialog IS actually visible on the currently used screens...

But this might be another PR which implements this a Util class and introduce these checks for all Dialogs :wink:

#274 Comment 3:
@matthiasgeiger No, I did not. That was git gui. And it was no dialog, but the complete UI. Read the chat logs next time before ranting about other people ranting ;-)

#274 Comment 4:
:astonished: 

Nevertheless: We should check whether this might be a problem for JabRef...

#274 Comment 5:
Good points! I seem to recall some function "placeOnScreen" or similar
flashing by in some file, so worth checking into.

Nothing I'll do this week though.

#274 Comment 6:
Would it be possible to extract the save and restore position into an additional class as this logic is being implemented for various classes at the moment? Maybe something which you can pass in four preferences  (for x,y, width, height) and a reference to the window. The save and load functionality could be moved into the new class. 

#274 Comment 7:
:+1:

#274 Comment 8:
I've extracted the logic and put it into GUIGlobals. Not sure it was
actually the most elegant way to solve it (rather sure that it wasn't), but
at least there's less code cloning.

I'll push it to the PR once I have internet access for my laptop again
(travelling, the hotel WiFi code only allowed one device and I couldn't be
bothered to ask for another once I realized it).

When looking though the code, I noticed that there is a method
`Util.placeDialog` which basically place the dialog centered on the JabRef
frame and makes sure it is visible on screen (through a single API call).
Not sure if this is really the behavior that we want when we now save the
size and position. I can imagine that some dialogs would be better kept
outside the JabRef Frame, especially in a multi-screen setup (but then
there's the problem of possibly disappearing dialogs when the screen setup
is changed). Would probably require a bit more work and thinking.

#274 Comment 9:
Had some time while traveling today.
- Created a class PositionWindow and moved to new package gui.util
- Use the same class for storing and restoring the main window
- Moved some utility classes from gui there
- Moved the Util.placeDialog method to PositionWindow

#274 Comment 10:
Just realized that I should create a test class for the gui.util package and move at least one of the tests for util there.

#274 Comment 11:
Rebased on current master. Any outstanding issues here?

#274 Comment 12:
I'll try to actually check the functionality tomorrow - code looks good to me.

#274 Comment 13:
Great! Works fine for me. Just tested it with different display configurations and the the dialog was always visible.

Maybe a minor improvement would be that `savePosition()` is also called if the "Cancel" button or the window close action ("X") is called. At least I was wondering why the changed size and position was not saved after I first closed the merge entries dialog with the "x".

#274 Comment 14:
I was thinking about that case (X and Cancel) and thought that if you hit, at least, X, it may be because you have messed up the size and positioning. But no strong opinion on it and easy to change (at least for Cancel it is just to add a single call as you say).

#274 Comment 15:
I also have no strong opinion on that - just wondered during testing why the changed size was not stored.

But let's see what other do: Just checked it with the programs currently open on my machine: All programs that store size and position do this even if the dialog is closed using X. 

Might it be possible to add a "WindowSizeAndPositionChangeListener" - no idea what this is actually in Swing :wink: - which automatically calls `savePosition()` regardless how the window is disposed?

Edit: [Stackoverflow says](http://stackoverflow.com/a/2303329/1468629): Use an [ComponentListener](http://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentListener.html) or an [ComponentAdapter](http://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentAdapter.html) for this ;-)

#274 Comment 16:
Rebased on current master and added the Cancel button. No Listener though, just pure hard coding (but still a bit of code improvements).

#274 Comment 17:
You don't like the ComponentAdapter? :wink:

#274 Comment 18:
I went for quick (and dirty). Although I'm also not convinced of the idea to store the settings every time a dialog is moved (while I can see that there are not that many cycles required).

#274 Comment 19:
@JabRef/developers Opinions? Storing each time resizing is completed using a ComponentAdapter or only if the dialog is closed using a Button?

#274 Comment 20:
Vote for using a ComponentAdapter. Is cleaner, and independent on adding new buttons. 

Another issue I have with this PR: there is no constant for the JabrefPreferences as they are computed by String concatenation. Previously, we tried hard to have constants for every JabrefPreference consolidated in the JabrefPreferences class. This has advantages that we can easily find all available preferences in the system in a single class. I think we should keep that. Because of this, I would suggest that instead of a single string, we pass the four preferences keys that were previously computed to the new positioning class. 

#274 Comment 21:
I agree that the ComponentAdapter has some advantages. However, a (major) disadvantage is that it is a bit too much to grasp for me at the moment. :-)

Regarding the preferences, I also agree. It is indeed a bit of a hack, but with the current preference structure, this solution seemed simpler if nothing else. This one I should be able to fix though.

#274 Comment 22:
Component adapter should work this way

``` java
this.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                // store new infos
            }

            @Override
            public void componentMoved(ComponentEvent e) {
                // store new infos
            }

        });
```

Then, this is only stored when the window size is changed or the window is moved. Maybe we could also override the `isShown` method and only then set the size of the window. Then, every time the size/position is read or written would be within this adapter - preventing that the code is scattered around in the corresponding frame/window class. 

From an architectoral view, I would recommand making the PositionWindow class non-static with the four final fields for the four preferences. This way, we could create an instance of the PositionWindow class for each of the four frames which is then reused in the appropriate places. 

#274 Comment 23:
I would not move `GUIGlobals` to the `util` package because it basically hides this important class which is used by almost every GUI class. 

#274 Comment 24:
OK! I'll move it back and try to implement that ComponentAdaptor thing.

#274 Comment 25:
Finally the ComponentAdaptor is in place. Had some strange problems where some of the dialogs saved a different size when closing the dialog, but it seems to work now.

--------------------------------------------------------------
--------------------------------------------------------------
#272 Comment 1:
"but the use of the superscript form seemed to have disappeared around the 1940s and 50s — until its corpse was reanimated by Microsoft." ;-)

#272 Comment 2:
We thought it looks way better than without.

#272 Comment 3:
I do not really have a strong opinion on it, just found a quote from someone that does. I tend to remove ordinal numbers from conference names anyway (using strings to get consistent naming).

(There are similar behaviors in other Latin languages, Italian and French at least, so maybe one should try and support that as well?)

#272 Comment 4:
I generally like the idea to be more pushy towards correct bibtex files.

If we really go towards that direction, could you remove the CleanUp functionality from the CleanUp dialog? It is not necessary there any more! (See screenshot below)

Does the RegEx obey enclosing in brackets (`{1st}`) or don't wee need that and force users to do the right thing?

The issue that I see, that we have to check **all exporters** (and the OpenOffice integration) whether they export `\textsuperscript` correctly. Furthermore, having my .bib file polluted with TeX commands is not appealing to me. We should change our cell renderers to render/remove the LaTeX commands.

Is this a discussion concerning: #160?

CleanUp dialog:
![cleanup](https://cloud.githubusercontent.com/assets/1366654/10764220/56355246-7ccd-11e5-9bdf-5101764a6164.png)

#272 Comment 5:
Thanks for input @koppor :+1: 
- [ ] I left the CleanupAction as is intentionally, but i can remove rewritten cleanups.
- [ ] Brackets will cause problems, need to recheck this, thanks!
- [ ] Exporters may have problems with that, but if that's true that issue already existed before

I'm not sure if we should hide this information from the user by removing LaTex commands from the cell renderer. I don't see a possibility to not "pollute" the bib file with necessary LaTex commands.

Open for further discussion :smile: 

#272 Comment 6:
If we have configurable save actions (as eclipse), we should keep it in the CleanUp diag. If don't, what's the benefit? The entry is always updated.

I'm not sure about the users acceptance though... Don't know, how many will complain and ask for configuration options...

#272 Comment 7:
Yeah we need to discuss this, I think #131 should have consensus, but this one might have different opinions.

#272 Comment 8:
I think we should make save actions that alter the .bib file configurable via preferences. And I would not remove them from the cleanup actions either. I propose to only set them to active by default.

#272 Comment 9:
:+1: for configuration options and keeping the CleanUp as is.

@stefan-kolb The code in CleanUp seems to differ from your new code: Could you modify the CleanUp dialog to use your code?

#272 Comment 10:
I would remove the cleanup dialog and handle all that stuff in a preferences autocleanup section. If someone modifies this, it'll be run instantly and act like the old auto cleanup?! Anyway, it will always be run as onSave action.

#272 Comment 11:
:-1: for removing the cleanup dialog. I'm used to having control on my entries and see what happens. We currently have the issue with the JabRef code changing (indent etc) due to the autosave without wanting to have these changes. 

For instance, I'm against performing following changes:
- auto bracketing is IMHO not working for `BPMN`, but I have to recheck. Also moving the DOIs around does not make sense if users are forced to use a certain `bst` showing the URL field and not the DOI field.
- PDF file renaming would cause many troubles. I do not want that JabRef renames my PDFs without asking.
- Making the path relative: I think, some use cases are not covered here
- Convert to biblatex format: Not sure if we want that really happening automatically
- I really like Unicode and would propose to store everything in UTF-8. However, not all users are Unicode ready and like the LaTeX encoding more.

I think, IntelliJ also doesn't have save actions, does it? Would you use it if they were there? Always changing your code?

#272 Comment 12:
I think the best way is to have a set of defined "clean up" actions which a) can be triggered manually, b) are performed automatically when saving, c) are performed automatically when a bib file is opend/entries are imported.

So the cleanup actions should only implemented once but can be triggered in different ways. And yes, the automatic transformations should be configurable in the preferences.

#272 Comment 13:
:+1: for these options. Especially c) is really useful.

#272 Comment 14:
Ok, I agree with your thoughts. We can close this PR, as the code changes will be made incremently in the direction that was pointed out here.

--------------------------------------------------------------
#270 Comment 1:
I'm not a fan of using custom methods for JDK defaults if it isn't necessary from a performance standpoint.

#270 Comment 2:
I don't have a strong opinion on that. One the hand hand consistency, on the other hand least surprise. I lean towards the concept of least surprise. 

#270 Comment 3:
Same here. If it is not **really** necessary due to performance issues, use the "standard" API methods.

#270 Comment 4:
I think a consensus is reached here that this PR is to be closed without merging. 

--------------------------------------------------------------
#267 Comment 1:
:+1: 

#267 Comment 2:
LGTM, too.

--------------------------------------------------------------
#266 Comment 1:
Other than my minor comments: :+1:

#266 Comment 2:
When I saw `System.*.print*` I replaced it with LOGGER, but I haven't searched for it (yet). But, yes, I can changed that.

OK, will try and look for those else if:s.

#266 Comment 3:
XMPUtil is a command line tool, so I _think_ that it makes sense to keep it as is there?

#266 Comment 4:
I don't get the comment about `XMPUtil`. Isn't it just a plain class? May it also be used as executable? Even if, we should use logging, because we mainly use it in JabRef.

#266 Comment 5:
@koppor The only `System.out.`'s are in the `main()`-method of the class (and in a method which explains the `usage()` of the CLI mode. However, it seems to be that the possibility of the standalone usage is documented nowhere... 

Remove it? Leave it as is? Or use a Logger even for the CLI infos?

#266 Comment 6:
Leave as is. Add a comment above the line (for our greppers). Add a note at our  ticket to extract as external lib. That will be a standalone tool then! (lib+cmd using that lib). 
#266 Comment 7:
The main method (CLI) cannot be called at the moment. I checked 2.10 and we only shipped it without building an additional jar with a different main method. Why not just remove this then?

#266 Comment 8:
I believe, it might be a useful tool for some power users.

#266 Comment 9:
Maybe :wink: 
But wouldn't it be better to integrate it in the normal JabRef CLI?

#266 Comment 10:
-> dev call :)

#266 Comment 11:
Thank you @oscargus for this PR. 

--------------------------------------------------------------
#265 Comment 1:
:+1:

The failed build is https://github.com/kt3k/coveralls-gradle-plugin/issues/47 (as we use `2.4.0`). (Outdated Issue found by google at first: https://github.com/kt3k/coveralls-gradle-plugin/issues/27? Should we update the coveralls plugin to `2.4.0x`?

The only thing, that we changed, is the inclusion of coverty `1.3.708`. Does that version depend on `httpmime-4.1` which seems to be broken?

--------------------------------------------------------------
#264 Comment 1:
:+1: 

--------------------------------------------------------------
#261 Comment 1:
Good idea.

The options in the right click menu are getting more and more. What happens when the right-click menu is larger (higher) and the current screen?

If you do a rebase you can get rid of the merge commit in that case. 

#261 Comment 2:
I think that there are also some other entries in the right-click menu which does not disable themselves as they should (if I recall correctly from adding the Merge from DOI). Just saying that it may be worthwhile taking a step back and see how the right-click menu behaves. The mark/unmark functionality is a bit inconsistent. Sometimes I get "Unmark entry", even though the entry is unmarked. Some commands, like "Open URL or DOI" and "Get Bibtex data from DOI" doesn't work with multiple entries selected although there is a rather obvious solution to how it should work.

Regarding to large menu, the three special copy-commands could be moved into a submenu, "Copy special". Would at least help a bit...

#261 Comment 3:
:+1: for having a close look at the disable/enable logic for the menu/taskbar/right-click-menu. We probably can delete a lot of duplicate code and make the code also more explicit. 

Yes, this could help. But it also introduces another step to click them. Always these trade-offs.... :)

#261 Comment 4:
I am against merging in a hack. Either this is improved or we close this.

--------------------------------------------------------------
#259 Comment 1:
:+1: 

#259 Comment 2:
@simonharrer My comment on the else branches got lost. If following happens

```
if (somecondition) {
    return a;
} else {
    return b;
}
```

Eclipse complains that it can be rewritten as

```
if (somecondition) {
    return a;
}
return b;
```

Do we want that style? I like the first one more. If we decide for the first one, I'll turn off the Eclipse warning suggesting the second style.

#259 Comment 3:
It depends. the second style is perfect when the if checks some error condition or some very special/minor case. The first style is perfect when both results are equally (likely/ok/...), are really two parallel cases being equal in their importance.

My proposal: disable the warning that this needs to be changed as this cannot be decided using the AST of Java. Only a developer can decide this. 

#259 Comment 4:
I disabled the warning in `master`. @oscargus Could you regenerate the Ecipse config

To save time, I would propose to merge this PR (instead of undoing the `else` branch changes), but not to do other else branch rewritings in the future. @simonharrer If OK, go ahead with merging.

--------------------------------------------------------------
#258 Comment 1:
:+1: 

--------------------------------------------------------------
#257 Comment 1:
:+1: Especially not having to translate the used libraries section is really helpful, I think. And only linking instead of shipping everything with it. 

#257 Comment 2:
After discussing, we should create a folder `licenses`, where each license file is stored with `id.txt`, where `id` is the id from `external-libraries.txt`. Then the build script should create the About.html txt content based on `external-libraries.txt`. Then, this conforms to the requirements of the BSD license.

#257 Comment 3:
22c809c adds license information in `licenses/` and reproduces that information in About.html. Thus, we should comply with the license requirements.

--------------------------------------------------------------
#256 Comment 1:
:+1:

--------------------------------------------------------------
#255 Comment 1:
As you may have noted, I have used the new Eclipse settings which apparently reformats everything when saving...

#255 Comment 2:
When using git gui, you can choose the lines to commit. Just mark them and right click and   "stage lines to commit". Would that be possible? After committing: Ctrl r and revert the other changes!

----- Ursprüngliche Nachricht -----
Von: "Oscar Gustafsson" notifications@github.com
Gesendet: ‎24.‎10.‎2015 20:05
An: "JabRef/jabref" jabref@noreply.github.com
Cc: "Oliver Kopp" koppdev@googlemail.com
Betreff: Re: [jabref] Added JComboBox in MassSetFieldDialog (#255)

As you may have noted, I have used the new Eclipse settings which apparently reformats everything when saving...
—
Reply to this email directly or view it on GitHub.

#255 Comment 3:
Hm, the new eclipse settings seem to be wrong. We should revert to the old ones as they cause a lot of havoc at the moment. See the strange indents in this commit. 

#255 Comment 4:
I tried with Eclipse Mars SR1 and it did NOT format it in a wrong way. I checked out this branch and did `CTRL+a` and `CTRL+SHIFT+f` at `BibtexDatabase` and it fixed everything.

@oscargus: which Eclipse version do you use? Mine is as follows

```
Version: Mars.1 Release (4.5.1)
Build id: 20150924-1200
```

#255 Comment 5:
I use the same version. By looking at the code it seemed like it was the `listener` variable that messed things up. I moved it to the end and now it looks much better. A bit strange since `listener` is also "correctly" formatted now. 

#255 Comment 6:
Could you switch the two commits `Move listener in the code ...` and `Added method`? Then we can properly read the diffs.

Side note: I tried to do CTRL+a and CTRL+f in Eclipse. Then it formatted correctly. Only the save actions seem to mess up the code. :cry: 

#255 Comment 7:
I'll try that. rebase -i, right? Or should I simply just merge the commit
with the strange formatting and the better formatting?

#255 Comment 8:
`rebase -i` should work. Think, you'll get many conflicts. Maybe you just keep the first commit only (meaning deleting the `pick` lines for the other two commits) and then do the other commits manually again.

Two options for that:
1. Copy the file to a temp folder and copy'n'paste the method during editing
2. Use a [second worktree](https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows) and checkout the last commit there
3. Use `gitk --all&` and copy'n'paste the change from there. You have to remove the `-` though.

I personally do mostly option 3, sometimes option 2.

#255 Comment 9:
you can also use `git reset HEAD~2` and then create a new commit. 

--------------------------------------------------------------
#253 Comment 1:
:+1: 

--------------------------------------------------------------
#252 Comment 1:
:+1:

--------------------------------------------------------------
#251 Comment 1:
:+1: 

#251 Comment 2:
Relates to #98

--------------------------------------------------------------
#249 Comment 1:
> When saving, Eclipse formats some lines. Not only the changed ones (as told) and not all (if configured to format all)

This might be caused by some "duplicates" in the gradle script:
`cleanup.format_source_code_changes_only=false` 
vs.
`sp_cleanup.format_source_code_changes_only=true`

What is "sp_cleanup"? Are those the save actions?

#249 Comment 2:
`sp_cleanup` are the save actions. I think, the cleanup is called manually, the save actions always when saving. I tried `true` and `false` at `sp_cleanup.format_source_code_changes_only` and had less changed when setting it to `true`.

#249 Comment 3:
I do not like that this is polluting the `build.gradle` file. Can you please put this in an `eclipse.gradle` file and just import it from the `build.gradle`?

https://docs.gradle.org/current/userguide/userguide_single.html#sec%3aconfiguring_using_external_script

#249 Comment 4:
I had the choice between 
1. polluting one file (only read by our build experts) and not polluting the main directory (seen by every person working with the source) and 
2. not polluting one file and polluting the main directory

I opted for the first one. If @stefan-kolb agrees, I choose the second option and will generate the additional file `eclipse.gradle`.

#249 Comment 5:
This is a lot of stuff. I second creating an exclusive `eclipse.gradle` file.

#249 Comment 6:
Result of discussion: merge, leave the minor issues (see PR description) open, and format the complete code later.

--------------------------------------------------------------
#248 Comment 1:
I second this PR :+1: 

--------------------------------------------------------------
#246 Comment 1:
:+1: 

Just one thing: As @simonharrer already mentioned in the earlier pull request: It is not necessary to create all those serial versions UIDs :wink:

#246 Comment 2:
Yeah, I noted that (and changed my warning preferences). Didn't get the idea that they should be removed though. :-) (But I will for sure not add any more.)

#246 Comment 3:
Can you please remove the IDs and fix the indent the commented place? Then it is good to be merged. 

Thanks for the improvements!

#246 Comment 4:
OK! I've changed that, ran the Eclipse formatter and added formatter:off/on for multi-localization commands.

--------------------------------------------------------------
#242 Comment 1:
IntelliJ IDEA only has a save-all button mapped to CTRL+S. I like this as this reduces the moments that you forget to save one file and not the other. And it reduces code and elements in the UI. This would make an additional save button like the one from this PR in other windows obsolete.

Any opinions on this? @matthiasgeiger @lenhard @koppor @stefan-kolb 

#242 Comment 2:
@simonharrer: Sounds good to me.

#242 Comment 3:
@simonharrer I generally agree, however changing the default behavior of Short cuts might cause some trouble if a database is "accidently" saved during editing another database. However, this should not happen that much I suppose.

But this rather off topic regarding this PR?

Personally, I don't like to add another save button to the string-dialog as it is rather unusual to trigger saving of a file from a dialog - and as the dialog isn't modal it is currently possible to simply hit the "save all" icon in the main window. 
Maybe and option would be to enable the the save-shortcut (ctrl-s) in the dialog?

#242 Comment 4:
It is kind of related to this PR as the save-all would allow @oscargus to keep his workflow while not adding more to the UI. See comments in #239 

#242 Comment 5:
- I'm against introducing another save button. 
- I'm also against deleting the save database functionaility. 
- However, I propose to switch shortcuts for save all and save, i.e. save all will be the default action with ctrl-s and save ctrl-alt-s.

#242 Comment 6:
I'm not sure if I follow the discussion completely (dropping this note in a hurry), but I'd be happy as long as I can save the strings-file while editing it. Ctrl-S works with me.

I agree that it only makes sense to save from the string edit window when you have a .bib with only strings. However, when you have that case, it very much makes sense, as this is the ONLY view where you actively manipulate that file. The alternative is to click to open the (seemingly) empty tab and then save (until now that I learned about the save all, which may introduce other problems like warning dialogs about open .bib-files you at the moment do not care about at all, but will fix later etc).

#242 Comment 7:
To sum up, the addition of another save button is rejected. 

Workarounds: shortcuts (either save or save all).
To be discussed: save all with CTRL+S shortcut as new default

--------------------------------------------------------------
#241 Comment 1:
:+1:

Sent from my iPad

> On 15.10.2015, at 22:58, Oliver Kopp notifications@github.com wrote:
> 
> The UTF-8 support of LaTeX, biber and LaTeX editors is really mature. To have interoperable .bib files, JabRef should set the default encoding (for new users) to UTF-8
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/JabRef/jabref/pull/241
> 
> Commit Summary
> 
> Set default encoding to UTF-8 and not to system's default encoding
> File Changes
> 
> M src/main/java/net/sf/jabref/JabRefPreferences.java (2)
> Patch Links:
> 
> https://github.com/JabRef/jabref/pull/241.patch
> https://github.com/JabRef/jabref/pull/241.diff
> —
> Reply to this email directly or view it on GitHub.

--------------------------------------------------------------
#239 Comment 1:
May I ask, why? I have to confess, that I only use the "push to application" icon to change the application where I push my entry to (as I don't know, where else to change).

There are also "mark entry" related buttons in the toolbar. - Is the reason that the removed functionality is used seldomly? Would it make sense to add it to the context menu of the database tab, because it somehow affects the whole database?

Refs #113 

#239 Comment 2:
I use strings quite regularly (a common .bib file with correct abbreviations for journals and conferences) but always access it in the menu. Now that I know there is an icon, I do not want to get rid of it. ;-)

Preamble I've never even used. But I think it is OK to remove the strings icon as well. Either way, there may be a slightly more intuitive way to group these and nearby icons.

#239 Comment 3:
Oh, and add it to the context menu of the database tab would clearly be a good idea (it = strings), or maybe an edit menu with subitems preamble and strings (and encoding?).

#239 Comment 4:
Hm, this may open the box of pandora. Discussing the menu maybe should be done in a separate issue? Because I see a lot of issues with the current menu/UI.

#239 Comment 5:
I don't know if we should remove both functionalities from the toolbar. I strongly second removing the preamble icon tho!

#239 Comment 6:
Okay, removing only the "edit preamble" for now as this has the most consensus. The other things we have to discuss somewhere else. 

--------------------------------------------------------------
--------------------------------------------------------------
#236 Comment 1:
Agreed! I didn't look into this, but it annoyed me seeing the inconsistent behavior in the shortcut list.

--------------------------------------------------------------
#235 Comment 1:
One can note that SaveDataBaseAction is VERY similar to parts of BasePanel. The only operational difference seems to be that the code in BasePanel is used to save selected items, while the code in SaveDataBaseAction is used to save the complete database. This is something one should look in to and unify the code.

#235 Comment 2:
:+1: Code looks good.

#235 Comment 3:
:+1: with the condition that the resources are closed for sure with the try-with-resources block. 

#235 Comment 4:
OK! I think/hope that this is good to go now. Some more changes, but nothing controversial...

#235 Comment 5:
Thanks for the contribution! :)

:+1: 

--------------------------------------------------------------
#233 Comment 1:
Thank you for your pull request. 

--------------------------------------------------------------
#232 Comment 1:
We're all set :+1: 

--------------------------------------------------------------
#230 Comment 1:
When checking for the size of the icons, please also check high resolutions settings:
- [840x2160 pixels under Gnome 3; HiDPI](http://sourceforge.net/p/jabref/mailman/jabref-users/thread/CAPMKG4CoXgAPXTKtnSwxWvXAKrCHQy8oXk0NetXVYiZVZS46Ag@mail.gmail.com/#msg34472086)
- [2160x1440 and 2560x1440](http://sourceforge.net/p/jabref/bugs/1255/)

#230 Comment 2:
So we should use the Font as this enables simple resizing.
I will investigate whether it is possible to make the icons sharper somehow...

#230 Comment 3:
What about some icon dpi scheme ala android: mdpi, hdpi, xhdpi, ...? Since resolution are growing.  If you want to use vector format what about SVG?

#230 Comment 4:
We wanted to use an icon font. This should scale for all resolutions..

#230 Comment 5:
What needs to be investigated
- [x] the menu item gets bigger when we use the 24px icon. This looks strange when we have normal menu items with no icons and menu items with the 24px icons in a single menu. 
- [x] disabled icons look strange

# ideas
- the selection of the color to mark an entry should be done in the tool bar as well right next the marker symbol - or we change the color symbol in the toolbar depending on the current color selection.

#230 Comment 6:
:+1: for linking to the donations page as it also explains how the money is spent. 

#230 Comment 7:
Okay... I think we are coming down the stretch...

@koppor @lenhard (and all interested others): Do you have some feedback to be integrated before we merge into master?

#230 Comment 8:
Squashed the commits so that temporary png files and fonts are pruned from the history. And removed the ability to change the icon of an external file type entry. Hence, only a single item in this PR is remaining. 

#230 Comment 9:
The last issue was partially addressed by e57fb49. If #257 goes through, this PR can be merged as is.

--------------------------------------------------------------
#229 Comment 1:
We should recheck if this is a clean PR in the morning :joy:
Otherwise :+1: 

#229 Comment 2:
Just for the record: The non-compact rank was inspired by music players showing stars (see blow). It was introduced to be consistent in UIs provided by other software. The compact rank was intended for users not wanting to waste screen space. Regarding the modern screens, I would even favor the non-compact rank. However, the information density per centimeter on the screen might not be as high as the one perceived at the neighboring columns.

When not sorting according to the rank (but to the author, title, year, ...), the difference between the different count of stars is difficult to distinguish. I didn't quickly find a reference for that. Meaning: How distinguishable should icons be and how to measure whether a chosen icon is different enough from another icon. I am aware of the [work of Moody regarding notations](http://dx.doi.org/10.1109/TSE.2009.67), but I couldn't find general work on user interface design. @SamyStyle, maybe you can comment on that?

![Songbird Screen with Stars](https://upload.wikimedia.org/wikipedia/commons/d/d2/Songbird_2.0.0_%28Windows_7%29.png)

#229 Comment 3:
I agree, that the implementation in the screenshot looks good, is easy to use and to understand. 
However, the current "non-compact" icons are just ugly - and as you said it is very hard to distinguish whether a paper is rated with 3, 4 oder 5 stars. 

Therefore, if no one implements the behavior as shown above, I vote for removing the "non-compact" version and use the compact ranks as default (as done in this PR).

#229 Comment 4:
While probably not allowed to formally vote, I agree that the PR should be merged. Implementing a non-compact rank could be done at a later stage and should preferably also support changing the rank by clicking in the column as well.

Thinking about the discussions about using JabRef on high resolution screens, it appears that density is not always a problem. Still, an ugly UI still it, which I believe the current non-compact is. Better to remove and possibly re-introduce in a better way later. 

#229 Comment 5:
One can already change the rank by clicking on the column. Both left click (directly change) and right click (context menu offering to change the rank).

I fully agree that having both options is an option overload only necessary for some edge cases. In case I discover good icons for the extended rank, I will bring them back in and adapt `ImportInspectionDialog` and `MainTable` accordingly. Hope, that no one will object if the stars take more space than the other columns.

#229 Comment 6:
I am against having both options. Either compact or non-compact, but the user should not have a choice here. We already have too many preferences for the user, making it difficult for us developers to maintain the code.

#229 Comment 7:
Yes. If it is was not clear, this is also my opinion. 

But I like the proposal of Olly as an replacement for the current "compact rank" solution.

#229 Comment 8:
I was rather thinking of having two different column types to select from (still the same entry in the .bib-item, no idea how the table column system works though). Will at least solve the preference problem and hopefully the ugliness problem. (Yes, people may use both in the same table layout, but let them... I can even imagine a quite good use case there.)

However, no strong opinion on this as I never use the ranking, in JabRef or in any music organizer, anyway. But I would see a potential drawback in not being able to left-click to change the ranking in the same simple way as a multi-star approach if I used it. I imagine...

#229 Comment 9:
I think two column types are even more ugly to implement in comparison to having a switch in the rendering. :disappointed:

Oh, you mean that a star should be directly clickable to select the ranking. That'll be hard to implement...

--------------------------------------------------------------
#228 Comment 1:
For the record: #227 superseeds this PR, therefore, this was closed.

--------------------------------------------------------------
#227 Comment 1:
I just now realized that one can access this from the ImportInspectionDialog. Will sort that out first before there is any need to consider this...

#227 Comment 2:
When calling "Search" -> "Find duplicates", I cannot access this feature, but I really need that: Typically, I want to merge duplicates and not killing one of it.

#227 Comment 3:
Did the "Possible duplicate entries" only contain two entries and nothing like below?

![jabrefduplicate](https://cloud.githubusercontent.com/assets/8114497/10424408/3f7137e6-70cf-11e5-96aa-db23976c9a41.PNG)

#227 Comment 4:
Anyway, I've updated the PR to also handle the ImportInspectionDialog. Some minor things to correct still, like using descriptions that make sense.

#227 Comment 5:
Oh, I see. In my case, it were only two entries. What are you doing when there are three entries? Merge the first two and then again showing the duplicate dialog for the merged entry and the third dublicate? (Repeat if there are more than 3)

#227 Comment 6:
Why are commits by me appearing here? Did you do any git magic? Maybe you should only do `git merge` and no `rebase -i`, `push -f` or `reset branch to here` :innocent: 

#227 Comment 7:
I'm only showing the new dialog... Not sure how JabRef handles more than two entries, but I do not think there were support for it earlier either?

Not sure, I thought it was the lack of all that magic that made them appear... :-) Now, there should be fewer though.

#227 Comment 8:
No... No idea why your commits showed up originally. I thought I had a grip of those things now... 

I'll try to create a clean PR eventually by copy-and-paste.

#227 Comment 9:
@oscargus With some magic, you can create a new branch X based on master, cherry-pick commits (get the id via `gitk --all` and use the command line `git cherry-pick ID`), and then do `git push -f X origin:mergeduplicates`. Then, the branch of this PR is clean again.

Assumption: Your github upstream repo is called `origin`.

#227 Comment 10:
OK! I'll see what I can come up with... The idea of cherry-picking instead of copy-pasted struck me at about the same time that you wrote your comment. :-)

#227 Comment 11:
OK, I might have done this in a slightly different way, but still the end result is quite OK. Note that there is a "cleaner" PR in #228 .

#227 Comment 12:
Oh, now ALL the old commits disappeared. :-) I close PR #228 then. By the way, for future reference the magic command was `git push -f origin X:mergeduplicates`.

#227 Comment 13:
The UI is a bit confusing.

Could you label the upper one with "first entry", the "lower" one with "second" entry and change the labels of the buttons accordingly? Reason: When reading "Keep lower", I think, I pick the third entry.

Can there be a "Skip" button added? What if I don't want to merge the entry, but continue the searching? Usecase: An entry which isn't a duplicate.

#227 Comment 14:
Hm, would it make sense to integrate the dialog for merging entries with the duplication search?

#227 Comment 15:
Not sure if I fully understand the idea. At the moment you either know that you want to merge two entries (or import data from DOI for a single entry) and get the MergeEntryDialog or you rely on the duplication detection and get the DuplicateResolverDialog. I'm not sure that you always want to merge entries, so sometimes it is quicker just to drop one of them.

#227 Comment 16:
Okay. Last remark: what about removing the short form and the complete record tab? The merged entry tab shows all the relevant information including a simplistic form of highlighting the differences per field while both other tabs do not (in this case one has to find the differences without guidance). 

#227 Comment 17:
To me that makes sense, but let us hear any possible objections before I
remove the old stuff. I rarely use duplicate detection anyway and so far
mainly merge by hand.

One may think of an additional button in the MergeEntries panel for giving
priority, i.e. "clicking" all radio buttons on that side, to either the
left or the right entry in a single click (now the left entry has priority).

(Configurable in preferences? ;-))

(I also see a quite general problem here in my PRs. I mainly add
functionality rather than rethinking the design.)

#227 Comment 18:
Please, no additional preferences. ;) We try to keep this set as small as possible.

I was thinking to have the Keep left/Keep right buttons still. 

But we could still add two buttons for the merge entries to select all left or all right elements. Maybe make the left/right label into a clickable button?

#227 Comment 19:
:+1: for only "merged entry" without any additional tabs.

:+1: for replacing "Keep entry 1" and "Keep entry 2" by buttons nearby "Use ... Left" and "Use ... Right". Maybe a radio button directly below "Left" and one radio button directly below "Right".

#227 Comment 20:
I would keep the buttons for keep left\right. Because it saves the user a
click.

#227 Comment 21:
The idea was not to remove any buttons, just add the "preference button". I do not think a radio button conceptually makes sense there, but a regular button to select all left/right radio buttons (and add any missing fields from the other entry) for later editing.

The "entry 1"/"entry 2" problem is solved naturally with only this "tab" as left/right now makes much more sense.

Related question: when invoked from the ImportInspectionDialog, it states (approx)  "In database"/"From import". Would it make sense to keep some sort of similar behavior? (I think it does.)

@koppor Regarding your "Skip" button. The "Keep both" button does the same thing now.

Good thing: The DuplicateResolverDialog will disappear and only the MergeEntriesDialog will remain.

#227 Comment 22:
Draft version without tabs and possibly correct naming of headings and buttons. Still a separate file though (realized that was by far the easiest).

Still to do:
- [x] get rid of mainLoop
- [x] postpone the entry removal
- [ ] add left/right buttons (for preferring fields from left or right entry)

#227 Comment 23:
Looking at the code there is a preference to use the ImportInspectionDialog or not when importing from a file (first lines in the General preference tab). Any objections against always using the  ImportInspectionDialog? The alternative (if not checking this in the preferences) is to import them directly, but trigger the DuplicateResolvingDialog for every duplicate, which is a bit more tedious for the user.

Benefits: 2/3 preference items removed. 100+ lines of code removed.

#227 Comment 24:
Hm, hard to decide. I never use the import feature at all. 

#227 Comment 25:
I spent some more time thinking about it (the latest commit contains the result) and I think it makes sense. The alternative behavior can still be obtained by just clicking OK in the ImportInspectionDialog and then run duplicate detection.

The most likely use case I guess is to merge the contents of two .bib-files and there it should be more manageable to see the overview provided in the the ImportInspectionDialog instead of ending up in an indefinite (or at least hard to predict the length of) sequence of duplicate detections. And as said above, no actual functionality is lost, the alternative way just require one click and one menu selection.

It did solve two of the problems listed as well as removed duplicated code.

#227 Comment 26:
Sounds reasonable. Good job!

I just tried the "find duplicate" feature on your branch: the window is always quite small. When I increase the window size for the first duplication pair, it will be shrinked to the default size for the next duplication pair. This is a little bit annoying.

#227 Comment 27:
I agree. I'll see if I can find some suitable code to copy...

#227 Comment 28:
for me this looks ready to be merged. 

#227 Comment 29:
I think the only missing thing that we have discussed (as far as I recall)
is to provide a way to simply select all left or right radio buttons.
Didn't really have the focus to sort it out (in a nice looking way) and may
not be really required to merge at this stage.

#227 Comment 30:
@oscargus Sure. I just wonder about the typo and the commented out code. Could you fix it or comment why these are needed?

#227 Comment 31:
:+1: for merging in, even without the mark left or right side options as we still have the keep left and keep right button. 

#227 Comment 32:
Fixed the two things pointed out by @koppor 

#227 Comment 33:
Thank you for this PR again!

--------------------------------------------------------------
--------------------------------------------------------------
#225 Comment 1:
:+1: 

--------------------------------------------------------------
#224 Comment 1:
:+1:

#224 Comment 2:
Could you state this decision somewhere? Maybe in a comment in `About.html`? - If someone digs into the files, he should be able to find this decision! - Or just reference this PR.

For the record: We also declined to include the contributors having contributed the last 12 months (or the last release?), because of https://xkcd.com/1205/. Even if I'd say that a list of "current contributors" is nice and I personally believe that such a list takes yearly at least 30 minutes to generate and to paste in all About.htmls.

We could add a kind of "steering committee". That could be a text file somewhere and included during generation of the About.html files. That would honor the active persons in the project. However, we would have to define rules how to add and remove people from the list. Think, this is too much overhead to find a political correct way. We are too small to introduce rules comparable the one of the [Apache Software Foundation](http://www.apache.org/foundation/how-it-works.html) or [Eclipse](https://eclipse.org/projects/committers-emeritus.php), even though the Eclipse process to change a committer state to "emeritus" seems to be light-weight.

#224 Comment 3:
I know from a lot of projects that they have a core team (rails for instance) and that core team is the team of the github organization. I would propose to use this definition and have a section with former core team members as well.

#224 Comment 4:
If we do this by time-period (such as 12 months), some names may not appear (because the time between 2 release my be larger than 12 months). Hence, for small contributors, I suggest to mention them based on the involved release. I mean something like: "Many thanks to those who contributed to make JabRef go from version 2.10 to version 2.11: " followed by the list of names. 

#224 Comment 5:
@mlep These guys will be always included in the contributors list.

--------------------------------------------------------------
#222 Comment 1:
Made a quick fix directly in GitHub (same bug fix as in master, but there some other things were changed as well, such as logging). Apparently a conflict in the CHANGELOG was caused by not having an up to date version of the branch...

#222 Comment 2:
Tried to make a "manual merge" but apparently not a good idea... Should go back on working on the master branch instead. :-) Still, it made sense to try to get this bug fix into 2.11.

#222 Comment 3:
If you like I can help you with the merge through a screen sharing session via skype. Just write me your skype name to simon.harrer@gmail.com

#222 Comment 4:
Thanks @simonharrer ! I'll make an effort over the weekend to use the "correct" local computer approach and provide a new PR. If I can't solve it, you'll hear from me.

#222 Comment 5:
I sort of messed up my local copy of this branch (didn't really get that to work properly to start with, plus that I do not have the build system set up).

However, it would be much appreciated if someone could add the bug fix to the final 2.11 (noticed that beta 5 was just released), as this bug too often stalls the search. There are some more fixes in the master branch, but this is the most crucial one.

#222 Comment 6:
I backported this to the dev_2.11 by hand. 

#222 Comment 7:
Thanks! I appreciate it.

--------------------------------------------------------------
--------------------------------------------------------------
#218 Comment 1:
From what I see when looking at all the classes:
- the all make heavy use of Swing for the preferences plus the logic of interfacing with the external applications. To reduce complexity, this could be separated. Maybe just use static inner classes for the external tool wrapper. 
- the push classes differ in their number of preferences used (most only use a path, but emacs use emasPath:String, additionalParams:String, useEmasc23:boolean, and vim uses both a vimPath:String and a vimServer:String). 
- pushEntries and operationCompleted communicate via two boolean variables. These two methods should be grouped together in a separate class as all other methods have nothing to do with them.
- you need to be aware that the OpenOfficePanel also implements the PushToApplication interface. And this class is large (> 1000 LoC). 

#218 Comment 2:
- Not sure if I fully understand the first bullet.
- Yes. In the yet to be pushed update, I used the superclass method for creating the JPanel and path textbox and added other fields as needed.
- I've merged part of the functionality. The main problem I see is that there are a few different ways to check if it actually was successful, but I can not really say that I totally understand all the details. Now, I've introduced these methods in the abstract class and where applicable I only ask for the command string and check if the PushToClass provides its own error messages.
- Yes, that is something which I haven't plan on touching at this stage. Therefore, I try not to touch the interface at all. This may limit things a bit, but I'd still say that I get the amount of duplicated code down quite a bit and implementing a new (simple) PushTo would be even simpler than before without any cloning of code.

I'll push during the evening if things goes as planned.

#218 Comment 3:
Two larger suggestions:
- Create a class `PushToApplications` that contains the `applications` variable plus the init code currently located in `PushToApplicationButton` of all `PushToApplication` instances. Also move the `PushToApplicationComparator` class to the newly created `PushToApplications` class. 
- I would not make the getCouldNotCall and getCouldNotConnect methods. If the subclass wants other error messages, it has to override the operationCompleted method. This should also simplify things a little bit. 

#218 Comment 4:
For the second bullet: consider PushToLyx, would it be better to basically copy the `operationCompleted` method and just provide different messages? (The reason that PushToLyx needs different messages is that it communicates through a pipe/file, so the standard messages does not make sense, while the basic error behavior is quite similar.)

For the first bullet: let me see if I understand it. I'll get back. :-)

#218 Comment 5:
And thanks for the feedback! :+1: 

#218 Comment 6:
I think I understood the first bullet and have updated according to your suggestions (except the ones I didn't agree with, but let's see if you insist).

I realized a few more things that must be fixed:
- ChangeLog
- Copyright in new class
- Two remaining printStackTrace to be removed

Working on it...

#218 Comment 7:
This is what I meant with the other bullet point https://github.com/JabRef/jabref/commit/73a9ca1298a3e47ef8d06e51d34083f6dcf09fcd

#218 Comment 8:
OK! Makes sense. The reason I choose my approach was to always get some output in the status line. In your approach, there will "only" be a dialog in some cases. Not that it matters, so I'm happy to go with your approach.

#218 Comment 9:
Just for completeness: in your approach there may have been the case that at least one output may be shown (couldNotConnect could "fire" twice, once in the subclass and then in the superclass) whereas in my approach, exactly one output will be shown. 

#218 Comment 10:
Sort of. I admit that there could be some guidelines how to write a new PushToXXX (I was thinking about that). From my perspective (/in my version), the only reason for a class to have its own  `operationCompleted` is that it wants to do something else than just showing something in the status bar. So depending on what you want to obtain:
- Change status bar message
  - Use getCouldNotCall etc, no need for a new operationComplete
- Show a dialog
  - Use operationComplete, but the status bar will still be changed without the need for replicating that part of the code

Now, one can question if it is worthwhile to both show a dialog and change the status bar. It may be that one would like to a have a more uniform behavior for the (simple) PushToXXX (the OpenOffice one kept out of the discussion). Now, some just executes the command and if the system does not return an exception it "worked", others parse the result (or rather see if the call did return some text). Some show a dialog, some just a status bar message. Making this more uniform would change the design a bit. But I wasn't comfortable in deciding on the actual behavior of the classes (in a major way).

#218 Comment 11:
Okay, now I get it. 

Nevertheless, I would make it simpler first with lesser methods. If these methods are overridden in more classes, we can still extract them. 

Can you please rebase your changes on the current master branch? Then I can merge this in and add my small change as well. 

Thank you again for your effort in improving the code quality of JabRef. 

#218 Comment 12:
OK! Just to avoid issues similar to those in my other PR: if I just do a `git rebase master`and then push it, everything should be fine and not fifty or so extra commits? Thought I had a grip of things, but apparently not.

#218 Comment 13:
Yes, sounds correct. :-)

#218 Comment 14:
No, that didn't work as expected. No magic involved this time either. Just `git rebase master`. When I tried to push, it failed as I had to do a pull first. That didn't look like it contained anything (see the final commit). Then pushed and now this...

#218 Comment 15:
Ah, you have to do a force push instead of a pull.

#218 Comment 16:
OK, so now I reset, rebase and force push?

#218 Comment 17:
Yes. May the force be with you.

#218 Comment 18:
OK, now I think it is OK. At least the force-pushed version and the previous pull-push version are identical. Even though I mess these things up regularly, at least I get some practice in restoring things...

#218 Comment 19:
Hm, would like to merge this PR, but somehow it still (or again) has conflicts. :(

#218 Comment 20:
OK! I'll make a new attempt tonight. May contact you one way or the other
to try and synchronize the push.

#218 Comment 21:
@simonharrer Now I eventually got around to update the branch. Please merge ASAP. ;-)

#218 Comment 22:
I have the issue that the application is always reset to "LyX". Does anyone else experience the same issue? - Furthermore, I'd like to have the default application when JabRef is freshly installed, to be TeXstudio. :innocent: 

#218 Comment 23:
I've noted that it happens, yes, and I do not think it happened earlier. As
far as I know I haven't changed anything related to that though...

--------------------------------------------------------------
#217 Comment 1:
Think, that was a use case when screens weren't large. Regarding the alternativeto.net infopage about [TrayIt!](http://alternativeto.net/software/trayit-/), it seems that generic tools for that are also vanishing. Think [RBTray](http://rbtray.sourceforge.net/) is a good solution for users still wanting this functionality.

#217 Comment 2:
Do any other OS than Windows support this functionality? With the addition of pin to taskbar and Window grouping this should be near obsolete in my opinion. Therefore, giving a weak :+1: 

#217 Comment 3:
I don't know about this specific way of implementing it, but Ubuntu also 
has a "systray" (I don't know if that's what they call it, but a small 
icon area in the top right part of the desktop where "background" 
services are shown. For example Skype and Dropbox.)

#217 Comment 4:
Let's see whether users want that feature back. Then we can discuss about reverting this merge :innocent: 

#217 Comment 5:
Should be added to the CHANGELOG

#217 Comment 6:
Done in master branch

--------------------------------------------------------------
#215 Comment 1:
While trying to make test cases, I discovered `net.sf.jabref.bst.BibtexCaseChangersTest.testChangeCase()`, which seems to cover most of our wishes and even can handle intra word casings correctly: `Vall{\\'e}e` -> `VALL{\\'E}E`. `HAllo {worLD}. HOW` -> `hallo {worLD}. how`.

I would suggest to remove `CaseChangers` completely and to use `net.sf.jabref.bst.BibtexCaseChanger` only to avoid code redundancy. I am aware that the code of BibtexCaseChanger is more ugly than the current code of CaseChangers, but it covers the strange cases (e.g., case also LaTeX characters).

#215 Comment 2:
I will have a look. But the bst package is a candidate to be thrown away as
it is unmaintainable.

#215 Comment 3:
I had a look: The CaseChangers have Title, Upper, Lower, UpperEachFirst and UpperEach whereas the BibtexCaseChangers only have Title, Upper and Lower. Small words are not detected in the BibtexCaseChangers algorithm. The only thing that the BibtexCaseChangers are better in is the detection of special latex characters like umlauts. 

From my perspective, the BibtexCaseChangers class is hard to maintain. And it is used heavily in the `bst` package, making it very hard to improve the class as its interface has to stay the same. I think the current solution is good enough for a lot of use cases already. We would loose a lot and gain too little if we would replace the CaseChangers by the BibtexCaseChangers.

I would suggest to leave the BibtexCaseChangers class alone, and in the future remove the `bst` package and replace it with something else. Or just delete it. ;)

If someone has really a lot of time, they can use the test cases to drive an improved CaseChangers version. One simply has to determine a different `boolean[] protectedChars` array based on the title, namely, to not make every char within curly braces protected. 

#215 Comment 4:
I made the interface a bit more modern (using enum instead of char as parameter). Still procedural style than object oriented, but for that use case, I think procedural style is more fitting. :innocent:

I made test cases based on https://github.com/JabRef/jabref/pull/176#issuecomment-14272379 at https://github.com/JabRef/jabref/blob/03703a5517601c3e38f5f9a68a6f7d15ff760460/src/test/java/net/sf/jabref/bst/BibtexCaseChangersTest.java#L107. Think, it's time for a call.

--------------------------------------------------------------
#211 Comment 1:
@lenhard See the https://github.com/JabRef/jabref/tree/fix-linebreaking branch if you haven't done already. From my first tests there are some more problems with this class.

#211 Comment 2:
@stefan-kolb The branches have different targets. You works aims at _parsing_, while this PR aims at _writing_. 

#211 Comment 3:
Oups sorry ;) Just delete the comments then!

#211 Comment 4:
Does this make #123 obsolete? :innocent: 

#211 Comment 5:
@koppor: No it does not. It just addresses `LatexFieldFormatter` which does formatting of bibtex field text. `BibtexWriter` still does field sorting and `BibtexParser` is a completely different "construction site" ;)

--------------------------------------------------------------
#206 Comment 1:
The merge entries dialog is not properly sized here. Can you do something about that?

![mergeentries](https://cloud.githubusercontent.com/assets/1366654/10269674/31184988-6ade-11e5-84e9-4df699a4610b.png)

#206 Comment 2:
Yeah, I noticed that sometimes you will need to scroll earlier today. I must never have had that complete entries earlier. :-)

#206 Comment 3:
Not completely happy as the column headings do not align properly when the scroll bar is introduced. I'd also like to make the list scroll to the top, which I'm so far failing. Anyway, thought I push it for possible comments so far. (From a function point of view, the code may need a bit more clean up.)

#206 Comment 4:
One problem (from my perspective) is that the column headings are not well (perfectly) aligned when the scrollbar shows up. No idea how to solve this, but I think it is OK to merge (and continue working on it later). If you want I can make a rebase -i to reduce the number of commits.

#206 Comment 5:
I am not a Swing/Layout expert. So cannot help with this alignment issue. From my point of view this PR seems to improve the merge functionality. I give my :+1: 

#206 Comment 6:
The "long term" plan is to eventually add this functionality to the duplicate entry dialog, so that one easily can merge two entries instead of just selecting one (or both).

I think it is (it should be) possible to detect when the scroll bar appears/disappears and then update the layout, but I do not really know how nor if it is a good idea (it is flickering quite a bit already).

--------------------------------------------------------------
#205 Comment 1:
Well, looks like a decent mess of commits... Still trying to learn how to merge/rebase etc. Tried rebase -i now and for a while I thought that might work, but then at the end even more of a mess (and that is not pushed)...

#205 Comment 2:
OK, got it down a decent amount of commits (from 50+), so now I somewhat happy at least. Of course I can reduce it further (I guess, considering that I succeeded with this).

#205 Comment 3:
Yes, I saw that the translation commands were inconsistent and it appears that both works.

#205 Comment 4:
Oh, the new `FormBuilder` seems to be more complicated than the `DefaultFormBuilder`. Always using explicit `xy` seems to be more complicated than just doing `append()` and `nextLine()`. Is this easy interface really removed? :see_no_evil:

See e.g. changes in `ExternalFileTypeEntryEditor.java`: https://github.com/oscargus/jabref/commit/5e18736b215fbfb2c0b382db04ab421d4bd54ecb

#205 Comment 5:
Regarding `FormBuilder` interface: I'm not sure. The documentation of it is quite limited (as far as I can find), but all the examples in the JavaDoc documentation of the class use xy and neither `append` or `nextLine` are available. 

I believe that the improvement of `FormBuilder` is rather that it automatically can generate JLabel, separators, etc. Actually, having to always specify .xy makes it simpler to get the layout you want (although a bit more code to write).

#205 Comment 6:
OK! Reduced the number of commits. Not sure if it was a good idea or not. Kept one as there were a few comments related to that, but it didn't work the way I expected...

The last commit contains the changes introduced now. Mainly the ones that were requested (and a few other minor things).

#205 Comment 7:
You don't always need to reduce the commits. When something is reviewed by us, new changes can simpler be evaluated as diff than starting from scratch 😇 

#205 Comment 8:
Well, the idea was at least one of the previous commits which were commented on, but somehow that didn't work out. Anyway, all diffs are in 6433826, but clearly you can not see your previous comments...

Anyway, I think things are improving on my side, so in the future you can expect PRs with single commits and then additional commits in response to comments. :-)

#205 Comment 9:
:+1: The discussed abstract class and other things (like `CITE_COMMAND`, #204) would be nice, but we should do that in a separate PR to keep things going.

#205 Comment 10:
Yes, I plan to do that (CITE_COMMAND, abstract class) in the near future, but I believe a separate PR is more appropriate to keep the changes well separated (although I admit I did some changes in this PR such as unified strings which is unrelated to stated purpose...).

--------------------------------------------------------------
#204 Comment 1:
Looks good. Minor comments above. The abstract class `AbstractPushToApplication` could be left as future work. :smiley:

#204 Comment 2:
Thanks.

I agree. There are changes to the other PushToXXX classes in the FormBuilder pull request, so I would prefer to base the `AbstractPushToApplication` on the unified source. :-) (Especially with my still improvable git wizardry).

#204 Comment 3:
OK, I let this go through, we will work on https://github.com/JabRef/jabref/pull/205 and possibly finally with another PR.

--------------------------------------------------------------
#200 Comment 1:
Great! Looks good to me. :+1:

#200 Comment 2:
Thank you for this pull request. It really looks very good. 

Could you add tests similar to the CaseChangersTest class? We try to improve the code quality in JabRef, and automated tests for the logic package is an essential part for this. 

A very minor comment: Instead of `UNICODETOLATEX` can you please write `UNICODE_TO_LATEX`, as it makes it a little bit more readable. 

#200 Comment 3:
OK! Will add test cases and change tab to spaces in ChangeLog.

#200 Comment 4:
I fixed the ChangeLog issue. In my opinion the tests are more related to the HTMLConverter file than the rightclick menu as that is where the conversion logic is. As such, it makes more sense to add a test next time I work on that.

#200 Comment 5:
OK, I now realized the test thing. I thought this was primarily the right click menu, but indeed I did add the Converters class which clearly needs testing.

However, I had an issue which I think relates to that the JabRef preferences are not accessed. It seems like Globals.prefs is not activated during testing. As such I had to add a bit of logic to check for this, which I guess in general is good, but actually running JabRef I assume it will always be non-null. Is there a better way to deal with this?

#200 Comment 6:
We thought at the Wiki (https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases) that you add `Globals.prefs = JabRefPreferences.getInstance();` somewhere in your tests.

#200 Comment 7:
Ahh, great! 

#200 Comment 8:
The characters I used in the failed test were åäö. Is this an issue with the test environments or should we avoid directly representing every character above 128? I could of course write `"\u..."`, but since this worked when running it on my computer and I had the impression that all code should be in UTF-8 (recalling some discussion a few years back regarding the ChangeLog), I thought it was OK.

#200 Comment 9:
Yes, `UTF-8` is the way to go. `jabref\src\test\java\net\sf\jabref\logic\util\ConvertersTest.java` is encoded in `Cp1252` as far as I can see. Could you please recode it?

In my Eclipse, I had to change at the preferences "General -> Workspace" "Text file econding" to `UTF-8`. I just pushed a patch to `build.gradle` to have `gradlew eclipse` generate the right encoding information for the JabRef project.

Please vote at [GRADLE-2274](https://issues.gradle.org/browse/GRADLE-2274) to have the encoding information also transformed into eclipse at `gradlew eclipse` automatically without any patch.

#200 Comment 10:
OK, the test seem to go through now. However, the CHANGELOG seems to be filled with two lines. Are you sure about the Copyright statements in the header? At least the year in `ConversionMenu.java` doesn't match. You could also add yourself explicitly.

#200 Comment 11:
:+1: 

I think we can merge this. Thank you for your contribution!

--------------------------------------------------------------
#198 Comment 1:
Is this a clean version of #59? Should we close #59 and concentrate on this one?

#198 Comment 2:
The thing is, we want to improve our code quality. Could you use a formatter as described in CONTRIBUTING.md? May I also ask to remove commit a6919e6 from here as it has nothing to do with this PR? You can open a separate PR for updating the translation :). Sorry for being picky, but we are really trying to improve our code quality.

#198 Comment 3:
OK Oliver,
I will format the code accordingly and remove the commit from the PR

## 

Igor Fabio Steinmacher, Ph.D.
Professor in Dept. of Computing at Universidade Tecnológica Federal do
Paraná

On Thu, Oct 1, 2015 at 6:42 PM, Oliver Kopp notifications@github.com
wrote:

> The thing is, we want to improve our code quality. Could you use a
> formatter as described in CONTRIBUTING.md? May I also ask to remove commit
> a6919e6
> https://github.com/JabRef/jabref/commit/a6919e6fb168bcee50c24e077e7a087907ca9483
> from here as it has nothing to do with this PR? You can open a separate PR
> for updating the translation :). Sorry for being picky, but we are really
> trying to improve our code quality.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/198#issuecomment-144858092.

#198 Comment 4:
Looks good to me. 

#198 Comment 5:
Last thing: Could you add a CHANGELOG entry? :innocent: 

#198 Comment 6:
Did it.
OK! A long time I didn't send anything myself. I agree that I need to follow the process and practices, and I did not read them after returning... Hope this is good to go @koppor 

--------------------------------------------------------------
#197 Comment 1:
Functionality also seems broken.
Looks like the WinShell plugin is not working in our current setup.
I cannot find the AppUserModelID inside our *.lnk" file.
See http://stackoverflow.com/questions/5438651/launch4j-nsis-and-duplicate-pinned-windows-7-taskbar-icons

Our dev version number also breaks this functionality `VERSION--snapshot--DATE--GIT_HASH`

Are we using the unicode version of NSIS?

#197 Comment 2:
As far as I know we do not use the unicode version of NSIS, but the older one instead. 
NSIS 2.46 instead of 3.0b2

I am not sure if this ever worked. But it would be really helpful on windows machines. 

#197 Comment 3:
Should work correctly now.
It also shows a pin to taskbar option when right clicking on the exe file.

**However, the pin option in the menu is not showing up for a running instance.**
http://stackoverflow.com/questions/1834599/pinning-a-java-application-to-the-windows-7-taskbar
https://msdn.microsoft.com/en-us/library/dd378459(VS.85).aspx#host

#197 Comment 4:
Possible further taskbar stuff:
https://msdn.microsoft.com/en-us/library/dd378460(v=vs.85).aspx

#197 Comment 5:
Is there a use case to have different JabRef versions installed separately? Because we could just use the String "JabRef" for the AppID. Then, we do not need to pass around the current version number. This would make things a lot easier. 

#197 Comment 6:
Useful for working with a version, and testing another one, no?

#197 Comment 7:
I think, testing can be done using `java -jar`. Other applications also don't enable installing of two different versions. This might also get difficult when having preferences updated (and downgraded?!)

--------------------------------------------------------------
--------------------------------------------------------------
#195 Comment 1:
Thank you for this pull request!

--------------------------------------------------------------
#193 Comment 1:
:+1: 

#193 Comment 2:
Can you please rebase this pull request on master? In the present state it cannot be merged it directly. 

#193 Comment 3:
OK! Will see if I can figure out how to rebase it (I thought I had found a good practice for this) and change the tabs to spaces in ChangeLog.

The if statement does indeed look quite ugly... I'll hand edit it for now.

#193 Comment 4:
Ahh should have rebased... Should I start over or can it be solved in some clever way?

#193 Comment 5:
Merge is also OK. For me, it's simpler to use than resolving conflicts at rebasing :)

--------------------------------------------------------------
#192 Comment 1:
Would you mind adding just a few test cases to the already existing `CaseChangersTest` class so that the new feature is covered as well in the tests?

#192 Comment 2:
OK! Will generate some test cases and change the tab in ChangeLog.

#192 Comment 3:
Much fewer commits now and I think it is good to go.

#192 Comment 4:
One final remark from my side regarding the comments: this class previously worked on Strings with words. Now it works on Strings with words with special behaviour for words in {}. Can you please add a comment for this?

From the code side, I give my :+1:

#192 Comment 5:
@simonharrer I added comments at 96cf1d2a8f4ca

#192 Comment 6:
@koppor Thanks for sorting out the comments!

--------------------------------------------------------------
#189 Comment 1:
Go for it :+1: 

--------------------------------------------------------------
#187 Comment 1:
The remaining code of `FileContentParser.format` is a complete mess of one-off hacks. I am very much for deleting it and rewriting the parsing logic to just remove newlines for non-multiline fields and ignore tabs or spaces completely. If we document that with tests, at least we know what the code is doing... 

#187 Comment 2:
859274e54af0948108ff16fa697dabb595768c12 replaces the weird code in `FieldContentParser` with a single (and simple) regex. Now the tests pass and, as far as I can tell, #114 and #186 are fixed. Could someone else please double check? (Note: Parsing is only done when loading the file. So if you add faulty text to a field, you can save it as such. On restart, the errors should be fixed by the parser). 

If something is not quite right, please add the faulty behavior as a test!

#187 Comment 3:
thanks @stefan-kolb! the "file" field is now ignored from parsing.

#187 Comment 4:
Ok I think we are good to go. You can also close all other mentioned issues for now!

#187 Comment 5:
Works great here :+1: 

--------------------------------------------------------------
#183 Comment 1:
Hm, one idea: should there be a warning if the file could not be removed? This can happen when the file is still open in adobe acrobat. As a user I would like to close adobe acrobat and retry the deletion again.

Sent from my iPad

> On 28.09.2015, at 20:50, Stefan Kolb notifications@github.com wrote:
> 
> In case the auto downloader saved a wrong file, the user might need to delete it #101.
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/JabRef/jabref/pull/183
> 
> Commit Summary
> 
> Adds a delete local file action to FileListEditor menu
> File Changes
> 
> M src/main/java/net/sf/jabref/gui/fieldeditors/FileListEditor.java (31)
> M src/main/java/net/sf/jabref/logic/util/io/FileUtil.java (55)
> M src/main/resources/l10n/JabRef_en.properties (2)
> Patch Links:
> 
> https://github.com/JabRef/jabref/pull/183.patch
> https://github.com/JabRef/jabref/pull/183.diff
> —
> Reply to this email directly or view it on GitHub.

#183 Comment 2:
Good point. But I can only catch `IOException` for this which is rather generic?!
Also the removal could be transactional, i.e. only unlink and delete or keep the current state?!

#183 Comment 3:
I would suggest:
1. Try to delete file
2. Only if the file has been deleted successfully, unlink

This algorithm also includes the case that the file is not there before, reducing the operation to simply unlink. 

This ensures that the user can retry and simulates a transaction. In case of an error, you can simply show a message through a popup. 

#183 Comment 4:
:+1: 

--------------------------------------------------------------
#182 Comment 1:
LGTM :+1: 

--------------------------------------------------------------
#179 Comment 1:
Thank you for the pull request. Could you add a CHANGELOG entry as proposed in our [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md)?

--------------------------------------------------------------
#178 Comment 1:
:+1: 
Should we clarify [in the wiki](https://github.com/JabRef/jabref/wiki/Translating-JabRef) that a new translation requires all three properties files (even if no keys are translated)? 

@mlep This might be good to know for you, too.

#178 Comment 2:
Noted!
I can be the one adding it to the wiki if you want.

#178 Comment 3:
Okay, thank you!

#178 Comment 4:
Reading the wiki, it seems clear to me that the "Step-by-Step guide" (using Popeye) states that the 3 files must be created.

--------------------------------------------------------------
#176 Comment 1:
Thanks for your pull request! 

One thing to discuss is the handling of curly braces... 
Some examples:
- `This is a simple example {TITLE}` should be `This is a Simple Example {TITLE}`
- `This {IS} another simple example tit{LE}` should be `This {IS} Another Simple Example Tit{LE}`
- `{What ABOUT thIS} one?` should be `{What ABOUT thIS} one?`
- `{And {thIS} might {a{lso}} be possible}` should be `{And {thIS} might {a{lso}} be possible}`

Your solution only covers the first and parts of the second example. 
I already racked my brains about this point yesterday and came up with no really satisfying solution. The only working implementation I could produce was to save all parts between the outermost curly braces (by counting braces :flushed:) and to restore the changes after performing the case changes on the input string... 

Anybody else another idea?

#176 Comment 2:
You are correct.This limitation is mentioned (to some extent) in the commit message. The PR says improved, not perfect. :-) Third case should be manageable, the second and fourth are quite esoteric in my opinion.

#176 Comment 3:
We decided in the team to support all of the four cases.

Do you want to implement the remaining logic? 
Or shall we merge your PR into our code base and we will provide the remaining cases?

#176 Comment 4:
At the moment, each implementation has to split the title and handle the logic to decide what is in `{}`brakets and what isnt. I would propose to extract that functionality. 

I also vote for tests! :)

#176 Comment 5:
Been busy with (real) work for some time...

I'm not really sure where the @formatter:on/off should be. Can I see that somehow?

While I agree that it would be excellent to add handling of all four cases, I believe that the current approach is still a major leap (making it not break all formatting at least), so I'd say go ahead and merge. I will not work on it immediately, but given that no one else does it, I guess I may eventually get around to it.

#176 Comment 6:
Oh, now I also see that my next, independent, bug fix ended up in this pull request. This basically shows that I have quite limited knowledge of the GitHub and pull request system, unfortunately... Sorry about any mess caused. The idea was to create a separate pull request for the IEEEXploreFetcher bug fix (which I ran in to during the research application I was working on day and night for the last few days).

#176 Comment 7:
With that said: I clearly understand the idea with pull requests. I've just not been able to figure out how to work with them (or probably more GitHub) in practice, but this seems like a subject not to continue discussion here any further. I'll read up!

#176 Comment 8:
QuickTip: Create a branch for each PullRequest - all commits to this branch will end up in the same PR.

#176 Comment 9:
I'll start all over and provide nice clean PRs from now on... ;-)

#176 Comment 10:
Great @oscargus :-)

#176 Comment 11:
New PR is #192

--------------------------------------------------------------
#175 Comment 1:
Are there further improvements to be made? Otherwise, this PR is ready to merge.

--------------------------------------------------------------
#172 Comment 1:
Nice idea with the preference migration class. 

What about the encoding that is put on the first line of the bib file?

#172 Comment 2:
The preference migration class was Stefan's idea :)

The encoding that is put on the first line of the bib file is the value that is stored in `JabRefPreferences.DEFAULT_ENCODING`. Thus, this PR performs the automatic upgrade.

#172 Comment 3:
What just came into my mind: the URLDownload class also uses encodings, I think. It would be interesting to search for "utf" in the source code to see if there are any usages of encoding also in other places. 

#172 Comment 4:
What about reading a file that uses the old "utf8" encoding. Can this break the functionality as this encoding cannot be resolved anymore?

#172 Comment 5:
Searching for "utf": 562 hits. Have fun wading through that ;-) There are also quite some usages of "UTF-8".

Actual encodings are resolved via `ENCODING_NAMES_LOOKUP` in [the Encodings class](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/logic/l10n/Encodings.java). The old "UTF8" is still in there, as well as "UTF-8", for compatibility. That way it can still be resolved.

#172 Comment 6:
:+1: 

So the migration mapping is a subset of the actual encoding mappings, as far as I understand this. So this is at the moment duplicated. But I am not sure whether we should just leave the duplication as it is. 

--------------------------------------------------------------
#166 Comment 1:
Regarding the `private final AbstractAction toggleGroups = new GeneralAction` statements (see my second comment), you don't agree?

#166 Comment 2:
@koppor I agree. But I think, this behavior was introduced by a change you made in 77d1ea868c3381d78b19f5e15a1364de9033eb2a - using this setting IntelliJ creates endless lines using auto-format.

#166 Comment 3:
I don't have a strong opinion about this. Sometimes it is more important to see what variables exists (then the new formatting is better) and sometimes you are more interested in how the initialization is done (then the old formatting is better). So should I revert this too?

#166 Comment 4:
Yeah. I thought, I did run the gradle formatter plugin, but it seems, it didn't touch that file somehow :(

@tobiasdiez Could you revert and add @formatter:on/off strings? I prefer to see the initialization code :innocent: That would really help!

#166 Comment 5:
What is the current state of the eclipse xml @koppor @matthiasgeiger 

#166 Comment 6:
Updated after discussion with @koppor in 0fd8a0c 

#166 Comment 7:
As new formatter rules are in place, we should close this and follow up at #249.

#166 Comment 8:
:+1: 

--------------------------------------------------------------
#165 Comment 1:
:+1: 

--------------------------------------------------------------
#164 Comment 1:
As timestamp and owner are both not on by default anymore, we should also not show both columns. Hence, I vote for removing support for the timestamp column in the defaults as well. 

#164 Comment 2:
Why not colored for required/optional anymore by default? Any rationale behind your PR?

#164 Comment 3:
One reason is that these colors are not self-explanatory. It is hard for the user to recognize that blue fields are optional. Moreover, I don't see any value by coloring the fields by required/optional (except in some special cases maybe). Also then the complete layout is more homogeneous and clearer. But I have no strong opinion about this...

I will disable the timestamp column later.

#164 Comment 4:
Thanks for the detailed answer. I give my OK for this PR.

--------------------------------------------------------------
#163 Comment 1:
Seems ok to me. 

#163 Comment 2:
Yeah, OK. If it is necessary, `@formatter:off` can be used.

--------------------------------------------------------------
#162 Comment 1:
Regarding new eclipse formatting rules: for me it is very hard to review the patch because there are too many lines that have been changed because of the change in formatting rules. This makes it very hard to determine which lines do actually have changed. I would propose that eclipse formatter changes should be done in isolation in separate pull requests. 

#162 Comment 2:
I completely understand this. Now there is a second pull request #166 just containing the format/cleanup changes. Is this enough to make comparison easier or should I somehow also modify this PR?

#162 Comment 3:
The thing is that when I want to know what happened in a pull request, I look at https://github.com/JabRef/jabref/pull/162/files which in this case is +2000 lines and -2000 lines at the moment. A lot of these lines were just reformatted, e.g., all the changes in the SearchManagerNoGUI. When the PR is small, formatting changes are no problem, but in this case it would help if this PR would only contain the functional changes, if this is possible without reprogramming everything. 

Regarding the thing with the AbstractWorker and the run/update method. This is correct as it is because in the constructor of the AbstractWorker a bit of MAGIC (it is really a lot of magic) happens so that when you invoke the run method, it will run ouside the Swing EDT and the update method will run inside the Swing EDT. 

Regarding the SearchRule: At the moment the search rule can be configured during its constructor and then invoked with different queries to allow reuse of the configuration done by the user in the GUI. At the moment the configuration mainly consists of [bool caseSensitive, bool regex]. But this model does not fit that well. I think it would be a good idea to just create test Predicates that receive a BibtexEntry and they can determine whether it will be included in the search or not. 

I think we can delete "Select matches". I do not see any usefulness in this setting, especially as it has not yet been implemented. 

"Autocomplete Names" does work on my machine. We should not remove it. 

#162 Comment 4:
We do not want to loose all the work you did. Can you rebase on master? I will try to have a look at all the changes. 

Another remark: why not make the live option the only one search mode and removing the explicit search button? For me, this is the typical search behavior in most of the applications I know. Even windows search. 

#162 Comment 5:
I will try to rebase on master at the weekend.
What should I do with the settings "Autocomplete names" and "Select matches" (see above)?

#162 Comment 6:
The rebase run into problems since some files were moved (for example BasePanel.java). This is why I just have reverted the commit containing the code formatting changes. Now the code should be more understandable.

#162 Comment 7:
@tobiasdiez It would be very, very helpful if you managed to show the diff only and if all the merge and reformat commits would have been gone.

Proposal: Add a new local [git worktree](https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows) and copy all the files of your current branch to the new directory. Then do a new commit. I hope that this commit has clean changes and is readable. Then you can do a `git push -f origin:uisearch` to overwrite the `uisearch` branch with the clean commits. Would that be possible? Then you can also reset your original branch to the new origin/uisearch. If something goes wrong, you still have a copy locally where you can compare using [KDiff3](http://kdiff3.sourceforge.net/) etc. (For the record, there are [many good diff tools](http://stackoverflow.com/questions/572237/whats-the-best-three-way-merge-tool)).

#162 Comment 8:
@matthiasgeiger and myself checked the new search UI and we liked it. Especially the live feature! :)

We are currently discussing to simplify the search altogether in #104. Maybe we can combine a few things. May be you can have a look at this issue as well and we can work something out for integrate these ideas in your PR as well. 

#162 Comment 9:
@koppor I opened a second, cleaner PR #307 (I don't want to override my branch). I hope this is also ok.

@simonharrer I had a look on the discussion in #104 while implementing this PR. Indeed, some of the design decision were strongly influenced by this thread. On the other hand, some of the motivations for the suggested changes in #104 do no longer apply to the search control at the top of the window (in contrast to the previous implementation as a side control). For example, the size of the dropdown showing the different search options is not very important so that is now no problem to show all the search options as a list.
To be honest, I would prefer if you could accept this PR and we discuss further improvements later. It was very time consuming to merge all the commits from the last months and it would be nice if I don't have to do it again :)

#162 Comment 10:
Ok, we will disucss this in the upcoming developer call. 

#162 Comment 11:
Please follow up at https://github.com/JabRef/jabref/pull/332.

--------------------------------------------------------------
#158 Comment 1:
:+1: 

--------------------------------------------------------------
#150 Comment 1:
Wow, the features look impressive!

Does it check for presence or absence of 4 digit year number? I think, presence of 4 digits makes sense?

Wrong braces: Maybe we should have two modes for a bibtex file - collecting and paper writing (see  #113). And for paper writing, we should have some brace check. In the collecting mode, no braces should be used at all.

Author/editor check: What a useful tool. I'm always struggling with that.

We should keep these checks! The checks should be **moved** to the fields: If a field looses the focus, the check should be fired. If the field is wrong, the field should be colored in red.

#150 Comment 2:
Is there already a similar check for another field in place? Or should we
just Mark the Entry red in the table as when there is something missing?

#150 Comment 3:
At least the BibTex-Key is currently checked (e.g., spaces are not allowed).

#150 Comment 4:
There is already a related feature discussion here: #131 

#150 Comment 5:
I even didn't know the check for the BibTex key. JabRef really insists on correct BibTeX keys there...

An entry as a whole is marked in red if something is wrong: The number in the first column gets a red background. I suppose, it is only marked if a required field is missing. In the case of `article` additionally, if `volume` and `pages` is missing. But there is no fly-over-help at the red number :worried:

#150 Comment 6:
Hm, this is a lot of effort to put a system in place which can handle such checks and validations in a sensible way. 

Maybe we can leverage the tool tip text that is set in the IncompleteRenderer. But I cannot see the tool tip text in JabRef ...

#150 Comment 7:
Is it an aspect for #113? Maybe we should close this pull request and add a new issue to implement the checking behavior. JabRef should support the user whenever possible :smiley:

#150 Comment 8:
Large UPDATE:
- [x] refactored existing integrity checks and provide test cases for them
- [x] instead of complex GUI elements, use a simple results table for displaying the validation results
- [x] instead of having separate language property files for a few keys, use the default ones
- [x] minimal but working example of such a validation

I propose to merge this as this has more value than the "legacy" implementation before. 

#150 Comment 9:
Great, that this integrity message resource properties are gone now ;-) 

And for the first time this feature seems to work :wink:

Not sure how much time it requires to implement, but a nice feature would be to open the affected entry and setting the cursor in the affected field when selecting a found integrity issue. 

Another minor aspect: the results table currently wastes a lot of space for the affected field but the message is not completely readible.

#150 Comment 10:
Good ideas. But I think the current state is good enough to have a usable and helpful feature.

#150 Comment 11:
I think the aspects above are rather crucial for good usability - I will check how easy this can be implemented...

#150 Comment 12:
Done. :metal:

#150 Comment 13:
:trophy: awesome. 

#150 Comment 14:
Bug: when the field for which the validation files is not required, the field is not found. 

Example: title has an error, but the entry is of type Misc and only requires a bibtex key. 

#150 Comment 15:
Fixed in f9ea1d1fe1dd5d01457fecfabbfe522da9e4cfd3

--------------------------------------------------------------
#147 Comment 1:
:+1:

#147 Comment 2:
LGTM :+1: 

#147 Comment 3:
Looks good. One small suggestion: it might be helpful to additionally log a warning if an icon is not present.

#147 Comment 4:
Ok, will add a warning log statement as well. 

#147 Comment 5:
On startup there are several icons that cannot be found:
- focusTable
- writeXMP
- openFolder
- openSpires
- abbreviateMedline
- abbreviateIso
- unabbreviate
- resolveDuplicateKeys

I modified the code so there are no warnings and the actions that were based on these keys do not require an icon. This is done by making the use of an icon explicit. 

#147 Comment 6:
False positives
- togglePrinted
- toggleRelevance
- toggleQualityAssured

The following icon keys are not used in JabRef at the moment:
- abstract
- close2
- quality
- plugin
- setRelevant
- medline
- jabrefIcon
- importFromKeywords
- exportToKeywords

What is used in the code but not supplied by the icon set
- openFolder
- groupRegular

--------------------------------------------------------------
#146 Comment 1:
The following icon keys are not used in JabRef at the moment and have been deleted in this pull request.

abstract
close2
quality
plugin
setRelevant
medline
jabrefIcon
importFromKeywords
exportToKeywords

TODO What is used in the code but not supplied by the icon set

openFolder
groupRegular

#146 Comment 2:
Oh, why is "setRelevent" there, but not "setRead", "setPrinted". What is the reason for that?

Why is there importFrom/exportTo keywords? What is the intended use?

#146 Comment 3:
There is no "setRead" or "setPrinted" because when I implemented these features there was no need for such an icon.

#146 Comment 4:
This is tracked in the icons branch now. Closing this. 

--------------------------------------------------------------
#143 Comment 1:
Why does it lose focus anyway? This makes no sense to me. Saving should be a background process triggered by a key event.

#143 Comment 2:
I think, a backport to dev_2.11 is not necessary.

@stefan-kolb I agree. Very strange that the focus is changed.

#143 Comment 3:
... debugging this code is hell! :scream:

The new fix fixes the problem where it is caused: Method `updateField` in `EntryEditorTab` re-sets the textfield which causes a loss of the current caret position...

#143 Comment 4:
This looks way better and easier to maintain :blush:

--------------------------------------------------------------
#140 Comment 1:
The new way to include libraries is to use gradle. No need to check in libraries into the version control.

See `build.gradle`.

(Sorry, currently not more time. On a business trip)

#140 Comment 2:
First of all thanks for your PR :smiley: :+1: 

Like koppor said the preferred way to include dependencies is via a Gradle dependency that can be resolved by a package manager. This of course implies that the dependency is available via Maven or in our case jCenter. This could be a problem with jSplitbutton. But maybe it can be included if it i GPL licensed.

Concerning the code:
The current build fails in CircleCI. Take a look [here](https://circleci.com/gh/JabRef/jabref/426). It cannot find jSplitButton.
It is necessary to remove all commented out code when the PR is finished.
Also, the indentation is sometimes inconsistent as far as I can see.
I've also commented a bit on the code directly via comments.

Best, Stefan

#140 Comment 3:
Regarding the formatting, the [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md) should provide helpful information, doesn't it?

#140 Comment 4:
Thanks for the feedback. I'll edit the PR accordingly. One question regarding this "dependencies via gradle" thing. As far as I can tell, the library JSplitButton is not available in jCenter or Maven. However, it is licensed under the LGPL. Thus I can fork it and add it to jCenter, right? Is this the way to go? 

#140 Comment 5:
IMHO this isn't worth the effort for such a small lib as the jar you are using - there are still some other libs in the folder which cannot be loaded from jCenter.

Regarding the failing tests: build.gradle is referencing the wrong lib - you have not adjusted  the filename to JSplitButton_1.2.jar

Without having it tested: Looks like a nice feature to me! Especially the autocompleter is cool! :+1: 

#140 Comment 6:
I would propose to port this patch to the `master` branch if possible.

#140 Comment 7:
Regarding the library. Please add an item to `external-libraries.txt` (`used-libraries.txt` in dev_2.11).

#140 Comment 8:
This is a wonderful idea, the search bar on the left takes so much space and really gets in the way when working with groups. So I really hope this gets implemented!

--------------------------------------------------------------
#137 Comment 1:
I propose to merge the current status into master. The changes described above cover the changes possible without restructuring the whole Action architecture in the GUI.

#137 Comment 2:
LGTM :+1: 

#137 Comment 3:
Ah... answered just here: https://github.com/matthiasgeiger/jabref/commit/8e3ad9d9804be70cf47f6e20191efcaae2ddfe23#commitcomment-13044544

--------------------------------------------------------------
#128 Comment 1:
:bowtie: :+1: 

--------------------------------------------------------------
#127 Comment 1:
Thanks :+1: 

--------------------------------------------------------------
#125 Comment 1:
@mlep This PR is missing the JabRef Bundle. will this be added soon? This is not a complete localization.

#125 Comment 2:
I am not sure what you mean by  "missing the JabRef Bundle".
The menu have been translated, but not the strings for JabRef_fa.properties. Is it the issue?

#125 Comment 3:
Correct, I mean JabRef_fa.properties.

#125 Comment 4:
I am going to contact the translator. A proposed deadline?
Should an untranslated file JabRef_fa.properties be added to the repository? (I mean a file with only the strings to be translated)

#125 Comment 5:
We will add an untranslated file for now. Will be merged with PR #178.

--------------------------------------------------------------
#109 Comment 1:
Issue #119 is related to this issue. Besides the preview, the formatter is used for determine the filename of a PDF file: Preferences -> Import -> File name format pattern. Maybe we should ask at the mailing list?

#109 Comment 2:
Should be done in student project or later. Will close for now and chery-pick the changes.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#101 Comment 1:
About "Do we want to include more Crawlers? If yes, which?":
You have a gold mine in the section "Search (and import) from my specific database, please." in the sorted list of feature requests (this morning email).

#101 Comment 2:
@mlep Thanks :+1: 

#101 Comment 3:
Your feature works pretty well. But there are cases in which a file can be downloaded but it is not the file that is intended. Thus, there must be a way to preview the pdf before adding it. 

#101 Comment 4:
We need to evaluate how often this will happen. Can you give me an example?

I think with a reasonable amount of crawlers this will work with a very high accuracy.
I would rather have the user open and check the file and then delete it and manually download it if it is not the correct file, as this will happen very seldom. If we use your approach we need to preview every PDF that will be anyway in > 90% of the times the correct one.

#101 Comment 5:
Ok, deletion after download is OK when it is done easily. At the moment, I cannot easily delete the file entry from the bibtex entry AND also delete the file from the hard drive. When we fix this, we do not need the check feature in the first place. Good idea!

My example was: I wanted to download the conference article Barros, Service Interaction Patterns, but got the techrep instead. Another issue was that I got a PDF of slides in some language I do not understand, probably czech when attempting to download a very old version of the BPMN standard.

#101 Comment 6:
Regarding, "clean all used fields from Latex stuff, e.g. {~ etc.", this should be one of the "Edit -> Cleanup entries" functionality, isn't it? If not, this functionality should be added there, too.

Regarding "check for duplicates", JabRef offers "Search -> find duplicates". This functionality should be reused here.

#101 Comment 7:
A similar approach might have been taken by Christoph Lehner: https://sourceforge.net/p/jabref/discussion/318824/thread/6e5fea64/ Is it possible to synchronize somehow?
I think, this makes https://github.com/wbrenna/LocalCopy obsolete, doesn't it?

#101 Comment 8:
The approach of C.Lehner is the base repository https://github.com/lehner/LocalCopy.
This PR is a native replacement for this and all forks.
Also, we don't support plugins anymore.

#101 Comment 9:
 What is missing to get this PR functional and integrated into master?

#101 Comment 10:
Make it nonblocking and keep the progress bar! Some GUI stuff that is not that easy to achieve. @simonharrer wanted to take a look at that.

#101 Comment 11:
This is just too messy to understand right now. Fixing this would require fixing the separation of GUI Event Thread with other Code parts - a major effort. 

The issue is how to implement swing actions that require multiple user interactions during their task taking place. Normally, this would require a nesting of swing worker classes, one for each step and starting the next step within the EDT update method. 

What is more, sometimes SwingWorker, and sometimes the spin Framework is used. All of this makes this issue even more complicated.

Someone else may take a look if they see this issue more clearly than me. 

#101 Comment 12:
So you are saying that you will not complete the PR? I cannot see anybody else who will. There is no point of having this hanging around in limbo until it deprecates. So we can close this PR without merging and close related open issues as won't fix.

@simonharrer: Please confirm!

#101 Comment 13:
Merge as good enough.

#101 Comment 14:
Hi, I've just tested the newly implemented "Full text article download" function, however for several articles it downloaded a version from ResearchGate but I want to have the one from Elsevier. Dependent who you are working for, you have special access privileges on certain publisher sites and it would be great to specify in the preferences which crawler the download function should prefer. Perhaps even define a priority list.

#101 Comment 15:
There is a hard-coded priority list right know which prefers the official publishers over google scholar for example. If you want to file a new feature request or enhancement please create a separate issue.

#101 Comment 16:
Done at #435.

--------------------------------------------------------------
#100 Comment 1:
:+1: 

--------------------------------------------------------------
#99 Comment 1:
I did a quick test with clean up entries and all things work (DOI in note field, DOI and some text in note field, DOI in URL field, existing DOI).

--------------------------------------------------------------
#96 Comment 1:
Maybe it is a good idea to document the remaining problem childs here.
We can then try to resolve these issues or just keep the information here for reference after merging the PR.

--------------------------------------------------------------
#94 Comment 1:
I tracked down the addition of this code to 5d5576aa687d2653aa9d0b4426aa1275b7e751b2. I think, `fields.xml` was never committed into the repository. It was a way before plugin functionality has been added. I think, we can remove the functionality for now.

Possibly, the configuration of BibTeX entry types could be done globally with XML instead of constants in [BibtexEntryTypes.java](https://github.com/JabRef/jabref/blob/3610e3dc97ecad9ac78ce6a095e5d245a7e0d749/src/main/java/net/sf/jabref/BibtexEntryTypes.java).

--------------------------------------------------------------
--------------------------------------------------------------
#90 Comment 1:
Looks good from a first sight. Two minor things: missing CHANGELOD entry and tabs instead of spaces (maybe IDE `formatter_settings.xml` are not enabled). I would opt for merging this PR, adding a CHANGELOG entry and let the formatter task do its work. 

#90 Comment 2:
Thanks, I will take care of my formatter settings for future commits. Concerning the CHANGELOG, do you generally also include bugfixes in it? If not, this PR does not contain any new feature.

#90 Comment 3:
Yes, please include bugfixes as well.

--------------------------------------------------------------
#89 Comment 1:
I second this proposal :+1: 

#89 Comment 2:
Make sense to me.
Additionally, among the feature requests, I found only one related to the splash screen, and the request was about an option to disable it.

#89 Comment 3:
I guess I have always taken the splash screen for granted, but this 
proposal actually makes sense. I support it.

#89 Comment 4:
Something similar is wished at [sf feature request 884](https://sourceforge.net/p/jabref/feature-requests/884/).

Microsoft Office products also show a splash screen. but it is shown much quicker than in JabRef. In JabRef, the time to show the splash screen is the same as from the splash screen to the full app, isn't it? Furthermore, most other apps don't have any splash screen.

Therefore: :+1: 

--------------------------------------------------------------
#86 Comment 1:
@stefan-kolb The thing is that the old version control system used before was Subversion, which does not support the difference between author and committer. [JabRef switched to git in November, 2011](http://osdir.com/ml/java-jabref-devel/2011-11/msg00006.html). That means, all commits before November 2011 may have wrong author information. Furthermore, after November 2011 not all patches have been applied using `--author`.

#86 Comment 2:
Also, is the author list generation script automatically part of JabRef's build procedure? In that case, it could exclude most Windows users? 

#86 Comment 3:
@ThomasA It is not (yet?) part of the build procedure. Even if it was Windows users should be able to run it with Cygwin or MSYS.

#86 Comment 4:
I was just thinking that if this is the only shell-dependent step in 
building JabRef, it might be a major nuisance to anyone on Windows if 
they would have to install and build in Cygwin just for this. This could 
potentially disrupt the workflow of most Windows contributors.
I am just speculating here. I don't know how many Windows contributors 
there are and I am using Linux myself.

#86 Comment 5:
I do not think that this is an issue because when having git installed locally on windows, there must at the moment be also the basic unix tools available as well because git relies upon them. (I am a windows developer)

But this stirrs up another interesting question. The previous scripts that were used to generate the homepage pages out of the authors were written in perl, which is yet another dependency. And we have python scripts in the repository as well. Maybe we should just use a single scripting language for all the scripts to reduce the learning overhead?

#86 Comment 6:
OK, I just wanted to make sure this issue was considered.
As for a unifying scripting language, I highly favour Python but then 
again, I hardly contribute to JabRef nowadays.

#86 Comment 7:
Of course, using a single scripting language will make the maintenance easier.
I suggest to define a preferred scripting language for _future development_.

About existing scripts: I believe to rewrite all of them is not a high priority for JabRef development. Maybe conversion of the critical ones (which are to be identified).

--------------------------------------------------------------
--------------------------------------------------------------
#84 Comment 1:
Thank you for your pull request. Can you please add yourself to the list of contributors according to the CONTRIBUTORS instructions?

#84 Comment 2:
Of course, will do!

#84 Comment 3:
I have added my name to the list of contributors in About.html
I have added some more minor commits to improve code readability (which also led to a minor bugfix).

--------------------------------------------------------------
#83 Comment 1:
Thank you. i think, all other About.html flies (of the other languages) have to be checked.

#83 Comment 2:
Good point, the others languages don't include this information somehow :hushed:
Information generally differs between languages :unamused:
I think I'll be working on excluding redundant information like authors so we don't need to synchronize them in every language file.

#83 Comment 3:
the cli help message also refers to sourceforge instead of github. maybe we should replace this as well.

Sent from my iPad

> On 01.08.2015, at 21:37, Stefan Kolb notifications@github.com wrote:
> 
> Good point, the others languages don't include this information somehow 
> Information generally differs between languages 
> I think I'll be working on excluding redundant information like authors so we don't need to synchronize them in every language file.
> 
> —
> Reply to this email directly or view it on GitHub.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#72 Comment 1:
I am against using + for versions, as developers could use different versions of the jars locally - which may lead to different behaviour. 

#72 Comment 2:
Fixed with newest commit. I also added missing documentation in the CHANGELOG that should have been part of pull request #71 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#67 Comment 1:
Thank you for your pull request. 

--------------------------------------------------------------
#66 Comment 1:
Thank you for your pull request. 

Can you please replace indexOf() != -1 with contains calls? Contains is semantically identical, but more concise. 

#66 Comment 2:
Thanks for the suggestion, i did it.

#66 Comment 3:
Thank you for the quick response. Is it possible that you create a CHANGELOG entry and add yourself to the About.html? See [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md) for detailed instructions.

#66 Comment 4:
Sorry, i didn't notice that file. Now I should have done everithing, though probably not in the most efficient way...

#66 Comment 5:
Thank you again for your contribution to JabRef!

#66 Comment 6:
@steog88 You just might have added the changes to this pull request by adding commits to your branch (as you did for the update at 84aa6e0.

--------------------------------------------------------------
#65 Comment 1:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#61 Comment 1:
I fixed the aspects mentioned above

#61 Comment 2:
e8fec297ee348952ad5f92d3d8376725ee688ee7 adds logging code for broken links.

--------------------------------------------------------------
--------------------------------------------------------------
#59 Comment 1:
Thank you for your pull request. 

Can you please add yourself to the list of contributors as shown in CONTRIBUTING.md

And the last thing: can you please add an item to the CHANGELOG describing your bug fix in short?

#59 Comment 2:
https://sourceforge.net/p/jabref/bugs/1282/

#59 Comment 3:
Moved to PR #198 

--------------------------------------------------------------
#58 Comment 1:
What do you mean by "prevent ant builds"? Even with the patch, `ant jars` outputs `Compile failed; see the compiler error output for details.`, because the compiler cannot find certain packages.

`gradlew antTargets.release` runs through even without the patch.

`Apache Ant(TM) version 1.9.5 compiled on May 31 2015`. Which version do you have, what is your output?

#58 Comment 2:
I'm building on Linux. Without the patch, both `./gradlew antTargets.jars` and `./gradlew antTargets.release.linux` fail, because the compiler can't find the dependencies. On the other hand, `./gradlew generateSource` and `./gradlew jar` run fine.

After some digging around, I found that paths in `configurations.compile.asPath` are separated by `:` instead of `;` -- at least on Linux, don't know if that's the case on other platforms.

I haven't tried `ant jars` and I doubt it would work, because the paths to dependencies are now passed through gradle.

#58 Comment 3:
It is different on Linux and Windows. I wrapped the thing in an if statement :). Thank you for testing and providing a PR.

#58 Comment 4:
Sure, no problem :)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#48 Comment 1:
Thank you for your pull request. The feature is interesting. 

I would suggest to improve code quality a little bit by applying one of suggestions of the _Item 40: Design method signatures carefully_ of the Effective Java book: _Prefer two-element enum types to boolean parameters_

#48 Comment 2:
@simonharrer That's an excellent suggestion. The use of an enum facilitates easily adding further export customisations in future, if desired. I've updated the code accordingly.

#48 Comment 3:
Can you add yourself to the list of Contributors according to the https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md file, please, to give you credit for submitting this patch. 

#48 Comment 4:
My name has already been added to the contributors list in [a previous commit](https://github.com/JabRef/jabref/commit/8d4ce91c026626c71545ad2ceeece27f0554a291).

#48 Comment 5:
Ok, then thank you again for this pull request. 

--------------------------------------------------------------
#47 Comment 1:
Thank you for the PR. It would be nice if you would add a CHANGELOG entry for the next update. See [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md).

#47 Comment 2:
@koppor Sorry about that oversight, and thank you for taking the time to fix it. I'll be sure to include CHANGELOG entries in all non-trivial pull requests in future.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#43 Comment 1:
I am not immediately convinced that this a good idea. I am afraid that it makes it harder to align various fields of each entry visually when looking over a large database. 

#43 Comment 2:
Agreed with Thomas. Although it looks cleaner, for those of us who have
older eyes, it may get a little tricky not having the gridlines.

2015-05-11 12:57 GMT-05:00 Thomas Arildsen notifications@github.com:

> I am not immediately convinced that this a good idea. I am afraid that it
> makes it harder to align various fields of each entry visually when looking
> over a large database.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/43#issuecomment-100998852.

#43 Comment 3:
Is there a way to make is as an option in Preferences?

## 

Igor Fabio Steinmacher, Ph.D.
Professor in Dept. of Computing at Universidade Tecnológica Federal do
Paraná

On Mon, May 11, 2015 at 3:01 PM, hakova notifications@github.com wrote:

> Agreed with Thomas. Although it looks cleaner, for those of us who have
> older eyes, it may get a little tricky not having the gridlines.
> 
> 2015-05-11 12:57 GMT-05:00 Thomas Arildsen notifications@github.com:
> 
> > I am not immediately convinced that this a good idea. I am afraid that it
> > makes it harder to align various fields of each entry visually when
> > looking
> > over a large database.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/JabRef/jabref/pull/43#issuecomment-100998852.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/43#issuecomment-100999948.

#43 Comment 4:
I had the same filling.
What about a gray strip every five entries?
(see attached file)

Frédéric

Le 11/05/2015 19:57, Thomas Arildsen a écrit :

> I am not immediately convinced that this a good idea. I am afraid that
> it makes it harder to align various fields of each entry visually when
> looking over a large database.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/43#issuecomment-100998852.

## 

.......................................................
UR Science du Sol
INRA
2163 Avenue de la Pomme de Pin
CS 40001 - Ardon
F-45075 Orléans Cedex 2
France
  Ph:   +33 2 38 41 48 23
  Fax:  +33 2 38 41 78 69
  Email: Frederic.Darboux@orleans.inra.fr
  WebPage: http://huit.re/DarbouxInraEn
  Lab.: http://www6.val-de-loire.inra.fr/ur-sols/

#43 Comment 5:
## I think it's a fine idea of it can be toggled in the preferences. 

Sent from my Android device with K-9 Mail. Please excuse my brevity.

#43 Comment 6:
Ok, I will add an option to toggle the gridlines on and off. Originally, I also planned to add alternating background colors to better distinguish between rows. However, since JabRef also allows for marking entries, I doubt that this is a good approach. 

#43 Comment 7:
## I think you're right about the background colours. It could easily collide with marked entries.

Sent from my Android device with K-9 Mail. Please excuse my brevity.

#43 Comment 8:
Also I am not a Java programmer (and may be because I am not...), I 
believe it may not be difficult to add some gray to every five lines to 
whatever is the color of the background (while, yellow, orange, red).

Frédéric

Le 11/05/2015 21:35, Tobias Diez a écrit :

> Ok, I will add an option to toggle the gridlines on and off. Originally,
> I also planned to add alternating background colors to better
> distinguish between rows. However, since JabRef also allows for marking
> entries, I doubt that this is a good approach.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/43#issuecomment-101026697.

## 

.......................................................
UR Science du Sol
INRA
2163 Avenue de la Pomme de Pin
CS 40001 - Ardon
F-45075 Orléans Cedex 2
France
  Ph:   +33 2 38 41 48 23
  Fax:  +33 2 38 41 78 69
  Email: Frederic.Darboux@orleans.inra.fr
  WebPage: http://huit.re/DarbouxInraEn
  Lab.: http://www6.val-de-loire.inra.fr/ur-sols/

#43 Comment 9:
I added an option (under 'Appearance') to re-enable the gridlines. Moreover, it is now possible to change the row height.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#40 Comment 1:
Thank you for the pull request. My issue is that it includes commits not being related with the fix. The typical way of creating pull requests is to have a separate branch for each pull request. So we can discuss each improvement separately.

The comment is very useful. However, it would be better to place it in the commit message to have it stored in the git repository, too. We have an initial code documentation at https://sourceforge.net/p/jabref/wiki/Development_Howtos/, but I think, that is the wrong place for that.

#40 Comment 2:
I see your point! The other git commits just revert some local changes so that I'm in sync with your repository. All changes in "Files changed" are needed for this fix. 
Since I'm new to git, I would welcome if you could provide me tips how I can now remove the unnecessary commits and add the above description to the commit message. Thanks.

--------------------------------------------------------------
--------------------------------------------------------------
#38 Comment 1:
GitHub has the disadvantage that it continues updating the pull request when new commits flow into a branch. Therefore, the "Cleanup entries error 3" commit went into this PR. Should be OK for now, but for the next PRs, please make a separate branch for each fix :)

#38 Comment 2:
About the commit, very sorry. I did a commit with the first modification, and I dont know how I should do the second. I'm learning to use the github yet.

#38 Comment 3:
About the "`A", in my environment I tested all the characters listed (Ç ü é ã á ä à å ç ê ë è ï í ì î Ä Å É æ Æ ô ö ò û ù ÿ Ö Ü ó ú ñ Ñ Ã Á Â À Ð Ê Ë È Í Î Ï Ì Ó Ô Ò õ Õ Ú Û Ù ý Ý ø Ø ï). Those who had problems I changed. (Print of a example attached before the change)

![jabref](https://cloud.githubusercontent.com/assets/11490603/7329140/8c740f8a-eab2-11e4-9348-61c88c89779e.png)
![rtf](https://cloud.githubusercontent.com/assets/11490603/7329139/8c72b2b6-eab2-11e4-935e-c54323339369.png)

My enviroment is a Archlinux with Java 1.8.0_45. I will try to find a Windows enviroment to test before send more commits in the future.

#38 Comment 4:
The fix in HTMLConverter is incorrect for the accented i:s. With the modification the accent is added to a normal i, while in the old version it was added to a dot-less i (\i).

#38 Comment 5:
I did not understand. Can you explain in more detail? I tested all "i" characters and seem correct to me.

#38 Comment 6:
See, e.g., https://en.wikibooks.org/wiki/LaTeX/Special_Characters especially

"To place a diacritic on top of an i or a j, its dot has to be removed. The dotless version of these letters is accomplished by typing \i and \j."

--------------------------------------------------------------
#37 Comment 1:
Please see [CrossRef content negotiation documentation](http://crosscite.org/cn/) for information about why I propose this change

#37 Comment 2:
Thank you for the update. Could you also adapt the CHANGELOG and the About.html as described at https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md?

#37 Comment 3:
I can -- but it was just a single line change so I wasn't sure it was worth adding myself as a contributor, or updating the CHANGELOG. Do you still want those updates for such a simple change?

#37 Comment 4:
Yeah, sure.

#37 Comment 5:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
#35 Comment 1:
Thanks for the PR. Please add yourself to About.html as described in  [CONTRIBUTING.MD](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md)

#35 Comment 2:
I would also prefer not to include the first two commits (8e46928 and 1e1ca6). Or are they interesting for guys working on the issue?

#35 Comment 3:
Nope. It is ok to not include the first two commits Oliver

#35 Comment 4:
I cherry-picked the last commit which converted to commit 522d8e43

--------------------------------------------------------------
#34 Comment 1:
Thank you for your pull request. Did you already add yourself to the About.html as a contributor as described in the CONTRIBUTION.md?

#34 Comment 2:
Thanks. Hopefully this additional diff does that.

--------------------------------------------------------------
#33 Comment 1:
Thank you for your contribution. 

--------------------------------------------------------------
#32 Comment 1:
Thank you for your patch. 

The fix for the BibtexEntry can be accepted immediately. 

However, JabRef is currently targeting Java 7, while you made use of classes from Java 8 in CleanUpAction. Hence, this part of the pull request cannot be accepted at this point in time.

Is it wise to include Joda time? Or should this be done with the old and antique class Calendar? @koppor 

#32 Comment 2:
I think a workaround with the old Calendar class is way more complicated since the day-part is optional and as much as I know about the old time classes such situations are hard to handle.
On the other hand, I think the feature in CleanUpAction is not that important and useful for other users and could be skipped as long as Jabref targets Java 7 (it was morally a feature to repair the damage caused by the bug in BibtexEntry).

#32 Comment 3:
I split the commit and put it into the master branch with commit d0b4faf7.

--------------------------------------------------------------
--------------------------------------------------------------
#30 Comment 1:
Thank you for the patch. Could you add a CHANGELOG entry (see [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md))

#30 Comment 2:
In commit 31a60770, I added the missing CHANGELOG entry.

--------------------------------------------------------------
--------------------------------------------------------------
#28 Comment 1:
This feature is availale on JabRef 2.10?
What should I do to get them?

#28 Comment 2:
No it is not in 2.10 but in the current development version. So you have to wait until 2.11 comes out or build the current version yourself. How to do the latter is described here: https://github.com/JabRef/jabref#building-jabref-from-source

#28 Comment 3:
Thank you very much.
I'm could not install gradle on my laptop (ubuntu 14.04).
Looking forward to the 2.11 release.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#25 Comment 1:
In commit 019ef561 I created a CHANGELOG entry and added you in the Authors.html as described in the [CONTRIBUTING.md](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md).

#25 Comment 2:
Thanks! and sorry I did not comply with the protocol.

--------------------------------------------------------------
--------------------------------------------------------------
#23 Comment 1:
Thank you for your contribution. 

--------------------------------------------------------------
#22 Comment 1:
Thank you for your pull request! This is a helpful contribution.

--------------------------------------------------------------
#21 Comment 1:
Ok simonharrer, its done. Thanks for reminder me.

--------------------------------------------------------------
#20 Comment 1:
Thank you for this patch! :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
#18 Comment 1:
Thank you for the PR. Did you add yourself to About.html as described in [CONTRIBUTING.MD](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md)?

#18 Comment 2:
Yes, I already did.

#18 Comment 3:
Thanks for your patch. Can you please resolve the conflicts towards the master branch so that I can merge the pull request automatically?

#18 Comment 4:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
#16 Comment 1:
Thank you for the PR. Did you add yourself to About.html and the change to the CHANGELOG as described in [CONTRIBUTING.MD](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md)?

#16 Comment 2:
Yes, I already did.

#16 Comment 3:
Thank you for your contribution. Can you fix the issues with the current master branch so I can merge the pull request in automatically?

#16 Comment 4:
Think, pull request #14 already adressed that issue and makes this PR obsolete.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#13 Comment 1:
Dear All,

I'm trying to update the spanish translation file via GIT. How to get 
accentuated characters? (à, è, ì...)

I see that in the file they appear scaped \e003 and all.

Best regards

Jorge Tornero

El 23/07/14 16:39, Oliver Kopp escribió:

> Merged #13 https://github.com/JabRef/jabref/pull/13.
> 
> —
> Reply to this email directly or view it on GitHub 
> https://github.com/JabRef/jabref/pull/13#event-144679715.

#13 Comment 2:
Try to use Popeye - http://jabref.sourceforge.net/langproper-0.55.jar. This tool shouldn't have problems with escaping.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#10 Comment 1:
After 2.10 the BibtexEntryType.java is changed a lot. The optional fields and required fields are very different. If one need the field order is exactly the same as the 2.9.2, one should manually define the order. 2.10 also fixes some bugs in entry sorting. Some entries will be always different from 2.9.2. So I think backward-compatibility does not make sense any more. If one really want the bib file arranged in the same way as 2.9.2, he should just use 2.9.2. Upgrade all client to 2.10 makes more sense here.

--------------------------------------------------------------
--------------------------------------------------------------
#8 Comment 1:
thx!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4 Comment 1:
Even though the other translation files have been updated, I accept this pull request.
For next time, please try to commit only the "really" changed file and revert the changes of the other one. You can also use the edit button at https://github.com/JabRef/jabref/blob/master/src/resource/JabRef_es.properties

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
