#4263 Review Comments 1:
DO we really need it to execute on a new thread or can't we reuse one of ours from the thread pools?
#4263 Review Comments 2:
Good observation. Fixed.
--------------------------------------------------------------
--------------------------------------------------------------
#4260 Review Comments 1:
Use `AnotherRandomlyNamedFile.pdf` here
#4260 Review Comments 2:
If you use pdf as an extension above, then this should be also `Toot.pdf`. (The temp file rule always creates `tmp` files, thus the behavior before was correct).
#4260 Review Comments 3:
Is there a reason why you disabled travis for the master branch?
This prevents executing travis for all PR that target master branch
#4260 Review Comments 4:
Oh, sorry. I forgot to restore it as it is.
I was using Travis CI to check some tests before, as those tests couldn't be run on my laptop. I'll fix it immediately.
#4260 Review Comments 5:
"src/main/java" should still be there since otherwise the fxml files in the src folder are not found
#4260 Review Comments 6:
Its always better to compare values to empty collections or strings then to use `assertFalse(...isEmpty())` because you get better error message in case the test fails. Of course, you didn't write this code but please change it to `assertEquals("", messages)`.
#4260 Review Comments 7:
Is this really necessary? Usually the `TempDirectory` extension takes care of file deletion. 
#4260 Review Comments 8:
here also, is this really necessary?
#4260 Review Comments 9:
Hmmm... The tests failed when I changed it to `assertEquals("", messages)`.
Is that correct?
![image](https://user-images.githubusercontent.com/25541992/44126828-e17f571e-a06c-11e8-9d7e-c9b3f8b2a63a.png)

#4260 Review Comments 10:
I think `rootDir = temporaryFolder.getParent();` is the reason why those files didn't disappear automatically. 
In fact, I can just use `deleteIfExists(rootDir);` to solve this problem, but the temp folder on my machine has some other stuff that can't be deleted (they share one temp file folder).  So I have to use this to guarantee the tests run in a correct environment.
#4260 Review Comments 11:
And yes, those folders didn't delete themselves automatically. Every time I run this test, I'll get something like tens of temp folders.
#4260 Review Comments 12:
Damn...ok leave it like it was before, but this is something we also have to fix in the future...
#4260 Review Comments 13:
Good observation. In fact, you should never use the parent of the temporary folder, since a user might not even have write access to it. Can you please change the tests (here and below) so that they don't use the parent. Thanks.
#4260 Review Comments 14:
Just one more minor thing I have before we can merge.
Please use the nio methods here and in the other things as well, e.g. instead of the old File = new File use  
Files.createFile(Path path)
#4260 Review Comments 15:
The path class also has a method toAbsolutePath which you can use here., e.g. just toAbsolutePath().toString()
#4260 Review Comments 16:
Path has a method getFileName which you should use here 
#4260 Review Comments 17:
Are there other tests that have this issue? Or just change this test?
#4260 Review Comments 18:
I'm afraid that is a naming error. The `tempFilename` doesn't represent "filename" but "an absolute path". And you can see that in the pic below. I print `tempFilename` to the console.
![image](https://user-images.githubusercontent.com/25541992/44153279-64aa0748-a0da-11e8-9746-71187aaff9f7.png)
So I guess if it is better to rename this variable to something like `tempFilePath` ? And I've done that in the commit.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4255 Review Comments 1:
You could add this simply as default method in the interface, so you won't need that emptyPastHandller I think
https://dzone.com/articles/interface-default-methods-java
#4255 Review Comments 2:
Thanks for your feedback. I will try to fix this.
#4255 Review Comments 3:
Since `PasteActionHandler` is a functional interface, 
````
private PasteActionHandler pasteActionHandler = () -> {};
````
should work.
#4255 Review Comments 4:
remove comment or better bind the disable property to `textArea.textProperty().isEmpty()`
#4255 Review Comments 5:
It should be the second option in your screenshots since "Protect terms" and the other options do not make sense for the URL field.
#4255 Review Comments 6:
it should be lower case `link` in both cases
#4255 Review Comments 7:
it should be lower case `link` in both cases
--------------------------------------------------------------
#4253 Review Comments 1:
missed one ;)
#4253 Review Comments 2:
here, too
#4253 Review Comments 3:
I see that, I will do that soon :)
#4253 Review Comments 4:
You still have this conflict markers in the file. The easiest solution to fix this would be to just copy the current changelog.md from master and paste it in your file locally and then commit the change.
So then git should be able to recognize that it didn't change
#4253 Review Comments 5:
The code formatting was correct before.
#4253 Review Comments 6:
I guess these formatting changes are copied from a different PR. Did you merged the latest changes from master?
#4253 Review Comments 7:
You no longer need to use an array. Instead, directly use the `fieldNames` collection.
#4253 Review Comments 8:
Please use descriptive names for the controls, here eg `primarySortLabel`. This essentially applies to all controls on all tabs.
#4253 Review Comments 9:
Our code formatting convention is that there should be a space after the comma.
#4253 Review Comments 10:
This part here looks like a unnecessary code duplication.
#4253 Review Comments 11:
The formatting was ok before (applies also to some other code style changes).
#4253 Review Comments 12:
Instead of specifying the font in the code for every tab again, it is better to create one css file for the whole preference dialog. Then you can add a style class `heading` with a bigger font size (and maybe higher bottom padding). In the code, you then simply use `useRemoteServer.setStyleClass("heading")`.
#4253 Review Comments 13:
Instead of hard-coding these fields, you can use a foreach loop like `for (EntryType type : EntryTypes.getAllValues(mode)) `
#4253 Review Comments 14:
I tried to remove these, but it seems they are used to initialize a JPanel used in DatabasePropertiesDialog.java, I haven't changed that file so far, so I kept them. As for other duplicates, I will cleanup them soon  
#4253 Review Comments 15:
Ok, in this case you can use a `JFXPanel` in `DatabasePropertiesDialog` to display the JavaFX controls.
#4253 Review Comments 16:
Better set the return type to Node, it's always better to return the Interface Type (https://www.quora.com/What-is-the-use-of-having-an-interface-as-a-return-type-in-Java)
#4253 Review Comments 17:
Ok, Done it
#4253 Review Comments 18:
If you directly initialize this SaveOrderConfigDisplay Variable at declaration above, you can change your event listener to this neat lambda: 

```

      EventHandler<ActionEvent> listener = (event) -> {
            boolean selected = event.getSource() == exportInSpecifiedOrder;
            exportOrderPanel.setEnabled(selected);
        };
```
#4253 Review Comments 19:
Thanks for the advice :). Done it
#4253 Review Comments 20:
Still here
#4253 Review Comments 21:
still and old jlabel
#4253 Review Comments 22:
old jbutton. Please remove all rest of the old swing stuff and it would be good to merge
--------------------------------------------------------------
#4252 Review Comments 1:
Right now, it is hard to tell from the outside on which path this methods operates. I would thus prefer if `relativizeFile` would accept a path and return the relativized path (probably also rename to `relativize[Path]`). Then in would look like `link.set(relativize(path))`.
#4252 Review Comments 2:
I already had considered this option as well, but seem to have forgotten about it ;)
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4248 Review Comments 1:
This comment is probably a leftover from the other PR.
#4248 Review Comments 2:
So what should I do after remove the additional changelog entry? Commit and push?
#4248 Review Comments 3:
This is my first time pull request.
#4248 Review Comments 4:
Yes, everything is fine now. Thanks! 
We will wait until a second developer gives a positive review before merge.
--------------------------------------------------------------
#4246 Review Comments 1:
You can also use `\R` to match any line breaks, see https://docs.oracle.com/javase/9/docs/api/java/util/regex/Pattern.html.
#4246 Review Comments 2:
Slightly better: We removed the redundant new lines of marking*s* and wrapped the summary in *the* File annotation tab.

Please also add a reference to the issue #3823 (cf. e.g. some of the changelog entries under "fixed").
#4246 Review Comments 3:
Please specify the font-size in `em` so that it scales properly if the base font size is changed (e.g. on high res displays).
#4246 Review Comments 4:
It is good that you try to reuse existing logic, i.e. the existing formatters. However, these are also used to generate the bibtex key (and file name). For these use cases, it is still desired to remove all line breaks. Thus, I would prefer if you define the modified regex pattern to remove the linebreaks here in this class and leave the RemoveNewlinesFormatter untouched (except changing the pattern to use `\R`).
#4246 Review Comments 5:
It would be nice if you could add some tests verifying the new behavior: create a `FileAnnotion` object by hand (not by parsing a pdf) which contains such problematic hyphens/newlines and check that they are removed, indeed.
#4246 Review Comments 6:
Thanks, it is what I didn't know before. But it seems `\R` will match any of `\r`, `\n` and `\r\n`.
![image](https://user-images.githubusercontent.com/24741764/43588283-bdeaa01a-969e-11e8-9c47-b9a5b27ebb1f.png)
In this example, you can see `\r` is matched on Windows. But we need only match `\r\n` on Windows, so I think `%n` is the right choice.

#4246 Review Comments 7:
Fixed.
#4246 Review Comments 8:
Changed to `0.75em`
#4246 Review Comments 9:
Now I leave the two formatter untouched and only use the pattern in this scope.
#4246 Review Comments 10:
Thank you for your advice, I have added a unit test!
#4246 Review Comments 11:
Please keep these tests (here and below). The text that we want to format might contain linux line endings on Windows and vice versa. But you can of course also add a tests for ̀`%n`. 
Please change also all regex patterns to use `\R` instead of `%n` for newlines. 
#4246 Review Comments 12:
Finally leaving original formatter and tests untouched. 

In summary, Pattern.compile("...") changed from `(\r?\n|\r)` to `\\R`, but the effects are same.
--------------------------------------------------------------
--------------------------------------------------------------
#4240 Review Comments 1:
Pleas remove this author comment completely as we handle author credits via our [authors-file](https://github.com/JabRef/jabref/blob/master/AUTHORS)
#4240 Review Comments 2:
Just some minor improvemtns: I would suggest extracting both urls to two separate variables and make them private static final as constants. 
#4240 Review Comments 3:
slf4j has the nice advantage that it supports variables via curly braces:
https://www.slf4j.org/faq.html#logging_performance
#4240 Review Comments 4:
We *fixed* an...
#4240 Review Comments 5:
We have the convention that only static (constant) values are all capitals. Thus, please change the name to `feature`.
#4240 Review Comments 6:
and please add the exception as a parameter so that the root cause is also logged. (then probably the part "ParserConfigurationException was thrown." is no longer necessary).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4227 Review Comments 1:
Typically you name the parameter also basePanel as the field and use this to distinguish the field from the parameter.
e.g. this.baesPanel = basePanel 
#4227 Review Comments 2:
You better should use a GridPane here for positioning the label and the text fields, that allows them to be properly aligned. Can be easily done using the Scence Builder.
You can also take a look at the FXML here from my other PR https://github.com/JabRef/jabref/pull/4040 for the db login dialog:
https://github.com/JabRef/jabref/pull/4040/files#diff-200f60f39aab2550ae174ea88d604981
#4227 Review Comments 3:
They should already be editable by default. 
#4227 Review Comments 4:
String field : fieldStrings 
#4227 Review Comments 5:
Named Compound  ce -> NamedCompound compound
#4227 Review Comments 6:
And String string : be.getFieldNames... 
#4227 Review Comments 7:
maybe better findStringLength to directly make clear what the variable represent
#4227 Review Comments 8:
This adds the action to the toolbar. I don't think that "replace all" is important enough to appear there. Please remove it again.
#4227 Review Comments 9:
Please don't use abbreviations in names etc. `dialog` is better.
#4227 Review Comments 10:
I think there is no need for the `filter` command.
#4227 Review Comments 11:
we usual follow camel casing, i.e it should be `radioGroup`. Please also try to give these fields a more descriptive name (like you did below). Also please make these fields private.
#4227 Review Comments 12:
Normally there is no need for handling the close request in a special way. The problem is that you didn't defined a Cancel/Accept button in the dialog. Have a look at the keybindings dialog on how to handle this correctly:
https://github.com/JabRef/jabref/blob/d5d67d70247b95af937c3e818dc7f1ae6dd484ee/src/main/java/org/jabref/gui/keyboard/KeyBindingsDialog.fxml#L24-L26
https://github.com/JabRef/jabref/blob/d5d67d70247b95af937c3e818dc7f1ae6dd484ee/src/main/java/org/jabref/gui/keyboard/KeyBindingsDialogView.java#L48-L49
#4227 Review Comments 13:
no need to state the obvious in a comment (the method already has a `@FXML` decoration).
#4227 Review Comments 14:
In the Model-View-ViewModel spirit, the view should never contain any logic. The complete logic should be contained in the `ViewModel`. The rationale behind this is, that you can test logic in the view model using ordinary (junit) tests without the need to instantiate the ui. Thus, please introduce a new `ReplaceStringViewModel` and bind its values against the textfields. See, for example, https://github.com/JabRef/jabref/blob/d5d67d70247b95af937c3e818dc7f1ae6dd484ee/src/main/java/org/jabref/gui/keyboard/KeyBindingsDialogView.java#L80-L84
#4227 Review Comments 15:
The comments were helpful for the review. Thanks! But they should be removed in the final version.
#4227 Review Comments 16:
even better: `String fieldName : ...` 
#4227 Review Comments 17:
This applies also to all other methods below that contain logic.
#4227 Review Comments 18:
This works because the dialog is very simple, but goes against the usual strategy of JavaFX / MVVM. You should add properties in the ViewModel class and bind these properties to the corresponding properties of the controls. Please have a look at the other JavaFX dialogs to see how this is done. 

Since this approach is a bit different from what you are used to in the Swing world, let me quickly explain the big overall picture and its advantages. You are probably used to program against the UI controls (as you do here right now): for example, if you want to know the input from the user, you use `textbox.getText()` to get it. Similarly, for other input controls. This works all nicely until the user reports a bug and you have to write a test for it. The problem you then face is the following: how do I automate the user interaction in my test? There are different approaches to this issue but the general answer is: there is no good solution ;-) UI automation is usually ugly and breaks as soon as you change the design. The idea behind the MVVM approach is that you completely separate the UI from the logic that performs the action. So you create a class (the ViewModel) that holds the state of the UI (i.e. you have `string` field that corresponds to the user input, but at this point you don't care how or where this string is manipulated). This state in the ViewModel is then bound to the actual userinterface in the `View` class using JavaFX bindings. In this way, you can test the ViewModel, i.e. the complete logic, without ever knowing how the user interface looks like.
#4227 Review Comments 19:
As `BaseDialog` derives from `Dialog` you can simply use `close()` (without the reference to the stage). 
#4227 Review Comments 20:
Properties in javafx don't have the traditional get/set prefix. So just rename them as the ones abvove,
e.g. fieldStringProperty  and findStringProperty etc 
#4227 Review Comments 21:
Is this check necessary? You always pass the basePanel as constructor argument.
I would suggest you add an Objects.requireNonNull(basePanel) in the constructor to ensure that the argument is never null. If it is null, it will directly throw and exception which makes it easier to see the real reason,
#4227 Review Comments 22:
Yes, you are right :), I forgot to check my logic after converting to a viewModel ;-). Thank You! 
#4227 Review Comments 23:
You need to add a % sign in front of the label text, so that it will be recognized as translatable string.
That is probably one of the reasons why the l10n test fails
#4227 Review Comments 24:
I think you missed this one ;) But all others look good
#4227 Review Comments 25:
Yeah ;-) I miss it. Thank you for mention! :)
--------------------------------------------------------------
#4226 Review Comments 1:
Much easier, Optionals have a method names isPresent https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html
#4226 Review Comments 2:
Thanks for your suggestion! We will change it better.
#4226 Review Comments 3:
If I understand this code correctly, the author parsing is wrong for Chinese names and you correct it here for the bibtex generator. However, we also rely on the author parsing in different contexts (like the display of the author in the maintable). It would be nice if you could move this fix to the `AuthorListParser` class so that it also applies to these other instances. Please add corresponding tests in `AuthorListTest` (where you should orient yourself on the format of the test ` parseNameWithHyphenInFirstName` - some of the other tests in this class are not so nice). You should keep the tests for the bibtex key generator. 
#4226 Review Comments 4:
Well, I understand your meaning. At first, I did  want to change the code in the way you suggested. But then I found that the key of author filed containing Chinese name is totally different from the situation of English name. In AuthorListParser.class, there are four situations for the split of English name(two based on no commas, one based on one commas,one based on two or more commas), while there are only two fixed situations and other instances don't apply to Chinese name. Also it's easier to fix the bug in bibtexkeypattern.class while it's complex and not neccessary to  move this fix to the AuthorListParser.class.
--------------------------------------------------------------
--------------------------------------------------------------
#4216 Review Comments 1:
Why is this now a problem? While changing some localization-based stuff, I hit this error message sometimes during development and it was helpful to locate the problem. Hence, I would prefer if it could stay.
#4216 Review Comments 2:
This is wrong... it should just insert the number (i.e. the fetcher should be fixed not the test)
#4216 Review Comments 3:
dito
#4216 Review Comments 4:
should work just with the id...
#4216 Review Comments 5:
initialize prefs and fetcher in `setup`
#4216 Review Comments 6:
I'm not sure about our conventions, but whether we throw an exception or return an empty result should be consistent across id fetchers (and it should be added as a general test for all id fetchers (there should be a test class for all id fetchers)). Personally, I would prefer an empty result instead of an exception.
#4216 Review Comments 7:
The problem is that our URLDownload throws a FileNotFound Exception on an 404 error, because you are trying to access an input stream of a non existent resource) and thus resulting in a fetcher exception which does not return anything. 
#4216 Review Comments 8:
Same reason as above, the bibtex code returns the url + id and will not be equal if not. 
#4216 Review Comments 9:
Yes, but the problem now is that you will hit a NotInitlaizedException in junit. Execute the isbn fetcher test for example and you will see it. It has somehow to do with the fact that the log4j tries to call another appender (GUI based in the end, though it's executed from the test).
#4216 Review Comments 10:
Well, then the implementation needs be changed to strip the url part ;-)
#4216 Review Comments 11:
The appender are/can be configured separately for the tests, so removing the GUI-appender is worth a try.
#4216 Review Comments 12:
I think the default is an empty result if the ID cannot be found or used.
#4216 Review Comments 13:
I changed the method in UrlDownload to return an empty stream when a 404 or 400 error (the latter one is thrown by medline)  is encountered. I simply log the status response code + url .
#4216 Review Comments 14:
done
#4216 Review Comments 15:
The strip was already implemented, but it checked for https and not http.
#4216 Review Comments 16:
Fixed the loging configuration, the xml file had to be renamed
#4216 Review Comments 17:
Can't you catch the Exception inside the fetcher? I don't like our URLDownload implementation anyway.
#4216 Review Comments 18:
Why no HTTPS anymore? We just changed this?!
#4216 Review Comments 19:
Brackets alignment
#4216 Review Comments 20:
I am also in favor of removing both http and https prefixes
#4216 Review Comments 21:
The fetcher itself still uses https, but the prefix for the eprint field does not start with https but with http 
#4216 Review Comments 22:
But we only remove http prefixes not https (if there exists one at a point in time)?!
#4216 Review Comments 23:
Well that was done before but the fetcher exception just encapsulated a file not found exception with no way to getting the underlying http status code.


#4216 Review Comments 24:
Added check for both
#4216 Review Comments 25:
This comment should not be here but in the method below
--------------------------------------------------------------
--------------------------------------------------------------
#4212 Review Comments 1:
In my opinion, this code should be refactored to use the same code as the same action in the entry editor. Otherwise, we will again run into a similar problem where the two actions are different in behavior.
#4212 Review Comments 2:
As we wanted to get ride of null's, I don't like this change. Maybe we should use a `MonadicBinding` (optional binding) and use an empty string as file type?
#4212 Review Comments 3:
Please add a short comment explaining what is done here.
#4212 Review Comments 4:
Changed it
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4205 Review Comments 1:
Add a FIXME otherwise this will be there forever, I guess.
--------------------------------------------------------------
--------------------------------------------------------------
#4203 Review Comments 1:
Can this be removed or rewritten?
#4203 Review Comments 2:
Edit// You need to use the valueProperty of the combobox, that is bidirectional.
The selected Item property is a bit confusing in the first moment,

https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ComboBoxBase.html#valueProperty--

You only have to make sure that the Observable List is initialized before setting the properties. 
#4203 Review Comments 3:
At some point we should show the toggle state in the menu and I would hence leave this there as a reminder. Sadly, there is still a lot of such uncommented old in the maintable / frame / base panel classes...
#4203 Review Comments 4:
Thanks for the hint. Works like a charm!
--------------------------------------------------------------
#4200 Review Comments 1:
Why remove this? 
#4200 Review Comments 2:
This checks whether a certain file directory exists (the one where we usually put files). This is unnecessary if we just want to rename the file...
--------------------------------------------------------------
--------------------------------------------------------------
#4185 Review Comments 1:
We need test for all other parsed fields as well!
- JOURNAL
- YEAR
- VOLUME
- PAGES
- ISSUE
#4185 Review Comments 2:
I was not able to find an entry that had pages/volume or issue information. However, I added a test covering journal and year.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4178 Review Comments 1:
Is this a binary or? This one looks confusing
#4178 Review Comments 2:
yes, it is (bit-wise) or paired with assignment (similar to `+=`). See https://stackoverflow.com/questions/14295469/what-does-mean-pipe-equal-operator
#4178 Review Comments 3:
Can you please find another abstraction for solving this functionality? I know it's elegant, but I would not consider this as appropriate Java code within JabRef.
#4178 Review Comments 4:
Agree with Linus here, it's not intuitive and easy to read.
#4178 Review Comments 5:
I also agree ;-)
--------------------------------------------------------------
#4162 Review Comments 1:
For me this belongs to the IEEE class. 
#4162 Review Comments 2:
Good point. Moved it to the fetcher (as well as the other parsing code in that class)
--------------------------------------------------------------
--------------------------------------------------------------
#4157 Review Comments 1:
That comment is obsolete now, right?>
Could this be extracted to a new file?
#4157 Review Comments 2:
Done. You are right, the comment was a left-over.
#4157 Review Comments 3:
What is the TODO at this place?
#4157 Review Comments 4:
Please use the `runInJavaFXThread` method of `DefaultTaskExectuor` (we want to separate calls that are needed because we still have interaction with legacy Swing and "real" async operations in JavaFX)

On a second thought, I'm actually wondering if this call to `runLater` is even necessary since the action should be invoked through the menu which is already on the JavaFX thread.
#4157 Review Comments 5:
Please copy the changes from https://github.com/JabRef/jabref/pull/4119/files#diff-851966b1f29f8a595c4b262cf1f895bb (it may take a while until this PR is merged). Then these `return null` statements are no longer needed (in several places).
#4157 Review Comments 6:
the `showResults` method uses the JavaFX dialog service, so it should probably not run on the swing thread.
#4157 Review Comments 7:
this `runLater` shouldn't be necessary as `onSuccess` and `onFailure` are always run on the JavaFX thread (it would be nice if you could add this as a comment in BackgroundTask)
#4157 Review Comments 8:
the `DialogService` has a method that directly accepts an exception so you don't need to compute it by hand above (and the errorMessage can be removed in the call to `output`).
#4157 Review Comments 9:
This looks a bit strange to me. The `get` makes the thread wait until the task is completely, so the operation is essentially synchronous. Its probably better to return the `Task<Boolean>` and let the caller decide if he wants to wait.
#4157 Review Comments 10:
Good catch, this was a left-over from the error handling before. The error case is now handled better.
#4157 Review Comments 11:
seems like this is an unused import
#4157 Review Comments 12:
Please try to avoid abbreviations. 
#4157 Review Comments 13:
`dups` -> `duplicates`.
I see that there is another method variable that is called duplicates, but I'd rather rename the other one, since this scope of `dups` is larger, and therefore more important.
#4157 Review Comments 14:
How about initializing the list at object creation already, i.e., l 35?
#4157 Review Comments 15:
again avoid abbreviations
#4157 Review Comments 16:
I would go with first and second here
#4157 Review Comments 17:
how about `shouldCcontinue`?
#4157 Review Comments 18:
Please spell it out.
#4157 Review Comments 19:
I know it's not from you, but it would be good to rename it to `isCancelled`.
#4157 Review Comments 20:
Here again: please start the names of booleans with is/has etc.
#4157 Review Comments 21:
Also here the `canceled` could be named more precisely: what should be canceled?
#4157 Review Comments 22:
Very good that you return that directly now!
#4157 Review Comments 23:
Can you please start the name of a method with a verb? Like `performAction`?
#4157 Review Comments 24:
This method is inherited from `BaseAction`.
I can rename the base method though if you wish.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4146 Review Comments 1:
extract pattern.compile to a private final or static variable 

#4146 Review Comments 2:
As this is an anonymous class, it is effectively a constant. I don't see any advantage of making it a final variable of the outer class, but maybe I miss something...
#4146 Review Comments 3:
I heared that we support 30 entries only, why is there 100 here?
#4146 Review Comments 4:
It was previously set to 1000, but I wanted to make sure that we are not banned...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4141 Review Comments 1:
Why does it reside in gui?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4138 Review Comments 1:
You could extract the loader and the prefs parameter and directly pass the  JounralAbbrev Repo stuff which is just passed onto the field checkers later 
`journalAbbreviationLoader.getRepository(journalAbbreviationPreferences)`
#4138 Review Comments 2:
Here the abbrev repo stuff is passed
#4138 Review Comments 3:
done; I'm just wonder if it's ok to access repository at the beginning instead of calling for it every time? I mean, is there a way, that the repo could be updated?
#4138 Review Comments 4:
I might  be mistaken here, but `isSingleLine(Field)` sounds more natural to me.
#4138 Review Comments 5:
Can you please add this list two `InternalBibtexFields` (this class needs to be refactored at some point, but for now it is good to have anything at one place).
#4138 Review Comments 6:
In principle, the user might change the journal abbreviations at any time. However, it should be fine to use the repository since the field editors are recreated when switching to the new entry. 
#4138 Review Comments 7:
Yep. Sorry for delay, I will do that on Saturday.
--------------------------------------------------------------
#4137 Review Comments 1:
Please change "worked" into "work".
#4137 Review Comments 2:
Please double check tabs vs. spaces there and the line before/after
#4137 Review Comments 3:
Why the extra indent? (applies for all case statements in this file)
--------------------------------------------------------------
#4136 Review Comments 1:
`selection.candidate.version == '0.2.4'` would be correct. (you have to put in the version to be rejected, not the current.

#4136 Review Comments 2:
0.2.4 -> 2.2.4
#4136 Review Comments 3:
javax.inject -> javax.inject:javax.inject ?
#4136 Review Comments 4:
No, that would result in reporting the  0.2.3 as newer. 
And regarding  xjc , see  https://github.com/koppor/jabref/issues/276
#4136 Review Comments 5:
I initially had the same idea but my tests with junit pioneer showed that it didn't work. I then added a print statement and saw that the module is just the real module name
```
 componentSelection { rules ->
        rules.all { ComponentSelection selection ->
print selection.candidate.module 
```
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4127 Review Comments 1:
Is the reason for the bug that array.equals != list.equals?
#4127 Review Comments 2:
This looks really odd, normally the equals should work here:
https://docs.oracle.com/javase/8/docs/api/java/util/List.html#equals-java.lang.Object-
#4127 Review Comments 3:
The contract for sets is that equals does not take the order into account (even if it is a linkedhashset). This is in contrast to equality of lists (which however allow duplication). On the other hand, arrays equals takes the order into account. The cleanest solution would be to use a data structure that is ordered by design and prevents duplication; but I'm not aware of such an implementation (as said above LinkedHashSet does not behave as an ordered set, it just provides an ordered *iterator*).
#4127 Review Comments 4:
You could use a Tree Set, I used that in tests in another program to ensure that the output is correct every time https://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html
#4127 Review Comments 5:
TreeSet still inherits equals from set (as does LinkedHashSet which is usually the better choice than TreeSet).
#4127 Review Comments 6:
No, it does not, A TreeSet implements Comparable and uses the method of the compareTo 

>Note that the ordering maintained by a set (whether or not an explicit comparator is provided) must be consistent with equals if it is to correctly implement the Set interface. (See Comparable or Comparator for a precise definition of consistent with equals.) This is so because the Set interface is defined in terms of the equals operation, but a TreeSet instance performs all element comparisons using its compareTo (or compare) method, so two elements that are deemed equal by this method are, from the standpoint of the set, equal. The behavior of a set is well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the Set interface. 

https://dzone.com/articles/the-hidden-contract-between-equals-and-comparable
#4127 Review Comments 7:
As you see here http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/TreeSet.java the class does not override the default implementation of `equals` of http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/8ed8e2b4b90e/src/share/classes/java/util/AbstractSet.java. The comment you cite concerns equality of items not of the set itself.
#4127 Review Comments 8:
This really seems to be only alternative. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4121 Review Comments 1:
Here null is passed for BasePanel and bibdatabasecontext, 
#4121 Review Comments 2:
Do you really need the base panel here? If you look at the line 133 where the PreviewPanel is initialized for the first time, there is null passed for the basePanel and the bibdatabasecontex.   So I assume you don't need the Globals.basepanel hack here. 
#4121 Review Comments 3:
Yes, I need the basepanel because in the PreviewPanel.java file checks if basePanel is present in order to get the citation otherwise it doesn't work. 

At first I initialized it with null because if no citation style is selected generates a default citation. So that's why I did it that way, the other thing I could try is to write the same logic there without calling the function updateLayout in PreviewPanel but it'll end up with duplicated code. What do you think is the best approach?
#4121 Review Comments 4:
Ah yes, I now did take a closer look at the code here.  Having a dependency on the BasePanel is not nice. Well, but looking at the code and trying out some things I see no other way as the CitationStyleCache is configured on the basePanel.
However, you can use the method here    `JabRefGUI.getMainFrame().getCurrentBasePanel() `. so you don't need that dependency on base panel in globals.
#4121 Review Comments 5:
Thank you, I removed it from Globals and used getCurrentBasePanel instead and it worked.
#4121 Review Comments 6:
Please don't use abbreviations as this makes the code harder to understand: `p -> preferences`.
#4121 Review Comments 7:
Sorry about that, I changed it to preferences, and added a changelog entry as well. Thank you.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4111 Review Comments 1:
Maybe add a FIXME here, so we can revert this when the bug fix is merged
#4111 Review Comments 2:
done
--------------------------------------------------------------
--------------------------------------------------------------
#4109 Review Comments 1:
Is there a Linux switch anywhere?
#4109 Review Comments 2:
Is this used anywhere?
#4109 Review Comments 3:
Functionality totally removed?
#4109 Review Comments 4:
What about the tests?
#4109 Review Comments 5:
Yes, it is turned on by default only on Linux: `defaults.put(FX_FONT_RENDERING_TWEAK, OS.LINUX);`
#4109 Review Comments 6:
Yes, when we put xml in the clipboard (which may happen for copied citation styles)
#4109 Review Comments 7:
Yes, when we put xml in the clipboard (which may happen for copied citation styles)
#4109 Review Comments 8:
There is still a "copy version" button in the about dialog but no separate menu entry. (I didn't change anything as part of this PR; this class was completely unused).
#4109 Review Comments 9:
The clipboard manager needs to run on the JavaFX thread to work, which is not easily achieved in a test. Thus, deleting these tests was easier than trying to rewrite them ;-)
#4109 Review Comments 10:
We have already a class DragAndDropDataFormats, maybe you could rename that and add it to the collection?
#4109 Review Comments 11:
I don't want to interfere with your PR (especially, since I think it might completely remove the `DragAndDropFormats` class or make it internal to the `DragAndDropManager`).
#4109 Review Comments 12:
Add FIXME so we can revert this after they merged the bug fix.
#4109 Review Comments 13:
I really would use my PR as a base. As this done does more than the initial necessary solution. 
#4109 Review Comments 14:
I don't understand the complication (including merge conflicts) but well it doesn't really matter. @Siedlerchr @stefan-kolb can I merge this PR?
#4109 Review Comments 15:
Guess so.
--------------------------------------------------------------
#4107 Review Comments 1:
Use kbd tags 
#4107 Review Comments 2:
I am not sure if you can already do this. As far as I remember the import inspection or other swing dialogs will raise an fx thread error 
#4107 Review Comments 3:
This is necessary so that the entry editor is always bound to correct entry before other events hit it. If there are problems with certain dialogs, then those need to be fixed (call runInJavaFXThread there). I've not yet noticed any issues.
#4107 Review Comments 4:
done
--------------------------------------------------------------
#4106 Review Comments 1:
Just a minor improvement, you can use Optionals orElse here, if the value is present it is returned, otherwise the value from the orElse will be returned 
#4106 Review Comments 2:
Thank you! The point is that if the value is present I don't want to return the value itself, but the .getParent(). And, int the other branch, I can not apply .getParent() to the value saved in the WORKING_DIRECTORY. I don't have lot of experience with optionals and don't know how to use the orElse in this situation.
#4106 Review Comments 3:
This should do the trick: `databasePath.map(p -> p.getParent()).orElse(getWorkingDirectoryPath())`
#4106 Review Comments 4:
Cool! I was not aware map() could be used with optionals! Thank you.
#4106 Review Comments 5:
Hi,

that should be possible with Optional.map:  (You can chain optionals similar to streams, here is a nice overview: https://www.nurkiewicz.com/2013/08/optional-in-java-8-cheat-sheet.html )

This will transform the value by executing getParent if the value is present, otherwise it would return the workingDir path.

`return databasePath.map(Path::getParent).orElse(getWorkingDirectoryPath?)`

PS: Sorry that I reply today, I saw that I did a review using githubs feature, but did not submit the review 🤦‍♂️ )

#4106 Review Comments 6:
Thank you again, @Siedlerchr. I just applied and pushed the refactor proposed by @koppor before seeing your comment.

#4106 Review Comments 7:
It's essentially the same, but using method references looks nicer ;)
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4100 Review Comments 1:
You can simply add a get/setPreviewStyle method which I would prefer.
#4100 Review Comments 2:
You can pass the preferences class as a parameter and then use `mock` in combination with `verify` in the tests below (instead of working on the actual preference object).
#4100 Review Comments 3:
Can you please define these as local variables in the test below and try to simplify it a bit by removing unimportant lines.
#4100 Review Comments 4:
I tried around with this but I currently see no way to do this. When I mock the object, calling the migration method on the object will have no effect as it operates directly on the preferences object. I don't like that operating on the real prefs object but 
Sure I can mock returns, but that's not the goal of this test. 
However, I could remove the dependency on the actual Globals.prefs object by passing a Preferences object as parametre

#4100 Review Comments 5:
I don't see a reason why you shouldn't be able to mock the preferences:
```java
preferences = mock(JabRefPreferences);
when(preferences.getPreviewStyle).thenReturn(oldPreviewStyle);;
verify(preferences).setPreviewStyle(newPreviewStyle);
```
#4100 Review Comments 6:
Got it now, I didn't know that verify is interpreted as "assert" and makes the test fail/succeed 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4069 Review Comments 1:
I think, we could have reused the original material design font without copy and pasting and icon? Let's see, how I can include the new icon, because constructor of `JabRefIcon` needs a `MaterialDesignIcon`.
#4069 Review Comments 2:
@koppor This is on the maintable-beta branch...there JabRefIcon is an interface.
#4069 Review Comments 3:
@koppor That was a design-flaw I fixed for the maintable branch. It basically only needs to implement the `GlyphIcons` interface. In essence it was a more or less simple refactoring and now the `JabRefIcons` constructor can take both our Icons and MD icons. Look at the `org.jabref.gui.icon` package on the maintable branch. Maybe you can cherry pick it somehow.
  
--------------------------------------------------------------
#4068 Review Comments 1:
Is still method still needed, i.e. cannot we just call `stop` ?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4054 Review Comments 1:
Move to `PreferencesMigrations` ?
#4054 Review Comments 2:
This code is appearing twice, too. Can it be moved to `shutdownCurrentInstance()`?

Alternatively, change line this line to 

   if (!allowMultipleAppInstances(args) || argumentProcessor.shouldShutDown()) {

and remove the shutdown code from `allowMultipleAppInstances`.
#4054 Review Comments 3:
Rename that to `handleMultipleInstances`, because some "black magic" is happening here. Nut just a check whether multiple instances are allowed.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4044 Review Comments 1:
In case somebody adds a new formatter with the same key, this test fails but the error message does not say why. I would change `anyMatch` to filter and compare (assertEquals) the resulting map to an empty map.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4031 Review Comments 1:
Doesn't the driver support push notifications? 
#4031 Review Comments 2:
Please remove the above comment, which contradicts the new code.

Has someone tested the new implementation?
#4031 Review Comments 3:
Frm the official doc it supports it:
https://jdbc.postgresql.org/documentation/head/listennotify.html#listen-notify-example
#4031 Review Comments 4:
I can try to test it this evening. I think I have a pg sql db somewhere lying around
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4016 Review Comments 1:
Why do we remove whitespace for the other fetcher? Shouldn't each fetcher decide how to proceed the input? I would just always trim it at this point...
#4016 Review Comments 2:
All other fetchers have a single alphanumeric id or an url so, trimming in general makes sense.
#4016 Review Comments 3:
Copy and paste DOIs from PDFs or homepages (e.g., Springer) leads to identifiers. With the fix https://github.com/JabRef/jabref/pull/3697, there is a speedup in the user workflow. One can just copy something from a PDF/homepage and paste it into JabRef and click "Generate".

From https://github.com/koppor/jabref/issues/283:

`http s://doi.org/10.1007/s13222-018-0273-1` and `DOI: 10.1109/MS.2013.97`.


#4016 Review Comments 4:
I don't say we should remove the functionality. It makes sense and indeed streamlines the user flow. I was arguing in favor of placing this code `.trim().placeAll(" ", "")` in every fetcher that supports it. It terms of coding principles, the current solution violates the "hide implementation details" principle, since the caller of the interface needs to know which fetcher is invoked (TitleFetcher or not) and whether its support white space removal. Moreover, I bet that if somebody implements a new fetcher in a year that relies on correct white space, then he will forget to add this new fetcher to this exception list here.
#4016 Review Comments 5:
I think it really makes sense to add this argument parsing/trimming to the fetcher itself as @tobiasdiez  proposes. Maybe a new method parse input?
#4016 Review Comments 6:
Can you please move this clean-up to the `DOI.parse` method. 
--------------------------------------------------------------
#4015 Review Comments 1:
It appears to me that the `parse` method is no longer needed and I suspect that hence the `allFileTypes` list can be removed. Right?
#4015 Review Comments 2:
Yes missed that. 
#4015 Review Comments 3:
This looks like a duplication (probably due to a problem while merging).
#4015 Review Comments 4:
I think this method should still accept `FileType`
#4015 Review Comments 5:
Here also `FileType`
#4015 Review Comments 6:
here too
#4015 Review Comments 7:
here as well...
#4015 Review Comments 8:
We shouldn't reference dialogs here (as we are in the logic package).
#4015 Review Comments 9:
It probably makes the code below a bit easier to read if you simply store the extensions as a List. Moreover, the comment below can probably be removed.
#4015 Review Comments 10:
For these two method you can provide a default implementation.
#4015 Review Comments 11:
It is probably better to extract this anonymous class to a separate class since it looks to be the standard implementation that can be reused in custom importers
#4015 Review Comments 12:
Also on a second look, I'm strongly in favor of removing the `description` from the file type. It is actually the description of the exporter/importer that we should show in the dialog...if you want to reuse the strings you can extract the descriptions in `BasicFileType` to a new class, but its also ok if you just repeat the description in the importer and exporter.
#4015 Review Comments 13:
I have created a factory method for this. So the caller does not need to create it's own file type objects 
 public static FileType addnewFileType(String description, String... extensions) {
#4015 Review Comments 14:
This would not solve the underlying problem and in fact would result in the same problem I intend to fix here. 
As we have multiple file types with the same extension e.g. html. We already have Html Table, Html LIst etc. Only with the added description, the file type is unique
#4015 Review Comments 15:
I think your example is a good illustration why the current mix of file extensions and description is misleading. The file type is `html` in both examples, but the exporter used is different (tables vs list). You don't get these kind of problems if the `FileType` is only an abstraction of the extension and the description comes from the exporter...
#4015 Review Comments 16:
At least we need the description in the extension filter. Otherwise we can't map it. I will think about this. I will look and see how this would affect the importer
#4015 Review Comments 17:
The logic to convert an exporter (and importer below) to a FileExtensionFilter should reside in `FileFilterConverter`. 
#4015 Review Comments 18:
No, in this case it would not have any additional benefit. It would still return a map. The map is internally handled in the file dialog configuration and there handled. 
--------------------------------------------------------------
--------------------------------------------------------------
#4011 Review Comments 1:
As DOI, Arxiv are not really translateable, I would just add them as parameter, e.g Open %0 Url  %1 (at least for arxiv)

#4011 Review Comments 2:
Done!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#4002 Review Comments 1:
I don't understand the second test. I thought we want to prevent the `GTK L&F` by all means....
#4002 Review Comments 2:
You missed the not. We only go with the System look and feel if it's not GTk 

Furthermore the migration replaces the stored (if gtk) look and feel.
So we are on the safe due 
#4002 Review Comments 3:
ok now I don't understand the complete if statement (and think we can simply delete it).

cases:
- system: gtk -> `lookFeel = Nimbus`, `if = false`
- system: win -> `lookFeel = win`, `if = true` (why do we set the l&f to nimbus?!)
- system: win, WIN_LOOK_AND_FEEL: win -> `lookFeel = win`, `if = true` (again wrong)
- system: gtk, WIN_LOOK_AND_FEEL: gtk -> `lookFeel = gtk`, `if = false` (but we actually wanted to prevent setting it to gtk?!)
- system: win, WIN_LOOK_AND_FEEL: gtk -> `lookFeel = gtk`, `if = false` (again, we don't want gtk)

If I understand you correctly, WIN_LOOK_AND_FEEL = gtk can never happen because of the migration, right? In this case we can ignore the last two cases, but even in the first three cases the behavior is odd.
#4002 Review Comments 4:
I simplified the condition. Now the cases should be more clear.

#4002 Review Comments 5:
use Default L&F:
1. System L&F = gtk => Nimbus
2. System L&F = win => win
3. System L&F = metal look and feel 

Check cross platform 
1. Metal look and feel => Nimbus


--------------------------------------------------------------
--------------------------------------------------------------
#3996 Review Comments 1:
I think you can improve this a bit, if you return here only the stream, and reuse it for the displayName. Is more efficent then adding it to a list and iterating that list again.

#3996 Review Comments 2:
I need the list in line 70?! Once the Stream is terminated I cannot reuse it.
--------------------------------------------------------------
--------------------------------------------------------------
#3988 Review Comments 1:
Even better if you check for case insensitive with equals ignore case 
#3988 Review Comments 2:
Can you extract that BibEntry in the @BeforeEach block and add a few more tests, e.g.:
- no id
- invalid
- id not found but valid
- id with rfc
- id without rfc
- ...
#3988 Review Comments 3:
If possible, we should add this help file now.
#3988 Review Comments 4:
This is also the problem that the tests/compiling fails:
```
/home/travis/build/JabRef/jabref/src/main/java/org/jabref/logic/importer/fetcher/RfcFetcher.java:36: error: cannot find symbol
        return HelpFile.FETCHER_RFC;
                       ^
  symbol:   variable FETCHER_RFC
  location: class HelpFile
```
#3988 Review Comments 5:
Just submitted pull request for updated help files. I'll include change to the HelpFile enum and add helppage test after successful merge into the Help Repo. Thanks! :)
#3988 Review Comments 6:
If this throws an Exception we should asert for the Exception!
#3988 Review Comments 7:
You cann use assertThrows() for this
--------------------------------------------------------------
--------------------------------------------------------------
#3985 Review Comments 1:
I would definitely execute checkstyle first. As it will always fail asap. So you already know that you have to fix this again
#3985 Review Comments 2:
They are not guaranteed to run in the specified order (but are started at almost the same time anyway in most cases). Thus it is more a display thing, and the main build is definitely the more important one.
--------------------------------------------------------------
--------------------------------------------------------------
#3983 Review Comments 1:
I would actually move this in the loop below. Has the advantage that you don't need to clone the entry.
And then you could try it using this way:
```
  if (FieldName.MONTH.equals(key)) {
                    bibEntry.getMonth().map(Month::getShortName).ifPresent(value -> bibTeXEntry.addField(new Key(key), new DigitStringValue(value)));
                }
```
#3983 Review Comments 2:
Can you test if this works?
#3983 Review Comments 3:
Can you please explain the reason for this change. Thanks!
#3983 Review Comments 4:
Or add `LatexFieldFormatter fieldFormatter = new LatexFieldFormatter(...)` in front of the for loop and then add `.map(fieldFormatter ::format)`. In this way, we also support custom bibtex strings (and not only the predefined ones for the month field).
#3983 Review Comments 5:
Does not work, as LatexFieldFormatter a) needs preferences object b) has only a two argument format method and does not implment the interface 
#3983 Review Comments 6:
ok, but it works "with obvious modifications" 😀 
#3983 Review Comments 7:
This method were create only for "#%s#" forma I guess. The output should be "{%s}" to have this result for month
```
month = {mon}
```
not this
```
month = mon
``` 
[check this on #3239](https://github.com/JabRef/jabref/issues/3239#issuecomment-353082567)
#3983 Review Comments 8:
Mhh, I'm pretty sure that `month = jan` is the correct form and not `month = {jan}`. Maybe @koppor can clarify this.
#3983 Review Comments 9:
@Siedlerchr I try ur suggestion but it didnt work.
I can also prefer your solution but instead of making this instruction inside if block 
```
bibEntry.getMonth().map(Month::getShortName).ifPresent(value -> bibTeXEntry.addField(new Key(key), new DigitStringValue(value)));
```
I will keep the instruction that I made.
```
bibEntry.getFieldMap().put(FieldName.MONTH, bibEntry.getMonth().get().getShortName());
```
What do you think?
#3983 Review Comments 10:
Here what happen if you did not add {}.
![image](https://user-images.githubusercontent.com/37413702/39329610-2d3f8392-499f-11e8-9d1c-3426be6128be.png)

as you can see the return of 2005 is in side {} but the return of month isnt it.

the method executed to return year = {2005}
https://github.com/DevSiroukane/jabref/blob/67387113513ce9529e08b62ffc430d13e24f0b4b/src/main/java/org/jabref/logic/bibtex/LatexFieldFormatter.java#L157

the method executed to return month = mon when month field is in this forma "#%s#".
https://github.com/DevSiroukane/jabref/blob/67387113513ce9529e08b62ffc430d13e24f0b4b/src/main/java/org/jabref/logic/bibtex/LatexFieldFormatter.java#L163


#3983 Review Comments 11:
As we know that bibTeX forma should be 
```
key = {value}
```
u can add a debug instruction here [LatexFieldFormatter.java#L166](https://github.com/DevSiroukane/jabref/blob/67387113513ce9529e08b62ffc430d13e24f0b4b/src/main/java/org/jabref/logic/bibtex/LatexFieldFormatter.java#L166)
```
System.out.println(stringBuilder);
```
and see the out put after each change in any field. You will find that only month output is wrong if we miss the {} that I add on 
```
LatexFieldFormatter.java#writeStringLabel(String text, int startPos, int endPos, boolean first, boolean last)
```
#3983 Review Comments 12:
@DevSiroukane You are confusing it here. If it's  `#month#` it should be displayed without braces in the source. So the entry editor part was already correct. 
Only when it's  `month` -> `{month}`
  
#3983 Review Comments 13:
@Siedlerchr are you sure that month should not be between {} on source tab?

because I try to use generate entry using DOI (ex: [10.1109/TSG.2014.2346511](https://ieeexplore.ieee.org/document/6884808/)) and the out put is this on source tab:
```
@Article{Rahbari-Asr2014,
  author    = {Navid Rahbari-Asr and Unnati Ojha and Ziang Zhang and Mo-Yuen Chow},
  title     = {Incremental Welfare Consensus Algorithm for Cooperative Distributed Generation/Demand Response in Smart Grid},
  journal   = {{IEEE} Transactions on Smart Grid},
  year      = {2014},
  volume    = {5},
  number    = {6},
  pages     = {2836--2845},
  month     = {nov},
  doi       = {10.1109/tsg.2014.2346511},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
}
```
#3983 Review Comments 14:
Yes, the month does not need be in braces. Its a feature of bibtex called "Bibtex Strings", see e.g. http://www.bibtex.org/Format/. 
#3983 Review Comments 15:
@Siedlerchr I think I should let source tab month appear as before
```
month = mon
```
I will remove the change as you said @tobiasdiez 
#3983 Review Comments 16:
This comment states the same as it is done in the code. So please "Remove Superfluous Comments" [Java by Comparison](http://java.by-comparison.com/).

You can also describe, *why* a clone is generated!
#3983 Review Comments 17:
I don't understand why this hack is necessary at this place.

In case a field value is surrounded by `#`, JabRef stores the value as follows:

    month = mar

and not

    month = #mar#

See http://help.jabref.org/en/EntryEditor#field-consistency-checking for an explanation. So, I think, either the wrong method is used to get the month or there is something more wrong on JabRef: All other exports should have difficulties.
#3983 Review Comments 18:
This is actually necessary. The problem is that csl can not handle the JabRef special Syntax with the #. Therefore the value of the month field without the # is needed.

For export usually a latex formatter is applied which takes care of this
#3983 Review Comments 19:
Is this a good comment?
```
/**
 * Converts the {@link BibEntry} into {@link CSLItemData}.
 *
 * Clone bibEntry to make a save changes,
 * change month field from JabRefFormat <code>#mon#</> to ShortName <code>mon</code>
 * because CSL does not support JabRefFormat.
 */
```

Clone was generated because bibEntry is shared with many objects. So, to be sure that non of this objects may have issue after changing month field. I create a copy to change on it. 
#3983 Review Comments 20:
@koppor As CSL is not part of our code we cannot inject instructions that handle #mon# forma.
The issue on CSL plugin is still open [Bibtex month like #mar# not parsed #41](https://github.com/michel-kraemer/citeproc-java/issues/41)
#3983 Review Comments 21:
The code changes above work but are more complicated than they need to. I think an easier solution is to extract the lambda expression in this line (`ifPresent(value -> ...)`) to a new method `setFieldValue(bibTeXEntry, key, value)`. In this new method, you can then simply check `if (FieldName.MONTH.equals(key)) {` and use `Month.parse` to get the correct month value.
#3983 Review Comments 22:
I did not notice that bibEntry and BibTeXEntry are different object. I think we do not need to clone bibEntry anymore. 
Instead of create a new method setFieldValue(...) I thought of making if block direct on lamda expression. What do you think?

I execute this code and it work.

```
private static CSLItemData bibEntryToCSLItemData(BibEntry bibEntry) {
    String citeKey = bibEntry.getCiteKeyOptional().orElse("");
    BibTeXEntry bibTeXEntry = new BibTeXEntry(new Key(bibEntry.getType()), new Key(citeKey));

    // Not every field is already generated into latex free fields
    HTMLChars latexToHtmlConverter = new HTMLChars();
    RemoveNewlinesFormatter removeNewlinesFormatter = new RemoveNewlinesFormatter();
    for (String key : bibEntry.getFieldMap().keySet()) {
        bibEntry.getField(key)
                .map(removeNewlinesFormatter::format)
                .map(latexToHtmlConverter::format)
                .ifPresent(value -> {
                    if((FieldName.MONTH.equals(key)) && (value.matches("#[a-z]{3}#"))){
                        value = value.substring(1,4);
                    }
                    bibTeXEntry.addField(new Key(key), new DigitStringValue(value));
                });
    }
    return BIBTEX_CONVERTER.toItemData(bibTeXEntry);
}
```

About https://github.com/JabRef/jabref/blob/master/src/test/java/org/jabref/logic/citationstyle/CitationStyleTest.java I have no idea what I can do if you help me please. I am not used with test on java yet.
#3983 Review Comments 23:
That is also an idea, but I would not make the regex. If you have the field month, I would really get the shortname from the BibEntry then, so value = key.getMonth().getShortName 
#3983 Review Comments 24:
```
for (String key : bibEntry.getFieldMap().keySet()) {
    bibEntry.getField(key)
            .map(removeNewlinesFormatter::format)
            .map(latexToHtmlConverter::format)
            .ifPresent(value -> {
                if(FieldName.MONTH.equals(key)){
                    value = bibEntry.getMonth().get().getShortName();
                }
                bibTeXEntry.addField(new Key(key), new DigitStringValue(value));
            });
}
```
#3983 Review Comments 25:
Very good, we are almost there. Please replace the value assignment line by 
````
value = bibEntry.getMonth().map(Month::getShortName).orElse(value);
````

Background: the `get` method for an `Optional` throws an null pointer exception if the optional is empty. Thus, one has to check `isPresent` before using `get` or, alternatively, use `orElse` instead.

Please push the change to your branch and then we can merge!
#3983 Review Comments 26:
I just post my last request
--------------------------------------------------------------
--------------------------------------------------------------
#3979 Review Comments 1:
Please use Charset utf8 
#3979 Review Comments 2:
It would be preferable if you change the return type from File to Path of the method, as the Path-Class is part of the java.nio and therefore the more modern way. 
#3979 Review Comments 3:
I think you don't need a Veryfying Writer here, a BufferedWriter should be enough:
And you should use the try with resources , which has the advantage that any stream will be closed automatically, also on error. 
Example: 
```
 try (BufferedWriter writer = 
                 Files.newBufferedWriter(logFile, StandardCharsets.UTF_8, 
                     StandardOpenOption.WRITE)) {
```
#3979 Review Comments 4:
What is the purpose of this variable/method? 
#3979 Review Comments 5:
According to the codacy output, the variable errors is never used. And in 90% the cases a normal ArrayList is sufficient, a LinkedList costs more memory. The benefits of a LinkedList seldom outweigh the memory usage in comparsion to ArrayList
#3979 Review Comments 6:
I'll remove it.
#3979 Review Comments 7:
I'm not sure exactly. It is a hold over from the import method which I based the export method on. I guessed that it was needed to start the thread.
#3979 Review Comments 8:
This method is used for the importing which I basically copied and then modified to do the exporting.
#3979 Review Comments 9:
"This starts the export"
#3979 Review Comments 10:
Remove empty line.
#3979 Review Comments 11:
Please remove empty line
#3979 Review Comments 12:
Please remove empty line
#3979 Review Comments 13:
Please remove empty comment.
#3979 Review Comments 14:
If you are on it - please remove the method comment 😇  - or add description. The functionality is not exactly clear by the method name.
#3979 Review Comments 15:
Please add a check if `exportPath` is present. If not (i.e. the user clicked cancel), then we should return early.
#3979 Review Comments 16:
As you say, writing to the external file should be very quick (its below <1k lines in almost every case and usual not more then say 50). Thus the progressbar would only flicker a bit and I would hence propose to perform the export silently without it.
#3979 Review Comments 17:
I think you can simply inline `actionListenerExportEntrys` (and the other listener before it too, if its not used somewhere else).
--------------------------------------------------------------
--------------------------------------------------------------
#3976 Review Comments 1:
Please set the on-button-click-action via fxml as below (`onAction="#navigateToPreviousEntry"`).
--------------------------------------------------------------
--------------------------------------------------------------
#3968 Review Comments 1:
Remove these two lines
#3968 Review Comments 2:
Add comment in line before and add a space.
#3968 Review Comments 3:
Also add the comment here please
#3968 Review Comments 4:
please rename `dl` to something more meaningful
--------------------------------------------------------------
#3967 Review Comments 1:
Well, this now has the disdvantage that the Stream does not get closed. That's why try(....) is preferable.

#3967 Review Comments 2:
There is no Stream anymore?!
#3967 Review Comments 3:
Ah sorry, got confused by the diff.
Why is this ByteArrayInputStream needed? Is there no way to directly get the response with unirest?
#3967 Review Comments 4:
Caused by the interface
#3967 Review Comments 5:
Not sure whats better but we should stick to one: unirest vs our UrlDownloader
#3967 Review Comments 6:
We could directly use jsoup. We use that in dfiferent cases 
#3967 Review Comments 7:
Jsoup is for a DOM that needs to be parsed. I don't need that here. I just need the body contents.
--------------------------------------------------------------
#3965 Review Comments 1:
whats the purpose of the added `map` calls? They seem to always replace the cell value by `firstField` and `secondField`, respectively.
#3965 Review Comments 2:
I think this needs to be
````java
entry.getEntry()
   .getField(field)
   .map(value -> IdentifierParser.parse(field, value))
   .flatMap(Identifier::getExternalURI)
   .ifPresent(
                url -> {
                    try {
                        JabRefDesktop.openBrowser(url);
                    } catch (IOException ex) {
                        dialogService.showErrorDialogAndWait(Localization.lang("Unable to open link."), ex);
                    }
                }
    );
````
because the doi may not be present as a url but only in short form. Or this automatically handled by `openExternalViewer`? @JabRef/developers whats the preferred way to open dois/url ?
#3965 Review Comments 3:
Yes, that's exactly what's happening. The reason here is that `CellFactory` is expecting the field name to choose the icon.
I thought about trying to identify if the column contains a DOI or an URL, but I think this is the better approach, as here this information is already there. 
I'm open for different approaches though.
#3965 Review Comments 4:
`openExternalViewer` can handle DOIs directly. I did not know about `IdentifierParser`, but I can change it, if that's better.
#3965 Review Comments 5:
It looks like MainTableSelectionListener uses JabRefDesktop.openExternalViewer(panel.getBibDatabaseContext(), link, fieldName); Line 259.

#3965 Review Comments 6:
ok, makes sense. The code looks a bit strange but I'm not able to find a more readable solution. Could you please add a short comment explaining the construction. Thanks!
#3965 Review Comments 7:
If I understand the code below correctly, then this method is hit quite often with an empty (or null) string. In these cases (checked using `StringUtil.isBlank`), we can simply return null before looking in the `Map` for a suitable icon.
#3965 Review Comments 8:
I hope a construction like `(entry, content) -> event -> openurlOrDoi(event, entry, content)` with method `openUrlOrDoi(MouseEvent event, BibentryTableViewmodel entry, String field)` should work and is a bit easier to parse.
#3965 Review Comments 9:
Could you please fix this method for the `eprint` column as well. Thanks!
#3965 Review Comments 10:
ok, then simply ignore my remark and keep the `openExternalViewer` call.
#3965 Review Comments 11:
Done!
#3965 Review Comments 12:
Done!
#3965 Review Comments 13:
Done!
#3965 Review Comments 14:
I used `EasyBind.map()` directly, this makes this line somewhat more readable. Additionally to the comment you suggested.
#3965 Review Comments 15:
What about the tooltips @tobiasdiez ? I think we should have them 
#3965 Review Comments 16:
Tooltips should indeed be reimplemented. However, I don't think that these old generic ones are really helpful. Instead of "Open PDF" I would prefer a tooltip that really explains what will happen if you click on the icon, i.e "Open filename.pdf".

Not sure if this should be part of this PR or a follow-up.
#3965 Review Comments 17:
Lets do it as a follow up?

--------------------------------------------------------------
#3964 Review Comments 1:
Can we add a second method there? `generateXmpStringWithoutXmpDeclaration`? Maybe rename to current functio to `generateXmpStringWithXmpDeclaration`. The term "XmpDeclaration" stems from "XmlDeclaration". See https://wiki.selfhtml.org/wiki/XML/Regeln/XML-Deklaration.
#3964 Review Comments 2:
I don't get this change? The old code from line 81 on seems to extract the month perfectly. In case no month is there, the fallback was and still seems to be January.
#3964 Review Comments 3:
Remove empty line 😇 
#3964 Review Comments 4:
Move this down just after `List<String relationships =`.
#3964 Review Comments 5:
Please add an example why you need this substring. It is clear from the code that it is bibtex/key/value, but it should be documented somewhere (and referenced from here).
#3964 Review Comments 6:
We are in the special bibtex mode. So, we hit `bibtex/month/#mar#` in this case, didn't we? Did we hit `bibtex/month/mar`? In the former case, I would assume, the export is corrupted. In the latter case, I don't know, what's happening. In all cases, it strange that the date value of PdfBox is corrupt; we are in our custom bibtex mode 😇 
#3964 Review Comments 7:
yes the fallback is January, but I thought it's better to not include default values like January....
In my opinion, data consistency is somehow corrupted...
#3964 Review Comments 8:
You are right with the schema bibtex/key/value. 
In a former approach I used String#split, but in some cases the value is an url or doi etc. 

So the value in this case can contain "/" and therefore the substring is the easiest way to handle this. Documenting the url problem would be beneficial for future changes.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3955 Review Comments 1:
Can you add a comment, why this works?

The `CitationStyle.isCitationStyleFile(style)` is completely removed. Is this contained in ` CitationStyle.createCitationStyleFromFile(style)`?

Do you have a clue, why `CitationStyle.isCitationStyleFile(style)` doesn't work as expected?
#3955 Review Comments 2:
I'll add a comment.

You are right, `CitationStyle.isCitationStyleFile(style)` is checked in `CitationStyle.createCitationStyleFromFile(style)`. It works as expected and in case the given style is not a valid file, an empty `Optional` is returned. 

Before the returned `Optional` was added to the `JList` without unwrapping it, causing the error in the referenced issue.
--------------------------------------------------------------
#3954 Review Comments 1:
Instead of overriding this method, I would propose to create a new (overridable) method `getHeaderButtons` that results additional header button to be displayed. In this way you ensure consistency as well as reduce code duplication.
#3954 Review Comments 2:
Remove?
#3954 Review Comments 3:
Please remove the dependency on `frame` and replace it by dialog service (which has a `notify` method).
#3954 Review Comments 4:
Since this is hard to understand, I would propose to add a better named method to `JabrefPreferences`. Moreover, the code is probably easier to understand if you add an enum for the different modes.
#3954 Review Comments 5:
Now introduced an enum with methods for setting/get the pref value
 Additionally, the Icons are now directly added in the enum, so it should be easier to change them
#3954 Review Comments 6:
Added a protected method for gettingAddtionalHeader buttons 
#3954 Review Comments 7:
Personally, I would separate the group mode enum from the icon. The mode is something that can (in principle) be defined and used in the model/logic package thus I wouldn't mix it with something gui related.
#3954 Review Comments 8:
Well, however, this is purely a gui thing.  My immediate thoughts were also about storing that in model, but it would provide any additional value. And this makes it easier to directly use the icon,
#3954 Review Comments 9:
make them private again
#3954 Review Comments 10:
remove
#3954 Review Comments 11:
Just from the name of the method, I would have expected a list of buttons as the return value and not a single one. I think, supporting multiple buttons make sense and is not a big change overall.
#3954 Review Comments 12:
"Intersection" and "Tooltip"
#3954 Review Comments 13:
I think there is no need to have these tooltips as instance variables. I would simply inline them.
#3954 Review Comments 14:
Personally, I would extract these methods to a new class `GroupViewModeViewModel` which gives you the graphic and the tooltip (constructor accepts the mode). In this way, you clearly separate everything ui-related from the actual model class. 
#3954 Review Comments 15:
this can be private now, right?
#3954 Review Comments 16:
The texts seem to be interchanged by mistake.
#3954 Review Comments 17:
Don't you agree that a code similar to the above one for the tooltip is better than storing the icon directly in the `groupviewmode`?
#3954 Review Comments 18:
?
#3954 Review Comments 19:
Nope, it's right. As the tooltip should indicate what happens when you press the button,
If you are in union mode currently -> togle intersection
If you are in intersection mode -> toggle union 
--------------------------------------------------------------
--------------------------------------------------------------
#3950 Review Comments 1:
Maybe extract the search delay as a constant
#3950 Review Comments 2:
Logger should be first attribute in the class
--------------------------------------------------------------
--------------------------------------------------------------
#3947 Review Comments 1:
Is this necessary? I think for an export it should not play a role if my flie is named  `test.asdf` for export, as long as the format is correct? 
#3947 Review Comments 2:
Yes, it is necessary, because the xmp write functionality in this case tries to load a pdf file and writes the xmp metadata explicitly only to pdf files. Other usage makes no sense here.

There is also the xmp exporter, where you can use file names like "test.asdf" to write your metadata
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3932 Review Comments 1:
Corporate authors at the end and in the middle work then also, right?
#3932 Review Comments 2:
I guess so. It only depends on the AuthorsList Parser and the BracketRemover. I just added a few tests here to double test the scenario.
#3932 Review Comments 3:
Why not simply
`assertEquals(Arrays.asList(new Author(JabRef), new Author(Kolb)), AuthorList.parse(".."))`?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3919 Review Comments 1:
That does not make any sense does it?
The method returns an optional. So you can directly return formatter.

#3919 Review Comments 2:
I don't want to do nitpkicking but that Regex Formatter indentation is clear off
#3919 Review Comments 3:
Why do you remove the public?
Codacy or whatever will complain that you should always use explicit scoping modifiers. I see no harm in using public here.  I don't know if this even has to be public to be accessible from gradle 
#3919 Review Comments 4:
Same as above
#3919 Review Comments 5:
If no formatter is found, then we still want to try the switch at the end. I now reordered the code a bit and it should be clearer now. Good point.
#3919 Review Comments 6:
Yeah, no idea why there were these `@formatter` comments that prevented an automatic code formatting...
#3919 Review Comments 7:
It's the new convention with JUnit 5 that test classes and their methods are package private. IntellJ even complains if they are marked with public.
#3919 Review Comments 8:
Ah okay, that was new to me
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3913 Review Comments 1:
Now `name` needs to be relative to `org/jabref/logic/exporter/` and not `org/jabref/` right?
#3913 Review Comments 2:
What about moving this method to `JabRefPreferences` as an instance method `createExportFactory(abbrLoader)`?
#3913 Review Comments 3:
Convert these two methods to instance methods and rename them to something like `loadSavePreferencesForExport`
#3913 Review Comments 4:
Whats the reason for this change? The only "advantage" is that we now have a copy of the `paper.aux` file...
#3913 Review Comments 5:
I checked the code and tried out the UI:

![grafik](https://user-images.githubusercontent.com/1366654/38172104-65eb9076-35a6-11e8-9ec2-d47c1b9d8339.png)

The UI works and the code IMHO never goes that path. With that change, the code is prepared for testing the "TemplateExporter".
#3913 Review Comments 6:
I had the fear that maintainers of the AuxParserTest do not know that the TexGroupTest also relies on the aux file. What if another test is created? I would separate tests of different classes as much as possible even if files (`.bib`, `.aux`, ...) are duplicated.
#3913 Review Comments 7:
Seems, I was too tired at JabCon to see the obvious.
#3913 Review Comments 8:
Sorry, but I don't really get what you want to say. You tested it and it worked although the changed code was never invoked?

https://github.com/JabRef/jabref/blob/7844fcbbea65bcbbe6eaf624352ebbe76d897946/src/main/java/org/jabref/logic/exporter/TemplateExporter.java#L161-L171
Gives a name of the form `/resource/layout/<exporter name>.layout`.  With the above change, I suspect that all layout files in `src/main/resources/resource/layout` are no longer found and thus the corresponding exporter stop to work.
#3913 Review Comments 9:
TL;DR: The given name is **absolute**, so it does not matter which class is used.

Longer reasoning (with debugging JabRef):

JabRefs main class is in `org.jabref`, so the path changes from

    file:/C:/git-repositories/jabref/jabref/out/production/resources/resource/layout/html.begin.layout

to

    file:/C:/git-repositories/jabref/jabref/out/production/resources/resource/layout/html.begin.layout

So, no change when debugging JabRef.

I think, it is because the parameter `directory` is given and thus the path is an **absolute** one. (Source: https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResource(java.lang.String))

I would like to change the path to enable the test files residing in the test `resources` folder of "TemplateExporter".
#3913 Review Comments 10:
Ok, if it works then the change is of course fine with me. I was only concerned that the exporter may break.
--------------------------------------------------------------
#3912 Review Comments 1:
Why not fix the test instead disabling it?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3906 Review Comments 1:
Should I convert the comment to an [ADR](https://adr.github.io/madr/) and link it (in a comment `// see ADR-0004`)? I added that comment, because someone might wonder why bouncycastle is integrated.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3898 Review Comments 1:
This is one of the things I hate in Java, you can't have nice things for such a simple task like printing collections... 
#3898 Review Comments 2:
This is actually pretty nice compared to Java 6 & 7 😃 
--------------------------------------------------------------
#3895 Review Comments 1:
You should always wrap those Input and Output stream in the try with resources construct, that ensures that the streams are autoclosed:
https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html
#3895 Review Comments 2:
Remove non-commented parameters - This should automatically be done in IntelliJ if you use autoformat (ctrl+alt+l)
#3895 Review Comments 3:
Why not logging the exception itself, too?
#3895 Review Comments 4:
Please comment that it returns an empty string if something goes wrong.
#3895 Review Comments 5:
Why "Endnote XMP"? What has "Endnote" todo with XMP? I would just use "XMP", because it is an [ISO Standard](https://en.wikipedia.org/wiki/Extensible_Metadata_Platform), not something from Endnote.
#3895 Review Comments 6:
Globals should never be asked. The XMPPreferences should be passed to the method, not taken from globals!
#3895 Review Comments 7:
Do you mean the stack trace of the exception?
Is there a smart solution in JabRef to print the stack trace with the logger (maybe an utility method)?

Otherwise, I would use something like this:
Arrays.asList(exception.getStackTrace())
                .stream()
                .map(Objects::toString)
                .collect(Collectors.joining("\n"))
#3895 Review Comments 8:
The logger methods have  a second parameter which accepts a throwable /exception.
The stack trace will then automatically be printed (handled by the logger itself) 
#3895 Review Comments 9:
The code usually looks something like `LOGGER.warn("Transformation in xmp not possible", e)`.
#3895 Review Comments 10:
Is it possible to add an additional method `writeToDCSchema` with 3 parameters. We should avoid `null` parameters.
#3895 Review Comments 11:
Can you please pass the `Globals.prefs.getXMPPreferences()` dependency as a constructor argument. We are currently trying to reduce the number of calls to `Globals`.
#3895 Review Comments 12:
Can you please pass the `Globals.prefs.getXMPPreferences()` dependency as a constructor argument. We are currently trying to reduce the number of calls to `Globals`.
#3895 Review Comments 13:
Personally, I would wrap these Exceptions in an IOException and then rethrow.
#3895 Review Comments 14:
How do the other exporters get their preferences? Shouldn't they have the same issue with the Globals dependency?
#3895 Review Comments 15:
They get their prefs in the Exporter Factory. In this case it must only be expanded to pass the xmp prefs from the existing pref object 

--------------------------------------------------------------
#3893 Review Comments 1:
I don't think we should cancel regular tasks during the shutdown but let them complete. There may be cases where we definitely want to wait until a task has completed no matter how long it takes. Consider the save operation. Maybe a save of a database of 20 000 entries on a network drive takes very long. If we cancel that, JabRef would stop during the save and corrupt the data.

I think we should not use `shutdownNow` here (and below), but we could print some log message to show that JabRef is trying to shutdown, but some tasks are not complete yet. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3888 Review Comments 1:
Fortunately with the migration to javafx in the maintable-beta branch #3621 this class is no longer needed. So you can leave it like that
#3888 Review Comments 2:
I just saw that they already made their lib compataible with java9 (requires snapshot version=
https://github.com/TNG/ArchUnit/issues/47
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3883 Review Comments 1:
I would prefer a switch case here like in the other dialogs to have it consistent
#3883 Review Comments 2:
Me too, but I'm too lazy right now to change it 😄 
--------------------------------------------------------------
#3882 Review Comments 1:
Use Files.createTempFile
#3882 Review Comments 2:
Maybe add the unit of time we wait. Eg. 10 seconds/minutes or hours?
#3882 Review Comments 3:
isEmpty?
#3882 Review Comments 4:
Do you really need this mapping? All futures that have not completed when the time runs out in the call to `invokeAll` above are cancelled, see https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html#invokeAll(java.util.Collection,%20long,%20java.util.concurrent.TimeUnit)

So there is probably no point in waiting.
#3882 Review Comments 5:
Just an idea: Building a thread pool consumes resources and you are doing this here for every method call. Maybe it would make sense to reuse the `JabRefExecutorService.executeAll()` in this method? JabRef already takes care of shutting down this thread pool, so you could avoid all the lifecycle overhead.
#3882 Review Comments 6:
Not exactly the "usual" way to shutdown a thread pool, but a fair compromise for keeping the application alive. Please note that this does not guarantee a shutdown and might result in memory leaks in weird and highly unlikely circumstances. I would prefer outsourcing this to the JabRefExecutorServices (see comment above).
#3882 Review Comments 7:
Is this log statement really needed? If you do a lot of downloads it kind of clutters up the log imho...
#3882 Review Comments 8:
That's right, good point 👍 
#3882 Review Comments 9:
I used the JabRefExecutor service now. But I think the shutdown there is not correct and might never finish if the tasks itsel do not finish. Currently there is only a shutdown and not a shutdownNow call.
#3882 Review Comments 10:
Why isn't this the usual way? It is directl yfrom the Java docs 😄 
#3882 Review Comments 11:
The only difference between shutdown and shutdownNow is that in the first case tasks are still allowed to complete and in the second they are cancelled. Tasks that never terminate will never terminate in both cases.
#3882 Review Comments 12:
Hide fields and make them accessible via getter?
#3882 Review Comments 13:
In my opinion, the fetcher should make sure that the URL returned is always non-null. Otherwise the usage of `Optional` is superfluous.  
#3882 Review Comments 14:
Do we really need to check that the URL returned is a PDF? This is an additional request. I think, we should just trust the fetcher that it found an appropriate document.
#3882 Review Comments 15:
Using `Optional.map` may be a bit easier to understand.
#3882 Review Comments 16:
We have the class `JabRefExecutorService` that manages executors. Reuse it here?
#3882 Review Comments 17:
I find mocking using mockito is slightly better / easier to read / less code.
#3882 Review Comments 18:
The test was written to remind when somebody implements a new fetcher but forgets to add it in `getFullTextFetchers`. This purpose is defeated if the list of fetchers is specified explicitly here. What was the reason for the change? 
#3882 Review Comments 19:
Ok, will do so.
#3882 Review Comments 20:
This is the single point where this is checked. Otherwise every fetcher has to do this logic. It is vital so we don't get wrong fulltexts.
#3882 Review Comments 21:
The problem was that the reflections find the classes from the comment before as sub classes then. Maybe mocking them does change this behavior!
#3882 Review Comments 22:
What kind of code should replace this?
#3882 Review Comments 23:
Please remove this now unused private method.
#3882 Review Comments 24:
Yes, I was wondering why this check is necessary at all. If the fetcher determines that a given URL contains the right full-text (say because the API tell it so), then why do we need to check that it is a PDF? 
#3882 Review Comments 25:
I was thinking about something like
````java
return fetcher.findFullText(entry)
          .filter(isPdf())
          .map(url -> new FetcherResult(fetcher.getTrust(), url));
````
#3882 Review Comments 26:
Because sometimes it is an HTML site or the access is blocked for the users, resulting in something else than the fulltext 😄 
--------------------------------------------------------------
--------------------------------------------------------------
#3880 Review Comments 1:
Is that an official java dep? 
#3880 Review Comments 2:
Yes, it's a popular JavaEE dependency, see https://mvnrepository.com/artifact/javax.inject/javax.inject.
--------------------------------------------------------------
#3878 Review Comments 1:
else log warning / rethrow?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3875 Review Comments 1:
Isn't this somehow a recursive definition that the decision to use MADR is documented using MADR,.. 😏 ?
#3875 Review Comments 2:
Therefore, it's the ADR-0000 also contained in the template itself. It your own dog food 👯
--------------------------------------------------------------
--------------------------------------------------------------
#3872 Review Comments 1:
I know, I'm getting on your nerves with formatting issues, but the dots should be aligned here, shouldn't they?
#3872 Review Comments 2:
That's not that easily possible as I tried to explain in the other posts. There is no simple align on dot option in Eclipse. And aligning on column will sometimes bee to agressive.

--------------------------------------------------------------
#3871 Review Comments 1:
Should regex really be treated as grammar-based search? I would not treat it like that, because regex search is orthogonal to grammar-based search. One can activate it in addition.
#3871 Review Comments 2:
Reads good!
#3871 Review Comments 3:
Do you really need both? The current regex has a star (`*`) at the end, which means zero (`0`) ore more matches. So, the empty string should match, too.
#3871 Review Comments 4:
At least in the documentation: https://help.jabref.org/en/Search#search-modes they are listed under the heading of "advanced search". But I can easily change that of course.
#3871 Review Comments 5:
I updated the help accordingly to also reflect that regular expressions are orthogonal. 😇 

Could you additionally add a comment there that this is the "Advanced Search" described in the help? I know, this contradicts [DDD](https://en.wikipedia.org/wiki/Domain-driven_design), but I think, it is OK in this place.
#3871 Review Comments 6:
Ok, I adapted the code accordingly.
#3871 Review Comments 7:
Good suggestion, that sounds reasonable. I removed the StringUtil dependency and as far as I can see there is no difference in the search.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3841 Review Comments 1:
@koppor Why does Crowdin revert the changes of https://github.com/JabRef/jabref/pull/3833 ?
--------------------------------------------------------------
#3839 Review Comments 1:
How is font-loading handled in the `jensd.fx.glyphs` library? I would follow a similar strategy as them...Another idea is to create a new static method and call it during application initialization.
#3839 Review Comments 2:
Are there other places that still use `IconTheme.getImage`? If not this method can be removed as well as `InternalFileIcon`.
#3839 Review Comments 3:
what's the reason for the `00` suffix?
#3839 Review Comments 4:
Move this down to the end, since right now it appears in the middle of color definitions?
#3839 Review Comments 5:
What's the reason for uncommenting these menu bar customization? If I remember correctly, they make the menu items a bit bigger to align with the MaterialDesing specifications.
#3839 Review Comments 6:
I think it makes sense to introduce two new colors `-jr-accent` and `jr-accent-text` and use them for all selected/active states.
#3839 Review Comments 7:
Introduce a new color for the scrollbars? I could imagine a theme where the scrollbars pop-out a bit more.
#3839 Review Comments 8:
I would prefer if you could reactivate these menu customizations.
#3839 Review Comments 9:
I think it is confusing to use the same style class for two elements. The css selector `sidePaneComponentHeader > .label` should work.
#3839 Review Comments 10:
Please make the editor background white again...
#3839 Review Comments 11:
Reactivate?
#3839 Review Comments 12:
I would introduce a new color `-jr-sidepane-background` here.
#3839 Review Comments 13:
That's probably personal preference, but I prefer the bigger font size (and smaller for hits).
#3839 Review Comments 14:
this should reuse the same active/selected colors as for the main table, right?
#3839 Review Comments 15:
In your screenshot, the arrow is never visible accept on hover because it is also white...
#3839 Review Comments 16:
use fx-mid-text instead?
#3839 Review Comments 17:
Please reactivate this, because otherwise the rows are styled in a (ugly) strip-pattern.
#3839 Review Comments 18:
I disagree. This is a usabiltily enhancement to difference between odd and even rows. Makes it much easier to see which entry is in which row.  So called "Zebra Striping"
http://uxmovement.com/content/9-design-techniques-for-user-friendly-tables/
https://alistapart.com/article/zebrastripingmoredataforthecase
#3839 Review Comments 19:
See also here for some general ideas about desinging data tables:
https://uxdesign.cc/design-better-data-tables-4ecc99d23356
#3839 Review Comments 20:
Refactored this out. I initially left it because maybe someone still needs a pixel icon in future. But since it is really easy now to add SVG icons if we indeed don't find anything appropriate in the existing ones, this can be removed.
#3839 Review Comments 21:
I refactored this and used the same approach we (and Material Design Icons as well) use. It's now loaded the static initializer of the `IconTheme` class itself.
#3839 Review Comments 22:
That's what happens if you still need a lighter gray than `-jr-gray-0` :) I fixed it.
#3839 Review Comments 23:
It doesn't look good. Even the default padding is larger than it is in other applications, but it looks OK. Compare these two images that show additionally the header of the mail program. First, as I have it now

![current](http://i.imgur.com/tZZfKhQ.png)

And here with the additional padding

![old](http://i.imgur.com/LvlXCde.png)

The menu items look lost in the menu bar. The spacing is far too large. I really would like to keep the default setting.

Btw, in the colorful version, we have now on `maintable-beta`, this kind of made sense because it tried to mimic the look of today's web-pages with their very large top menus. If you decide to work on a different scheme, the large padding might be an option again. But in this scheme, it doesn't work and I'd like to keep it simple and unsurprising for the user.
#3839 Review Comments 24:
I'm against this. Although the font is only one pixel larger on my system and the anti-aliasing is also OK, it introduces a very notable font-difference to the main-table where there should be consistency.  I would accept if this is wanted by most devs, but from my point of view, it is not OK.
#3839 Review Comments 25:
OK, for a scheme that wants to set a different bg for the sidepane than in other controls this makes sense.
#3839 Review Comments 26:
I would leave it like that. The current separator is derived from the main colors and looks good. `-jr-separator` is not used (or even defined) anymore. It was from my first tests, where I tried to define these myself. When cleaning up, I'm going to remove it.
#3839 Review Comments 27:
I still like the second screenshot more and find it more touch-friendly. But, well, we just have different tastes and I definitely understand your viewpoint.
Probably every dev should create an own theme and we then vote which should be the default 😸 
#3839 Review Comments 28:
Good catch. I introduced a color for it in `Main.css` and set it to our orange. This looks decent and the indicator is visible when you drag it over a marked entry.
#3839 Review Comments 29:
Ok, convinced. The base font size should be the same. But I still think the hit-number can be smaller because this is kind of unimportant info.

By the way, did you change the padding of the tree node items? They have a bit tighter feeling than on the current master/maintable-beta, which probably results not from the difference of font-sizes.
#3839 Review Comments 30:
In my tests, the commented section is the color of the small arrow, when the group is selected. This setting is not required anymore as far as I understand it because the arrow has not the same color as the icons and our markup color is bright. It looks currently like this

![indicator](http://i.imgur.com/wQsAR8B.png)

So for me, the arrow is always visible and looks OK even when the entry is selected.
#3839 Review Comments 31:
It looks pretty decent to me with the icon color and since the table header entry *can be pressed* to invoke the sorting action, it made sense to me to indicate this. But this might also a very personal preference. 
#3839 Review Comments 32:
I disagree as well. For the eye, it is so much help if the table has an alternating color. It goes along the same line, why we use fonts with serifs when reading a book. The eye needs guidance.

This was not an accident that I commented it out and introduced the odd/even coloring. Additionally, I made the color difference very, very small so that it is barely noticeable but still has the visual guidance.
#3839 Review Comments 33:
Well, I don't want to start a rant about zebras (they are quite beautiful animals), but anyway here is the rant:
First of all, there are indeed a few studies (like [this one](http://alistapart.com/article/zebrastripingmoredataforthecase)) which show that zebra strips help users in some cases. One should note that the improvement in performance is relatively small (a few 1-3%) and only when the user is required to move vertically in a row to look for data. It is also still controversial whether the better performance comes from a superior design or just because testers where used to the striped style. On the other hand, zebra strips actually lead to worse performance when the task is to quickly identify a desired row containing given data because the eye takes these lines as fix points instead of scan quickly through the dataset. 

So zebra strips may have a place in bigger datasheets where it is required to jump in a specific row and the data spans multiple columns. We have, on the other hand, a very small dataset with like 20 entries on display and 5 or so columns. Moreover, and this is probably the biggest point, a row is highlighted when selected or hovered and thus you get all the benefits of the zebra style without the clean look of the plain table. 

Sorry for the rant but this is one of the things where people just follow the general advice in the form "zebra strips help to navigate in data table" without asking what are the boundary conditions for the performance increase and if they apply in the present case. This leads to a lot of documents /blog posts citing this as a always-good style to present data in a table format. 
#3839 Review Comments 34:
OK. It's only a redefinition, because the only thing I set is `-fx-accent`, but I introduced a `jr` variable for it.

#3839 Review Comments 35:
Yep
#3839 Review Comments 36:
lets ask the other @JabRef/developers  on their opinion on this. I currently find it very hard to identify an entry in the list.  Especially, if you have maybe some entries in which not all required fields are visible. Compare this to the screenshot in the first post. The version from @halirutan  looks much better with the stripes. 
This is also the case when you have multiple files in the list view.

![grafik](https://user-images.githubusercontent.com/320228/37843810-450c6c90-2ec6-11e8-98d4-414eb3408fc1.png)

#3839 Review Comments 37:
OK.
#3839 Review Comments 38:
I give my support for using zebra stripping.
#3839 Review Comments 39:
Done
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3827 Review Comments 1:
I don't understand that. Maybe, the gradle script needs to be rewritten to inject an exported XML file`?
#3827 Review Comments 2:
I think I just found a simpler way. I will update the doc accordingly
#3827 Review Comments 3:
I generally found a nice and simple way.  One can directly export the file in eclipse as EPF file in properties format
The main drawback is that it's not possible to import it with gradle (argh!).
So therefore the only solution would be to read the file, remove all unnecessary lines and write that into the .prefs file (ideally once). Then we can just copy over the prefs file to the workspace.

#3827 Review Comments 4:
Is this file needed?
#3827 Review Comments 5:
Yes, as a reference file. And this file can still be imported manually. 
Mabye someone more experienced in gradle/scripting can create a simple script to copy the things from that file to the workspace org.eclipse.jdt.ui.prefs file

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3824 Review Comments 1:
There is a method which always returns a file dir: getfirstExistingFileDir
#3824 Review Comments 2:
extract to a matcher?
#3824 Review Comments 3:
I know that's its not taht good style to have methods with long params, but why not directly use the FileDirectoryPreferences and ImportFormatPrefernces as args?
#3824 Review Comments 4:
Good observation. Thanks for the hint.
#3824 Review Comments 5:
It turns out that this code is not needed since the `FileUtil` class already handles cleanup of file names
#3824 Review Comments 6:
Mhhh, I tried to collect all the preferences accesses and even for the LinkedFileViewModel it were 5 different settings that are needed. Thus I prefer to keep the general preferences class as dependency.
#3824 Review Comments 7:
Do really the **whole** preferences need to be passed? Didn't we want to implement information hiding here? 😇 
#3824 Review Comments 8:
Please add a JavaDoc pointing to the method one should use from now on.
#3824 Review Comments 9:
I think, only the `IMPORT_FILENAMEPATTERN` and `preferences.getFileDirectoryPreferences()` are needed. Why not pass them both (as quick fix regarding the information hiding). OK, a new preference object would even be better, but that costs more time.
#3824 Review Comments 10:
Actually layoutFormatterPrefernces can be removed from all cleanup ops (did this the maintable beta), but out of scope for this pr
#3824 Review Comments 11:
Also the auto-link preferences as well as the import preferences are needed. You are definitely right, a custom preference object unifying them all would be nice. To be honest, I don't have the motivation right now to create one (especially since the focus of this PR is a different one).
#3824 Review Comments 12:
Good observation. Fixed.
--------------------------------------------------------------
#3821 Review Comments 1:
`newPath` is an optional, so it should never be null (for the same reason as for collections). Please init `newPath` as `empty` (and then this if test should not be necessary).
#3821 Review Comments 2:
What's the reason for the newlines?
#3821 Review Comments 3:
Ah thanks! didn't catch that it was an optional
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3801 Review Comments 1:
could you please pass the `DialogService` directly, instead of the frame (makes the dependency clearer).
#3801 Review Comments 2:
The code style settings still seem to be off. The dots are not aligned (if this is not an artifact of the way github displays the code)
#3801 Review Comments 3:
dito
#3801 Review Comments 4:
here also
#3801 Review Comments 5:
This code should display the error message twice if I'm not mistaken.
#3801 Review Comments 6:
Do these restylings happen automatically? If yes, could eclipse be configured differently? Sometimes they are good, sometimes they feel a bit over aggressive (like here, the two-lines solution was fine in my opinion)
#3801 Review Comments 7:
Thats right, but the dialog does not seem to actually need html (the only tag is for the newline, right?)
#3801 Review Comments 8:
see above
#3801 Review Comments 9:
the exception as an argument is unneeded here, since the stack trace is not helpful at all in this situation: the user entered data in the wrong format and this is said already in the error message.
#3801 Review Comments 10:
directly pass the dialogservice pls
#3801 Review Comments 11:
you missed this one ;-)
#3801 Review Comments 12:
dialogservice everywhere
#3801 Review Comments 13:
This should be easy using https://github.com/JabRef/jabref/blob/f7d96784dda0ee0d9adefd43b5a6803058284500/src/main/java/org/jabref/gui/DialogService.java#L114-L120
#3801 Review Comments 14:
please remove these comments
#3801 Review Comments 15:
previously the dialog was only shown if `style.isFromResource` returned false. Is this change of behavior desirable?
#3801 Review Comments 16:
same here
#3801 Review Comments 17:
This seems to be another inconsistency between eclipse and intellj style
#3801 Review Comments 18:
Use a better title?
#3801 Review Comments 19:
Ah shit, I oversaw that condiation
#3801 Review Comments 20:
I will investigate that 
#3801 Review Comments 21:
The `dialogService` makes more sense as a constructor argument, I think. Probably push it even to `AbstractPushToApplication`
#3801 Review Comments 22:
I thought so, too, but the concrete subclass of PushToEntries (operation) is just  passed as constructur argument as a dependency, so it is not possible
#3801 Review Comments 23:
remove todo?
#3801 Review Comments 24:
You were a second too early ;) 
#3801 Review Comments 25:
Sorry, I don't understand what you mean. The push to application action of course only gets the `PushToApplicaiton` instance without knowing which concrete subclass it is. But this is not a problem as far as I can see since upon initialization each subclass would get a `DialogService` as a constructor argument.
#3801 Review Comments 26:
The problem is: `PushToApplicationAction` already gets an instance of the concrete push operation and only calls `pushEntries`.
And these push-Operations are defined and instantiated here. I can't just pass the DialogService as Constructor arg.
The only thing I could do is to create an additional setter for the Dialog Service

https://github.com/JabRef/jabref/blob/fd98056c76bc340ab7ed62944e13414b20d5a117/src/main/java/org/jabref/gui/push/PushToApplications.java#L16-L20


#3801 Review Comments 27:
Why can't you pass the dialog service as a constructor argument to `PushToApplications`? It seems the only place where this class is initiated is https://github.com/JabRef/jabref/blob/fd98056c76bc340ab7ed62944e13414b20d5a117/src/main/java/org/jabref/gui/JabRefFrame.java#L580
where you have a dialog service at your disposal.
#3801 Review Comments 28:
done
--------------------------------------------------------------
#3800 Review Comments 1:
no abbreviations: `dialogService`
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3786 Review Comments 1:
im Feld?!
#3786 Review Comments 2:
ebenso im?
--------------------------------------------------------------
#3785 Review Comments 1:
Hm, Optional sollte man eigentlich nicht als Parameter nutzen.

#3785 Review Comments 2:
Yes, but this is the only way because `activeDatabaseProperty` uses the generic `Property<T>` (with `T = Optional<Database>`), which provides `setValue(T value)`.
--------------------------------------------------------------
--------------------------------------------------------------
#3783 Review Comments 1:
Any reason why this has to be static?
#3783 Review Comments 2:
No idea... (the code quality in the preferences tabs is so bad anyway).
#3783 Review Comments 3:
I personally see to reason to have this whole column stuff in the preferences tab anylonger. I think it was only added because we could not save the column reordering the user did directly on the maintable. I would vote to remove that stuff completely.
#3783 Review Comments 4:
Well, currently, this is the only place where you can choose which columns are shown. 
#3783 Review Comments 5:
Why not adding a table column selector like it's possible in nearly every table 

![grafik](https://user-images.githubusercontent.com/320228/36739548-8079be70-1be0-11e8-9d63-03d3c064e484.png)

#3783 Review Comments 6:
Here is an example https://gist.github.com/Roland09/d92829cdf5e5fee6fee9

#3783 Review Comments 7:
This is a good idea! I have to think a bit more about it and how to make it work for JabRef (we allow also columns of the form `author/editor` and have to many fields to display them all in a drop down - possible a combination of drop down and text field may work). But not as part of this PR.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3767 Review Comments 1:
I would sill add the `rightSpacer` so that the icons are pushed to the right.
#3767 Review Comments 2:
These bindings are not necessary. Above, they have to purpose to make the left bar as wide as the side pane so that the search box is aligned with the maintable. 
#3767 Review Comments 3:
If we use the same standards for the maintable branch as for main, these todos have to be removed. Is undo/redo really not working for you?
#3767 Review Comments 4:
Add pull/push changes from external database if library is shared.
#3767 Review Comments 5:
I re-added it.
#3767 Review Comments 6:
I removed the bindings.
#3767 Review Comments 7:
I was assuming this from #3640, but after according to some basic testing on my part now, the buttons seem to work.

As far as I recall, undo/redo is not always present for UI components, though.

Anyway, I added the buttons and removed the comment.
--------------------------------------------------------------
#3766 Review Comments 1:
I would prefer a static import of asset und 
#3766 Review Comments 2:
Done!
--------------------------------------------------------------
#3765 Review Comments 1:
@tobiasdiez  Is there a reason why the entries are all wrapped in an Unmodiefable collection? 
#3765 Review Comments 2:
I followed the guide in https://stackoverflow.com/a/28606524/3450689 
@tobiasdiez  How do I implement the insert/delete at best? The problem is that all those ViewModel stuff is wrapped in many Unmodiefiable/ReadOnly Collections which don't support remove/insert 

And calling database.removeEntry/insertEntry everytime I just do drag and drop on the maintable seems to be a bit overhead (as all kind of events are triggering)
Or do we just don't allow reordering the MainTable?
#3765 Review Comments 3:
Yes, so that nobody can add entries to the database without calling `insertEntry` which also does some bookkeeping (id list, tex free version, ...). I think the general principle is that objects should never expose their inner data.
#3765 Review Comments 4:
I think reordering of entries is a delicate business: what does it mean to reorder entries if I sort the table by author? The order of the entries in the bib file is determined independently anyway. For these reasons, I would not try to implement reordering of entries.
#3765 Review Comments 5:
Remove?
#3765 Review Comments 6:
remove debug statement
#3765 Review Comments 7:
What's the purpose of the `event.getSource() instanceof DndTabPane` check?
#3765 Review Comments 8:
Please leave the `);` on the new line since this grouping makes reading the code easier (applies also to the changes below)
#3765 Review Comments 9:
Remove log statements here and everywhere
#3765 Review Comments 10:
shouldn't this be `moveFilesToFileDirAndAddToEntry`?
#3765 Review Comments 11:
Please pass `GUIGlobals.localDragboard` as a dependency via the constructor.
#3765 Review Comments 12:
This should not happen immediately but only after you hover a group for say a second (similar to how it works in the windows file explorer). 
#3765 Review Comments 13:
Again, pls no `GUIGlobals`
#3765 Review Comments 14:
empty instead of null check?
#3765 Review Comments 15:
I think it should suffice to put the entries in the localDragboard, right?
#3765 Review Comments 16:
You should be able to get the entry via `originalItem`.
#3765 Review Comments 17:
Please move the constant "bib" to file util (or somewhere else). Maybe also create a method there `isBibFile`.
#3765 Review Comments 18:
This is all logic and thus should be moved to `BibEntryTableViewModel`.
#3765 Review Comments 19:
Again, I would find it logical here to move and link the file.
#3765 Review Comments 20:
We know what types we want to put in our dragboard and these are only a hand-full (like entries and groups). Thus, I would prefer a strongly-typed version of this class exposing methods like `put/getEntries` and `put/getGroups`.
#3765 Review Comments 21:
Even if we cannot get the file extension, we should still add the file (but with empty type).
#3765 Review Comments 22:
no longer needed right?
#3765 Review Comments 23:
̀Serializable should also no longer be needed.
#3765 Review Comments 24:
With this version we have a complete generic type safe local dragboard. Implementation for groups and bib entries would be the essentially the same code so I decided to use a generic type safe approach.In addition provides possibilities for all other kind of types 

#3765 Review Comments 25:
No longer needed. 
#3765 Review Comments 26:
I thought the default drag and drop operation should be importing the content? This was discussed in #121 
#3765 Review Comments 27:
According to: https://github.com/JabRef/jabref/issues/121#issuecomment-368215205
- Drop on preview/entry editor: link file to target entry
- Drop on preview/entry editor with Alt held: link file to target entry
- Drop on preview/entry editor with Shift held: rename to filename pattern, move the file to file directory and link file to target entry
#3765 Review Comments 28:
There speaks nothing against leaving the generic Map here, but personally I find `putValue(DragAndDropDataFormats.BIBENTRY_LIST_CLASS, entries)` harder to read than `putEntries(entries)`. Thus, my suggestion was to add overloads for the common use cases (similar to how the javafx dragboard has get/has/putFiles methods).
#3765 Review Comments 29:
The problem is that 1 and 3 are the same on Windows.  so I am going to stick with option 3.
--------------------------------------------------------------
#3764 Review Comments 1:
 If you could just wrap that "Any file" in Localization.lang, I would be happy.
Otherwise LGTM! :+1: 
#3764 Review Comments 2:
@Siedlerchr With this addition, is
https://github.com/JabRef/jabref/blob/58c2c7aa941744d9341454bfb5eeabeed77ab54e/src/main/java/org/jabref/gui/util/FileFilterConverter.java#L47-L49
now obsolete?
#3764 Review Comments 3:
Still a little difference, but you are in general right. 
#3764 Review Comments 4:
So what exactly is the difference? Should we just remove the old one?
#3764 Review Comments 5:
All available import formats  = All supported file extension
Any file = Any extension not registered as default 
--------------------------------------------------------------
#3762 Review Comments 1:
Maybe not a "Warning message", in fact it's an information message.  The user can't do anything about it.
#3762 Review Comments 2:
Well, infact it's a bit more important than just a simple notification, but I'd be open if others agree with you I'ts gonna be changed.
#3762 Review Comments 3:
I think, this makes it not better. Now, JabRef migrates WITHOUT ANY notification. The old way was better. It showed that something was migrated.
#3762 Review Comments 4:
Well, then lets discuss this again: The rationale behind #3658 was that the warning should be displayed iff there is BOTH a comment and and review field present and perform the migration silently nonetheless.


--------------------------------------------------------------
#3761 Review Comments 1:
Maybe, `%s` does something magic? Or does the `get()` do magic?
#3761 Review Comments 2:
wow. well I'll write a unit test for that and then we'll see.
#3761 Review Comments 3:
I always forget the specifc string arguments formatter, too
`%$1s` etc- Maybe that helps?
An argument index is specified as a number ending with a “$” after the “%” and selects the specified argument in the argument list.
https://dzone.com/articles/java-string-format-examples
#3761 Review Comments 4:
No, we just forgot that `COMMENT` is a mutli line field. We decided two or three years ago that JabRef rewraps all field values to have a good looking bibtex file. We make exceptions for **predefined** multi line fields. I am working on an update.
#3761 Review Comments 5:
Please extract these fields that should be treated as multilines to `InternalBibtexFields` (or a better location). Moreover, a few places still work with https://github.com/JabRef/jabref/blob/733da312471c3abab691d61eccee061962357e1c/src/main/java/org/jabref/model/entry/FieldName.java#L107 instead of `comments`. This should be changed too.
--------------------------------------------------------------
#3760 Review Comments 1:
The "Clear search" shortcut is customizable. Please use https://github.com/JabRef/jabref/blob/667525afe3d36ea1636ce814aa81c2d702e009b9/src/main/java/org/jabref/gui/keyboard/KeyBinding.java#L14
to check for the correct key (using a KeyBindingRepository).
#3760 Review Comments 2:
Just take a look at the setupKeyBindings in the EntryEditor, we use that code in several other classes, too.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3756 Review Comments 1:
Like the idea, but why not integrate it with the rest of our cli infrastruture? 
Maybe as part of an "Importer" or Exporter?
http://help.jabref.org/en/CommandLine#import-file--i-filenameimport-format
#3756 Review Comments 2:
Remove empty parameter description 😇 
#3756 Review Comments 3:
Do we actually need this tool as a separate executable now that the functionality is included in the usual CLI?
#3756 Review Comments 4:
It's a convenient tool to add metadata to pdf files. If there is the possiblity to build a standalone jar with the multi-model build, why not use the chance to offer this tool to more users and make this tool more popular?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3747 Review Comments 1:
Just one minor thing: you should wrap keycodes in kbd tags, like `<kbd>ESC</kbd>`
#3747 Review Comments 2:
Oh so that's what was meant by wrapping keys in the changelog. Didn't know it actually means keycodes. My bad.
#3747 Review Comments 3:
Please do not add `@author` tags even if the exercise sheet requested it.
#3747 Review Comments 4:
Should I then push a new commit with the author tag removed or should I do that in the new pull request which would be based on the branch _javafxGlobalEverything_?
#3747 Review Comments 5:
Just remove it on this PR. Then, this PR is ready for merge.

Please create a new branch based on `javafxGlobalEverything`. I think, the implementation will differ much, so you can start from scratch? 😇 
#3747 Review Comments 6:
Of course, no problem :smiley: I'm actually enjoying this myself and am learning a lot about developing larger-scale open-source projects so starting from scratch sounds fun :smile:.
#3747 Review Comments 7:
While you are on it, could you do that here? <kbd>ESC</kbd>?
#3747 Review Comments 8:
The `/` got lost at this quick fix. Note that the closing XML element is `</kbd>`.
--------------------------------------------------------------
--------------------------------------------------------------
#3745 Review Comments 1:
Please don't use underscores, but camel case, i.e., `anotherDatabase`. (here and in the test below)
#3745 Review Comments 2:
Thanks for your reply. I will change it.
#3745 Review Comments 3:
can you remove these two new newlines? 
#3745 Review Comments 4:
now the indentation is wrong
--------------------------------------------------------------
#3744 Review Comments 1:
Please don't change the `format` method but only `AuthorList.parse` since the former has almost no test coverage while for the latter exists an extensive test suite. 
#3744 Review Comments 2:
done :) 
#3744 Review Comments 3:
Thanks! Did you also run the tests in `AuthorListTests`. I'm pretty sure that some of them now fail. The problem is that now `A, B,C and D, E` and `A, B and C, D, E` are mapped to the same `A, B, C, D, E` and the parser can no longer decide between those two inequivalent inputs.
#3744 Review Comments 4:
Would you mind describing the fix in more detail?
#3744 Review Comments 5:
Please use the format `[koppor#294](https://github.com/koppor/jabref/issues/294)`
#3744 Review Comments 6:
It is strange that your commits include that change. Please try to remove it.

You can use `git reset upstream/master` and then re-create your commit using `git gui`.
#3744 Review Comments 7:
Please do not add empty lines in classes which you did not touch otherwise.
#3744 Review Comments 8:
Checkstyle will complain about too many empty lines, didn't it?
#3744 Review Comments 9:
Are you sure that his works in all cases?

What about

Lastname1, Jr1, Firstname1 and Lastname2, Jr2, Firstname2

(See https://tex.stackexchange.com/q/206760/9075)

This will produce three names, won't it?

Lastname2, Jr1 and Firstname1, Lastname2 and Jr2, Firstname2.

So, the quick fix is not a fix. Please add tests for normal handling of the "Jr" parts. Please google a bit for examples. The example given at https://tex.stackexchange.com/q/206760/9075 should be a good start.
#3744 Review Comments 10:
Oh, I had the same comment as @tobiasdiez 

So, please add our examples as test cases.
--------------------------------------------------------------
--------------------------------------------------------------
#3742 Review Comments 1:
Better: "Accept all changes"?!
#3742 Review Comments 2:
Oh right ahah my bad.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3739 Review Comments 1:
remove
#3739 Review Comments 2:
This code is hard to understand and not clear on the first sight.
Better create two variables: e.g. union and intersection and then store the corresponding value

#3739 Review Comments 3:
this is really not a good idea. If you quickly go over the code you most certainly will oerlook the not sign.
The goal is to have clear code which is ideally understanding at first sight.
https://8thlight.com/blog/dariusz-pasciak/2015/05/28/alternatives-to-boolean-parameters.html
#3739 Review Comments 4:
Ideally you would have an enum with two states, e.g. GroupState... but in this case this might be an overkill. 
#3739 Review Comments 5:
Remove your author comments. 
We keep our authors in a separate file: https://github.com/JabRef/jabref/blob/master/AUTHORS
--------------------------------------------------------------
--------------------------------------------------------------
#3734 Review Comments 1:
Coressponding issue?
#3734 Review Comments 2:
Sorry I forgot. Fixed it.
#3734 Review Comments 3:
Better use the new java 8 Date & Time Api 

Construt a  DateTimeFormatter.ofPattern("MMM", Locale.DE) 
Use YearMonth.parse  and then you can get a Numeric value from that
https://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html#parse-java.lang.CharSequence-

#3734 Review Comments 4:
Better move the method above in the parse method, so the parseGermanMonth will be executed when the others returned empty. Just like it it is deone with the getMonthByShortName
#3734 Review Comments 5:
I fixed it. Is it better like this?
#3734 Review Comments 6:
Sorry, I don't know exactly what you mean. 
#3734 Review Comments 7:
Yep! Looks better now
#3734 Review Comments 8:
Okay, I will try to explain:
Move the method parseGermanShortMonth before the catch block. and after the getMonthByShortName:
```
 month= Month.parseGerman....
if(month.isPresent)
return month;
```
The end result is the same, but it looks more logical in the whole parse method:
1. We check if the value is empty
2. We try to get the normal short month
3. we try german short month
4. last try:  try into parse it as number 

Otherwise from a quick look I would see and think: Okay, if the integer parsing fails it implies it is automatically a German month. And that might not be the case. In reality the integer parsing maybe failed because we entered 9999
#3734 Review Comments 9:
Please do not put `@author` tags. We acknowledge our authors in `AUTHORS`. See https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#author-credits. Please ensure that your git configuration `user.name` and `user.email` is correct.
#3734 Review Comments 10:
The indent seems to be wrong here. Use auto-format of your IDE. Ctrl+Alt+L in IntelliJ.
#3734 Review Comments 11:
<s>The idea of https://github.com/JabRef/jabref/pull/3536 was to parse all available languages. Also Spanish, Greek, etc. Therefore, all available locales were fetched at https://github.com/JabRef/jabref/pull/3536/files#diff-3c5fdac594bc2e649536f5ecdcb481ccR122 and iterated on. Is this possible here, too - or does it clutter the code?</s>

After more thinking, I would say, we do not iterate on all locales and keep German only, because only the literature list by http://www2.informatik.uni-stuttgart.de/zdi/buecherei/NCSTRL_listings/FAK/index.html causes these issues and I am not aware of any other systems.
#3734 Review Comments 12:
Done: <s>Please also add a test for `Maerz`, which is returned by the Stuttgart System: http://www2.informatik.uni-stuttgart.de/zdi/buecherei/NCSTRL_listings/FAK/index.html</s>
#3734 Review Comments 13:
Thanks for the detailed explanation. I adjusted it.
#3734 Review Comments 14:
Okey I understand, but I have done that for PE1718, but the worksheet said so for authorize. I deleted it and will put my name directly in the Pull Request.
#3734 Review Comments 15:
I use Eclipse, hopefully Ctrl + Shift + F will have the same result.
#3734 Review Comments 16:
I adjusted it.
#3734 Review Comments 17:
The indent is wrong here. I have no clue, what is going wrong on your side. Do you use tabs instead of spaces?
#3734 Review Comments 18:
I also put in an if-statement for checking for `Maerz` in the method `parseGermanShortMonth`, because I was not sure if the Locale checks for this.
#3734 Review Comments 19:
To test whether the if is needed, uncomment it and execute the unit test.
If the test is green, you won't need it.... 


Regarding the code style format, did you execute gradlew eclipse? It should import the correct style settings 
#3734 Review Comments 20:
I don't know what went wrong. I used the auto formatter of Eclipse, so it could be the tabs. Now it looks better after replacing the tabs with spaces by hand. I should definetly change the IDE if this is a common problem.  
#3734 Review Comments 21:
What if it is "mae" in lowercase?
#3734 Review Comments 22:
Also add tests for lowercase?
#3734 Review Comments 23:
The test is then red. So I leave the if-statement in there?
#3734 Review Comments 24:
The German short forms are in uppercase. So what should be tested?
#3734 Review Comments 25:
The implementation should use `equalsIgnoreCase`.
#3734 Review Comments 26:
Well, then just copy the test cases to a new method and then just call month. Parse with the lowercase name
And execute the tests then
#3734 Review Comments 27:
Please move that after line 95. the German month only has to be determined if there is no English month.
#3734 Review Comments 28:
Please fix indent.
#3734 Review Comments 29:
Tests were added.
#3734 Review Comments 30:
Done.
#3734 Review Comments 31:
Please remove this and the line above. Just use [equalsIgnoreCase](https://www.tutorialspoint.com/java/java_string_equalsignorecase.htm) in line 123.
#3734 Review Comments 32:
Now no German months are accepted with lowercase, just `mae`.
#3734 Review Comments 33:
I overlooked this case. I think, you have to change the if then to following

    if (("Mae".equalsIgnoreCase(value)) || ("Maerz".equalsIgnoreCase(value))) {

Please also ensure that a test case for `Maerz` is in there. If it was already, then I don't get why that code still worked.
#3734 Review Comments 34:
The dateformatter is case-sensitive by default. (Adapting) the following code should work:
````java
DateTimeFormatter formatter = new DateTimeFormatterBuilder()
    .parseCaseInsensitive()
    .appendPattern("yyyy-MMM")
    .toFormatter(Locale.US);
````
--------------------------------------------------------------
#3733 Review Comments 1:
This class has to many UI-dependencies to be in `logic`.
#3733 Review Comments 2:
Maybe rename that with the action suffix so that it is better distingusishable from the other migration 
#3733 Review Comments 3:
I would add the Dialog suffix to better see that above
#3733 Review Comments 4:
I would split that into assignment and declaration. It's unforunately not so easy distinguishable what what ist, because all is named very similar 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3721 Review Comments 1:
Just please add a Logger debug statement here, otherwise underlying eceptions may get swalloed
#3721 Review Comments 2:
Alright, already done.
#3721 Review Comments 3:
Why this? Can't we just put `Objects.requireNonNull(command)`? I think, Item 49 of [Effective Java, 3rd edition](https://www.amazon.de/Effective-Java-Third-Joshua-Bloch/dp/0134685997?tag=jabref-21).
#3721 Review Comments 4:
`null` should never be used. Use Optionals. (See http://java.by-comparison.com/ and effective java).

In the concrete case, use `Objects.requireNonNull()`.
#3721 Review Comments 5:
Why not `ExecutorService.invokeAll()`? See https://stackoverflow.com/a/1250668/873282.
#3721 Review Comments 6:
I did the null check this way because every other method in the class checked for null exactly the same way. In this case we should consider changing all other methods to `Objects.requireNonNull(...)`
#3721 Review Comments 7:
Yeah, this is the preferred way. Hope, nothing breaks if this is done at other places. 😇 
#3721 Review Comments 8:
Please remove empty line. - only one empty line at most 😇 
#3721 Review Comments 9:
I would do it at as `info` as it might be interesting for the user.
#3721 Review Comments 10:
Use `executeAll` from above?
#3721 Review Comments 11:
This is asserted by the API. I think, this line can be removed.

Typically `Objects.requireNonNull(...)` is only used at the beginning of a method to check parameters. Not in the middle.
#3721 Review Comments 12:
An empty list should be returned.
#3721 Review Comments 13:
`futures.stream().map(f -> f.get()).countif(...` --> Please try to use Java8's streaming API - if possible. 😇 
#3721 Review Comments 14:
I hope, this goes well 😇 
#3721 Review Comments 15:
I just wanted to avoid returning null. I'll remove it.
#3721 Review Comments 16:
Yeah, totally understandable. I think, that's why `@NonNull` annotations are there for... --> https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_annotations.htm We are currently not using them in JabRef.

Otherwise, the whole could had to be cluttered with `Objects.requireNonNull(...)` statements, because `null` should be avoided in any case. 🔢 
#3721 Review Comments 17:
I checked stackoverflow. It should read `count = futures.stream().filter(f -> f.get()).count();` Shouldn't it?
#3721 Review Comments 18:
Indeed. Using a filter seems to be the better option to me. Only downside of this is, we need to catch  the Exceptions within the filter... but ok, I'll do it that way.
#3721 Review Comments 19:
Please use `logger.error` and pass the exception as an argument. Btw, Invokation is German not English ;-)
#3721 Review Comments 20:
again, pls `LOGGER.error`
#3721 Review Comments 21:
Instead of the try, catch, finally construct it is actually easier to follow the rule "return as soon as possible" and write something like
````java
try {
   return f.get();
} catch (...) {
   Log;
   return false;
}
````
#3721 Review Comments 22:
please don't use abbreviations, `future` is better than `f`.
#3721 Review Comments 23:
Unfortunately, `Logger` does not provide any `PrintStream` to print the stacktrace as suggested here: https://stackoverflow.com/a/1149712 by using `e.printStackTrace(anyPrintStreamHere)`. So what's there preferred way to print the StackTrace to the LOGGER.error method?

EDIT: just found out you can pass a throwable to the error method. This makes this question obsolete.
#3721 Review Comments 24:
In this case I was looking at this anwser: https://stackoverflow.com/a/17405806 which prefers the way to return at the end of the method. I will change the code as you suggested.
#3721 Review Comments 25:
Just to be sure: Do not miss the `return Collections.emptyList();` here.
#3721 Review Comments 26:
I would not break the loop here, just continue with the next future. If the `return false;` makes sense here, please add a comment why `false` is returned.
#3721 Review Comments 27:
the return is for the lambda so everything is fine.
#3721 Review Comments 28:
Travis fails becoaseu of checkstyle:

```
:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/org/jabref/gui/journals/AbbreviateAction.java:18: 'org.slf4j.Logger' should be separated from previous imports. [ImportOrder]
[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/org/jabref/gui/journals/AbbreviateAction.java:31:5: Static variable definition in wrong order. [DeclarationOrder]
```

Could you please fix that, too? -- Just move it before the other variable declarations.
--------------------------------------------------------------
#3720 Review Comments 1:
Can you try to remove the dependency on `Globals` from the logic classes? I think it is better to have static constructor methods here (accepting e.g. the terms loader as parameter) instead of static lists. Not sure how many classes are using these fields right now...
#3720 Review Comments 2:
Turns out this is way harder than expected. There are several other static classes (e.g. `Cleanups`) that depend on this. I'll try to get this extracted somehow, but the current version definitely is not functional.
#3720 Review Comments 3:
Why not just new ArrayList(formatters.getAll())?
#3720 Review Comments 4:
same as above
#3720 Review Comments 5:
When I get the braces right, it would make sense to directly use a stream to filter the  `! isInternalList ` and then only iterate the result collection and apply the actions on them
#3720 Review Comments 6:
In this case it is a defensive copy. The reference to the internal list should not escape the method, because the callers could modify it (which happens in the case of the case changers).
#3720 Review Comments 7:
Well, the loop has side effects (adding to `externalFiles`), so you cannot trivially rephrase that as a lambda. Since it's also not actually the target of the PR, I would prefer not to do this change. 
#3720 Review Comments 8:
Good point, done.
#3720 Review Comments 9:
That's not what I meant:
You could split that in two parts: First filter all !internal things and return the result as a Collection/List. 
Second step you can  iterate that result collection (a smaller result set)  like it is done now.
#3720 Review Comments 10:
Ok, if you really want, there you go. Not that this matters, there is a one digit number of lists here ;-)
--------------------------------------------------------------
--------------------------------------------------------------
#3718 Review Comments 1:
I like the following code a bit more:
````
ligaturesMap.foreach((pattern, replacement) -> {
     result = pattern.matcher(result).replaceAll(replacement);
});
````
but this is probably a matter of taste....

#3718 Review Comments 2:
Why not using a BiMap from Guava? As far as I know we already do that for the html/latex mapping as well.
I would be in favor of this - as a way to convert back
#3718 Review Comments 3:
That's not possible because of side effects. `result` is overwritten in every iteration. You shouldn't do this in a lambda. Hence, I'd like to keep it as it is.
#3718 Review Comments 4:
I had a quick look at this. `BibMap` is an interface and its implementations (e.g. `HashBiMap`) don't have constructors, so I cannot extend them.  So, I would have to implement all map methods anew.

Although it would be nice, let us wait with something like that until we have an actual use case. Right now, reversing a standard Java Map is much less code than hooking into the Guava collections.
#3718 Review Comments 5:
Annotate ADR? 😇 -> Y-Statement instead of huge MADR?
--------------------------------------------------------------
--------------------------------------------------------------
#3715 Review Comments 1:
I am really no friend of the inline syntax for conditional branching. In this special case (calling super), I'll go with it though. The reason for this is it's not possible to do a proper branching before the `super` call and the line is actually quite readable.
#3715 Review Comments 2:
There is already `add\ group` in line 57 of the same file. We really don't need localizations that differ only in the casing of the first word. Please remove the old (lower case) localization and make sure that everything still works.
#3715 Review Comments 3:
Why is there a call to `Easybind.monadic`? To get the selected group, you only need to call `row.itemProperty().getValue()` and that's it. Please change the line accordingly.
#3715 Review Comments 4:
The old localization line is used by  `gui.groups.UndoableAddOrRemoveGroup.getPresentationName()` to name a undoable/redoable action. The problem is, that all actions of this kind are named in lowercase, it would be awkward to change just this name to uppercase.
#3715 Review Comments 5:
Thanks, i think so too. The only alternative would have been to create a separate method just to determine the name of the frame.
#3715 Review Comments 6:
Good point, fixed in 3ae9885.
#3715 Review Comments 7:
I'm not happy with having the essentially same translation key twice, but I get your point. We can leave this as it is.
--------------------------------------------------------------
#3714 Review Comments 1:
It is actually easier to use `Easybind.subcribe()` to listen to changes: you don't need a listener class and provide the code simply as a lambda expression. In this case, you get a subscription as the return value and call `unsubscribe` to, well, unsubscribe. 
#3714 Review Comments 2:
The convention is that such methods are not prefixed with `get`, i.e., use `typeProperty()` instead.
#3714 Review Comments 3:
Renamed.
#3714 Review Comments 4:
Thanks! I've refactored the listener into an EasyBind subscription as you suggested. Slowly but steadily I learn more about programming JavaFX :)
--------------------------------------------------------------
#3713 Review Comments 1:
@Siedlerchr Thanks for the fix! However, it appears there is still a problem with your eclipse style configuration (alignment at dot).
#3713 Review Comments 2:
Why not throw an IOException instead? Or maybe put the call to `importDatabase` into a try-catch that converts the IOException into an ImportException? 

Overall, it would be better to throw just one Exception type. Then you don't have to change all tests to `throws Exception`, which imho is ugly, because it is so generic.
#3713 Review Comments 3:
Constructing a `JAXBContext` is very expensive. It is so expensive that you notice it even as a human. Please turn this into an instance variable, then the construction takes place only once per importer object. Or you could just store the `Unmarshaller`, which should be enough as well.
#3713 Review Comments 4:
That's a funny way of determining the format :-) Somewhere in the first 50 lines a `records` tag has to appear? Why up to 50? What if some random garbage comes before the `records` tag? Would JAXB still be able to parse that?
#3713 Review Comments 5:
Isn't the generic `Exception` the preferred choice for tests anyway? It has the advantage that you not need to change your tests if you decide to change the exception signature of the method under test.

I prefer to keep it that way. The error is not coming directly from the file system and thus it is not an IOException in my opinion.
#3713 Review Comments 6:
Good to know! I actually copied this part from the medline importer and will change it there too.
#3713 Review Comments 7:
That's another thing I just copied from the medline importer. Can jaxb test the file without actually parsing everything? If not I find the "record appears near the beginning" a relative good heuristic.
#3713 Review Comments 8:
Nope, JAXB will try to parse everything. So you could go with such a heuristic, but could you just improve the code a bit? E.g. no side effect (line reading) in the condition of the while, promoting the magic number 50 to a `private final static` and so on.
#3713 Review Comments 9:
In tests it doesn't matter which exceptions are thrown
--------------------------------------------------------------
--------------------------------------------------------------
#3711 Review Comments 1:
Hm, not sure if I like these Supplier Lambdas...Are they really needed? Makes the methods look more complex and I doubt that the evaluation of the message really takes a long time. WDYT?
#3711 Review Comments 2:
In the beginning I did not see that I can pass the message as parameter without a supplier . The later tests are without. The supplier is only needed in the assertThroes 
--------------------------------------------------------------
#3710 Review Comments 1:
Just remove that line
#3710 Review Comments 2:
I would not comment these functions as the implementation might change... The comments could co at `setEditor` etc. as method comment.
#3710 Review Comments 3:
Ok, I will change this with the next commit. 
#3710 Review Comments 4:
shouldn't this also be either a Path? 
#3710 Review Comments 5:
I am not sure, but does the parser accepts an inputStream? Then you could use Files.newInputStream...
would be actually preferable over a fileReader
#3710 Review Comments 6:
No overloaded parse method, which would accept an InputStream.
#3710 Review Comments 7:
No. The parameter is a file or sometimes also the filePath as a string is possible.
#3710 Review Comments 8:
Please use `Path` as long as possible (i.e. until we use an interface that we cannot control and which expects a traditional `File`). This remark applies to this method and a few other places.
#3710 Review Comments 9:
Since you are already touching most of the code in this class, it would be nice if you could rework the whole class from a collection of static helper methods to a "normal" class with instance methods. It appears that the file is passed to every single method so this is a natural candidate for a constructor argument. I'm not sure how much code is shared between writing and reading of xmp, but maybe it makes sense to split the class in an `XmpReader` and `XmpWriter`.
#3710 Review Comments 10:
Can you please move the part, where the type is set to a default, to the `getBibtexEntry` method.
#3710 Review Comments 11:
`assertEquals(Collections.emptyList, entries)` to get a better error message in case the test fails.
#3710 Review Comments 12:
I think it is easier if you just create the entry by hand (and then write it, read and compare).
#3710 Review Comments 13:
Is there a reason why the month shouldn't be post-processed to get a proper bibtex value? We even have the `Month` class which handles parsing and converting to the correct output.
#3710 Review Comments 14:
Further below (starting at line 218), we added exceptions for the update dependencies task. These are now invalid and should be removed.
#3710 Review Comments 15:
Done
#3710 Review Comments 16:
Done
#3710 Review Comments 17:
Done
#3710 Review Comments 18:
DONE
#3710 Review Comments 19:
I tried to separete the logic in two utility classes and a shared utitlity class. 
Currently I don't see the benefit of getting "normal" reader and writer. I introduced two Extractors for the DocumentInformation and the DublinCore format. Maybe that's what you have intended.

I pushed a WIP state for another review. Maybe you have further suggestions, how to structure the package.
#3710 Review Comments 20:
We once agreed on avoiding single char variables. Please use a meaningful name here and for the others 
#3710 Review Comments 21:
I think you could encapsulate part of this as a stream. at least the filtering and mapping to the key.
https://www.mkyong.com/java8/java-8-filter-a-map-examples/
#3710 Review Comments 22:
I think we have a method in our own StringUtil class which combines both checks: IsNullOREmpty
#3710 Review Comments 23:
Please stick to the java 8 new date and time api: Use a DateTime or just a DateFormatter 
DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
LocalDateTime dateTime = LocalDateTime.parse(str, formatter);

#3710 Review Comments 24:
Why not use a stream with filter and map
#3710 Review Comments 25:
Please avoid single char vairbales
#3710 Review Comments 26:
I would prefer a switch/case here, but that's just my style. The others don't like them that much ;) So you can change it or leave it.
#3710 Review Comments 27:
I leave it :)
#3710 Review Comments 28:
Done with https://github.com/JabRef/jabref/pull/3710/commits/366aeed6a6870386c9eb4ba657332faff8f7d576 
#3710 Review Comments 29:
You can use chained maps on the optionals for each step:
This should work
meta.map(m->m.getDublinCore().map(m->new DublinCore...).map(entry->extractBibEntry).ifPresent(result::add)
#3710 Review Comments 30:
Done with https://github.com/JabRef/jabref/pull/3710/commits/366aeed6a6870386c9eb4ba657332faff8f7d576. Please check the conditions again. It's not that natural to negate the isNullOrEmpty... Maybe another function would help in the StringUtils.
#3710 Review Comments 31:
Please always log exceptions, at least add a debug. Just to make sure that not any other underlying exception is swallowed.

#3710 Review Comments 32:
Reason for a linked list? In most cases ArrayList is sufficient
#3710 Review Comments 33:
I find the current state more readable than the chained map operations... Do you have another suggestion?
#3710 Review Comments 34:
That's a question, I posted above. This is code from a previous author and I want to drop the List at all. Please comment my question above.
#3710 Review Comments 35:
Done. Thanks for the comment 👍 
#3710 Review Comments 36:
The chanining has the improvement that you don't have to care about nulls or empty optionals inside. The code at the end is only executed if none of the values is null or empty.

Did not see your question. Theoretically it could be that someone has CrossRef linked bibentries, (e.g. a bib entry with a book and another one with a chapter referring the book).
 but that's really and edge case. I think for most uses cases  one entry is enough. And if the code doesn't support it, then drop it.  let's see what @koppor  has to say
#3710 Review Comments 37:
Done.
#3710 Review Comments 38:
Please create the BibEntries by hand (using `new BibEntry(), setField`) and not based on the string representation. The XMP test should be as autonomous as possible, especially they shouldn't fail if the BibParser is changed.
#3710 Review Comments 39:
A `List` should always be non-null and thus it does not makes sense to wrap an `Optional` around it. The not-present case corresponds to an empty list, which you can check using `isEmpty()`.
#3710 Review Comments 40:
DONE
#3710 Review Comments 41:
Thanks for this comment. Done 👍 
#3710 Review Comments 42:
If there is no further reason (besides simplicity), I would stay with this.
#3710 Review Comments 43:
I would stay with the implemented version. Currently it works and I'm not a stream fanatic 😋 
#3710 Review Comments 44:
Does one really need the absolute path here? I thought, just the filename is enough, because it looks up in the current directory (where the resources are mirrored to). If this is the package org.jabref.logic.xmp, it should "just work".
#3710 Review Comments 45:
Please remove empty line
#3710 Review Comments 46:
Remove this and the next line. The next line should be included in the method name. Maybe, the method has to renamed to `testReadArticleDublinCoreReadRawXMP`?
#3710 Review Comments 47:
Remove empty `@throws` comments. It is already clear by the method signature which exceptions are thrown.
#3710 Review Comments 48:
Only one empty line (?)
#3710 Review Comments 49:
Maybe rename the class to `XmpUtilShared` to follow Google's Casing rules? (Similar for method names, ...)
#3710 Review Comments 50:
Done
#3710 Review Comments 51:
Of course 👍 
#3710 Review Comments 52:
done
#3710 Review Comments 53:
done
#3710 Review Comments 54:
Yes. I do not need the absolute path 👍 
--------------------------------------------------------------
--------------------------------------------------------------
#3708 Review Comments 1:
-fx-fill should work, but do you really think that changing the icon color is a good idea? How intuitive (and important) is it to signal an advanced search mode by magenta?

The "right" way to change the style depending on the state in javafx are pseudo classes (so you can decouple the view from the style), see e.g. http://www.guigarage.com/2016/02/javafx-and-css-pseudo-classes/
#3708 Review Comments 2:
Unfortunately, `fx-fill` doesn't help. There seems to be a deeper problem with exactly this icon.

Actually, I am quite indifferent to this, but @koppor really wants it.
#3708 Review Comments 3:
I really like the proposal at https://github.com/JabRef/jabref/issues/3535#issuecomment-352068826. However, JabRef had this functionality for at least one year. Animation at https://github.com/JabRef/jabref/issues/3535#issuecomment-363813333. - Simon and I had a long discussion on that. The decision was that we should present to the user that there are different search modes. They should "just work", but for the pros, there should be a hint which mode is active. Not that someone wonders why the search does not work. -- Furthermore, that icon makes it less hard to debug the search. It is clear, whether the search term is a grammar-based search or just plain text string search.
#3708 Review Comments 4:
ok, I see your point. It is just again a feature that needs documentation before anybody understands what's going it. 

Butt if `fx-fill` and `fx-text-fill` don't work, I'm running out of ideas. I usually use a combination out of both and it worked without any problems so far. Maybe it works if you base this PR on the maintable-beta branch. I changed a few things regarding javafx icons there.
#3708 Review Comments 5:
I have tried some more (not the maintable branch, though) with no success. I think this is down to `CustomTextField` from controls-fx. It offers the functionality to add a node at the left or right side, but it seems to be impossible to change the style of this node.

Because of this, I've gone back to the previous version: A Swing icon next to the text field and everything just works. I know this is a step back, but if the `CustomTextField` cannot be made to use our icon theme, then we should probably migrate the whole `GlobalSearchBar` to JavaFX instead. Until this happens, I think it is wiser to use icons that preserve our color theme.

@tobiasdiez @koppor: I'll now leave it open to you to continue arguing, merge, or close this PR. I am fine with any solution.
--------------------------------------------------------------
#3704 Review Comments 1:
You can just move these methods to `JabRefPreferences`. 
#3704 Review Comments 2:
generated code like jabref.gui/src/main/gen/org/jabref/logic/importer/fileformat/mods/RoleTermDefinition.java is put under version control; is this desired?
#3704 Review Comments 3:
That should not happen. We have to remove that code.

I will double check.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3690 Review Comments 1:
This change is fine. Could you please also add [ButtonData.Yes](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ButtonBar.ButtonData.html#YES) as a second constructor argument for the `removeFromEntry` button. With this the buttons are automatically ordered correctly according to the current OS specifications.
#3690 Review Comments 2:
Sure, not a problem. Would you like to have the change rebased into the first commit, or is a new one on top of the current two acceptable?
#3690 Review Comments 3:
Just add them in a new commit. We usually squash all commits on merge 
#3690 Review Comments 4:
To explain myself with this -- the implementation uses strict reference equality for checking user choices (at least for the first two), so I thought about either getting out the parameter from the invocation like this, or modifying the equality checks to use the `ButtonData` field in the button types, which made the implementation very weird looking.
#3690 Review Comments 5:
You could also pass "non-existent file" as the path as you do below. This might be a bit easier to understand.
#3690 Review Comments 6:
I'm not sure, but I think our style conventions say that the closing parenthesis has to go on the same line. Right, @koppor ?
#3690 Review Comments 7:
In general we try to name the tests according to the scheme `methodUnderTest_scenario_expectedBehavior` (without the underscore). So for this test here, it would be e.g. `deleteWhenDialogCancelledReturnsFalse`. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3684 Review Comments 1:
@Siedlerchr Just a minor point: Is it possible to disable this particular auto-format of the braces in eclipse? I noticed similar reformattings also in other PRs of you. In my opinion, there are situation where it the code is easier to understand if the braces are on the next line (when it functions more as a grouping then as  a function argument)
#3684 Review Comments 2:
Hm., I will try to have a look at this. 
#3684 Review Comments 3:
@Siedlerchr This should probably go in a separate PR, right?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3668 Review Comments 1:
Re-add `@Test` annotation
--------------------------------------------------------------
#3666 Review Comments 1:
Please use the new logging     private static final Logger LOGGER = LoggerFactory.getLogger(OldCommandWrapper.class);



#3666 Review Comments 2:
Your PR is not yet merged into `javafxTable` and I prefer to do this as soon as all the other maintable PRs are merged
#3666 Review Comments 3:
Okay, just as a hint to make work then easier. Slf4j has a nice migrator tool (inlcuded in the zip download) https://www.slf4j.org/migrator.html to replace all occurences. Used that for the migration, too.
--------------------------------------------------------------
#3665 Review Comments 1:
I would suggest, using a static import as before makes it more readable
#3665 Review Comments 2:
It would be nice to have the RIS Importer collect the files dynamically like the other file tests do, e.g. starts with RIS and contains Test
#3665 Review Comments 3:
I will have a look at that and I will also refactor the remainder of the importer tests into this structure.
#3665 Review Comments 4:
Done.
#3665 Review Comments 5:
I have extracted the relevant logic now for the RIS tests. However, it turns out that *the file reading logic in all importer tests is broken* (except for the RIS tests now). It just does not work, no files are found and in that case JUnit 4 didn't complain. JUnit 5 complains that there are no parameters. 

I am not sure if the importer tests never worked and people where just happy that they were green, or if they worked and got broken at some point in time. I'll gradually try to get the tests working now.
#3665 Review Comments 6:
Maybe better to use Paths.get(ImporterTestEngine.class).getResource("").toUri())
#3665 Review Comments 7:
I see you have the getPath already
--------------------------------------------------------------
--------------------------------------------------------------
#3661 Review Comments 1:
Please extract the regex to Pattern. Compile. You  can then use it with
.matcher(structure).replaceAll(replace) 
And I would suggest a small comment explaining the regex
#3661 Review Comments 2:
No problem, done! Although I hardly suspect that this could become a performance problem due to frequent compilation. After all, this would be executed once per RIS entry and even a few thousand compilations probably won't make a noticeable difference.

But well, it surely doesn't hurt to compile only once.
--------------------------------------------------------------
--------------------------------------------------------------
#3658 Review Comments 1:
why not just `assertEquals(expectedEntry, actualParserResult.getDatabase().getEntryByKey("Entry1"))`?

Same remark applies also to some other tests here.
#3658 Review Comments 2:
good remark! (:
#3658 Review Comments 3:
Could you move the complete class into `org.jabref.migrations`? Because that's what it actually does, it migrates an opened bib file to a newer version of JabRef. I think it makes sense to bundle all this stuff in a dedicated package, because then it gets easier for us to see what sort of conversions are performed on open.

While you're doing that, could you also move the `ConvertLegacyExplicitGroups`? 
#3658 Review Comments 4:
Done. I also renamed these actions to what they are: migrations
#3658 Review Comments 5:
I am not sure whether we should keep the two fields.

Maybe, I am storing the comments of reviewers in the `review` field? -- OK, then I should put it into the `reviews` (with `s`) field... 

I would let the user do it manually then. We have the "Other fields" tab, where "Review" will show up then, don't we?
#3658 Review Comments 6:
Well what the migration does is to get completely rid of the "review" field. With the current implementation, there won't be that "review" field in the bibdatabase anymore.

My opinion behind this:
While it might be useful for some users to have a dedicated "Review" field, it was placed too prominently as a separate tab. Instead, a way more important field, the "Comment" field was hidden in the "General" tab. With this PR I intended to change this. To make all users sufficiently happy, I tried to find a compromise with merging these two fields. 
#3658 Review Comments 7:
Fine with all of it. I think, as usual, I am discussing an edge-case here. JabRef never merged field contents in its entire history. As far as I remember, I cannot disable this single migration, can I? If not, JabRef changes data in a more hard way as it did in the past.

Since no other software (hopefully!) does not use the "review" field, it is OK for me to merge it into the comment field. Let's hope for the best... In case there is software relying on this field, JabRef will remove it... OK, the user can always skip the migration...
#3658 Review Comments 8:
Actually, with the current implementation the user cannot skip the migration. It will be executed each times any database is opened!

To clarify:
Goal: Have a prominent position for users to make comments on their entries.

Opinionated observation: The Review Tab is less important than a Comments tab, a review is basically also a comment on the entry.

Proposed change: Rename the Review Tab to Comments Tab, consolidate fields. If both fields present merge.

Yes, this is a hard change, but what's the alternative? Keeping everything as it is/Close PR? Add another Tab? Swap the two fields? Make the migration optional? Let user choose the migration strategy? Discuss at devcall?

#3658 Review Comments 9:
How about just popping up a dialog IF a review field is found in the database? Just a dialog that informs the user that the review field will be appended to the comment field and removed from the entries. If the user does not want this, she should not save the file.

Good compromise imho and it informs the users what is actually going on.
#3658 Review Comments 10:
I was only discussing the impact if **both** fields are present. The other silent migration (if only `review` is there) was OK for me. I like, however, the idea of @lenhard. 

I would like to have that dialog consistent with the old one at "Upgrade file"

![grafik](https://user-images.githubusercontent.com/1366654/36229333-2ca7e01e-11d7-11e8-8374-06ff5e6a8573.png)

#3658 Review Comments 11:
I think a simple "the review field has been merged with the comments field" information is enough. If the user does not like our decision, then he is free to use other software :-)
#3658 Review Comments 12:
TL;DR: Information is also OK for me. Not too much dialogs -- JabRef should migrate to the 2018 and not stay 2005 ^^.

@tobiasdiez And even the information should not be a dialog, but some kind of notification:

![grafik](https://user-images.githubusercontent.com/1366654/36243397-9abd0864-1221-11e8-8f49-0507231ee5ea.png)

Maybe, this is is a task for #CloudRef. I sometimes have the feeling, we recode a UI framework in JabRef. Would it have been easier (in the long run) if we have used IntelliJ's UI as basis? Or some NetBeans UI designer (recommended by https://www.b-tu.de/fg-software-systemtechnik/team/mitarbeiter/markus-uhlig) or even the modern Eclipse thing? OK, JavaFX is way more modern than these :)
#3658 Review Comments 13:
or just use controlsfx as we do: https://controlsfx.bitbucket.io/org/controlsfx/control/NotificationPane.html or https://controlsfx.bitbucket.io/org/controlsfx/control/Notifications.html
#3658 Review Comments 14:
@tobiasdiez The problem is the following: This is called before the JabRefFrame is created (where I would put the code for the Notification).
So where should I create such a Notification? Just creating an Object anywhere doesn't work, since just writing
```
Platform.runLater(() ->Notifications.create().title("Title Text").text("Hello World 0!"));
```
does not display anything.
#3658 Review Comments 15:
Yeah, I think for the moment it best to just show a normal dialog. With the move to a javafx frame we should be able to use notifications in the future...
#3658 Review Comments 16:
Okay did that. You can even reject the merge now... however this will pop up again the next time one opens an unmigrated database.
#3658 Review Comments 17:
Sorry, but there is no way I am going to sign off a public instance variable such as this. Please follow the Java Conventions and use a getter and a setter.
#3658 Review Comments 18:
I think most of this code should move to the logic package. 
#3658 Review Comments 19:
Yeah I though somebody might complain... I just find it so stupid... The `protection' is just the same with getters and setters...
#3658 Review Comments 20:
I know a new book that's about to come out that argues for keeping to conventions when programming Java ;-) 
#3658 Review Comments 21:
I told him to move it there, because I want to have the migrations together. The migrations package should probably go into logic, but some of the migration classes are awefully coupled to UI classes.
#3658 Review Comments 22:
ok, then the location is fine. But at least the new class should be completely decoupled in logic and gui since otherwise the migration of the migration package is getting harder with this PR.
#3658 Review Comments 23:
@tobiasdiez I guess you mean this line?
https://github.com/JabRef/jabref/blob/b246cfe89dcd97c229dc7b2c9cc79769d6227e32/src/main/java/org/jabref/migrations/MergeReviewIntoComment.java#L38

I can create another Class for this confirmation, but where would you put that?
#3658 Review Comments 24:
The "protection" is not the same. Getters and setters encapsulate the variable and might perform (in future) addtional operations on them. That's what I liked about the automatic properties of C#.  Automatically generated getters and setters.
#3658 Review Comments 25:
I have no deep knowledge about the migration code, so the following may be a bit naïve. For me, the expected flow is something like:
- You have a general migration manager class (in gui), which is getting called as soon as the user opens a database
- This manager has a list of possible migrations which are defined in logic and which provide two methods: one for determining if an action is needed and a second one to actually perform the action
- The manager first calls `actionNeeded` and maybe asks the user for confirmation, then runs `performAction` on the migration action.

Not sure how much of this architecture is already in place and how much you are willing to refactor for this PR. My initial comment was triggered by the fact that a new class was created that mixed UI and logic. 
#3658 Review Comments 26:
Okay, I totally support your point, however this is all a bit tricky, as these PostOpenMigrations are all called before the main GUI is instatiated.

Suggestion: Lets merge this PR now, and I'll refactor the code in a sensible way in a followup PR. (I'm on the train tomorrow for at least 5 hours)
#3658 Review Comments 27:
That's fine with me! 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3653 Review Comments 1:
"Up to version 4.1"
#3653 Review Comments 2:
Please place the decision here. :-)

The next subsection is for a detailed elaboration.
#3653 Review Comments 3:
Remove this line
#3653 Review Comments 4:
Remove `<!-- optional -->`
#3653 Review Comments 5:
Please remove the stars. They are only meant as placeholders...
#3653 Review Comments 6:
I think, the options are:

- Log4J2
- SLF4J with Logback binding
- SLF4J with Log4J binding

Because of https://logging.apache.org/log4j/2.0/log4j-slf4j-impl/, it seemed, you chose the Log4J binding
#3653 Review Comments 7:
Do you mean "already defined as dependency"? --> Maybe rephrase to "Dependency already exists"
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3642 Review Comments 1:
Biblatex has `eventtitle`
#3642 Review Comments 2:
Note is a standard biblatex field and thus should be added to `FieldName`
#3642 Review Comments 3:
`shorttitle` is a standard biblatex field
#3642 Review Comments 4:
I'm not sure if we are already have a `PMID` field. If not, the (biblatex) standard is to specify it in the format
````
eprint = {<pmid>},
eprinttype = {pubmed},
````
#3642 Review Comments 5:
`translator` is also a standard biblatex field
#3642 Review Comments 6:
fixed
#3642 Review Comments 7:
fixed
#3642 Review Comments 8:
`shorttitle` wasn't even part of `FieldName` so far. I have added it now.
#3642 Review Comments 9:
fixed
#3642 Review Comments 10:
fixed
#3642 Review Comments 11:
This would have been optimal to use a switch case, which is very efficient for strings, but that's a bit of personal taste ;)
#3642 Review Comments 12:
You are right in terms of efficiency, but I really don't like switches. It is just to easy to forget the `break` statement. That doesn't happen if you stick to `if` and always use braces.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3636 Review Comments 1:
https://dontaions.jabref.org -> https://donations.jabref.org
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3632 Review Comments 1:
This doesn't look like the bibtex version of the xml file below.
#3632 Review Comments 2:
Thanks for noticing. But shouldn't travis normally have noticed this?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3623 Review Comments 1:
This is again one of the ugly cases where an unchecked exception could be thrown. Because streams and lambdas can't throw checked exceptions. In this case it could be that the stream is already closed when calling collect. 
 Similar to #3606 
#3623 Review Comments 2:
Yes, please catch `IOUncheckedException` and rethrow it as `IOException`.
#3623 Review Comments 3:
Can you please check if `walk` may also throw an `IOUncheckedEx` and if yes, add it to the catch block.
#3623 Review Comments 4:
here also
#3623 Review Comments 5:
and here
#3623 Review Comments 6:
Checked the JavaDoc and the sources... does not seem so.
  
EDIT: it does :/
#3623 Review Comments 7:
I think this method should just rethrow as IOException.
--------------------------------------------------------------
#3621 Review Comments 1:
This should be kept
#3621 Review Comments 2:
The left side is correct. No double "the".
#3621 Review Comments 3:
Remove this line - is already present on line 17
#3621 Review Comments 4:
please revert the formatting change.
#3621 Review Comments 5:
please remove debug logging here and below.

I think we should go over to proper PRs also against the maintable-beta branch (except for very minor changes).
#3621 Review Comments 6:
Sorry, I will remove that later. Had no more time 
#3621 Review Comments 7:
mhhh, we wanted to prevent as much `null` values as possible. It's probably better to add a new default method in the interface without the `defaultChoice` (and passing `null` to the overload). In this way, the null argument only occurs in one point and not everywhere in the code.
#3621 Review Comments 8:
Sorry for being pedantic, but please fix the code style (make it less aggressive and align points). Otherwise the code gets reformated a lot and actually in a "wrong" format.
#3621 Review Comments 9:
Do you have two lines or one line indentation as default?

![grafik](https://user-images.githubusercontent.com/320228/37120658-48a7ae36-225b-11e8-873b-58f5900d47df.png)

#3621 Review Comments 10:
I am just curious: Why is this removed?
#3621 Review Comments 11:
https://github.com/JabRef/jabref/commit/dfd62b0fbff053da8c76e2e9d5ca38a46ea9daca#diff-dbfbf1695502f56fd92d434d1dc1d641

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3606 Review Comments 1:
It appears that now the description is always the description of the file type, right? Then it makes sense to create a new constructor of `TemplateExporter` that automatically sets the description.
#3606 Review Comments 2:
I thought so, too but on the other hand we have the constructor needed for the custom exporter, so in the end it's the same
#3606 Review Comments 3:
but at least we could add a new constructor, so that this list gets more readable, right?
--------------------------------------------------------------
--------------------------------------------------------------
#3603 Review Comments 1:
That's interesting, why/when does this Exception occur?
#3603 Review Comments 2:
To be honest, I have no idea. The documentation babbles something about "a late exception that is thrown when the stream is finished". I guess the file is found, added to the stream but when a bit later `toSet` is called it is no longer there. I also don't understand why it has to be an unchecked exception instead of a normal `IOException`. 
#3603 Review Comments 3:
I refactored the code slightly to get rid of these exception handling in streams.
I think this is should work better now because the stream is no longer directly closed and then accessed. But I could be mistaken. 

#3603 Review Comments 4:
Can you please explain this change and why you removed the try-catch as the point of this PR was to actually catch this `UncheckedIOException`. Since `Files.find` still returns a stream, this exception can still occur, right?
  
#3603 Review Comments 5:
I don't think that works (see below). But thanks for the other fix, that's a nice improvement over my hacky code.
#3603 Review Comments 6:
Your code did not compile, you can't throw an exception inside a lambda/stream. That's impossible. 
I did not realize that the unchecked exception can still occur. But we should just log it. I mean, what else can we do about it?`We can't rethrow it. 
#3603 Review Comments 7:
I just pushed a new solution. I think this kind of catch-rethrow should work.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3591 Review Comments 1:
I am not that happy with this generic name here... as this shadows the javafx classes 
Maybe MaintableColumnFactory? Same as with the other CellFactory

#3591 Review Comments 2:
Maybe also addAll possible?=
#3591 Review Comments 3:
Maybe stream with firstOrNull? or anyMatch?
#3591 Review Comments 4:
tab.stream.anymatch( entry -> entry.getKey.equals(FieldName.File)
#3591 Review Comments 5:
not possible because `isNameColumn` has to be set.
#3591 Review Comments 6:
Not sure that this is more readable, especially since the if statement still has to be there.
#3591 Review Comments 7:
Would it be possible to move this as suggested in the comment?
#3591 Review Comments 8:
This is not possible at the moment since the field is still used in other places in model. The new main table is free from this dependency but the import and search dialog still rely on it as the have before. 
#3591 Review Comments 9:
Ok, no problem. Then just leave as it is.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3581 Review Comments 1:
That's not an "ok" name according to the naming conventions for Java classes: they need to start with upper case. Please rename this to `OaDOI` or maybe `OaDoi`. Maybe `OpenAccessDoi` would be even better.
#3581 Review Comments 2:
Good point, I wasn't sure about the naming conventions and this service seems to be really called `oaDOI`. But `OpenAccessDoi` is good.
--------------------------------------------------------------
--------------------------------------------------------------
#3579 Review Comments 1:
looks like a typo here -> cinfig -> Config
#3579 Review Comments 2:
This is equivalent to `!newSaveOrderConfig.equals(oldSaveOrderConfig)`, right? In this case you can also directly inline this code.
--------------------------------------------------------------
#3578 Review Comments 1:
I don't know by what you define a TemplateExporter: If it's the one where you can define a html/layout file, then this is not one. 
#3578 Review Comments 2:
Not a Template exporter. You can't create a layout file for it
#3578 Review Comments 3:
The last FileOutputStream could be replaced by the Files.newFileOutputStream which directly accepts a path 
#3578 Review Comments 4:
see as above
#3578 Review Comments 5:
Improve changelog entry
#3578 Review Comments 6:
Either you move the whole class to a new "meta" package, or you move the getExporter method to another class
Atm it is still in import and I would not expect an export class here  
#3578 Review Comments 7:
Please add these cases to the unit tests we already have for this class 
#3578 Review Comments 8:
I now made `Exporter` an abstract class with the basic fields. Not sure why these special exporter derived from `ExportFormat`.
#3578 Review Comments 9:
Fixed.
#3578 Review Comments 10:
Fixed
#3578 Review Comments 11:
Moved to `gui.util`
#3578 Review Comments 12:
There's certainly a more specific type of exception you can catch here, isn't it?
#3578 Review Comments 13:
If I recall our git guidelines correctly, you should add a new line here
#3578 Review Comments 14:
Since you are already touching this code, please also use proper naming, e.g. `builder`.
#3578 Review Comments 15:
Not your code, I know, but isn't it weird to throw an error here? Wouldn't it be better at least scale that down to a `RuntimeException`?
#3578 Review Comments 16:
Just a thought: Would it make sense to have this class implement `AutoCloseable`, so that it could be used in a try-with-resources? This method seems to be built for that use case. Otherwise, it's not guaranteed that the writer will be closed.
#3578 Review Comments 17:
Again, since you are already refactoring this method, please also improve the naming of variables.
#3578 Review Comments 18:
It's really weird what kind of code you still find in JabRef. Great job removing this!
#3578 Review Comments 19:
Instead of calling `toPath` below, it would be better if you created a `Path` object here directly. That applies to the other tests as well.
#3578 Review Comments 20:
Never head about `AutoClosable`. Thanks for pointing this out. This is a good idea but there are quite a few places where the save session is canceled (i.e. `commit` or `finalized` is not called). Moreover, a quick look at the code showed that it is relatively hard to shift the `file` argument to the constructor of the save session (the creation happens in different classes then the actual commit).
#3578 Review Comments 21:
There is actually a blank line 58, but github does not show these last empty lines (but it displays a warning symbol if the file actually does not end with an empty line).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3574 Review Comments 1:
Why not call create here`?
#3574 Review Comments 2:
Good observation. Fixed.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3567 Review Comments 1:
Now new line at eof? is this correct?
#3567 Review Comments 2:
Please do not change this to the real name.

The intention is to map all different email addresses of one user to a single email address. The reason for that is that tools might have name + email or even the email only as unique key for code analysis. When having different emails, users might be treated as separate users.
#3567 Review Comments 3:
okay, the problem is just, that now if I run the `generate-authors` script a new name `Joerg Lenhard` appears. How can I do that properly?
#3567 Review Comments 4:
yes? Is there any reason against this?
--------------------------------------------------------------
#3565 Review Comments 1:
This will not work: the `FileExtensions.toString` method will return the default java string serialization and not the extension stored internally. You should use `FileExtensions.getExtensionsAsList()` instead.
#3565 Review Comments 2:
same remark as above
#3565 Review Comments 3:
Why did you use ̀ AUX` here instead of the provided `extension`?
#3565 Review Comments 4:
Please correct the description for ods and sxc.
#3565 Review Comments 5:
What happens if no ExportFormat is not found for that console Name?
Then the exportFormat.getExtension will throw an NPE
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3553 Review Comments 1:
I think, it makes sense to extract this code to a helper method in `BindingsHelper`.
#3553 Review Comments 2:
I think debug level is enough.
#3553 Review Comments 3:
That log is really only for testing so that I could inspect when a new search was triggered and if my "reset the timer on new key" does actually work. This will be removed.
#3553 Review Comments 4:
Can the log level be changed to "debug" and the logging settings adjusted accordingly for you?
--------------------------------------------------------------
#3552 Review Comments 1:
The problem are these removed imports (and similarly further down)
#3552 Review Comments 2:
i dont have org.jabref.logic.importer.fileformat.bibtexml folder
--------------------------------------------------------------
#3551 Review Comments 1:
Well, now the test uses the same logic as the method under test. Could you please hard code the expected value. It should be just `CiteKey.pdf`, right?
--------------------------------------------------------------
#3546 Review Comments 1:
I would also delete `./buildres/jabref-cert-2016.p12.en` as we do not need this file any more.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3539 Review Comments 1:
Ok thanks!
According to the documentation
> a string converter property is provided to allow for developers to specify how to translate a users string into an object of type T, such that the value property may contain it. By default the converter simply returns the String input as the user typed it, which therefore assumes that the type of the editable ComboBox is String.

So you are right that the string converter should return something non-null even when the text is not recognized. However, there is no need to add it to the item map. Moreover, we need to handle the case when `T` is not a string type. Thus I would propose to create a new protected method that converts an unknown string to a `T` object. If not overridden, it should try to cast to `T` as in your code above (and throw an exception with details how to properly implement it if casting was not successful). 
#3539 Review Comments 2:
I now added a method for checking.
We also need such kind for dates to allow custom values which we currently don't support. All input in the field will be cleared if not parseable
--------------------------------------------------------------
#3536 Review Comments 1:
Why don't you use the java 8 DateTimeFormatter for parsing the dates? Much more easier and flexible https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#predefined

#3536 Review Comments 2:
Since this is about parsing months, it should go into the `Month.parse` method, right?
#3536 Review Comments 3:
Moved it there
--------------------------------------------------------------
#3533 Review Comments 1:
As far as I can see by looking at the code, this solution should be thread-safe. You could turn up parallelism by a tiny notch, but I cannot say if this has any tangible benefit. This could be done by not marking the whole method as synchronized, but just the part where the CSL engine is used. To do so, you would add a private lock instance variable, e.g. `private static Object lock = new Object();` and then refactor the method like this:
```
        List<CSLItemData> cslItemData = new ArrayList<>(bibEntries.size());
        for (BibEntry bibEntry : bibEntries) {
            cslItemData.add(bibEntryToCSLItemData(bibEntry));
        }

        synchronized(lock) {
            initialize(style, outputFormat);
            dataProvider.setData(cslItemData);
            cslInstance.registerCitationItems(dataProvider.getIds());
            Bibliography bibliography = cslInstance.makeBibliography();
            return Arrays.asList(bibliography.getEntries());
        }
```
You can refactor the code in this way or not, I leave this up to you. It will only have an effect if there are many concurrent calls to the method.
#3533 Review Comments 2:
Whenever we add/modify file IO code in JabRef, we try to use the new Java API for that `java.nio`, not `java.io`. So please replace the condition with `Files.isDirectory(Paths.get(path))`.
#3533 Review Comments 3:
Is it needed, that everything is `static` here? I actually would prefer a usual class with non-standard methods/instance variables. 
#3533 Review Comments 4:
I'm not sure if this is really an advantage but since you are already implementing a custom data provider, I would suggest the following:
- setData accepts a list of `BibEntry` 
- retriveItem gets the `BibEntry` with the given key and then returns the result of `bibEntryToCSLItemData`. This solution might be a bit more memory effective since you don't have an additional list (but it only makes sense if the `bibEntryToCSLItemData` method is not expensive).
#3533 Review Comments 5:
Ha funny. It's the exact same thing I have thought about. I wanted to wait until we are sure it works in general. I too would prefer to make a real `JabRefItemDataProvider` that works on `BibEntry`.
#3533 Review Comments 6:
Yes. This would probably be better. We could then still instantiate several CSL adapters if we need one for whatever purpose.
#3533 Review Comments 7:
OK. No problem.
#3533 Review Comments 8:
It is an easy fix indeed. I will profile where the bottleneck is when you have many items selected and click on `Copy Preview`. It might be useful to check if the loop itself should be parallelized as well. Copying the preview is too slow for my taste and I'm unsure it really comes from CSL this time. I will check.
#3533 Review Comments 9:
I profiled this and it's having no significant impact on the performance. After refactoring the creation of the `cslItemData` was absorbed into our data provider and must be run synchronized as well or the data we provide to CSL will get out of synch.
#3533 Review Comments 10:
I refactored this. `retrieveItem` cannot change its signature because it is called internally by CSL (that's why it is overridden). Still, the layout is much clearer now.
#3533 Review Comments 11:
@halirutan The Paths.get method has an overload for accepting an URI. 
The misleading method of the URI class (getPath) does not work  as itdoesn't inlcude the "scheme" part of the URI object which is used to identify the underlying FileSytem implementation.
This tutorial has a nice overview of "what is a path" https://docs.oracle.com/javase/tutorial/essential/io/path.html

If you happen to use a Classpath url or sth else, the recommended way is the same  Paths.get(Class.toUrl.toUri)



#3533 Review Comments 12:
That wasn't my code :) When I see this right, it was coming from Christian Bartsch but it doesn't matter. Good that you spotted it.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3523 Review Comments 1:
If you add `getDBMSConnectionProperties` to the `Synchronizer` interface, then you probably don't need the if statement and the explicit cast here.
#3523 Review Comments 2:
Thanks, nicely spotted! So far, I was focused on the refactoring only, but the code certainly has a lot of potential for improvements. Implementing your suggestion was fairly easy and I fixed this at a second position as well.
#3523 Review Comments 3:
I only don't get this, isn't this supposed to be same or are DataBaseConnectionProperties more general?
#3523 Review Comments 4:
I would let this rather be more general, by not having the concrete SQLException here. I could implement this interface for my Sharelatex Connection.
#3523 Review Comments 5:
`DBMSConnectionProperties` are the only implementation of `DatabaseConnectionProperties`, they're essentially the same. The sole reason for the existence of the interface is that it breaks the dependency from model to elsewhere. 
#3523 Review Comments 6:
Ok, I've inlined the `SQLException` in favor of an `IllegalStateException`. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3518 Review Comments 1:
Seems like we loose our mnemonic keys!
#3518 Review Comments 2:
I try to work on it. Therefore, you see these pull requests. Please ignore them until I say, it is OK!
#3518 Review Comments 3:
The issue is that I loaded some wrong translations and they are kept somewhere at Crowdin.

#3518 Review Comments 4:
Note that we currently also loose the German translation. So please be patient!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3509 Review Comments 1:
Why do you use the collection interface here? List interface defines a somehow ordered collection
I would really prefer list here
https://stackoverflow.com/a/3317408/3450689
#3509 Review Comments 2:
I see no advantage in using Collection here 
#3509 Review Comments 3:
I am against creating a second constructor. It was my initial idea in #3368  and guess who supposed the current alternative? 😆 
See your comment https://github.com/JabRef/jabref/pull/3368#discussion_r147604206 
#3509 Review Comments 4:
If you structure the code similar to the one in AutoSetLinks, you won't need a multimap:
```
 for (BibEntry entry : entries) {

                List<LinkedFile> linkedFiles = util.findassociatedNotLinkedFiles(entry, databaseContext, Globals.prefs.getFileDirectoryPreferences(), Globals.prefs.getAutoLinkPreferences(), ExternalFileTypes.getInstance());

                if (ce != null) {
                    for (LinkedFile linkedFile : linkedFiles) {
```
#3509 Review Comments 5:
I don't understand what you mean. The linked comment is about the list of entries and not about how the `AutoSetFileLinksUtil` gets the things needed (like directories and preferences). I think, the current setup makes sense: on initialization, specify everything the auto set functionality needs to know. Why don't you like these constructors?
#3509 Review Comments 6:
Thanks! This is really good feedback. I just realized that the finder never gets a list of entries as argument but always a single entry. Thus the design can be simplified drastically without mulitmaps or maps to collections.  
#3509 Review Comments 7:
The multimap only returns a collection because it actually is not implemented as a list (the sorting is random). But now we don't need multimaps anymore so we can go back to lists!
#3509 Review Comments 8:
Ah sorry, I could not see all code in the line on my mobile, so I was a b9it confused. Forget about my remark,
#3509 Review Comments 9:
Here you can change them back to list again
#3509 Review Comments 10:
No problem!
#3509 Review Comments 11:
Done!
#3509 Review Comments 12:
Better direclty use the java method: String.contains(Character.toString(c))
#3509 Review Comments 13:
And also take a look at the codacy
--------------------------------------------------------------
--------------------------------------------------------------
#3507 Review Comments 1:
Can you please specify the button type [YES](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ButtonBar.ButtonData.html#YES) so that the order of the buttons is correct.
#3507 Review Comments 2:
Moreover, I would suggest a more descriptive label like "(Only) unlink file" or "Remove file link". 
#3507 Review Comments 3:
The last sentence "Pressing..." is rather self-explanatory. I would remove it.
--------------------------------------------------------------
#3506 Review Comments 1:
You should reeally extract this to a constant, same with th e one abvoe 
--------------------------------------------------------------
#3504 Review Comments 1:
I don't like the fact this chunk of three lines is duplicated all over the place. Maybe add a new factory class that provides a method to build a `JFXPanel` but hides the OS aspect.
#3504 Review Comments 2:
On my machine, the localization string appears prefixed with an `&`. Even if that's not nicely solvable here, could you at least implement a quick hack to remove the preceeding `&`?

Also, in the Swing version the context menu text also listed the shortcuts for the menu item. This should be the case here as well.
#3504 Review Comments 3:
Same here with the display bug.
#3504 Review Comments 4:
This method does not work on my machine. In the swing version a dialog would appear. Here, the printer icon pops up in the taskbar, but no documents are added.

EDIT: I take it back, the method does seem to work. When I just logged into the printer I found a document waiting for me. However, this should be less of a surprise. In the old version a dialog popped up where you could configure the printer a little. We don't need the exact same thing here, but could at least have a dialog displayed for like two seconds, saying: "Printing..." or something similar.
#3504 Review Comments 5:
Again the construction of the panel should be outsourced somewhere.
#3504 Review Comments 6:
Outsource as above.
#3504 Review Comments 7:
Again outsource as above.
#3504 Review Comments 8:
Again outsource as above.
#3504 Review Comments 9:
Again outsource as above.
#3504 Review Comments 10:
Again outsource as above.
#3504 Review Comments 11:
Again outsource as above.
#3504 Review Comments 12:
Again outsource as above.
#3504 Review Comments 13:
Good remark! Fixed.
#3504 Review Comments 14:
I removed the & and added the display of the shortcut.
#3504 Review Comments 15:
ohh gosh. By default, I print to PDF and thus the PDF print dialog poped up and everything seemed to work just fine. But, of course, in general you want to have a confirmation dialog and a possibility to change the printer. Luckily, javafx provides a default dialog for printing, so this was easy to implement.
--------------------------------------------------------------
#3503 Review Comments 1:
I would actually prefer to rename `updateTimeStamp()` to `markAsSaved`. That the `DatabaseChangeMonitor` uses the timestamp and file size to keep track of the last saved state, should be an implementation detail that is hidden to the outside world.
#3503 Review Comments 2:
Alright, I changed the name back to what it was before.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3487 Review Comments 1:
Sorry, but I don't think this is going to work this way. This clashes with the already existing mapping for unicode value 39 in the line above and will lead to unpredictable results later.

I think it would be better to add the conversion as part of the "manual additions" to `LATEX_HTML_CONVERSION_MAP` and `LATEX_UNICODE_CONVERSION_MAP` , like for the `relax` term. This should have the same effect, but it avoids the clash for the other maps.
#3487 Review Comments 2:
So how can it be done? I just do not know the details. I think of `{\textquotesingle}` as an alias of `'`.
#3487 Review Comments 3:
Have a look at lines 897 and 898 in the same class. You can add the symbol in the very same way. 
--------------------------------------------------------------
--------------------------------------------------------------
#3484 Review Comments 1:
The correct spelling here should be `entry`.
#3484 Review Comments 2:
I guess this is for you to help in debugging, but in the final PR, there shouldn't be any `System.out` or commented-out code left. I'll not add a comment at every place in this PR, but I am sure you get the point.
#3484 Review Comments 3:
In the end, you could probably extract parts of this method into separate methods or maybe even extract a class here and move that into `org.jabref.gui.groups`. I am a bit wary about `BasePanel` growing even more. The class is already far too big.
#3484 Review Comments 4:
This should be moved into `org.jabref.gui.groups`.
#3484 Review Comments 5:
I think `GroupDeleteDialog` would be an even better name here.
#3484 Review Comments 6:
Funny name :) How about just `userMessage` or something similar?
#3484 Review Comments 7:
As above, please spell out terms in names, e.g. `deleteFromDatabase`
#3484 Review Comments 8:
I would suggest `There_are_group(s)_selected`
#3484 Review Comments 9:
Suggestion `Do_you_want_to_remove_the_selected_entries_from_the_selected_groups`
#3484 Review Comments 10:
Suggestion: `Selected_entries_belong_to_group(s)`
#3484 Review Comments 11:
Suggestion: `If_you_delete_the_entries_they_will_be_removed_from_all_listed_groups`
#3484 Review Comments 12:
And everything without the underscores since otherwise the tests fail.
#3484 Review Comments 13:
If this format is not correct, could you give me one example of text in Localization.lang()?
#3484 Review Comments 14:
The suggested text doesn't give message to user about action that should or should not be done. 
#3484 Review Comments 15:
Can you please use JavaFX to implement this dialog. We already have a quite extensive `DialogService` class that you can use.
#3484 Review Comments 16:
In my opinion this dialog right now is a bit to complicated. My proposal:
Main text: "The entry / entries also belongs to the currently selected group(s). Do you want to remove it from the group or delete it completely?" (maybe with better english :-) )
Options: "Remove from group(s)", "Delete from database", "Cancel"

#3484 Review Comments 17:
Moreover, I miss a "Remember this choice" checkbox.
#3484 Review Comments 18:
Language text no longer work with underscore. Just use a normal space character.
#3484 Review Comments 19:
Please remove these debugging statements.
#3484 Review Comments 20:
Hi @tobiasdiez, 
Thanks for comments.
The main purpose of this PR is to notify that some entry could belong to some groups that couldn't be identified by watching on screen (groups that are not selected). If we remove that information the new dialog is useless.
#3484 Review Comments 21:
Ok, then I don't understand the use case. I thought you wanted to prevent that a user by accident deletes an entry although he just wanted to remove it from the currently selected groups. Why is the information about the other groups important? Moreover, if you select an entry, then groups that contain this entry are highlighted in the group pane so the information is already there (in some form).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3479 Review Comments 1:
But now you replaced the underscores with backslashes. Compared to that I find underscores better 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3475 Review Comments 1:
Please format the link to the issue in the same way as for the other changelog entries.
#3475 Review Comments 2:
Please end code files with a new line
#3475 Review Comments 3:
As above, please do not remove the new line here.
#3475 Review Comments 4:
I think the description
> We added a clear option to the right-click menu of the text field in the entry editor.
is already sufficient.



#3475 Review Comments 5:
Moreover, please reference to the issue in the form `koppor#198` and link the correct issue.
#3475 Review Comments 6:
Well, the new line character is now at the wrong place 😸. It should be after the last brace and not before (the red "no newline at end of file" marker here at github should disappear. Your IDE probably has an option for adding the newline automatically.
#3475 Review Comments 7:
You can also just reuse the text "Clear" here so that our poor translators don't have to work too much.
#3475 Review Comments 8:
You still need to delete these now unused translation strings.
--------------------------------------------------------------
--------------------------------------------------------------
#3473 Review Comments 1:
You could see if there is already a method in StringUtils 
#3473 Review Comments 2:
Please always catch the most specific exceptions.

#3473 Review Comments 3:
Thanks, there was indeed one. Keeping the functionality in a separate method though to have the error handling (nothing found) in one place.
#3473 Review Comments 4:
We just started to use JUnit 5 and it would be nice if you could use the new api (some of the other fetcher tests are already migrated).
#3473 Review Comments 5:
When converting to JUnit 5, please replace the category by the `FetcherTest` annotation. 
#3473 Review Comments 6:
very very minor, you can directly use the predefined enum Constant: 
https://docs.oracle.com/javase/8/docs/api/java/nio/charset/StandardCharsets.html#ISO_8859_1
#3473 Review Comments 7:
Thanks for pointing that out - was looking for something like that, but apparently didn't look long enough...

#3473 Review Comments 8:
For other cases where Java provides default enum variables, they all start with StandardXXX, for example for file opening there exists: StandardOpenOption, not really obvious if you search for it ;)
#3473 Review Comments 9:
Jep, I expected them in something like Charsets or directly as constants in the Charset class...
#3473 Review Comments 10:
SimpleDateFormat is outdated, it has been replaced by several other constructs in java8: 
http://www.baeldung.com/java-8-date-time-intro
Or see example 18 here for an idea: http://javarevisited.blogspot.de/2015/03/20-examples-of-date-and-time-api-from-Java8.html
#3473 Review Comments 11:
I am not sure, but you probably need to initialize it with Optional.empty() or you could get still an NPE if no entry is found
#3473 Review Comments 12:
Please no abstracts in tests, as they are usually subject to copyright of the publisher
#3473 Review Comments 13:
If the javadoc on BibtexParser.singleFromString is correct, it should always return an entry or an Optional.empty().
But I might as well initialize it...
#3473 Review Comments 14:
I'll look into the license details - not having the abstract there is a bit of a problem as fetching the abstract is part of the functionality; therefore it should be tested.
On first glance, the whole article is published under CC-BY or CC-BY-NC; therefore this shouldn't be a problem as the authors are mentioned right next to the abstract text.
But if you still don't want the abstracts, I can modify the tests accordingly.
#3473 Review Comments 15:
you can also just return the entry directly in the try construct. This is in my opinion the most readable solution.
#3473 Review Comments 16:
Please not static and use `BeforeEach` instead `BeforeAll` (better initialize the fetcher and entries fresh for each test)
#3473 Review Comments 17:
Didn't know that - I'm working on changing it.
#3473 Review Comments 18:
Do you have a published article that can be received via IACR? In this case you hold the copyright and there is no problem.
#3473 Review Comments 19:
👍 
#3473 Review Comments 20:
Not yet ;) But then I'll just remove the abstracts for now and maybe just check that they are not empty.
#3473 Review Comments 21:
Thanks, it's my first time using JUnit 5 and I just looked at some examples online which used `BeforeAll`...
Should have been suspicious when adding the `static`s...
#3473 Review Comments 22:
Please try to use a more generic version in these strings. As of now, they are not reusable in other fetchers or situations. E.g. just use `invalid identifier` or replace `ICAR` by a parameter slot.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3465 Review Comments 1:
I think there is no need for this private field since the variable is only used in the constructor anyway.
#3465 Review Comments 2:
Why do you use the names formatter here? I think `TextArea` has a `clear` method, or otherwise `setText("")` should work.
#3465 Review Comments 3:
Hi, I was on the team with Weida that was working on this issue. We now realize that the things you mention were not needed. We were trying to follow how the other menu item classes were built, and that is why we added the private field. We found the class to add the menu item to the menuItem array by finding a similar issue that dealt with the Normalize name option. But we see now that we made it much more complicated than it needed to be. We should be able to fix these this week if we need to. 
Thanks
--------------------------------------------------------------
--------------------------------------------------------------
#3459 Review Comments 1:
There's a spelling mistake in the variable's name here. It should be `annotationEmpty`.
#3459 Review Comments 2:
Please always use curly braces to the full extend (for if and else here). It is too easy to accidentally introduce a bug when you leave them out. 
#3459 Review Comments 3:
`annotationEmpty = annotations.emptyProperty()` should also work and is a bit simpler.
--------------------------------------------------------------
#3458 Review Comments 1:
you should set the LookAndFeel based on className, as recommend by the jdk api:
   UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
#3458 Review Comments 2:
Thanks for pointing out! Changed it.
#3458 Review Comments 3:
I think the rest of the method can now be replaced by the one-liner `return getInstalledLookAndFeels().stream().map(LookAndFeelInfo:getClassName).collect(toSet)`  ?
#3458 Review Comments 4:
Not exactly (it's and array), but almost: `Arrays.stream(UIManager.getInstalledLookAndFeels()).map(LookAndFeelInfo::getClassName).collect(Collectors.toSet())`
#3458 Review Comments 5:
According to https://bugs.openjdk.java.net/browse/JDK-8136366, this is a non-public L&F. But reading along, it seems, we are "correctly" using it...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3444 Review Comments 1:
This equals method looks weird. Why not use instanceof?
#3444 Review Comments 2:
Because I don't want subgroups to be considered equal to this class?
(The equals method is, by the way, mostly auto-generated by intellj
#3444 Review Comments 3:
Since the `FileUpdateMonitor` interface is in model, why don't you just put this class into the exact same package? It would solve the dependency problems that are still breaking the build.
#3444 Review Comments 4:
Good observation! I moved the file and so fixed the build.
--------------------------------------------------------------
#3443 Review Comments 1:
I agree that the default JavaFX tooltips are hard to read! But I'm not a fan of the old swing tooltips either. I would suggest to use a grayish color scheme with less opacity (>= 90%): [inspiration](https://material.io/guidelines/components/tooltips.html#tooltips-tooltips-desktop). Maybe increasing the text size (by default its 0.85em).

Please override the default `.tooltip` style so that tooltips look consistent.
#3443 Review Comments 2:
I think it makes sense to introduce an overload of `getSearchDescriberFor` that accepts a `SearchQuery` (or even change the signature directly).
#3443 Review Comments 3:
Just add a default case. 
#3443 Review Comments 4:
Please make the vars private final
#3443 Review Comments 5:
Please extract this method to a new util class, since it is used in many tests.
Also remove the `System.out` statements.
#3443 Review Comments 6:
Better convert the two lists to sets and use streams 
https://stackoverflow.com/a/30346012 (second approach)
Furthermore, as this method is also used in the other test it makes sense to extract it as one TestUtil method, to a new or an existing "testutil" class. 
#3443 Review Comments 7:
but the order is important for the test so I dont think a set is helpful here. Every item has to be in the right position with the correct properties.
#3443 Review Comments 8:
Yeah, okay, then stick with this. But please extract it to a new class so that it can be reused across the tests 
#3443 Review Comments 9:
The problem is that the TextFlow is not styled together with the tooltip its inside. So only the background can be changed with the tooltip class when using a TextFlow. It would be needed to add a style class to each used texts inside the textflow i think? then i was able to change the text font. But this would mean it would be necessary to make a text style class for each different style: bold, italic, monospaced etc. In my tests the css style had overwritten the programatically set font.

So im a little confused what to do here. It seems difficult to make a standardized look here. Depending on what is used inside the tooltip: normal text <-> TextFlow

Even if i create all the different text style classes, they had to be used explicitly in all other places. So no automatic default style possible here i think? Or is there any other possible solution i dont see?
#3443 Review Comments 10:
You are talking about the font size? Using `-fx-font-size` does not work?
Moreover, you can influence the look of sub-items by using the appropriate css selector. For example, with `.tooltip > .text` you should be able to modify the look of the text elements in the tooltip. However, I have to admit that I don't really understand where you problem lies.
#3443 Review Comments 11:
The selector ```.tooltip > .text { ...``` does not work here. The text element has no default style class.  
I just found out I could use this: ```.tooltip Text { ...``` but then all texts have the same style (if i set the font size and color in css no text is bold or italic anymore). But we need to have some Texts with Bold, etc. properties and then the Text.setFont method for setting the font progammatically is not working anymore..
#3443 Review Comments 12:
That is strange. Usually styles specified in the code take priority over css files. You could add [PseudoClasses](https://docs.oracle.com/javase/8/javafx/api/javafx/css/PseudoClass.html) (e.g. `bold`) to the text element and style them via the selector `.tooltip Tex :bold`. 

But maybe the best solution is to actually leave all text related styles at their default value and only play a bit with the background color?
#3443 Review Comments 13:
That would be the easiest solution :) 

But a good styling would be nice too.

I played around a bit and the following would also be possible:  
```css
.tooltip Text {
    /* this styles all texts inside a tooltip */
    -fx-fill: rgba(255, 255, 255, 0.9);
    -fx-font-size: 1em;
}

.tooltip > TextFlow > .tooltip-text-bold {
    -fx-font-weight: bold;
}

.tooltip > TextFlow > .tooltip-text-italic {
    -fx-font-style: italic;
}

.tooltip > TextFlow > .tooltip-text-monospaced {
    -fx-font-family: monospace;
}
```
So every text gets a basic styling and when you want to make one Text e.g. bold you can add the ```"tooltip-text-bold"``` style class, then additionally the text will be bold. It is even possible to combine styles like italic and bold

I think I could integrate this rather easily. I didn't look into PseudoClasses but if you say it is the best way to go I can look into them. So what should it be?
#3443 Review Comments 14:
Your solution looks very clean! Go for it, if it works! (Pseudo classes are very similar, not sure what is preferable here).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3438 Review Comments 1:
Just a very minor issue, for field names in changelog we usually use backticks 
#3438 Review Comments 2:
You can chain nested optionals with map, it will then only be executed if a value is present
#3438 Review Comments 3:
Please avoid checking such things with size, instead directly create a list expected and use assertEquals 
#3438 Review Comments 4:
As mentioned above, better to directly compare the result to a pre defined list with the keywords which you already use to add the keywords
So just do expected= arrrays.aslist(kw1,kw2)
#3438 Review Comments 5:
Even if it does NOT reference a bibtex field? With "printed", I refer to the "special field" here.
#3438 Review Comments 6:
Can you please change the type of `newValue` to be just `Keyword` (instead of an optional around it). Accepting the optional, but then not properly acting on empty ones, actually lead to this problem. So I think we should fix its root.
--------------------------------------------------------------
#3433 Review Comments 1:
I would put it in a new file (we are trying to reduce the size of BasePanel and MainFrame). I know, this was one of your questions before you posted the PR; sorry for the delay and the additional work it now means.
#3433 Review Comments 2:
You have a few set-up steps that are shared between the tests methods. Could you please move them to the `setup` method.
#3433 Review Comments 3:
The preferred way  to test optionals is `assertEquals(Optional.of(expected), actualOptional)`
#3433 Review Comments 4:
I'm not sure about our conventions, but I think constant variables are still denoted by small letters. @koppor ?
#3433 Review Comments 5:
When thinking about whether or not to move the listener into a separate file, we decided against it as we could not find a good place to put it. Could you suggest a package/folder?
#3433 Review Comments 6:
Although this isn't perfect, the best place for the listener is in parallel to the `BasePanel` class (being the only class that uses it). So please extract the listener into a top-level class and put it in `org.jabref.gui`. When you address my other comment regarding the test, you can also reduce the visibility of the listener class from public to default.
#3433 Review Comments 7:
In my opinion, it is not necessary (or even useful) to declare these values beforehand.

The additional time spent when initializing three strings twice instead of only once should be negligible when running the tests. Furthermore, when looking at the test cases, defining the constants in the beginning of each test makes it much clearer exactly which values are used.

But that is just my opinion. What do you (or other contributors) think about this? If you still prefer that the constants are only initialized once, I will change it.
But, as they are constants, initializing them in the set-up would not be the best option in my mind. I would rather make them private final instance variables.
#3433 Review Comments 8:
I didn't meant the constants. These are clearly related to the specific test and thus can stay there. However, you have some common initialization (preferences, database with entry, ...) which should be extracted to `setup`. Not so much for performance but to make the tests smaller and thus easier to understand and to maintain.
Have look at for example https://github.com/JabRef/jabref/blob/effe3349e2dfe8b104ade137f86ef8e2fbee36a5/src/test/java/org/jabref/logic/cleanup/MoveFilesCleanupTest.java#L35-L54
#3433 Review Comments 9:
Thank you for clarifying. I get your point, but I am still not sure what you want me to move into the setup method.

I could move:
- the instantiation of the mocks for JabRefPreferences and TimeStampPreferences
- the setup to catch calls to JabRefPreferences#getTimestampPreferences()
- the instantiation of the BibEntry as well as its insertion into the database

This would also mean that the mocks and the BibEntry would have to be instance variables.

Would this meet your expectations?

If I should also move more of the initialization into the setup method, I don't see a way around making the constants "TIMESTAMP_FIELD", "BASE_DATE", and "NEW_DATE" instance variables.
#3433 Review Comments 10:
Yes, I meant exactly those three points! Thanks.
#3433 Review Comments 11:
When you here directly pass an object of  TimestampPreferences, you then don't need to  mock the whole JabRef Preferences and you will get rid of the travis architecture failing
#3433 Review Comments 12:
As mentionend above, when you directly pass the TimestampPreferences Object/Mock, you don't need to have a dependency on JabRef Preferences 
#3433 Review Comments 13:
Furthermore, you can move the timestamp constants to private static final in the class body. 
 object creation and add the when(xxx) methods to the setup method. Then you can avoid such code duplication 
#3433 Review Comments 14:
Thank you for your suggestion. I already considered the mentioned approach but I could not get it to work.

The problem is described in third paragraph of the section _"Problem with dependency on JabRefPreferences"_ in the initial pull request. To summarize:
When I tested this approach, the passed TimestampPreferences object did not get updated when the settings were changed. This would mean that
- either the application would have to be restarted for the settings change to apply to the listener
- or I would have to add a method to change the held TimestamPreferences object and add a method that listens for changes in the timestamp settings (which might also just move the problems to the tests for the new listener).

Both approaches are not valid in my opinion and I could not think of a better one.

Noticing this problem also lead to my other question concerning the usage of the JabRefPreferences object directly instead of the object held in "Globals.prefs".
(The question was: Is it possible that the held object changes, thereby invalidating the previously held object which would still be used by the UpdateTimestampListener?)

Or should the TimestampPreferences object get updated and it not reflecting the settings changes is not the wanted behavior?
#3433 Review Comments 15:
Will do this when moving the initialization not dependent on the defined constants into the setup method.

I would, however, prefer to not make the instance variable "private static final". I would like to just make it "private" and instantiate a new mock object for both tests in the setup method instead.
Even though old "when" calls on methods should be overwritten by newer "when" calls (according to the mockito javadoc), using new objects avoids confusion when reading the tests and removes the possibility of dependencies or interactions between the tests.

Furthermore I would only move the calls not dependent on the defined constants as I would like to keep them local. I already had a discussion about this with @tobiasdiez. (I will tag you in a response to the discussion. I hope this will make it easier to find it for you.)

Would that also be acceptable?
#3433 Review Comments 16:
@Siedlerchr This is the discussion about moving parts of the initialization into the setup method.
#3433 Review Comments 17:
The setup() method is called before every test 
#3433 Review Comments 18:
Maybe I was not clear enough when explaining my point of view.
I don't want to have just one mock object for TimestampPreferences that is shared between all tests (which would be the case if TimestampPreferences were made "private static final"). I would like to use private instance variables that are instantiated in the setup method instead. This would mean that we would have a different mock object for each test case.

I am about to push a commit which moves some of the initialization to the setup method. Then we have the code to better discuss the issue and see if any other changes are warranted.
#3433 Review Comments 19:
I investigated your problem and I know the reason for it.
The registerListener method in BasePanel is called once per Database at the initialization with the current Preferences. Any changes to the prefs will not update this.

--------------------------------------------------------------
#3430 Review Comments 1:
I am wondering: Isn't jcenter (the site we have been using so far) a superset of maven central? And we remember that we used maven central before and then replaced it with jcenter, because of the availability of some library.

Why do you add maven central here? 
#3430 Review Comments 2:
Yes, agree, jcenter is superior. However, we could add it as second repo, in case some libs are not found on jcenter 
#3430 Review Comments 3:
This whole buildscript tag is just a workaround since as of now junit 5 does not support the id-syntax, ie something like
````
plugins {
    id 'junit5' version '5'
}
````
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3424 Review Comments 1:
I wonder if `.contains('_')` will produce false positives one day. Probably not very likely, as there are no problems so far.
#3424 Review Comments 2:
@LinusDietz We need *some* test or we will get a lot of false positives for messages that consist only of a single word like "Cancel". I didn't put too much thought into this. It was the first that came to mind.
#3424 Review Comments 3:
@halirutan I agree with the approach and don't have any other reasonable idea to solve this. My remark serves karma purposes only, to have a 'told you so moment' if somebody actually needs to put an underscore into a localized String (;
--------------------------------------------------------------
#3422 Review Comments 1:
You are aware that Collections,singletonList is immutable?
#3422 Review Comments 2:
Thanks for the hint, I was actually not aware of it. In this case, however, it does not matter since `updateEntriesForChangedTypes` only invokes `contains` on the list.
--------------------------------------------------------------
--------------------------------------------------------------
#3418 Review Comments 1:
I would extract this new code at least to a new method.
#3418 Review Comments 2:
I would propose to make this class non-static / not a singleton. You then have a (public) constructor that accepts the current version string and a default constructor which uses `JAVA_VERSION`. In this way you can also easily write a test to verify the methods in this class.
#3418 Review Comments 3:
Yes, good catch.
#3418 Review Comments 4:
A new method of `JabRefMain` or a different place?
#3418 Review Comments 5:
In my opinion, the code can stay in `JabRefMain`.
#3418 Review Comments 6:
Since we are trying to move to JavaFX, would it be possible to display the error message with a FX window instead of a `JFrame`?
#3418 Review Comments 7:
Have a look at the FXDialogService.class. there are already some predefined dialogs for fx
#3418 Review Comments 8:
@Siedlerchr @lenhard That was on purpose. I was using `JFrame` because what good will it be if I check the Java version, try to display a message and crash with an exception because FX is not available? :smile:

Can we safely assume the FXDialog will always work?
#3418 Review Comments 9:
@lenhard I made JabRef quit only when Java 9 is used. Otherwise it displays the message but continues
#3418 Review Comments 10:
@halirutan  if no openjfx is avaiable it will crash nonetheless because the JabRef main inherits from Application (javafx.application.Application). That is the thing which you can't check for directly.
The only thing would be we use a "Pre-Main-Class" that does nit depend on javafx. But I am unsure if this would work
#3418 Review Comments 11:
@Siedlerchr Ha.. overlooked this. My genius idea was to put the test at the very beginning before any of the fx stuff is instantiated. OK, I'm looking into fx dialog tonight.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3413 Review Comments 1:
I know, is not your code, but when you are here, you could provide at least a better name for that list.
--------------------------------------------------------------
#3412 Review Comments 1:
You are extending the method signatures in this core class, and I do not like that. The `ChangePropagation` parameter is added to every method and that pollutes the signatures. 

Please remove `ChangePropagation` from all method signatures. Instead, add an additional constructor for `MetaData` that takes the parameter and store it in an instance variable. This should have the same effect, but cause much fewer code changes.
#3412 Review Comments 2:
That was also my first idea but then I saw [MetaData.java#L249](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/metadata/MetaData.java#L249) which was already there and also uses `ChangePropagation` in this context. However now we are using a `set` method to avoid the signature pollution :).
--------------------------------------------------------------
--------------------------------------------------------------
#3407 Review Comments 1:
Any reason why you deleted this?
Otherwise lgtm
#3407 Review Comments 2:
Yes, the code was no longer used.
--------------------------------------------------------------
--------------------------------------------------------------
#3404 Review Comments 1:
Is there no easy way to prevent the exception from being triggered when the user actually does not use citation styles (I suspect these null checks in the beginning should actually serve this job, although they fail obviously). Reason: I think these SAX errors also appears if a user uses a citation style but the parsing fails for some reason. In this case the logged error message is actually helpful.

If there is no easy way to prevent the exception, then I'm fine with merging this PR.
#3404 Review Comments 2:
You are right of course, I should rather track down the origin. The problem lies in the citationstyles. The first line of some of the styles is broken. For example, the style `university-of-york-vancouver.csl` looks like this `?<?xml version="1.0" encoding="utf-8"?>` and is invalid because it starts with a question mark. 

That should be fixed at the end of the citation styles. For now, I have pushed a fix on our side that removes all invalid content in the prolog, i.e. everything before the first `<`. That way all styles can be processed and the error is gone.
--------------------------------------------------------------
#3403 Review Comments 1:
What is the point of adding the additional variable named `fileLink` here? Since Strings are immutable you can just keep using `link` directly below.
#3403 Review Comments 2:
Or even shorter: `setLink(Objects.requireNonNull(link))`, which also removes a bit of code duplication.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3399 Review Comments 1:
The Argument CountingUndoManager is missing in the signature of this test. I have tried to add it by simply adding `new CountingUndoManager()`, but then the test fails. Can you have a look at it?
#3399 Review Comments 2:
Why not pass the font size directly as int parameter? Would also work for test 
#3399 Review Comments 3:
That would work but there are 2 other accesses to the preferences. Thus 3 new constructor arguments just to get rid of the preference class seems a bit too much for me.
--------------------------------------------------------------
--------------------------------------------------------------
#3395 Review Comments 1:
Nitpick: `field1` is not really a good variable name here. The loop iterates over all fields and not just the first. Please rename this to `field`.
#3395 Review Comments 2:
Since this is new code, please do proper naming (and don't get inspired by all the bad naming in JabRef). So please call this `compoundEdit` (or something similar) instead of `ce`.
#3395 Review Comments 3:
Same here: Why not call it `oldValue`.
#3395 Review Comments 4:
I know this has been there before your PR, but I would  like to encourage you to change the naming of these JTextFields.

Background: In Java you usually use verbs or verbs+nouns for method names. When having some buttons in a GUI I can still understand that it is acceptable to name the variables after the button's functionality. However, when it comes to these Textfields, I would say a verb+noun combination is really misleading.

How about naming them something like `textFieldSet`, `textFieldAppend`, `textFieldRename`?
#3395 Review Comments 5:
@LinusDietz Thank you for your review. Those names are much better! Have made the changes as requested.
--------------------------------------------------------------
#3394 Review Comments 1:
Extract the pattern to a static Pattern and use Pattern.compile
This is more efficient, I think examples are in other integrity checker classes
#3394 Review Comments 2:
Please no general imports with a star, because that loads all classes in the package. 
Our code formatter for eclipse and intellij should have the correct orders
#3394 Review Comments 3:
If it's a one liner lambda expression, you don't need to add curly braces
#3394 Review Comments 4:
Avoid the non null annotation and use Objects.requireNonNulll
#3394 Review Comments 5:
Description should be localized, too
#3394 Review Comments 6:
Thats a bit ugly: you need to know that the cleanup url menu item is the first one returned. Thus the code fails if somebody changes the `getCleanupURLMenu` method. Everything related to the context-menu should actually go there. So much for the theory; I'm not sure if and how a menu item can be notified that it is displayed. If you don't find a good solution, I would remove the disable check for the moment.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3388 Review Comments 1:
You somehwere have a checkstyle error here:
`checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/JabRef/jabref/src/main/java/org/jabref/gui/actions/IntegrityCheckAction.java:8: 'javax.swing.Action' should be separated from previous imports. [ImportOrder]
`
 FAILED
#3388 Review Comments 2:
Please use a Localized message and add it to the l10n files 
https://github.com/JabRef/jabref/wiki/Code-Howtos#using-localization-correctly
#3388 Review Comments 3:
If you use Eclipse, exeute ./gradlew eclipse and it will import the correct settings for the checkstyle. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3368 Review Comments 1:
Use proper logging here.
#3368 Review Comments 2:
Use flatmap instead?
#3368 Review Comments 3:
proper logging
#3368 Review Comments 4:
This code now seems to have a huge overlap with the above changes. Can you please try to extract the common code?
#3368 Review Comments 5:
If I see it correctly, we are only returning one file per entry although the file finder may find more than 1, right?

Personally, I would restructure the code a bit more: instead of calling `findassociatedNotLinkedFiles(List<BibEntry> entries,...` in the method `findassociatedNotLinkedFiles(BibEntry entry,...`, I would iterate over all bib entries and call the method for on entry, i.e.
````java
findassociatedNotLinkedFiles(List<BibEntry> entries) {
     for(entry in entries) {
           append(findassociatedNotLinkedFiles(entry));
      }
}
````
Or is there is good reason to not do this?
#3368 Review Comments 6:
I changed the code so that multiple files will be added, except if there already exists the same file. That's why I return a map now
In the lines above I iterate over all pairs of entries and files
#3368 Review Comments 7:
Sorry, I don't really understand what you mean. Since you return a map, there is by definition only one returned file per entry (since the key in the map is unique). What you need is a multimap (we use a library that provides these...no idea which...guava?)
#3368 Review Comments 8:
Ah yes, did not have this in mind. Will think about another solution
#3368 Review Comments 9:
I think the code gets considerably more easy if you just do the check for one entry (and not a collection) and return a list of to-be-added links. Then the caller can iterate over it.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3364 Review Comments 1:
URL validation is quite hard (potentially completely infeasible) in practice.

Is this implementation sufficient for our purposes? I mean "jabref.org" is a valid url, but would `isOnlineLink()` would return false.

My thoughts are to leave this method in the `LinkedFile` if it should serve as a "special purpose" link checker. If it should be a general method, in the `util` package, then the implementation would need to become more elaborate.
#3364 Review Comments 2:
I did not change the detection of urls, I just moved it
#3364 Review Comments 3:
that's what I mean: if you move it to an `util` package, it should be a general purpose method that works in 'all' cases.

If it stays in this class (potentially private) it's sufficient if it is good enough to be called in that specific context.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3360 Review Comments 1:
The problem here is btw that you run it in a separate thread. This means, the moment `storeSource` starts to work, a new entry is already set and what you do is to overwrite the correct new entry with itself.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3340 Review Comments 1:
Our convention is that these `@FXML` tags should be kept on the same line (I think this is also configured in the intellj style)
#3340 Review Comments 2:
I'm not sure what is more readable: Hiding the supplier interface here like you did or instead writing something like `addToContextMenu(() -> getDefaultMenu(textArea))`. @JabRef/developers any opinions on this?
#3340 Review Comments 3:
It's what IntelliJ did, therefore I thought it might be overlooked in the first place. I can change this
#3340 Review Comments 4:
This is a fetish of @tobiasdiez :P For the sake of being consistent to what we have done before, please keep the `@FXML` in the same line a the instance variable. 
#3340 Review Comments 5:
I think I am in favor of the second solution, i.e. putting the supplier into `EditorTextArea.addToContextMenu()`. Reasoning: With the current solution, the lazy initialization is dispersed over two classes. Changes are required in `EditorTextArea` and `EditorMenus`. If I understand everything correctly, we could build the supplier inside `addToContextMenu()` only. That would be a very localized change that hides the lazy initialization as far as possible.

My perception might be wrong, though. Please correct me if this is the case.
#3340 Review Comments 6:
If I understand everything correctly, we could build the supplier right here and still accept a `List<MenuItem>` as method parameter. That would keep the changes very localized.

More discussion see below.
#3340 Review Comments 7:
Hmm, then I misunderstood the whole thing. Every text-field editor needs to attach its own context menu. Als long as I have wrapped it in a supplier, the code is not instantiated. So how is for instance `IdentifierEditor` supposed to attach a non-instantiated context menu?

```
textArea.addToContextMenu(EditorMenus.getDefaultMenu(textArea));
```

Assume we don't do the wrapping inside `EditorMenus`, then the menu would be instantiated exactly there. Except when I put the `Supplier` wrapper at this place. But then we have the suppliers scattered over even more classes. What do I miss?
#3340 Review Comments 8:
Found it. We need to set this in our code style for IDEA

![img](http://i.imgur.com/Z9KguGv.png)
#3340 Review Comments 9:
No, Jörg, the supplier has to be built outside of this method since otherwise the context menu items are already created. With the help of a supplier, we are able to delay the creation until the user opens the context menu (since only then the `get` method is called).
#3340 Review Comments 10:
Ok, then I was wrong. Thanks for clarifying! In that case, please disregard my comment and keep the solution.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3327 Review Comments 1:
Yozu can omit the class part when writing a log message, as the Logger is already instantiated for the current class and therefore knows its name. 

#3327 Review Comments 2:
HashTable is deprecated, better use HashMap.
And with java 8 streams and the Collection methods you an even make this code a lot nicer:
https://www.mkyong.com/java8/java-8-convert-list-to-map/
#3327 Review Comments 3:
Better use the Objects.requireNonNull here. It will automatically throw an NPE
#3327 Review Comments 4:
As mentioned above, use as HashMap 
#3327 Review Comments 5:
Same remark regarding the class files as by @Siedlerchr above
#3327 Review Comments 6:
I think throwing an `IllegalStateException` would be better here. Just for the more descriptive exception type.
#3327 Review Comments 7:
As above, rather use `Objects.requireNonNull` here.
#3327 Review Comments 8:
I used

```
        Objects.requireNonNull(messages, "Could not load " + RESOURCE_PREFIX + " resource.");
        Objects.requireNonNull(menuTitles, "Could not load " + MENU_RESOURCE_PREFIX + " resource.");
```

which throws NPE, but gives a description.
#3327 Review Comments 9:
Done.
#3327 Review Comments 10:
Done
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3320 Review Comments 1:
Why is crossref gone here?
#3320 Review Comments 2:
It was not used (only assigned) and there is `single/multiple entry link` which looks the proper generalization.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3315 Review Comments 1:
You need a guarded wait here in case an `InterruptedException` is thrown
#3315 Review Comments 2:
that's a problem of our model then. I would vote to move the setup of the linked file to the model instead of violating the architecture in this way.
#3315 Review Comments 3:
You should make sure to also invoke the runnable here at all times!

#3315 Review Comments 4:
runLater is async, while this code is sync. I don't like that we change behavior depending on whether we are in a javafx thread or not. What was your idea behind those changes? 
#3315 Review Comments 5:
There shouldn't be any problem with setting a JavaFX property on a non-FX thread. The properties don't check on which thread they are invoked (e.g. I think the basic example by oracle about the binding stuff actually uses a command line application). The problem occurs if you bind a JavaFX control to these properties, since then you get a cascade like
set javafx property > set some property in the control via binding > update view
and the last step is expected to be on the fx thread.

So far for the general case. Now here, where do we use bindings on the file field?
#3315 Review Comments 6:
I did not really think about it. will wrap it.
#3315 Review Comments 7:
I am not sure what you mean: The get already waits for completion. the only thing which we could add is a timeout. But that depends 
#3315 Review Comments 8:
In fact, updateItem on the LIstviewCellFactory is called which in the end leads to the thread error.
```

1:46:47.408 [Spin-2] ERROR org.jabref.FallbackExceptionHandler - Uncaught exception occurred in Thread[Spin-2,6,spin]
java.lang.IllegalStateException: Not on FX application thread; currentThread = Spin-2
	at com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:236) ~[jfxrt.jar:?]
	at com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:423) ~[jfxrt.jar:?]
	at javafx.scene.Parent$2.onProposedChange(Parent.java:367) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:113) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.updateChildren(LabeledSkinBase.java:575) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.LabeledSkinBase.handleControlPropertyChanged(LabeledSkinBase.java:181) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.ListCellSkin.handleControlPropertyChanged(ListCellSkin.java:49) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.skin.BehaviorSkinBase.lambda$registerChangeListener$61(BehaviorSkinBase.java:197) ~[jfxrt.jar:?]
	at com.sun.javafx.scene.control.MultiplePropertyChangeListenerHandler$1.changed(MultiplePropertyChangeListenerHandler.java:55) ~[jfxrt.jar:?]
	at javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:89) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:105) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:112) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:146) ~[jfxrt.jar:?]
	at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82) ~[jfxrt.jar:?]
	at javafx.beans.property.ObjectProperty.setValue(ObjectProperty.java:69) ~[jfxrt.jar:?]
	at javafx.scene.control.Labeled.setGraphic(Labeled.java:423) ~[jfxrt.jar:?]
	at org.jabref.gui.util.ViewModelListCellFactory$1.updateItem(ViewModelListCellFactory.java:122) ~[bin/:?]
	at javafx.scene.control.ListCell.updateItem(ListCell.java:480) ~[jfxrt.jar:?]
	at javafx.scene.control.ListCell.lambda$new$160(ListCell.java:167) ~[jfxrt.jar:?]
	at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ObservableListWrapper.remove(ObservableListWrapper.java:167) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.BidirectionalContentBinding$ListContentBinding.onChanged(BidirectionalContentBinding.java:135) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ListExpressionHelper$Generic.notifyListeners(ListExpressionHelper.java:593) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ListExpressionHelper$Generic.fireValueChangedEvent(ListExpressionHelper.java:571) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ListExpressionHelper.fireValueChangedEvent(ListExpressionHelper.java:109) ~[jfxrt.jar:?]
	at javafx.beans.property.ListPropertyBase.fireValueChangedEvent(ListPropertyBase.java:200) ~[jfxrt.jar:?]
	at javafx.beans.property.ListPropertyBase.lambda$new$39(ListPropertyBase.java:56) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper$SingleChange.fireValueChangedEvent(ListListenerHelper.java:164) ~[jfxrt.jar:?]
	at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:233) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482) ~[jfxrt.jar:?]
	at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541) ~[jfxrt.jar:?]
	at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:205) ~[jfxrt.jar:?]
	at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:90) ~[jfxrt.jar:?]
	at javafx.beans.binding.ListExpression.setAll(ListExpression.java:370) ~[jfxrt.jar:?]
	at org.jabref.gui.util.BindingsHelper.lambda$5(BindingsHelper.java:121) ~[bin/:?]
	at org.jabref.gui.util.BindingsHelper$BidirectionalListBinding.changed(BindingsHelper.java:192) ~[bin/:?]
	at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:361) ~[jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:103) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:110) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:144) ~[jfxrt.jar:?]
	at javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:49) ~[jfxrt.jar:?]
	at javafx.beans.property.StringProperty.setValue(StringProperty.java:65) ~[jfxrt.jar:?]
	at javafx.beans.property.StringProperty.setValue(StringProperty.java:57) ~[jfxrt.jar:?]
	at org.jabref.gui.util.BindingsHelper$BidirectionalBinding.updateLocked(BindingsHelper.java:164) ~[bin/:?]
	at org.jabref.gui.util.BindingsHelper$BidirectionalBinding.changedB(BindingsHelper.java:157) ~[bin/:?]
	at com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:182) [jfxrt.jar:?]
	at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:81) [jfxrt.jar:?]
	at javafx.beans.binding.ObjectBinding.invalidate(ObjectBinding.java:172) [jfxrt.jar:?]
	at com.sun.javafx.binding.BindingHelperObserver.invalidated(BindingHelperObserver.java:51) [jfxrt.jar:?]
	at com.sun.javafx.collections.MapListenerHelper$Generic.fireValueChangedEvent(MapListenerHelper.java:320) [jfxrt.jar:?]
	at com.sun.javafx.collections.MapListenerHelper.fireValueChangedEvent(MapListenerHelper.java:72) [jfxrt.jar:?]
	at com.sun.javafx.collections.ObservableMapWrapper.callObservers(ObservableMapWrapper.java:115) [jfxrt.jar:?]
	at com.sun.javafx.collections.ObservableMapWrapper.put(ObservableMapWrapper.java:169) [jfxrt.jar:?]
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:422) [bin/:?]
	at org.jabref.model.entry.BibEntry.setField(BibEntry.java:448) [bin/:?]
	at org.jabref.model.entry.BibEntry.setFiles(BibEntry.java:807) [bin/:?]
```
#3315 Review Comments 9:
I think the best solution is actually to call the whole cleanup process in the JavaFX thread.  If this does not work, you can add the Platform.runLater also in `org.jabref.gui.util.BindingsHelper`
#3315 Review Comments 10:
It works in that case that I do not receive any errors, but the file isn't renamed. I think the problem is that somehow it immediately returns instead of waiting

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3305 Review Comments 1:
Can you extract this into a private method named something like `isRestartRequired`?
#3305 Review Comments 2:
Why don't we just enable this for Linux by default then?
#3305 Review Comments 3:
Well, I think it is okay like this. Giving the Users the possibility to opt out is a good thing here, as all screens are different and maybe some users prefer the heavier font over the lighter one (to me the untweaked font looks somehow more appealing)
#3305 Review Comments 4:
hm ok.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3293 Review Comments 1:
Is there no setter for setting all filters?
Could be merged otherwise
--------------------------------------------------------------
#3291 Review Comments 1:
Can you please reuse the remove new lines formatter here, otherwise this is good to go.
#3291 Review Comments 2:
@tobiasdiez This does not work with our current conventions, i had it this way before...: Adhere to architecture tests do not use logic from within model
#3291 Review Comments 3:
Ok, thats again one of these cases where I don't like our strict architecture tests. One could argue that the Formatter can actually life in model as well, but I don't want to start a war here :-)
#3291 Review Comments 4:
me neither ;-)
#3291 Review Comments 5:
I would also add a special treatment for hyphenated words.
Algorithm sketch: If the last character before the line termination symbol is a minus, replace the minus and the line-terminator with an empty string.

```
"...Jab-\n"
"ref is cool!\n" 
```
=>
```
"...JabRef is cool!"
```

#3291 Review Comments 6:
What about Key-Account-Manager?
#3291 Review Comments 7:
Well... bad luck? words with a dash are quite rare, at least less frequent than hyphens at line breaks.

This is a problem, where we cant make a good decision.
#3291 Review Comments 8:
Words with a dash are quite rare in English, maybe...
#3291 Review Comments 9:
We can just add your solution and see if someone complains. I guess leaving the chars as they are is also not a bad decision.
#3291 Review Comments 10:
We've discussed this in the DevCall: Please go for the solution suggested by @LinusDietz 
#3291 Review Comments 11:
You can use the field formatter it in the view model of the file annotation instead of in the actual model (i.e. the actual model contains the text as it was in the pdf, but it is shown without line breaks).
https://github.com/JabRef/jabref/blob/efdf91a7d277a950204672c2c823d7e6dfe65305/src/main/java/org/jabref/gui/entryeditor/fileannotationtab/FileAnnotationViewModel.java#L19-L25
--------------------------------------------------------------
--------------------------------------------------------------
#3287 Review Comments 1:
Typo!
--------------------------------------------------------------
--------------------------------------------------------------
#3282 Review Comments 1:
Is there an extra level of indentation here?
#3282 Review Comments 2:
Yes, there was an additional indent (I'm using the github editor for these edits since I don't have a proper IDE at the moment).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3273 Review Comments 1:
I guess we should only execute this code, if we are actually running on a unix system, right? That means it should all be wrapped in an `if (OS.LINUX)`
#3273 Review Comments 2:
This would also exclude Unix systems like FreeBSD, wouldn't it?
#3273 Review Comments 3:
In all my time in the JabRef team, I've never heard of someone running it on FreeBSD. Anyway, the alternative solution is `!OS.WINDOWS && !OS.OSX` :)
#3273 Review Comments 4:
I added that alternative variant now. Thanks for your review!
--------------------------------------------------------------
#3272 Review Comments 1:
It would be nice if you could convert this to a lambda expression. (Unfortunately this lamdba styles is not possible with the timer task)
Just:
```
    SwingUtilities.invokeLater(() -> {
                        DefaultTaskExecutor.runInJavaFXThread(JabRefFrame.this::showTrackingNotification);
                    });
```
#3272 Review Comments 2:
Yes, this definitely looks cleaner. Applied and re-tested.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3250 Review Comments 1:
We need such a text for 3.x too
#3250 Review Comments 2:
Which text? 😇 

The 3.0 changelog points back to the 2.11 one. But not forward to 4.0 though...
--------------------------------------------------------------
#3248 Review Comments 1:
Seems like you have forgotten to remove the system out print here
#3248 Review Comments 2:
Please construct the entry by hand (as you did for `entry1`) instead of using the parser. I know, the other tests also work like that but this is bad design.
--------------------------------------------------------------
#3246 Review Comments 1:
@koppor This generates a key with a value `/ve /d "C:\Program Files\JabRef\jabref.json" /f`. However, there actually should be a folder `org.jabref.jabref` with key `Default` and only the path as value. 
![image](https://user-images.githubusercontent.com/5037600/38522071-c39aa4ee-3c47-11e8-81b5-5605ae1ae9f7.png)

It would be nice if you could fix this since this is the last issue that currently prevents merging this PR. Thanks!
See https://github.com/JabRef/JabFox/issues/50.
#3246 Review Comments 2:
Fixed. I was in a hurry when copy'n'pasting your requirements.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3243 Review Comments 1:
I'm a big fan of these tests! The only thing that I don't like is this hack to set `CLIPBOARD`. Instead I propose to convert
https://github.com/JabRef/jabref/blob/32e934fca20789402bdd0f183fd731d94bc91ce6/src/main/java/org/jabref/gui/ClipBoardManager.java#L30
to an instance variable which is initialized in the constructor. Then you can just use `clipBoardManager = new ClipBoardManager(clipboard, importFormatReader)`.
#3243 Review Comments 2:
As far as I can see, this is mostly a copy of `importUnknownFormat(Path filePath)` and I would like to have a solution without code duplication. Maybe something along the following lines works?
````java
private UnknownFormatImport importUnknownFormat(Function<Importer, ParserResult> importDatabase, Function<Importer, Boolean> isRecognizedFormat) {
    // original method with obvious changes imFo.importDatabase -> importDatabase.apply(imFo)
}

public UnknownFormatImport importUnknownFormat(Path filePath) {
    return importUnknownFormat(importer -> importer.importDatabase(filePath, importFormatPreferences.getEncoding(), importer -> importer .isRecognizedFormat(filePath, importFormatPreferences.getEncoding());
}

public UnknownFormatImport importUnknownFormat(String data) {
    return importUnknownFormat(importer -> importer.importDatabase(data), importer -> importer .isRecognizedFormat(data));
}
````

It's a bit ugly. Do you have a better idea to reduce the code duplication?
#3243 Review Comments 3:
Can you please extract the method `Importer.importDatabase(String data)`. This new method can be reused at least in the `MrDLibFetcher`. Similarly, for the `isRecognizedFormat`.
#3243 Review Comments 4:
Why is this special treatment necessary for the import from a string, but not when the same content is imported from a file?
--------------------------------------------------------------
--------------------------------------------------------------
#3241 Review Comments 1:
Although this _might_ work, I don't like the way you mix error handling and control flow. Would it be possible to perform a check **before** any exception is thrown and handle the two cases separately?

#3241 Review Comments 2:
Yes, it was a bad way to do it. In the new commit, I checked if database directory and pdf directory has different roots without throwing an exception.
--------------------------------------------------------------
--------------------------------------------------------------
#3238 Review Comments 1:
Out of curiosity: Did you really use make in some way while implementing this PR?
#3238 Review Comments 2:
Can you clarify some more why the `LayoutFormatterPreferences` are gone here? Doesn't this break existing formatting?
#3238 Review Comments 3:
Same as above: Why is it save to remove the `LayoutFormatterPreferences`?
#3238 Review Comments 4:
Please remove the commented-out code here.
#3238 Review Comments 5:
I think it's a really good idea to extract some code here into a separate class. Good job!
#3238 Review Comments 6:
Please remove the commented-out code here.
#3238 Review Comments 7:
Please remove the commented-out code here.
#3238 Review Comments 8:
Please remove the commented-out code here.
#3238 Review Comments 9:
Please remove the commented-out code here.
#3238 Review Comments 10:
Please remove the commented-out code here.
#3238 Review Comments 11:
Please remove the commented-out code here.
#3238 Review Comments 12:
Why did you remove 47 here? Why is it no longer an illegal char? This needs a good justification or should be reverted.
#3238 Review Comments 13:
Same as for 47 above.
#3238 Review Comments 14:
Since you are modifying this piece of code anyway, could you improve it a little and give `m` a more meaningful name, e.g. `matcher`.
#3238 Review Comments 15:
We're trying to get rid of all the `@author` annotations, so please remove this. Thanks to git, this code will be attributed to you anyway via your commit. No need to write it into the source.
#3238 Review Comments 16:
That is indeed quite ugly. As far as I can see this comes from the using the logger. It's a little weird, because I am almost sure that the logger didn't trigger these exceptions earlier, but this is probably not caused by this PR.

I think I would prefer it if you removed the JFXPanel here. It is better to have exceptions written into the console (the tests work anyway) than to have dependencies such as this in the code. But maybe another developer might disagree with me here.
#3238 Review Comments 17:
I'm not a big fan of the semantics here. Instead I would propose that `BracketedExpressionExpander` actually accepts the pattern as a constructor argument and then provides a method `expand` that accepts a BibEntry as an argument and uses the contained information to expand the pattern. My proposal is a bit similar to the regular expression pattern class.
Moreover, I would then rename the `BracketedExpressionExpander` class to something like `GenericPattern` or `BacketedPattern` (actually I would prefer just `Pattern` but this name is already taken by the java regex pattern class).

What do you think?
#3238 Review Comments 18:
We are trying to get rid of these static helper methods. Similar to my remark above, I would propose to create a `FileNamePattern` class, that accepts the file name pattern and directory pattern as constructor arguments and provides these two methods as instance methods.
#3238 Review Comments 19:
I bet this is the "user friendly" Eclipse that did it :). Removed. Will push update shortly.
#3238 Review Comments 20:
Fixed: m -> matcher, s -> expandedStringBuffer
#3238 Review Comments 21:
Yes, GNU Make is my favourite project management tool :)
But, agreed, not needed for JabRef. Removed the .gitignore lines.
#3238 Review Comments 22:
I agree regarding the separation. I'm glad you like the implementation; some people say that "extends is evil"....
#3238 Review Comments 23:
Removed; will push in a short while.
#3238 Review Comments 24:
See my e-mail reply below.
#3238 Review Comments 25:
See my e-mail reply below.
#3238 Review Comments 26:
Fixed.
#3238 Review Comments 27:
Fixed.
#3238 Review Comments 28:
Fixed.
#3238 Review Comments 29:
Fixed.
#3238 Review Comments 30:
Fixed; although, I have still left a FIXME regarding the unused 'layoutPreferences' constructor argument; I'll remove it when we all agree that it is safe to drop dependency on the LayoutFormatterPreferences class. The latter change will require more refactoring.
#3238 Review Comments 31:
See comment in my e-mail below.
#3238 Review Comments 32:
See comment in my e-mail below.
#3238 Review Comments 33:
Removed JFXPanel, but added FIXMEs to the tests that trigger the exception logging -- we should find out what goes on there. The exceptions can not be caught in the test case code (!), apparently meaning that they are thrown and logged in a separate thread (JUnut?).

Only two test cases, unbalancedBracketExpansionTest and unbalancedLastBracketExpansionTest, cause this behaviour, since only they use the logger to report syntax errors. Another solution would be to drop logger dependency from BracketedExpressionExpander and throw exceptions on sytax errors, expecting that the caller catches and logs them appropriately. I would like this approach more, but currently there is a risk that uncaught exceptions will crash the application or produce obscure notifications.
#3238 Review Comments 34:
Thaks for the renaming suggestion! I agree, 'BracketedExpressionExpander' is a long and clumsy name. I would opt for 'BacketedPattern': 'GenericPattern', I think, is too generic ;), and Pattern is taken, as you say. I've refactored the class and tests to use 'BacketedPattern' and 'BacketedPattern.expand' instead of 'BacketedPattern.expandBrackets'.


#3238 Review Comments 35:
As for semantics, I think one can do both ways. I assumed that the the common situation will be to have a pattern that we want to expand, and then have an (abstract) expander that contains all necessary information (bibentry, preferenceses, databases, etc.). I also assumed that one may want to use the same expander for several patterns in a row; this last assumption does not hold for JabRef.

So, I could change the interface to public BracketedPattern(String pattern, BibEntry bibentry), or public BracketedPattern(String pattern).

I must admit however that to my taste it seems a terrible abuse of OO to use an object as a fancy way of passing yet another parameter to a function; i.e. having 'X x = new X(y); x.f(z)' instead of simply 'f(y,z)'. Functions should stay functions, and object should be "clever" values used in those functions, IMHO :).

In the above case, 'expandBrackets' seems to be more like a function that takes two arguments, a pattern (which is always a string) and the context information (which may be BibEntry, Database, DatabaseContext, depending on your needs, and may change in the future). Having BracketedPattern.expand( String pattern ) would allow flexibility in the future: one could use descendent classes of BracketedPattern (with different context information) everywhere where the '.expand( bracketedPattern )' method is called, without changing the interface. Or one might have an AbstractBracketedPattern interface/abstract class, and implement '.expand( bracketedPattern )' in different ways. 

Given the above considerations, the current interface, 'public BracketedPattern(BibEntry bibentry)' and 'String BracketedPattern.expand(String pattern)' seem the most flexible and future-proof.

What are your thoughts?
#3238 Review Comments 36:
My original implementation was similar to what you suggest, but the 'static String createFileNameFromPattern(...)' method was given, and I was trying to change as little as possible, thus I opted to make a static 'static String expandBrackets(String pattern, ...)' method so that it can be called in a static context. I suggest that the transition from static to non-static methods are made as a separate refactoring and presented as the next PR. The current PR seems complicated enough on its own, and I am afraid to make mistakes if I do two things at a time.

Also, as discussed in my previous comment: should it be a) 'public FileNamePattern(String patter)' and 'FileNamePattern.makeFileName(BibEntry entry)', b) 'public FileNamePattern(BibEntry entry)' and 'FileNamePattern.makeFileName(String pattern)', or c) 'public FileNamePattern(BibEntry entry, String pattern)' and 'FileNamePattern.makeFileName()'? You seem to be favouring method (a), but my considerations seem to indicate that method (b) would require less changes of interface in the future. So which would be the preferred way to go?
#3238 Review Comments 37:
You are right,
>'expandBrackets' seems to be more like a function that takes two arguments, a pattern (which is always a string) and the context information (which may be BibEntry, Database, DatabaseContext, depending on your needs, and may change in the future)

So in principle there are two logical ways to split these arguments to the `expandBrackets` function:
a) The pattern as an argument to the constructor and the context information as arguments to the `expandBrackets` method.
b) The other way around, that is the context information as arguments to the constructor and the pattern as an argument to the `expandBrackets` method.

You favor method b) while I would use a). There are good arguments for both ways. Lets make a deal: I'll present my reasoning for a) and if I can convince you, you change the code accordingly. If not then the code stays like it is right now and I give my +1 for merge 😸 

So:
- In principle, we can do a pre-processing of the pattern in the constructor and then reuse the `expand` method for different entries to save time.
- You can create the `BracketedPattern` from the string in some place (say in the preference class) and then pass it to other methods (for example, the rename cleanup operation). Then only the preference class needs to know how to deserialize the pattern from a string, while the other methods in the chain only care that the are given a `BracketedPattern`. (Background: there was a time, when strings where used for everything in JabRef: File names, entry field names and values, preferences, ... literally everywhere. Since about 2 year we are now trying to encapsulate more and more of these strings in special classes, e. g. `AuthorList` or dedicated preference classes like `LayoutPreferences`. I would like to see the same for the pattern.)
- If we should decide to change or replace the pattern format, one would only need to change the places where the conversion from string to the pattern happens (which is considerably less overhead then all the places where the pattern is expanded). 
- Conversely, if we enrich the pattern and need additional context information (for example, with the old layout pattern it was possible to query JabRef's database of journal abbreviations), then the `expand` method have to be changed. You argued that such a change of the interface is not desirable; I'm actually of different opinion here: The additional context information has to come from somewhere, and it is the task of the caller of `expand` to provide the necessary data. Thus every caller has to be changed anyway since the new dependency has to be propagated. 
- If a class is named `BracketedPattern` I would assume that it encapsulates a pattern. 😈 
--------------------------------------------------------------
#3233 Review Comments 1:
That is not a good idea, as you are now violating the architecture: https://github.com/JabRef/jabref/wiki/High-Level-Documentation
You are having gui components in a logic method. This FileUtil method is used in many places.
So I suggest you create a method which throws the exception 

#3233 Review Comments 2:
I think we need to help @derebaba here a bit (since architectural questions are probably not a good start into a project). 

It is also not possible to simply move the dialog service stuff to `RenamePdfCleanup` since this class also resides in `logic`. Thus I would propose the following:
1. Extract the body of the `FileUtil.renameFile` method to a new method `FileUtil.renameFileWithException`
https://github.com/JabRef/jabref/blob/c47d2a468a798c6ca83b8080e1301513717b1fff/src/main/java/org/jabref/logic/util/io/FileUtil.java#L194-L199
2. Similarly, extract the body of the cleanup method to a new method `cleanupWithException` (which then uses the new `renameFileWithException` method) https://github.com/JabRef/jabref/blob/8a420b4fcc4a97a2d8d42f4641d0061d22982b05/src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java#L61
3. Catch the exception and show the error dialog in the gui:
https://github.com/JabRef/jabref/blob/c47d2a468a798c6ca83b8080e1301513717b1fff/src/main/java/org/jabref/gui/fieldeditors/LinkedFileViewModel.java#L206

It's a bit complicated but the best I can come up with (especially since the `FileUtil` and `CleanupJob` classes are designed to hide exceptions instead of to expose them). @JabRef/developers what do you think?
#3233 Review Comments 3:
Thanks for the comprehensive explanation. I got a little confused at first. Check out my latest commit. It should do the trick if I understand correctly.
#3233 Review Comments 4:
Thanks for the quick implementation! The code is exactly how I meant it, good job!
The only problem left is the code duplication from the old methods and the new ones that throw an exception. But this should be easy to fix by calling the `withException` method in the original one; along the following lines:
````java
public static boolean renameFile(Path fromFile, Path toFile, boolean replaceExisting) {
        try {
            return renameFileWithException(fromFile, toFile, replaceExisting);
        } catch (IOException e) {
            LOGGER.error("Renaming Files failed", e);
            return false;
        }
}
````
Similarly for the `cleanup` method. If this is changed as well, I give my 👍 for merge.
#3233 Review Comments 5:
I removed the duplicate code as you explained. It is my first contribution ever to an open source project. Thank you for being so helpful.
--------------------------------------------------------------
--------------------------------------------------------------
#3224 Review Comments 1:
Please always use Assert in each `@Test`
#3224 Review Comments 2:
What is the benefit of having this test?
Is it good design that the `PreviewPreferences` class accepts null values in the constructor?
If it isn't, we should not have a test that fails as soon as somebody adds parameter validation...


#3224 Review Comments 3:
Here the same again. Nice that the test succeeds, but what do we learn from that?
#3224 Review Comments 4:
In this test the system under test is the `VersionPreferences` class.
However, your assertion tests a very specific behaviour of the `Version` class. That's a mismatch for me.





#3224 Review Comments 5:
Thanks for spotting this error!
#3224 Review Comments 6:
I get your point. 
Implementing this test helped me understand jabref / Preview Preference better. And as there was not a basic test yet, I thought it might be useful for others to see a "skeleton" constructor. 

On another level, to which I have not jet gained enought understanding: May I ask, what is the benefit of not having this test?  If it hinders good design, then I would argue to implement good design, instead of not testing not so good design. Unfortunately, I cannot contribute to this level of discussion or programming yet (I am working on it, though). 
#3224 Review Comments 7:
I understand that you are missing learnings from this simple test. At least for regression testing or in case of refactoring, this test may already be helpful. In future, more complex test methods may be added to this class.
#3224 Review Comments 8:
I would disagree with you about the mismatch. My current understanding of ```VersionPreferences``` leads me to think, that it is a specific subset of ```Version```. 
I cannot remember now, why I stumbled over ```getIgnoredVersion()```, but I used this base method to fiddle around with loading preferences. 
If the test does not belong in this class, where would you put it?
#3224 Review Comments 9:
What @lynyus (probably) meant is the following: you usually write a test to verify a certain desired behavior and not to proof the absence of an undesired one.

To make this more concrete, consider the difference between the test method you added and
````java
public void isEmptyForEmptyVersion() {
     versionPreferences = new VersionPreferences(new Version());
     assertEqual(new Version(), versionPreferences.getIgnoredVersion());
}
````
(which is essentially the same as the other test method you added further below).
Both tests would fail if the constructor of `VersionPreferences` throws an exception for some reason. However, this new version of the test also fails in case the constructor does not work as expected, namely if the version is not stored in the `ignoredVersion` field. So there is no need for an explicit test that no exception gets thrown. 

That being said, normally you don't need to write tests for simple constructors and properties. If you see this as a learning opportunity, you are of course welcome to write such tests.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3214 Review Comments 1:
Are you aware that you can directly call assertEquals on two optionals?
https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#equals-java.lang.Object-
#3214 Review Comments 2:
I don't see why it's necessary to have a BibEntry build class?
Why not just simply create two new BibEntrys? And you won't need the actual database file.

e.g.
```
database = new BibDatabase()
BibEntry source = new BibEntry()
source.setCiteKey("source")
source.setField(Crossref, "target")
database.insert(source)
BibEntry target = new BibEntry()
target.setCiteKey("target")
database.insert(target)

```


#3214 Review Comments 3:
Put that in the before method and it will be "freshly created" for every test
#3214 Review Comments 4:
`BibEntry` actually contains a `withField` method if you want to use a more fluent api,
https://github.com/JabRef/jabref/blob/23a0610ea7cba94172e5d9f0b4b6e0591003d667/src/main/java/org/jabref/model/entry/BibEntry.java#L734-L737
If you want, you can also add a new method `withCiteKey` along these lines.
--------------------------------------------------------------
--------------------------------------------------------------
#3211 Review Comments 1:
Please use [Optional<Path>](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) as a return type and return an empty optional here instead of  `null`.
#3211 Review Comments 2:
findFirst also returns an optional, so you could just forward that one from here 
#3211 Review Comments 3:
and here you can then check the above optional with isPresent and avoid the null 
#3211 Review Comments 4:
Here you have two unchecked calls for Optional.get(). Will they always succeed? If so, can you please comment in the code why this is so? Otherwise please add some error handling.
#3211 Review Comments 5:
Please reformat the code
```
/**
* Check to see...
* ...
*/
```
#3211 Review Comments 6:
This is maybe a bit nitpicky: Think of a more intuitive name for the method that reflects the return type. `fileAlreadyExists` sounds to me like it would return a boolean. How about `findExistingFile` or something similar?
#3211 Review Comments 7:
You could reduce code-duplication by extracting this method call into a private method.
--------------------------------------------------------------
#3210 Review Comments 1:
you need to return `description, link, fileType` here (and move `downloadProgress` and `isAutomaticallyFound` back to the viewmodel).

The observable tell javafx which properties mark the object as changed, i.e. if `description` is changed this should mark the `LinkedFile` as changed and thus also `LinkedFileViewModel` and thus finally the list https://github.com/JabRef/jabref/blob/23c6ac6308dc4df72057eec0806570f635c1ed0b/src/main/java/org/jabref/gui/fieldeditors/LinkedFilesEditorViewModel.java#L55.
For more details see https://docs.oracle.com/javase/8/javafx/api/javafx/collections/FXCollections.html#observableList-java.util.List-javafx.util.Callback- or https://stackoverflow.com/questions/31687642/callback-and-extractors-for-javafx-observablelist
#3210 Review Comments 2:
also add `isAutomaticallyFound`
#3210 Review Comments 3:
Why is this constructor not private anymore?
#3210 Review Comments 4:
Just budding in here... 

The file list would be cleaner if the filenames weren't shown when there is a description, as was done in JabRef 3.x.  If there are very long descriptions, it will still be cluttered, but in my opinion, tooltips aren't an improvement.  

The problem with descriptions only in tooltips is that you have to mouse over each one.  This makes JabRef harder to use:

1.  It forces you to lift your hands off the keyboard, but more importantly,
2. You can't scan the descriptions at a glance.  Instead, you have to mouse over the first one, then mouse over the next one (which causes the previous description to vanish), and so on.

You can simulate the user experience by having somebody else make you a JabRef entry with, say five files with slightly different descriptions -- this is what your own entries will look like to you, a couple years after you have made them.  You won't remember anything.

Now, try to decide which file to open.  With tooltips, you see only one description at a time, like you're viewing them through a straw.  Now compare that with the JabRef 3.x experience, where all descriptions are visible; with a glance, you can comprehend them all.
#3210 Review Comments 5:
Sounds reasonable! 
#3210 Review Comments 6:
I now changed the order: Description is shown first and then the file link
#3210 Review Comments 7:
Was a relict from testing. Didn't see that it had static method on the first try
#3210 Review Comments 8:
Come to think of it, you could even make the filename a tooltip.  Once you've got the description, the filename is probably not so useful, but in some situation, you still might want to know it.

But then again, there is the "see everything at a glance" argument I just made...
#3210 Review Comments 9:
Very minor, but as far as I can see this blank line is unnecessary.
#3210 Review Comments 10:
Very minor, but as far as I can see this blank line is unnecessary.
#3210 Review Comments 11:
Very minor, but as far as I can see this blank line is unnecessary.
--------------------------------------------------------------
#3209 Review Comments 1:
Can you get this working too?
#3209 Review Comments 2:
Sadly no. I tried to fix it but the extraction of the abbreviation from the text is hidden in the whole tokenizing process and thus not easy to change.
--------------------------------------------------------------
#3205 Review Comments 1:
This method is not used, right?
#3205 Review Comments 2:
This is also not used right?
#3205 Review Comments 3:
Yes I remove it.
#3205 Review Comments 4:
Yes @Siedlerchr , I remove it too.
#3205 Review Comments 5:
That is one empty line too much, which is also one of the reasons why the travis build fails
#3205 Review Comments 6:
There should be an empty line here, which is also one of the reasons why the travis build fails.
#3205 Review Comments 7:
The `environmentInfo` is not needed (or set), right?
#3205 Review Comments 8:
I did not change that. environmentInfo is used line 37 in AboutDialog.fxml
--------------------------------------------------------------
#3204 Review Comments 1:
Please follow the styles from the other entries for creating the URL links. And I think you have an 'a' too much at the issue number
#3204 Review Comments 2:
yeap. `[#3199](https://github.com/JabRef/jabref/issues/3199)` would be correct.
#3204 Review Comments 3:
Oops, totally overlooked that :D Should be fixed now, thanks guys
--------------------------------------------------------------
#3203 Review Comments 1:
Why do you catch a NPE here? Looks strange
#3203 Review Comments 2:
I know. For some reason this Binding triggers a NullPointerException when a group is removed, even though there was a null check directly before. I tried hard, but I could not pin down the actual cause of this (or which object actually is null). The debugger is really of no use with lambdas and bindings. But look at the complete code change in this class, it's just a different way of doing the same thing with a null check.

Apart from that, the NPE doesn't have any effect. The removal works anyway and the selection is cleared. All that this line does is to avoid a stack trace in the log.

I can offer to add a code comment explaining this, but I don't have more time to investigate why this is triggered (spent enough on that already). So it's either this solution or a stack trace in the log.
#3203 Review Comments 3:
Okay, add a comment and I am fine. Not the best idea yeah but I know how hard it is do debug binding lamdba stuff
#3203 Review Comments 4:
Okay, I took the time to rewrite that part in an imperative fashion, track down the bug, and fix it properly. It is totally insane... `List<TreeItem<GroupNodeViewModel>> newSelectedGroups` is a list that can actually contain `null` values. When you iterate over that list in an absolutely standard fashion, e.g. `for (TreeItem<GroupNodeViewModel> model : newSelectedGroups) {` than `model` can actually be null.

If that's not a violation of the basic contract of how collections work in Java, then I don't know what would be.
#3203 Review Comments 5:
This is really odd
#3203 Review Comments 6:
The NPE is valid in the for each loop, it does not check against NULL, it only skips the loop if the list is empty. So this is more of a design issue that the TreeItem could be null at one poin
https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work?rq=1
#3203 Review Comments 7:
Interesting, thanks :) You never finish learning about even the most basic aspects of the language.

Anyway, the code avoids the NPE now through proper checking, so this PR should be ready to go. 
#3203 Review Comments 8:
With these changes, I think the `updateViewModel` consumer can be replaced by `this::updateSelection` (or whatever the exact syntax is for these generics)
#3203 Review Comments 9:
I prefer the condensed 1-line form for javafx classes since these @FXML and @Inject tags make the code rather clumsy.... but both forms are fine with me (we should just stick to one convention).
#3203 Review Comments 10:
The GroupsTreeNode class already contains the `getMatchingGroups` method https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/groups/GroupTreeNode.java#L164, which slightly differs from this code here but is very similar in its purpose (its also matches dynamics and search groups). Thus I would propose to move the new code to a new method `GroupTreeNode::getMatchingExplicitGroups`. Moreover, please reuse `ExplicitGroup:contains` https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/groups/WordKeywordGroup.java#L105 for the group membership check.
#3203 Review Comments 11:
This was done by the IntelliJ autoformat function. I'll gladly change it back.
#3203 Review Comments 12:
Ok, I'll have a check and see what I can do.
#3203 Review Comments 13:
Ok, thanks. I'll look into these things. I added this method basically because I'm not at all an expert in the group code and didn't know about these methods.
#3203 Review Comments 14:
Done
#3203 Review Comments 15:
Moved and refactored. I kept the method name, though.
#3203 Review Comments 16:
You need to check if the `group` is an explicit group. Otherwise, removing a dynamic keyword-based group also removes the keyword from the entries that are matched by this group - this behavior is probably not what we want.
#3203 Review Comments 17:
Ok, thanks for clarifying. But then what do I do if it is a dynamic keyword group? No removal at all?
#3203 Review Comments 18:
Yes, I would just ignore every other type of group but the explicit group (or ask the user for confirmation for the removal).
#3203 Review Comments 19:
Ok, done!
--------------------------------------------------------------
#3202 Review Comments 1:
and-> an 😉 

#3202 Review Comments 2:
I think you can use method references for both getKey and getValue here:
https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html
#3202 Review Comments 3:
Please use a more descriptive variable name than s
#3202 Review Comments 4:
I think it would make sense to extract the regex to a Pattern:
https://stackoverflow.com/questions/1466959/string-replaceall-vs-matcher-replaceall-performance-differences
#3202 Review Comments 5:
For getKey yes. I couldn't get it to work for getValue tho and I'm not sure if you can use method references if more than one method is called.
--------------------------------------------------------------
#3201 Review Comments 1:
Why not renaming the parameter, too? Maybe `fieldsToComplete` would be a good name for both variables? `completeFields` is also OK for me.
#3201 Review Comments 2:
Could you quickly add a EOF newline?

https://marketplace.eclipse.org/content/editorconfig-eclipse :)
#3201 Review Comments 3:
Could you comment, why the `BibEntrySuggestionProvider()` cannot be used here? Maybe just add a comment before this line.
#3201 Review Comments 4:
Nitpick: If you rename this to `completeFields` then can you please also rename the input parameter if the constructor?
#3201 Review Comments 5:
Same as above: Please fix the method name: names -> fields
#3201 Review Comments 6:
Same as above: Please fix the method name: names -> fields
#3201 Review Comments 7:
I think, `;related;entryset` is missing here. Can you add them please? `entryset` is from biblatex.

If someone else wants to check: `FieldProperty.SINGLE_ENTRY_LINK` and `FieldProperty.MULTIPLE_ENTRY_LINK` could be possible starting points.
--------------------------------------------------------------
--------------------------------------------------------------
#3198 Review Comments 1:
No need to catch and throw - the method already throws the exception
#3198 Review Comments 2:
Indeed, you can remove the throws statement.
#3198 Review Comments 3:
I would suggest that you check for spaces using String.contains(). Then there is no need to compare strings. later.
#3198 Review Comments 4:
This is not correct. While in the english localization the key must equal the value, in all other languages the the key is different from the value.
#3198 Review Comments 5:
This looks fine, however make sure to include some spaces and quotes to make the sentence more readable
`Found an invalid character in the inlocalization ofJabRef: The pairs_processed:pairs_processed=pairs_processed contains a space! `
=>
`Found an invalid character in the 'in' localization of 'JabRef': The 'pairs_processed:pairs_processed=pairs_processed' contains a space! `

Also the error should be apparent from the message. The String above does not have a space.
#3198 Review Comments 6:
I give you push access. I'm correcting my code.
#3198 Review Comments 7:
I think it's ok now. But I didn't success to test ! It seems I don't know how to do.
#3198 Review Comments 8:
The statement must be inverted. We want the test to fail if there is a '` `' in the String.
Also, you only verify the values, but not the keys of the entry.
Just add another line where you assert that there are also no spaces in the key.
#3198 Review Comments 9:
I would suggest to make this name a bit more precise: maybe locali**z**ationTestForInvalidCharacters?
#3198 Review Comments 10:
@lynyus, I commit and push again. 
I correct the message with "At key", which seems to me more clear to find the line.
For the test : I use Junit. It find some failures

java.lang.AssertionError: Found an invalid character in the in localization of JabRef : proces_berpasangan At key : pairs_processed contains a space!

If I correct the P into Pairs_processed, it runs.

But I've got the same trouble in New_article , but I don't find why...
#3198 Review Comments 11:
Have you tried using assertFalse instead if assertTrue?
#3198 Review Comments 12:
Yes. It runs !
#3198 Review Comments 13:
Just a minor thing: if you concatenate Strings and objects (no matter which type) with` "some text " + object    `
You don't need to do an explicit call to "toString()" The method is automatically invoked. But beware, in the case where you want to call a methond on a string like the contains, you have to use the toString 


#3198 Review Comments 14:
Thank you @Siedlerchr for this explanation.
--------------------------------------------------------------
#3196 Review Comments 1:
I hate to nitpick, but could you assign more meaningful names to this and the following variable?
#3196 Review Comments 2:
I googled for that and just added it. I think, it was always broken.
#3196 Review Comments 3:
This KeyStrokeToSTring class looks really odd. I am not sure if we really need it for javafx
#3196 Review Comments 4:
Why don't you call Globals.getKeyPrefs().get(KeyBinding.AUTOMATICALLY_LINK_FILES).get()=
The get Method returns already the binding name (or the default binding, e.g. ctrl+z as an Optional<String>  so no need to rely on the KeyStroke stuff
#3196 Review Comments 5:
Did not find the method.
--------------------------------------------------------------
--------------------------------------------------------------
#3194 Review Comments 1:
Why not a real class comment? I would always use the class comments.
#3194 Review Comments 2:
Oh, wow, this code looks odd. Is JavaFX really like that?
#3194 Review Comments 3:
@koppor The null check refers to this factory function where it gets assigned
#3194 Review Comments 4:
@koppor  The BiConsumer stuff allows to do these fancy things 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3191 Review Comments 1:
It it better when you compare the list itself instead of the size, makes it easier to spot eventual errors.
So:  assertEquals(Collections.emptyList(), links)


#3191 Review Comments 2:
Please use only one assert per test, make it easier to spot erros on failing tests and I would recommend directly comparing the ParsedEntryLink: Just create a new ParsedEntrylink with the expected values and compare it. 
You may need to implement/override (or let it generate from your IDE) a toString() method, otherwise your junit test will probably fail (Encountered that recently in another project)
#3191 Review Comments 3:
What is this test useful for? When creating a java object, the object is always non-null.

Maybe, it could be check for no exceptions being thrown. Maybe add `AndNoExceptionThrown`.
#3191 Review Comments 4:
Is it possible to add a "real" test linking a "real" other entry?
#3191 Review Comments 5:
Good point, I will add another test for exceptions.

Yes, the tests concern exception handling. While trivial, they may turn out for regression tests later. In general, I would like to increase overall testcoverage of classes, then methods, then lines. 

I start with class covering, which sometimes is trival, but allows me to get used to this projects conventions. 
#3191 Review Comments 6:
I do not understand. Is a "real" other entry just a `new BibEntry()` for you?
--------------------------------------------------------------
#3188 Review Comments 1:
For me, this is too much logic in the UI. We really aim to have the logic separated from the GUI. See https://github.com/JabRef/jabref/wiki/High-Level-Documentation

It costed us much headaches to refactor JabRef and also costs us headaches now. However, this really increases testability and enables extraction of libraries.

Therefore, may I ask whether it is possible to move this logic into RenamePdfCleanup somehow? Meaning: Is it possible to get a getter for `targetFileAlreadyExsists()`?

In RenamePdfCleanup, we also have `pathsDifferOnlyByCase`, which is not respected by this code: https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java#L101


#3188 Review Comments 2:
Please do not add this new key. Please reuse `File_exists` two lines above.

In case you think, including `already` is a better fit, please rename the translation key and adapt `JabRef_en.properties` accordingly (the keys have to match there).
#3188 Review Comments 3:
We have `'%0'_exists._Overwrite_file?` in JabRef. Maybe, the code can be adapted to allow file overwrite instead of just cancelling the request?
--------------------------------------------------------------
#3187 Review Comments 1:
I'm not sure but I think `setScene` should be called in the JavaFX thread (`DefaultTaskExecutor.runInJavaFXThread`). 
#3187 Review Comments 2:
I would remove the `entry` from the constructor to make it clearer that the entry editor can be reused and is not specific to the entry.
#3187 Review Comments 3:
is `getVisibleTabName` used somewhere outside of this class? if not then it can be converted to just a field and don't need to be exposed.
#3187 Review Comments 4:
Done
#3187 Review Comments 5:
Done
#3187 Review Comments 6:
It is used in the `BasePanel` and the main table, so it needs to be visible.
--------------------------------------------------------------
--------------------------------------------------------------
#3184 Review Comments 1:
Just curious: Is this platform independent line endings? 

#3184 Review Comments 2:
Yep, I have enforced the line ending handling.
--------------------------------------------------------------
#3183 Review Comments 1:
Statt Numerale -> Ziffern?
#3183 Review Comments 2:
**Von** der Festplatte?
#3183 Review Comments 3:
BibTeX-Format?
#3183 Review Comments 4:
I found "von" and "auf" as both possible when searching for it...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3156 Review Comments 1:
Why do you introduce this private class? Why not directly add the listener to the BasePanel?

#3156 Review Comments 2:
Because there are several other listeners in `BasePanel` that are all implemented as separate classes. That way it is easier to one day extract the listeners into different files and reduce the size of `BasePanel`

Btw.: `BasePanel` currently has no closing method, so these listeners are never unregistered and are essentially a memory leak. Not too big a problem, though: A new `BasePanel` is created very rarely and the listeners are very small (another reason for the separate class at the moment).
--------------------------------------------------------------
--------------------------------------------------------------
#3154 Review Comments 1:
Can you please not use `Globals.prefs`. I really tried hard to make the JavaFX stuff free of `Globals`. You can simply pass a preference instance to the editor (similar how it is done in the OwnerEditor) and then to this method here (mabye as `new EntryValidator(preferences).configureValidation(...))`). 
#3154 Review Comments 2:
Done! Good point also, we should thrive to keep this independent from `Globals`. I even spotted one more usage in `FieldEditors` that you seem to have overlooked ;-)
--------------------------------------------------------------
--------------------------------------------------------------
#3151 Review Comments 1:
Why not removing the condition completly? Just `"John von Neumann and John Smith and Black Brown, Peter"`?

Similar comments for the other `false` checks.
#3151 Review Comments 2:
Done
--------------------------------------------------------------
--------------------------------------------------------------
#3147 Review Comments 1:
Please use meaningful names (not p, f) even in lambdas
#3147 Review Comments 2:
Same here, better name please.
#3147 Review Comments 3:
The enclosing `actionPerformed()` is a really big method. Please do some refactoring and make it smaller. The first thing would be to extract this class, at least to an inner class instead of an anonymous one. 
#3147 Review Comments 4:
And again, more meaningful names please :-)
#3147 Review Comments 5:
Why is there a blank line here?
#3147 Review Comments 6:
This is rather nitpicky, but what about extracting this into a separate class file in the same package with default visibility? You could also extract parts of `call()` into separate private methods. All this wouldn't change anything about the functionality, but it would make the code a little less chunky and more readable.
#3147 Review Comments 7:
Oops.
#3147 Review Comments 8:
I see no reason why I should extract that in a new class. It's just a single Service for one purpose.
But I think I can surely extract some private methods 
#3147 Review Comments 9:
Can you please extract the "show progress dialog" part of this method to the `DialogService` class.
#3147 Review Comments 10:
I think we never used `BibEntry` before in the user interface (it is the class name...). What about only "entry" or "item"?
#3147 Review Comments 11:
This sleep makes the whole progress of copying files really slow. I would remove it even through then the user has no chance to actually read the message for small files (but that is ok in my opinion).
#3147 Review Comments 12:
Use 
https://github.com/JabRef/jabref/blob/fae290caa38aedbea3a2d093419e5ade4e62d620/src/main/java/org/jabref/model/entry/LinkedFile.java#L131
#3147 Review Comments 13:
In my opinion, a log file is an inconvenient solution for the user. Why don't log all the errors to an internal list and display this list at the end in a new dialog?
#3147 Review Comments 14:
Please don't delete this `path` based methods. I know they are not yet used but they are actually preferable to the string or file-based methods (these should actually be deprecated).
#3147 Review Comments 15:
Do you really think that this export functionality is used that often that we should add it to the right click menu?
#3147 Review Comments 16:
One reason is that you could (and should) write tests for the `ExportService`.
#3147 Review Comments 17:
I deleted it on purpose because it is not working at all as I explained in my other PR or earlier.
It always lead to an exception. 
#3147 Review Comments 18:
It was requested by @koppor  And I think it makes sense to have it in the context menu
#3147 Review Comments 19:
Not fixed.
#3147 Review Comments 20:
maybe change the name `Result` -> `ResultItem` to make it clearer that is one item in the result window.
#3147 Review Comments 21:
Please change the file from string to path
#3147 Review Comments 22:
are these setters needed? I find an immutable solution better.
#3147 Review Comments 23:
you already have a dialog service at class level -> reuse?
#3147 Review Comments 24:
Can you please extract the result dialog to a seperate fxml file, as all the other dialogs.
#3147 Review Comments 25:
I think there is a table cell factory helper (similar to list view). If not, then I would be nice if you could create one.
#3147 Review Comments 26:
I think the log file is not superfluous with the new result dialog, isn't it?
#3147 Review Comments 27:
I'm not sure but wasn't a service intended to be reused while a task is for single work items? I think `Task` would fit better here.
#3147 Review Comments 28:
ok...
#3147 Review Comments 29:
I still like the idea of having a log file there. 
#3147 Review Comments 30:
Will do later. All other issues should be resolved now
#3147 Review Comments 31:
Yeah, I did not really know the difference 
#3147 Review Comments 32:
@tobiasdiez  How do I get the data here? Should I add a field/property to the state Manager?
This is still one of the things which freaks me out of our javafx concept and for which I can't get my head around 
#3147 Review Comments 33:
Yes, this is a bit ugly.

In the view you create an "injection context"
https://github.com/JabRef/jabref/blob/455965e931ca347e5caf91f52ded8e42cf11881c/src/main/java/org/jabref/gui/entryeditor/fileannotationtab/FileAnnotationTabView.java#L13-L22
which then injects your data directly into the controller by
https://github.com/JabRef/jabref/blob/455965e931ca347e5caf91f52ded8e42cf11881c/src/main/java/org/jabref/gui/entryeditor/fileannotationtab/FileAnnotationTabController.java#L43-L46

Finally you pass it to the view model
https://github.com/JabRef/jabref/blob/455965e931ca347e5caf91f52ded8e42cf11881c/src/main/java/org/jabref/gui/entryeditor/fileannotationtab/FileAnnotationTabController.java#L50
#3147 Review Comments 34:
you should always annotate buttons in a button bar with a proper ["button data"](https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ButtonBar.ButtonData.html), which lets JavaFX position these buttons appropriately according to the style guidelines of the current os.
#3147 Review Comments 35:
But that does only work if I have a single View and not a dialog, right?
I still find this complicated and I don't see how I can achieve this with my custom dialog. I think I will add a property to the stage manager
#3147 Review Comments 36:
I really would appreciate, if you could hook into this  PR and add the things 
#3147 Review Comments 37:
I think, as AbstractDialog derives from AbstractView, you just need to add a new constructor to the former one that relays everything to the view.

Sorry, I have enough "Baustellen" at the moment.
#3147 Review Comments 38:
@tobiasdiez  I have created this wrapper class to inject it
#3147 Review Comments 39:
@tobiasdiez  Here I am passing the instance of the object, but it doesn't display any data. 

#3147 Review Comments 40:
If I dont' intilaize the ArrayList with Empty, it will give an NPE in my View Model which leads to the conclusion that this are somehow different objects. I remember having similair problems wit the Sharelatex Integration and ended up making it static. But maybe there is another solution?
#3147 Review Comments 41:
Oh damn...thats ugly. It is not possible to directly inject the list of results?
You also hit this bug here: https://github.com/AdamBien/afterburner.fx/issues/71 this is why you need the no-arg constructor.
#3147 Review Comments 42:
I'll have a look at it later.
#3147 Review Comments 43:
The list can not be directly injected, because List is an interface which of course can not be instantiated...that's where our default injector throws an error 
I tried to add handling for list but then generics are a problem... 

#3147 Review Comments 44:
@tobiasdiez  I found the issue. The "key" of the Hashmap and the name of the with inject annotated variable differed! That's why the data was not passed correct
#3147 Review Comments 45:
With https://github.com/JabRef/jabref/pull/3334 you should be able to use `@Inject List<whatever> toBeInjected` or other complex types (they do not need to have a no-args constructor anymore). Of course the names of the "key" and the "field" have to coincide to make this work.
#3147 Review Comments 46:
I am unsure if this logfile is needed.

If it is, I would encode a timestamp into the filename to be able to distinguish several exports into the same folder.
#3147 Review Comments 47:
The terminology should be consistent. I suggest "Copy linked files to folder.."
#3147 Review Comments 48:
is there a way to prevent that fourth column appearing https://github.com/JabRef/jabref/pull/3147#issuecomment-339389635 ?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3135 Review Comments 1:
use static reference: File::toPath 
#3135 Review Comments 2:
And mabye add a comment that it has to be a File object and not a path. I remember that I fixed this before the regression  and that java only recognizes this, if it is file object;)
#3135 Review Comments 3:
Just a nitpick, but since you're already at it could you please change this variables name from `t` to someting more meaningful?

Otherwise the code looks fine.
--------------------------------------------------------------
#3128 Review Comments 1:
@koppor  This is a direct copy from the openfjx code, no modifications, Is this compatible with our license?
http://hg.openjdk.java.net/openjfx/8/master/rt/file/tip/modules/swing/src/main/java/javafx/embed/swing/InputMethodSupport.java
#3128 Review Comments 2:
No. It is GPLv2. Not compatible. However, the complete JDK has the [linking exception](https://en.wikipedia.org/wiki/GPL_linking_exception). See http://hg.openjdk.java.net/openjfx/8/master/file/b80799b32c69/LICENSE#l326.

To avoid discussions with Linux distributions, please make a separate repository `org.jabref.gui.customjfx` with the same license file, a README.md and a gradle build script. The resulting JAR is then copied into https://github.com/JabRef/jabref/tree/master/lib.
#3128 Review Comments 3:
Yeah I already thought that it will become a problem. Will do.
#3128 Review Comments 4:
Thank you!
#3128 Review Comments 5:
Project: https://github.com/JabRef/org.jabref.gui.customjfx.support
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3104 Review Comments 1:
You can actually omit the curly braces and write it as one liner:
`DefaultTaskExecutor.runInJavaFXThread(() ->  rebuildOtherFieldsTab());`
--------------------------------------------------------------
--------------------------------------------------------------
#3097 Review Comments 1:
Please add a constant for the magic number
#3097 Review Comments 2:
Done
--------------------------------------------------------------
#3096 Review Comments 1:
please define this magic number somewhere as constant
#3096 Review Comments 2:
please define this magic number as constant with a useful name, so it is clear what it does
#3096 Review Comments 3:
Regex is the same as regular expression, I would reuse that existing translation
#3096 Review Comments 4:
Can `5` be replaced by `"regex".length()``?
#3096 Review Comments 5:
I would replace the first `REMOVE_OUTER_QUOTES` by `"\"(".length()` and the second one by `")\"".length()`. Maybe as two variables `LENGTH_OF_QUOTE_AND_OPENING_BRACE` and `LENGTH_OF_CLOSING_BRACE_AND_QUOTE`.
--------------------------------------------------------------
--------------------------------------------------------------
#3094 Review Comments 1:
Use keyAdapter instead of key listener, so you don't need to have the empty method. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3089 Review Comments 1:
Can this be converted to a Lambda expression?

#3089 Review Comments 2:
According to https://stackoverflow.com/a/34424577/873282, this is not possible. The basic class has more than one abstract method (see https://github.com/google/guava/blob/master/guava/src/com/google/common/cache/CacheLoader.java#L127). 
--------------------------------------------------------------
#3085 Review Comments 1:
Checkstyle will hit you! 😈 

I think, this should be converted to an Optional, shouldn't it? Then the usual `Globals.getTelemtryClient().ifPresent(client -> client....)`
#3085 Review Comments 2:
If you have only a single method call with zero or one parameter, you can do some syntactic sugar by doing `ifPresent(TelementryClient::flush)`
just for information ;)
https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html
--------------------------------------------------------------
#3084 Review Comments 1:
This method is called in many different places
#3084 Review Comments 2:
Returning a mutable list here is ok, since the method is static anyway and thus you don't have the problem that a mutable list exposes the internal state of the object to the outside world.
However, `getFiles` is not static and only used once...

As I said above, I have no well-founded knowledge about these matters. But probably there a established conventions that we should follow here.

#3084 Review Comments 3:
It's fine in this case, because the value of the file field is only stored as a String in `BibEntry`. On calling `getFiles` the String is converted into a list, but this list is not stored in `BibEntry`, so it's not possible to compromise its internal state.

You could call this a "defensive copy", which is fine.
#3084 Review Comments 4:
I like the previous structure more (early return instead of big if), which was also more inline with typical [coding conventions](https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement).
#3084 Review Comments 5:
done

--------------------------------------------------------------
--------------------------------------------------------------
#3082 Review Comments 1:
Why don't you use the Scence Builder to create your fxml?
http://gluonhq.com/open-source/scene-builder/
#3082 Review Comments 2:
remove comment if it is resolved
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3071 Review Comments 1:
The values on the left and on the right must be equal in the English properties file
#3071 Review Comments 2:
Please no hungarian notation, so just without the prefix
#3071 Review Comments 3:
You should add a check for All Entries, because you can't delete from the All Entries group 
#3071 Review Comments 4:
You have to check the optional either with ifPresent or isPresent to see if there is a value otherwise your next line will produce an NPE if there are no groups
#3071 Review Comments 5:
I think it would be best to put this dialog in a loop, because it it confusing if you delete many entries it displays only the group information from the first entry.
It get's displayed as Optional[Group1, Group2].  
You should add a check before the dialog: (assuming you have a loop)
```java
for(BibEntry entry:  entries)
{
  if (entry.getField("groups").isPresent())
  {
    show....
  }
}
```

#3071 Review Comments 6:
@Siedlerchr Thank you for review. If it is generally acceptable, I will make some more checks.
--------------------------------------------------------------
#3070 Review Comments 1:
Do these keyboard shortcuts now work as expected?
Would be nice if they do otherwise I would prefer to keep the commented-out code.
#3070 Review Comments 2:
Ah I thought the commented code ws just obsolete. I will see if I can fix this issue, too
#3070 Review Comments 3:
I could not get them to work, so I added a TODO. This also depends on #3076  which will be out of scope for this PR
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3060 Review Comments 1:
Why synchronized here?
#3060 Review Comments 2:
Bad variable name
#3060 Review Comments 3:
Path equals file?
#3060 Review Comments 4:
other is a pretty good name for the parameter imho
#3060 Review Comments 5:
This was the bug I fixed
#3060 Review Comments 6:
Incorrect lazy initialization 
https://stackoverflow.com/a/6782690/3450689
#3060 Review Comments 7:
Refs [item 3 of effective java](https://github.com/mgp/book-notes/blob/master/effective-java-2nd-edition.markdown#item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type), doesn't it?
#3060 Review Comments 8:
I renamed it to be consistent with the other implementations we have.
And there other is used as the name of the casted instance, see the line below
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3042 Review Comments 1:
adding `+ "-fx-font-size: 20pt;"` here without any other code changes seems to do the trick.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3032 Review Comments 1:
This implementation of the MappedList looks identical to the one in the EasyBind package but is different from `MappedList.kt`. 
The mapped list from the corda package runs the `mapper` when the item is [inserted](https://github.com/corda/corda/blob/master/client/jfx/src/main/kotlin/net/corda/client/jfx/utils/MappedList.kt#L19)/updated while this implementation here invokes the `mapper` on every `get`-call. Since the `get` method is called relatively often (e.g. if you scroll in the listview), the EasyBind implementation should only be used for quick mappers. Can you please revert the change and/or write a direct reimplementation of the corda mapped list since we otherwise run again in performance problems with huge groups trees. 
#3032 Review Comments 2:
Good point, will do!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3022 Review Comments 1:
This is a very good point, and @koppor and me don't see any downside for using https. Despite that, this has nothing to do with the rest this PR, so I would like you to open another PR for this.
#3022 Review Comments 2:
Please keep this file as before and adjust your IDE settings accordingly.
#3022 Review Comments 3:
`context.getDatabasePath().get()` returns an `Optional` which you can check for being present/absent using `isPresent()`. Then you won't need a try-catch block.

Check out this page to learn the most important features of `Optional`s https://examples.javacodegeeks.com/core-java/util/optional/java-8-optional-example/
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3015 Review Comments 1:
Why don't you import this package or will it provide conflicsts with the local class named Logger?
#3015 Review Comments 2:
Guava has a method for Array concat:
https://google.github.io/guava/releases/19.0/api/docs/com/google/common/collect/ObjectArrays.html#concat(T%5B%5D,%20T%5B%5D,%20java.lang.Class)
#3015 Review Comments 3:
Stuff from Winery....
#3015 Review Comments 4:
Yes, there would be conflicts.
--------------------------------------------------------------
--------------------------------------------------------------
#3011 Review Comments 1:
, that .. it remembers

#3011 Review Comments 2:
@Siedlerchr I remember that you (Eclipse?) changed the indention of the switch statement directly in the opposite way. We should fix a style and stick to it. @koppor Any preference?
#3011 Review Comments 3:
I like the indent, but I don't know what the code quality guys say (@lenhard)
#3011 Review Comments 4:
I have no strong opinion on the indentation of the cases. Let's just do it consistently.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3005 Review Comments 1:
@tobiasdiez 
I would like to move this method and some others to the view Model, but I don't know how/or if I should expose the **selection model** of the combobox to the view model.
#3005 Review Comments 2:
@tobiasdiez  Here the binding is created, a simple list property for the combobox
#3005 Review Comments 3:
this looks good! (a one-directional binding should suffice I think since it looks like the `itemsProperty` is never changed directly.)
#3005 Review Comments 4:
You have a few options here:
1) Create a property in the view model and bind the selected item property to it, similar to the following code:
https://github.com/JabRef/jabref/blob/cbd6844183c15479ea2429d3962197e78b1494c5/src/main/java/org/jabref/gui/keyboard/KeyBindingsDialogController.java#L37-L41
But I'm not sure if using a bidirectional binding works here out of the box, probably you need to use https://github.com/JabRef/jabref/blob/bee715d03ab6fddcd48af5a5cf9e134ae458d521/src/main/java/org/jabref/gui/util/BindingsHelper.java#L75 or a similar helper method.

2) Just return the to-be-selected item from the method in the view model and then really select it here in the controller.

Option 1 is definitely the cleaner solution but maybe a bit harder to setup (but definitely worth the initial effort since a similar problem might appear in the future).
#3005 Review Comments 5:
@tobiasdiez  How do I handle such cases in javafx?  The check for a return value? Should I do a showAndWait?
 My initial idea would be to pass the UndoManager to the javafx view model (state manager? or other injection)
There are some other clases in which a similar stuff is executed which seems to a bit more complicated, e.g. the
DownloadExternalFile class 

#3005 Review Comments 6:
Good question. I think the return value should be accessed per getters of the `FileListDialogView` (this seems to be the most flexible and easiest solution - you don't need to create "Dialog return value classes" for more complex scenarios). These getters in the view should ask the view model of the dialog about the values. You can get the controller with 
https://github.com/JabRef/jabref/blob/1172ed493c6dce05fcb427b4e665f5de3a7b3fc3/src/main/java/org/jabref/gui/AbstractView.java#L45
(just change the visibility) and then the view model with
https://github.com/JabRef/jabref/blob/1172ed493c6dce05fcb427b4e665f5de3a7b3fc3/src/main/java/org/jabref/gui/AbstractController.java#L20

For parameter injection, have a look at `CopyFilesDialogView`.
#3005 Review Comments 7:
@tobiasdiez  Do you have an idea how I can store the changes to the linkedFile I made in the dialog?
I can get back a new linkedFile object but no idea how to apply the changes to the orginal obj
#3005 Review Comments 8:
It should suffice to use the setters of the old linked file (the changes should then automatically be stored in the entry; at least if the linked file is already shown in the entry editor).
#3005 Review Comments 9:
I think, there is again something wrong with the eclipse code style since almost all formatting changes in this file feel wrong.
#3005 Review Comments 10:
Yeah. I know. I am still figuring out how to get it right:
I am currently tweaking the behaviour a bit to not be so agressive
- Default indentation factor: I can only control how many spaces the new line will be indented, based on the Default space indentation (4 spaces)
#3005 Review Comments 11:
I think, I've found a solution: https://www.jetbrains.com/idea/download/ 😈 .
#3005 Review Comments 12:
None of the changes in maintable-beta is currently in the changelog. Thus, for consistency, I would say remove it for the moment and add it to the list in #3621. 
#3005 Review Comments 13:
Are the changes in this file once again one of the strange eclipse formatting rules? 
#3005 Review Comments 14:
The original button was labeled `OK` and I think this makes more sense than `Close`. Moreover, the `close` method in this class can now be removed, right?
#3005 Review Comments 15:
This should no longer be necessary.
#3005 Review Comments 16:
Do we really want to show the linked file editor dialog here? In my experience, I just click "OK" anyway and would expect that this is the case for most users (recall how long it took until somebody complained that the description was not shown in the file list). At least, I would add a preferences that controls the appearance of the dialog.
#3005 Review Comments 17:
Shouldn't the file type be guessed here based on the file extension?
#3005 Review Comments 18:
There should be constructor of `UndoableFieldChange` that directly accepts a `FieldChange`. If not, please add one and use it here.
#3005 Review Comments 19:
the convention is to not add the suffix `Property` here.
#3005 Review Comments 20:
this method should be called `selectedExternalFileTypeProperty` to adhere to JavaFX conventions
#3005 Review Comments 21:
Please extract `ExternalFileTypes.getInstance()` as a dependency (this singleton is as bad as the other Globals).
#3005 Review Comments 22:
indentation is wrong
#3005 Review Comments 23:
rename to `setExtension`? I would also add the link as a parameter to make it clear that the method guesses the extension based on the path.
#3005 Review Comments 24:
trailing comment
#3005 Review Comments 25:
`entry` is a bit unfortunate name and usually reserved for bibentries. 
#3005 Review Comments 26:
Please don't add generic methods like this! The idea was that the `PreferencesService` provides a typed interface for the preferences. Thus here it would be `set/getWorkingDirectory` with `nio.path` as argument/return value.
#3005 Review Comments 27:
Please add this file in the `java` folder and not `resource`
#3005 Review Comments 28:
You can also add `buttontypes` here in the FXML file.
#3005 Review Comments 29:
padding and layout stuff should be controlled using css and not in the fxml file.
#3005 Review Comments 30:
maxWidth = infinity ?
#3005 Review Comments 31:
The problem was that with an only OK button I was not able to close the dialog neither via the X in the corner nor via the OK button. It needs to have at least a button with Type CANCEL_CLOSE 
Read the last paragraph: https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html
#3005 Review Comments 32:
The filetype guesing happens when the EditDialog is shown 
#3005 Review Comments 33:
@tobiasdiez  this is how the indentation at column level works: As I said before it's not possible to align it at the dot position. So when I use indencation on column  all things are then wrapped after Builder (Github doesn't show it that wide).

#3005 Review Comments 34:
Previously there wasn't event he FileChooser shown .Instead it only showed the LinkedFilesEditor in which I then had to click open 
#3005 Review Comments 35:
The Problem was that the OK button was not at the Dialog Pane, but inside the content and therefore did not work
#3005 Review Comments 36:
Sorry, I wasn't clear enough. The private field should be called `link` with public methods `linkProperty()` and `get/setLink`, with the latter optional.
#3005 Review Comments 37:
Ok, then was the previous behavior even worse. What advantage do you see in displaying the dialog every time?
#3005 Review Comments 38:
You can add a description and or choose a different file. 
#3005 Review Comments 39:
If you really think that the majority of users wants to add a description, then keep the current behavior....
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#3001 Review Comments 1:
Why don't you just do registerListener(this)  and then do this? No need to create a new listener.

```java
@Subscribe 
public void listen(BibDatabaseContextChangedEvent event)
{
basePanel.markBaseChanged();
}
```

#3001 Review Comments 2:
Thanks, you are right! I started out with the intention of not making the BasePanel any bigger than necessary. That's why I added a listener class. But since this class turned out to be so dead simple, it can just as well go into BasePanel. 

I fixed this in the way you suggested.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2994 Review Comments 1:
Not your fault: I always wondered why this is an Optional, I think in this case I see no reason why it could be empty, so you are probably on the save side calling directly get.
#2994 Review Comments 2:
A little typo: fixed a bug  and please inlcude the URL behind like we do with other entries
#2994 Review Comments 3:
I think you don't have a database path if the library comes from a SQL server.
--------------------------------------------------------------
--------------------------------------------------------------
#2991 Review Comments 1:
You can direclty compare Optionals with equals, but be aware that two empty optionals also equal.
https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#equals-java.lang.Object-

#2991 Review Comments 2:
Just a very minor thing, the constant variable should be uppercase
#2991 Review Comments 3:
Yeah, I'm aware of that. That's why I first checked both to be present, and then called `.get()` on both to explicitly state that this line will only work if there is a value in the Optionals.
#2991 Review Comments 4:
Okay, good! Then it's fine
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2972 Review Comments 1:
I think it also makes sense to enable it for online links.
--------------------------------------------------------------
#2971 Review Comments 1:
Can you please encapsulate this code in a `Optional<KeyBinding> KeyPrefs#mapToKeyBinding` method that accepts a `awt.KeyEvent`.
#2971 Review Comments 2:
Do we really have to handle these events on the swing side? Does it not suffice to consume them at https://github.com/JabRef/jabref/blob/6897b10fbea02d96795a7a3812da7324c85b0855/src/main/java/org/jabref/gui/entryeditor/EntryEditor.java#L225?
#2971 Review Comments 3:
I would actually prefer it the other way around: store it in JavaFX format and replace "+" -> " " for swing since we want to completely switch to FX at some point.
#2971 Review Comments 4:
Reuse the method I suggested to introduce above.
#2971 Review Comments 5:
Yes, unfortunately. Although the event is consumed it is still catched by the swing side and executed.
 I have found no way to stop this.
#2971 Review Comments 6:
Good to know. In my opinion this is a bug in the FXPanel.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2957 Review Comments 1:
Why do we need this "constant/key" as a unique identifier if we already have an enum?
#2957 Review Comments 2:
This constant is just the name of the enum value. It is used in several cases to compare bindings and to map between the settings and the enum values dynamically. It is used in KeyBindingsRepositoriy 
I just renamed it, because "key" is ambigous in this content and always confused me.
--------------------------------------------------------------
--------------------------------------------------------------
#2943 Review Comments 1:
As a result of fixing the keybindind stuff, there now needs to be a plus sign between the modifiers and the key, otherwise it may not be recognized correctly.
Otherwise the code looks good, thanks for your contribution
#2943 Review Comments 2:
@Siedlerchr Thanks for the correction~ I've added the sign.
#2943 Review Comments 3:
I don't understand these changes: you first add the download action but then clear the list right after.
#2943 Review Comments 4:
@tobiasdiez sorry for the confusion and thanks for the note. I misunderstood something while doing try and error. I've reverted the changes.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2934 Review Comments 1:
Please rename this method to `pagePrefix` and make it private.
#2934 Review Comments 2:
@tobiasdiez Thanks a lot for your comments. I've revised the file as commented above.
#2934 Review Comments 3:
It is better if you extract the regex to a constant pattern, by using Pattern.compile  , have a look at the titleChecker (logic.integrity package ) class, to see how it's done.
This construct compiles the regex and makes it faster when it is called multiple times 
#2934 Review Comments 4:
@Siedlerchr Thanks a lot for the comment. It would be very useful to me. I've found the same comment [here](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html).

> though for repeated matches it is less efficient since it does not allow the compiled pattern to be reused. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2895 Review Comments 1:
Would it make sense to add it as Greek(...) or you remove the non-english name to stay consistent with Chinese, Japanese...
--------------------------------------------------------------
--------------------------------------------------------------
#2892 Review Comments 1:
What about this TODO? This shouldn't be merged as long as the PR still breaks the feature.
#2892 Review Comments 2:
Same here and at a few positions below. This looks like you are removing a few features including content selectors (again)?
#2892 Review Comments 3:
Just a note: The auto completer is broken and therefore it is one of the few features that is fine to go.
#2892 Review Comments 4:
Very minor, but please add a blank between the class declaration and the method.
#2892 Review Comments 5:
This todo is quite important
#2892 Review Comments 6:
The content selector feature is not yet reimplemented in the new FX entry editor and this PR doesn't change anything in this respect. The purpose of this particular code line was to update the content selectors in the editor if the user changes them. But since content editors are currently not enabled, I can't say which is the best way to reimplement the update functionality.
#2892 Review Comments 7:
I actually didn't change anything here in this PR (github just marks the whole file as changed since it was renamed).
#2892 Review Comments 8:
done
#2892 Review Comments 9:
Ok, I get it. If this is just a false marking by github and the TODOs have been there before, then this can just move forward.

However, we need to be sure that we do not release 4.0 without content selectors. Should we open an issue for this? Or will you keep this in mind and open a PR at some point?
#2892 Review Comments 10:
You could rewrite this to streams, using entrySet().stream() 
#2892 Review Comments 11:
Same as aboe
#2892 Review Comments 12:
Agreed. The entry editor specific key bindings are now activated again and they work as expected. There are still issues with the key bindings, especially when it comes to more global ones - but this is already tracked as https://github.com/JabRef/jabref/issues/2855.
#2892 Review Comments 13:
I have this in mind. I plan to implement content selectors along with auto-completion in one of the next PRs (as soon as the big problems are resolved).
#2892 Review Comments 14:
You mean as entrySet().stream().foreach(...) ? I really like the old-style for loop more when it comes to a complicated body and find foreach only preferable when calling one method.
#2892 Review Comments 15:
No, I thought about directly applying the 

> internalBibtexFields.isDisplayableField(fieldName) && !newEntry.hasField(fieldName)
as filter option in the stream and then applying anyMatch()
So: 

entry.getFieldMap().entrySet().stream().filter(field->InternalBibtexFields.isDisplayableField(field.gett )
https://www.mkyong.com/java8/java-8-filter-a-map-examples/

But now I see it may not make sense
#2892 Review Comments 16:
Ah ok, that would be possible yes. Since this is only a slight improvement, I will leave the for-loop for now.
--------------------------------------------------------------
--------------------------------------------------------------
#2889 Review Comments 1:
Suggestion: Improve wording to make clear that now HTTPS is used to protect the privacy of the user.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2878 Review Comments 1:
I don't know how likely it is, but just to be sure you should change it to "Link".equals...  otherwise there might be a potenial NPE
#2878 Review Comments 2:
Good point, should not be the case, but that pdfbox library is really not to be trusted....
#2878 Review Comments 3:
An alternative and simpler solution would be to use Enum.valueOf... to parse the String. If it throws an Illegal Argument exception you simply return false...
Otherwise I would omit the loop and directly add a second filter Argument to the strea, and use anyMatch to return a boolean 

#2878 Review Comments 4:
And I don't understand why you wrap the Array in a list again 
#2878 Review Comments 5:
good idea. fixed in b9ddbc4e7666598efc0e92ac08303972d1d78ce8
--------------------------------------------------------------
--------------------------------------------------------------
#2876 Review Comments 1:
It seems that something went wrong when merging the language file here? Why is there a file header? Also, why are some of the localizations removed?
#2876 Review Comments 2:
Should we drop a hint here what the expected format actually is? Otherwise, the user might be left wondering what he should do to fix the warning.
#2876 Review Comments 3:
I agree that the error message is not very detailed and leaves room for interpretation. However, since the check issues are reported in table form a very concise error message is required. Thus for now I don't see an easy way to improve it.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2862 Review Comments 1:
Instead of using null strings, I would prefer if you use the `ifPresent` method (since we probably don't want to add fields with null as value anyway).
#2862 Review Comments 2:
I don't like that null is a valid argument. We try to get rid of null values and should be consistent here. Either way, `if(StringUtil.isBlank(dateString)) return Optional.empty();` is probably preferable. 
#2862 Review Comments 3:
The null values are an indicator that no value is present, and in this case it is consistent to the rest of the code. In the addField method there is already a  check ` if( value == null ) return `

#2862 Review Comments 4:
Either we do a Objects.requireNonNull and leave the checking to the caller, or we use this isBlank Method. Currently it will throw an NPE from the TemporalAccessor.parse method if null is passed.
#2862 Review Comments 5:
Well, I also don't like the rest of the code exactly for this reason. But instead of rewriting everything I would vote for an incremental improvement and since you already converted parts to use optionals... (By the way, BibEntry has the distinction between setField and clearField precisely on similar grounds.)
#2862 Review Comments 6:
+1 for throwing NPE to be consistent with the TemporalAccesor.parse method. 
--------------------------------------------------------------
#2861 Review Comments 1:
Can you please use `FieldName.URL` instead of `"url"`. Moreover, add a space after the comma.
#2861 Review Comments 2:
@tobiasdiez I've revised the file as you commented. Thanks for your comment- 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2845 Review Comments 1:
Can we remove all that commented-out code? Is there a reason why it exists?
#2845 Review Comments 2:
Same here. Why is there so much commented-out code?
#2845 Review Comments 3:
There is commented-out code in this method and if I see it correctly, `ce` is never used. So please delete this variable.
#2845 Review Comments 4:
Please use a speaking variable name instead of `md`.
#2845 Review Comments 5:
Please use a speaking variable name instead of `ds`.
#2845 Review Comments 6:
Please use a speaking variable name instead of `pr`.
#2845 Review Comments 7:
You get the clue about variable names, right? :-)
#2845 Review Comments 8:
These points are reminders for smaller things that worked in the Swing version but are not yet implemented in JavaFX. They mostly are concerned with the undo/redo functionality. 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2840 Review Comments 1:
I assume this TODO is legacy and not coming from the current PR, right?
#2840 Review Comments 2:
Related to the comment above: I would prefer it very much to remove the commented-out code here directly. Way back in time when JabRef was still full of such stuff, we decided to remove commented-out code.
#2840 Review Comments 3:
Ok that policy is very understandable. In the current case, I'm not sure if we really should remove it. The "jump to entry" feature was present in previous versions and this PR removes it (temporarily). I don't see a nice way to re-implement it right now as we have no good interface to control the focus of the main table (I really don't want to directly use the `JabRefFrame` class). But removing the comment here and above results also in a change of the language files and the "Jump to entry" string has to be readded by the translators at some point in the future. 

Should I still remove it? I don't have a strong opinion about it.
#2840 Review Comments 4:
I see. It would be better to keep it in the language file. Thus, I would say it is ok to keep the code, but please extend the explanation, so that we know that this is not just the legacy stuff. Be verbose (no-problem with a multi-line comment) and explain the rationale and why it's problematic to re-add the code, like in you comment here.
#2840 Review Comments 5:
Done
--------------------------------------------------------------
#2838 Review Comments 1:
@koppor what is your opinion about these code style related changes?
#2838 Review Comments 2:
I think we changed it to `-bin` on purpose...don't remember the details through. What is the reason for this change?
#2838 Review Comments 3:
In my opinion the `readPdfContents` should just return an empty document (maybe `Optional<Document>`?) if the file field is not present. Makes the class a bit easier to use and there might be more reasons why a straightforward reading of the file is not possible (encrypted, not found, permission error etc). 
#2838 Review Comments 4:
The format of the files field is more complicated than a simple file path. In the end it contains a list of [linked files](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/entry/LinkedFile.java). You can get the list of linked files using `BibEntry.getFiles()`.
#2838 Review Comments 5:
Maybe we should use the metadata from the BibEntry? Not sure what the purpose of these information is. 
#2838 Review Comments 6:
There is a method in StringUtils for this (isNotBlank I think).
#2838 Review Comments 7:
If not already done, please also add it to the libraries.txt
#2838 Review Comments 8:
This is a bit weird, with the isEmpty 
The Objects.requireNonNull will throw an NPE if the field is null. And you can omit the second parameter.
This is a breaking condition. So afterwards you can safely assume that searchString is not null
#2838 Review Comments 9:
I think you don't need to mock the BibEntry class, you can normally use it and then just call addField(...) or similar
#2838 Review Comments 10:
Wouldn't it make sense to compare two Document-objects? (Needs an equals method then)
e.g. Document expected = new Document(....)
#2838 Review Comments 11:
Same as above, you don't need to mock them
You only need to mock classes which operate on preferences 
#2838 Review Comments 12:
My IntellJ keeps reverting this to `all` all the time. Seems like in one commit I forgot to disable it. :/
#2838 Review Comments 13:
I would argue against that. After all indexing is a background task and if the reading the PDF fails it is worth throwing an exception instead of returning any useless value which will not be used anywhere.
#2838 Review Comments 14:
Well, I think the keywords field can be very useful. The others are probably redundant with the bibEntry. Generally, I will think about if it makes sense to incorporate bibtex fields into the lucene search.
#2838 Review Comments 15:
Well, the question is if this is supposed to be a unit or an integration test.
I have decided to write a unit test here to test the DocumentReader and ONLY the DocumentReader.

Of course in this test the difference to a small integration test is not much. Would propose to keep it like that and add further integration tests soon.
#2838 Review Comments 16:
The Document is a Lucene class.
#2838 Review Comments 17:
Uhm yes. Will change that and write some integration tests.
#2838 Review Comments 18:
done
--------------------------------------------------------------
#2836 Review Comments 1:
@koppor  Does this cause any problems?
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2826 Review Comments 1:
I think it would be clearer if you just add a 
````
if (filename.isEmpty())
    return directory;
````
statement. 
#2826 Review Comments 2:
Will do that.
The failing tests are still somehow weird as locally the run through partly.. I still think there's something with the prefs which has some dubious side effects 
--------------------------------------------------------------
--------------------------------------------------------------
#2819 Review Comments 1:
"Reiter" nur i.d. Deutschen Übersetzung? In den anderen? 😱
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2809 Review Comments 1:
Why do you pass null? Is this a jframe parameter?
#2809 Review Comments 2:
No the parameter is just the "Swing event" and this is also not used in the action, so it is safe to pass null.
--------------------------------------------------------------
#2798 Review Comments 1:
There is a method I once crated: getFirstFileDirectory (or similar) which exactly does this. I think it is in databaseContext, too
#2798 Review Comments 2:
Be careful about this, you probably want to use toString.startswith dir.toString
http://stackoverflow.com/questions/30157072/why-is-path-startswith-behaviour-different-from-a-string-startswith-operatio
#2798 Review Comments 3:
Add this comment please to the method above where you check for the isEmpty
#2798 Review Comments 4:
This is the method I was refereing to earlier 
#2798 Review Comments 5:
getFirstExistingFileDirectory is the name of the method
#2798 Review Comments 6:
Thanks, I changed the code to use the other method now.
#2798 Review Comments 7:
I really want to check that the `file` is a subpath of `dir`, so I think this is fine.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2793 Review Comments 1:
Maybe you can separate this into three test. One for a single author, one for two and the last for N multiples.
#2793 Review Comments 2:
Please separate to multiple tests as suggested above. One for each test case.
#2793 Review Comments 3:
Please add a reference to the fixed issue (see the changelog entries below).
#2793 Review Comments 4:
It is probably better to replace the assertTrue with something like `assertEquals("mykey1; title1; Someone, Van Something", lines.get(1))`
#2793 Review Comments 5:
Should I move this entry to the section Fixed or keep it under Changes?
#2793 Review Comments 6:
You can leave it there for the moment. Before a new version release we usually check and reorder the changelog 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2778 Review Comments 1:
I think we normally called such methods simply `parse` since the rest should be clear from the class name. But you can leave it also like that.
#2778 Review Comments 2:
Please put the logger attribute directly under the enum declaration.
#2778 Review Comments 3:
Obsolete line?!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2767 Review Comments 1:
Just a general remark: is your IDE breaking all these lines? If I remember correctly, we said that we don't need a hard wrap at x characters because modern screens are relatively wide.
#2767 Review Comments 2:
I'm always confused by this: is `Path.toString` or `Path.toAbsolutePath.toString` the correct replacement for `File.getPath`?
#2767 Review Comments 3:
I think it save to replace the `null` check with `Objects.requireNonNull`
#2767 Review Comments 4:
̀ fileName` is a bit irritating name here since it is actually the directory name.
#2767 Review Comments 5:
Introduce an overload of `loadDatabase` that accepts a path?
#2767 Review Comments 6:
`getParent` or `toString`?
#2767 Review Comments 7:
Is the default Eclipse setting, Maximum line width of 120 chars 
#2767 Review Comments 8:
I am not always sure, either. In theory toString should be enough. But sometimes it's necessary to call toAbsolutePath before, to really ensure that the file path is correct handled by the OS 
#2767 Review Comments 9:
Changed that
#2767 Review Comments 10:
In this case I wanted to use getFileName
#2767 Review Comments 11:
Just disable it please.
#2767 Review Comments 12:
Done. And I create a new PR so that it is included in the gradle command
--------------------------------------------------------------
#2765 Review Comments 1:
I don't see why there should be a blank line
#2765 Review Comments 2:
The latest version is already 7.6.1.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2754 Review Comments 1:
Why not ignoring the whole test class?
#2754 Review Comments 2:
I wonder why some methods became package-private
#2754 Review Comments 3:
Maybe some cleanup action on saving?
#2754 Review Comments 4:
These methods should not be called directly, but only by the TaskExecutor. 
#2754 Review Comments 5:
The problem is these tests don't compile anymore (TextArea no longer gives access to the highlighter). I marked it now as a todo for later.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2747 Review Comments 1:
This and the two others are shared database ones. See https://github.com/JabRef/jabref/pull/2748.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2744 Review Comments 1:
I'm not sure about the fallback to the user directory and would have just encapsulated everything in an `if (parentPath != null)` statemant. @Siedlerchr what do you think?
#2744 Review Comments 2:
I think it is preferable to use [temporary folder rule of junit](http://junit.org/junit4/javadoc/4.12/org/junit/rules/TemporaryFolder.html) here, so that the test files are automatically deleted afterwards.
#2744 Review Comments 3:
This rule is not used, right?
#2744 Review Comments 4:
please use assertEquals so that you get a better error message in case the test fails. For the same reason, `assertEquals(Collections.singletonList(expected item), actual list)` is the preferred way for lists.
#2744 Review Comments 5:
We do not use `assert` statements in our code. We always do `Objects.requireNonNull(...)`. Is it possible to change that?
#2744 Review Comments 6:
Can you adjust formatting? In JabRef we do `if (...) {`
#2744 Review Comments 7:
Not sure whether that helps: The directory lookup is explained at https://github.com/JabRef/jabref/pull/459#issuecomment-161817966. The addition to help is still a TODO (https://github.com/JabRef/help.jabref.org/issues/160).

I also wait for @Siedlerchr s feedback 😇 
#2744 Review Comments 8:
As I understand, it "Returns a rule that expects no exception to be thrown" (http://junit.org/junit4/javadoc/latest/org/junit/rules/ExpectedException.html). Although this is the default behaviour, it explicitly states that these tests MUST NOT through an exception, since this is what we test for. The same construct is used in BibDatabaseTest.java, and make IMHO the intent of the test more explicit and easier to read. I suggest leaving it.
#2744 Review Comments 9:
The directory named in the 'currentWorkingDir' value is not intended to hold any created files; actually, these tests should not create any files (I'll double check that).

The  'currentWorkingDir' variable is used to re-create the part of the JabRef internal state that we get when the 'jabref biblio.bib' command is invoked from a command line (on Unix/Linux, but I guess on Windows clones as well). Since the directory is different on various computers that invoke the test, I can not hard-code it into the test but must determine it at run-time.

Should I comment this in the code, or find a better name for the 'currentWorkingDir' variable?
#2744 Review Comments 10:
Fixed in e56e68c. Sorry, I've overlooked that (and Eclipse overlooked it as well ;)
#2744 Review Comments 11:
+1 for commenting in the code.
#2744 Review Comments 12:
Hi, folks, thank you for the comments!
I think the 
    if (parentPath != null){parentPath = Paths.get(System.getProperty("user.dir"));}

fix is essential. It expresses a usual Unix/Windows CLI convention that invoking "jabref biblio.bib" is actually equivalent to "jabref ./biblio.bib" and "jabref $(pwd)/biblio.bib". Without this fix, running "jabref biblio.bib" and clicking the "Get fulltext" button in the "General" tab throws a "null pointer exception" in the searcher thread, and the main GUI thread just "hangs" forever without yielding any results (and without any error messages...). IMHO, this is a show stopper.

With the suggested fix, JabRef behaves as most users would expect -- it reads 'biblio.bib' in the current directory, and, if a database directory has to be used as a base for searching files, it uses the same current directory as a 'biblio.bib' base. Please note that when the directory is specified explicitely, as in 'jabref ~/papers/bibliography.bib', this workaround is not used.

The behaviour of the fix is totally orthogonal to the policies in https://github.com/JabRef/jabref/pull/459#issuecomment-161817966: if any other policy of determining a search directory is used, the fix is inactive; also, when a database has explicit directory name, it is inactive as well. It is only when the directory *is not* specified that I suggest using System.getProperty("user.dir"); BTW, this seems to be the same policy as used when opening a database for the command 'jabref biblio.bib'.
#2744 Review Comments 13:
You are right. assertEquals(Collections.singletonList(... will check also the length of the list. Fixed.
#2744 Review Comments 14:
Sure it is :). IMHO, assert seems a bit more applicable here, since I see asserts intended for developers, and Objects.requireNonNull() will probably end up with the message for the end user.
The assert statements are off by default but can be switched on 'in the field', unless the they were deliberately optimised away. As I understand, Objects.requireNonNull() will be always on and will always run. If this is what your policy is, I can change it, for sure.
#2744 Review Comments 15:
Fixed 'asserts' in the ee4e023 commit.
#2744 Review Comments 16:
Checked: the tests do not leave the 'biblio.bib' file behind. The File object, as I understand, holds an abstract system-independent path to a file, but does not open or create the file unless exlicitely requested.
#2744 Review Comments 17:
> +1 for commenting in the code.

Commenting the use of the variables in the test.
#2744 Review Comments 18:
Please use the methods of the Paths  class. You can then just call Paths.get(dbDirectory).resolve("bib")
#2744 Review Comments 19:
You can influence the fileDirectoryPreferences by mocking them, otherwise you always depend on the the settings of the user and can't have a reliable value to test.
In the CleanupTests for Renaming/Moving Files I mocked the relevant options like this:
`  fileDirPrefs = mock(FileDirectoryPreferences.class);
        when(fileDirPrefs.isBibLocationAsPrimary()).thenReturn(false); `

Have a look at `MoveFilesCleanupTest `

#2744 Review Comments 20:
And here also please use Paths.get().toFile()
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2740 Review Comments 1:
Keiner
#2740 Review Comments 2:
Würde es auch im deutschen bei Review belassen. Gutachten klingt zu formal...
#2740 Review Comments 3:
Nur 'IEEE-Liste' ?
#2740 Review Comments 4:
Typo
#2740 Review Comments 5:
Teile klein, Komma vor um 
#2740 Review Comments 6:
Typo Statistiken, Ihrer groß
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2732 Review Comments 1:
I think we never used comments to indicate the name of the argument and thus would prefer that you remove them.
#2732 Review Comments 2:
Use remove the unused variable completely.
#2732 Review Comments 3:
Agreed, this var will probably never be needed.
#2732 Review Comments 4:
Hmmm, indicating “Named Function Parameter” Comments is a recommended practice from the Dustin Boswell, Trevor Foucher "The Art of Readable Code", for languages that do not support named parameters. I personally find such code easier to read. But if this is not used on JabRef and you do not find them useful, then, sure, please just remove them. Should I make the requested changes and recommit, or will you handle these issues?
#2732 Review Comments 5:
Yes please, IntelliJ automatically displays the parameter names. 
![parameter_names](https://cloud.githubusercontent.com/assets/1254003/25013947/0f762be8-2076-11e7-8699-e3e49089058e.png)

#2732 Review Comments 6:
OK, both issues fixed, please find a new push.
--------------------------------------------------------------
#2731 Review Comments 1:
Theoretically we should support all allowed date formats from biblatex: EDTF format
2.3.8 Date and Time Specifications
A while ago I looked into that and found that there is no easy way to support all in java. 
#2731 Review Comments 2:
With the JAVA 8 Date Time changes, month now are 1-12 and no longer 0-11
#2731 Review Comments 3:
I have moved this into issue #2753
#2731 Review Comments 4:
Isn't `month = mar` the correct format for BibTex?!
#2731 Review Comments 5:
It's only, because many styles define the string `mar`. At least this is what I read from the discussion at https://tex.stackexchange.com/q/70455/9075.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2723 Review Comments 1:
Can you add a JavaDoc comment why you implemented that method on your own instead of using [Files.getFileExtension(fileName);](http://stackoverflow.com/a/15985486/873282)? We have the Guava libraries and should use them 😇 
#2723 Review Comments 2:
Can you add a JavaDoc why this method is public? The other below is private, I miss the symmetry.
#2723 Review Comments 3:
Why not `Collections.emptyList()`?
#2723 Review Comments 4:
Could you add a JavaDoc stating the intension and usage of this class? Also, why no TypedBibEntry is required anymore?
#2723 Review Comments 5:
I thik he just moved the method, we previously had it in FileUtils
#2723 Review Comments 6:
Why did you change the logic here?` Previously it was ! present 
#2723 Review Comments 7:
A better variable name would be nice
#2723 Review Comments 8:
We nevertheless could use Guava 😇 
#2723 Review Comments 9:
Our code is slightly different (extensions are required to have at length > 1) and uses optional instead of empty strings. Thus I think it is not worth using Guava (maybe we can even remove the dependency on guava at some point).
#2723 Review Comments 10:
It is public because it is used somewhere else. You are probably right and this method should be private, but I have no idea what "FileListTableModel" does....
#2723 Review Comments 11:
done

#2723 Review Comments 12:
Of course I can. 
#2723 Review Comments 13:
Nice catch! Was probably a copy&paste error on my side. Fixed
#2723 Review Comments 14:
Yep

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2711 Review Comments 1:
typo: to Latex during the Latex to Unicode cconversion ;)

#2711 Review Comments 2:
Can you please split the test into two tests and convert your comments into nice test names 😸 
#2711 Review Comments 3:
Fixed
#2711 Review Comments 4:
Of course I can ;-)
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2706 Review Comments 1:
I actually prefer these export methods that take the file as a `Path` instead of string. 
#2706 Review Comments 2:
Maybe "Export linked files" as name? not sure.
#2706 Review Comments 3:
Yeah, I wanted to use it, too. However, the method with that signature never gets called which led to an NPE.
In ExportAction only the one with String is called.

#2706 Review Comments 4:
Maybe change `ExpoortAction` then? For now the `Path` method can be implemented as `default` and invoking the stringy one.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2703 Review Comments 1:
I know this is convenient, but I am strongly against it. We do not want the model to be dependent on a GUI technology. If you want this conversion to be done based on `ObservableList`, it will have to be done elsewhere.
#2703 Review Comments 2:
Again, no javafx in model
#2703 Review Comments 3:
I agree that we don't want to have GUI technology in our model and logic classes. However, these observable lists and properties have nothing to do with the GUI-related part of JavaFX - you can use them in a command line application if you want. An observable list is just a list with some built-in event listeners, i.e. a different form of List combined with the google event stuff. Similar the properties in in `javafx.beans` are just fields with event handlers.

Thus I strongly vote for allowing `javafx.collections` and `beans` in model and logic.
#2703 Review Comments 4:
Decision in devcall: make exception for `javafx.collections.*`
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2692 Review Comments 1:
The header still days GPL
#2692 Review Comments 2:
Good catch! Some of the code was written in an era, when such copyright notices were still included 😄 
#2692 Review Comments 3:
This is an architectural violation. Please reverse it: The conversion of `ParsedFileField` to a Path should be moved to `FileUtil`
#2692 Review Comments 4:
May I also put `FileUtil` in `model` since it is our abstraction of the `File` object? Reason: I really want the `ParsedFileField` to have a method that returns the path to the linked file. There are around 15 places where `expandFilename` is used upon `ParsedFileField::getLink` and all of them could be replaced by the new `toPath` method.
#2692 Review Comments 5:
The thing is, `FileUtil` has more dependencies to logic classes, which would then also need to move to model. At some point, the distinction between the two packages would be completely lost.

Can't you just add a method `public static Path getPath(ParsedFileField fileField)` to `FileUtil` instead? Not much better than the current version, I know, but at least a little. Alternatively, extract the methods you need, and just those, into a new `FileUtil` class in model (maybe with a better name). It wouldn't hurt to break up these util classes into more meaningful smaller units. They all devolve into god classes...
#2692 Review Comments 6:
I moved the method to FileUtil as you proposed and will open a new PR with the refactoring since it turned out to be a bit more extensive than I have expected.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2669 Review Comments 1:
Can the last condition be extracted into a variable?
--------------------------------------------------------------
--------------------------------------------------------------
#2666 Review Comments 1:
Please leave the formatting as it is right now. It is kind of a JavaFX-thing that normally the @FXML tag is on the same line (and I like it that way because otherwise the private fields declaration takes more space)
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2650 Review Comments 1:
With this statement you are creating a dependency from this relatively independent class to the gui package. I really do not like this. I think the shutting down of the gui-related `taskExecutor` should not happen in this class, especially since this one line is really the only position where it interacts with `JabRefExecutorService`. This is not cohesive.
#2650 Review Comments 2:
`Globals` is a class I would like to see only go down in size, but I see that the thread pool has to be managed somewhere. I would suggest to add a method here that shuts down everything, the GUI-independent thread pools and this GUI-dependent thread pool and to call this method form `JabRefMain` instead of the current code.
#2650 Review Comments 3:
This seems little, but is very important: Please rename the method `run()` in `BackgroundTask` to something else, suggestion: `wrap()`. `run()` has a very specific meaning in parallel Java code and by just looking at this code here, I thought: "This code runs a task not in parallel, but on the calling thread". And this is not at all what this code does. It just wraps a `Callable` as a `BackgroundTask`, execution comes later. The name should reflect that.
#2650 Review Comments 4:
Since this is about gui-related task, I assume it would be ok to try to kill them when shutting down instead of waiting until they are finished. Therefore, you should use `shutdownNow()` here, which will interrupt tasks that are executing at the moment of the invocation of the method.
#2650 Review Comments 5:
This code is probably the reason why we are experienced performance issues when importing entries to larger DBs. Maybe we can find a better way for this check, but this does not have to be part of the current PR.
#2650 Review Comments 6:
I'm not sure that this is really code is really the problem - `containsEntryWithId` is just a lookup in a relatively small (< 10.000) hashset. I have the feeling that our logic and model code is quite optimized or at least performs reasonable well but there are some problems with GUI code (e.g. adding 10 entries at the same time leads to 10 separate redraws of the maintable).
--------------------------------------------------------------
#2649 Review Comments 1:
I doubt that this is useful here. I am sure Export Action is somewhere called 
#2649 Review Comments 2:
I just had a look at that. `ExportAction` is indeed instantiated in `org.jabref.gui.preftabs.PreferencesDialog`, but that class has its own `ExportAction` class in it. `PreferencesDialog` also has no import for `org.jabref.gui.exporter.ExportAction`, so the instantiation is most likely an instantiation of the inner class.
#2649 Review Comments 3:
Ah okay, good to know, seems like they are different exportActions here. 
Some time ago I was working with these action classes and therefore was just crurious.
--------------------------------------------------------------
--------------------------------------------------------------
#2645 Review Comments 1:
For me an identifier is independent from the entry. org.jabref.model.identifier.ISSN
#2645 Review Comments 2:
To be honest, the hierarchy of interfaces etc. has gotten way to complicated for the fetchers. I think its really hard to get an idea whats happening right now. With this PR it even got harder to keep track.
#2645 Review Comments 3:
And I'm saying this having written a lot of fetcher code back then
#2645 Review Comments 4:
Sometimes the use of optional is a bit inconvenient and redundant but for me these helper methods add additional complexity and twist my head while reading the code.
#2645 Review Comments 5:
Mhhh....

- IdFetcher: gets an ID for a BibEntry
- EntryBased: gets more information for a BibEntry
- SearchBased: gets BibEntries based on a free-text search query
- IdBased: gets a BibEntry from an identifier

I'm not sure how to simplify this. These interfaces each cover different aspects and not all fetcher have all the capabilities. Do you have any suggestions?
#2645 Review Comments 6:
Well, these are not all interfaces as there are the ...Parser... interfaces, the WebFetcher, the FullTextFetcher etc. so in total this is really complex at the moment... 
Maybe a better solution would be to reuse the parsing logic by composition instead of introducing further interfaces?
#2645 Review Comments 7:
Instead of the ...Parser...interfaces, I could imagine a syntax similar to 
````java
Optional<BibEntry> performSearchById(String identifier) throws FetcherException {
    return FetcherBuilder.invoke(getURLForID(identifier))
                         .parse(this::getParser)
                         .cleanup(this::doPostCleanup)
                         .fetchSingle();
````
What do you think?

(Anyway, the aim of this PR was to add a single fetcher not to refactor everything)
#2645 Review Comments 8:
My opinion on this:  Don't combine all interfaces to a single one. The purpose of an Interface is to provide specific methods/behaviour. 
If one **concrete** fetcher has multiple behavior, e.g. can fetch IDs as well as FullText, it should implement both interfaces.

Example:
 ```
MycombinedFetcher implements IDBasedFetcher, FullTextFetcher
 public String getFullText()
 public string getEntryFromID()
```


#2645 Review Comments 9:
I mean you obviously worked a lot on this, so it is not easy to give a good suggestion. I'll try to take a look on this in the next days. If I am not able to come up with a good solution we will keep it the way it is.
#2645 Review Comments 10:
I have put it there since other identifiers (ArXiv and MathSciNet) as well as other "field type classes" like month, authors and keywords are also placed there.
#2645 Review Comments 11:
I would be very happy if you find a solution where the ...Parser ... interfaces are not needed. I never really liked them. I'll merge this PR now but will have course help to rewrite the fetchers once you found a nice solution.
#2645 Review Comments 12:
I also don't really like them but still found them more readable than the inlined code. I will keep them for the moment but feel free to remove them if you really dislike.
--------------------------------------------------------------
#2644 Review Comments 1:
You can directly use Stream.of (...) here..
#2644 Review Comments 2:
You Can easily switch to the new dialog service, you just need to call the show function using the executor util function runinjavafxthread 

#2644 Review Comments 3:
Same as above, 
#2644 Review Comments 4:
I think Files.find or Files.walk can be used here as well, because a path can also be a directory

#2644 Review Comments 5:
Or even better use a DirectoryStream:
http://howtodoinjava.com/best-practices/java-8-list-all-files-example/
https://docs.oracle.com/javase/8/docs/api/java/nio/file/DirectoryStream.html
#2644 Review Comments 6:
Yeah I tried all of these. Seems more code and edge cases handling than the current one, e.g. filter only directories catch IOExceptions...
#2644 Review Comments 7:
Can I already use these dialogs for selecting directories only? Looks like they can only be configured as file dialogs.
#2644 Review Comments 8:
We need a DirectoryChooser there as it seems.
#2644 Review Comments 9:
Ah, I see in javafx they introduced a DirectoryChooser, which we not yet cover.
However,  in the meantime you could use our FileDialog.class (it shows the native file dialogs as well, which supports showing a direcotry)
--------------------------------------------------------------
--------------------------------------------------------------
#2640 Review Comments 1:
maybe change to Logger.debug?
#2640 Review Comments 2:
it is preferable to check versus an empty list: `assertEquals(Collections.emptyList(), annotations)`. In the case, when the test fails you get a more helpful error message.
#2640 Review Comments 3:
As above, check versus an expected list:
`FileAnnotation expected = new .....` and `assertEquals(Collections.singletonList(expected), annotations))`
#2640 Review Comments 4:
Why does the content is first localized and then delocalized again?! I just don't understand this part of the code.
#2640 Review Comments 5:
This is not so useful, as a FileAnnotation is a quite complex class (especially if it has a linkedAnnotation) and some fields are just not of interest for the tests. I would suggest to leave it as it is. Furthermore, the message from JUnit is more helpful if I check each field separately.,
#2640 Review Comments 6:
fixed in c4aed22921514b9998976d5057d74b5fc4e7a9ab
#2640 Review Comments 7:
Well, the localization must be done where the class is used instead of the model.
As I introduced more annotation types like underline annotations or polygons, I ran out of symbols for the icon in the annotationList, thus, I have prepended the type of the marking to the title of the marking in the list, so that the user is aware what type of annotation it is.
However, in the actual content field this should not be there any more, as it is shown in the label in front of the TextArea.
#2640 Review Comments 8:
fixed in 2894c9ec561cb3476a646fc13b0b55c5625a0c5a
#2640 Review Comments 9:
Use file.toPath() directly

#2640 Review Comments 10:
You should change the order of equals, the constant first and then the annotation.getsubType as it theoretically could ne null and would result in an NPE.
#2640 Review Comments 11:
Sorry, that sounds really complex.
Why don't you just pass the name of the type to the GUI and then add the translation there?
#2640 Review Comments 12:
Is/Can FileAnnotation be made an enum?
#2640 Review Comments 13:
The junit message would show the objects values for exepcted vs actual as it is done in the fetchers or importers for example.
So you can directly compare them and see any differences, here you would get only Expected 1 actual 0 in case a test would fail -> Not helpful
#2640 Review Comments 14:
same as above
#2640 Review Comments 15:
Hm. After @tobiasdiez comment I have tried it already but the message is: (see 8ed6abf1a9a3a486f7d62b84e153b1a14130c18d)
```
java.lang.AssertionError: Comparison fails. WHY? expected: java.util.Collections$SingletonList<[inline note annotation]> but was: java.util.LinkedList<[inline note annotation]>
Expected :java.util.Collections$SingletonList<[inline note annotation]> 
Actual   :java.util.LinkedList<[inline note annotation]>
```
First of all I don't get why the comparison fails.
Second the message is really not helpful.

Surely I made some kind of mistake, but I don't understand what's the issue here. Can you give me a hint?
#2640 Review Comments 16:
fixed in 1dfa504dd206b3b65463eee4cfccf776a7a566f4
#2640 Review Comments 17:
Because the `DefaultListModel<FileAnnotation> listModel;` uses the `FileAnnotation.toString()` method directly to render the `JList<FileAnnotation> annotationList;`. There we need the localized name of the `AnnotationType`, whereas in the `private final JTextArea markedTxtArea;` this would be a duplication, so I stripped it.

I'm not proficient in GUI programming, and this was the easiest solution I found.
#2640 Review Comments 18:
yes. bcf75168294e25f0769cf8f90ff847321032ee95
#2640 Review Comments 19:
yes. bcf75168294e25f0769cf8f90ff847321032ee95
#2640 Review Comments 20:
OKay, then It's okay
#2640 Review Comments 21:
Ah I just checked it's strings..
#2640 Review Comments 22:
Not directly to see, but I did some debuggin and it  fails because the FileAnnotation does not provide an equals method

#2640 Review Comments 23:
I have added an equals method now
#2640 Review Comments 24:
Ah. That makes sense. Thanks a lot!
#2640 Review Comments 25:
Thanks to @Siedlerchr for pointing out the necessity to override the `.equals()` method in `FileAnnotation`, however the reason for this was to actually improve the message which is displayed by jUnit if the test fails.
@tobiasdiez, can you give a hint why the message is better with the Collections.singletonList() variant? (see https://github.com/JabRef/jabref/pull/2640#discussion_r106727820)
#2640 Review Comments 26:
I think it the classical problem, that `model` objects are directly used in the gui to display information (and thus the model class gets modified in ways that are undesirable from a model view point, but needed in the gui). Here I would propose that:
- `FileAnnoation` stores and returns the content as extracted from the PDF. It also provides way to determine its type (preferable as an enum)
- You create a wrapper `FileAnnotationViewModel` that prepares the data to be displayed in the GUI (e.g. there is a method that converts the annotation type to a localized string, overwrites toString such that the content is displayed etc).
#2640 Review Comments 27:
To see the value of comparison with lists, we need to assume that the method under test returns something unexpected. For example:
- It returns two items instead of one. With the "old style" you just get `expected 1 but got 2` while comparison with the singleton list displays something like `Expected "item [property 1, ...]" but got "item [property 1, ....], item2 [value 1, ... ]"`. So you get more details about the item that is wrongly returned, which is often helpful in fixing bugs. 
(for this you need to overwrite the toStrings method..I normally take the autogenerated variant generated by intellij)
- The method still returns only one item but with the wrong values. In this case, the old style gives you `expected "value1" but got "wrong value"`. If you compare against an expected item you directly get also information about the other properties (thus you directly see if just one value is off or a completely different item is returned). 

Another important advantage is that, if in the future the class is extended by an additional property, you just need to adapt the equals method and all your tests automatically take this new property in account.
#2640 Review Comments 28:
Well, if I change any of the tests in the PdfAnnotationImporterTest such that one attribute of the single list element mismatches I don't get the rich comparison you are describing. Nevertheless I have implemented it as you have proposed.
--------------------------------------------------------------
#2639 Review Comments 1:
I think you could use a Stream together with filter(title::isPresent).collect(Collectors.toList)  
#2639 Review Comments 2:
Not sure what @JabRef/developers think about returning an optional there, but I think instead the error handling (absence of title) should be done already in this getter.
Thus, I would vote for returning an empty string if the optional is absent.
#2639 Review Comments 3:
I've based the getter for the title on the other present getters in the `BibEntry` class. 
All these getters also return an empty `Optional` in case one isn't found and leave the error handling to be performed by the methods using it.

I can change it to return an empty string, if that seems to be the better option.
#2639 Review Comments 4:
I've tried using a stream using your suggest now for retrieving the list of titles.
However, it required an additional mapping to be done in order to form the list of titles.
#2639 Review Comments 5:
It also works with flatMap and a helper in OptionalUtil (not sure how the method is called that transforms an optional into a stream)
#2639 Review Comments 6:
I think `Optional<String>` is indeed the more consistent way to go. Also has the advantage that the methods of the optional can be used (map, ifPresent etc).
#2639 Review Comments 7:
 Optional is fine here. It follows the same pattern for each field.
#2639 Review Comments 8:
👍 for `Optional<>` - but the javadoc should be updated accordingly: `@return the title of a BibTeX entry or null if no title was found.`

I think this is introduced by copy&paste but we should not introduce new issues with new code. 
Another, rather nitpicky aspect: In another snippet you created variables like `bes` - don't cheat by looking - but what exactly is stored in this variable? :wink: 

Using the name "selectedBibEntries" would be way more self-explanatory...
#2639 Review Comments 9:
Okay after some discussion with @lynyus and after checking the code again, I would recommend to remove this getter completely as it does not provide any benefit. Just directly use `getField(FieldName.TITLE)` in the code.
#2639 Review Comments 10:
I couldn't find the helper to transform an optional into a stream in the [Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) documentation. 
I believe this is something that was added later in JDK 9.
I looked into [other ways](http://stackoverflow.com/questions/22725537/using-java-8s-optional-with-streamflatmap) to use flatMap, but these did not look very nice to me.

Do you think I should change it any way or just leave it like it is now (with the filter + map)?
#2639 Review Comments 11:
Yes, that was careless of me 😄.
I have updated the java doc for `getTitle` to reflect what it actually does.

I was aware that `bes` contained all the selected `BibEntry` objects, but left the naming like that to be consistent with the other naming. 
I have changed the variable names to be more descriptive.
#2639 Review Comments 12:
Leave it like this, my comment was just nitpicking. I was referring to our [toStream method](https://github.com/JabRef/jabref/blob/master/src/main/java/org/jabref/model/util/OptionalUtil.java#L24).
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2632 Review Comments 1:
@tobiasdiez  I am not sure if we should compare the values or if it is enough to check the object refs
#2632 Review Comments 2:
I think `equals` is the cleanest solution
#2632 Review Comments 3:
Forgot to set succes true in the entries else part
#2632 Review Comments 4:
Pushed to master
--------------------------------------------------------------
--------------------------------------------------------------
#2628 Review Comments 1:
I would suggest to extract this magic number into `public static final int MAX_FILENAME_LENGTH`.  This can then be reused by the test as well.
#2628 Review Comments 2:
shouldn't be here an `orElse` to ensure that  in `newFileList` the entry is always added, even if there is no `getFirstExistingFileDir`?

Maybe, we can be sure that this always returns something in this state. If we are, we have to add

    if (!settingsdir.isPresent) LOGGER.debug("no directory determined. This is strange.");
#2628 Review Comments 3:
an orElse would be the wrong approach here because it would then resolve to the JabRef install directory. 

#2628 Review Comments 4:
Why do you drop the StringBuilder here?

#2628 Review Comments 5:
In fact I think the optional could be dropped because the bib file dir should always be a valid directory
#2628 Review Comments 6:
Just normal String concatenation. I thin, the StringBuilder did not introduce more readability. In the current code, I find it more readable. But, maybe, I am a 2005 programmer 🎉 
#2628 Review Comments 7:
As I just read the String concat gets nonetheless optimized as a StringBuilder on the compiler side, so I guess it's safe here. 

At least when doing concats in loops you should stick to StringBuilder because it's more efficient 
#2628 Review Comments 8:
I don't see the point of using a StringBuilder there either, it feels like it clutters the code. Used String.format() as an alternative before, but I think this is the most readable variant.
#2628 Review Comments 9:
Could you add a test case for that?
Just to make sure we don't miss anything 
#2628 Review Comments 10:
What do you mean exactly? The tests already cover this to some extend. https://codecov.io/gh/JabRef/jabref/compare/c416818deba486605779a375a8f09f605c8dec9c...e4604444bdf8f1ed93678736183248d25924ae93/src/src/main/java/org/jabref/logic/cleanup/RenamePdfCleanup.java
#2628 Review Comments 11:
Sorry, did not see that! I merge it in now
--------------------------------------------------------------
--------------------------------------------------------------
#2625 Review Comments 1:
Instead of extending a deprecated class, can the FileDialog below be replaced by the new DialogService?
#2625 Review Comments 2:
done. I extended the new DialogService class now
--------------------------------------------------------------
#2624 Review Comments 1:
This seems to be the case if the guava cache is loaded.
#2624 Review Comments 2:
I know that this is not a problem of mutability here, but is there a good reason for breaking with the Java conventions for this and the following attributes? If there is no added benefit, then I would much prefer to have public getters instead of public attributes for the simple reason that this is the convention. Otherwise it always looks fishy when such a variable is accessed in another class and I have to look up `FileAnnotation` to check that this is not a grave access bug.
#2624 Review Comments 3:
Can you please reuse the "dummy" construction, i.e. `this(annotation.getModifiedDate(), pageNumber, ...)`. This comment also applies to the second constructor below.
#2624 Review Comments 4:
Then better set date here to the empty string (otherwise the null-check has to propagate to every usage of  the field `FileAnnotation.date`
#2624 Review Comments 5:
Maybe even store the date as an instance of  `Date` ? Then the gui can decide how to display it.
#2624 Review Comments 6:
can you please pass the `fileDirectoryPreferences` as an argument to the constructor. Everything in logic and model should be independent of the `JabRefPreferences` class (we should add a architecture test for that too...)
#2624 Review Comments 7:
fixed in bd542d6
#2624 Review Comments 8:
fixed in f977614

#2624 Review Comments 9:
done in bd542d6
#2624 Review Comments 10:
hmm I'm not sure how to do that. On the calling side of PdfAnnotationImporter (EntryAnnotationImporter) I only have the BibDatabaseContext available. Not sure how to obtain the correct path from there?
#2624 Review Comments 11:
I don't know if you changed it, but it would be nice to have a bit better speaking variable names, as I here don't get from a quick view what j and k stand for.
#2624 Review Comments 12:
Yes this change would propagate to EntryAnnotationImporter and FileAnnotationCache (and probably further places) until one ends up in gui. It's not that important, you can also leave it as it is right now.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2616 Review Comments 1:
Hm. I really wonder why this previously didn't work. But well, if it works now, then it's fine...
#2616 Review Comments 2:
EntryEditorTabRelatedArticles was AFAIK used as child. `activeTab` was a `JPanel`.
--------------------------------------------------------------
#2614 Review Comments 1:
It is probably better to return `scrollPane` in `getPanel` instead of introducing this new getter.
#2614 Review Comments 2:
The current code only contains getScrollPane(), as I removed getPanel(). I decided against returning a scrollpane in getPanel, because it makes more sense to name the method getScrollPane imho. Is this okay with you?
--------------------------------------------------------------
#2612 Review Comments 1:
Please sort this and the following two variable to a different part of the class declaration. In the current form they are commented as "default colors".
#2612 Review Comments 2:
Please add a blank line after the class definition.
--------------------------------------------------------------
--------------------------------------------------------------
#2610 Review Comments 1:
Normally, we would use StringJoiner to avoid this kind of code.
#2610 Review Comments 2:
Ah I copied this from some of the existing code, I'll try to change it to use a StringJoiner!

I'll also add a changelog entry.
#2610 Review Comments 3:
Thank you! :+1: We're just trying to improve the code quality wherever possible 😇 
#2610 Review Comments 4:
No problem :)

I've made the suggested code change and added a change to the changelog.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2587 Review Comments 1:
Why only commented out?
#2587 Review Comments 2:
Why only commented out?
#2587 Review Comments 3:
The new button is always enabled which is not what you want. Thus this old code functions as a reminder for myself to change it.
--------------------------------------------------------------
#2586 Review Comments 1:
You are losing the localization message in this replacement.
#2586 Review Comments 2:
As this gets shown to the user (or at least I remember having seen such message when I left the field). wouldn't it be better to describe the message a bit more simpler?
#2586 Review Comments 3:
Done
#2586 Review Comments 4:
The `InvalidFieldValueException` actually contained all the necessary information. Moreover, the text was also partly wrong (since the exception could also occur due to a problem with brackets)
--------------------------------------------------------------
#2585 Review Comments 1:
Introduce the shortcut method `isPdf` or create an enum for the mime types? I don't like the magic strings...
#2585 Review Comments 2:
introduce overload of `asString` which uses UTF_8 by default.
--------------------------------------------------------------
#2584 Review Comments 1:
We can only use ROOT for language insensitive Strings. We think not all missing places are insensitive. Also, sometimes Locale.ENGLISH or so might be better in such cases?
#2584 Review Comments 2:
Hm... Generally, I think ROOT is better than ENGLISH for Strings where we use them internally, e.g. to match files names etc..

However you have a point. If the String is language sensitive it might be better to use the user-specific Locale (i.e., the Locale.getDefault();). However in this case we must be sure that it is not used for any comparisons etc., because this would break stuff if compared to Strings that were manipulated with another Locale.
#2584 Review Comments 3:
In general we should use ROOT for internal strings only. And especially in reading/writing we have to be backwards compatible.
For GUI stuff we should use the English locale for english terms, e.g. the bibtex fieldnames or entry types. 
As this effects many cases. I think we should discuss this in a devcall @JabRef/developers  WDYT?



#2584 Review Comments 4:
Is there any issue solved with this?

Is it worth that we spend two hours on this? Why?
#2584 Review Comments 5:
I'm in favor of merging this PR at is right now. I can't see any disadvantage of using ROOT instead of the default one. Maybe for some GUI related stuff you can argue about ENGLISH but well...The worst possible thing (from what I get) is that now the keys of some entries with "strange" values change and maybe the order in the main table is slightly different...not very system-critical. 
--------------------------------------------------------------
--------------------------------------------------------------
#2582 Review Comments 1:
You could directly use the Files.find method and pass the filter predicate as argument. maxDepth would then be Integer.MaxValue 
#2582 Review Comments 2:
Look in our StringUtil class, there is already a method for finding braces
#2582 Review Comments 3:
Just looked at it. Doesn't seem like a real change to me except that its a parameter then?!
#2582 Review Comments 4:
Thanks for the hints, but this is old code which I didnt write and don't wanna change if not really necessary.
#2582 Review Comments 5:
But you created a test for it right? So you could check it....

#2582 Review Comments 6:
 A bit different. Instead of collecting all files and then filtering on the list(the stream), the Files.find directly invokes the predicate on each file and the file is only included in the stream if it matches:

>  This method walks the file tree in exactly the manner specified by the walk method. For each file encountered, the given BiPredicate is invoked with its Path and BasicFileAttributes. The Path object is obtained as if by resolving the relative path against start and is only included in the returned Stream if the BiPredicate returns true. Compare to calling filter on the Stream returned by walk method, this method may be more efficient by avoiding redundant retrieval of the BasicFileAttributes. 

https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#find-java.nio.file.Path-int-java.util.function.BiPredicate-java.nio.file.FileVisitOption...-

>  look in FileUtil.findFiles 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2569 Review Comments 1:
Please don't use simple YES/NO Buttons: 
 http://www.uxdesignedge.com/2010/06/are-you-sure-how-to-write-effective-confirmations/

Better add explicit named Buttons Delete file permanently and Cancel:
As I just did this yesterday for another case, here is a sample code:

```
String[] options = {Localization.lang("Move file"), Localization.lang("Cancel")}; 
int dialogResult = JOptionPane.showOptionDialog(frame, "Move file to file directory" + fileDir.get(),
              "Move",
                   JOptionPane.INFORMATION_MESSAGE, JOptionPane.YES_NO_CANCEL_OPTION, null, options, options[0]);
            if (dialogResult == JOptionPane.YES_OPTION) {
```
#2569 Review Comments 2:
Hm, one can argue if this really adds so much value. I think the functionality is clear with the question `Do you really want to delete this file?`. It just adds more Strings that need to be translated. However, I'm OK with implementing this. 

In general, what do @JabRef/developers think about this?
#2569 Review Comments 3:
There are just a few more Strings, but it really helps to improve usability a  lot! Here is a more detailed explanation . http://ux.stackexchange.com/questions/756/what-are-some-alternatives-to-the-phrase-are-you-sure-you-want-to-xyz-in-confi

See also https://github.com/koppor/jabref/issues/149
#2569 Review Comments 4:
I understand it, tho not sure if I really agree 😄 
--------------------------------------------------------------
--------------------------------------------------------------
#2567 Review Comments 1:
If we did further code improvement, we would use the other way to show the shortcuts. Further, <kbd>Alt</kbd> + <kbd>F</kbd> is no longer the valid shortcut for that, is it?

Can you follow up in another PR?
--------------------------------------------------------------
--------------------------------------------------------------
#2563 Review Comments 1:
I would prefer a switch case here, but that is a minor thing
#2563 Review Comments 2:
Move set context out of the ifs as it is called always with the same parameter 
Same for set Name 
#2563 Review Comments 3:
According to the Java language specifications
> The type of the Expression must be char, byte, short, int, Character, Byte, Short, Integer, String, or an enum type, or a compile-time error occurs.

thus switch over a class type does not work.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2557 Review Comments 1:
I think, checkstyle or codacy or some other toal moans because of package private. Nevertheless, I think, it is OK to reduce visibility.
#2557 Review Comments 2:
indent? - Think, indent is wrong here.
#2557 Review Comments 3:
I would remove that, `@throws` javadoc, because it does not add any more information.
#2557 Review Comments 4:
I'm not sure whether this line is really valid. Did you find a test case for that? I assume, a user put an URL in the file field. This should not be checked here, but at other places (integrity check, ...)
#2557 Review Comments 5:
It seems like codacy does not like default visibility at all
#2557 Review Comments 6:
actually this is a one-to-one copy of what has been there before. I don't have the domain-specific insight if it makes sense.
--------------------------------------------------------------
--------------------------------------------------------------
#2555 Review Comments 1:
:boom::+1:
--------------------------------------------------------------
#2554 Review Comments 1:
You may remove this line
--------------------------------------------------------------
#2551 Review Comments 1:
You disable it here. Is this what you want?
#2551 Review Comments 2:
Yes. Same thing as with the entry from id thing at New BibEntry...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2545 Review Comments 1:
Could we use a class from google  guava instead? Because of this LRUMap class, the whole commons collections library has to be included.
#2545 Review Comments 2:
To be done in the future:  #2546
--------------------------------------------------------------
--------------------------------------------------------------
#2541 Review Comments 1:
Use assertEquals otherwise the test never fails.
#2541 Review Comments 2:
god, good catch :D
--------------------------------------------------------------
#2538 Review Comments 1:
I think it is cleaner if you modify the `getMonth` method to return `Optional<Month>̀` instead of `NULL` objects.
#2538 Review Comments 2:
Yeah. Thought about remodeling the stuff. The NULL_OBJECT stuff and UnknownMonth is really shitty, 
#2538 Review Comments 3:
You can use the `isValid` method of a `Month` to determine whether it is a valid month.
#2538 Review Comments 4:
Done and added also test 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2532 Review Comments 1:
I would merge this class into the `LatexToUnicodeFormatter`. I don't see any advantage of having two classes that do essentially the same.
#2532 Review Comments 2:
use markdown links
#2532 Review Comments 3:
[d835](http://www.charbase.com/d835-unicode-invalid-character) is the symbol for an invalid character. Is this conversation a bug or indeed the expected outcome?
#2532 Review Comments 4:
It seems to be used as an escaping symbol for the following hex. I arrived at this sequence by copying the italicized text in Intellij into the code which transformed it into these hexes.

If you remove the first hex, then the first letter of the expected output turns into a `?` for Intellij, so this really seems to be the escape sequence.

I have to admit, though, that my knowledge on the correct hexes of italicized text in unicode is slim. 
#2532 Review Comments 5:
This is not possible, since we need the unicode conversion in the model to internally convert fields of `BibEntries`. If we just had the formatter, we would have a dependency from model to logic, which is forbidden in the architecture.
#2532 Review Comments 6:
done
#2532 Review Comments 7:
![italics](https://cloud.githubusercontent.com/assets/676652/22789274/c6353a6a-eee2-11e6-9d42-5642a83c3f5b.png)

Okay... I really kinda works - Although is looks strange ;-)

#2532 Review Comments 8:
I don't expect anyone to ever use italicized text in their entries - after all, why would you? But isn't it cool to know that with the converter we could theoretically support it? :-)
#2532 Review Comments 9:
Some more details here https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates :)
--------------------------------------------------------------
#2531 Review Comments 1:
Mabye useful to add a logging here in case the json format changes?
#2531 Review Comments 2:
This should be detected by our Tests. Shouldn't it?

However, logging here does no harm.
#2531 Review Comments 3:
The test will fail yes.
--------------------------------------------------------------
--------------------------------------------------------------
#2529 Review Comments 1:
What happens if there is already a file linked?
Will the linked file then be moved one down?
#2529 Review Comments 2:
yeah, the file link model is just a linked list
--------------------------------------------------------------
#2528 Review Comments 1:
@JabRef/developers Why do we have a translation for MIT?
#2528 Review Comments 2:
My first guess it is used somewhere in the About dialog. The license. But makes no sense to have it in the localization
#2528 Review Comments 3:
Yeah, we should fix this when merging this PR!
#2528 Review Comments 4:
`<Hyperlink onAction="#openLicense" text="%MIT" />` in the AboutDialog.fxml
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2515 Review Comments 1:
Please use a more speaking variable name instead of b, maybe the same name as for the variable
#2515 Review Comments 2:
Better use a SheduledExecuterService: 
http://stackoverflow.com/questions/409932/java-timer-vs-executorservice
#2515 Review Comments 3:
You could use a lamdba here, too
--------------------------------------------------------------
#2514 Review Comments 1:
Minor thing: This should be aligned with the other bullet points.
#2514 Review Comments 2:
Again, please align.
#2514 Review Comments 3:
Again, please align.
#2514 Review Comments 4:
doen
--------------------------------------------------------------
--------------------------------------------------------------
#2510 Review Comments 1:
Could you fix the formatting in the condition here? I am referring to whitespaces between operators `&&` and the operands.
#2510 Review Comments 2:
Done. Also added a changelog entry.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2488 Review Comments 1:
This smells a lot like singleton. There are potential problems in the current implementation, which do probably not manifest, but let us improve this anyway: If you always hand out the same `NULL_RESULT`, a caller of the method can modify this result (e.g. `NULL_RESULT.getDatabase().add(...)`), which could theoretically lead to interesting observations at other places.

Long story short: Please always create a new empty ParserResult here. Thus, you can also remove `NullResult`.
#2488 Review Comments 2:
Good suggestion. I completely inlined the `getNullResult` method as I don't see any need to encapsulate a constructor call in a new method.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2474 Review Comments 1:
Sure you want to call that Date? Will create a lot of confusion with the import hell..

--------------------------------------------------------------
--------------------------------------------------------------
#2469 Review Comments 1:
Please use `//` as comment for fields. (Or quote some manual where block comments are recommended)
#2469 Review Comments 2:
You can use `Optional.ofNullable(currentSearchQuery)` instead of this if/else block
#2469 Review Comments 3:
However, I am unsure whether `trim().isEmpty()` should be checked for. I think, your current code is OK. (After the usage of `ofNullable`.
#2469 Review Comments 4:
I would use (a slight update of) your long sentence of the PR text here - and put the "Fixes" as last (as with the other entries)

> If one deleted the current query, it was not saved (every database can have its own query). Fixes [#2468](https://github.com/JabRef/jabref/issues/2468).

#2469 Review Comments 5:
JavaDoc works on properties too (I think you overlooked the second asterisks).
#2469 Review Comments 6:
done
#2469 Review Comments 7:
done
--------------------------------------------------------------
--------------------------------------------------------------
#2464 Review Comments 1:
Only one assert per tests pls...... 😢 
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2442 Review Comments 1:
Wouldn't it make sense to directly filter out the bibtex fields which have a DOI here with a stream?
e.g `bibentries.stream().filter(x->hasField(FielName.DOI).....
`
#2442 Review Comments 2:
You could chain the optionals with flatmap, avoid the ifPresent cascading...

http://www.nurkiewicz.com/2013/08/optional-in-java-8-cheat-sheet.html
#2442 Review Comments 3:
For maximal reusability, could you please make this class independent on DOI. There are many other identifier for which such an automatic look-up makes sense.
#2442 Review Comments 4:
- [x] Language: Either `ID` or let the caller set the DOI name
- [x] lines 43 to 46 somehow extract. Interface: CanCompleteEntry
#2442 Review Comments 5:
I have no idea how to create a progress bar there.

I found http://stackoverflow.com/a/26814087/873282, but that code looks much more complicated than the current code. Should I change it?
#2442 Review Comments 6:
No clue how I can do that with progress...
#2442 Review Comments 7:
Na then go for it now., 
#2442 Review Comments 8:
Okay, was just an idea. If it does not make it easier forget about it
#2442 Review Comments 9:
@koppor can you please rebase and I will implement then the rest. Deal?
#2442 Review Comments 10:
Should we call this class HasIdentifier?
--------------------------------------------------------------
--------------------------------------------------------------
#2440 Review Comments 1:
Why not use named groups? Would replace the magic numbers.
#2440 Review Comments 2:
Done. Hope this is now ready as late self-birthday-present. 🎉 
--------------------------------------------------------------
#2438 Review Comments 1:
Missing newline at the end of the file
#2438 Review Comments 2:
Missing newline at the end of the file.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2428 Review Comments 1:
Can you just replace this via a regex? `/arxiv:?/i`
#2428 Review Comments 2:
I would omit the comment here. It is a test for expected behavior. Doesnt matter which bug/problem it fixed.
#2428 Review Comments 3:
Same as above
#2428 Review Comments 4:
I would vote for an ArXivID class, similar to the DOI one which can handle such a case.
#2428 Review Comments 5:
Remove empty line
#2428 Review Comments 6:
Remove url
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2415 Review Comments 1:
cleanup, tab and field, all with a small first letter
#2415 Review Comments 2:
I think the actions are initialized once at the start of JabRef. Thus changes in the cleanup preferences are not recognized with this code. (there should also be a journal abbreviation loader in globals)
#2415 Review Comments 3:
I don't like that so much logic is hidden in a cleanup process. In my opinion it would be better to extract as much logic as possible to separate classes and reuse them here and also in the other places (instead of reusing the cleanup).
In more detail I propose to:
- Create a class that wraps around `List<ParsedFileField>` and that takes care of moving all linked files (and providing nice helper methods like `replace(one file, by another one)` 
- Almost everything in the [for loop below](https://github.com/JabRef/jabref/pull/2415/files#diff-697281a5461cd043769c3bbf1331a9deR87) can be extracted to the ParsedFileField class (and be split in smaller helper methods like ParsedFileField.exists())
- The code is a bit complicated since you constantly have to pass the fileDirectoryPreferences around (not your fault!). What you think about passing these information once into `TypedBibEntry.getFiles` as arguments, which are then stored in the ParsedFileField class? Thus the ParsedFileField class actually knowns if the file exists in one of the directories, what its preferred name is, can rename and move itself...
#2415 Review Comments 4:
Sounds like a good idea. However, as my time is currently limited due to exams I would rather vote to merge it in as it is, as it fixes several important bugs and I would create a followup PR for making the code strucutred 
#2415 Review Comments 5:
Its probably fine... maybe somebody else should also have a look at the code before merge.
#2415 Review Comments 6:
I now pass the prefs directly
--------------------------------------------------------------
--------------------------------------------------------------
#2413 Review Comments 1:
space: "on a"
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2398 Review Comments 1:
I doubt it only affects Notepad++, so I would opt for describing it more general, e.g. text Editor

--------------------------------------------------------------
#2396 Review Comments 1:
change order of arguments (and maybe inline `messages`)
#2396 Review Comments 2:
The naming would indicate that it is a static variable, but it is not. Same applies to `ALL_BIBLATEX...` below.
Moreover, if this list is reused somewhere else then please extract it and reuse it (e.g. to FieldName ?)
#2396 Review Comments 3:
Done
#2396 Review Comments 4:
Ups. - I don't know where to put it. It is specific to JabRef and can be re-configured by the user. Thus, I should read it from the preferences. Introducing a good preferences object is currently much effort for me. I would say: as soon as a user complains that the integrity check does not work with his customized tabs, I will spend the effort.

Nevertheless, I moved the constant to `InternalFields` and use it in both preferences and the checker.
#2396 Review Comments 5:
FieldName.ABSTRACT and FieldName.REVIEW should not be listed here as this list will be (also) used to populate the "General" tab
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2384 Review Comments 1:
Please document, why `null` is passed here. We wanted to avoid passing `null`, but it seems the API required it.
#2384 Review Comments 2:
Please add a comment, why `null` is passed
#2384 Review Comments 3:
Yes, thats the only way to call the showSaveDialog method. Sorry, but I'm not in the mood to add comments for such things as "null" passed 😸 .
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2375 Review Comments 1:
Why are there two additional newlines here?
#2375 Review Comments 2:
To avoid merge conflicts with other PRs.
#2375 Review Comments 3:
Ok, fine. I would merge this right now, but maybe we should give @bernhard-kleine at least time until the release tomorrow, before we merge and delete the branch. 

We should not forget to merge it before the release, though.
#2375 Review Comments 4:
I would change "preserve" to "escape", and, moreover, "LaTeXCleanup" is not an English word 😄 
--------------------------------------------------------------
#2374 Review Comments 1:
I don't like the architecture that a fetcher controls other fetcher. All of them should be completely independent and their working-together should be controlled at a higher level. Moreover, I would allow the user to choose between "ISBN (ebook.de)" and "ISBN (Chimbori/Amazon)", or is the quality of ebook's metadata really superior?
#2374 Review Comments 2:
We should rewrite IdBasedParserFetcher so that it also supports POST actions (and maybe uses Unirest for it).
#2374 Review Comments 3:
I don't see that we have such an agreement with ebook.de
#2374 Review Comments 4:
I think, it should be transparent to the user, so that he does not need think, what fetcher he wants to use. We could also offer all three fetchers to the user so that if he really wants to choose.

It is the deal with Chimbori that we use ebook.de first to reduce load on his server. The deal was made in personal emails I exchanged with the author of Chimbori
#2374 Review Comments 5:
Not sure whether it is worth the effort - I think, we currently have only one exception for that.
#2374 Review Comments 6:
I can forward you the emails I exchanged with them.
#2374 Review Comments 7:
Here IdBasedFetcher should be sufficient and then IsbnViaEbookDeFetcher implements IdBasedParserFetcher (in addition to AbstractIsbnFetcher)
#2374 Review Comments 8:
In IsbnViaChimboriFetcher, I need both `doPostCleanup()` and `getParser()` which are not offered by `IdBasedFetcher`.

Don't want to introduce a new intermediate class...
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2371 Review Comments 1:
Why do you need the close statement here? `fileWrite` is opened in a try-with-resources, so it will be closed at the end. 
#2371 Review Comments 2:
Not your change, but why is this bracket opening in a new line? Can you fix the formatting in this method?
#2371 Review Comments 3:
The test fails if I do not close the current fileWriter. Maybe it would be betetr to extract the code below from the try statement...
#2371 Review Comments 4:
The bracket below? This is some old stuff. I already forgot what this does in Java...creates a new isolated scope or so...
#2371 Review Comments 5:
be aware that the inputstream is null if the resource cannot be found, resulting in a NPE.
#2371 Review Comments 6:
For something like this, I would prefer to create a utility method that can be called. Should be useful on other occasions as well. You can pass in a lambda function which will be called from the utility method, and the method could simply return the value of the sysout as a String.
#2371 Review Comments 7:
This should be either an assertion or deleted. 
#2371 Review Comments 8:
Is this any different than before?
#2371 Review Comments 9:
Would it make sense to create a BibtexParser.parse(string, prefs) method?
#2371 Review Comments 10:
Do we have a constant for the abstract field somewhere?
#2371 Review Comments 11:
I do not like to assert the size of a list, because the result would simply say that the count mismatches, not which elements are in the list. Why not use the assertEqualsBibtexEntryList method if there is some which compares a list containing t1BibtexEntry with l?
#2371 Review Comments 12:
See above.
#2371 Review Comments 13:
To be honest, I didn't want to refactor the tests but just get them running again.
#2371 Review Comments 14:
For some reason the file cannot be deleted and is still locked but I dunno where yet (and don't really care).
#2371 Review Comments 15:
I dunno, amybe @lenhard knows.
#2371 Review Comments 16:
As far as I know there is no such method or maybe @tobiasdiez knows.
#2371 Review Comments 17:
Well, it is what the `BibtexParser.parse` method does internally. If you parse multiple times subsequently, there might be a little performance impact, if you parse only once then it does not matter.
#2371 Review Comments 18:
Assert.assertEquals(Collections.singleton(tlBibtexEntry()), l) should work (and please rename `l` to something better :-)
#2371 Review Comments 19:
Uhh... as this relies on the equals implemenation of BibEntry I'm not sure whether this really works. :wink:
#2371 Review Comments 20:
`https://issues.jabref.org`, pleae
#2371 Review Comments 21:
Maybe we can wrap it inside `Objects.requireNonNull()` and also add some `Objects.requireNonNull` for `resourcePath` and `prefs` before lin 153
#2371 Review Comments 22:
I would like to know, what's happening here. Can the test be adapted to the current behavior and possibly commented, what should happen?

I would need that if someone comes over and wants to replace our parser 😇 
#2371 Review Comments 23:
Why not adapting it to the current behavior? I think, we drop `<br>` now, which is fine. Why not leaving the additional test?
#2371 Review Comments 24:
Yeah, we wanted to use a canonical string representation for the bib entries.

The current implementation of BibEntryAssert also relies on `equals` so it is very much OK to use the code @tobiasdiez proposed.

#2371 Review Comments 25:
Why not just calling `deleteOnExit()`? This would prevent these kind of issues.
#2371 Review Comments 26:
OK for leave as is - I copied @simonharrer's comment to https://github.com/koppor/jabref/issues/6.
#2371 Review Comments 27:
It just doesn't work right now as @lenhard says. So there is no sense to test it at the moment.
#2371 Review Comments 28:
?
#2371 Review Comments 29:
Please do not delete the test. Just remove `@Ignore` and remove `<br>`.

![grabbed_20161215-133111](https://cloud.githubusercontent.com/assets/1366654/21224096/c031ea3a-c2ca-11e6-9d35-8eadd1c09c9f.png)

#2371 Review Comments 30:
If that's really what we want to achieve here \n\n -> ' ' 
I'm not sure about this that's why I removed the test.
#2371 Review Comments 31:
In other words: That is the current behavior, yes. But should it really be the correct behavior? In my opinion we should only test correct behavior not as is behavior. As the correct behavior for example <br> is not working right now I cannot really test it.
#2371 Review Comments 32:
JabRef returns one entry, which pretty good. I would like to have this checked in tests if we adress it.

The test has to be adapted accordingly.

Result is 

`@article{test,
  author = {author bracket #too##much#}
}`

Would it be OK if you include this as expected case, even if the `}` gets lost...

This documents the drawback of JabRef.

OK, additional documentation at https://help.jabref.org/en/Bibtex would be better, but none of us has time for that.
#2371 Review Comments 33:
I think, we decided to remove newlines in non-multiline fields. Is it https://github.com/JabRef/jabref/pull/357?

Even if that is not the desired behavior, I would add `// TODO: The correct behavior is` to indicate that someone should work on it.

Alternative: open an issue on GitHub. - I am currently optimizing (i) to keep the number of opened issues low and (ii) to have documentation close to the code and not spread around.
#2371 Review Comments 34:
A better way to use a TemporaryFolder rule and create the file there.  Then junit keeps track of deleting it 
#2371 Review Comments 35:
Does not work right now author is not normailzed or so:
Expected  
```
[@article{canh05,
  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},
  booktitle = {Hawaii International Conference On System Sciences (HICSS)},
  owner = {oezbek},
  timestamp = {2006.05.29},
  title = {Effective work practices for floss development: A model and propositions},
  url = {http://james.howison.name/publications.html},
  year = {2005}
}]
```
Actual  
```
[@article{canh05,
  author = {K. Crowston and H. Annabi and J. Howison and C. Masango},
  booktitle = {Hawaii International Conference On System Sciences (HICSS)},
  owner = {oezbek},
  timestamp = {2006.05.29},
  title = {Effective work practices for floss development: A model and propositions},
  url = {http://james.howison.name/publications.html},
  year = {2005}
}]
```

I would skip this for now.
#2371 Review Comments 36:
Added some requireNonNulls.
--------------------------------------------------------------
#2369 Review Comments 1:
If I read the code correctly, the propagation of the event to super gets lost in your refactoring. Please make sure that you preserve the existing functionality, unless it is a bug.
#2369 Review Comments 2:
Usually, commented-out code should be deleted. So instead of extending them, please remove these lines.
#2369 Review Comments 3:
The refactoring is ok since the super call is also refactored in the same commit (the super class does not implement ActionListener anymore and thanks to the inheritance the super call is now useless). 

I looked at the type hierarchy of these two classes to check that this change has no impact on other classes.
#2369 Review Comments 4:
Done
#2369 Review Comments 5:
Also, I manually tested JabRef by using the impacted widgets.
#2369 Review Comments 6:
Ok, thanks! It might have been unnecessary during all of its existence, or maybe it had a purpose at some point in time that got lost. In any case, its removal is positive.
#2369 Review Comments 7:
Great!
The super call was not useless. However, the super class is also refactored so that its widgets now register lambda listeners that EntryTypeList now inherits.
--------------------------------------------------------------
#2368 Review Comments 1:
I think, this comment can be deleted, can't it?
--------------------------------------------------------------
--------------------------------------------------------------
#2364 Review Comments 1:
Please leave `journaltitle` here since the returned entry is in biblatex format (see date above)
#2364 Review Comments 2:
return this.setField should be enough
#2364 Review Comments 3:
Rename to NoBibLatex ?
#2364 Review Comments 4:
This and location should report an error, shouldn't they?
#2364 Review Comments 5:
Done. Although I assume that even with a bibtex database, I get a biblatex entry.
#2364 Review Comments 6:
Done.
#2364 Review Comments 7:
Added class comment

> This checker checks whether the entry does not contain any field appearing only in BibLaTeX (and not in BibTex)

Thus, the name is IMHO correct.
#2364 Review Comments 8:
Why? `journaltitle` and `location` are BibLaTeX only. Thus, everything is allright.
#2364 Review Comments 9:
Maybe I just don't understand what the check is doing, but "This checker checks whether the entry does not contain any field appearing only in BibLaTeX" implies for me that I get an error if I use a field (journaltitle) which is only defined in BibLatex and not in Bibtex, right?
#2364 Review Comments 10:
It was implemented in #2059. 

Yes, you get an error if you use a field (journaltitle) which is only defined in BibLatex and not in Bibtex.

<s>Therefore, I wrote `assertNOTequals(emptylist)`. That means, there is an error.</s>
#2364 Review Comments 11:
Fixed in c7841a6dcf839ccd8a2bfe7dcbb1481ec11dfba7
--------------------------------------------------------------
#2363 Review Comments 1:
`Copy citation...` and move it into Menu_*.properties.
#2363 Review Comments 2:
done
#2363 Review Comments 3:
Please output the number. Use `%0`. Use `.` as final sign, not `!`.

> Copied %0 citations.

I think, "the clipboard" is obsolete.
#2363 Review Comments 4:
Please keep it here. It should still be possible to copy the customized JabRef entry preview.
#2363 Review Comments 5:
Do you think, it's possible to adapt `COPY_CITATION_HTML` to copy the text of JabRef's "Preview" style?
#2363 Review Comments 6:
Please add a comment that the result string of `get()` always uses `\n` as newline separator.
#2363 Review Comments 7:
Fix codacy and add a `default` statement, even if it is a noop
#2363 Review Comments 8:
Please add a comment that this is less an effort than using a solution of http://stackoverflow.com/q/240546/873282 to convert HTML to text and to use HtmlTransferable.
#2363 Review Comments 9:
One of the `get()`s  should be removed
#2363 Review Comments 10:
`proper copying` ... `editors`
#2363 Review Comments 11:
Can we move this action one level up so that independent of the current preview mode, always "Copy preview" is shown and that this always copies HTML?

Reason: The shortcut of this action is also the same - independent of the mode. Thus, it should also be in the same place.

The other entries can be left as is.
#2363 Review Comments 12:
generated `using` JavaScript
#2363 Review Comments 13:
`Kopiere_Zitation...`
#2363 Review Comments 14:
### Preview is selected
![preview](https://cloud.githubusercontent.com/assets/15333371/21139041/42c8e7fa-c131-11e6-954a-a71e7a09ed4b.png)

### Citation style is selected
![citation](https://cloud.githubusercontent.com/assets/15333371/21139042/42d55d50-c131-11e6-87d7-fb05a57bc5a8.png)

#2363 Review Comments 15:
Could you update `HtmlTransferable` to offer `application/xml` as additional DataFlavor, which also returns the html? Maybe, a new class `XmlTransferable`? - I think, the whole `HtmlTransferable` has to be rewritten: `FLAVORS` as List and `getTransferDataFlavors()` using `toArray()`. `isDataFlavorSupported` using streaming.
#2363 Review Comments 16:
Swap this with the next line as this comment belongs to the else branch
#2363 Review Comments 17:
Is it possible to check the clipboard? The goal of this test case is to test the copying of (multiple) entries, not the generation using the CitationStyleGenerator.

Think, with this code, the step to a clipboard test is not that far. It is OK for me to check a single entry as the functionality is the same...
#2363 Review Comments 18:
`RTF_FLAVOUR`
#2363 Review Comments 19:
Yes, I've done that in the next commit.
#2363 Review Comments 20:
I renamed it to  `RTF_FLAVOR` (note the missing `U`, b/c of `DataFlavor`).
#2363 Review Comments 21:
Well, you cannot instantiate the clipboard inside Travis:
`java.lang.NoClassDefFoundError: Could not initialize class net.sf.jabref.gui.ClipBoardManager`.

In Snap it apparently works.
#2363 Review Comments 22:
I overlooked `CitationStyleToClipboardWorkerTest`. There, the multi-entry-tests are done. Everything allright 👍 
#2363 Review Comments 23:
Use String builder oder String Buffer when adding strings in loops
#2363 Review Comments 24:
This part looks rather generic and might be reusable (I expect similar code for the generation of the entry preview).
I'm not sure if this makes sense, but maybe we should introduce a new class on top of the citation style generator and our Layout class. I just want to tell somebody: here is a bunch of BibEntries, please give me a nice string representation in a format I choose; but I don't care how you generate this - citation style, layout or simple string manipulation.
But this is probably something for a new PR. 
#2363 Review Comments 25:
+1 for other PR. 😇 
#2363 Review Comments 26:
@koppor, @bartsch-dev then please don't forget the follow-up :-)
#2363 Review Comments 27:
Yes, Im already working on an issue which will lead to that.
--------------------------------------------------------------
#2362 Review Comments 1:
Why this global supression? Can't it be attached to places where it is really needed?
#2362 Review Comments 2:
Please add LOGGER statement.
#2362 Review Comments 3:
Could you use `https`?
#2362 Review Comments 4:
Please use `https://donations.jabref.org`.
--------------------------------------------------------------
#2361 Review Comments 1:
Why not using [PlantUML](https://plugins.jetbrains.com/plugin/7017) for documenting?

Which tool did you use?
#2361 Review Comments 2:
IntelliJ's built-in one
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2357 Review Comments 1:
Why empty constructor?
#2357 Review Comments 2:
I don't see the need for these static lists and would favor if the "exclusive biblatex" list is constructed in the check method.
#2357 Review Comments 3:
I think `if (EntryTypes.getType(entry.getType(), Current BibDatabaseMode) == false)` also detects undefined entry types in BibLatexMode
#2357 Review Comments 4:
In my opinion, it makes sense to move this logic to the EntryTypes class and provide a `isExclusiveBibLatex(String type)` method there.
#2357 Review Comments 5:
Thnaks @tobiasdiez for the good review and nice ideas, will work on that!
#2357 Review Comments 6:
If it's undefined it still might be a custom type?! So I omitted this check right now,a s I'm not sure if I can find this out reliably.
--------------------------------------------------------------
--------------------------------------------------------------
#2354 Review Comments 1:
Shouldn't that be filled?
#2354 Review Comments 2:
"Springe zu Eintrag"
--------------------------------------------------------------
--------------------------------------------------------------
#2349 Review Comments 1:
Stream with findFirst or findAny
#2349 Review Comments 2:
You can directly edit this if you find it more intuitive.
--------------------------------------------------------------
#2348 Review Comments 1:
Why did you add this comment?
I think you are confusing something here. The method for automatically finding files is in FileUtil.findAssociatedFiles
which is called from base panel
#2348 Review Comments 2:
Yes but it uses this functionality. The reason is, I added the user.dir as a 5th option to avoid the error message when a DB is not saved yet and the preferences are resetted (see #1446) but this lead to a "endless" looping of the find unlinked files because of the amount of files that typically reside inside the user.dir. This is more or less a hint what changes here can currently cause. I understand that this is not totally intuitive to anyone right now.
#2348 Review Comments 3:
Anyways, feel free to just remove the comment via Github.
#2348 Review Comments 4:
The findAssociated files gets a list of the dirs but uses a lazy stream (Files.find) to populate a HashSet.
Should not be that performance problem.
However, I see the findAssociatedFiles method could be improved to directly search on the stream. But this is time for a new PR
--------------------------------------------------------------
--------------------------------------------------------------
#2346 Review Comments 1:
Please use Pattern.compile together
--------------------------------------------------------------
#2345 Review Comments 1:
What happened to the gitignore? This diff seems strange to me if I think about the purpose of the PR.
#2345 Review Comments 2:
What is this binary file below good for?
#2345 Review Comments 3:
What happens here? Why do you run it with checkstyle && snapcraft only?
#2345 Review Comments 4:
Why owner only? http://docs.oracle.com/javase/8/docs/api/java/io/File.html#setReadable-boolean-boolean-
#2345 Review Comments 5:
This value needs to be documented (that it has to be changed) if it cannot be parametrized.
#2345 Review Comments 6:
run-snapcraft.sh line 3: The value is changed upon run
#2345 Review Comments 7:
I'll document that.
#2345 Review Comments 8:
not checkstyle and not snapcraft makes guitest and normal test... checkstyle does not run any tests and snapcroft doesn't too.
#2345 Review Comments 9:
Yeah, I just regenerated it - i regenerated using gitigonre.io 😇 
#2345 Review Comments 10:
More specifically, I added `snapcraft` to the API call. Instead of sorting the updates out, I just replaced the whole output

Created by https://www.gitignore.io/api/gradle,java,jabref,intellij,eclipse,netbeans,windows,linux,macos,snapcraft
#2345 Review Comments 11:
`.snapcraft/travis_snapcraft.cfg` is the travis-encrypted file with my personal credentials enabling an upload to the Ubuntu app store.
--------------------------------------------------------------
#2344 Review Comments 1:
Wouldn't be a better approach to disable the menu item (as it is already done for various other actions)?

If selection size() is == 0 at this point you can just throw an exception.
#2344 Review Comments 2:
Refs #2027
#2344 Review Comments 3:
Not 100 % sure about this, but done.
#2344 Review Comments 4:
Why not checking for `!isEmpy()`?
#2344 Review Comments 5:
`!isEmpty()`, maybe add a logger.DEBUG statement?
--------------------------------------------------------------
--------------------------------------------------------------
#2340 Review Comments 1:
`hidden` and `showing` (lower case)
--------------------------------------------------------------
#2339 Review Comments 1:
I think `if (StringUtils.isBlank (entry.getField(FieldName.DATE)))` is cleaner (not sure about the naming)
#2339 Review Comments 2:
If I remember correctly, then set/clearField already return the right FieldChange
#2339 Review Comments 3:
Remove empty line
#2339 Review Comments 4:
Do we really need a create a file?
#2339 Review Comments 5:
directly use the BiblatexCleanup.cleanup method instead of using the worker (makes tests and initialization more transparent)
#2339 Review Comments 6:
I would leave this test here to make sure that the CleanupWorker works correctly wrt to the "Convert to BibLatex" option; the other test class for the BibLatexCleanupJob then only tests this class directly.
#2339 Review Comments 7:
That was part of the code I didn't touch
#2339 Review Comments 8:
I used this approach, because it captures 2 purposes and checks the optonal
a) If the field is not present the date is empty
b) if the field is present, we assign the value, however, it still might be empty

#2339 Review Comments 9:
entry.setField(...).ifPresent(changes::add), otherwise you add null values to the list which is not so nice.
#2339 Review Comments 10:
isBlank also accepts an optional I think (if not, please add a corresponding overload), hence `Optional<String> date = entry.getField(FieldName.DATE)` should work.
#2339 Review Comments 11:
Is this variable ever used?
#2339 Review Comments 12:
Please revert these changes, as hard-coded strings in tests are actually desirable. The logic for the conversation moves FieldName.JOURNAL to FieldName,JOURNALTITLE. Hence if somebody changes `FieldName.JOURNAL = "stupid"` the test still passes but the functionality is broken.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2331 Review Comments 1:
To avoid writing that method chain multiple times in this class, maybe extract a helper method?
#2331 Review Comments 2:
please adhere to the formatting guidelines: `for (` and below `if (`
#2331 Review Comments 3:
Also formatting problems here. I should be sufficient to auto-format the file.
#2331 Review Comments 4:
Would it be possible to extract the following code in a private method? It is duplicated below and the only difference is the mode.
#2331 Review Comments 5:
Would it be possible to extract the following code in a private method? It is duplicated below and the only difference is the mode.
#2331 Review Comments 6:
Could you change this class to be independent of `JabRefPreferences`? This would get us one step closer to our desired architecture. For the load method, this is easy (just put in CustomEntryType instead of the preferences). For the saving it is a little more tricky and you will need to push code into the calling UI-class.
#2331 Review Comments 7:
Can you extract the almost duplicated lambda into a private helper method?
#2331 Review Comments 8:
Again, can the lambda be extracted into a helper method?
#2331 Review Comments 9:
Please format this properly.
#2331 Review Comments 10:
Mhmmm... This is basically just a UI-Helper class. `loadCustomEntryTypes` is called from the JabRefMain and the CLI Argument processer.

Storage is also used in the UI only...

So would it be possible and sensible to move it as is into the `gui` package?
#2331 Review Comments 11:
I would prefer to leave it as it, as the helper method would require three params (BibDatabaseMode, Menu and BasePanel) for just a simple get, if, create...
#2331 Review Comments 12:
Same as above - helper method would be overkill, imho
#2331 Review Comments 13:
Sorry, but I cannot come up with an intelligent solution for such a helper method which is not basically the same as I already wrote here :wink: 
#2331 Review Comments 14:
Not entirely, unfortunately. See: https://github.com/JabRef/jabref/wiki/High-Level-Documentation
The CLI is not supposed to call the gui, so anything accessed from GUI and CLI should be in logic, but it should be independent of the preferences. You could move the save and leave the load for instance.
#2331 Review Comments 15:
Sure, no problem. This is just a suggestion.
#2331 Review Comments 16:
No we just need a new package `net.sf.ui` which could be called by `gui` and `cli`! 

... just kidding :wink: I'll think about it...
--------------------------------------------------------------
--------------------------------------------------------------
#2329 Review Comments 1:
exist
--------------------------------------------------------------
#2328 Review Comments 1:
maybe rename to BibtexKeyDeviationChecker?
#2328 Review Comments 2:
There is another class which is called BibtexkeyChecker, so I used the naming convention from this other Checker class.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2316 Review Comments 1:
modus -> mode
#2316 Review Comments 2:
Did you changed this on purpose? All the other error reporting in this class seems to display the message instead of the stack trace (not sure what is better, but it should be consistent).
#2316 Review Comments 3:
To be honest, in my opinion these string messages don't add more relevant information.
#2316 Review Comments 4:
Yes, because if you look into the issue, ex.getMessage simply returned "null" and there was no stacktrace visible, which made it hard to locate the bug.
`Could not export file 'references.html': null`


#2316 Review Comments 5:
I looked at all other cases and there is either a logger attached or a specific Exception, e.g. a SaveException/JabRef Exception catched and the message printed, which is fine enough.
Only this two line were problematic, as the getMessage returned null
--------------------------------------------------------------
--------------------------------------------------------------
#2314 Review Comments 1:
I think the code gets even more simpler if you use the `SearchBasedParserFetcher` interface.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2307 Review Comments 1:
Imho, there is no reason for adding the period in the end. JabRef is not consistent in this, some tool tips end with periods and some do not. In my point of view, punctuation is only needed if there is a block of text for the tool tip. If it is a single sentence, no punctuation looks better.

So please remove that one :)
#2307 Review Comments 2:
What is the reason for this additional level of indentation?
#2307 Review Comments 3:
As this is a tooltip, the final dot should really be removed.
--------------------------------------------------------------
#2306 Review Comments 1:
Ignore
#2306 Review Comments 2:
Shouldn't this be `\r\n`?
--------------------------------------------------------------
#2304 Review Comments 1:
I really liked the fact that a single thread was running in the background and I could find this thread when looking at the thread dump during a debug session. Maybe use a single threaded executor service just for this file update monitor?
#2304 Review Comments 2:
This shouldn't be a problem. Maybe it makes sense for the specific threads, which are very prominent. Using an executor makes lifecycle management a little nicer at least.

I have to look into the remote thread as well, I guess it makes sense for that one, too.
#2304 Review Comments 3:
final for both fields
#2304 Review Comments 4:
Will do!
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2301 Review Comments 1:
If I see it correctly, then this map is always empty. Even if the content selectors need to be updated, I would strongly prefer that the event framework is used instead of push-forward through the BasePanel.
#2301 Review Comments 2:
Remove the "2" in the name?
#2301 Review Comments 3:
I think we can delete these comments, right?
#2301 Review Comments 4:
two times the same comment?
#2301 Review Comments 5:
Indeed :-)
#2301 Review Comments 6:
rename keys -> values
#2301 Review Comments 7:
I think `contentSelectors` is never null, but of course may be empty. Thus the `Optional` part should be removed.
#2301 Review Comments 8:
I don't like that `ContentSelectors` exposes essentially all its data directly to the outside. People will reimplement the same things again (getSelectorValuesForField == getSelectorData.get). I think the only usage of getSelectorData so far is in the foreach statements, for which it would be preferable to implement `Iterable`.
#2301 Review Comments 9:
See remark below for getSelectorData
#2301 Review Comments 10:
rename to `getContentSelectorValuesForField` or really return the content selector. By the way, the name `ContentSelector` is really strange. It is more a provider than a selector...
#2301 Review Comments 11:
Add contentSelectors
#2301 Review Comments 12:
This entry is deleted and readded in every localization file.
#2301 Review Comments 13:
I think these strings should be localized without the brackets surrounding them.
#2301 Review Comments 14:
Inline `MetaData.SELECTOR_META_PREFIX` so that it is clear if e.g. a underscore is added or not.
#2301 Review Comments 15:
I think it is better to reuse the KeywordList class here since keyword duplication is not as easy as it appears on first sight. For example, if the field contains "same test, something else" and I would like to add "test", then the simple "contains" solution marks this as duplicate although "same test" is not the same as "test" 😼.
#2301 Review Comments 16:
Good point! I changed this to use the keyword list now.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2287 Review Comments 1:
This does not belong in the gui package, but in JabRef's root package, where the classes that use it reside. Please move it.
#2287 Review Comments 2:
Ok, done!
--------------------------------------------------------------
#2286 Review Comments 1:
This code ensures that the file permission of the temporary file are kept in https://github.com/JabRef/jabref/pull/2286/files#diff-4925b1e29b2566af2796f9c99008b9ddR86, but as far as I can see there is no guarantee that the temporary file has the same permission attributes as the original file.

#2286 Review Comments 2:
@tobiasdiez  I am not sure either. However, the problem is that PosixPermission will fail on Windows with an exception

--------------------------------------------------------------
#2283 Review Comments 1:
We should probably inject this later via an ENV variable?

#2283 Review Comments 2:
This is possible yes, but what is the advantage?

#2283 Review Comments 3:
Security by obscurity. In that way, the key is not in the source, but in TravisCI environment variables, where only JabRef developers have access to by using "echo $key" in the travis.yml in a pull request. If we can somehow encrypt the JAR file, we can further prevent others from stealing the key.

#2283 Review Comments 4:
Done!
--------------------------------------------------------------
#2281 Review Comments 1:
Why "are"?
Functionality is singular 
Either you let the is or you use functionalities 

#2281 Review Comments 2:
the object is "categories" which is plural.

--------------------------------------------------------------
#2278 Review Comments 1:
Why do we need a new Exception here? I mean, what is the benefit of knowing that this is specific to the importer? My main point is that we do not really have a strategy as to when we add a new exception and when to use a specific exception.

How about just reusing the existing JabRefException? Does the job as well, as far as I see.

Edit: It seems that the github review process does not support editing comments during the review :-/ I saw that your exception is basically a rename from `ParserException` (your new name is better). Still, my question holds: Why can we not simply change this to `JabRefException`?

#2278 Review Comments 2:
Well, the code would work with JabRefException instead of ImportException, but you would loose the semantics that the exception is really related to the import and not because JabRef runs out of memory (or another general problem). But I have no strong opinion about it (mainly because you are right that we don't have a general strategy regarding exceptions).

ImportException now derives from JabRefException. Is this a compromise you can live with? 

#2278 Review Comments 3:
What about FTP?

#2278 Review Comments 4:
I see not reason for doing this.
a Path object is os independent and it can handle relative and absolute file path

#2278 Review Comments 5:
Easier: Files.copy(InputStream, Path target,  Options) 
https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#copy-java.io.InputStream-java.nio.file.Path-java.nio.file.CopyOption...-

#2278 Review Comments 6:
FileName can be simply gotten by  `sourcePath.getFileName()`

#2278 Review Comments 7:
We already have a Util method in FileUtil.getExtension

#2278 Review Comments 8:
Good point, thanks for the suggestion. Added

#2278 Review Comments 9:
I didn't add this, it was already there. Since I have no linux system right now to check if it works without the special "~" handling, I prefer not to change it right now. Feel free to open a new PR.

#2278 Review Comments 10:
`source` is a URL and thus `source.getPath()` is just a string and not a nio.Path

#2278 Review Comments 11:
Thanks for the hint. Changed it now.

#2278 Review Comments 12:
Nice!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2266 Review Comments 1:
Why do you catch this here and not at the IsbnFetcher?

#2266 Review Comments 2:
Exception should be logged.

#2266 Review Comments 3:
The IsbnFetcher returns the URL only. The fetching is done in this class.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2250 Review Comments 1:
Can't we just return an empty string here so that it compiles at other platforms, too?

#2250 Review Comments 2:
Hmm, that is a good idea, but the jar we produce will still not be platform independent (as @matthiasgeiger mentioned). Maybe we can define different gradle tasks for a platform independent jar and platform specific builds.

What do you guys feel about just directly implementing citeproc natively in Java? I can take it up if you think that it will be worthwhile.   

#2250 Review Comments 3:
Seeing that (i) the current rendering is very slow and (ii) others will surely use that library too, citeproc natively in Java is a huge win for the community. 

I fear, however, that it will be a huge effort and we would also need that effort in JabRef itself.

#2250 Review Comments 4:
Could you remove the space before `1.0` so it is a valid [SPDX license identifier]( CC-BY-SA-3.0)?
#2250 Review Comments 5:
Done!
#2250 Review Comments 6:
> What do you guys feel about just directly implementing citeproc natively in Java? I can take it up if you think that it will be worthwhile.

Hi all, CSL maintainer here. I have never worked on a citeproc implementation myself, but just a friendly warning that supporting the full CSL 1.0.1 specification is a significant undertaking. I'm cc'ing some developers who might be able to give you some additional pointers/warnings.

(cc @michel-kraemer (citeproc-java), @fbennett (citeproc-js), @inukshuk (citeproc-ruby))
#2250 Review Comments 7:
I can confirm this. In fact, I initially thought about creating a pure Java implementation myself, but citeproc-js is so mature and well-maintained, you'll probably never reach the same quality -- at least I would never be able to do so.

Anyway, there are a couple of options to improve the performance of citeproc-java. You already discovered you can use V8, although it isn't documented anywhere. You might be able to improve the performance further by caching the processor instance. But maybe you already do so, I don't know your code well enough. If you're interested we can discuss this topic further. I'd be more than happy to help.
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2234 Review Comments 1:
Please rename.

#2234 Review Comments 2:
Please rename.

--------------------------------------------------------------
#2230 Review Comments 1:
I know you only renamed the method, but o is a very bad variable name, what about fieldOrAliasName ?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2226 Review Comments 1:
Should we use mozilla as agent for all fetcher?

--------------------------------------------------------------
#2225 Review Comments 1:
Is this code appearing somewhere else? I remember, we had some issues with the minimum editor height (#1450 and #282). Does this code removal affect that, too?

#2225 Review Comments 2:
The height of the editor (or preview) is handled by the `BasePanel#adjustSplitter()` method which just sets the saved height.

The height of the preview panel is saved in `BasePanel#saveDividerLocation()` without any maximum/minimum size adjustment. Currently the minimum size of the preview panel is 5px.

The entry editor height is saved in 3 places without any adjustments, but the minimum height of the editor is limited via the editor toolbar and the layout of the tabs (which depends on the entry type) . 

--------------------------------------------------------------
#2223 Review Comments 1:
Can this be tested with mockito?

Can't it happen that the new location also points to a new location?

The client library doesn't transparently redirects and there is no utility layer in the lib? Strange....

#2223 Review Comments 2:
It sounds weird, but it is the truth!
Explaination from the sun java engineers: (Security Reasons)
http://bugs.java.com/bugdatabase/view_bug.do?bug_id=4620571

#2223 Review Comments 3:
Addtionally we should nontheless add conn.setInstanceFollowRedirects(true);

#2223 Review Comments 4:
I think this is the default!

--------------------------------------------------------------
#2217 Review Comments 1:
remove empty line

#2217 Review Comments 2:
Could you add a parameter description here?

#2217 Review Comments 3:
(i) Shouldn't the real working be done in `run`? - Maybe you just have to add some comment here why it is directly saved. Even though, the internal implementation seems to offload this using SPIN.
(ii) Has this something todo with the LOCAL/REMOTE state? Why not using this as checking condition?

#2217 Review Comments 4:
Why marked as TODO -> This should be removed, shouldn't it?

#2217 Review Comments 5:
remove?

#2217 Review Comments 6:
Remove empty line, also empty line 207 can be removed.

#2217 Review Comments 7:
Could you remove the `_` in the language strings? They are not required.

#2217 Review Comments 8:
Please comment why this is package private? Testing is not the reason. Maybe this should be private or public?

#2217 Review Comments 9:
Please comment why BasePanel is returned. -> Add `@return` JavaDoc.

#2217 Review Comments 10:
Isn't there another string available when the user uses the normal save as or is this functionality missing at the other save operation, too?

#2217 Review Comments 11:
The path should be replaced with the textfield path....

#2217 Review Comments 12:
change to "Automatically save the database to"

#2217 Review Comments 13:
Done.

#2217 Review Comments 14:
Done.

#2217 Review Comments 15:
(i) This is just going the same way as the save as functionality
(ii) I wanted to keep that general. It's fully independent of the database location. If a target file is already given, it should only save it there without asking.

#2217 Review Comments 16:
Done.

#2217 Review Comments 17:
Done.

#2217 Review Comments 18:
Done.

#2217 Review Comments 19:
Done.

#2217 Review Comments 20:
The method is private as it's only called from the same package. JavaDoc: Done.

#2217 Review Comments 21:
Unfortunately not. The normal _save as_ dialog does nothing after clicking on `save` when no path is entered. This also seems to be OK.

#2217 Review Comments 22:
Oh yes. Done.

#2217 Review Comments 23:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
#2213 Review Comments 1:
Remove copyright note

#2213 Review Comments 2:
If you feel like it, you can actually create a real ViewModel around `LogEvent`...

--------------------------------------------------------------
#2212 Review Comments 1:
Let the ViewModel decide to which entry one should scroll (i.e. introduce `errorViewModel.scrollTo` property, which should be bound to `size() - 1`). If you feel like I'm too pedantic here, just ignore my remark 😄 .

#2212 Review Comments 2:
Try to reuse the [copyLog](https://github.com/JabRef/jabref/blob/javafx/src/main/java/net/sf/jabref/gui/errorconsole/ErrorConsoleViewModel.java#L67) method (i.e. create an overload which accepts a list of `LogEvent`s)

#2212 Review Comments 3:
In my opinion this is not part of the model.. :)

--------------------------------------------------------------
#2211 Review Comments 1:
Either you change the condition and put cut instead of not cut or you wrap it in if and else

#2211 Review Comments 2:
Why did you change this?

#2211 Review Comments 3:
The new editor was only needed if the condition was met, and previously the focus was possibly set to the wrong editor (if the condition wasn't met). 

#2211 Review Comments 4:
I changed it to cut (but didn't change the semantic').

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2199 Review Comments 1:
I think the comment can be deleted.

#2199 Review Comments 2:
This can be also deleted I think. Or you could replace it to not point to the bug.

#2199 Review Comments 3:
done

#2199 Review Comments 4:
done

#2199 Review Comments 5:
Why is this removed here? If I remember this right this was needed to distinguish optional fields from fields that are displayed in the other fields tab?

#2199 Review Comments 6:
Items of the list are never used, only added to it (`displayedOptionalFields` was only used in line 234, 240, 244, and 245; or am I missing something?)

--------------------------------------------------------------
#2198 Review Comments 1:
What was our last consensus about showing menu entries in the hotkey dialog? I think, I opted for using `Localization.lang`, but we might have decided to re-translate these entries. @boceckts Do you remember? I think, we had the discussion. @tobiasdiez Is that documented in our CodeHowTo in the Wiki? 

#2198 Review Comments 2:
Why is the new shortcut not listed here?

#2198 Review Comments 3:
Why is there a space between the issue and the link?

#2198 Review Comments 4:
Must have hapened out of habit, I'l fix your comments.

#2198 Review Comments 5:
The thing I rember was about the keybinding **category** where we should use `Localization.menuTitle` as you wrote in https://github.com/JabRef/jabref/pull/1390#issuecomment-238339367. This affects only the javafx branch so far. Other than that I don't remeber a discussion about the menu entries in the hotkey dialog. :thinking: 

#2198 Review Comments 6:
In the `KeyBinding.java` only `Localization.lang` gets used. So I guess it must be right.

#2198 Review Comments 7:
This doesn't look right here?

--------------------------------------------------------------
--------------------------------------------------------------
#2196 Review Comments 1:
please extract all the initialization (entry, group, group2) to a setup method and reuse it in the tests.

#2196 Review Comments 2:
please remove `test` prefix from test names and add the expected outcome to the name (e.g. addToAlreadyPresentGroupDoesNotChangeEntry)

#2196 Review Comments 3:
same remarks as above: setup() and test names.

--------------------------------------------------------------
#2195 Review Comments 1:
why don't assign here with installedVersion? then the newestVersion==null check below is not necessary

#2195 Review Comments 2:
b/c the `newestVersion` is the new available version which the user gets prompted to download.
If I assign the `installedVersion` it just gets messy.

#2195 Review Comments 3:
Does it make sense to extract this part to the version class? Maybe as `Optional<Version> shouldBeUpdatedTo(List<Version> avilableVersions)`.
Reason: Try to minify logic in gui class.
Then you can also write tests for it 😸 

#2195 Review Comments 4:
Change to optional instead of null.

#2195 Review Comments 5:
I would prefer a if / else statement here instead of a early return.

#2195 Review Comments 6:
I would prefer a if / else statement here instead of an early return.

#2195 Review Comments 7:
Does it make sense to integrate `dev` into the development stage enum? 

#2195 Review Comments 8:
Could you please extract the parsing logic to a new `Version parse(String version)` method. The constructor should only accept already-parsed values (i.e. major, minor etc as integers and the developmentStage). In this way the Version class adheres to our conventions for parsing from string values.

#2195 Review Comments 9:
I would prefer to introduce an integer which specifies the "degree of stability". People tend to ignore comments even if they stare in their face :-)

#2195 Review Comments 10:
rename method to `parse`

#2195 Review Comments 11:
add the passed stage to the warn message to make debugging easier.

#2195 Review Comments 12:
Extracted and wrote some tests.

#2195 Review Comments 13:
I extracted that method to 2 more methods and removed the early return.

#2195 Review Comments 14:
I extracted that method to 2 more methods and removed the early return.

#2195 Review Comments 15:
Done

#2195 Review Comments 16:
I would think not as it's a stage additionally to the current stages if you work on them (eg. `-alpha` -> `-alpha-dev).

#2195 Review Comments 17:
done

#2195 Review Comments 18:
done

#2195 Review Comments 19:
done

--------------------------------------------------------------
#2194 Review Comments 1:
Why is the space here?

#2194 Review Comments 2:
Why adding new empty line?

#2194 Review Comments 3:
why not use ifPresent?

#2194 Review Comments 4:
I thought null shouldn't be used? Shouldn't the clear method used in this case? 

#2194 Review Comments 5:
Done.

#2194 Review Comments 6:
Done.

#2194 Review Comments 7:
Not recommended due to Exception handling. `try`-`catch` would take more lines.

#2194 Review Comments 8:
Yes, of course. Deleted old comment.

#2194 Review Comments 9:
you could use orElseThrow() (http://stackoverflow.com/questions/28596790/throw-an-exception-if-an-optional-is-present). But from my side it's ok how it is.

#2194 Review Comments 10:
Compare to Optional.of(...) (also below)

#2194 Review Comments 11:
Done.

#2194 Review Comments 12:
I meant the "user comments": https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/model/entry/BibEntry.java#L746

#2194 Review Comments 13:
Done.

#2194 Review Comments 14:
Could you keep this test case, but inline the contents of AutosaveSharedDatabase.bib?

#2194 Review Comments 15:
and please re-add this test in the parser test class.

#2194 Review Comments 16:
@koppor A test file has to be used as `importer.importDatabase(...)` requires a `File`. @tobiasdiez There was already a testing method `parseRecognizesDatabaseID()`.

#2194 Review Comments 17:
ok, in this case of course no special importer test is needed. sorry for the confusion 🍡 

--------------------------------------------------------------
--------------------------------------------------------------
#2189 Review Comments 1:
If I understand the PR correctly, you use glassfish for REST calls, right? We already have the following dependency for REST support: 'com.mashape.unirest:unirest-java:1.4.9'

Since there is (hopefully) no need for two different REST libraries, please use the one we already have.

#2189 Review Comments 2:
If you add a new localization entry, you also have to add the entry to the localization files. Here is an explanation how this works: https://github.com/JabRef/jabref/wiki/Code-Howtos#using-localization-correctly

#2189 Review Comments 3:
To get multi-threading, you will need to hook into the parallelization framework we have in place. Have a look at `AbstractWorker` or maybe `FindFullTextAction` as an example.

We use a more or less centrally managed threading framework to make sure we can control it properly (choosing an appropriate thread pool). Moveover, spawning off threads at all levels and code is just a premier recipe for dead locking

#2189 Review Comments 4:
Regarding localization, see above.

#2189 Review Comments 5:
This class does multiple things: GUI-related aspects and fetching of data. This should be separated. Please have a look at our architecture: https://github.com/JabRef/jabref/wiki/High-Level-Documentation

While your gui-related code should of course stay in the gui package. The code related to fetching data should go into an appropriate part of logic.

#2189 Review Comments 6:
No `System.out.println` in non-cli code! For notification, please use the logging framework.

#2189 Review Comments 7:
I guess the following is just a dummy implementation of a certificate validation and should be replaced by a proper one in the end.

#2189 Review Comments 8:
There is quite a lot of potential for refactoring in this method, which can be subdivided into a number of small methods.

#2189 Review Comments 9:
In the same fashion as there should be no sysouts in the code, `e.printStackTrace()` is equally an absolute no-go. This should also be turned into logging.

#2189 Review Comments 10:
Content parsing should be extracted into a new class.

#2189 Review Comments 11:
Because I cannot comment on the following file, I'll leave a comment here: gifs should not be located in the source tree. They should go into resources.

#2189 Review Comments 12:
We is this needed as we are already using 1.0.0-SNAPSHOT (see line 125/132)?

#2189 Review Comments 13:
I didnt change sth in this gradle file, i just deleted my dependency i added last time. it should be the original from your master branch. i will investigate why there is a change, this is not with purpose.

#2189 Review Comments 14:
https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html
http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html
:grimacing:

#2189 Review Comments 15:
Haven't looked at the code in depth, so just a quick comment here: Instead of removing the braces manually you should use the `getLatexFreeField("title")` method which removes braces and also converts some LaTeX functions correctly which might be broken by your approach (e.g., `\textsuperscript{2}`).
#2189 Review Comments 16:
Thank you very much, changed it right now. Great tip, didn't know that.
#2189 Review Comments 17:
No sure if i am on the right way with the parser. Is there an example somewhere?
#2189 Review Comments 18:
If I understand everything correctly, it is not necessary to transmit the query every time, is it? A fetching is only needed if no recommendations have been fetched, or if the title (that is the crucial ingredient to the recommendations, is it?) changes?

Could you implement such a conditional fetching? That way, we would avoid unnecessary traffic, which imho is desirable.
#2189 Review Comments 19:
The visibility of this inner class can (should) be reduced to default instead of public.
#2189 Review Comments 20:
Indentation is incorrect here.
#2189 Review Comments 21:
Strictly speaking, this is not really implementing the interface, as the query is being ignored. Instead of putting the entry into the constructor (and then reading its title from it), you can leave the constructor empty and push the latex-free title of the entry into this method. This would mean a slight and simple change on the side of `MrDlibFetcherWorker`.
#2189 Review Comments 22:
Wrong indentation here.
#2189 Review Comments 23:
Please use proper camelCasing: `sslContext`
#2189 Review Comments 24:
Please use more explanatory names, even if they seem overly long: `sslSocketFactory`.
#2189 Review Comments 25:
Actually, this class should go into `net.sf.jabref.logic.importer.fetcher`.
#2189 Review Comments 26:
Hm, I think it would be best if you extract it into a separate class and put it into `net.sf.jabref.logic.importer.fileformat`. This will complicate things for you a little (again, apologies for that). You can extend the `Importer` class and then implement your parser in the same fashion as the other classes in that package. Your importer would return a `ParserResult`, which is just a bag of `MetaData` (which you can ignore here) and a `BibDatabase`, which in turn is just a list of `BibEntry`, which is what you want here. So despite the indirection, you would end up with the same result and a nice integration in JabRef :-)

You can have a look at the other importers in that package for guidance.
#2189 Review Comments 27:
The HTML conversion could also go into the importer. Despite not belonging to the interface of `Importer` you could offer it as a public method and use it from elsewhere. The aim would be to get all SAX-related stuff into a single importer class.
#2189 Review Comments 28:
The `List<BibEntry>` that also is the result of a fetch should be stored here as well in an instance variable (and not only the HTML view of it), so that we can access it later.
#2189 Review Comments 29:
I think the `net.sf.jabref.logic.importer.Parser` interface is even more appropriate since it ignores the metadata-part by design. I think the `GvkParser` comes the closest to what you like to do.
#2189 Review Comments 30:
Or even better, implement the `EntryBasedFetcher` interface which requires a `List<BibEntry> performSearch(BibEntry entry)` - exactly what you want.
Also have a look at `net.sf.jabref.logic.importer.EntryBasedParserFetcher` which provides a semi-implementation for common cases and which is especially useful if you have a `Parser`.
#2189 Review Comments 31:
The special thing about Mr. DLib is that we have manifold algorithms that follow different approaches to calculate the recommendations. So requesting the recommendations once, does not mean that the second time you get the same recommendations. Especially because we constantly extend our database with new documents. A caching would not allow to deliver up-to-date recommendations.
#2189 Review Comments 32:
It will be not possible to use this method again for another setting. It is very tight coupled to MrDlib, rising from the document we deliver. Should it move though?
#2189 Review Comments 33:
done
#2189 Review Comments 34:
done
#2189 Review Comments 35:
done
#2189 Review Comments 36:
done
#2189 Review Comments 37:
done
#2189 Review Comments 38:
done
#2189 Review Comments 39:
The fetched recommendation should not be persisted upon saving a bib file. What @lenhard meant is that for each entry the recommendations should be fetched upon switching to the "Related articles" tab - and if the user switches then from tab to tab for the same entry the recommendation should not be queried again, but the cached result should be shown. 

From a users point of view I would also prefer this, as a) I will not have to wait again until the data is fetched and b) I'll see the same results as five seconds before and not something (potentially) completely different.

Thus, the "up-to-date" data should be fetched once for each entry editor.
#2189 Review Comments 40:
It should be moved to a `MrDLibImporter` class as proposed by @lenhard [here](https://github.com/JabRef/jabref/pull/2189/files#r88887248). The `MrDLibImporter` should implement the `Importer` interface and provide this additional `public` method.
#2189 Review Comments 41:
done
#2189 Review Comments 42:
done
#2189 Review Comments 43:
done
#2189 Review Comments 44:
done

#2189 Review Comments 45:
Can't we replace this method by a call to `org.apache.commons.io.IOUtils.toString(rd);`. See http://stackoverflow.com/a/15040553/873282
#2189 Review Comments 46:
Use `List` as type to be as general as possible.
#2189 Review Comments 47:
I don't know the current thinking of our team (couldn't find it in https://github.com/JabRef/jabref/wiki/Code-Howtos), but I would either use `else if` at the next `if`s or use `switch (s.toLowerCase())`: - see http://stackoverflow.com/a/19628273/873282
#2189 Review Comments 48:
Use `ParserConfigurationException  | ParserConfigurationException ` to combine the catch
#2189 Review Comments 49:
Add a `return` statement here

#2189 Review Comments 50:
I think, this can be removed from your commit as this was made by upstream somehow. Could happen that his came in because of a newline fix at build.gradle?
#2189 Review Comments 51:
Remove empty lines

Can the class be private static?

See https://www.amazon.de/Effective-Java-2nd-Programming-Language/dp/0321356683?tag=jabref-21 for some background on this
#2189 Review Comments 52:
Can you use `Localiztaion.lang("Error_while_fetching_from_%0", "Mr.DLib")` instead of `An error occured....`.
#2189 Review Comments 53:
Please also use Localiztaion.lang("Error_while_fetching_from_%0", "Mr.DLib")
#2189 Review Comments 54:
When thinking longer, this should throw a `FetcherException`. Please quickly check the code of the other fetchers how they are doing localization.
#2189 Review Comments 55:
Can you move that to a test case somehow?

You should use the method `getURLForID` instead of `constructQuery` as this seems the functionality you need. Don't you? - If not, please document the difference to `getURLForID` in the method comemnt
#2189 Review Comments 56:
Remove empty JavaDoc
#2189 Review Comments 57:
Do not include empty JavaDoc comments
#2189 Review Comments 58:
see above
#2189 Review Comments 59:
Beter split the HTMl append in several appends.
e.g. append(<html....>
append(url)
append(">")
#2189 Review Comments 60:
Use lamdba
addHyperlinkListener(e->{ ... })
#2189 Review Comments 61:
Better use the Autoclose feature_
try(InputStream... = new .... )
{
}
#2189 Review Comments 62:
I would change the default to false here, and just return true when it is okay

#2189 Review Comments 63:
I am not a huge fan of this huge if else structure. Either you use switch which is efficient on strings, or you could get some inspiration of here:
http://stackoverflow.com/questions/10175805/how-to-avoid-a-lot-of-if-else-conditions
#2189 Review Comments 64:
see as above, use the Autocloseable feature try ( InputStream strem = ....) , it takes care of auto closing the stream, even in the exception case
#2189 Review Comments 65:
Use the new cool Java 8 feature together with lamda: http://www.baeldung.com/java-8-sort-lambda
#2189 Review Comments 66:
See as above, not really necessary when you directly use the lamda stuff
#2189 Review Comments 67:
"Related articles" should be localized
#2189 Review Comments 68:
Please log the exceptions if they occur and remove the TODO tags
#2189 Review Comments 69:
As before, log the exception here.
#2189 Review Comments 70:
Before merging, all commented-out code (here and below) will have to be removed.
#2189 Review Comments 71:
@Siedlerchr If I have the parsing model of SAX correctly in mind, no exception means that parsing was okay. So if the execution makes it until this line, everything should be fine.
#2189 Review Comments 72:
What is this comment for?
#2189 Review Comments 73:
The logging of the exception is duplicated here. Please remove one of the lines.
#2189 Review Comments 74:
This method name violates the Java code conventions. Suggestion for renaming: `convertToString`
#2189 Review Comments 75:
How to access this information?
#2189 Review Comments 76:
You are referring to the todo comments in the two lines above?
Check the class `net.sf.jabref.logic.util.BuildInfo` and the used language is generally accessible using `prefs.get(JabRefPreferences.LANGUAGE)` - however, this should not be accessed from the `logic` package directly (see [documentation here](https://github.com/JabRef/jabref/wiki/High-Level-Documentation#package-structure)), but you should set this information in a field using the constructor of your `MrDLibFetcher`
#2189 Review Comments 77:
@matthiasgeiger Congratulations to the 100th comment in this PR. You are allowed to buy yourself a treat :-)
#2189 Review Comments 78:
Oh... lucky me that this is not basketball... There I would have to buy a crate of beer for the team ;-)
#2189 Review Comments 79:
unfortunately, this didn't work
#2189 Review Comments 80:
done
#2189 Review Comments 81:
solved by switch case
#2189 Review Comments 82:
done
#2189 Review Comments 83:
done
#2189 Review Comments 84:
done
#2189 Review Comments 85:
done
#2189 Review Comments 86:
done
#2189 Review Comments 87:
The interface `EntryBasedFetcher` doesn't have the method `getURLForID`. This is in the class `IdBasedParserFetcher`. Should I extend the  interface , or simply rename the method?

#2189 Review Comments 88:
what do you mean with empty here?
#2189 Review Comments 89:
done
#2189 Review Comments 90:
Just describe what is returned after the `@return` statement
#2189 Review Comments 91:
done
#2189 Review Comments 92:
done
#2189 Review Comments 93:
done
#2189 Review Comments 94:
done
#2189 Review Comments 95:
done
#2189 Review Comments 96:
so, anything to change here?
#2189 Review Comments 97:
done
#2189 Review Comments 98:
done
#2189 Review Comments 99:
done
#2189 Review Comments 100:
done
#2189 Review Comments 101:
done
#2189 Review Comments 102:
done
#2189 Review Comments 103:
done
#2189 Review Comments 104:
done
#2189 Review Comments 105:
done
#2189 Review Comments 106:
done
#2189 Review Comments 107:
Remove empty lines
#2189 Review Comments 108:
Please move the logic related to `relatedAcrticlesTabNeedsRecommendations` to the `EntryEditorTabRelatedArticles` class. Here you just inform the tab that it got the focus.
#2189 Review Comments 109:
*recommendations
#2189 Review Comments 110:
I think you want bibEntry.getField since the "LatexFree" version may mess with your html.
Moreover, please be careful with null exceptions when calling `.get()`. Better:
`bibEntry.getField("html_representation").ifPresent(htmlContent::append)`
#2189 Review Comments 111:
Location.lang
#2189 Review Comments 112:
Instead of `"title"` please use FieldName.TITLE.
#2189 Review Comments 113:
Please make all methods private if they are not used outside of this class.
#2189 Review Comments 114:
I think this field can be converted to a local variable in `requestRecommendations`
#2189 Review Comments 115:
Use Java8 lambda expressions and call execute after adding the change listener.
#2189 Review Comments 116:
Combine catch statements.
#2189 Review Comments 117:
Please pass (I think it was) `Globals.BuildInfo` to the fetcher instead of creating a `new BuildInfo()` as this operation is a bit cost-intensive.
#2189 Review Comments 118:
Please pass the language as a parameter to the constructor. We try to avoid preference access in the logic part.
#2189 Review Comments 119:
FieldName.TITLE again
#2189 Review Comments 120:
Please just throw an `FetcherException` here, which you then can catch in the related articles tab and show a proper error message there.
#2189 Review Comments 121:
Please rethrow as FetcherException
#2189 Review Comments 122:
Also rethrow
#2189 Review Comments 123:
Please reuse our `URLDownloader` (or something similar) for making the request 
#2189 Review Comments 124:
rethrow
#2189 Review Comments 125:
Use UriBuilder (in the apache package if I remember correctly).
#2189 Review Comments 126:
You can just inline these constants.
#2189 Review Comments 127:
Please try to extract to new inner class
#2189 Review Comments 128:
FieldName.Author etc
#2189 Review Comments 129:
I think `Parser` instead of `Importer` would be sufficient since you don't really need `isRecognizedFormat` (you more or less know that you get a valid format from your server)
#2189 Review Comments 130:
done
#2189 Review Comments 131:
I can't see the logic in here. What exactly do you want to move?
That would need a listener concept, or am i wrong?
#2189 Review Comments 132:
oh thx. done
#2189 Review Comments 133:
done
#2189 Review Comments 134:
done
#2189 Review Comments 135:
done
#2189 Review Comments 136:
done
#2189 Review Comments 137:
is used from outside
#2189 Review Comments 138:
done
#2189 Review Comments 139:
done
#2189 Review Comments 140:
done
#2189 Review Comments 141:
done, it is Globals.BUILD_INFO
#2189 Review Comments 142:
done
#2189 Review Comments 143:
I think that is a nice way to handle the error message. It is stored within a bibentry. In both cases, with or without error, a bib entry is displayed. Exception handling at this point seems to be more inconsistent and reduces readability in the related article tab class.
#2189 Review Comments 144:
done
#2189 Review Comments 145:
done
#2189 Review Comments 146:
Before we agreed that the use of Unirest is fine. 
"You generated the distributed code using glassfish, right? As indicated in my comments, parts of that will need to be rewritten using unirest."
I would really not like changing that again.
#2189 Review Comments 147:
done
#2189 Review Comments 148:
This will restrict us with custom formats on mdl side.
#2189 Review Comments 149:
Changing the interface again now will cause too much work. A additional check for the right format is potentially not wrong.
#2189 Review Comments 150:
done
#2189 Review Comments 151:
done
#2189 Review Comments 152:
What I want is that the EntryEditor does not know about the caching of the recommended articles. I.e. here it just calls `relatedArticlesTab.focus()` (or whatever you want to name it) and in the focus method you have the check ala 
````
if (relatedAcrticlesTabNeedsRecommendations) {
   requestRecommendations();
}
````
#2189 Review Comments 153:
In my opinion a clear separation between the "everything worked, so display the received entries" and "ups, there was an error..." case is preferable.
#2189 Review Comments 154:
I don't understand your comment. The UriBuilder provides a nice way to build the query and doesn't influence how you process it on the serverside. 
#2189 Review Comments 155:
Didn't know that you already discussed the Unirest thing. Sorry.
Nonetheless, it might be a good idea to use the URLDownloader especially since it already handles SSL certificates and thus might resolve the issue Jörg was mentioning. 

#2189 Review Comments 156:
Please provide a concrete license. Is it CC-0? https://creativecommons.org/publicdomain/zero/1.0/
#2189 Review Comments 157:
Why empty lines?
#2189 Review Comments 158:
Is that possible? I would also like to see the code at places where it belongs. The `relatedArticlesTab` should do the recommendations requesting `onfocus` and not triggered here.
#2189 Review Comments 159:
Can this really happen? - a list of BibEntrys and one of them is `null`?
#2189 Review Comments 160:
Incldue the condition in line 108
#2189 Review Comments 161:
Well, Snap CI wanted to have there an empty line. That caused it to fail^^
#2189 Review Comments 162:
This is just about code style. Please have a look at http://www.leveluplunch.com/java/examples/construct-build-uri/  "Construct URI w/ query parameter"
#2189 Review Comments 163:
OK for me to leave as is even though this does a complete parsing and is not the intention of the `isRecognizedFormat` method.

Further, there is no XML schema validation made. Where is the XML schema? - This should be a next step in Mr.DLib development.
#2189 Review Comments 164:
Yes, please. This code is much too long in this method.
#2189 Review Comments 165:
Please do not add unnecessary empty lines.
#2189 Review Comments 166:
New inner Class?
Do you mean to create a Class at the very bottom, or extract it completely in a new class.
#2189 Review Comments 167:
yes class at the bottom or if you prefer a new class is also ok
#2189 Review Comments 168:
Please remove debug logging. (or really use LOGGER.debug)
#2189 Review Comments 169:
BibEntry
#2189 Review Comments 170:
Remove these empty docs
#2189 Review Comments 171:
Please also create a functional test...i.e. that a proper list of bibentries is returned.
Also have a look at https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases and make sure that the tests adhere to these best-practices.
#2189 Review Comments 172:
In the importer I test for a proper list. Have a look at the maxTest(). There I am taking a response from the server an look afterwards if the fields are set correctly.
What could I test here else? Because the Servers response will be different every time.
#2189 Review Comments 173:
> Because the Servers response will be different every time.

Really? I thought that you create a concrete BibEntry for a valid publication and then check that a certain other publication (e.g. by the same author about a related topic) is returned as recommendation. But if your recommendation algortithm is completely unpredictable/random, then this approach does not work. 
The idea is also to have a proper test that shows whether the SSL problem is fixed or not (i.e. if at least the ci server can access the recommendation without SSL error) 
#2189 Review Comments 174:
They are not completely unpredictable. 
We are constantly extending our database. This means new documents can be recommended. Though the output of the server can be changed. 

The test above does a server request. So how can I find the result of the ci-server ?
#2189 Review Comments 175:
done
#2189 Review Comments 176:
done
#2189 Review Comments 177:
adjusted the test cases
#2189 Review Comments 178:
Sorry, I don't see any new tests for the fetcher. Can you point/link me to them?
It is ok if you modify your entries on the server side and thus the test might fail in the future. It is still better to have a test that might need modifications in the future, instead of having no test at all.
#2189 Review Comments 179:
This prints a message into the log file *every time* the method is called. Please reduce the log level to debug.
#2189 Review Comments 180:
Still unanswered.
#2189 Review Comments 181:
no it can't - i think. but it does not kill performance and is securing if it is happaning. Should I delete the if ?
#2189 Review Comments 182:
The english translation must be EXACTLY the same as the key.

Thus, if you wan't to change the casing to DLib you'll have to change the key (in all files) as well.
--------------------------------------------------------------
#2188 Review Comments 1:
What about [Path.ChangeExtension](https://msdn.microsoft.com/en-us/library/system.io.path.changeextension%28v=vs.110%29.aspx). Ahhh damn, we are in the Java world, so:
probably `return originalPath.resolveSibling(BackupEnding);` (or something similar, but there should be a way to change the extension without converting to string)
And we should probably extract it to a helper class (because its used not only for autosave but also backup).

#2188 Review Comments 2:
Please follow the naming convention for tests as [outlined in the wiki](https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases) 😸 
That is, no ̀ test` prefix and the test name should state the desired outcome (i.e. getBackupPathAppendsSavExtension)

#2188 Review Comments 3:
The code was in `FileSaveSession` - I moved it to `FileUtil`.

We don't change the extension, but merely just add a new one. If we changed it, we would have to rely to String magic - at least according to answers to a [similar question on code review](http://codereview.stackexchange.com/questions/110720/adding-old-to-a-file-name/110739#110739?newreg=7a30458926424b07a700b627007e6701).

#2188 Review Comments 4:
Fixed 😇 

--------------------------------------------------------------
#2187 Review Comments 1:
At first sight it's quite obscure to which field these comment belongs.
Can you please move them (and the other comments) before their corresponding field and use JavaDoc?

#2187 Review Comments 2:
I don't know to which field the comment belongs. It is not my comment. Parts of the comment seem to be fragmented. Can you help?

#2187 Review Comments 3:
I'll fix them (and some others) in another PR; less trouble for you!

--------------------------------------------------------------
#2186 Review Comments 1:
Better suggest `https://`

#2186 Review Comments 2:
is the "k" after and a typo?

--------------------------------------------------------------
--------------------------------------------------------------
#2179 Review Comments 1:
Is this bug already present in version 3.6? If not, then please remove the changelog entry since in the changelog we only want to state what changed relative to the previously released version.

#2179 Review Comments 2:
Reformat to `} else {`on one line please.

#2179 Review Comments 3:
@JabRef/developers Can we make this more robust by handling the null value and clearing of the key inside the `setCiteKey()` method? Like:

``` java
setCiteKey(key) {
if (key == null) {
clearCiteKey(key);
} else {
...
}
```

But maybe this is might mask programming faults then when not intentionally passing null to setCiteKey...

--------------------------------------------------------------
#2178 Review Comments 1:
I don't like the tests names too much since they don't describe the behavior which is expected but the input.
What about `prepositionIsLeftUntouched` and `theAfterColonGetsCapitalized` ?

#2178 Review Comments 2:
Formatting (indention) seems to be off.

#2178 Review Comments 3:
Thanks for splitting the tests!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2167 Review Comments 1:
This is not the same. `Firstname Lastname and Firstname Lastname and others` vs `Firstname Lastname and others`, also `and` and `and others` should not be translated. See https://github.com/JabRef/jabref/pull/2147#discussion_r82714423, https://github.com/JabRef/jabref/pull/2147#discussion_r82861252
Just translate `Firstname Lastname`.

#2167 Review Comments 2:
I'm not sure if you should translate strings that aren't localized. @JabRef/developers are these strings intentionally unlocalized?

#2167 Review Comments 3:
No idea. But do not touch them in this PR. 
Only update **your Properties file**, as otherwise you break all other languages, too°!

--------------------------------------------------------------
#2165 Review Comments 1:
I think, this generates the string displayed in the preview panel. Maybe, the message should be "Cannot generate preview based on selected citation style".

Further, "Citation" is not a fixed term, which should be uppercased. Put it lower case as most English words are lower case.

#2165 Review Comments 2:
fixed

--------------------------------------------------------------
#2164 Review Comments 1:
Maybe add the name and link to the designer?
--------------------------------------------------------------
#2163 Review Comments 1:
Does it make sense to set the highlight pattern automatically as a last step in `setPreviewLabel` ?

#2163 Review Comments 2:
In some cases, we may want to set a preview label, but not want it to be search highlighted. 
For example, when CSL preview is being loaded or if the CSL preview generation failed and we are displaying an error message.

#2163 Review Comments 3:
Ok, thanks for the follow-up. I merged your PR now.

--------------------------------------------------------------
#2162 Review Comments 1:
READ_STATUS_READ

#2162 Review Comments 2:
Thanks! The wrong Iconbar icons (see below) is certainly also just some misassigned. I'll have a look.

EDIT: It seems that only the RANKING uses a larger icon (which I accedentally overwrote, will fix tomorrow)

#2162 Review Comments 3:
Why not switch-case here?

#2162 Review Comments 4:
I think a switch-case would be more readable and since java 7 it is possible to directly a switch on Strings:
http://docs.oracle.com/javase/7/docs/technotes/guides/language/strings-switch.html
It uses the equals method 

#2162 Review Comments 5:
and:  The Java compiler generates generally more efficient bytecode from switch statements that use String objects than from chained if-then-else statements.

#2162 Review Comments 6:
Heh, I was expecting that. Why not turn the whole thing into a `HashMap` instead of an if/else or a switch? I have no clue if that is preferable over the other alternatives, though.

Side remark: This would not be switching on a String, but on an enum value.

#2162 Review Comments 7:
Hm. When it is already an enum, why not setting the Icon(Name) directly as Enum parameter?
Then we neither need a switch nor a hashmap

#2162 Review Comments 8:
@Siedlerchr Could you explain some more? I don't really understand what you mean with setting the icon directly as enum parameter?

#2162 Review Comments 9:
@lenhard  Yeah. Just add a fieldfrom the type Icon in the Special Field enum
then you could directly assign the Icon and we don't need a Hashmap or the equals stuff.

e.g `MY_SPEC_FIELD("asdf"...,....,IconTheme.JabRefIcon.READ_STATUS.getSmallIcon())`

#2162 Review Comments 10:
No. That's not possible/desired as the enum `SpecialField` is part of `logic` and should not contain UI elements (such as `JabRefIcon`)

@lenhard Icons for `Priority` and `Read Status` in the Icon bar are still too small :wink:

#2162 Review Comments 11:
Is this a good idea to return here null?

#2162 Review Comments 12:
No newline at end of file

#2162 Review Comments 13:
Please add a deprecated javadoc comment, too.
http://stackoverflow.com/questions/5039723/should-i-use-javadoc-deprecation-or-the-annotation-in-java

#2162 Review Comments 14:
Well, the code is actually unreachable, since all enum values are cases. The compiler is just not smart enough to detect it, although it would be feasible. The default case would only be reached if someone added a new SpecialField and forgot to add an Icon mapping. So I would say it does not really matter.

#2162 Review Comments 15:
Will add!

#2162 Review Comments 16:
Will do!

#2162 Review Comments 17:
Proposal: unify most of the UI-helper classes in a wrapper of the SpecialField enum.
Details: create a class SpecialFieldViewModel (the ViewModel suffix comes from JavaFX) which takes a SpecialField as a constructor argument. This class provides then access to all gui-related information like `getAction`, `getActionName`, `getIcon` etc.
Probably it makes sense to distinguishes between special fields which act as toggle (relevance, quality) versus multi-value fields (rank). The latter has a method which gives access to gui-wrappers around all `SpecialFieldValue` (which then has `getActionName` etc.).

I think this approach is more "object oriented" and does not need static helper classes.

Moreover, it reduces gui code since you can use enumsets, in pseudo-code:

``` java
Enumset.of(relevance, quality, ...)
    .map(to ViewModel wrapper)
    .foreach(
         specialField -> actions.put(specialfield.getActionName(), specialfied.getAction)
    );
```

#2162 Review Comments 18:
It looks like this method is logic code and can be moved to `SpecialFieldsUtils`

#2162 Review Comments 19:
Foreach over all special fields? `EnumSet.ofAll(SpecialField.class)` (or similar code) gives you a list of all enum values. 

#2162 Review Comments 20:
Mhh I would remove the `localizationKey` from the enum and create a method which returns the localized name similar to the tooltip method. (since localization is a gui thing... and you were just clever enough to hide this dependency; but if I change the key there in the model I still need to change the gui-related localization files).

#2162 Review Comments 21:
Can these columns be created in a foreach? I would prefer this instead of public static variables.

#2162 Review Comments 22:
Again: foreach?

#2162 Review Comments 23:
Can we throw an exception (NotImplemented?)? I think this makes the semantics cleaner (and gives a proper exception at the right moment instead of a NPE in some random place)

EDIT by @lenhard: For some weird reason I cannot reply to this comment. Anyway, this is fixed.

#2162 Review Comments 24:
Rename PRIO_1 (2/3) to PRIORITY_HIGH?

#2162 Review Comments 25:
Is there a reason why the switch is over the action name and not over the enum values?

#2162 Review Comments 26:
see above.

#2162 Review Comments 27:
exception?

#2162 Review Comments 28:
foreach?

#2162 Review Comments 29:
no abbreviated names please (c, val and further down s) 😈 

#2162 Review Comments 30:
foreach?

#2162 Review Comments 31:
move to `SpecialField` class (since it is similar to "parse")

#2162 Review Comments 32:
isSingleFieldValue is automatically determined by values.size() == 1, right?

#2162 Review Comments 33:
actionName sounds very much like gui.... I would suggest the same as for the `localizationKey`: converter `FieldValue -> ActionName` in the gui.

#2162 Review Comments 34:
Change test name.

#2162 Review Comments 35:
change test name (no named compound anymore)

#2162 Review Comments 36:
dito

#2162 Review Comments 37:
well, I think you got the pattern: search and replace 😄 

#2162 Review Comments 38:
Excellent idea! I even found a broken mapping that way, thanks!

#2162 Review Comments 39:
Added

#2162 Review Comments 40:
This is the only place, where returning "" is valid. Not all field values have menu strings. The ranks just have the star icons displayed and no text. But I guess it is better to explicitly assign mappings to all values and throw an exception in case of an unknown mapping, so I implemented this here as well.

#2162 Review Comments 41:
Done

#2162 Review Comments 42:
I agree this is a good idea. The static methods were probably just an interim stage to a better design. I am gradually moving the special fields now according to your suggestion.

#2162 Review Comments 43:
I agree, done.

#2162 Review Comments 44:
done

#2162 Review Comments 45:
I admit that this was itching me. It is now moved out of SpecialField into the gui.

#2162 Review Comments 46:
Not really. Fixed.

#2162 Review Comments 47:
Same as above, fixed.

#2162 Review Comments 48:
There is just one value used here, so, as far as I see, no potential for a forEach.

#2162 Review Comments 49:
Done

#2162 Review Comments 50:
Improved

#2162 Review Comments 51:
Done

#2162 Review Comments 52:
I am not sure if I was using the right schema for you, but at least I tried to improve all of the test names.

#2162 Review Comments 53:
done

#2162 Review Comments 54:
Done

#2162 Review Comments 55:
You are of course correct, done.

#2162 Review Comments 56:
Done

#2162 Review Comments 57:
Well, the columns differ somewhat (multi-value, versus single-value), so not in an entirely beautiful way. But I turned the whole thing into a package-private non-static builder class, so it is much less ugly.

#2162 Review Comments 58:
I think I meant foreach over the special fields (ranking, relevance, ...).

#2162 Review Comments 59:
Why three times the instantiation? Think, it won't be a memory issue, will it?

#2162 Review Comments 60:
Could that be tested, too? - It is set by a preference. Default is to sync.

#2162 Review Comments 61:
This comment can be removed

#2162 Review Comments 62:
This comment should be moved somewhere else, shouldn't it?

#2162 Review Comments 63:
No test coverage. Is this intended?

#2162 Review Comments 64:
Why no CLEAR_RELEVANT? Maybe a comment should be added to the class itself how toggle values are distinguished from multi-values. Is it only because of the number of values given to the enum?

#2162 Review Comments 65:
Can we achieve 100% coerage here.

#2162 Review Comments 66:
Why not code covered?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2154 Review Comments 1:
use assertEquals(Optional.empty(),...)

--------------------------------------------------------------
#2153 Review Comments 1:
not needed?

#2153 Review Comments 2:
Removed. Travis is failing, but that doesn't seem to be related to this PR.

--------------------------------------------------------------
#2152 Review Comments 1:
Please use `new BibtexParser(importFormatPreferences).parse(new StringReader(bibtexEntry))` (or `Collection<BibEntry> entries = new BibtexParser(importFormatPreferences).parseEntries(bibtexEntry);`.

#2152 Review Comments 2:
Same here.

#2152 Review Comments 3:
Please remove the assert statement here. Only one assert / failure reason per test. If you think that is valuable to test that the other type is written correctly, then extract this test to a new test method (I would actually prefer two tests for writing and reading separately instead of a roundtrip test) 

#2152 Review Comments 4:
same remark as above.

#2152 Review Comments 5:
Done.

#2152 Review Comments 6:
Done. I've moved the assert to a new test method.

#2152 Review Comments 7:
If you just write it, then there is no need to read it from a string...thus please create the BibEntry by hand in these cases.

#2152 Review Comments 8:
The purpose of this method was to ensure that the String was read in correctly. The other test method is still a roundtrip test. Then I don't think it makes much sense to just create the entry here by hand.

So I think I should change the roundtrip test to a test to just write the entry (and there I will create the entry by hand). 

#2152 Review Comments 9:
If you have a test for reading something, then you should place it in the ParserTest ;-)

#2152 Review Comments 10:
Ok, removed it from here and placed it to the ParserTest 😄 

#2152 Review Comments 11:
Why is the resourceName  necessary? The other tests don't use it

#2152 Review Comments 12:
I've wanted to test explicit against the testfile "reallyunknowntype.bib". If I see right, the other tests don't use such test files.

#2152 Review Comments 13:
I think this is not necessary in this case. If you really want to test it, then please use the Resources directory handling, like in the`BibTexImportetTest.class` and do not hardcode the relative dir. 
`Paths.get(BibtexImporterTest.class.getResource("BibtexImporter.examples.bib").toURI());`

#2152 Review Comments 14:
Yes better compare it directly against a hand-created bibEntry (copy from above). 
Then you can use `assertEquals(singletonlist of expected entry, entries)`.

Apart from this last remark (sorry for being pedantic) this looks good to me and can be merged.

#2152 Review Comments 15:
Ok, I've created the bibentry now by hand.

--------------------------------------------------------------
#2151 Review Comments 1:
Please rename i to iterator.

#2151 Review Comments 2:
And why not using stream with filter? Or even better entries.removeIf?

#2151 Review Comments 3:
please delete empty line.

#2151 Review Comments 4:
Please don't use optionals as params. They should only be used as return values. See https://github.com/JabRef/jabref/pull/1577#r75998843

#2151 Review Comments 5:
Done.

#2151 Review Comments 6:
I always like a little visual separation between the members from the methods, and seen this in some other classes too.

#2151 Review Comments 7:
Lambdas still doesn't come that easy to my mind.
I rewrote this and the part just beneath with lambdas.

#2151 Review Comments 8:
I know that I got many comments for empty lines like this.
But I think in this case it's okay to leave it.

#2151 Review Comments 9:
Please readd the comments from the old code if possible. Here, the comment is `// Remove the entry, because its key is already set:`

#2151 Review Comments 10:
Can this ever happen? - If yes, please construct a test case covering this line.

#2151 Review Comments 11:
I am not sure whether `null` should really be treated as real key. Why not excluding null from FieldChanged, EntryRemoved, and EntryAdded?

As a consequence, null always appears 0 times in the database.

#2151 Review Comments 12:
Can only happen if the `BibtexKeyPatternUtil#getAddition` method is buggy.

#2151 Review Comments 13:
if the key is `null` `removeKeyFromSet` will return immediately.
now I use the `ifPresent` method of the optional. 

#2151 Review Comments 14:
I added some comments

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2147 Review Comments 1:
Maybe you could rename some variables here.
g- > graphic
h -> height

#2147 Review Comments 2:
Why not `""` instead of `null`?

#2147 Review Comments 3:
Wrong text

It should be `Firstname Lastname and Firstname Lastname`. `and others` must not be translated as it is a fixed bibtex term used to write `et al.` or something else as configured in the bibtex style.

The rendering of your example is
Lastname, F.; Firstname; Lastname & others
but it should be
Lastname, F.; Lastname, F. & others 

#2147 Review Comments 4:
Please add javadoc comments at least describing `title`. Isn't title the `textWhenNotFocused`

Please rename `textWhenNotFocused` to `placeholder` to be in line with HTML5 --> http://www.w3schools.com/tags/att_input_placeholder.asp

#2147 Review Comments 5:
I think, as our "normalize to bibtex name format" formatter will produce "Last, First and Last, First and other", the text should be in this form.

#2147 Review Comments 6:
Done

#2147 Review Comments 7:
I changed it to `Localization.lang("Firstname Lastname and Firstname Lastname") + " and others"`

#2147 Review Comments 8:
Done.

#2147 Review Comments 9:
Done.

#2147 Review Comments 10:
I'd suggest removing the `and` from the localization as well as it is required that it stays `and`, therefore making it easier to translate.

#2147 Review Comments 11:
I changed it accordingly.

--------------------------------------------------------------
--------------------------------------------------------------
#2141 Review Comments 1:
Why did you change that to Metal as we want to avoid it here?

#2141 Review Comments 2:
Apparently Plastic is inheriting the method from Metal.

#2141 Review Comments 3:
I can change it back though. Was also a bit surprised.

#2141 Review Comments 4:
I think, it is because the types are objects. If one switches from bibtex to biblatex, the types get different objects even though the string representation is the same. This loop ensures that the type objects match the type of the database.

#2141 Review Comments 5:
Could you please fix it by wrapping everything in a `if( child != null)` 

#2141 Review Comments 6:
Isn't it better that the author of the faulty code fixes it when the implementation is finished? I do not really see how this code was ever approved...

#2141 Review Comments 7:
OK! I'll remove the comment.

#2141 Review Comments 8:
Oh, yes. The problem is actually passing `null` to a metod with an `Objects.requireNonNull` as the first call... So clearly that code was never executed.

#2141 Review Comments 9:
> Isn't it better that the author of the faulty code fixes it

The nice thing about open source code is that there is no "your / mine code", everyone is responsible for all the code. I can't count how many times I already fixed some small bugs which somebody else created and similarly many others (including you) cleaned up my mess.

Please just add the if statement there and then merge this in directly (ready-for-review removed for this reason). 

#2141 Review Comments 10:
The first comment was not really relevant here. Again, the thing is not that `child` becomes `null`, although that will also break the code, but that whenever `child.setParent(null)` is called there will be an NPE as the code for `setParent`reads (second comment):

```
     protected void setParent(T parent) {
         this.parent = Objects.requireNonNull(parent);
}
```

Hence, yes, I can add the if statement, but that is not really solving the problem I pointed out in the comment.

#2141 Review Comments 11:
And, no, I have no idea how the code is supposed to actually work, but I can notice that the `removeChild` was never called as a call to it would throw an NPE in `setParent`. (And I have also fixed other persons bugs. This one I cannot really see why it was ever merged to begin with though. I would exepect even half finished merged code to not throw NPEs on every possible call to it.)

--------------------------------------------------------------
--------------------------------------------------------------
#2139 Review Comments 1:
new Bib..?

#2139 Review Comments 2:
new Bib?

#2139 Review Comments 3:
Indent?

#2139 Review Comments 4:
The idea was to do another regex to handle this case, but never got around to it.

#2139 Review Comments 5:
Same here (although I could have rerun the same, was traveling and then ran out of time).

#2139 Review Comments 6:
Better now. (Although not actively changed as far as I recall).

#2139 Review Comments 7:
Could you also please extract `new BibtexParser(prefs)` the the setup method.

#2139 Review Comments 8:
No. Not now. 

#2139 Review Comments 9:
Why? I think the whole purpose of your PR is to replace the static calls with instance calls. Of course, the code should be cleaned up accordingly afterwards. For the tests it is our convention (and not just our but also the one from JUnit) that objects under test are initialized in the setup method.

#2139 Review Comments 10:
Well, I changed about 100 or so calls marked deprecated by someone else (as far as I can tell, very few of the similar calls were actually replaced by whoever marked it as deprecated, not even in the actual code). There are still things to clean up before the methods are removed and all tests there can make use of it.

#2139 Review Comments 11:
We talked about the `deprecated` issue in the last devcall. Since you weren't there, I give you a short summary. 
The consensus was that we should concentrate more on new features / bug fixing instead of cleaning up the code since the code quality is rather high now (at least in logic + model). But of course there are still some problematic code, for example superfluous methods / strange implementation / things which look like duplicated code but there might be subtle differences. If one works one some PR and notice such a flaw in the code, then one can simple mark the corresponding method as deprecated (and document why one did this). Then the deprecated flag just means "try not to use this method anymore". The hope was that while modifying some code which still uses the deprecated method one has enough context to be able to decide if the corresponding call can be replaced by something else. Thus at some point the usage of the deprecated method dies over time and at some point it can be replaced. So the aim was to reduce the amount of pure refactoring/cleanup PRs and let the code evolve over time in the right direction by smaller changes (with context). This of course doesn't mean that cleanup PRs like this one here don't have value - in contrast. But they are are often harder to review.

Anyway, please clean the tests (ready-for-review removed until then)

--------------------------------------------------------------
--------------------------------------------------------------
#2135 Review Comments 1:
Please use spaces between the arguments.

#2135 Review Comments 2:
done

--------------------------------------------------------------
#2132 Review Comments 1:
This also removes the `RemoveBracesFormatter`, which is not part of the computation of latex-free fields. So, if I understand the code correctly, this changes functionality.

#2132 Review Comments 2:
I re-added it, but I don't know if its important. The latex-free field and the removeBraces are only used in the validation method, in the `findDOI` method the normal field is used.
Maybe someone has to look over it.

#2132 Review Comments 3:
Agreed! At least for this PR, this is now good enough.

--------------------------------------------------------------
#2131 Review Comments 1:
Shouldn't it be `!multiple`?

#2131 Review Comments 2:
Nice catch, fixed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2121 Review Comments 1:
Why do you change the importer if you only want to enable the tests?

#2121 Review Comments 2:
Add spaces after and before "+" and after ",".

#2121 Review Comments 3:
Why did you move this down here?

#2121 Review Comments 4:
Remove blank in front of method parameter.

#2121 Review Comments 5:
Since this is always the same, please move it to a (new) test util class.

#2121 Review Comments 6:
Since this is always the same, please move it to a (new) test util class.

#2121 Review Comments 7:
Should be `MSBibExportFormatTestFiles.class.getPackage().getName()`, Copy paste mistake?

#2121 Review Comments 8:
Same as previous, should be `ModsExportFormatTestFile.class.getPackage().getName()`.

#2121 Review Comments 9:
Same as previous two comments, also applies to the other importer/exporters.

#2121 Review Comments 10:
Why is there a new test file? This is not part of this pr, only importer/exporter test classes should be changed.

#2121 Review Comments 11:
the keywords were changed from ", " to a char ','. Thats why the test won't work. This wasn't detected because the test weren't running.

#2121 Review Comments 12:
done.

#2121 Review Comments 13:
Done.

#2121 Review Comments 14:
Done.

#2121 Review Comments 15:
Done.

#2121 Review Comments 16:
Moved it back.

#2121 Review Comments 17:
Yes, I've changed it.

#2121 Review Comments 18:
Yes, done.

#2121 Review Comments 19:
I am not happy with that as it heavily relies on hard coded things. Normally the class path and resource dir should be resolved correctly. I bet there is one thing different with gradle and the resource dir vs in eclipse

#2121 Review Comments 20:
Done.

#2121 Review Comments 21:
Done. Removed it.

#2121 Review Comments 22:
@Siedlerchr yeah you're right. This problem seems to be a very well known [intelliJ problem](http://stackoverflow.com/questions/27046642/access-file-in-junit-test-in-gradle-environment) that occurs here as well. I've added a gradle task that copys the testfiles to where they should be.

#2121 Review Comments 23:
Why to you wrap in Paths.get() Isn't tmpFile.getPath already giving back a Path object?

#2121 Review Comments 24:
I'm not sure about our conventions regarding code indention. @koppor is this ok?

#2121 Review Comments 25:
No, it's returning a string. 

--------------------------------------------------------------
#2120 Review Comments 1:
1. this file is not in `utf-8` thus the `é` makes problems with the python script (it should make problems with JabRef too as they're loaded with `utf-8` in Java)
2. isn't this french? 

#2120 Review Comments 2:
Indeed, I copied this into the wrong language file... Thanks a lot for spotting!

I will fix this directly on master, but I am actually not sure what to do with the UTF-8 problem. I copied the string from the french localization file. Do encodings differ between the localization files?

#2120 Review Comments 3:
They all should be UTF-8.

#2120 Review Comments 4:
Sadly they do differ! (although JabRef ignores them and loads them all with `utf-8`)

#2120 Review Comments 5:
@lenhard Can you change the encoding of the farsi file? Should be no problem there are no translations in this file.

#2120 Review Comments 6:
See 85baf0b15f04308ca079f1983bedf8961e16161 At least that resolves the mixup. I am not sure about the encoding. At least I opened the file in notepad++ (which recognized it as utf-8), clicked "convert to utf-8", and saved it. Hopefully that worked.

#2120 Review Comments 7:
And make sure that it's UTF-8 without BOM..

#2120 Review Comments 8:
@Siedlerchr: should be. At least that is how my notepad recognizes it and how I saved it. There is another option "UTF-8 with BOM", which I did _not_ select.

--------------------------------------------------------------
#2118 Review Comments 1:
I think the comment should be one line above.

#2118 Review Comments 2:
Could you shortly explain, why a class without data is needed ?

#2118 Review Comments 3:
Would be nice if you could split autosave in a method instead of a variable, since it is a very complex expression.

#2118 Review Comments 4:
I know this doesn't come from you, but can you rename bp?

#2118 Review Comments 5:
This can be moved to the if-part beneath, right?

#2118 Review Comments 6:
Please remove this empty line.

#2118 Review Comments 7:
Same as above, please split to method.
An alternative would be if you split some parts of the expression only, for example the parts that are together in brackets.

#2118 Review Comments 8:
What if  `getDatabaseFile()` is not present? Shouldn't this be checked before?
Please check this everywhere.

#2118 Review Comments 9:
To which line/code part does this belong?

#2118 Review Comments 10:
Why don't check here if the properties are valid? (Seen this method somewhere above...)

#2118 Review Comments 11:
This is just an Object which is passed through the eventBus according to the context. It carries no special data as it's only used for notifying methods which are listening for `AutosaveEvent`. I'm following this strategy to preserve the MVC pattern. Otherwise I could call saving methods directly from `Autosaver` without using the eventBus.

#2118 Review Comments 12:
This line has been assumed. However I added a `ifPresent` check for this.

#2118 Review Comments 13:
Done.

#2118 Review Comments 14:
Done.

#2118 Review Comments 15:
Done.

#2118 Review Comments 16:
Yes. :+1: Done.

#2118 Review Comments 17:
Done.

#2118 Review Comments 18:
Deleted.

#2118 Review Comments 19:
`DBMSConnectionProperties.isValid()` is performed by methods which open a shared database from the local file. This method is only a shortcut for all `put*` methods.

#2118 Review Comments 20:
Why do you use here `==` and not `equals()`?

#2118 Review Comments 21:
Can't this be done in the catch block above? 

#2118 Review Comments 22:
why do you check base and metaData for nonNull but not file?

#2118 Review Comments 23:
Why not change it to a javadoc? Then one can see it, if he wants to call the method ;)

#2118 Review Comments 24:
So you can guarantee that they are valid when calling this method? 

#2118 Review Comments 25:
This should only be a reference check.

#2118 Review Comments 26:
This come out from defensive programming. But yes you are right. Done.

#2118 Review Comments 27:
Done.

#2118 Review Comments 28:
It's only a shortcut. But in this context this method is always called with legal parameters.

#2118 Review Comments 29:
Is it possible to cover also this branch in a test case?

#2118 Review Comments 30:
Done.

#2118 Review Comments 31:
(For the next time:) Just use the generic `throws Exception` in tests so that you don't have to edit tests if you decide to throw a different exception. 

#2118 Review Comments 32:
What is the purpose of this check?

#2118 Review Comments 33:
Same here, I don't understand the purpose of getDatabaseID. You load the db above and what are you now doing in this if statement? I'm probably just to stupid to understand what openSharedDatabaseFromParserResult does. Can you please enlighten me.

#2118 Review Comments 34:
Probably I should explain it in general. A `databaseID` is used to identify shared databases when they are stored on the local file system. Furthermore it's used to allocate connection details as you are able to have multiple shared databases somewhere. When opening a shared db (from file) the method `openSharedDatabaseFromParserResult` is called. This method uses `databaseID` which has been parsed by `BibtexParser` to do what I described above.
For the case `databaseID == null` it's not a shared database. I hope that's helpful.

#2118 Review Comments 35:
Ok, thank you very much. Your remarks were indeed helpful. I think I got it now 😄 .
In this case, I would propose to add the db id as a meta-data. Reasoning: all other metadata is also stored there and we had some problems with parsing the %Encoding string. Thus I would minimize all data which is stored in such comments. (As a key, I propose `remoteDatabaseID`. ) 
@obraliar what do you think? 

#2118 Review Comments 36:
I already thought about this option, but this is unfortunately not possible as meta-data, preamble, etc. are also shared. This would end in disaster. This key/ID has to be stored in a local file but it also must not be in shared.

#2118 Review Comments 37:
Ok, thats a good reason.
So we have two options: store the database id as something special (e.g. as a comment % DB: some id) or we exclude some specific metadata items from the sync (or we create a new metadata which is never synced).
I have no strong opinion about this. What do you think @JabRef/developers ?

#2118 Review Comments 38:
> So we have two options: store the database id as something special (e.g. as a comment % DB: some id) or (...)

This is exactly the method I'm using now and it works well. I dont see any reasons for changing it.

An example for the id comment is `% DBID: 2mvhh73ge3hc5fosdsvuoa808t`.

#2118 Review Comments 39:
Return optional by getDatabaseId instead of null.

#2118 Review Comments 40:
Why don't we want to send a change event here? Probably you don't want to trigger a new save of the file, but the problem with the current solution is that nobody else can listen to encoding changes in a reliable way (not that I have a particular case in mind where listeners to the encoding are important, but I think we shouldn't start with exempting something from the event system).

#2118 Review Comments 41:
I don't understand this line (set/get from the same context), especially since you set the database file a few lines earlier.

#2118 Review Comments 42:
This  additional code should be in some logic code (some exporter?) instead of gui.

#2118 Review Comments 43:
The database should take care of its ID and thus also how a new one is generated -> move this two lines to a new method `createNewID` in the database class. I would also rename everything there from databaseID to simply ID  or `sharedID` (since it is already a member of the database class so it should be clear from the context)

#2118 Review Comments 44:
I think our convention for setters was that the never except a null value but there is a clear\* method for this case.

#2118 Review Comments 45:
What is the purpose of this class? It looks like it just reposts the event, right? Why can't one directly subscribe to the BibDatabaseContextChangedEvents of the BibDatabaseContext?

But this class might be a solution for the above issue with setEncoding and not firing the event. You pause the AutosaveManager once you begin with writing the file so that changes (SaveActions?) during the writing process don't trigger an additional writing. 

#2118 Review Comments 46:
I think it is not a good idea that the metadata and the database post BibContextChanged events...because they don't know the context, only the context knows about them. So I think the proper way to implement it is that the BibContext listens to events of its metadata and db and then reposts them as BibContextChanged events. In this way, the autosavemanager also always listens to the correct db/metadata (which is not guaranteed in the current solution if you change the metadata via setMetadata of the context)

#2118 Review Comments 47:
Could you please also add a comment, that this backup is not about the bak-file which is also created upon saving.
Maybe we should distinguishes between Backup (*bak) and Live Backup (swp), or whatever we want to call these concepts.

#2118 Review Comments 48:
Only write it if we don't want to save in plan bibtex mode (see below, line 198)

#2118 Review Comments 49:
Please don't use null values for databaseID. (also check for empty string, StringUtils.isBlank)

#2118 Review Comments 50:
I think the good old  `something == null` is more readable. According to the documentation, Objects.isNull just exists to be used as a predicate (i.e. ̀`filter(Objects::isNull)`)

#2118 Review Comments 51:
Now that this globals is removed, I think the shared namespace can be moved to logic.

#2118 Review Comments 52:
Could you please add the database id also to complex.bib. This test file should illustrate every feature Jabref has. Then also an additional `AutosavedSharedDb.bib` is no longer necessary.

#2118 Review Comments 53:
Please also add a test that the database id comment is not recognized as the comment of the first entry.

#2118 Review Comments 54:
> Probably you don't want to trigger a new save of the file

It's even worse, this would cause an event loop which would never end.

> the problem with the current solution is that nobody else can listen to encoding changes in a reliable way

There is still the old method `setEncoding(Charset encoding)` which is now a shortcut for `setEncoding(encoding, ChangePropagation.POST_EVENT)`. Every time you set the encoding the event is also going to be posted (which will also trigger the autosave). It's ok so far. But the event is not going to be posted while saving a file. I'm more skaptical why this is called here at all. The old comment `// Make sure to remember which encoding we used.` is not really justified, as the encoding should be set immediately when it changes and not "at the last second".

#2118 Review Comments 55:
Now I moved the logic part as much as possible from here. But nevertheless there are multiple methods like [`run(...)`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/exporter/SaveDatabaseAction.java#L114) or even worse like [`saveDatabase(...)`](https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/exporter/SaveDatabaseAction.java#L166) which radically violate the _MVC pattern_. So this is a general problem in jabRef which requires a special attention.

#2118 Review Comments 56:
Done.

#2118 Review Comments 57:
This comes out from defensive programming. It basically does nothing. Removed.

#2118 Review Comments 58:
Done.

#2118 Review Comments 59:
> What is the purpose of this class?

Event classes `EntryEvent`, `MetaDataChangedEvent`, etc. extend  `BibDatabaseContextChangedEvent`. E.g., every time an `EntryEvent` is posted, the `BibDatabaseContextChangedEvent` will get posted too. So this class summarizes multiple eventclasses. Otherwise we would have to listen for each Event in separate methods.

> It looks like it just reposts the event, right? 

If you look closer, a new `AutosaveEvent` is posted within a submission to the executor. This is notifying a class within the `gui` package which actually starts `new SaveDatabaseAction(panel).runCommand();` (I'm not really happy with the logical code of `SaveDatabaseAction` as this is placed whithin a `gui` package, but we have to use it.)

Now the `executor` submits the tasks in asynchronous way while the eventBus is synchronous. Therefore a new Event is used. Of course I coud move `...runCommand();` here, but this would violate the _MVC pattern_. So semantically this does not repost the event.

#2118 Review Comments 60:
> I think it is not a good idea that the metadata and the database post BibContextChanged events

metadata and database don't post the `BibContextChanged` at all. This is done by the hierarchical support of the event system. See the comment above.

#2118 Review Comments 61:
Done.

#2118 Review Comments 62:
Could you give a quick explantation why. What is `PLAIN_BIBTEX` and is it allowed to have comments like `% comment...` there?

#2118 Review Comments 63:
This check is not needed any more. Done.

#2118 Review Comments 64:
Good to know. Done.

#2118 Review Comments 65:
In the end they do post BibContextChanged, since this is now the base class for EntryEvent and MetadataChangedEvent (and this is something I don't like too much). Hence my proposal, that the BibContext throws new BibContextChanged events which wrap EntryEvent/MetadataChanged (how was this called...composition over inheritance?)

#2118 Review Comments 66:
I think plain bibtex is used when the user want's to export the bib file and send it to somebody not using JabRef (e.g. when submitting to a journal). Then all the JabRef things like metadata are removed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2112 Review Comments 1:
With your new implementation here, we lose information, don't we? Previously the actual key of different data made it into the change event, now we just get the information that the meta data as whole have changed. Am I right? And might this be a problem?

#2112 Review Comments 2:
See above. The changes displayed here depend of course on what is available. Why is the type of change no longer of interest?

#2112 Review Comments 3:
Why are all the change notifications in this class no longer needed?

#2112 Review Comments 4:
How about refactoring this method a little bit? After all, it consists of various blocks, where different types of meta data contents are put into the final list. Each such block could be extract into a beautifully named private method :-)

#2112 Review Comments 5:
I have a suggestion regarding this new package: How about moving it into `model.metadata`? After all, the classes in the package are about how the cleanup information is stored in the meta data. What do you think?

#2112 Review Comments 6:
Since you are doing this for the other methods: Do a null check of `globalPattern`.

#2112 Review Comments 7:
Why is the `Optional.empty` no longer a desired return type here?

#2112 Review Comments 8:
So the change notification I asked for earlier have been moved into the meta data. Am I right?

#2112 Review Comments 9:
Is it ok to just remove that? Wouldn't it be better to have it in and verify that it is just ignored by the new parser?

#2112 Review Comments 10:
Yes the detailed information about which key has changed is not contained in the event. Of course this information could be easily extracted from the two metadata by comparing each contained meta item separately. I didn't found this information too useful and thus just left a todo in the dialog https://github.com/JabRef/jabref/pull/2112/files#diff-423409b75a40e426ad5123cabbe295e6R33.

#2112 Review Comments 11:
The metadata class now directly subscribes to changes in the group tree and relays these change events https://github.com/JabRef/jabref/pull/2112/files#diff-20cd356a80ee8ffb10c848005c89b949R74

#2112 Review Comments 12:
I like that one sees directly in one method all the metadata plus their key. Instead of moving everything to separate methods, I moved the main serialization to a different method so that the code now looks cleaner and is better to understand. 

#2112 Review Comments 13:
Mhhh.... none of the other metadata items are currently under the metadata namespace:
import net.sf.jabref.model.cleanup.FieldFormatterCleanups;
import net.sf.jabref.model.bibtexkeypattern.AbstractBibtexKeyPattern;
import net.sf.jabref.model.database.BibDatabaseMode;
import net.sf.jabref.model.groups.GroupTreeNode;

I think it is more consistent to have a model.cleanup or also move the rest to model.metadata(.groups/.bibtexkeypattern...)

#2112 Review Comments 14:
Good observation :) Done.

#2112 Review Comments 15:
If `mode` is null, then still an empty optional is returned (Optional.ofNullable(mode))

#2112 Review Comments 16:
Yes every setSomething method now has to post that the metadata changed. Previously this was done in the `putData` method.

#2112 Review Comments 17:
We have a test `integrationTestGroupTree` https://github.com/JabRef/jabref/pull/2112/files#diff-837597ff5fafbe4e71d5733d490e3454R1479 which still have the ̀`groupsversion:3` string. But since we no longer write the the `groupsversion` information, the roundtrip tests for complex.bib fail. This is why I removed it.

#2112 Review Comments 18:
Ok, at some point we might think of structuring the model package a little more, but for now it is ok, I think.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2103 Review Comments 1:
Underscore is not needed in when using translations in code.

#2103 Review Comments 2:
Please add the `&` sign in front of the 'R' of the translated string as before. In the menu properties this indicates which letter should be used as mnemonic for the underlying action.

#2103 Review Comments 3:
Please add a German translation as I think this was the whole idea of the linked pr.

#2103 Review Comments 4:
yes sure

#2103 Review Comments 5:
ok

#2103 Review Comments 6:
I see i will correct it

#2103 Review Comments 7:
Only the key should be changed, not the values. We have no clue, whether all the other translations use a translation of "File" or "Database". Even though, some language use "File", I lean towards a more complete translation instead of having an incomplete one. - In the concrete case here "Bases de datos" seems to be the translation of "databases" and has for sure to be kept.

So, please, just change the key and do not remove the translation.

#2103 Review Comments 8:
I think if we leave the old translations like they are now, no one feels like imediatly updating the translation. By removing them completly the need to change ist bigger.

#2103 Review Comments 9:
@boceckts what do you think?

--------------------------------------------------------------
#2102 Review Comments 1:
cache

#2102 Review Comments 2:
clean

#2102 Review Comments 3:
remove?

#2102 Review Comments 4:
remove?

#2102 Review Comments 5:
Ok, will change

#2102 Review Comments 6:
What is wrong with cleanse? My dictionary says this is a proper term :-)

#2102 Review Comments 7:
Sure, weird autoformatting...

#2102 Review Comments 8:
Second sentence doesn't make sense?!

#2102 Review Comments 9:
maybe also move `fieldsAsWords.remove(fieldName);` to the invalidate cache method?

#2102 Review Comments 10:
`/**`instead of `/*`

#2102 Review Comments 11:
`/**`instead of `/*`

#2102 Review Comments 12:
Good point. It's strange that Intellij does not distinguish between JavaDoc and Inline documentation in its color.

#2102 Review Comments 13:
right

#2102 Review Comments 14:
Good point! Done!

#2102 Review Comments 15:
With the Darcula theme it does.

#2102 Review Comments 16:
Note that if these settings go missing, it may caused by a plain save of the config using the Install4J GUI. I'm trying to add it as "VM options file" at https://github.com/JabRef/jabref/commit/53ffd02287a0cd4b83115243f631df6551d08086, which seems to work.
--------------------------------------------------------------
#2101 Review Comments 1:
No more one letter variable names, please :-)

#2101 Review Comments 2:
Same here, please improve naming in this method.

#2101 Review Comments 3:
Could you please use the UriBuilder instead of replacing strings. It is more readable and you don't need to take care of manually encoding the input string. 

#2101 Review Comments 4:
Same as above: UriBuilder

#2101 Review Comments 5:
content variable is not needed, right?

#2101 Review Comments 6:
The error message should probably localized (applies also to the code below). I think there is similar error handling in SearchBasedParserFetcher.

#2101 Review Comments 7:
The other fetcher keep the bibtexkey. Not sure what the best approach is, but we should be consistent.

#2101 Review Comments 8:
Why is this not covered by tests? Or is just my Firefox plugin failing?

#2101 Review Comments 9:
This the "old" part of the fetcher responsible for fulltext downloads. The tests are currently not executed at travis as they led to errors if the IP got blocked by google (See https://github.com/JabRef/jabref/blob/master/src/test/java/net/sf/jabref/logic/importer/fetcher/GoogleScholarTest.java).
However, as my new tests (currently) are running through I'll check whether this still persists.

--------------------------------------------------------------
--------------------------------------------------------------
#2099 Review Comments 1:
please add default case. (Codacy would complain this)

#2099 Review Comments 2:
done

--------------------------------------------------------------
#2097 Review Comments 1:
Remove out commented code.

#2097 Review Comments 2:
Please add a javadoc comment.

#2097 Review Comments 3:
I don't  like the multiple return statements and no brackets. Please use a variable which gets returned once in the end of the method and use `if else` with brackets.

#2097 Review Comments 4:
yes sure

#2097 Review Comments 5:
the way it is implemented now, has a better performance 👍

#2097 Review Comments 6:
You can leave the `return` statements but please add the brackets.

#2097 Review Comments 7:
Don't remove newlines at end.

#2097 Review Comments 8:
Could you please explain the reason for this change (? -> ' )

#2097 Review Comments 9:
Why did you removed some of these mappings?

#2097 Review Comments 10:
Please only one assert per test method.

#2097 Review Comments 11:
Please only one assert per test method.

#2097 Review Comments 12:
Some keys got 2 values assigned, so I removed the double assignement. If a key got an RTF value I removed the unicode value.

#2097 Review Comments 13:
Yes sure, later in the RTFCharMap you would find "'a" assigned with unicode, so I thought why not just map it to the RTF value if it already exists.

#2097 Review Comments 14:
I'll add the brackets and the newline.

#2097 Review Comments 15:
Some test methods inside this test class have lots of assertions for single characters, can I leave it like that? I will split the longer ones like you recommend.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2093 Review Comments 1:
I would reformulate/explain that a bit more in the changelog a bit, saying sth like:  that if the special fields were not selected than the two menu item separator where shown
Apart from that, it looks good :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2082 Review Comments 1:
The UTF-8 string is no longer required?

#2082 Review Comments 2:
Please use Apache's URIBuilder instead of String concatenation. 

#2082 Review Comments 3:
It is not possible to get the BibTeX Url directly from the id?
For example, directly access https://scholar.googleusercontent.com/scholar.bib?q=info:b2pGeL14LLMJ:scholar.google.com/&output=citation&scisig=AAGBfm0AAAAAV-vITSVVNk7OSER8S_LFaMSElM9jnUcv&scisf=4&ct=citation&cd=-1&hl=en

#2082 Review Comments 4:
No, as this "scisig" is necessary and seems to be changing.

#2082 Review Comments 5:
Yes, as I am using a Firefox Useragent UTF-8 is automatically delivered.

#2082 Review Comments 6:
Mhmm. I don't think this is that much an improvement as still some string concatenation is needed for the param "q" with `"info:"+id+":scholar.google.com/"` 

#2082 Review Comments 7:
That's unfortunate. 
I did some research and I think I found something. 
Google stores the setting to display bib-links in a cookie. Sending the cookie `GSP=IN=d192d757fd09588a+7e6cc990821af64:CF=4` along the first query directly shows the Import into Bibtex link, 

```
<a href="https://scholar.googleusercontent.com/scholar.bib?q=info:b2pGeL14LLMJ:scholar.google.com/&amp;output=citation&amp;scisig=AAGBfm0AAAAAV-vafm6NWi20weGxxou9W2xi8GzZ8YCf&amp;scisf=4&amp;ct=citation&amp;cd=0&amp;hl=en" class="gs_nta gs_nph">Import into BibTeX</a>
```

Appearently, the part after GSP=IN=... is not that important since my real id had 63 at the end instead of 64.

#2082 Review Comments 8:
Ah using a Cookie instead of the config method can do the trick... 

I'll merge the current state in and than start implementing a new version based on the new fetcher interfaces. Using these we should be able to perform automated tests which will be helpful for the initial development and to detect issues caused by changes of Google structure faster...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2072 Review Comments 1:
Please add `[koppor/#31](https://github.com/koppor/jabref/issues/31)`

#2072 Review Comments 2:
done

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2069 Review Comments 1:
The problematic part may be the `ifPresent`, as I am not sure if you can reassign a variable `usedFont` within a lambda `x -> usedFont = x` so that it `x` will be accessible from the outside. 

#2069 Review Comments 2:
It has to work, since when I open the font selector again, the new value is assigned for usedFont and gets selected in the list. This did not work before as @oscargus mentioned. 

#2069 Review Comments 3:
It works, when the variable usedFont is a field: http://stackoverflow.com/questions/25055392/lambdas-local-variables-need-final-instance-variables-dont

#2069 Review Comments 4:
If you don't need the counter variable please use for each. `for (Component currentComponent : comps)`.

#2069 Review Comments 5:
Same as last comment.

#2069 Review Comments 6:
The Exception should be treated consistently. Either use `LOGGER.error` or `JOptionPane.WARNING_MESSAGE`.

#2069 Review Comments 7:
I thought this can only be tabs? If so please rename variable to `preferenceTabs`.

#2069 Review Comments 8:
You don't need this anymore. Once removed it's fine by me.

#2069 Review Comments 9:
I'm not sure if we want to import this statically. I see the point, but it will be quite confusing compared to all other files where it is accessed as `Globals.prefs`...

#2069 Review Comments 10:
Done

#2069 Review Comments 11:
Done

#2069 Review Comments 12:
Done

#2069 Review Comments 13:
Done

#2069 Review Comments 14:
Done

#2069 Review Comments 15:
Done

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2066 Review Comments 1:
Why don't just `return query.replacAll(...).replaceAll(...)` ?

#2066 Review Comments 2:
Maybe rename to replace comma

#2066 Review Comments 3:
bibs? why not entries?

#2066 Review Comments 4:
You could extract this as Pattern

#2066 Review Comments 5:
This seems to be a perfect method for the `StringUtil` class. Please move it if soemthing similar doesn't already exist.

#2066 Review Comments 6:
Why are there spaces between the fields?

#2066 Review Comments 7:
I don't really like this class, I would extract it to a new file and rename it to something like `MedlineSearchResult` or similar.

#2066 Review Comments 8:
Fields should not have the default visibility.

#2066 Review Comments 9:
As far as I can see, only the returned IDs are used and not the additional data in SearchResult. Could you change the result to List<Integer>. Please also rename term -> query

#2066 Review Comments 10:
Rethrow as FetcherException instead of failing silently, also applies to other places.

#2066 Review Comments 11:
Rename method to something more specific

#2066 Review Comments 12:
Make these methods private, nobody needs to know the details (not even a test 😄 )

#2066 Review Comments 13:
Why do you first get 1 entry and then 49 in a second request?

#2066 Review Comments 14:
If the URL and the pattern are just used in one place, then you can inline them in the corresponding method.

#2066 Review Comments 15:
I wouldn't throw this exception if the query is empty. Just return an empty list in this case (also change the order: empty query -> empty list, otherwise fetch)

#2066 Review Comments 16:
It appears to me that the id-based part can be refactored to use the `Parser`-helper (I think the class was called IdBasedParserFetcher). For this MedlineImporter needs to implement the Parser interface but this should be easy.

#2066 Review Comments 17:
Please add a short comment about the general strategy. 
I.e. we call medline but only get a the pubmed ids as response -> fetch details for ids in a second request.

#2066 Review Comments 18:
Why does this file has so many changes?

#2066 Review Comments 19:
Be so free and delete the "copyright" field :)

#2066 Review Comments 20:
Remove abbrevation field, JabRef has own functionality to toggle the abbreviation of journals.

#2066 Review Comments 21:
Do you know what this "status" field is? Looks to me like we can safely delete it.

#2066 Review Comments 22:
We try to keep the StringUtil class as small as possible. I think this method here is to specific and probably some other code wants to do something similar but slightly different (e.g. and instead of AND). StringUtil should collect really reusuable methods (like `isBlank` or `replaceNewlines`)

#2066 Review Comments 23:
I don't really know it. I guess localizationUpdate?

#2066 Review Comments 24:
Could you please move the code to the `MedlineImporter` class i.e. implement the `Parser` interface there and here just return `new MedlineImporter()`

#2066 Review Comments 25:
Why are these `clearFields` are required (except abstract, which is of course ok)? The test should actually check that the fields are correctly deleted.

#2066 Review Comments 26:
inline `createFetchUrl` here and replace all calls to it with `getURLForID`?

#2066 Review Comments 27:
Please try to return here a list of IDs instead of calling `addId` (see my previous review)

#2066 Review Comments 28:
Do not put `'` at plural-s. Plural of "comma" is "commas".

#2066 Review Comments 29:
`string` (with lower case s)

#2066 Review Comments 30:
Please shortly comment why Medline and Pubmed are the same. You can also link to a help page from JabRef (you did one, didn't you?) or similar. For someone not experienced with the fetchers, Medline and Pubmed are not the same.

#2066 Review Comments 31:
Do it for all other things AND change comments to state that commas are replaced by " AND ".

#2066 Review Comments 32:
... `IDs` ...

#2066 Review Comments 33:
I did not quite follow the new developments at the importers -> why does this Importer need to implement Parser, while the other Importers do not. Or do all importers also do that?

#2066 Review Comments 34:
... `ids` ... - Please check all code ;)

#2066 Review Comments 35:
Why not moving "doCount" one level up? Just do countMatcher if `doCount`. Further, you should comment that you only count at the first hit when count results are there, because ...can-you-give-a-reason...?

#2066 Review Comments 36:
Why doesn't one check for idList.isEmpty()? Why the global variable count?

#2066 Review Comments 37:
Is the global variable "count" really needed anymore?

#2066 Review Comments 38:
In the case of the other fetchers you get the BibTeX source as HTML file of the fetcher site. Example  [>>IsbnFetcher<<](http://www.ebook.de/de/tools/isbn2bibtex?isbn=3836241307) So you can use the default BibtexParser. But in the case of MedlineFetcher you get a XML file you have to parse. Thats why parseEntries() returns importDatabase() of MedlineImporter.

#2066 Review Comments 39:
HTML attributes go in quotes ( `"`)

#2066 Review Comments 40:
Uhoh, the service returns XML, but it is parsed using strings. @tschechlovdev Can you give us some indication about the effort for rewrite?

#2066 Review Comments 41:
If I see right, then using a StAX parser should be good to go here. 

#2066 Review Comments 42:
No. 😉 

`<a href="....">...</a>`

#2066 Review Comments 43:
No localization of logging.

#2066 Review Comments 44:
Please, consider localizing these two `FetcherException`s errors (see  #2128).

#2066 Review Comments 45:
Use `NUMBER_TO_FETCH` here, too.

#2066 Review Comments 46:
The messages of (most) API exceptions are not localized. Thus, calling `e.getLocalizedMessage()` will always return English messages. Provide an own localized message, please.

#2066 Review Comments 47:
There's already "Error while fetching from %0" which you can reuse.

#2066 Review Comments 48:
Thats right. I guess I missed that. :sweat_smile: 

--------------------------------------------------------------
#2065 Review Comments 1:
No exclamation marks in titles. And seldomly in normal text.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2059 Review Comments 1:
To make copy and paste easier: Just rename the variable to `bibDatabseContext`. 

#2059 Review Comments 2:
Maybe it is better to reword it and say: BibLaTeX field only?

#2059 Review Comments 3:
Adjust javadoc

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2053 Review Comments 1:
I think there it would actually make sense to use ifPresent or is there somehow a possible exception thrown?

#2053 Review Comments 2:
Can this somehow be replaced with nio methods?

#2053 Review Comments 3:
Looks really weird. Maybe can be replaced with sth from the nio paths 

--------------------------------------------------------------
#2051 Review Comments 1:
Use `koppor/#128` as normal numbers reference to the JabRef /jabref repo.

#2051 Review Comments 2:
I have done it 🐨 

#2051 Review Comments 3:
That line must be removed. Is probably from merge. However, the features was reverted

#2051 Review Comments 4:
Done 😄 

#2051 Review Comments 5:
Why was that removed?

#2051 Review Comments 6:
I have reinserted it 😄. The same way i have inserted it in Cleanup entries dialog. 😳

#2051 Review Comments 7:
Remove this line.

#2051 Review Comments 8:
Done 😄 

#2051 Review Comments 9:
Can this be named `all-text-fields`. I think dash ("`-`") is more intuitive than underscore ("`_`").

#2051 Review Comments 10:
Please introduce a class constant ALL_TEXT_FIELDS containing these fields. Please also add ISBN and ISSN, MONTH, DATE, YEAR,

#2051 Review Comments 11:
Done 😄 

#2051 Review Comments 12:
Done 😄 

#2051 Review Comments 13:
Must be "BibTeX"

#2051 Review Comments 14:
Must be "BibLaTeX"

#2051 Review Comments 15:
Should be "Recommended"

#2051 Review Comments 16:
Also rename variable to `recommendedBibTeXFormatters`.

#2051 Review Comments 17:
Also rename variable to `recommendedBibLaTeXFormatters`

#2051 Review Comments 18:
Done 😄 

#2051 Review Comments 19:
Done 😄 

#2051 Review Comments 20:
Done 😄 

#2051 Review Comments 21:
Done 😄 

#2051 Review Comments 22:
Done 😄 

#2051 Review Comments 23:
I would do three calls using `fieldNames.add()`. This is IMHO more readable than `Arrays.asList`

#2051 Review Comments 24:
Maybe we should stay with `BOOKTITLE` here.

#2051 Review Comments 25:
Is it possible to add test coverage here? - This branch is not covered by test cases.

#2051 Review Comments 26:
please also cover by test cases

#2051 Review Comments 27:
and extract it to a new method `InternalBibtexFields.getAllPublicAndInteralFieldNames()`.
Btw, I would suggest to rename the `ABSTRACT` prefix to `INTERNAL` (when reading "FieldName.abstract_Something" I always think of the "abstract" field)

#2051 Review Comments 28:
I would completely remove the OrdinalsToSuperscript from the defaults.

#2051 Review Comments 29:
Is there a reason to not run the HTML/Unicode -> Latex converter on all [text] fields? Similar question for the Latex/HTML -> Unicode for biblatex.

#2051 Review Comments 30:
Make it more clear that default formatters are also added: 
recommendedbibTexFormatters = new ArrayList();
recommendendBibTexFormatters.addAll(defaulttFormatters);

(same for biblatex)

#2051 Review Comments 31:
return these fields from a new method `FieldNames.getNotTextFieldNames()`

#2051 Review Comments 32:
rename method to `insertDefaultCleanupPreset`

#2051 Review Comments 33:
@koppor what do you think about that remove of OrdinalsToSuperscript ???

#2051 Review Comments 34:
@koppor what do you think about that ??? 😄 

#2051 Review Comments 35:
recommendedBibTeXFormatters instead of defaultFormatters (same below)

#2051 Review Comments 36:
its still "defaultFormatters" here instead of "recommendedBibTeXFormatters"....

#2051 Review Comments 37:
work with "isBibLatex" instead of negating it.

#2051 Review Comments 38:
Done 😄 

#2051 Review Comments 39:
Done 😄

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2041 Review Comments 1:
Why did you insert empty lines here?

#2041 Review Comments 2:
Please return the Optional as I think this will throw an exception if the input dialog is empty.  `return dialog.showAndWait();`

#2041 Review Comments 3:
The whole point of the `FXDialogs` class is that it provides methods to easily instantiate a dialog that inherits from `FXAlert`. This is important as JavaFX dialogs do not natively disable and unfocus swing windows which is why we need a class that takes care of it; the `FXAlert` class. So please create a custom TextInputDialog that inherits from FXAlert.

#2041 Review Comments 4:
The comment doesn't apply to this method.

#2041 Review Comments 5:
Please replace with a describing javadoc comment as I have no idea what this class does or if it is even needed.

#2041 Review Comments 6:
Same as previous comment.

#2041 Review Comments 7:
As this uses graphics rather than ui control elements I think it is best to create the dialog in code without the help of fxml and css files. So this class doesn't need to extend `FXMLView` and the files `PrrvDialogViewModel.java`, `PrrvDialog.fxml` and `PrrvDialog.css` can be deleted.

#2041 Review Comments 8:
Why do all these varibales need to be static? 

#2041 Review Comments 9:
If you already separate the different code parts into different sections with comments, why don't you just extract the sections to different methods? 

#2041 Review Comments 10:
A `NullPointerException` shouldn't be caught as this is a runtime exception. If needed make `null` checks.

#2041 Review Comments 11:
I think this should be "Show all titles". Also use localization.

#2041 Review Comments 12:
Use two different event handlers. Please also rename parameter "e" to "event".

#2041 Review Comments 13:
The stage gets closed no matter what so please move `primaryStage.close();` beneth the if statement.

#2041 Review Comments 14:
Please use a foreach loop or a stream (if possible) if you only use the counter variable to get the element at its position.

#2041 Review Comments 15:
Please also replace by a describing javadoc comment.

#2041 Review Comments 16:
Does this need to be public? If so please make them private and use getter/setter methods.

#2041 Review Comments 17:
This can be filtered by using the `pureEntryList.stream.filter(...)` method outside of the for loop.

#2041 Review Comments 18:
If you convert the array to a list you can also filter the list by using a stream and calling the `filter` method to remove all `null` values. This way you need less if statement inside the for loop.

#2041 Review Comments 19:
As far as I know the `getField()` method of an entry returns an optional which can also be null. Can it happen that at his stage an entry in the pureEntryList has no BibTeX-key?

#2041 Review Comments 20:
Parameter missing and I think "Adds an edge to the graph" is more appropriate.

#2041 Review Comments 21:
You need to run `./gradlew localizationUpdate` to include the string in the remaining property files.

--------------------------------------------------------------
#2040 Review Comments 1:
This can be simplified a bit:
`Optional<String> url = DOI.build(identifier).map(DOI::getURIAsASCIIString)`

#2040 Review Comments 2:
Done

#2040 Review Comments 3:
Please split that in an if/else, because that ternary operator and the assignment in one statement make it hard to understand for non java exports, especially if you don't know about the operator precedence.

#2040 Review Comments 4:
Beware! Although FieldName.XXX looks like an enum, is is String constant, so I think you should better use equals

#2040 Review Comments 5:
Please consider splitting that in an if/else, too, e.g. simple: if(! field.getText.IsEmpty) ...

#2040 Review Comments 6:
Always tricked by this equals vs == in Java....when do we finally port JabRef to the nice C# world 😄 

#2040 Review Comments 7:
Blame Java for no operator overloading...

#2040 Review Comments 8:
I find his version more readable than if/else 😸 

--------------------------------------------------------------
#2039 Review Comments 1:
I would return `true` here.

#2039 Review Comments 2:
I would return `false` here.

--------------------------------------------------------------
#2037 Review Comments 1:
I think it would be better if you extract the filtered list to a local variable

#2037 Review Comments 2:
Hm, which sin does it have to have an empty url? 
Wouldn't it be better if you also filter if the url is not empty?

#2037 Review Comments 3:
If you extract the list above, you could also check this before the for loop, by checking if the list is empty.

#2037 Review Comments 4:
I thought that the url should be copied? Don't really get this from the description.

#2037 Review Comments 5:
please rename ss, for example to selection.

#2037 Review Comments 6:
Hm you are right there is not much sense in using an empty hyperlink but shouldn't at least the BibTeX key get copied?

#2037 Review Comments 7:
A hyperlink should be copied in the format `<a href="url">key</a>`, meaning the Bibtex key gets displayed but it's actually a hyperlink to the url of the entry.

#2037 Review Comments 8:
I just used this code snipped from the `copyKeyAndTitle` mthod but actually I think it can be replaced by the ClipboardManager's `setClipboardContents()` method. Then there is no need for the `StringSelection` class anyways.

#2037 Review Comments 9:
Yeah you're right. The current version looks good :+1: 

#2037 Review Comments 10:
getField(URL).orElse("");

#2037 Review Comments 11:
Done

#2037 Review Comments 12:
Please add the suffix "Action" to the class name, since this is the convenient way to name the actions in the actions package. 

--------------------------------------------------------------
--------------------------------------------------------------
#2034 Review Comments 1:
I would put it in the changed section, also please add the issue number and url to your description.

#2034 Review Comments 2:
You use this code fragment in all the fetchers, which is why I would extract it to a (dialog) utility class, I'm not sure if there already exists one.

#2034 Review Comments 3:
Replace with `citations.isEmpty()`.

#2034 Review Comments 4:
Put this block in the else statement and set one `return false` at the end of the method instead of the two.

#2034 Review Comments 5:
Please use a variable and just set it to `false` instead of using `break`.

#2034 Review Comments 6:
For me this this too much generalization, use the same error message for all `IOException`s and maybe `InterruptedException`s for the fetchers, but I think the error message doesn't make sense when an `SAXException` occurs!?

#2034 Review Comments 7:
That's up for debate. Before the error messages didn't work as intended (or didn't work at all).

#2034 Review Comments 8:
Does it have any additional value for the user if they know that is was a SAX exception?
They can't do anything about it.

#2034 Review Comments 9:
done

#2034 Review Comments 10:
done

#2034 Review Comments 11:
done

#2034 Review Comments 12:
I exported them into the two main Dialog classes.

#2034 Review Comments 13:
In my opinion yes, a `SAXException` won't be resolved by retrying or checking the internet connection.

#2034 Review Comments 14:
I would change the interface to `public void showFetchingErrorMessage(String fetcherName)` since you don't need the whole fetcher object and the name is more specific for the fetchers. When creating public utility methods it's also good to have a javadoc comment describing it's functionality as it should also be used by others in the future. Other than that I'm fine with your changes 👍 

#2034 Review Comments 15:
done

#2034 Review Comments 16:
Now the `SAXException` will be shown to the user.

#2034 Review Comments 17:
You completely ignore the exception details when you call `showErrorMessage`, thus the user gets just a standard message although the FetcherException contains all the necessary details about what went wrong (`e.getLocalizedMessage`)

#2034 Review Comments 18:
Same as above: exception information is ignored

#2034 Review Comments 19:
Please don't catch exceptions in tests.

#2034 Review Comments 20:
Moved them to the method signature.

#2034 Review Comments 21:
I don't know how much additional value the end user has from : `java.net.UnknownHostException: doaj.org`, but I appended the localized message to the dialog nonetheless.

#2034 Review Comments 22:
Why is the return false moved inside the catch?

#2034 Review Comments 23:
String.Format would look cleaner here, etc, use %1s, %2s for the arguments 

#2034 Review Comments 24:
StandardCharsets.UTF-8

#2034 Review Comments 25:
Could you please extract that to a Pattern, too?

#2034 Review Comments 26:
Same as above, String.format

#2034 Review Comments 27:
I'm just curious, does the dialog object has a method which accepts a Collection/list of BibEntries?
(Not scope of this PR to add one, but would be nice to have such a method

#2034 Review Comments 28:
same as earlier

#2034 Review Comments 29:
I like to return immediately in general so I forget that branch.
If someone now breaks out of the try-catch (which shouldn't be done) he is forced to deal with it later down.

#2034 Review Comments 30:
It would be best to bind the number to the translation, but then it has to be re-translated b/c the number isn't always at the same spot in every language.

#2034 Review Comments 31:
No, it does not.

#2034 Review Comments 32:
done

#2034 Review Comments 33:
In correspondence with @koppor I combined it to a single translation.
For the user it will change nothing.

#2034 Review Comments 34:
done

#2034 Review Comments 35:
see above

#2034 Review Comments 36:
see above

--------------------------------------------------------------
--------------------------------------------------------------
#2031 Review Comments 1:
This should be `gradlew -b localization.gradle update`, right?

#2031 Review Comments 2:
same as above

#2031 Review Comments 3:
same as above

#2031 Review Comments 4:
Nope, `localization.gradle` is imported in the `build.gradle` file, thus gradle knows the tasks form `localization.gradle` too.

#2031 Review Comments 5:
see above, but fixed wrong item enumeration.

#2031 Review Comments 6:
Hm, I don't like the current task name. It should say what it does, like `updateLocalization`. Please also change the other Gradle tasks accordingly.

#2031 Review Comments 7:
You're right. I use the gradle tasks out of IntelliJ IDEA which groups them by its category.
I added `localization` as a prefix to each of them.

#2031 Review Comments 8:
I also use them that way, thats the reason why I only realized this problem when looking at the PR code.

#2031 Review Comments 9:
If you already touch the localization tests, could you also remove the `System.out.println` statements by moving everything to the error message.
So for example this here should be 
`assertEquals("Obsolte kyes found in menu properties file. \n 1. Remove these... \n 2...", emptyList, obsolteKeys)`

#2031 Review Comments 10:
done

#2031 Review Comments 11:
Collections.emptyList() is the preferred way to access it (don't ask me why).

#2031 Review Comments 12:
~~The advantage of `Collections.EMPTY_LIST` is that this list is immutable.~~
`Collections.emptyList()` is also immutable.

#2031 Review Comments 13:
Collections.emptyList() is better because it is a generic implementatin! The constant is not generic

#2031 Review Comments 14:
And it's also immuntable: https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyList-- 
(Unlike this method, the field does not provide type safety.)

#2031 Review Comments 15:
Thanks, I changed the lists.

#2031 Review Comments 16:
Just for the future, you could have just taken the Collections.emptyList() without specifying the type explicit. 

--------------------------------------------------------------
#2030 Review Comments 1:
Translation removed? Why?

#2030 Review Comments 2:
Same remark

#2030 Review Comments 3:
Translation removed? Why?

#2030 Review Comments 4:
Same remark

#2030 Review Comments 5:
Same remark

#2030 Review Comments 6:
Same remark

#2030 Review Comments 7:
Same remark

#2030 Review Comments 8:
Same remark

#2030 Review Comments 9:
Same remark

#2030 Review Comments 10:
Same remark

#2030 Review Comments 11:
Same here. Why is this entry removed?

#2030 Review Comments 12:
Sorry. I think this problem is happened, during i merge and assign gradle update 😄. But i have redone it 👍 

#2030 Review Comments 13:
Done 😄 

#2030 Review Comments 14:
Done 😄 

#2030 Review Comments 15:
Done 😄 

#2030 Review Comments 16:
Done 😄 

#2030 Review Comments 17:
Done 😄 

#2030 Review Comments 18:
Done 😄 

#2030 Review Comments 19:
Done 😄 

#2030 Review Comments 20:
Done 😄 

#2030 Review Comments 21:
Done 😄 

#2030 Review Comments 22:
This problem is happened during i merge and gradle update 😄 I have done it 👍 

--------------------------------------------------------------
#2028 Review Comments 1:
Maybe you could extract that method to the StringUtil class, e.g. call it ReplaceUnicodeDashes..

#2028 Review Comments 2:
The name of the test files confuses me a lot...Isn't the purpose here to test the journal title and doi fields? So why are the fields not present in the file?

#2028 Review Comments 3:
I have seen that RisImporterTest3.ris specifies the both doi fields (M3 and DO) with the same doi string. Please move one of them to a different or new test file. This way the tests would have already showed that the DO field didn't import the doi.

#2028 Review Comments 4:
Done. I've also used this method in the MedlinePlain importer.

#2028 Review Comments 5:
Yeah you're right... Don't know how I could forget them :smile: 

#2028 Review Comments 6:
I've used the DO field in the TestDoiAndJournalFile.

--------------------------------------------------------------
#2027 Review Comments 1:
Reword to "Disable some menu items, toolbar buttons and context menu items...."

#2027 Review Comments 2:
Done 😄 

#2027 Review Comments 3:
"some" -> "certain"

#2027 Review Comments 4:
Why the `<p/>` sign? Please remove. Also applies for the other comments.

#2027 Review Comments 5:
It should be `twoEntries`

#2027 Review Comments 6:
Done 👍 

#2027 Review Comments 7:
Done 👍 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2022 Review Comments 1:
Could you do one assertCorrect per Test please? :innocent:

#2022 Review Comments 2:
Please use `entry.getCiteKey`.

#2022 Review Comments 3:
I don't understand this if statement. So if an entry is missing an author (or title/year) and also has no bibtexkey, then no warning will be printed? 

#2022 Review Comments 4:
I would also check that the key is not empty (like in your second test below). 
There is a similar convenient method in StringUtil already (I think it was called `isNotBlank` not sure if `isBlank` already exists but it should be easy to add).

#2022 Review Comments 5:
This is because getAuthorTitleYear(i) requires, that all three field exist. Otherwise some check tests are failing.

#2022 Review Comments 6:
Judging based on the code, I think getAuthorTitleYear would return `N/A: N/A (N/A)` in the case where the fields are missing. I would suggest that you change the order of the if statements.
If the key is empty, then we definitely want to report a message. But if then all the author, title and year are empty, we use BibEntry.toString (it is a bit ugly) or otherwise we use getAuthorTitleYear. 

#2022 Review Comments 7:
Changing the order of the if statements causes the fail of **all** checker tests:
java.lang.AssertionError: expected:<[]> but was:<[[] in bibtexkey: empty bibtexkey: N/A: "N/A" (N/A)]

#2022 Review Comments 8:
As we now have a class for each checker, we should also create a test class for each checker separately.
But I would think that is content for a new PR

#2022 Review Comments 9:
Removed my thumb up. A separate test class for every checker is too much (for evt. one or two entries).  I think, it is better to organize the checker tests by fields (in methods) and not by checker classes.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#2017 Review Comments 1:
Please add a javadoc comment.

#2017 Review Comments 2:
Wrong import or why do you need `java.io.File` here?

#2017 Review Comments 3:
If it contains the same logic, please use a `{@link}` annotation.

#2017 Review Comments 4:
Is this intentionally not being exported or is it missing in the exported xml file?

#2017 Review Comments 5:
Why is it beeing exported to a new node here but not in the previous test files?

#2017 Review Comments 6:
not wrong, but there is also a class File that is generated by JAXB. Thats is why this is needed.

#2017 Review Comments 7:
Yeah, this is intentionally, because the schema doesn't have something like chapter in the InCollection type.

#2017 Review Comments 8:
Only inbook has the field key, that can be set. You can look at the generated Inbook class, there's a field key. Also in the other test for Inbook there's a bibtexkey as well. 

#2017 Review Comments 9:
To link to a method you need to use the following annotation `{@link #parse()}`, But the rest is good to me.

--------------------------------------------------------------
#2015 Review Comments 1:
Seems like a copy und paste thing, please rename the variable. 
Edit// As you now have a single class, you could simply omit the suffix.

#2015 Review Comments 2:
same as above

#2015 Review Comments 3:
Please use here only a pattern with an integer. As you have aready a second pattern for the normalized month you can simply combine the check.

#2015 Review Comments 4:
Here you can check with an || if the first pattern matches  or the second pattern matches

--------------------------------------------------------------
#2014 Review Comments 1:
Please add the `exception e` as second parameter to the logger.error (there is already an overload for that=

#2014 Review Comments 2:
I intentionally didn't add it, cause those exceptions basically inform the user about the failure. It's not a real problem. But I think it's better to use `LOGGER.info(...)`. Done.

#2014 Review Comments 3:
Ah okay. It's just about that in case of a real exception, e.g. soemthing is wrong it helps the developers to debug the root cause ;)

#2014 Review Comments 4:
you could use `prefs.getHost().ifPresent(prefsHost -> this.host = prefsHost)`.
This avoids the if statements

#2014 Review Comments 5:
replace `+` with `,`

#2014 Review Comments 6:
Maybe you should catch here the NumberFormatException and log, if the port contains some values that cannot converted to an int. Or is this somewhere else done?

#2014 Review Comments 7:
Why don't add here `if(prefs.getPassword.isPresent())`? Then you don't have to check twice if user is present.

#2014 Review Comments 8:
I think you mean ifPresent...

#2014 Review Comments 9:
A `NumberFormatException` can never occur, except hard changes in `prefs` (on the file system or registry) were made.

#2014 Review Comments 10:
Done.

#2014 Review Comments 11:
Done.

#2014 Review Comments 12:
As well the user as the password is required for the class `Password`. It takes the Username as secret key. Therefore I have to check both. Or am I understanding sth. wrong?

#2014 Review Comments 13:
No, here I meant `isPresent`. You check here for user.isPresent and below you check whether password.isPresent and user.isPresent. So why don't combine both:

```
    if(prefs.getUser().isPresent() { 
      this.user = ...
       if(prefs.getPassword().isPresent() {
            this.password = ....
        }
      }
```

So then you have only one check if prefs.getUser.isPresent and not twice.

#2014 Review Comments 14:
When both is required you could just combine the two with and && 

#2014 Review Comments 15:
Ok nevermind. That's ok how it is.

#2014 Review Comments 16:
you could combine this if and the if statement above with an if / else if like the following:

```
if(!prefs.getPassword().isPresent()) {
    ...
} else if(prefs.getPassword().isPresent() && prefs.getUser().isPresent()){
  ....
}
```

#2014 Review Comments 17:
Ah you mean sth. like:

```
if (A) {
   x = ...
}
if (A && B) {
   y = ...
}
```

=> 

```
if (A) {
   x = ...
      if (B) {
         y = ...
      }
}
```

Here you can save one check (A). :+1: 

Done.

#2014 Review Comments 18:
Oh, now I choosed the option from above.

#2014 Review Comments 19:
Yeah that's ok :+1: 
But then please delete 
`prefs.getUser().ifPresent(theUser -> this.user = theUser);` ;)

#2014 Review Comments 20:
Oh, yeah. Done.

--------------------------------------------------------------
#2010 Review Comments 1:
Where does that come from?

#2010 Review Comments 2:
Looks like one of my changes. I noticed some spurious space characters in the French localization, and so removed them.
Now, looking at the English localization, these spaces are also present between the same keys:

```
Show_names_unchanged=Show_names_unchanged

Show_optional_fields=Show_optional_fields
```

#2010 Review Comments 3:
Good catch, I can strip (deleting spaces before and after) each line in the English file (thus in each file).

#2010 Review Comments 4:
But be careful, when you checkout the files on Windows it will become CRLF and converted to LF by check in. (Default setting for git)

--------------------------------------------------------------
#2009 Review Comments 1:
Please merge the changelog entries to a single one.

#2009 Review Comments 2:
What do you mean wiht this? What is the right driver?

#2009 Review Comments 3:
Remove one of the tabs.

#2009 Review Comments 4:
Please provide javadoc comments when you create new classes.

#2009 Review Comments 5:
Please leave this unchanged. I guess this happened due to auto formatting of eclipse.

#2009 Review Comments 6:
Negate the if statement and move the two lines up, then you can remove the return statement.

#2009 Review Comments 7:
In my opinion it's never good to "expect" an Exception and therefore ignore it. You can also read [Effective Java](https://books.google.de/books?id=ka2VUBqHiWkC&pg=PA241&lpg=PA241&dq=exceptions+only+exceptional+use&source=bl&ots=yZJjKns3OZ&sig=nRvWI2z8XJAszftpJfHj02kYt68&hl=de&sa=X&ved=0ahUKEwih89uW05vPAhXEbhQKHUzzBIcQ6AEIODAC#v=onepage&q=exceptions%20only%20exceptional%20use&f=false) for more infos.

#2009 Review Comments 8:
See my last comment.

#2009 Review Comments 9:
Extract class and add a javadoc comment.

#2009 Review Comments 10:
Always use a prefered statement whenever possible.

#2009 Review Comments 11:
I would use "Geteilter Eintrag" with the reason described in the last comment.

#2009 Review Comments 12:
I would use "geteilten Datenbank" to be consistent to the changes in https://github.com/JabRef/jabref/pull/1988.

#2009 Review Comments 13:
Please also describe its use.

#2009 Review Comments 14:
At least log an exception

#2009 Review Comments 15:
Done.

#2009 Review Comments 16:
Done.

#2009 Review Comments 17:
Done.

#2009 Review Comments 18:
Done.

#2009 Review Comments 19:
Done.

#2009 Review Comments 20:
Done.

#2009 Review Comments 21:
Done.

#2009 Review Comments 22:
Done.

#2009 Review Comments 23:
It's not a use case for prepared statement.

#2009 Review Comments 24:
Done.

#2009 Review Comments 25:
Done. 

#2009 Review Comments 26:
Done.

#2009 Review Comments 27:
I would either say "This class provides.." or use `@code` annotation because linking to the same javadoc doesn't make much sense in my opinion :smile: The pull request is still good from my point of view.

#2009 Review Comments 28:
clear instead of unset

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1998 Review Comments 1:
Sure we don't have a related error message already?

#1998 Review Comments 2:
Didn't find anything related to ISBN

#1998 Review Comments 3:
Ah, yes, we have Invalid_DOI already. It would make sense to have sth like Invalid_%0 which we can reuse for all id fetchers. (e.g. doi/isbn) so we 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1989 Review Comments 1:
Please split the author handling code in a new method

#1989 Review Comments 2:
I think here a switch statement could be useful 

#1989 Review Comments 3:
Pleas consider extracting those as String constants, so in case of change they could be easily changed..

#1989 Review Comments 4:
same as above

#1989 Review Comments 5:
done.

#1989 Review Comments 6:
done.

#1989 Review Comments 7:
done.

#1989 Review Comments 8:
Indent the cases please.

#1989 Review Comments 9:
`default` case is unnecessary here.

#1989 Review Comments 10:
Why are there so many empty lines here, please use max one empty line to separate different code elements to groups.

#1989 Review Comments 11:
Typo "format"

#1989 Review Comments 12:
Rplace with `return MODS_NAMESPACE_URI.equals(namespaceUri) ? "mods" : "";`

#1989 Review Comments 13:
Why not use `citeKey.ifPresent(..)`?

#1989 Review Comments 14:
Shouldn't this be 67 and `<mods:end>68</mods:end>` instead of an empty end?

#1989 Review Comments 15:
See last comment.

#1989 Review Comments 16:
Please use different numbers for isbn and issn.

#1989 Review Comments 17:
Please use different dates.

#1989 Review Comments 18:
I think the keywords should be separated and a new topic node should be created for each one instead of writing them in one node. Same as for the ModsExportFormatTestAllFields.xml.

#1989 Review Comments 19:
Use different test numbers for isbn and issn here, too.

#1989 Review Comments 20:
Why are there empty given name fields?

#1989 Review Comments 21:
No! Codecov will complain about a case with no default. There always shoold be a default in a switch case

#1989 Review Comments 22:
Could you please extrac thte Singe "-" and the double "--" to constants?

#1989 Review Comments 23:
Why no test coverage?

#1989 Review Comments 24:
Why no test coverage?

#1989 Review Comments 25:
Why no test coverage?

#1989 Review Comments 26:
Maybe, even `net.sf.jabref.model.entry.AuthorList#parse` can be directly used?

--------------------------------------------------------------
#1988 Review Comments 1:
Datenbanken

#1988 Review Comments 2:
geöffneten Datenbanken

#1988 Review Comments 3:
Why is shared translated with "entfernte" ?

#1988 Review Comments 4:
In my opinion "Importieren" is better than "importiere".

#1988 Review Comments 5:
You should stay consistent here. If you decide for "Importiere" below, then you should also use here "Importiere".

#1988 Review Comments 6:
Ok I will invert it then

#1988 Review Comments 7:
This is a translation of @obraliar as far as I know

#1988 Review Comments 8:
I would go for "Geteilte_Datenbank_öffnen"

#1988 Review Comments 9:
Yeah, but "Entfernte" is really confusing I think. "Geteilte" sounds good.

#1988 Review Comments 10:
Please aslo add a comment in the Fixed section that you fixed the keybinding bug when using the german language.

#1988 Review Comments 11:
Please change it to "Importieren".

#1988 Review Comments 12:
You changed the other strings to "Geteilte" so this needs to be changed, too.

#1988 Review Comments 13:
Typo. `German`

#1988 Review Comments 14:
Please write "German" in with capital `G`

#1988 Review Comments 15:
`G`erman

#1988 Review Comments 16:
Do not use `\u00c4`, use the Umlaut directly. We have UTF-8 and this works perfectly.

#1988 Review Comments 17:
Sometimes the Umlaut isn't used, I guess I could change all of them. Shall I do that?

#1988 Review Comments 18:
Still not fixed. It should be `In die Datenbank importieren...`

#1988 Review Comments 19:
AUX is really a file. Please revert this change.

See https://de.wikibooks.org/wiki/LaTeX/_Grundlagen for further information on AUX files.

#1988 Review Comments 20:
I thought because a subdatabase was created from AUX, AUX had to be a database. I will revert it.

#1988 Review Comments 21:
Underscores are missing here

#1988 Review Comments 22:
Not really part of this pr but if you want to translate it please replace spaces by underscores.

#1988 Review Comments 23:
Same aslast comment.

#1988 Review Comments 24:
This is not part of this PR, is it?

#1988 Review Comments 25:
Same problem with underscores.

#1988 Review Comments 26:
must have slipped in by mistake

#1988 Review Comments 27:
Yes,! The tests will fail if you use the encoded \uXXX things.  Make sure to replac them all (I had to change it in the Italian lang files)
e

#1988 Review Comments 28:
Probably because the original was unoded a few days ago,

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1976 Review Comments 1:
Only one assert per test please..............

#1976 Review Comments 2:
Create test db in setup method and reuse it in the tests.

#1976 Review Comments 3:
getMatches probably returns a list and thus it is better to compare against `Collections.emptyList()`

#1976 Review Comments 4:
Similarily here, compare to `Collection.singletonList(expected hit)`

#1976 Review Comments 5:
please rename the tests...the names are rather non-expressive. One should know from the name of a failing test what went wrong. see also naming convention in the wiki https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases

--------------------------------------------------------------
--------------------------------------------------------------
#1972 Review Comments 1:
Why does this class come in in this PR?

#1972 Review Comments 2:
I hope, you did not delete existing translations

#1972 Review Comments 3:
As described in #1918 somehow the manageJournalAbbreviations dialog made some trouble for the tests. running the tests locally gave me stacktrace below. So after some trial and error and investigation I came to the conclusion that the only differenec for the journal abbreviations dialog is that the controller specified in the fxml file is also the View class. After creating this class and setting it as the controller the error message is gone.
<details>
<summary>

Stacktrace for failed test</summary>



```
net.sf.jabref.logic.l10n.LocalizationConsistencyTest > findObsoleteLocalizationKeys FAILED
    java.lang.VerifyError: Bad type on operand stack
    Exception Details:
      Location:
        net/sf/jabref/gui/journals/ManageJournalAbbreviationsView.<init>()V @31: putfield
      Reason:
        Type 'net/sf/jabref/logic/l10n/LocalizationBundle' (current frame, stack[1]) is not assignable to 'java/util/ResourceBundle'
      Current Frame:
        bci: @31
        flags: { }
        locals: { 'net/sf/jabref/gui/journals/ManageJournalAbbreviationsView', '[Z' }
        stack: { 'net/sf/jabref/gui/journals/ManageJournalAbbreviationsView', 'net/sf/jabref/logic/l10n/LocalizationBundle' }
      Bytecode:
        0x0000000: b802 cb4c 2ab7 0006 2b03 0454 2abb 0007
        0x0000010: 59b7 0008 b500 032b 0404 542a b800 09b5
        0x0000020: 000a 2b05 0454 b1
        at java.lang.Class.getDeclaredConstructors0(Native Method)
        at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
        at java.lang.Class.getConstructor0(Class.java:3075)
        at java.lang.Class.newInstance(Class.java:412)
        at sun.reflect.misc.ReflectUtil.newInstance(ReflectUtil.java:51)
        at javafx.fxml.FXMLLoader$ValueElement.processAttribute(FXMLLoader.java:927)
        at javafx.fxml.FXMLLoader$InstanceDeclarationElement.processAttribute(FXMLLoader.java:971)
        at javafx.fxml.FXMLLoader$Element.processStartElement(FXMLLoader.java:220)
        at javafx.fxml.FXMLLoader$ValueElement.processStartElement(FXMLLoader.java:744)
        at javafx.fxml.FXMLLoader.processStartElement(FXMLLoader.java:2707)
        at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2527)
        at javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2441)
        at javafx.fxml.FXMLLoader.load(FXMLLoader.java:2409)
        at net.sf.jabref.logic.l10n.LocalizationParser.getLanguageKeysInFxmlFile(LocalizationParser.java:173)
        at net.sf.jabref.logic.l10n.LocalizationParser.lambda$findLocalizationEntriesInFxmlFiles$2(LocalizationParser.java:90)
        at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:267)
        at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175)
        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
        at java.util.Iterator.forEachRemaining(Iterator.java:116)
        at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
        at net.sf.jabref.logic.l10n.LocalizationParser.findLocalizationEntriesInFxmlFiles(LocalizationParser.java:91)
        at net.sf.jabref.logic.l10n.LocalizationParser.findLocalizationEntriesInFiles(LocalizationParser.java:73)
        at net.sf.jabref.logic.l10n.LocalizationParser.findObsolete(LocalizationParser.java:52)
        at net.sf.jabref.logic.l10n.LocalizationConsistencyTest.findObsoleteLocalizationKeys(LocalizationConsistencyTest.java:151)
```

</details>

#1972 Review Comments 4:
I ran `./gradlew test` locally and it gave me obsolete and missing translation keys which I removed/added to specific files. This translation in particular should not be in use anymore.

#1972 Review Comments 5:
Did you do an [ack](http://beyondgrep.com/) on this string? Did you check with <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>F</kbd> in IntelliJ that this string is not used anywhere?

#1972 Review Comments 6:
That's interesting. Thanks for investigating!

#1972 Review Comments 7:
No I thought the gradle test task is reliable. I checked this particular string and it turned out it was used in the ManageJournalsPanel class which has been removed on the javafx branch.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1965 Review Comments 1:
According to https://github.com/JabRef/jabref/wiki/High-Level-Documentation#package-structure, the logic should not reference the preferences.

At least, this PR is a huge step in the direction of enforcing the idea of https://github.com/JabRef/jabref/wiki/High-Level-Documentation#package-structure.

--------------------------------------------------------------
#1964 Review Comments 1:
Could you maybe do a little refactoring here? The `changes` list is really a return argument. So instead of having the caller of `syncSpecialFieldsFromKeywords` create the list and pass it to the method, it would be better if the method created the list itself and just returns it to the caller. Return arguments are common in C, but considered really bad style in Java. 

This change would propagate to the other `synchSpecialFields` methods and require some rewriting. If I did not miss anything, there is are only internal calls in `SpecialFieldsUtil` that might have a list that has actual content inserted into these methods. Even in this case, it would be better to create a new list as return object internally and copy the contents of the list inserted as argument is needed.

This is really not the fault of this PR, but the bad design of special fields which should be fixed.

#1964 Review Comments 2:
As above, the return structure of the `updateField` method should be changed.

#1964 Review Comments 3:
Many changes to the methods here, if you implement the refactoring I suggested above.

#1964 Review Comments 4:
What @tobiasdiez means with the enum solution is to turn this class into an enum and merge all of the different special field classes (`Priority`, `Printed`, etc.) into this one. This seems reasonable, since all special fields are singletons anyway (you always access them via `getInstance`). You loose the inheritance relation, but apart from that enums can also have arbitrary methods, constructors, just as normal classes. Here is some explanation of how this works: https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html

The problem that this raises, however, is that all special field classes would move into `SpecialField` and, thereby, also `SpecialFieldValue` would be needed there. To enable this, we have to move the gui stuff out of `SpecialFieldValue` and that is at least the `Icon` in there. In the end, this class really needs to be broken up into the parts that are gui independent and the parts that are gui dependent. I understand that this is not easy.

--------------------------------------------------------------
--------------------------------------------------------------
#1961 Review Comments 1:
Please rename either the method or the parameter.

#1961 Review Comments 2:
already fixed

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1953 Review Comments 1:
Remove empty line.

#1953 Review Comments 2:
Remove empty line.

#1953 Review Comments 3:
fixed

#1953 Review Comments 4:
fixed

#1953 Review Comments 5:
Could you render them using `<kbd>key</kbd>` please?

#1953 Review Comments 6:
could you rename that to `actionMap` and `im` to `inputMap`?

#1953 Review Comments 7:
Can this be written as lambda?

#1953 Review Comments 8:
Can this be written as lambda?

(also applies for SearchResultFrame)

#1953 Review Comments 9:
I know that this screams lambda, but AbstracAction unfortunately does not have an functional Interface... :disappointed: 
Got fooled by the assumption, too
http://blog.codefx.org/techniques/getting-rid-of-anonymous-classes/

#1953 Review Comments 10:
fixed

#1953 Review Comments 11:
fixed

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1950 Review Comments 1:
Not that this is an error or anything the like. But there is hardly ever an advantage of using `Character` over `String` (except for illusive memory benefits). So what is the reason for this change and all the related changes in this PR?

#1950 Review Comments 2:
So if I get this correctly, you merged `StringUtil` into `EntryUtil`? We have had discussions about this before and I am not entirely happy with it. `StringUtil` has a high potential of becoming a god class that can do everything and is used everywhere. Please let's be careful with this.

In the end, however, I also see no point in arguing endlessly over it, so it is ok for me for now. However, please not that on current master there is the class `model.util.ModelStringUtil`. There is absolutely no change that I would tolerate two string util classes in model, so you'll have to merge that one as well

#1950 Review Comments 3:
Nitpick: Rename `s` to `keyword` :)

#1950 Review Comments 4:
Nitpick: Improve naming in the new code here.

#1950 Review Comments 5:
I do not like that you extend the API class here. That way, `KeywordList` inherits all kinds of methods that it probably does not need and is prone to weird polymorphic misuses. Instead, `KeyWordList` should have an internal attribute of type `ArrayList<Keyword>` and just provide a limited subset of methods that are really needed to modify this attribute.

Also, the current implementation supports duplicates in the list. Is this reasonable for keywords? Wouldn't duplicate elimination make sense here?

#1950 Review Comments 6:
I don't quite get why this class is introduced in this PR.

#1950 Review Comments 7:
Please add tests that document the behavior in case of duplicate keywords.

#1950 Review Comments 8:
There were some issues related to strings as keyword separators. For example, the default is `,` (with space) but some places tried to split strings only at the comma (i.e. recognize `apple,orange`). The space was only used to reformat the list as `apple, orange`. So I decided to force that only one character can be used as a separator and the final space is always adapted upon writing.

#1950 Review Comments 9:
Yes we now have a ModelStringUtil class, which already moved some string-related methods to model. I would propose to merge everything together: logic.StringUtil, model.ModelStringUtil and model.EntryUtil, they all deal with the same thing. I will create a separate PR with this change (because it also makes merging easier). 

#1950 Review Comments 10:
Composition over inheritance, noted!

I wasn't sure how to handle duplicates. There was some code which tried to replace a keyword exactly at the same position: `a, b, c` -> `a, replace, c`. This was not easily possible with Set, but just one line with List. Not sure that this was the right decision through. What is your opinion?

#1950 Review Comments 11:
Ok, sounds reasonable. Let's hope that no one ever wants to use some weird multi-keyword separator.

#1950 Review Comments 12:
Ok, I understand. Do this in a separate PR, but please do not forget it :)

#1950 Review Comments 13:
Tough question, really. Personally, I cannot come up with a reason to have duplicate keywords, but users are weird, as we all know :) It is probably best if we just keep things as they were for the moment. Since the keywords were prior stored as a String, it was certainly possible to add duplicates. So let us keep this for now. My fear is that it may result in random bugs, where processing stops, because a keyword is found and another occurrence of the keyword is still in the list.

As a side note: You do not have to use a Set to avoid duplicates. You can also use a List internally and purge duplicates at the level of `KeywordList`. 

#1950 Review Comments 14:
I now changed it so that no duplicates are left upon parsing a string to a KeywordList. I feel we get more bugs if the list may actually contain duplicates.

--------------------------------------------------------------
#1948 Review Comments 1:
Can this be moved to a place where the unchecked conversion really occurs? If not, please add a comment why the suppression is needed at the whole method.

#1948 Review Comments 2:
See above

#1948 Review Comments 3:
Please use the [@deprecated](http://stackoverflow.com/a/24605999/873282) annotation.

#1948 Review Comments 4:
Why these new empty lines?

#1948 Review Comments 5:
Please add `@deprecated` Javaoc

#1948 Review Comments 6:
Please add `@deprecated` Javaoc

#1948 Review Comments 7:
Please add empty line inbetween.

#1948 Review Comments 8:
Which warning does "asList" remove? I might be, that `List<EntryTypes>...` has to be changed to be changed to `EntryTypes...` Or the `...` simply be removed?

#1948 Review Comments 9:
Do we really need to write proper javadoc documentation for deprecated fields or methods? I would rather invest my time in removing the old code. For me the previous syntax with method annotation plus explaining comment was satisfying enough.

#1948 Review Comments 10:
The comment as  javadoc is better, because when you see a method call only marked as deprecated you usually don't know what to use as replacement. And when you do open Declaration and hover over the type, the javadoc shows directly the alternative 

Edit// You can then link to the other method directly in the javadoc and jump to it

#1948 Review Comments 11:
@koppor Some possible Heap pollution with the usage of the vargars parameter 
http://stackoverflow.com/questions/12462079/potential-heap-pollution-via-varargs-parameter

I tried removing the ... first but then I noticed that you have a List<List<EntryType>>
Because, Types.ALL returns already a List. so you have a list containig a List of EntryType

--------------------------------------------------------------
#1947 Review Comments 1:
Link to https://github.com/JabRef/jabref/blob/master/LICENSE.md

#1947 Review Comments 2:
:+1:

#1947 Review Comments 3:
<s>Can we add a deep link here?

I would suggest https://github.com/koppor/keep-a-changelog/blob/master/CHANGELOG.md#unreleased for the development versions and add a release TODO to replace this by something like `https://github.com/JabRef/jabref/blob/master/CHANGELOG.md#36---2016-08-26`</s> follow up at  #1959

--------------------------------------------------------------
#1945 Review Comments 1:
This is not necessary anymore. See https://gradle.org/blog/gradle-3-0-m1-unleash-the-daemon/

`./gradlew wrapper --gradle-version 3.0` has the same effect as `./gradlew wrapper` with that config.

I'll just change it directly in the master branch.

--------------------------------------------------------------
#1944 Review Comments 1:
Indent

#1944 Review Comments 2:
Once upon a time there was a sad test code because we decided against using hamcrest.
Thus could you change the hamcrest-like syntax `assertThat(something readable)` to the good-old `assertEquals`? I think xmlunit also supports these through http://xmlunit.sourceforge.net/api/org/custommonkey/xmlunit/XMLAssert.html

#1944 Review Comments 3:
What was the reason for the decision? 
I now use assertFalse...

#1944 Review Comments 4:
@tobiasdiez  I tried a bit around and I could get it working with assertFalse. However, it has the disadvantage that it does not throw a ComparisonFailure exception which would allow you to see the details directly in the ide:
https://github.com/xmlunit/user-guide/wiki/CompareMatcher#throwcomparisonfailure

#1944 Review Comments 5:
assertXMLEqual does not work?

#1944 Review Comments 6:
Nope, it seems to from the old legacy api. Different, incompatible namespace

#1944 Review Comments 7:
Ok then leave it like that because assertFalse does not make any sense.

--------------------------------------------------------------
#1942 Review Comments 1:
This whole if/else instanceof looks really ugly..
A possible solution would be to create a Generic method like:

`public static <T> T unmarshal( String xsdSchema, String xmlDatei, Class<T> clss )`
Have a look at the link here, there is an example implementation
http://www.torsten-horn.de/techdocs/java-xml-jaxb.htm#JAXB-Unmarshaller

#1942 Review Comments 2:
Can't this be replaced by `location.getPhysicalLocation().stream().map(loc -> loc.getValue()).forEach(locations::add);`

#1942 Review Comments 3:
Again try to use streams and lambdas

#1942 Review Comments 4:
A for loop and only one if statement on the elements seems a lot like filtering, have a look at `stream.filter()`.

#1942 Review Comments 5:
I think this should be indented.

#1942 Review Comments 6:
Sorry, but I don't really get how this can help here. I have to know explicit which class groupElement is an instance of, otherwise I'm not able to use the specific methods.

For unmarshalling I have the problem, that there can be two elements be the root element (ModsDefinition and ModsCollectionDefinition).

#1942 Review Comments 7:
Maybe you looked at an old commit. Now there are two if's and I think using a stream here would make it much more unreadable.

#1942 Review Comments 8:
Yeah, I know. The thing is, my idea/thought was to create a single method which does the instanceof checking in a generic way, like  `static <T> getElement(Obj groupElement, Class<T> clazz)`
Have a look at the second anwer here:
http://stackoverflow.com/questions/14228637/why-instanceof-does-not-work-with-generic?noredirect=1&lq=1

Then you could simply do a call: like  `GenreDefinition def = getElement(modsElement, GenreDefintion.class)`
And of course you would need to check for isAssignable

#1942 Review Comments 9:
Like the idea with the Optionals :+1:  Keep on the good work!
You could even simplify that more: if you just use the `ifPresent`of Optional (accepts a lambda) you can omit those if/else if complety and the check of isPresent, because as the name already says it gets only executed if the value in the optional is present.

#1942 Review Comments 10:
Done. Thanks for your feedback !

#1942 Review Comments 11:
Replace `url -> url.getValue()` by `UrlDefinition::getValue`

#1942 Review Comments 12:
Same as above.

#1942 Review Comments 13:
`element -> element.getValue()` can also be replaced.

#1942 Review Comments 14:
Switch statements should be indented.

#1942 Review Comments 15:
Uppercase `i`

#1942 Review Comments 16:
@tobiasdiez Did we want to get the Keyword Separator from Preferences now? Refs #1877 

#1942 Review Comments 17:
It's okay. No need for streams here.

#1942 Review Comments 18:
Better use isEmpty() for familyname, too

#1942 Review Comments 19:
see above

#1942 Review Comments 20:
I've used the keywordSeparator from the preferences now.

#1942 Review Comments 21:
Done.

#1942 Review Comments 22:
Done.

#1942 Review Comments 23:
Just a non-so-critical remark: `JAXBContext` is known to be an object that is costly to construct and doing this often might result in performance issues. Hence, you typically build it once and keep it. Could you extract `context` as an instance variable? Then, check on execution of `importDatabase` if it is null and if so initialize it.

#1942 Review Comments 24:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
#1940 Review Comments 1:
Why this change? Isn't the category mirroring the menu structure? Menu strings are translated in the menu translation files, not the normal language files.

#1940 Review Comments 2:
Why did you remove that?

#1940 Review Comments 3:
BibTeX is always spelled BibTeX - see https://github.com/koppor/jabref/issues/73

BibTeX is a name like "OS/2" or "Linux" or "LaTeX" and must not be translated.

#1940 Review Comments 4:
This is a menu title? This, it does not beed to be translated.

#1940 Review Comments 5:
Yes it is but the translation strings have a leading and ("&") sign and since most of the strings are also in the non menu localization files I changed it.

#1940 Review Comments 6:
It was only used in the viewModel where I changed it to Localization.lang("BibTex").

#1940 Review Comments 7:
BibTeX is always spelled BibTeX - see https://github.com/koppor/jabref/issues/73 -- BibTeX is a name like "OS/2" or "Linux" or "LaTeX" and must not be translated.

Thus `Localiatzion.lang("BibTex")` is unfortunately wrong in two aspects: 1) casing, 2) requiring translation

#1940 Review Comments 8:
I would not require the translators to replace terms twice. Why not just removing the `&` after getting the translation from `menuTitle`?

Reason: You are displaying menu strings. And menu strings are contained in `Menu_X.properties`. It might happen that a menu string is translated differently in JAbRef__.properties. Using `Menu__.properties` avoids that issue.

#1940 Review Comments 9:
I know Olly made you change this, but actually your previous fix was better.
The KeyBindingCategory is used as the header in the keybinding dialog and thus has absolutely nothing to do with the menu. That the strings exists in the menu is pure (kind of) coincidence. Thus it should be indeed `FILE(Localization.lang("File"))` in `KeyBindingCategory` instead of using `menuTitle` there.

#1940 Review Comments 10:
Well it's not really coincidence that the categories match the menu titles as I used the menu titles where the shortkey's action is located as its category.

#1940 Review Comments 11:
Yes I know, but one may add keyboard shortcuts for actions which are not present in the menu or reorder the categories a bit. 

#1940 Review Comments 12:
Ok then I change it back to use the normal localization files.

#1940 Review Comments 13:
> The KeyBindingCategory is used as the header in the keybinding dialog and
> thus has absolutely nothing to do with the menu.

Sure? I thought, this was intentional to mirror the menu structure here...
And thus reuse the menu translations?

--------------------------------------------------------------
--------------------------------------------------------------
#1934 Review Comments 1:
use package import

#1934 Review Comments 2:
Indeed.

#1934 Review Comments 3:
There was a local class with the same name. I renamed that.

--------------------------------------------------------------
#1933 Review Comments 1:
Why are the spaces removed?

#1933 Review Comments 2:
See below - spaces removed?

#1933 Review Comments 3:
The spaces are already missing in the current English localization.
Comments in languages other than English overridden by the English one.

https://github.com/JabRef/jabref/blob/master/src/main/resources/l10n/JabRef_en.properties#L520

I'll fix them.
Edit: do we even need those comments? They are both the same and doesn't seem to address the line below.

#1933 Review Comments 4:
see answer in the other comment

#1933 Review Comments 5:
Then, please fix the spaces in the English version!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1930 Review Comments 1:
Better add the section reference, as page numbers may change 

#1930 Review Comments 2:
Why did this change?  

#1930 Review Comments 3:
Literals are numbers, letters and strings. [^0-9]+ excludes numbers. This is an unintentinal restriction. The fullstop indicates, that all literals are allowed, except for the first character, that should not be a number (to allow "Edition 2000" and avoid something like "2nd").

--------------------------------------------------------------
#1929 Review Comments 1:
Is it possible to add links to these databases?

#1929 Review Comments 2:
Assert statements removed because of performance reasons?

#1929 Review Comments 3:
Please add `@deprecated` JavaDoc comment, too.

#1929 Review Comments 4:
On the one hand, I think, it's good to have `UTF-8` as default encoding. On the other hand, there are preferences where the user sets the default encoding.

Maybe we should remove the global preference and always set UTF-8 as default encoding?

#1929 Review Comments 5:
Why can't an equivalent test be written using the new structure? Two times calling the parser with the string thing and then compare the resulting entries?

#1929 Review Comments 6:
Could you add a JavaDoc comment here?

#1929 Review Comments 7:
Could you rename the file to `gvk_empty_result_becaue_of_bad_query.xml`? `s` missing in `becaue`

#1929 Review Comments 8:
@zellerdev This is interesting for you as we discussed this about two weeks ago.

#1929 Review Comments 9:
Why is the implementor of `SearchBasedParserFetcher` required to do the cleanup. Why isn't there a fetcher framework which calls `performSearch` and after successfull fetching `doPostCleanup`?

#1929 Review Comments 10:
Don't we have a default implementation? Maybe, we want to force the developers to think about a help page? Nevertheless, I think a default implementation returning `null` would reduce the barrier to implement new fetchers, wouldn't it?

#1929 Review Comments 11:
Comment for future work: Can we rework the formatter code to follow some sort of builder pattern? I once stumbled upon [EqualsBuilder](https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/org/apache/commons/lang3/builder/EqualsBuilder.html) and found it quite nice.

#1929 Review Comments 12:
Could you provide example content in the comment and reason why it is not included? Personally, I keep as much information in the bib files as the styles ignore them nevertheless.

#1929 Review Comments 13:
Could you  move the `NEWLINE` one line up to be consistent with the other lines?

#1929 Review Comments 14:
Similar comment as at the other fetcher interface (https://github.com/JabRef/jabref/pull/1929/#discussion_r78319240): Shouldn't we have a framework so that the not each implementer of a fetcher has to take care about the right calling, but just offer the cleanup method? -- Maybe, this is too much work and we have to stick with the current solution. Then, the method `doPostCleanup` is just an implementation recommendation without any outside use, isn't it?

#1929 Review Comments 15:
make both constants final?

#1929 Review Comments 16:
Could you add JavaDocs `@deprecated` instead of the comment?

#1929 Review Comments 17:
Do we really need bouncycastle here?

#1929 Review Comments 18:
Looks good. I wonder, why there is no other similar class already existing in the OSS universe. Nevertheless, let's go forward!

#1929 Review Comments 19:
Can we install this hack only if JRE is 8 and < 101? I feel uncomfortable to install that fix globally.

Alternatively, can this handler be uninstalled after using this fetcher? Maybe when calling `getParser`?

#1929 Review Comments 20:
Is package private really necessary? Shouldn't it be private?

#1929 Review Comments 21:
At least in the tests it's useful to have it fixed to UTF8. But we should be able to support other encodings for import.
Edit// What is the current behaviour?

#1929 Review Comments 22:
This is just to parse a bunch of BibEntries which may come from anywhere. Importing / opening a database uses the other parse method which uses the proper encoding specified in the file or preferences.

#1929 Review Comments 23:
No not really. The code no longer stores the previous result but parses the reader again and again.

#1929 Review Comments 24:
Because they are no longer needed (entry and db are always non-null if they are created by hand)

--------------------------------------------------------------
#1928 Review Comments 1:
Please rename

#1928 Review Comments 2:
Please rename

#1928 Review Comments 3:
Please rename, this applies to all the variables that are only one or two characters long.

#1928 Review Comments 4:
Weird formatting, move this to the end of the line above.

#1928 Review Comments 5:
Please add a javadoc comment.

#1928 Review Comments 6:
Please add some java doc coments to the class and its methods.

#1928 Review Comments 7:
Also java doc comment.

#1928 Review Comments 8:
Please add a java doc comment at least for the class.

#1928 Review Comments 9:
This shouldn't be changed.

#1928 Review Comments 10:
Previously the new line command was missing in this line.

#1928 Review Comments 11:
fixed

#1928 Review Comments 12:
fixed

#1928 Review Comments 13:
fixed

#1928 Review Comments 14:
fixed

#1928 Review Comments 15:
fixed

#1928 Review Comments 16:
fixed

#1928 Review Comments 17:
fixed

#1928 Review Comments 18:
fixed

#1928 Review Comments 19:
Please also follow https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#when-adding-a-library

Is there an issue asking for a release of the library? - If yes, please link it here and open an issue at jabref/issues linking that issue. If no, please either contact the maintainers directly or open an issue at their repo. Also open an issue at jabref/issues.

#1928 Review Comments 20:
done

#1928 Review Comments 21:
"styles" with lower case s

#1928 Review Comments 22:
"preview style" (lower case letters)

#1928 Review Comments 23:
I find that a bit confusing: Is it actually enabled or disabled? 

#1928 Review Comments 24:
The boolean stores if the preview is enabled.
This line simply inverses what is saved in the preferences.

#1928 Review Comments 25:
so better rename it to `toggled/invertedIsEnabled`

#1928 Review Comments 26:
Without context, it is not clear, why this is inversed. If the user chooses
to have a preview, he gets none (!) and vice versa? Why?

#1928 Review Comments 27:
Is generating the preview so slow that a cache is needed? You are investing quite a bit of memory to save what looks to me like a few stringy operations.

#1928 Review Comments 28:
I don't like that the BibEntry is converted to a string and then to a BibTeXEntry, which is then used in the `BibTeXItemDataProvider`. 
I think it shouldn't be a big problem to create a `BibTeXEntry` via the [addAllFields](https://github.com/jbibtex/jbibtex/blob/master/src/main/java/org/jbibtex/BibTeXEntry.java#L52) directly from our `BibEntry`.

#1928 Review Comments 29:
The library generates the citation with JavaScript. In the beginning it will take about a second, after the JavaScript engine warmup it is much quicker but still noticeable (100ms-200ms), especially if you quickly scroll with the arrow keys over multiple entries.

#1928 Review Comments 30:
I rewrote that section.
It looks a bit cleaner but I have to parse each field as the `addAllFields`-method expects `Map<org.jbibtex.Key, org.jbibtex.Value>` instead of our `Map<String, String>`.

#1928 Review Comments 31:
Is it really required to instantiate BibTeXConverter each time? - The `UNICODE_TO_LATEX_FORMATTER` is also instantiated only once.

#1928 Review Comments 32:
extracted

#1928 Review Comments 33:
Looks good to me now. Thanks!

#1928 Review Comments 34:
ok that's a good reason to cache it, could you add your explanation to the cache class. Thanks.

#1928 Review Comments 35:
I would only cache for one citation style and reset the whole cache if another style is used (in `setCitationStyle`). That makes the code more understandable and I suspect most people actually use just one citation style or don't constantly switch between them (at least I never used the second preview). 
Or are there good reasons to store them for different styles?

#1928 Review Comments 36:
If you keep using the current system (cache for every citation style), then you should also remove the cached result for every style here (and below).

#1928 Review Comments 37:
You can also mark the class as protected so that nobody outside of the package can use it (i.e. everybody is forced to use the cache).

#1928 Review Comments 38:
private final

#1928 Review Comments 39:
See @oscargus recent PR's (for example https://github.com/JabRef/jabref/pull/1969) for how preference classes are structured (i.e. constructor takes a bunch of arguments describing the settings and `JabRefPreferences` handles the initialization and storage from/to the preferences.

#1928 Review Comments 40:
The way @oscargus did it you can only save all preferences at the same time. What if I want just to save the preview panel height and nothing else?

#1928 Review Comments 41:
fixed

#1928 Review Comments 42:
^done

#1928 Review Comments 43:
reduced the cache to one citationStyle

#1928 Review Comments 44:
reduced the cache to one citationStyle

#1928 Review Comments 45:
why not package-private?

#1928 Review Comments 46:
Mhhh... I would suggest to always read/write all the preference values. With this you have a performance overhead but the code looks better.

#1928 Review Comments 47:
I don't like package-private (because writing nothing looks like somebody just forgot to specify the correct visibility)

#1928 Review Comments 48:
Maybe reformulate to 1000 citation styles (using CitationStyles 1.0.1) and add link.

#1928 Review Comments 49:
basepanel.ifPresent(...) and maybe remove `getBasePanel` 

#1928 Review Comments 50:
Same as above

#1928 Review Comments 51:
Make citationStyleWorker also an Optional.

#1928 Review Comments 52:
Make getPreviewPanel return an Optional

#1928 Review Comments 53:
Optionals again

#1928 Review Comments 54:
I would guard `citationStyle` from being null (Objects.requireNonNull). 

#1928 Review Comments 55:
Overwrite equals in CitationStyle and reuse here.

#1928 Review Comments 56:
Can the event and/or the BibEntry ever be null? 

#1928 Review Comments 57:
Use a proper word instead of `BibEntry` (no idea what we usually use...probably `entry`)

#1928 Review Comments 58:
Please add some tests. At least one test should verify that a BibEntry is properly converted into the correct string.

#1928 Review Comments 59:
Reading isn't a Problem, but writing looks quite ugly in my opinion, or how else could I do it?

``` Java
PreviewPreferences previewPreferences = preferences.getPreviewPreferences();
PreviewPreferences newPreviewPreferences = new PreviewPreferences(previewheight, previewPreferences.isEnabled(), previewPreferences.getpreviewStyle(), previewPreferences.getPreviewCycle());
```

#1928 Review Comments 60:
done

#1928 Review Comments 61:
done

#1928 Review Comments 62:
done

#1928 Review Comments 63:
done

#1928 Review Comments 64:
done

#1928 Review Comments 65:
done

#1928 Review Comments 66:
done

#1928 Review Comments 67:
`entry`was used in other translations

#1928 Review Comments 68:
The event itself shouldn't be null, for its properties there are no null checks.

#1928 Review Comments 69:
I added a Test to check the generated citation with the default citation style on the test bibEntry.

#1928 Review Comments 70:
Use `this.basePanel` instead here?

#1928 Review Comments 71:
Either like that or add methods like `previewPreferences.withPreviewHeight(previewHeight)`.

Depending on where the writing actually occurs, you may write the new data directly as well.

#1928 Review Comments 72:
Although there are some classes that use this, as far as I know, the decision is that all constants and all defaults setting should be in `JabRefPreferences`.

#1928 Review Comments 73:
They are back in `JabRefPreferences`.

#1928 Review Comments 74:
done

#1928 Review Comments 75:
I rewrote it using the builder pattern.

#1928 Review Comments 76:
Just look at other localizations.

[Please write cannot](https://en.oxforddictionaries.com/usage/cannot-or-can-not)

#1928 Review Comments 77:
Then just add `Objects.requireNonNull(entryChangedEvent)` and remove the `!= null` check.

#1928 Review Comments 78:
Further please investigate the "call hierarchy" whether `getBibEntry()` may ever be null. I don't think so. Thus, please add `Objects.requireNonNull(entryChangedEvent.getBibEntry();`.

#1928 Review Comments 79:
done

#1928 Review Comments 80:
Is it not more useful to add the `Objects.requireNonNull` to the constructor of the `EntryEvent`? 

#1928 Review Comments 81:
done

#1928 Review Comments 82:
The more places the better

--------------------------------------------------------------
#1927 Review Comments 1:
Just wondering: Is it save to remove the duplication check here? The documentation of `insertEntryWithDuplicationCheck` says `use insertEntry and DuplicationChecker separately`.

The comment also applies to the replacement below.

--------------------------------------------------------------
--------------------------------------------------------------
#1925 Review Comments 1:
Duplicate. :-)

#1925 Review Comments 2:
Why is the mesasge not localized?

#1925 Review Comments 3:
Why not `ArrayList`? It is [faster at sorting](http://stackoverflow.com/a/26013151/873282).

#1925 Review Comments 4:
Where do you know Dansk from? :innocent: - Are we really sure that there is no equivalent translation somewhere? What do the web-based fetchers output if something goes wrong?

#1925 Review Comments 5:
Rename to "createIdFetcherPanel" and remove parameter. Just pass it directly to the method below and use Localization.lang to have the title translated into other languages.

#1925 Review Comments 6:
I would prefer if you don't import this as static.

#1925 Review Comments 7:
The custom entry types are not displayed in BibLatexMode. Is this by design? @JabRef/developers 

#1925 Review Comments 8:
-> not displayed in BibLatexMode?

#1925 Review Comments 9:
rename n -> fetcher

#1925 Review Comments 10:
without underscore and also display error message.

#1925 Review Comments 11:
no underscore

#1925 Review Comments 12:
Proper logging

#1925 Review Comments 13:
rename n

#1925 Review Comments 14:
fetcher could be null I think (select a fetcher in the dialog but let the id empty -> click search)

#1925 Review Comments 15:
No, they are already displayed (even in biblatex mode)  but they are mixed with the others:

![jabrefmycustomentrytype](https://cloud.githubusercontent.com/assets/320228/18309431/ad6d4b02-74f9-11e6-9b22-bac92b39076d.png)

#1925 Review Comments 16:
The order of entries in `JabRef_en.properties` is important. Please move this together with `No_entry_with_id_'%0'_for_fetche...`. Maybe at the end of the file (as it is common for new entries)

#1925 Review Comments 17:
We decided for "ID-based_entry_generator". Thus, this term should be used here. Further, I don't believe it's called "EntryTypeDialog` on the user's side (see http://help.jabref.org/en/BaseFrameHelp). Maybe phrase it "Support entry generation based on IDs in the dialog for choosing the type for a new entry" or "The dialog for choosing new entries additionally supports ID-based entry generation"

#1925 Review Comments 18:
According to http://stackoverflow.com/a/6204600/873282 this is not thread safe as it is not called in the EDT. Maybe, it is also not called at all, according to the last comment by [searchengine27](http://stackoverflow.com/users/3560873/searchengine27) at http://stackoverflow.com/a/6204600/873282. Did you test whether this dialog appears?

#1925 Review Comments 19:
We changed that when we set together. Why did you change that back? Is it because of some rebase stuff? In general, to not rebase, but do merge.

Hint: We changed it to use String.format (unimportant), but to include the exception `e` as paramater for the logger.

#1925 Review Comments 20:
Please remove line, so that **one** empty line is remaining.

#1925 Review Comments 21:
We also updated this when we met. Why is our new String lost?

The current translation is not good. For instance, all nouns are written in capital letters in German.

--------------------------------------------------------------
--------------------------------------------------------------
#1923 Review Comments 1:
If you pass "BIBTEXPLUS" as the data_type, then the abstract is also included and the second request below is unnecessary.

#1923 Review Comments 2:
Please extract pattern

#1923 Review Comments 3:
Abstracts are copyright protected... Whether you can remove it or you have to take an other entry.

#1923 Review Comments 4:
remove the assertEquals. You expect a exception and not an empty optional right?

#1923 Review Comments 5:
I think you then have to use the fail(), otherwise it will produce a codecov or warning in Eclipse for about the test 

#1923 Review Comments 6:
I replaced the assertEquals() with fail() and removed fetchedEntry. so just performSearch() is called :)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1917 Review Comments 1:
No GPL header please.

#1917 Review Comments 2:
No GPL header

--------------------------------------------------------------
#1915 Review Comments 1:
This can be replaced a combination of stream,filter  and findFirst 
sth like : `tableRows.stream().filter(bibEntry->bibEntry.getId().equals(entry.getId()).findFirst()`

And it has the advantage to return an optional which is **way** better to return a -1 value. Returning 1 comes from the old times of programming where everything >0  was indicating succes and negative things like -1 indicated errors.  (Unfortunately I just can't find a source explaining it, but it is not considered good practice returning -1 nowadays if no element is found or error happend)

#1915 Review Comments 2:
I need to find the position of the given entry in the model.
With the statement you described you would get an Optional of an Entry.

#1915 Review Comments 3:
Ah yes, you are right. Currently there is no real good solution to return the index. :( 

#1915 Review Comments 4:
Please add it at the end of the section.

#1915 Review Comments 5:
I think in this particular case it is fine to use an "old school" for loop. But please rename `i` to `row`.

#1915 Review Comments 6:
I try not to do that b/c then I have to rebase after nearly each merged PR.

#1915 Review Comments 7:
done

#1915 Review Comments 8:
I don't like that the ID is used to compare the entries (because I hope that we can get rid of the ID completely at some point). Does `if (entry == bibentry)` work?

#1915 Review Comments 9:
works & done

--------------------------------------------------------------
#1914 Review Comments 1:
I would have changed the order of the statements in the conditions, checking for biblatex mode first:
Because the && is a short circuit operator, so the regex would only get evaluated if the mode condition is true
Edit// But as the regex is compiled I think the order doesn't really matter.

#1914 Review Comments 2:
why do you want this to be static?

#1914 Review Comments 3:
Because I want to use a method of this class in class EditionChecker. An alternative is, to define a object`private final BibDatabaseContext bibDatabaseContext;` in class EditionChecker, but this is redundant.

#1914 Review Comments 4:
> . An alternative is, to define a private final BibDatabaseContext
> bibDatabaseContext; in class EditionChecker,

Seems to be the better solution as static variables sound like global
variables...

#1914 Review Comments 5:
Many FieldChecker need access to the isBiblatexMode() method. It is bad to create for every FieldChecker class a new bibDatabaseContext object and inizialize it (in the FieldChecker constructor?).

#1914 Review Comments 6:
What about passing the bibDatabaseContext in the constructor of the Field Checker?
Edit// Even better, just pass a boolean in the constructor holding the value of `isBiblatexMode`..

#1914 Review Comments 7:
Just a minor thing: if you change the order of the test and mode it will be slightly faster (since checking mode is faster and the test will not happen is the mode is wrong).

Not required for merge though.

#1914 Review Comments 8:
And the same thing here then. One may even think of a `if mode ... else ...`

--------------------------------------------------------------
#1913 Review Comments 1:
Better use a flatmap for chaining optionals, it would only get evaluated if a value is present in all fields and addtionally you can add a filter condition for checking !isEmpty 
http://www.nurkiewicz.com/2013/08/optional-in-java-8-cheat-sheet.html (scroll down to end to see the "bigger example")

#1913 Review Comments 2:
Good point, changed the code accordingly.

#1913 Review Comments 3:
Please move the comment to `@deprecated` javadoc

#1913 Review Comments 4:
`@deprecated` JavaDoc?

#1913 Review Comments 5:
`@deprecated` JavaDoc?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1909 Review Comments 1:
Maybe we should think of documenting our regexes more. See DOI.java for an example. 

#1909 Review Comments 2:
Link is not relevant IMHO

#1909 Review Comments 3:
Can be removed.

#1909 Review Comments 4:
Codacy and PMD has this as pattern ( UncommentedEmptyConstructor) to distinguish between internationally and unintentionally empty constructors
http://pmd.sourceforge.net/pmd-5.0.1/rules/java/design.html 

--------------------------------------------------------------
#1907 Review Comments 1:
Since `tmpFile` is already a `Path` object, why don't you replace `File file` with `Path file`?

#1907 Review Comments 2:
Insert space after comma of first parameter.

#1907 Review Comments 3:
Please remove unnecessary white spaces as they are ignored anyway when viewing the comment as javadoc.

#1907 Review Comments 4:
Please use/introdue logging with the Logger class and then log the excpetion with LOGGER.error("message", ex)

#1907 Review Comments 5:
Doesn't Files.move already return a bolean?
Then you could omit that return true and just return Files.move..

#1907 Review Comments 6:
You need to do a Path.resovleSibling to succesful rename it, otherwise the second path argument toFile which only contains the name of the file will fail.

Look at my PR #1861 

#1907 Review Comments 7:
You should  check for null if it was succesful:
`return Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING) != null;`

#1907 Review Comments 8:
I would rename the third parameter to replaceExisting, is more obvoius then

#1907 Review Comments 9:
The parameters are now `Path` objects directing to the file rather than `File` objects.

#1907 Review Comments 10:
`Files.move(...)` returns the path to the destination file, same as copy. So I think the comment from @Siedlerchr for the `Files.copy(...)` method applies here as well.

#1907 Review Comments 11:
Remove one semicolon (";").

#1907 Review Comments 12:
Remove empty line.

#1907 Review Comments 13:
Rename to `nonExistingTestPath`.

#1907 Review Comments 14:
Rename to `existingTestFile`.

#1907 Review Comments 15:
In your test you should rename it to something different.

#1907 Review Comments 16:
If you want to cover all three cases you have to put them in three different methods since any of these statements throws a NPE. This means only the first one will be executed and the test will pass without executing the remaining two.

#1907 Review Comments 17:
In your test you should copy the file to a different location.

#1907 Review Comments 18:
I think it would be nice if you would log here, why the file wasn't copied. So here because the path to the source file not exists.

#1907 Review Comments 19:
Logging here would be also nice.

#1907 Review Comments 20:
Could you add a test case for the left part of the if coniditon? Or reference it if you have already one, because I don't see it.

#1907 Review Comments 21:
I think it would be better to place the try/catch construct in `FileUtil.renameFile`, because the exception is actually thrown by `Files.move(...)` 

#1907 Review Comments 22:
remove `throws IOException` and add try/catch here.

#1907 Review Comments 23:
the testcase is:
testCopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile

#1907 Review Comments 24:
Done !

#1907 Review Comments 25:
Done !

#1907 Review Comments 26:
Done !

#1907 Review Comments 27:
Done !

#1907 Review Comments 28:
For the second argument you can use the method `toPath()` of the File class

#1907 Review Comments 29:
Please remove this string from the localization files. This should fix the failing travis build. Otherwise LGTM

#1907 Review Comments 30:
Done !

#1907 Review Comments 31:
Done !

#1907 Review Comments 32:
Please use LOGGER.error...

#1907 Review Comments 33:
Done 👍 

--------------------------------------------------------------
#1906 Review Comments 1:
I would reword it a bit to make it a a bit more clear: 

>  Implemented integrity check for year field: Last four nonpunctuation characters should be numerals 

(Put the word "year" in backticks (the french accent grave), just look at other examples in the changelog)

#1906 Review Comments 2:
You could use`[0-9]{4}$` but it's essentially the same.

#1906 Review Comments 3:
We should add a comment to the BibTeX doc here, because this decision on year structure is not intuitive.

#1906 Review Comments 4:
Where comes the decision on these chars?

#1906 Review Comments 5:
Please define them as punctuation chars as a final variable.

#1906 Review Comments 6:
Some regex chars have a special function, they are ommited. `String.replaceAll(String regex, String replacement)` I failed to define a variable. I have defined a String variable now.

#1906 Review Comments 7:
And I tink you mixed one up  must be `$ instead of §`

#1906 Review Comments 8:
Please uppercase constant name and call it something like `PUNCTUATION_MARKS`. Just calling it regex doesn't really help in understanding what it's for.

#1906 Review Comments 9:
Please add a comment pointing to the BiBTeX manual where this decision to accept `around 1997` and so on is explained.

#1906 Review Comments 10:
Localization Message should start with Uppercase character?!

#1906 Review Comments 11:
Please add also a test case with one of the regex symbols

#1906 Review Comments 12:
Most of the Check Integrity messages start with lower-case. It is an inconsistency.

#1906 Review Comments 13:
Something bothered me with the replaceall and the list of regex chars...
After thinking about it for a while I found why:
The first argument of replaceAll is a regex, so your regex char string would be interpreted as actual pattern.
To prevent this, you have to escape the chars, or better use Pattern.quote
 http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#quote-java.lang.String-

#1906 Review Comments 14:
The pattern [abc] is needed: Set definition, can match the letter a or b or c. The escape sequences are not working.  Within the definition pattern [] nearly all characters (punctuations too) are allowed (exception: escape sequence).

#1906 Review Comments 15:
Most messages do actually start with a lower case character right now so
for consistency it is currently correct. Although I think that conceptually
it should be upper case.

--------------------------------------------------------------
#1905 Review Comments 1:
You should better use the nio equivalent Paths.get( ...).toString() (or if really needed the canonincal path op, than use toRealPath
https://docs.oracle.com/javase/tutorial/essential/io/legacy.html#mapping

#1905 Review Comments 2:
I vaguely remember that I have already seen some code which took care of balanced braces. Probably in the BibtexParser. Could you please check there and maybe extract some common code (to StringUtil?).

#1905 Review Comments 3:
Yes, there is brace checking and handling code in `BibtexParser`, but that is absolutely not extractable. It depends on the internal usage of the `PushBackReader` in the class and interferes with parsing in general.

#1905 Review Comments 4:
When I remeber it correclty, there is also a method in StringUtil which does the same and checks for curly(?) braces...

#1905 Review Comments 5:
Even if there is no suitable method which can be reused, it may be worthwhile to extract some of the code here to StringUtils.

#1905 Review Comments 6:
code fomatting: on same line?

#1905 Review Comments 7:
Can you push the NIO stuff on this branch so we can merge this in even if Oscar is away at the moment?

--------------------------------------------------------------
--------------------------------------------------------------
#1900 Review Comments 1:
What does this class do? The class name is not intuitive to me, maybe a candidate for a rename?!

#1900 Review Comments 2:
It is a quite flexible formatter for the file field. The things I have not tested relates to the actual search path.

See http://help.jabref.org/en/CustomExports

Regarding renaming, it is always tricky for layout formatters as people may have used them. On the other hand that is disconnected now, but still a point in consistency. Name is not really clear though.

--------------------------------------------------------------
#1899 Review Comments 1:
Remove Sysouts, please.
#1899 Review Comments 2:
directories
#1899 Review Comments 3:
else can be omitted?!
#1899 Review Comments 4:
Remove Sysout
#1899 Review Comments 5:
What is the TODO here? Should it be removed?
#1899 Review Comments 6:
There are some TODOs left?!
#1899 Review Comments 7:
Some empty lines could be removed in this PR.
#1899 Review Comments 8:
Oops. Seems like I forgot that to delete. I will remove it
#1899 Review Comments 9:
Empty line.
#1899 Review Comments 10:
Could you please run the formatter on the whole method (after using `gradlew eclipse` from master branch). Then, the necessary space after `if` should be added, too.
#1899 Review Comments 11:
Empty line.
#1899 Review Comments 12:
Why 4?
#1899 Review Comments 13:
Obsolete 2nd space?
#1899 Review Comments 14:
Would be cool if you can remove all thos obsolete empty lines 😄 I know its not important but 😸 
#1899 Review Comments 15:
Hm, that is weird. I already deleted all that stuff I thougt.
#1899 Review Comments 16:
This really changes the preferences of the developer. Can you try to mock/init by hand the layout formatter and file directory preferences.
#1899 Review Comments 17:
joining Stefans party: please remove emtpy line
#1899 Review Comments 18:
as above
#1899 Review Comments 19:
Seems like it was an artifact from my previous implementation approach.. It is no longer necessary. 
--------------------------------------------------------------
--------------------------------------------------------------
#1896 Review Comments 1:
No idea why sub or in either. Any idea why the var is called "ss"? I would change it to a more expressive variable name

#1896 Review Comments 2:
Move some of this initialization code to the setup method.

#1896 Review Comments 3:
Ahh, I think I understand it now: `IP` = in press/preparation, `in` = in press/preparation, and `sub` = submitted. Better to use the note field for that in general I guess, but maybe worthwhile keeping for compatibility. (One may even add support `under review` leading to either `IP` or `UR`.)

--------------------------------------------------------------
#1894 Review Comments 1:
Space after fixed 

#1894 Review Comments 2:
If getWord returns a list you can also use the new fancy replaceAll overload instead of the forEach.  But in this case it doesn't really matter ;)

https://docs.oracle.com/javase/8/docs/api/java/util/List.html#replaceAll-java.util.function.UnaryOperator-

#1894 Review Comments 3:
I think it makes sense to move `preferences = ...; DatabaseBibtexKeyPattern bibtexKeyPattern = ...` and `metadata.setBibtexKeyPattern(bibtexKeyPattern);
BibEntry entry = new BibEntry();
entry.setField("title",...)`
to the setup method.

#1894 Review Comments 4:
Would it make sense to support all Formatters as modifiers? If this is the case, I would add a method `Optional<Formatter> gefFormatterByTitle(String title)` to `Formatters` and use this here.
I think this also results in a more cleaner design. 

#1894 Review Comments 5:
If this code works, then it relies on a bad designed `Title` class. A collection exposed by a `get` method shouldn't give access to the internal state of the object. I think the best solution would be to add methods to the `Title` class which convert the title to a lower/upper/whatever case (i.e. `Title toLower()`). Since this probably goes beyond what you want to do in this PR, could you at least add a method `getWordsReadonly` (returning `Collections.unmodifiableList(words)`) and mark `getWords` deprecated. Thanks.

#1894 Review Comments 6:
Do you hear that @stefan-kolb ;-)

#1894 Review Comments 7:
I also reacted on that. There is quite a bit of more code than this relying on the current design though, so I add an issue and implement the `getWordsReadonly` thing.

#1894 Review Comments 8:
The preferences are different for different tests. There is a standard preferences in `setUp`, but in this case it is not the standard preferences. Adding set methods which are only used in the tests doesn't seem worthwhile to me.

Regarding entries, yes, one could have one in the preferences with some standard content, and edit as required in the tests.

(This also holds for your similar comment in the other PR, although I noted I used the standard preferences in some test and still redefined them...)

#1894 Review Comments 9:
Maybe. I still wonder how many of those are really useful and how many of them may lead to unexpected problems... We would in that case still need to have some explicit name mapping to not loose compatibility, introduce the (rather useless in other cases) CamelCaseFormatter, and come up with a new syntax. I did in fact consider it earlier, but didn't really see the benefit of it.

#1894 Review Comments 10:
What?

#1894 Review Comments 11:
I think the missing space came from you. I'll change it though. ;-)

#1894 Review Comments 12:
Why not immediately replace `getWords` with `getWordsReadOnly`, i.e. just have `getWords` return `Collections.unmodifiableList(words);` and skip the introduction of `getWordsReadOnly`? From what I see this should not break the existing implementations.

#1894 Review Comments 13:
I think it will break it... See @tobiasdiez comment above. The thing is that `forEach(Word::toUpperFirst)` actually modifies the `Title` object, which it can't (I think) if `Collections.unmodifiableList(words);` is returned. On the other hand, I do not really see the use case of `Title` unless one is allowed to modify the content.

#1894 Review Comments 14:
Ah, I get it. The real problem is that the `Word` objects are mutable, less that the list is.

However, that means that you can _still_ return `Collections.unmodifiableList(words)` and execute `forEach(Word::toUpperFirst)`. The `unmodifiableList` only ensures that the structure of the list will not change (and your lambda does not change it), the objects contained therein can still be modified (which is ugly, but anyway...). Therefore, I would ask you to implement my suggestion and skip the deprecated getter.

#1894 Review Comments 15:
And please add at least a comment in `Word` that this class should be rewritten to be not mutable. 

#1894 Review Comments 16:
Makes sense. I'll add immutable `getWords` as default and add a comment. On the other hand it is quite convenient that `Word` mutable. Somehow the whole `Title` class depends on it as the `toString()` method really wouldn't make sense if you cannot change any `Word` in `Title`. You would just get the same string that you entered and there is no way to convert a stream to a new `Title` at the moment.

#1894 Review Comments 17:
I think at least all CaseChangers would make sense here. It also makes the code cleaner if all reformattings are done by a dedicated formatter.
The explicit name mapping can also be included in the new `getFormatterByTitle(String title)`. 

#1894 Review Comments 18:
Turns out that the (useless) camel case formatter is actually already available as `CapitalizeFormatter`, then there is the `SentenceFormatter` left and that I can add for completeness (`ProtectedTermsFormatter` really doesn't make sense here...).

#1894 Review Comments 19:
Whoops...

#1894 Review Comments 20:
Please refactor the code a bit: first convert the modifier to the corresponding formatter `Formatter getFormatterForModifier(string modifier)` and then apply it to the label.

#1894 Review Comments 21:
The lines `DatabaseBibtexKeyPattern bibtexKeyPattern = ...` and `metadata.setBibtexKeyPattern(bibtexKeyPattern);` can be extracted to the setup method.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1885 Review Comments 1:
Seem like a  copy & paste error ;)

#1885 Review Comments 2:
fixed

#1885 Review Comments 3:
Why not just doi instead of doiStr ?
And would be nice if you would stay consistent and write everywhere preferences for example instead of importFormatPreferences or prefs.

#1885 Review Comments 4:
`throws FetcherException` can be deleted.

#1885 Review Comments 5:
`throws FetcherException` can be deleted.

#1885 Review Comments 6:
Can you test that this exception is thrown as well ? 
Actually I thought this should be done with your test cases, but I don't know why it is not.

#1885 Review Comments 7:
Just write `fetcher.performSearchByID(...)` and replace the `assertEquals(...)` below with `fail()`.

#1885 Review Comments 8:
delete empty line

#1885 Review Comments 9:
Use switch here

#1885 Review Comments 10:
Please move this code to method `static Optional<IdBasedFetcher> getIdBasedFetcherForField(field, importFormatPreferences)` in new class `WebFetchers` (with s at the end)

#1885 Review Comments 11:
Check for `isPresent`.

#1885 Review Comments 12:
Inline `type` into the `done` method.

#1885 Review Comments 13:
I would prefer if this method could be removed completely. If this is not easily possible, at least mark it as deprecated.

#1885 Review Comments 14:
Error text is not correct, probably "Problem fetching information for DOI" or something like that.

#1885 Review Comments 15:
The PageNormalizerFormatter on the resulting BibEntry might also do the trick 

#1885 Review Comments 16:
throw FetcherException instead (so that the caller gets an better error description instead of just an empty result)

#1885 Review Comments 17:
parserResult might be null and thus would result in NPE.

#1885 Review Comments 18:
better names pls, for example this here is probably `performSearchWithInvalidDOIThrowsException`

#1885 Review Comments 19:
Not what I would like to have especially since you call it with null: https://github.com/JabRef/jabref/pull/1885/files#diff-72489ec4f1c45f54ccd30c3f4215413aR89

#1885 Review Comments 20:
Is the text of the fetcher exception presented in the UI at another place in the UI?

Then, please **do not remove** the translation and add Localization.lang here.

I think, at least b85c3799f226ff520da16cb80ecc14afd097882e has to be reverted.

#1885 Review Comments 21:
Why isn't the message from the FetcherException used? At least, the DOI fetcher presents a nice text, which is localized.

#1885 Review Comments 22:
Still not fixed. Maybe `exception.getLocalizedMessage()` is a hint how to code that.

#1885 Review Comments 23:
Still not fixed

#1885 Review Comments 24:
Could you pls fix the failing test by using `mock(ImportFormatPreferences.class)` here (if possible, if not `JabRefPreferences.getInstance` or so does the trick)

--------------------------------------------------------------
#1884 Review Comments 1:
Is it worth having this build dependency as it basically does what the removed code below does and adds quite a bit of other unused methods? (I know @koppor was also skeptic.)

#1884 Review Comments 2:
We already have this dependency inside the code that's why I reused it. For the general dependecy question, I'm not 100% sure as we might use more distance measures and the library is probably not very large. So why should I reinvent the wheel here.

#1884 Review Comments 3:
Yes, from that perspective it is OK for sure and we can of course revive the old code if required later. Oh, here I found it: https://github.com/koppor/jabref/issues/131

#1884 Review Comments 4:
Just go ahead. No worries. We migrate to another library if the functionality is the same. If not, we just keep the dependency. Reason for migrating is only https://github.com/koppor/jabref/issues/135

#1884 Review Comments 5:
Are we really returning null? I think, we ommitted null, thus also line 79 is not covered by tests at all.

#1884 Review Comments 6:
Why is this test removed? I don't find "North Sea" in the new tests. The method `DuplicateCheck.correlateByWords` still exists.

#1884 Review Comments 7:
Can we also add a test where the authors are written in a different serialization? Firstname Lastname?

#1884 Review Comments 8:
Since JabRef 3.6 is close to be available in Debian/unstable, there is no need for a library migration.
--------------------------------------------------------------
#1883 Review Comments 1:
Just a hint, there is a convenience method in `FileUtil`which does the job for you and because the file field could contain more than one file entry.
getListOfLinkedFiles(...) just look at the call hierarchy of that method to see how to use it... 

#1883 Review Comments 2:
Thank you for that! Is it a valid use case that more than one pdf file is linked? If so, I would have to take care about parsing multiple files and we need a UI that is capable of representing that.

#1883 Review Comments 3:
I am not sure about that, well at least it is possible to add/have multiple pdf files ;) I think the typical workflow is to attach one pdf and some additional resources (e.g. maybe source code archive or some other data). 

#1883 Review Comments 4:
But still I think we should take care about that. The simplest way would be to create a new pdf tab for every attached pdf file or a drop down to switch files. I will have a discussion with @ayanai1  and @mairdl  on that.

#1883 Review Comments 5:
Or have a list of all comments but grouped by the containing pdf file. Probably 90% of the entries have just one linked pdf file and thus the UI should primarily support this.   

#1883 Review Comments 6:
Please remove the empty lines between the variable declarations or better group them (e.g. all GUI/panel related stuff first) then a new line and next group.

#1883 Review Comments 7:
The name is Sumatra PDF (https://www.sumatrapdfreader.org/free-pdf-reader-de.html) and does not need to be translated, does it? - See asian Sumatra PDF page: https://www.sumatrapdfreader.org/free-pdf-reader-ja.html

--------------------------------------------------------------
--------------------------------------------------------------
#1876 Review Comments 1:
Why not a simple stream on the list with anyMatch (returns a boolean)?

#1876 Review Comments 2:
And you could even use that together with the prev line if you use your getFieldOptional method 

#1876 Review Comments 3:
The getFieldOptional is no more. ;-)

You mean:
`return entry.getKeywords().stream().anyMatch(this::matchFieldValue);`
?

Could work. In the most recent version I swapped order of hasField and matcher as I expected the first one to be faster. Still, I think getKeywords() returns an empty list if the field is not set, so doesn't really need it.

#1876 Review Comments 4:
You could here do the same as above, just with `return fieldsKeys.stream().filter(this::matchFieldValue).isPresent()`
The nice thing is that all operations like map., filter etc  are only performed if the value inside the optional is present, so absolutely type safe 

#1876 Review Comments 5:
Maybe useful to add some umlaut tests?

#1876 Review Comments 6:
It will work for what you write. Hence, `ö` will match `ö`, but not `\"{o}`, and vice versa. Once the LaTeX free BibEntry is functioning it should work both ways.

#1876 Review Comments 7:
Not quite. This has to be wrapped in an `if` which executes `return true;`

--------------------------------------------------------------
#1875 Review Comments 1:
I cannot comment if this is the correct way to implement the problem right now, but if it is please rephrase the condition to 

``` java
if (!(event.getSource() instanceof FieldEditor)) {
...
}
```

--------------------------------------------------------------
#1874 Review Comments 1:
What does this  ";" and \ mean?
Maybe move it to a constant?`e.g. Delimiter?

#1874 Review Comments 2:
I think it would be more readable to use if/else instead of the ternary operators

#1874 Review Comments 3:
Why not declare it as char? Char ist auto represented as int, so no need to convert it back and forth 

#1874 Review Comments 4:
The explicit int conversion can be removed 

#1874 Review Comments 5:
No, because then you get `.append(char)` which will not output a number. `Integer.valueOf(char)` may be a more clear alternative?

 (I should have moved it back to the original place ;-)).

#1874 Review Comments 6:
No idea.

#1874 Review Comments 7:
Makes sense. Not a big fan of ternary either (except for very short ones on rare occasions).

#1874 Review Comments 8:
I _think_ `";"` is (all) the characters that should be escaped (quoted) and `\` is the character to escape with (which will also be escaped). Constant makes sense.

#1874 Review Comments 9:
Maybe better: https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#getNumericValue-char-

#1874 Review Comments 10:
I just looked a bit more and saw that the methods purpose is to encode chars into html and fount out that there is a simpler method from apache commons lang (StingEscapeUtils):
http://stackoverflow.com/questions/1265282/recommended-method-for-escaping-html-in-java

#1874 Review Comments 11:
I leave the ternaries as they jointly have some structure, despite each being quite hard to read.

#1874 Review Comments 12:
I think it is enough that these information are stored in the query. What was your idea behind these changes?

#1874 Review Comments 13:
Could you please leave these methods. I think they are used in the `Edit Groups Dialog` and if they are not used, then this is probably a bug.

#1874 Review Comments 14:
Why did you removed this as a LayoutFormatter?

#1874 Review Comments 15:
This should be logic, I think (as also the bib database parser/writer are logic)

#1874 Review Comments 16:
I would actually sort the events in the corresponding package (i.e. model.entry or model.database, model.groups)

#1874 Review Comments 17:
As I in that case had to move the interface to model as well, which didn't really make sense just to have that single function in model. The actual layout formatter is still there in logic though, calling the class in model.

#1874 Review Comments 18:
They were clearly not used. :-) May be a bug, but also a problem when moving them as they would introduce a dependency on logic in model. Better to reintroduce the functionality properly later. (And if you look at the translation strings only the one for "All entries" was actually removed, so everything else is still there (and the full description of "All entries" is never shown as it is only shown when you edit the group and you can't edit that group.)

#1874 Review Comments 19:
I'm not sure if it is possible to move it to logic, but I might have a look when rebasing. The main reason (shorttime) to move things like this to logic is that they introduce many dependencies to logic, so it is easier to move one method to logic than many to model. This one seems OK from that perspective if nothing else.

#1874 Review Comments 20:
This probably needs to be discussed, but is a two minute operation once decided. I can see advantages with both approaches.

#1874 Review Comments 21:
To reduce the dependencies and move fewer classes to model. Not sure if it actually did that at the end of the day though or if it was just the result of some temporary refactoring. I'll have a look.

#1874 Review Comments 22:
Checking again, it was to not having to provide get-methods to the new, minimal, `GroupSearchQuery` as that is only used here and the information might just as well stay on this level. (The reason for introducing `GroupSearchQuery` was to not move even more search stuff to model.)

#1874 Review Comments 23:
I aggree with @tobiasdiez. This should be placed in logic, if possible.

#1874 Review Comments 24:
Same for me. There are good reasons for both ways of structuring. @tobiasdiez Please provide a compelling argument, and we will go with your suggestion ;-)

From what I see: Sorting the events into different packages increases cohesion, but also "pollutes" the packages with more classes. What about further structuring, e.g. `model.entry.event`, `model.database.event`, `model.groups.event`?

--------------------------------------------------------------
#1872 Review Comments 1:
I would prefer a hard-coded keyword separator (instead of taking the one from the preferences) here and in the next tests.

#1872 Review Comments 2:
Yes, I was thinking of that as well.

#1872 Review Comments 3:
Somehow it doesn't matter since the keyword groups totally ignores the given keyword separator... #1877

--------------------------------------------------------------
--------------------------------------------------------------
#1869 Review Comments 1:
Is this blocking still a problem?

#1869 Review Comments 2:
Not sure if it was before either...

#1869 Review Comments 3:
Please extract that "magic number" to a constant.
https://en.wikipedia.org/wiki/Magic_number_(programming)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1856 Review Comments 1:
The formatting here and below looks a bit weird...

#1856 Review Comments 2:
see above

#1856 Review Comments 3:
It does indeed, but that is what Eclipse gives me when reformatting the whole expression...

#1856 Review Comments 4:
One of them was sorted out with the new code, but not the other...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1846 Review Comments 1:
Is it possible to use another node for storing? The whole preference tree gets exported. Therefore, this should be located somewhere else @matthiasgeiger 

#1846 Review Comments 2:
The password should only be set when there is a password available **and** the checkbox to remember the password is checked so please add `&& sharedDatabaseRememberPassword`.

#1846 Review Comments 3:
Please add a javadoc as this class might be usefull to others in the future.

#1846 Review Comments 4:
Does the parameter need to be a class field?
Why not make the class a utility class that doesn't need to be instantiated by making all methods static?
e.g.
`Password.encrypt("PasswordToEncrypt");`

#1846 Review Comments 5:
See: https://github.com/JabRef/jabref/pull/1846/files#diff-bf287bbdc594ec6ec66a15154e141110R316. If the checkbox is not select the pref is going to be cleared.

#1846 Review Comments 6:
Done.

#1846 Review Comments 7:
Could You suggest a new class name for this case, cause `Password` is not adoptable any more. Sth. which symantically means like `PasswordEncrypterAndDecrypter`.

#1846 Review Comments 8:
Done.

#1846 Review Comments 9:
Change the class in getLog to the actual class name (OpenSharedDatabaseDialog)
Otherwise logs shows wrong class.

#1846 Review Comments 10:
LOGGER.errror has a second paramter for the exception, so just pass, `e` as 2nd parameter

#1846 Review Comments 11:
same as above

#1846 Review Comments 12:
With this line your are probably (breaking/reducing the security):
And a char array "protects" you from accidentally writing the password in plaintext in a log...
http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords-in-java

sso I would recommend using a char[] in your Password class

#1846 Review Comments 13:
Add new line at end of file (possible an editor setting).

#1846 Review Comments 14:
Well, AES 128 bit is a joke and not really secure, I personally would prefer at least 256biz, but using stronger encryption is only possible with the Cryptographic Extensions Policy and unfortunately  those fall under the US import/export regulation laws. 

It would be possible to check if they are installed and use a greater key size. Not sure it if is really necessary here.

#1846 Review Comments 15:
Please specify transformation/padding/mode : 

> It is recommended to use transformations that fully specify the algorithm, mode, and padding instead of relying on the defaults.

As noted here: https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html

#1846 Review Comments 16:
Done.

#1846 Review Comments 17:
Done.

#1846 Review Comments 18:
Done.

#1846 Review Comments 19:
Done.

#1846 Review Comments 20:
This functionality is unsecure anyway. Aim: https://github.com/JabRef/jabref/pull/1846#issuecomment-242583251.

#1846 Review Comments 21:
Done.

#1846 Review Comments 22:
Done.

#1846 Review Comments 23:
Why is the logger protected here?

#1846 Review Comments 24:
Done. Copy & paste from `DBMSProcessor` :see_no_evil:.

--------------------------------------------------------------
--------------------------------------------------------------
#1844 Review Comments 1:
Would it make sense to just throw this Exception from the method instead? I guess the test will/should fail anyway.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1839 Review Comments 1:
Sorry, but I couldn't help to notice "stablished" which should be "established".

#1839 Review Comments 2:
Oh, yes. Done.

#1839 Review Comments 3:
Remove this line

#1839 Review Comments 4:
Add a comment why you can return here. This was also @oscargus comment.

#1839 Review Comments 5:
Rename to `setLoadingConnectButtonText`

#1839 Review Comments 6:
Done.

#1839 Review Comments 7:
Done.

#1839 Review Comments 8:
Done.

#1839 Review Comments 9:
duplicate here

#1839 Review Comments 10:
Done. (it comes from auto-merge)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1836 Review Comments 1:
Have you overseen this one? Or is the translation of "contains whitespace" hard?

#1836 Review Comments 2:
Yeah, "whitespaces" is not obvious...

#1836 Review Comments 3:
It depends on background color...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1830 Review Comments 1:
I am not quite sure about this one, but if you use the nio Paths methods, you maybe could omit the check for absolute/relative directory. 

Edit// Yeah I looked at the whole method here and I think it could be done with Paths.get and getParent 

#1830 Review Comments 2:
OK. I have very little (basically no) idea about nio.Paths though, so I prefer to avoid it at this time... If you could spare some time and provide code I can just paste it would be appreciated though.

#1830 Review Comments 3:
Just Paths.get().getParent() 

--------------------------------------------------------------
#1829 Review Comments 1:
Not added by you, but I would translate a bit more lax here: "Die_gewählte_Datenbank_nutzt_eine_veraltete,_nicht_mehr_unterstützte_Struktur."

--------------------------------------------------------------
--------------------------------------------------------------
#1826 Review Comments 1:
name it `isShared`. Reason: Negations should not be used in variable names.

#1826 Review Comments 2:
`fileDir` is the directory, where the local PDFs are stored. This has to be available on shared databases, too. So please remove this and the next line.

#1826 Review Comments 3:
I assume, the encoding is always UTF-8. Please put that as comment above this line.

#1826 Review Comments 4:
Done.

#1826 Review Comments 5:
Done.

#1826 Review Comments 6:
Yes it is. Done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1821 Review Comments 1:
Isn't it `changelog`? (See for instance https://en.wikipedia.org/wiki/Changelog)

#1821 Review Comments 2:
Translation: Ouvre_la_page_Facebook_de_JabRef

#1821 Review Comments 3:
Translation: Ouvre_le_blog_de_JabRef

#1821 Review Comments 4:
Translation: Ouvre_le_site_Internet_de_JabRef

#1821 Review Comments 5:
Translation: Ouvre_un_lien_d'où_la_version_de_développement_actuelle_peut_être_téléchargée

#1821 Review Comments 6:
Translation: Afficher_les_changements_dans_les_versions_de_JabRef

#1821 Review Comments 7:
Translation: Site_Internet

#1821 Review Comments 8:
Translation: Blog

#1821 Review Comments 9:
Translation: Plus_sur_JabRef

#1821 Review Comments 10:
Translation: Version_en_développement

#1821 Review Comments 11:
Translation: Afficher_le_fichier_des_changements

#1821 Review Comments 12:
this should be `d'où-la ... peut-être` -right?

#1821 Review Comments 13:
or if the internet is right `d'où_la...peut_être` :wink: 

--------------------------------------------------------------
--------------------------------------------------------------
#1818 Review Comments 1:
Please use `@link` and `#` - see http://stackoverflow.com/a/1521318/873282

#1818 Review Comments 2:
The exception name does not match the text. Why is not "is not supported" used as text and the "longer" ommitted?

#1818 Review Comments 3:
`private` should be enough?

#1818 Review Comments 4:
`Old` -> `pre3dot6`

#1818 Review Comments 5:
Maybe, the whole method should be called `checkIfDatabaseIs3dot6OrNewer` (not sure whether that is really the right name)

#1818 Review Comments 6:
Done. (removed old comment)

#1818 Review Comments 7:
Done.

#1818 Review Comments 8:
Yes. Done.

#1818 Review Comments 9:
Done (Renamed to `checkForPre3Dot6Intergrity`)

#1818 Review Comments 10:
Click

#1818 Review Comments 11:
Obsolete empty line

#1818 Review Comments 12:
Please rename to `openHelpPage`

#1818 Review Comments 13:
plz EOL at EOF

#1818 Review Comments 14:
Done.

#1818 Review Comments 15:
Done.

#1818 Review Comments 16:
Could you rename it here to migratePre3dot6Database, too? See https://github.com/JabRef/help.jabref.org/pull/56/  :innocent: 

#1818 Review Comments 17:
Done.

#1818 Review Comments 18:
Done.

#1818 Review Comments 19:
The error message should mention "JabRef version 3.6" so that even less experienced JabRef users know what it means. 

#1818 Review Comments 20:
Same here, make it clear to non-power users.

#1818 Review Comments 21:
If I mention 3.6, so this code would have to be updated after every version increment. "Click here to learn about the migration of pre-3.6 databases into current JabRef version"? WDYT? I think it's still bad.

#1818 Review Comments 22:
Since the db structure did only change with v 3.6, you can always write, that the error occured because of a database with the structure used in JabRef with a version < 3.6. It will always be true and does not need an updated version number. 

#1818 Review Comments 23:
Now I think we should keep it general. Like "Click here to learn about a suitable database migration.", cause it's only a link to a help page. The help page describes exactly the reason and the solution. WDYT?

#1818 Review Comments 24:
Probably "However, a new compatible database was created."? See the argument above.

#1818 Review Comments 25:
Ok i see the information on the help page is detailed enough. LGTM then!

#1818 Review Comments 26:
Do not localize log messages (remove the string from the translation if not used anywhere else).

#1818 Review Comments 27:
Should that come **before** the `setupSharedDatabase`? I think, the migration warning is displayed at other places, or isn't it? If it is, please add a comment above the if stating the reason why it comes after the setup

#1818 Review Comments 28:
Can you write the `u` in a lower case letter? -> `setup...`

#1818 Review Comments 29:
Done. (also removed from language files)

#1818 Review Comments 30:
Done. (see comment)

#1818 Review Comments 31:
Done.

--------------------------------------------------------------
#1817 Review Comments 1:
This will return, but not hard to add. :-)

--------------------------------------------------------------
#1816 Review Comments 1:
Did I get it right that this was just an unsafe version of `public void highlightEntry(final BibEntry be)` ?

#1816 Review Comments 2:
Maybe rename`be` to `bibEntry`. I dont see why you should not call it what it is.

#1816 Review Comments 3:
nope, this was an unused method which did almost the same as `public void highlightEntry(final BibEntry be)` (accepting a position instead of a `BibEntry`

#1816 Review Comments 4:
fixed

#1816 Review Comments 5:
Please use correct indent.

#1816 Review Comments 6:
fixed

--------------------------------------------------------------
#1815 Review Comments 1:
This is JabRef 3.x - do not change bib files created with old versions of JabRef

#1815 Review Comments 2:
Instead of "Fixed localization error when changing key bindings ..." I would rather write "Fixed modified keybindings not working ..."

#1815 Review Comments 3:
Rename without "AsList" or "AsListing" as it doesn't return a list.

#1815 Review Comments 4:
This could be replaced by one line by using `modifiersList.stream.collect`

#1815 Review Comments 5:
Why do you need this? I think `evt.isControlDown()` will return `false` anyway. 

#1815 Review Comments 6:
I'm missing the meta key, which is especially for mac users an important modifier key. The default shortcuts of JabRef also include this modifier, so please add it.

#1815 Review Comments 7:
You don't need to make them class variables, do you?

#1815 Review Comments 8:
Is that true? altgr without space?

#1815 Review Comments 9:
On linux 'alt gr' works just fine. On my windows machine at home, 'ctrl alt' is set instead of 'alt gr' but no matter if it's written with or without space in between. I tested it on the master and 'alt gr' is always parsed as 'ctrl alt' so it works as intended I guess.

#1815 Review Comments 10:
Still unanswered. :innocent: - maybe these variables can now just be deleted?

#1815 Review Comments 11:
Move comment form after the return to the line above

#1815 Review Comments 12:
Could you comment why `ENTER` is treated as modifier? Also applies to "TAB" and "BACK_SPACE". Maybe the reason is that these keys should not be used at shortcuts at all? Maybe a new `if` statement should be introduced with an appropriate comment.

#1815 Review Comments 13:
The internal implementation should not exposed. Formulate it in an abstract way:

> Collects the English translations of all modifiers and returns a space separated list

#1815 Review Comments 14:
BUMP

#1815 Review Comments 15:
BUMP

#1815 Review Comments 16:
BUMP

#1815 Review Comments 17:
BUMP

#1815 Review Comments 18:
I encountered an unnecessary space so i deleted it

--------------------------------------------------------------
#1814 Review Comments 1:
If someone please could double check this rewrite. It is quite confusing sometimes to change the null vs isPresent...

#1814 Review Comments 2:
Is it okay that mem can be null?

#1814 Review Comments 3:
This logic I will rewrite.

#1814 Review Comments 4:
LGTM :+1:  I see no wrong things. 
You could just rename the mem to make it a bit clearer what it is purpose/what is stored in it,
I can only guess: Mem=Memory?

#1814 Review Comments 5:
Yeah, I can only guess as well. `disk` is quite clear, but the difference between `mem` and `tmp` is not obvious...

#1814 Review Comments 6:
Yes. It is only used for the undo to indicate that there was no content earlier.

#1814 Review Comments 7:
What happens for, e.g., `new StringReader("@preamble{}` and `new StringReader(""}`

#1814 Review Comments 8:
That may indeed be more relevant things to test. :-)

#1814 Review Comments 9:
I added those tests and they returned as expected. However, neither now or before will the saved file contain the empty preamble. Hence, it does not really matter if the preamble is "" or null as it will be "" when shown in the dialog and null when saved (i.e. not saved).

--------------------------------------------------------------
--------------------------------------------------------------
#1811 Review Comments 1:
Typo

#1811 Review Comments 2:
fixed

--------------------------------------------------------------
#1810 Review Comments 1:
Or should we use the Globals.getDefault encoding here?

#1810 Review Comments 2:
Yes. Use `Globals.pref.getDefaultEncoding()`.

--------------------------------------------------------------
#1809 Review Comments 1:
Why did this change?

#1809 Review Comments 2:
To increase the readability.

#1809 Review Comments 3:
What happens if an entry is inserted? I have no idea how the code works, but it seems like this is some sort of handling for inserted entries?

#1809 Review Comments 4:
`ListEvent.INSERT` means that the entry was inserted into the selection (thus selected by the user), and there lies the problem.
When multiple entries were selected and you select an single entry inside that selection there are only `ListEvent.DELETE`-events, thus JabRef doesn't recognize the change.

#1809 Review Comments 5:
OK. Thanks for clarifying! :+1:

--------------------------------------------------------------
#1807 Review Comments 1:
Should it be a space in front of %1?

#1807 Review Comments 2:
Yes, of course. Thank you for catching this!
Corrected.

--------------------------------------------------------------
#1801 Review Comments 1:
I think you can get rid of the Action Class and just use the actionPerformed method.

#1801 Review Comments 2:
Yeah this is just an old artifact from the master branch. WIP right now!

--------------------------------------------------------------
#1800 Review Comments 1:
The filter and second map is not necessary, it should workt with   map(BibEntry::getCiteKeyOptional).orElse().collect...

#1800 Review Comments 2:
Obviously! I remember thinking that this was a weird call... One shouldn't write code tired... 

#1800 Review Comments 3:
I agree my code looks weird, but I cannot figure it out. orElse won't work since we are operating on a stream (which happens to be a stream of optional). Based on the example here one can write it slightly more compact though. http://stackoverflow.com/questions/24254209/using-optional-with-streams-in-java

#1800 Review Comments 4:
I was not fully sure either. But I think that's one of the current limits of the optional stream and ist listed for jdk9...
http://stackoverflow.com/questions/22725537/using-java-8s-optional-with-streamflatmap

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1794 Review Comments 1:
This is the actual change here, the rest is formatting.

#1794 Review Comments 2:
never null since tabCount > 0

#1794 Review Comments 3:
Should be enough to replace on string level rather than each space-separated sub-string.

#1794 Review Comments 4:
Is this attribute really needed (I guess it complained about unsafe operation, but I do not see any unsafe operation here...) It may go away if you use Arrays.stream() instead of wrapping it in a new list before. 

#1794 Review Comments 5:
As I understand it, the attribute is a way of the developer saying that there are no unsafe operations, rather than the checker claiming that there is. So it doesn't really matter what the code is. But I may be wrong.

--------------------------------------------------------------
#1793 Review Comments 1:
Should this parameter be called `formatterName`?

#1793 Review Comments 2:
How much effort would it be to switch to `Optional` at `prefs.getCustomExportNameFormatter`?

#1793 Review Comments 3:
Not much. However, the `continue` prohibits the use of `ifPresent` so there will still be a `if (contents.isPresent())`. Still that is probably better.

#1793 Review Comments 4:
Yes. Will change in LayoutEntry as well (I just used the name from refactoring).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1789 Review Comments 1:
I think you should pass the jFrame parent here instead if null

#1789 Review Comments 2:
same as above?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1785 Review Comments 1:
Remove that outcommented line

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1782 Review Comments 1:
Duplicate empty line. @koppor is this caused by our Eclipse Settings? I'm seeing that all the time.

#1782 Review Comments 2:
This one is probably my bad, although I know sometimes Eclipse add double empty lines.

--------------------------------------------------------------
--------------------------------------------------------------
#1780 Review Comments 1:
Why do you introduce these additional lines?

#1780 Review Comments 2:
Hm, seems like a formatting thing from Eclipse, when I saved the file. They were not intented by me.

--------------------------------------------------------------
#1778 Review Comments 1:
Use the Optional methods getFiedOptional 
Then you can use the ifPresent or isPresent to check if an Entry is there

#1778 Review Comments 2:
Have a look at the getFieldAlias (just don't renenber the correct name).  It allows you to get the value .e.g adress or journal, independent of the actual field. For example when year not present than the value is extracted from the date field

#1778 Review Comments 3:
StandardCharsets.UTF8 is the correct java method, the other is an external lib.
All "default" enums from the Java Api have the prefix Standard (e.g. StandardFileOptions)

#1778 Review Comments 4:
I am not aware of the mods fornat, but does it have an issue field`?
Then this would be worth testing, too. Some journals have both volume and issue

#1778 Review Comments 5:
Done.

#1778 Review Comments 6:
Done.

#1778 Review Comments 7:
Done.

#1778 Review Comments 8:
I don't think so. The issue field will not get exported and I couldn't find anywhere that the mods format should  have an issue field.

#1778 Review Comments 9:
https://sourceforge.net/p/bibutils/home/Working%20with%20MODS/

"The part tag is the only new tag defined in the `<relatedItem>` that isn't defined in the main mods level. For a `<relatedItem type="host">`, it describes where the object is in terms of volume, issue, pages, and the like. From the above example:

```
<part>
   <date>1984</date>
   <detail type="volume"><number>38</number></detail>
   <extent unit="page">
       <start>879</start>
       <end>887</end>
   </extent>
</part>
```

The detail is used to describe single item locators, such as volume, issue, number, section, and session."

#1778 Review Comments 10:
Btw, the shemas are now here on github, too: according to their release annoucncement:
http://www.loc.gov/standards/mods/mods-3-6-announcement.html

#1778 Review Comments 11:
Thanks! I've added the issue field.

#1778 Review Comments 12:
Can you use `class.getResource()` to get the resource folder? This makes the test more robust to changes in the project structure. 

#1778 Review Comments 13:
Just saw it: Please use Standard.Charsets.UTF-8, otherwise gradle check on windows  will be complaining about the encoding again ;)

#1778 Review Comments 14:
I can not use  `Standard.Charsets.UTF-8` on this branch. It does not exist. My master does not have it, too. 

#1778 Review Comments 15:
I think @Siedlerchr meant StandardCharsets.UTF_8, which it looks like you are using, at least assigning it to charset.

#1778 Review Comments 16:
Yes ;) Don't take my code suggestions too literally, as I sometimes recall them only from my memory when reading a review 

#1778 Review Comments 17:
Why don't you use `Charset.defaultCharset()` as you used for the import.

#1778 Review Comments 18:
This variable is only used once, I think it can be replaced by `Charset.defaultCharset()`.

#1778 Review Comments 19:
Better to explicitly use a well defined charset. `Charset.defaultCharset()` is system dependent, so it might be that the test will not pass on certain systems then.

#1778 Review Comments 20:
I think this entry corresponds to the second entry in the ModsExportFormatTestMultipleEntries.bib file. Here the genre is defined as `article` but in the .bib file the second entry is an `Inproceedings`.

#1778 Review Comments 21:
Same as the last comment, here the genre is defined as `inproceedings` but the matching entry in the .bib file is an `Article`, is this intentional?

#1778 Review Comments 22:
Please not! When you test sth with export/import, please always use StandardCharsets.UTF-8.
Otherwise gradle build on win will complain (because the console charset is different from utf-8 on win)

#1778 Review Comments 23:
Yes, please always use StandardCharsets.UTF-8 everywhere for import and export

#1778 Review Comments 24:
see below, please use utf-8 charset

#1778 Review Comments 25:
The order how the entries get exported are not the same as the order in the bib file. So that's why they are switched. 

#1778 Review Comments 26:
See above

#1778 Review Comments 27:
Yes they are switched but what I mean is that the second entry's genre is "Inproceedings" according to ModsExportFormatTestMultipleEntries.bib but here the matching entry's genre is defined as "article".

#1778 Review Comments 28:
Now I know what you mean... Yeah you're right. I'll look into it.

#1778 Review Comments 29:
should be in the right order now.

#1778 Review Comments 30:
Do the tests need to be adjusted as they didn't fail when there actually was an error?

--------------------------------------------------------------
--------------------------------------------------------------
#1775 Review Comments 1:
Maybe also add if (file == null) return false;

#1775 Review Comments 2:
done

#1775 Review Comments 3:
Did this show up in the development version (like a few hours ago ;-))? In that case I think we should skip the ChangeLog entry. Great job though!

#1775 Review Comments 4:
Must be dev version only, related to the restructuring of the Dialogues which came with #1336 

#1775 Review Comments 5:
I thought so. Well, it is not entirely consistent (there are similar
entries in the current development section of the ChangeLog), so more for
next time.

(I'm thinking that maybe someone should traverse the ChangeLog and sort
issues at some stage. Then one can rephrase some entries, which are just
copies of the issue, I've done that, and possibly remove "doubtful" entries
like this. Hard to always know and keep track of though.)

#1775 Review Comments 6:
Removed the ChangeLog entry.

--------------------------------------------------------------
#1774 Review Comments 1:
I would rather use the ImportFileFilter and there add a new constructor overload which accepts a List of Import Formats, e.g. just moving the Stream stuff in the ImportfileFilter, because it internally uses already the 
Would make it here much cleaner. And in the dlg class you just call SetFileFilter(importFF)... 

Maybe in future we can recycle that for the Export formats, too...

#1774 Review Comments 2:
Isn't this redundant`? If the path is giving an Optional.Empty and you check with ifPresent then you already checked if the file/path exists. 

#1774 Review Comments 3:
I checked if there is a Path inside the Optional but not if the file exists. However, this will probably never happen as long as the file is not removed between the selection and the import. Was a artifact from the old code i was also thinking about...

#1774 Review Comments 4:
Hm, I don't really get the idea with this text. Adds way more complexity in my opinion. I need a new Import format then and matching FileExtensions etc pp?!

#1774 Review Comments 5:
Well, the ImportFileFilter is an custom already exiting FileFilter, which maps the extension to the import format.
It internally calls the accept method of the method of an ExternalFileFilter. See #1775 which you already merged in...

If you stay with your solution, then you could remove it completely.

#1774 Review Comments 6:
Why did you remove the Preference? It is a really nice feature to preselect the last used Filefilter for exporting/importing. 

#1774 Review Comments 7:
Because all supported filters are now default so you can definitely see possible files. If the importer has problems with auto recognition one can select the import format by hand (although this should not happen). Just wanted to remove complexity here. Maybe it's still needed - we have to discuss this... 

#1774 Review Comments 8:
Yeah, you are right, forgot that new feature. Then it's ok to be removed.

2016-08-19 11:58 GMT+02:00 Stefan Kolb notifications@github.com:

> In src/main/java/net/sf/jabref/preferences/JabRefPreferences.java
> https://github.com/JabRef/jabref/pull/1774#discussion_r75456162:
> 
> > @@ -303,7 +303,6 @@
> >      public static final String SHOW_FILE_LINKS_UPGRADE_WARNING = "showFileLinksUpgradeWarning";
> >      public static final String SIDE_PANE_WIDTH = "sidePaneWidth";
> >      public static final String LAST_USED_EXPORT = "lastUsedExport";
> > -    public static final String LAST_USED_IMPORT = "lastUsedImport";
> 
> Because all supported filters are now default so you can definitely see
> possible files. If the importer has problems with auto recognition one can
> select the import format by hand (although this should not happen). Just
> wanted to remove complexity here. Maybe it's still needed - we have to
> discuss this...
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1774/files/a3656a640c1ebb6b43447152a25fbed7b90a1a66#r75456162,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AATi5COhrZNkN301wn-NogiV6caWxPP5ks5qhX44gaJpZM4Jnghh
> .

#1774 Review Comments 9:
I know that but I need 2 new Objects for getting that to work, a FileExtension enum with all import endings and a new Import Format class for all Import Files?! This is a little bit complex to implement as the number of import formats can change. or am I on the wrong track here?

#1774 Review Comments 10:
Not sure if I get the point of your discussion, but in general I support the idea that FileDialog should support a way to set the extensions and file filter based on import formats (because this should happen quite often).
What about adding a `static FileDialog createDialogForImport(frame, workingDir, Collection<ImportFormat>)` which contains most of the initialization code here.

#1774 Review Comments 11:
@stefan-kolb  You are thinking a bit too complex ;)
We already have those two thing in the ImportFormat class.
The importFormat  has a method getExtensions wich returns the asscoatiacted enum value from the FileExtensions class.  
Currently in the importFileFilter we have support for exaclty one importFormat. 

#1774 Review Comments 12:
A ok, so youre thinking about `public ImportFileFilter(String name, List<ImportFormat> formats)`. I'm still note quite sure if we really need the `ImportFileFilter`. Internally all it really does is `new FileNameExtensionFilter(extensions.getDescription(), extensions.getExtensions());` and then overriding all methods introducing potential problems as in #1775.

#1774 Review Comments 13:
But ok, let's try this. Maybe we can reuse this then somehow.

#1774 Review Comments 14:
@Siedlerchr Moved the logic into the ImportFileFilter class.

#1774 Review Comments 15:
Yeah. That looks better. Keeps the dialog more clear. :+1: 
I have no further remarks. You can merge it,. 

#1774 Review Comments 16:
Yeah. That can always happen regardless of files or not.
I think In the dialog itself is already checked if the file/path exists. 

#1774 Review Comments 17:
Maybe use the nio equivalent? Files.exist(path) or whatever the name of the method was.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1765 Review Comments 1:
Please name the test files after what they do and minimize them, not like the Stupro did just enumerating them :smile: 

#1765 Review Comments 2:
all field names in lower case. Space after `number`. Patents with lower case "p"

#1765 Review Comments 3:
Don't forget to add the space after the `if` and move the bracket in the same line.

#1765 Review Comments 4:
Why another emtpy line?

#1765 Review Comments 5:
I don't see biblatex mode activated for that file (respective `jabref-comment` missing). How can this test pass? Because of the autodetection of the bib file mode?

#1765 Review Comments 6:
Why is this test file changed? Why isn't there generated a new file? Was the old file an invalid MsBib file?

#1765 Review Comments 7:
Integrate that in the method body (or as real comment in the method comment)

#1765 Review Comments 8:
see below

#1765 Review Comments 9:
Why isn't there a distinction between bibtex and biblatex? - Currently, the importers all do bibtex and the conversion to biblatex should be done afterwards (currently not implemented). For me, it would be also OK to parameterize the importers to generate bibtex or biblatex.

#1765 Review Comments 10:
Why not "biblatex"? See below.

#1765 Review Comments 11:
Maybe a result of the rebasing. Will fix it.

#1765 Review Comments 12:
The thing is: Patent and InternetSite (Online) would both get mapped to misc, as this are non avaiable entry types in bibte
Therefore I chose biblatex to make it consistent.

#1765 Review Comments 13:
I removed some fields to have shorter test files. It does not make sense if every field is tested in every file, Makes it only harder to spot errors.

#1765 Review Comments 14:
Just maps the fields from the conversion HashMap from MsBib to the BibLaTex fields, so the test doesn't check for the bibmode.

#1765 Review Comments 15:
StringBuilder/StringBuffer?

#1765 Review Comments 16:
No, it may not. The Optional will be empty in case it was supposed to contain null.

#1765 Review Comments 17:
Bah, removed the comment by mistake... Please see the email...

Basically: should it be `@Deprecated` if it is a method that should be improved rather than removed?

#1765 Review Comments 18:
Hm, yeah, I was not sure how to do it best, but I wanted to give a clear sign that the method atm is not fully impleemented

#1765 Review Comments 19:
{ in line above

#1765 Review Comments 20:
Empty line

#1765 Review Comments 21:
Why did you remove the bracketsformatter here? I added it so we dont end up wit `{ACM} Cooperation` in Word bibliographies. As long as we don't have a LaTeX-free BibEntry version we should keep it that way?

#1765 Review Comments 22:
Just use comments there for now and keep it the way it is.

#1765 Review Comments 23:
See above.

#1765 Review Comments 24:
LatexToUnicode removes the brackets as well.

#1765 Review Comments 25:
The Bracketsformatter broke things up when run before the Unicode formatter. E.g. the unicode was not correclty converted.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1755 Review Comments 1:
I would put the \relax in the code-quotes, but that is just a small unrelated thing..;)

#1755 Review Comments 2:
No, that is both related and relevant. ;-)

I'll fix it tomorrow (later today).

Den 17 aug. 2016 00:08 skrev "Christoph" notifications@github.com:

> In CHANGELOG.md
> https://github.com/JabRef/jabref/pull/1755#discussion_r75030057:
> 
> > @@ -67,6 +67,9 @@ We refer to [GitHub issues](https://github.com/JabRef/jabref/issues) by using `#
> > - Fixed NullPointerException when trying to set a special field or mark an entry through the menu without having an open database
> > - Fixed [#1257](https://github.com/JabRef/jabref/issues/1324): Preferences for the BibTeX key generator set in a version prior to 3.2 are now migrated automatically to the new version
> > - Fixed [#1716](https://github.com/JabRef/jabref/issues/1716): `@`-Symbols stored in BibTeX fields no longer break the database
> >   +- Fixed [#1499](https://github.com/JabRef/jabref/issues/1499): {} braces are now treated correctly in in author/editor
> >   +- Fixed [#1531](https://github.com/JabRef/jabref/issues/1531): \relax can be used for abbreviation of author names
> 
> I would put the \relax in the code-quotes, but that is just a small
> unrelated thing..;)
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1755/files/752c54d5d96fbfd2861970a8fb86463f0ac1ad86#r75030057,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AHvRQedYCQBoTKdLOEle7MnEtbznpt5cks5qgjTZgaJpZM4Jl1UE
> .

#1755 Review Comments 3:
I prefer tests in the form

```
Author expected = new Author("Firstname", "F.", null, "Bailey-Jones", null);
Assert.assertEquals(new AuthorList(expected), AuthorList.parse("Firstname Bailey-Jones"));
```

They are shorter and provide better feedback what went wrong parsing the author (instead of `getFirst` was something but expected null, you get a complete diff of all information in the parsed author vs expected author).

#1755 Review Comments 4:
Makes sense. Just copied the earlier ones now.

--------------------------------------------------------------
#1754 Review Comments 1:
Add Newline.

--------------------------------------------------------------
#1753 Review Comments 1:
Is it really required to translate "BibTeX"? It should not need to be

#1753 Review Comments 2:
All format names like BibTeX or BibLaTeX do not need to be translated, same applies to things like the fetcher names (e.g. Springer, Gvk ), as this are usually proper nouns.

#1753 Review Comments 3:
Can we add tests, that certain words are never translated?

#1753 Review Comments 4:
Maybe a blacklist would be a good idea. If the word is contained in the blacklist, then an error.

#1753 Review Comments 5:
I think adding these tests should be discussed in a separate Issue. @bruehldev s task here is to reenable the tests so that the JavaFX branch can be merged with the master. 

--------------------------------------------------------------
#1752 Review Comments 1:
`in`  instead of `within`?

Otherwise: LGTM.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1743 Review Comments 1:
rename variable o please.

#1743 Review Comments 2:
Please rename `item` to `button`

#1743 Review Comments 3:
Why did you add this empty line?

#1743 Review Comments 4:
space missing before `optMenueItem` and rename it to `optMenuItem` - menu is spelled without final `e` in English

#1743 Review Comments 5:
Space missing before `component`

--------------------------------------------------------------
#1741 Review Comments 1:
Please extract `frame.getCurrentBasePanel().getMainTable()` to new local variable.

#1741 Review Comments 2:
Please move it to the end of the Fixed section and describe the bug

--------------------------------------------------------------
--------------------------------------------------------------
#1739 Review Comments 1:
I do not see any need for this. Or rather, no other languages state the updates. (I think French, Turkish, and Swedish are updated recently as well.) Maybe we should collect this in a single point before each release?

#1739 Review Comments 2:
Keine _ hier? 

#1739 Review Comments 3:
Yes, no CHANGELOG.md entry for language updates

#1739 Review Comments 4:
I see the `_`.

#1739 Review Comments 5:
Yes, It is `+%0_file=%0_-Datei`

#1739 Review Comments 6:
OK. So PubMed -Datei? German is a weird language. ;-)

#1739 Review Comments 7:
In my German version of JabRef, I see translations like ArXiv-Spalte, BibTeX-Felder and BibTeX-Datei. To be consistent it should be PubMed-Datei and not PubMed -Datei.

#1739 Review Comments 8:
@oscargus You are right in spotting the issue. It has to be **without** the space. I think, both @Siedlerchr and me did not get your comment. @grimes2: Thank you for confirming.

I just fixed it in the master branch. Thank you for spotting.

--------------------------------------------------------------
#1738 Review Comments 1:
make singleFromString deprecated and rewrite it as `return singleFromStringOptional(...).orElse(null)`;
Then this can be merged.

#1738 Review Comments 2:
Makes sense.

--------------------------------------------------------------
#1737 Review Comments 1:
There is already an old translation string for "plain text", right? If not, "Plain text" would be preferred.

#1737 Review Comments 2:
Or maybe even go for "Plain text file" now that I read the whole line of code. :-)

#1737 Review Comments 3:
Checkstyle will complain (I guess).

#1737 Review Comments 4:
Slightly unrelated, but didn't @tobiasdiez have some good argumentation that this type of file should be in singular? So `FileExtension`. Not in any way required for the PR though.

#1737 Review Comments 5:
Ah I just noticed, we have already both cases of Plain text in the translations. 

#1737 Review Comments 6:
I already thought about it when doing it first in  #1336 and would generally agree, but in this case one entry can have multiple extensions (for example EndNote) and I therefore thought the plural form would reflect it better 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1731 Review Comments 1:
Why is the encoding special and always has to be provided while other metadata is optional? I would still provide an empty constructor and let `getEncoding` return an `Optional<Encoding>`. Then it is the caller business to decide which encoding he wants if no encoding is set in the metadata.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1725 Review Comments 1:
This is not related to EDT, but still solves a bug.

#1725 Review Comments 2:
Could this kind of code (checking for isEventDispatch etc.) extracted to some util method getting passed a function?

#1725 Review Comments 3:
Probably, yes. However, I'm not sure if that is a good idea in general. (Except for the fact that I do not really know how to pass it... As `Runnable`? Probably...

#1725 Review Comments 4:
Bug fix so that one can click "Cancel" instead of selecting an entry type and still not get an NPE.

#1725 Review Comments 5:
NPE when no cite key is set...

#1725 Review Comments 6:
 It would be nice, if you could at least assign the getMainFrame value to a local variable. Would improve the readability a bit.

#1725 Review Comments 7:
I'm sorry, but I have a hard time understanding comments like this. ~10 EDT bugs, 3 NPEs, 6 forgotten translations and the comment relates to the readability of a white line? 

Again, I think people hesitate touching bad code in the long run if the reviews focus more on what could be done as well (just because there are lines on the screen that are not perfect) instead of what has been done. No offense though and none taken.

(I think the readability is OK and if anything one should maybe just skip many of the arguments and get it from JabRefGUI in PdfImporter instead, but I haven't checked how it is called in other places.)

#1725 Review Comments 8:
Probably better to initialize in the constructor. 

#1725 Review Comments 9:
This is hard to read. Maybe determine the localized string before calling `SwingUtil.invokeLater()`

#1725 Review Comments 10:
This is again hard to read. Extract the second part to a separate variable.

#1725 Review Comments 11:
Logger.error? same below

#1725 Review Comments 12:
Is this if statement even necessary? What happens if I'm on the event dispatcher thread and invoke 

```
SwingUtilities.invokeAndWait(() -> {
                    previewPane.setText(newValue);
                    previewPane.revalidate();
                });
```

#1725 Review Comments 13:
So `res.getEntries().get(0)` could be `null`? 
In this case I would prefer if `pi.importPdfFiles` is fixed. A null value in a list is very very counterintuitive. 

#1725 Review Comments 14:
Maybe there can be used a simple `Collections.emptyList()`

#1725 Review Comments 15:
I assume that this `if` statement is necessary and one cannot just call `invokeLater()`?

#1725 Review Comments 16:
I think it needs to be reset. If not, if you run it once and then try to run it with multiple entries selected, update will still be called and then result is not empty.

#1725 Review Comments 17:
Then you get an error. `invokeLater` works, but not `invokeAndWait`. http://stackoverflow.com/questions/2435397/calling-invokeandwait-from-the-edt

#1725 Review Comments 18:
I got an NPE here at least. I do not remember the details (I think pressing cancel when asked about entry type) and I think I tested it after changing it. although I'm hindsight it looks more likely that the list is null than the list entry and that fixing it at the source may be better. emptyList() will break it as a null is better than index out of bounds. I'll have a new look later tonight.

#1725 Review Comments 19:
Makes sense. It is a severe problem if it happens. Still quite unlikely (which was why I selected warn), but clearly no harm in having error. (I'm thinking a lot in risk = severity*probability, but not useful here.)

#1725 Review Comments 20:
You can, but I thought it made sense to change it directly rather than put it in a queue with possibly strange, despite unlikely, consequences. Edits -> do them (if allowed), gui updates -> put them in the queue.

#1725 Review Comments 21:
Fixed.

#1725 Review Comments 22:
Still easier than before. ;-) I'll fix it.

#1725 Review Comments 23:
I fixed it now. The null came from four-five methods down, but now that part is better with `Optional`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1717 Review Comments 1:
Please remove this unecessary space. :smile: 

#1717 Review Comments 2:
Besides checking the parsed serialization, could you please also add another test which checks that an entry containing an at symbol is parsed correctly, i.e. has the correct field values.  

#1717 Review Comments 3:
I would extract the `@` symbol as a constant, to make it clear. e.g.  private final `COMMENT_SYMBOL = '@'`

#1717 Review Comments 4:
Remove the "string" suffix from the variable.

#1717 Review Comments 5:
Would a simple trim() work, too?
https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#trim--

#1717 Review Comments 6:
Nope. Whitespace in front of the comment should not be removed.

#1717 Review Comments 7:
Okay. Then I would suggest extracting the Pattern with Pattern.compile and use Matcher.replaceF'irst...
Discussion about it on SO: http://stackoverflow.com/questions/1466959/string-replaceall-vs-matcher-replaceall-performance-differences
https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#replaceFirst(java.lang.String)

#1717 Review Comments 8:
It is not the `COMMENT_SYMBOL` but the general "start of bibtex entry/string/preamble/comment" symbol.
`@` as `char` is used in various places in the parser. However, a) I can't find a good name for the final field and b) I prefer touching this code as little as possible -> I stick to the `'@'` here :)

#1717 Review Comments 9:
It is a bit better to compare the parsed list to an expected entry list, i.e.

```
BibEntry expected = new BibEntry("article", "test").withField("author", "bla");
assertEquals(expected as list, parsed);
```

(slightly different code is probably needed)

#1717 Review Comments 10:
... which leads to the question whether comments prior the entry are significant to determine "equality" of two entries ;-)

I tend to say "no", thus not modifying the `equals()` method. Other opinions?

#1717 Review Comments 11:
I agree with @matthiasgeiger that the pre-entry comments should not effect equality. (How that effects @tobiasdiez comment I have no clue about though.)

#1717 Review Comments 12:
> (How that effects @tobiasdiez comment I have no clue about though.)

If `equals()` does not include the pre-entry comments, it is not sufficient in this test to state `assertEquals(expectedList, parsedList)` - because the purpose of the test is to check for the correct parsing of these comments. 

--------------------------------------------------------------
--------------------------------------------------------------
#1712 Review Comments 1:
Feel free to remove this line. :-) But should be OK to merge either way.

#1712 Review Comments 2:
Will be removed the next time I touch it ;)

--------------------------------------------------------------
#1710 Review Comments 1:
I will remove this once I rebase because of the translation conflicts as it is not needed...

--------------------------------------------------------------
--------------------------------------------------------------
#1706 Review Comments 1:
I would suggest to add the trim method to createFileNameFromPattern

#1706 Review Comments 2:
Also mark the setProtectedTermsLoader deprecated.

#1706 Review Comments 3:
I liked the previous code better since it was easier to understand.

#1706 Review Comments 4:
Better put this requireNonNull statement in the constructor. The code here fails anyway with a NPE if the terms loader is null.

#1706 Review Comments 5:
instead of the setProtectedTermsLoader use `termsFormatter = new ProtectTermsFormatter(protectedTermsLoader)` and use it below in cleanupCasesAddsBracketAroundAluminiumGalliumArsenid.

#1706 Review Comments 6:
@Siedlerchr said it wasn't possible. Maybe he can take care. Possibly we should just merge and fix that the correct way later.

#1706 Review Comments 7:
I'll take another look

#1706 Review Comments 8:
Maybe it should even moved to FileNameCleaner.cleanFileName?

#1706 Review Comments 9:
Good spot! I oversaw it. Btw, the method cleanFileName was the root cause for the problem

--------------------------------------------------------------
#1705 Review Comments 1:
No idea why this is needed. If an exception is thrown than the test fails automatically?!

#1705 Review Comments 2:
ItelliJ shows orange icon when unexpected Exception is thrown, but red icon when `assertDoesNotThrow` is used. I really like this triple state: failed, not failed, something unexpected happened (unexpected in the sense that the test does not forsee the exception). 

The old code did this with try/catch and Assert.fail(). I don't like that, because I don't see the exception clearly. With the code above, the Assertion fails and the exception is shown clearly.

#1705 Review Comments 3:
I don't think that this is necessary. Either an exception is provoked by a test - or it is "something unexpected".
Thus: Annotate the expected excpetion for tests which should throw exceptions and do not catch exceptions in the tests...

--------------------------------------------------------------
#1704 Review Comments 1:
Minor comment: Could we also upgrade from <3.3? We still have users coming from JabRef 2.9.2. 

#1704 Review Comments 2:
Could you move the comment above the statement?

#1704 Review Comments 3:
Should be possible. I'll implement the logic that the newest available prefs are migrated to 3.6

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1697 Review Comments 1:
I would propose to switch to a "normal class" without using the singleton pattern. The constructor takes some preferences as input and then initializes the fields accordingly. In this way you don't need these static update methods.

#1697 Review Comments 2:
If these are values for preference keys, then these should be stored inside the JabRefPreference class

#1697 Review Comments 3:
That seems to be an arguable point in general.

#1697 Review Comments 4:
I think we need a thorough discussion on statics vs Globals vs injection. There are 25 imports of InternalBibtexFields in the current source (excluding model.entry), so we would have to inject in, say, half of them if we go for the Globals vs injection, plus passing through.

I do not really see it as work for this PR, although I do not deem it unlikely that it will happen eventually. (The problem is that as soon as someone starts touching these "bad" designs, one is expected to go all the way and make a perfect redesign, which rarely happens, better to iteratively improve it. With this PR it is most likely slightly simpler to modify it later and we can enforce more architecture constraints.)

#1697 Review Comments 5:
Yes and I argued a lot with Simon a while ago about this since I was the opinion, that all the smaller preference classes should contain their keys and default values. In the end Simon convinced me that for now it is better if everything stays in one place and we will later reconsider moving it to different places.

#1697 Review Comments 6:
Yes you are right, your PR goes into the right direction. I just saw a new "static" method and thought that it was a bad idea (in the end it is, but the best possible with the current design). Sorry for that.

#1697 Review Comments 7:
OK, fair enough.

#1697 Review Comments 8:
No problems. I've just noted this trend and there is a risk that people get discouraged touching the really troublesome code.

What we should try to do though, since clearly most of the things pointed out are valid concerns, is to try to write them down somewhere, like https://github.com/koppor/jabref/issues for those rainy days... But I can admit that I'm not very good at it, even though I try from time to time.

--------------------------------------------------------------
--------------------------------------------------------------
#1695 Review Comments 1:
This call looks really weird, but one need to check what is actually done and then there is nothing strange. Having three temporary variables will "hide" it, but not worthwhile IMHO.

#1695 Review Comments 2:
Maybe introduce the temporary variables nevertheless :innocent: 

#1695 Review Comments 3:
Is it really necessry to pass layoutPreferences and savePreferences? Might there be two custom exporters with the same names, but different preferences? Does that make sense?

#1695 Review Comments 4:
savePreferences should be described and stated for what they are used in the formatter.

#1695 Review Comments 5:
`protected`?

#1695 Review Comments 6:
There should be a method offered at layoutPreferences to clear the list

Typically, a copy of the internal data structure should be returned and thus `clear()` has no effect. layoutPreferences.getCustomExportNameFormatters should be wrapped (there!) in [Collections.unmodifiableList](http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#unmodifiableList%28java.util.List%29).

#1695 Review Comments 7:
See above - if possible.

#1695 Review Comments 8:
I would include the Layout preferences as a part of the Save preference class.

#1695 Review Comments 9:
I think, the granularity is fine here. :innocent: 

#1695 Review Comments 10:
This list is local to the preferences object, so it should work. Earlier on it was a static variable in JabRefPreferences, but now it is created with the LayoutFormatPreferences object. I still think it should be cleared since the same LayoutFormatPreferences object may be passed to several classes at different times.

#1695 Review Comments 11:
Yes.

#1695 Review Comments 12:
There are indeed many injections of preferences in different ways. I'm not really sure that this is the best approach (or rather sure that there is probably a better). In addition, the only instance of CustomExportList exists in JabRefPreferences... However, at the moment I was more focused on getting rid of Globals.prefs. Regarding granularity, it is always tricky.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1685 Review Comments 1:
Just throw a FetcherException as you do below.

#1685 Review Comments 2:
Same

#1685 Review Comments 3:
Can shortly explain what DiVA is in a comment and add a link to its API.

#1685 Review Comments 4:
Use Apache`s URIBuilder to create the URL.

#1685 Review Comments 5:
Could you please also add a method `isValidId(String identifier)` which checks that a given ID is of the expected format. I plan to add some functionality which depends on such a method but have no insights what DiVA identifiers look like. Thanks

#1685 Review Comments 6:
I would leave it to the users cleanup actions to format unicode to latex. 

#1685 Review Comments 7:
Prefs are not required, right?

#1685 Review Comments 8:
I suggest to add this fetcher to the list of web searches and also remove the old one (or is there reason to keep the old code?)

#1685 Review Comments 9:
They are required to parse the BibTeX entry (wrapped fields).

#1685 Review Comments 10:
As there is no easy way to wrap an IdBased searcher at the moment, it is
not possible. There was a class in the ISBN stupro PR so once that is merge
it makes sense.

#1685 Review Comments 11:
I have no idea what the requirements are. Most I've seen are on the format `diva2:XXXXX` though, where X is a digit.

#1685 Review Comments 12:
I tried to play around with the API and it appears that the identifier definitely has to start with `diva2` so just take this as a test for valid identifier.

#1685 Review Comments 13:
Combine this line with line 55.

#1685 Review Comments 14:
Just `return Optional.of(...)` and remove result variable.

#1685 Review Comments 15:
Yeah, weird code... :-)

--------------------------------------------------------------
#1684 Review Comments 1:
I would make the formatter a normal variable (initialized directly before the for loop below) instead of static final.

#1684 Review Comments 2:
I had it like that first. ;-)

--------------------------------------------------------------
#1683 Review Comments 1:
Dialogs asking a question and then having yes/no  actions are generally not a good idea, because the "thinking overhead" for the user in the moment is too much.  http://ux.stackexchange.com/questions/756/what-are-some-alternatives-to-the-phrase-are-you-sure-you-want-to-xyz-in-confi

Better add a button like  "Generate keys" and a Cancel button. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1677 Review Comments 1:
Can't we put all strings in a set and just compare two sets?

#1677 Review Comments 2:
That might indeed be a better solution. The problem at the moment is really that I do not know which order they are added in (or rather, I want the test to be independent of that).

#1677 Review Comments 3:
Please add `Objects.requireNonNull(label);`, `Objects.requireNonNull(usedIds);`, `Objects.requireNonNull(allUsedIds);`

Please add `@paramter allUsedIds` containing a short description of the parameter

#1677 Review Comments 4:
Please don't pass `null`. Pass an empty set.

#1677 Review Comments 5:
Yeah, therefore I asked for a Set. The Set is independent of the order - or did I get your comment wrong?

#1677 Review Comments 6:
Is it possible to add a test case covering that?

#1677 Review Comments 7:
What is the difference between `usedIds` and `allUsedIds`? They seem to have the same purpose.

#1677 Review Comments 8:
why do you use clone here?

#1677 Review Comments 9:
Here you get the id of the string and above in getUsedStrings you get the string from the id.
Thus I would propose to change `Set<String> usedIds` to `Set<BibString> usedStrings`. 

#1677 Review Comments 10:
Please move the string initalization and adding them to the db to the @setup method.

#1677 Review Comments 11:
create overload of getUsedStrings for one entry and use Collections.singletonList. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1673 Review Comments 1:
In tests it is preferable to mention only the generic `Exception` (since then test code is more stable when the code-under-test throws a different kind of exception).

--------------------------------------------------------------
#1672 Review Comments 1:
Why did you remove this? Because it's too old?

#1672 Review Comments 2:
It would be nice if you had created several PRs for each change. it would be so much easier to review the PR.

#1672 Review Comments 3:
Because the code checks if GENERAL_FIELDS contains `abstract` and in that case removes if from `GENERAL_FIELDS`.

The thing is that the only place `GENERAL_FIELDS` is used in the current master is for setting a default value...

``` Java
// The general fields stuff is made obsolete by the CUSTOM_TAB_... entries.
        defaults.put(GENERAL_FIELDS, "crossref;keywords;file;doi;url;urldate;"
                + "pdf;comment;owner");
```

#1672 Review Comments 4:
I could have split it is two, as have separate ones would be a conflict heaven, especially considering that I had to manually renumber the layout of the preference tab where four entries were removed.

What I could have done though was to not group the preference keys.

The best way to review is to check the non-JabRefPreferences code, especially the preference tabs. You will notice that the key removed there does not exist in any of the other files (except JabRefPreferences). This covers most changes (GENERAL_FIELDS) is the other, as I recall it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1666 Review Comments 1:
This if condition shouldn't be necessary as the xsd schema file specifies the attribute as `use="required"`

#1666 Review Comments 2:
There is quite a lot of redundant code, please extract the code snippets with the same code to a new method. You can create your methods after the same schema as the xsd:group elements are build in the file bibtexml.xsd.

For example extract all fields that are specified in the "user" group starting at line 77 in bibtexml.xsd and create a method `private void putIfUserNotNull()`.

#1666 Review Comments 3:
According to the bibtexml.xsd file an entry can have either an isbn or an issn number but not both.

#1666 Review Comments 4:
Make a less technical description in the changelog and rather explain what has changed for the user.

#1666 Review Comments 5:
Use `else if`

#1666 Review Comments 6:
Please append this to the first if statement with an `else if` 

#1666 Review Comments 7:
The second type arguments are redundant, please rewrite as 

```
Map<String, String> fields = new HashMap<>();
```

#1666 Review Comments 8:
Either write a parameter description or leave the tag out.

#1666 Review Comments 9:
Also rename, maybe `entryType` is fitting?

#1666 Review Comments 10:
I renamed it to entryType and added a description.

#1666 Review Comments 11:
`t` -> `entryType`

#1666 Review Comments 12:
Remove commas

#1666 Review Comments 13:
Add some more explanation why you choose that implementation method and not working on the real classes.

#1666 Review Comments 14:
Either remove the `get` prefix and check for ignored case or name this "ignoredMethods" etc. --> `getSize` is not a bibtex field.

#1666 Review Comments 15:
Why do you need a special Treatment for Inbook, but not for the others?

Please provide JavaDoc comment

#1666 Review Comments 16:
done.

#1666 Review Comments 17:
done.

#1666 Review Comments 18:
done.

#1666 Review Comments 19:
done.

#1666 Review Comments 20:
done.

#1666 Review Comments 21:
Why can't directly the reader used as input for the unmarshaller?

The JavaDocs of the unmarshaller say so: https://jaxb.java.net/nonav/2.2.4/docs/api/javax/xml/bind/Unmarshaller.html

Reading that, the code would be much shorter and especially lines 106 to 109 would be obsolete

#1666 Review Comments 22:
Why not `} else if (`? Isn't it the case, that is is either article, or book, or booklet, etc?

#1666 Review Comments 23:
I think, the variable `DEFAULT_BIBTEXENTRY_ID` should be removed and the default constructor without parameter be used.

#1666 Review Comments 24:
Please test the other branch (a collection without a chapter), too.

#1666 Review Comments 25:
Please also cover this case

#1666 Review Comments 26:
Why not `startsWith`?

#1666 Review Comments 27:
Why is that line not covered?

#1666 Review Comments 28:
Shouldn't be that an `else if`?

#1666 Review Comments 29:
Should the `null` check not come directly before this if?

#1666 Review Comments 30:
What happens if there is another localName used? Maybe, just log it to indicate that is is an unexpected file?

#1666 Review Comments 31:
Shouldn't there be an `else` branch logging that an unexpected field was found?

#1666 Review Comments 32:
I don't think that this is necessary. If there is an unexpected field, it will not be mapped by JAXB. So if I add here an else, it would be unreachable in my opinion. I've also tested this by adding a field in the `BibTeXMLImporterTestInbookLessFields` file by adding a field, that should not appear in the Inbook type.

#1666 Review Comments 33:
See my comment below. I don't think that this can happen here, because it should be skipped JAXB.

#1666 Review Comments 34:
Done. I've used directly the reader as input.

#1666 Review Comments 35:
Yeah you're right. Changed it to `} else if {`

#1666 Review Comments 36:
Done.

#1666 Review Comments 37:
Done.

#1666 Review Comments 38:
Done.

#1666 Review Comments 39:
Changed to `startsWith`.

#1666 Review Comments 40:
Now it should be covered.

#1666 Review Comments 41:
Yes. Changed it to `else if`.

#1666 Review Comments 42:
Done.

#1666 Review Comments 43:
Please add the log nevertheless. In case the XSD is updated, the code might not get updated and the import fail. Having a log (INFO), it is more easy to trace where the code has to be adapted.

Please remove this `school` line again. Create another `xml` file and name it `BibTeXMLImporterInvalidInbook.xml` . Put "should not be mapped, because not valid according to XSD" as field content.

#1666 Review Comments 44:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
#1661 Review Comments 1:
The loop could be replaced with a nice stream/lamda expression:
`fileNames = new ArrayList<>(files.stream().map(f->f.getAbsolutePath()).collect(Collectors.toList());`

#1661 Review Comments 2:
Yes, but I know that some developers not always appreciate these as they are harder to read. Have not really understood when they are preferred.

#1661 Review Comments 3:
I do not think they are harder to read, it is just some novel style, once you get used to it, it is plain simple and makes programming for fluent. In general I would prefer them if it makes sense.
The functional style makes it easier to crate a kind of  Collection-pipelline, e.g. introduce a filter, another transformation or limit the results or just replace the collector.  And could be easy parallelized, in cases where needed.

#1661 Review Comments 4:
I do not have any strong opinions but I know I made a PR a number of months
ago where I used these a lot and there were some objections.

#1661 Review Comments 5:
I think we do not have a full consensus on this. But I would agree to @Siedlerchr in that case. :)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1656 Review Comments 1:
Combine with last exception

#1656 Review Comments 2:
Remove GVK prefix (information already included in class name used for the logger name)

#1656 Review Comments 3:
also check that queryList is not empty

#1656 Review Comments 4:
Throw FetcherException instead, makes handling further down easier

#1656 Review Comments 5:
Can you try to rewrite this as a foreach loop?

#1656 Review Comments 6:
just use `return` here  (and line 81) instead of saving the result in `gvkQuery`

#1656 Review Comments 7:
Make the URL pattern a private static final class variable

#1656 Review Comments 8:
I think there is a nice helper method in StringUtils (isBlank or something like that)

#1656 Review Comments 9:
also just `return` here

#1656 Review Comments 10:
Always rethrow as a FetcherException and no log message 

#1656 Review Comments 11:
not required -> delete

#1656 Review Comments 12:
Add this and the PR can be merged from my point of view.

#1656 Review Comments 13:
remove isKey and just write `searchKeys.contains(key)`

#1656 Review Comments 14:
I think the code from the for loop till here can be replaced with just `assertTrue(list.contains(entry))`. This has the same effect, but is easier to read in my opinion.

#1656 Review Comments 15:
replace with `assertEquals(Collections.empyList(), list)`

#1656 Review Comments 16:
Maybe rename list to something more suitable, like queryResult.

#1656 Review Comments 17:
Please move GVKParser to importer/fetcher and make it package-private.

#1656 Review Comments 18:
Add a short javadoc explanation what `searchKeys` are.

#1656 Review Comments 19:
Do you really need this? Most of the Globals dependencies are removed now, could be worthwhile trying without it.

--------------------------------------------------------------
#1655 Review Comments 1:
You seem to have line ending issues. Please fix your commit.

#1655 Review Comments 2:
Please always use LOGGER. Read about https://logging.apache.org/log4j/2.x/manual/configuration.html. Have a look at `src/main/resources/log4j2.xml`.

#1655 Review Comments 3:
Why object?

#1655 Review Comments 4:
Do not cast

#1655 Review Comments 5:
Never pass "null". We always use "Optional" for that. And we always use "Objects.requireNonNull" for the Paramter check.

#1655 Review Comments 6:
Sure it is not zero based? Normally you would do i=0 and <= Count

#1655 Review Comments 7:
yes zero ist the GeneralTab which has its own Method now

#1655 Review Comments 8:
Okay, then it would be nice if you could add a simple comment above to make it easier for others...
Jusdt like: //starting at 1 because general tab is zero and has its own method 
or whatever

#1655 Review Comments 9:
This comment can be deleted right?

#1655 Review Comments 10:
Please delete empty line.

#1655 Review Comments 11:
I think you could extract the for loop below into a new method `public static ArrayList<String > addFieldAndHiddenField(ArrayList<String> list, String fieldName) {...}` since you do this 3 times in this class.

#1655 Review Comments 12:
please delete this empty line.

#1655 Review Comments 13:
And if you extract the for loop, you could write something like that in the javadoc

#1655 Review Comments 14:
Please extract to new Method `isHiddenFIeld(field)`

#1655 Review Comments 15:
then use here again `isHiddenField(field)`

#1655 Review Comments 16:
why don't just replace fieldName.substring(1) with "_"?

#1655 Review Comments 17:
If I think of it you could also extract `!entry.getField(fieldName.substring(1)).orElse("").isEmpty()` to a new method `entryHasFieldName(entry, fieldName)`

#1655 Review Comments 18:
delete empty line.

#1655 Review Comments 19:
Please stat comments with capital letters

#1655 Review Comments 20:
This is not in the language files of this PR. Please fix translations. Proposal: Use the translation files of the master branch and readd requried translations.

#1655 Review Comments 21:
Why the `s` at the end of `Optionals`? - Why is this included in this ?R

#1655 Review Comments 22:
Not part of your PR. See above.

#1655 Review Comments 23:
why hidden? I think it is for visible fields?

#1655 Review Comments 24:
please move the javadoc above the method

#1655 Review Comments 25:
Please address the comment. Whether write why you would leave this as it is or change it, but please dont let it unanswered.

#1655 Review Comments 26:
Shouldn't this comment be one line above?

#1655 Review Comments 27:
The fields in that TextArea are visible and can be hidden if wanted

#1655 Review Comments 28:
Why is this change deleted?

#1655 Review Comments 29:
this happend because of a conflict error and is a mistake i put back right away

--------------------------------------------------------------
#1654 Review Comments 1:
Please create the BibEntry by hand instead of using the BIB file (see ArxivTests)

#1654 Review Comments 2:
see how exceptions are handled below for the ArXiv fetcher

#1654 Review Comments 3:
Keep new lines at end of file (probably a editor configuration)

#1654 Review Comments 4:
match.ifPresent(inspector::addEntry) otherwise a NPE is thrown

#1654 Review Comments 5:
Could you please move all these formatter stuff to IdBased (and also SearchBased) EntryFetcher.processQuery() since it applies to every fetcher. I think the simplest solution is to create a new class which applies the formatters after fetching.  

#1654 Review Comments 6:
Use UrlBuilder to create the url, see ArXiv or #1685.

#1654 Review Comments 7:
I think we don't need to advertise `ebook.de` so clear the url field in the fetcher.

#1654 Review Comments 8:
Remove "Seiten"

#1654 Review Comments 9:
Remove empty lines

#1654 Review Comments 10:
Compare to Optional.of(bibEntry)) instead of the two asserts. and rename isbn to fetchedEntry

#1654 Review Comments 11:
throw FetcherException here

#1654 Review Comments 12:
Why NoSuchElementException? The fetcher should only throw FetcherExceptions (could you please add this fact to the interface description, thx)

#1654 Review Comments 13:
Not required I think

#1654 Review Comments 14:
Please log the exception, too, e.g. Logger.error/debug (just look at other code pieces :smile:  )
And I think the underscore in the Localization is wrong, should be just a space. 

#1654 Review Comments 15:
use `FieldName.TITLE`. For the other fields as well.

#1654 Review Comments 16:
If I see right, then the entry could be null here. Maybe you should add then a check if the entry is null, otherwise you could get a NPE below.

#1654 Review Comments 17:
not in the tests, these should be as literal as possible.

#1654 Review Comments 18:
If this is the case, then add `Optional<BibEntry> BibtexParser.singleFromStringOptional` and use it (and mark the other method as deprecated).
See: https://github.com/JabRef/jabref/pull/1738

#1654 Review Comments 19:
What was the reason to reintroduce these formatters? I really don't like them in the fetchers.

#1654 Review Comments 20:
I wasn't sure about that. They caused problems during the tests. After I found a way that the tests worked again I thought I add them. But I don't like them in the fetchers, too.

#1654 Review Comments 21:
Just a small thing, but here the pagetotal.ifPresent(Consumer) would make sense as you only have on single statement.

#1654 Review Comments 22:
Ok, in this case just remove them. They can be latter added as configurable cleanup operations if this is needed.

#1654 Review Comments 23:
Maybe we should use Unirest like in the other parsers here? personally I want to switch from our own URLDownload implementation.
`Unirest.get(API_URL + "/works").asString()`

#1654 Review Comments 24:
Please add some more test for invalid input and error scenarios. Also see coverage info for that.

#1654 Review Comments 25:
use `return Optional.of(...)` instead of using a `result` variable.

#1654 Review Comments 26:
move the code of the if statement to new private method `BibEntry postProcessEntry(BibEntry)`. Then you can simply say `return entry.map(postProcessEntry);` and the code gets more readable.

#1654 Review Comments 27:
Please inject the `ImportFormatPreferences` in the constructor. I've worked hard recently to get rid of all `Globals` references in `logic`. ;-)

#1654 Review Comments 28:
Please move to `gui.importer.fetcher` as the current location is obsolete.

#1654 Review Comments 29:
I think, the idea is to move out of `gui` to have gui independent fetchers, so the location should be `net.sf.jabref.logic.importer`, shouldn't it? I am unsure, but `gui` feels wrong.

Refs #1594 @tobiasdiez 

#1654 Review Comments 30:
I would return a BibEntry here as a BibEntry comes in and this is post processed. Always. The Optional is always present. Thus, the Optional conversion should be done by the caller.

#1654 Review Comments 31:
This class is the current wrapper between the new `logic`-based fetchers and the old `gui`-based. Compare with https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/importer/fetcher/SearchBasedEntryFetcher.java

#1654 Review Comments 32:
And there is nothing else in `net.sf.jabref.logic.importer` after #1648 :-)

#1654 Review Comments 33:
I'd prefer that the constructor gets the ImportFormatPreferences object here (and, hence, move the `ImportFormatPreferences.fromPreferences(Globals.prefs)` 
to `EntryFetchers` as

`entryFetchers.add(new IdBasedEntryFetcher(new IsbnFetcher(ImportFormatPreferences.fromPreferences(Globals.prefs))));`

In that way there won't be any import of Globals in logic. But a minor thing at the moment. Still things to fix which are much harder compared to this before being able to enforce it through tests.

#1654 Review Comments 34:
Now it is: Globals.prefs.getImportFormatPreferences ()

#1654 Review Comments 35:
Please remove the header.

#1654 Review Comments 36:
Please remove the header.

--------------------------------------------------------------
#1652 Review Comments 1:
Possible to have a more speaking name for Object o?

#1652 Review Comments 2:
A more speaking name for the nameAcces, maybe xNamedRefMarks, or similar as in the getBookmarkRange method, would be nice, too.

#1652 Review Comments 3:
For sure it is possible. I just left it as is (and have no real idea what it does since I didn't consider that part of the code). While it looks like added code, it is just a consequence of the diff algorithm not really working.

#1652 Review Comments 4:
Ah okay. yeah, it looked like you changed it. If it is too much effort then leave it as is.

#1652 Review Comments 5:
Maybe not too much effort, but there are many of these small details here
and there that are quite tedious to fix when you touch the code for a
completely different reason...

#1652 Review Comments 6:
There are 111 hits for `Object o`. Some are probably OK as they are in equals, but it may be better to make a major overhaul for that issue.

#1652 Review Comments 7:
Okay, then I would suggest making this in a new PR.

#1652 Review Comments 8:
I updated most variable names that were a bit short in OOBibBase.

--------------------------------------------------------------
#1651 Review Comments 1:
Why was this code removed? OK, I don't even get the deleted comment, but maybe the code was useful.

#1651 Review Comments 2:
See `updateSpecialFieldHandling()` :-) 

It updates `private final Set<String> nonWrappableFields = new HashSet<>(5)` which is never used somewhere else...

#1651 Review Comments 3:
Can the comments be merged?

#1651 Review Comments 4:
Probably. But to be honest I didn't understand the code more than I'm quite sure that I should change the comment.

#1651 Review Comments 5:
That comment was quite misplaced. I correct the actual type comment.

#1651 Review Comments 6:
no empty line :innocent: 

#1651 Review Comments 7:
Why the empty line?

#1651 Review Comments 8:
Could you remove that line and add a class comment with an example (above line 9)?

#1651 Review Comments 9:
Could you state that here the entryType as string is expected? Maybe rename the parameter form `fieldText` to `entryType`?

#1651 Review Comments 10:
:+1:

#1651 Review Comments 11:
Ahh, missed your comment. Will do that in next PR.

#1651 Review Comments 12:
Same here.

#1651 Review Comments 13:
Hmm, no idea...

--------------------------------------------------------------
#1650 Review Comments 1:
A great improvement would be to compile the regexes to pattern (Pattern.compile(regex) and then use simply
split()  on that pattern object , otherwise java creates each regex pattern everytime again.
(I did not know that until I just found it in javadoc  :sunglasses: )
https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#split-java.lang.CharSequence-

#1650 Review Comments 2:
Sure. Create an issue in koppor/JabRef. ;-)

#1650 Review Comments 3:
28 hits of `matches("`

#1650 Review Comments 4:
Maybe that is time for another PR.

--------------------------------------------------------------
--------------------------------------------------------------
#1648 Review Comments 1:
Hmm, here are some more things to sort out...

#1648 Review Comments 2:
And here. Getting rid of EntryFetcher would be good...

#1648 Review Comments 3:
This is also a bit annoying...

#1648 Review Comments 4:
Can this be a more explicit type than Object?

#1648 Review Comments 5:
The implementation in FetcherPreviewDialog shows the Object as:

``` java
    @Override
    public void showMessage(Object message, String title, int msgType) {
        JOptionPane.showMessageDialog(this, message, title, msgType);
    }
```

so I guess that is the reason for having an Object.

#1648 Review Comments 6:
It can be safely replaced with String overall. While the showMessageDialog in JOption accepts an object as message param, the implementations in JabRef are always called with Strings. I did a quick check. 

#1648 Review Comments 7:
OK, I've changed it.

#1648 Review Comments 8:
I would prefer if you just create the database with the strings by hand (and split the test into 4)

#1648 Review Comments 9:
For sure. At the moment I was happy with moving the tests though. ;-)

(I've summarized this and some other things that can/should be done, but considering the effort in just refactoring and moving things to make the architecture tests pass, I would prefer merging this before there are lots of other, smaller, PRs, merged.)

#1648 Review Comments 10:
Remove empty linebreak (if its not just github showing)

#1648 Review Comments 11:
Please use explicit charset of the file/database 

#1648 Review Comments 12:
Better variable names here, please. "jo" reminds me of the German slang word for ok;) 

#1648 Review Comments 13:
I'm not so sure that it is always a good idea to use `ImportFormatPreferences.fromPreferences` for the fetchers. For example the encoding should be specified by the fetcher and not by the user preferences. 

#1648 Review Comments 14:
rename to withEncoding

#1648 Review Comments 15:
I'm fine with this (and the "setter" below) but @simonharrer usually wants immutable preferences classes.

#1648 Review Comments 16:
no newline after map( ?

#1648 Review Comments 17:
I think the whole `ImportFormatPreferences` contains to much information for the parser. In the end only the following information is needed:
- keyword separator
- list of wrapped fields

Thus I would prefer if only these two are passed as parameters.
(One can argue that both data should actually be stored in the bib-metadata. )

By the way, is the `FieldContentParserPreferences` class really necessary? I feel the import preferences are a good place to handle this information as well.

#1648 Review Comments 18:
When that happens, it is easy to remove it from the  `ImportFormatPreferences`. At the moment it is the most feasible way to get rid of `Globals` dependencies.

#1648 Review Comments 19:
I'll reformat and see. :-)

#1648 Review Comments 20:
OK! I think that the setEncoding was "required" or I wouldn't have introduced it.

#1648 Review Comments 21:
I checked and it is only used in `OpenDatabaseTest` for convenience. Is it worth copying and returning a new `ImportFormatPreferences`?

#1648 Review Comments 22:
Done.

#1648 Review Comments 23:
I returned a new instance now. 

#1648 Review Comments 24:
This is a granularity issue. As the BibtexParser is an import format it got that now.

With `FieldContentParserPreferences` it is the opposite. Yes, it can be accessed directly from `ImportFormatPreferences`, but, for historical reasons, a finer granularity was chosen there. This change would then have to be done in `LatexFieldFormatterPreferences` as well (which is not required here), so somehow it makes sense to have a separate `FieldContentParserPreferences` since it is accessed in two completely different ways.

--------------------------------------------------------------
#1645 Review Comments 1:
Please create the database by hand instead of reading it from the file. It also has the advantage that you can save the reference to the entries in private fields. 

#1645 Review Comments 2:
OK! I'll do that.

#1645 Review Comments 3:
Maybe move the contents of the if and else bodies to seperate methods to increase readability. 

#1645 Review Comments 4:
prefs not needed here, right?

#1645 Review Comments 5:
Needed for InternalBibtexFields (unfortunately).

#1645 Review Comments 6:
I propose to move some of the logic to InternalBibtexFields so that you can write `InternalBibtexFields.getPersonFieldNames()`.

#1645 Review Comments 7:
I was also considering that. Maybe even introduce a constant list as there are for some other properties. Advantage: no need for two long lines of code. Disadvantages: not user configurable (if we ever want that, easy to change though) and, if we add a method, there may be quite a few special methods. Which on the other hand may be better than quite a few two line statements...

I might go for the constant list as there are probably more fields that should count as journal names and then we might include them in one step as well.

#1645 Review Comments 8:
I introduced it in #1720, so easiest thing is to merge that first and then rebase this one.

--------------------------------------------------------------
#1644 Review Comments 1:
I would just add the lines of the language strings you added. The other lines should come in in different ways (other PR, via master branch). Otherwise, we will have duplicate lines (refs #1719)

#1644 Review Comments 2:
Why do we need two different strings for that? (`entryType` and `bibtextype`)?

When searching the code, only `BibEntry.TYPE_HEADER` should be sufficient. However, it might be the case that my search was too straight-forward.

![grabbed_20160815-081924](https://cloud.githubusercontent.com/assets/1366654/17657095/feeb515e-62c0-11e6-8c85-b616a798a495.png)

#1644 Review Comments 3:
Please add a JavaDoc comment indicating the intention of this method. Currently, it seems if the **first** field of entry contains something, it returns true.

#1644 Review Comments 4:
When checking the code, it seems that this method either returns the content of the field or, if it can be resolved, the content of the resolved field. Correct me, if I'm wrong.

#1644 Review Comments 5:
Yes, this is probably the reason of not having union merge. However, normally I check these things and unless it takes very long time to merge the PR it doesn't happen that much.

#1644 Review Comments 6:
Yes, that is how I understand it as well, where resolved means
cross-reference and/or strings.

#1644 Review Comments 7:
Refs #1651

#1644 Review Comments 8:
Yes, that is correct. As the class is called MainRefColumn, however, it is
the first of the column fields (`journal/booktitle`).

#1644 Review Comments 9:
Oh. OK. Maybe just rename `entryContent` -> `plainFieldContent` and `content` to `resolvedFieldContent`.

#1644 Review Comments 10:
I'm trying to understand why one needs a flag if the entry is resolved at all. Don't I need to in a field-bases?

#1644 Review Comments 11:
Just to be able to mark if the content is resolved.

#1644 Review Comments 12:
I think, that one needs the information on a per-field, not on a per-entry basis. As far as I understood, I get it for both cases: resolved fields are highlighted and there is an indication on the complete entry. - This is OK :innocent: 

#1644 Review Comments 13:
Well, there is nothing saying if it is a crossref, string, or alias
resolving at the moment. Hence, the month field will mark gray with content
"Jan" independent of:
- the entry not having a month/date, but the crossref does
- it says #jan# in the field
- the entry has a date xxxx-01-xx

Indeed it may (initially) be a bit confusing for the user when the entry
editor says something different, that is why I wanted a marker. If tooltips
would work in the table one could (in the long run) add a tooltip saying
where the information origins. Also, the idea of having a "resolved"
grayed/italic default text in the entry editor for empty fields may be
worthwhile.

#1644 Review Comments 14:
I would guess that in the current master there will be different layout if you have entrytype and bintextype columns. We should probably add a migration that changes any bibtextype column to entrytype. This seems to have been neglected when changing the field name.

#1644 Review Comments 15:
I didn't really understand what I commented on. You suggested naming still makes sense, but the method returns false if the content of the field is the same as the resolved content of the field, i.e., no string, crossrefs, or alias fields are used.

#1644 Review Comments 16:
This has got a bit more clear now. At some stage the name of the entry type was changed from `bibtextype` to `entrytype`, but not completely, only in parts of the code, which is evident from the old code and all layout. However, when I tested to use `bibtextype` in a column nothing was shown, not clear why though. Anyway, the changes in #1651 are unified in this PR and maybe we should simply remove "bibtextype", but better wait for a while. No need for any migration as "bibtextype" didn't work in a column anyway and we do not want to modify peoples layout files...

#1644 Review Comments 17:
Remove this line - the next line contains the same information (and more)

#1644 Review Comments 18:
Not to mention the grammatical error in the next line... I would like to blame union merge. ;-)

#1644 Review Comments 19:
Shouldn't it be singular? "Color code for resolved fields"?

#1644 Review Comments 20:
You are probably right. I thought about it when I wrote it, think of consistency and "fields", but you are correct, there is only one color. I'll fix it tomorrow.

--------------------------------------------------------------
#1642 Review Comments 1:
This essentially is a cli class. Thus, it should reside in `jabref.cli` and not in the root package.

#1642 Review Comments 2:
Yes, but it is also (primarily) a stand-alone program. Hence, my (initial) choice of location. I would imagine that the command-line only JabRef version that is discussed would end up in the same location.

#1642 Review Comments 3:
Since most of the code is inside a main method, you are right. I would still put it in the cli package, since it otherwise clutters up the root package, though. What is the opinion of others? @JabRef/developers 

#1642 Review Comments 4:
Standalone --> cli

2016-07-29 18:13 GMT+02:00 Jörg Lenhard notifications@github.com:

> In src/main/java/net/sf/jabref/XMPUtilMain.java
> https://github.com/JabRef/jabref/pull/1642#discussion_r72818522:
> 
> > +
> > +import net.sf.jabref.importer.ParserResult;
> > +import net.sf.jabref.importer.fileformat.BibtexParser;
> > +import net.sf.jabref.logic.bibtex.BibEntryWriter;
> > +import net.sf.jabref.logic.bibtex.LatexFieldFormatter;
> > +import net.sf.jabref.logic.bibtex.LatexFieldFormatterPreferences;
> > +import net.sf.jabref.logic.xmp.XMPPreferences;
> > +import net.sf.jabref.logic.xmp.XMPUtil;
> > +import net.sf.jabref.model.database.BibDatabaseMode;
> > +import net.sf.jabref.model.entry.BibEntry;
> > +import net.sf.jabref.preferences.JabRefPreferences;
> > +
> > +import org.apache.jempbox.impl.XMLUtil;
> > +import org.apache.jempbox.xmp.XMPMetadata;
> > +
> > +public class XMPUtilMain {
> 
> Since most of the code is inside a main method, you are right. I would
> still put it in the cli package, since it otherwise clutters up the root
> package, though. What is the opinion of others? @JabRef/developers
> https://github.com/orgs/JabRef/teams/developers
> 
> —
> You are receiving this because you are on a team that was mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1642/files/beef5143cd7160b98c2333bbce97433094c1dc56#r72818522,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AATi5P2JH1a2-VzrJQt0zcpZ4paCg2PUks5qaiaZgaJpZM4JYKGO
> .

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1637 Review Comments 1:
This seems to come from another issue, but we can merge it nevertheless.

#1637 Review Comments 2:
Seems to come from another issue, but is also OK for me.

#1637 Review Comments 3:
This is a heritage from when I tried to implement drag and drop. currently it is not needed.

#1637 Review Comments 4:
OK for me to move forward here. I wish the nasty UI issues of https://github.com/JabRef/jabref/pull/1637#issuecomment-246793569 can be solved.

--------------------------------------------------------------
--------------------------------------------------------------
#1635 Review Comments 1:
Why is this commented out? I would split this test up in multiple tests, and then mark the last as ignored so that we can work on that later. 

--------------------------------------------------------------
--------------------------------------------------------------
#1631 Review Comments 1:
What the hell is that for a method?
![needlehaystack](https://cloud.githubusercontent.com/assets/320228/17169348/4cd11ee6-53e7-11e6-8746-e324f255a3e8.jpg)

#1631 Review Comments 2:
The marvel of JabRef. :smile: 

#1631 Review Comments 3:
The equals methods looks a bit weird, it should follow a more clear pattern. A possible good solution would be this:

```
        @Override
        public boolean equals(Object other)
        {
            if (other == null) // Null-check
                return false;

            if (this == other) // reflexivity 
                return true;

            if (this.getClass() != other.getClass()) // Type safety 
                return false;

            final CustomImpoter importer = (CustomImporter) other;
            return Objects.equals() && ...
        }
```

#1631 Review Comments 4:
That is correct. Implementations of equals should always follow a very narrow contract. @oscargus: If you are interested, this is excellently described in _Effective Java 2nd Edition_, Item 8: "Obey the general contract when overriding equals" (I won't link a pdf version here, but I am sure you can find one if you desire).

Most IDEs can auto-generate you a good implementation of equals these days.

--------------------------------------------------------------
#1630 Review Comments 1:
Here I would use ifPresent(resultDatabase.insertEntry)

#1630 Review Comments 2:
Makes sense. Copied the code from the AUX parser where more things were done in the corresponding place and didn't reflect on it.

#1630 Review Comments 3:
'Avoid checking every optional for isPresent, use a flatMap for chained optionals:
(Optional FlatMap example)
http://codingjunkie.net/working-with-java8-optionals/

#1630 Review Comments 4:
I had some plans to break the loop once the key was found. In that case one is stuck with `isPresent` as far as I know.

#1630 Review Comments 5:
The break solved the problem with the multiple entries. I was really confused for a while, but since the function looks through all tabs, it found the first generated database and included those entries once more and so on... :-)

#1630 Review Comments 6:
Okay. This whole loop with all the presents looked very complex and confusing at the first moment. :confused: 

#1630 Review Comments 7:
Bad spelling. Fixed it, but will not push just for that.

#1630 Review Comments 8:
I added some comments. Most of the time I like Optional (even though I'm at the best is using `ifPresent`), but the lack of `if ... else ...` and the fact that the lambda becomes its own function (which is very natural, but still prohibits writing some things, like return or break) is a bit annoying.

#1630 Review Comments 9:
Can you specify a more concrete type of exception here. Catching `Exception` itself is not really good practice as you will end up catching programming errors such as `NullPointerException` as well.

#1630 Review Comments 10:
The problem is that `refreshCiteMarkers` throws `Exception` because `refreshCiteMarkersInternal` throws `Exception` because `insertReferenceMark` throws `Exception` because `com.sun.star.lang.XMultiServiceFactory.createInstance` throws `Exception`. 

I have earlier tried to specify the exceptions in OO/LO where possible, but there are still some methods that only throw `Exception`. It would be possible to borrow the code from the update action:

``` java
                } catch (UndefinedCharacterFormatException ex) {
                    reportUndefinedCharacterFormat(ex);
                } catch (UndefinedParagraphFormatException ex) {
                    reportUndefinedParagraphFormat(ex);
                } catch (ConnectionLostException ex) {
                    showConnectionLostErrorMessage();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame,
                            Localization
                                    .lang("You must select either a valid style file, or use one of the default styles."),
                            Localization.lang("No valid style file defined"), JOptionPane.ERROR_MESSAGE);
                    LOGGER.warn("Problem with style file", ex);
                } catch (BibEntryNotFoundException ex) {
                    JOptionPane.showMessageDialog(frame,
                            Localization.lang(
                                    "Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current database.",
                                    ex.getBibtexKey()),
                            Localization.lang("Unable to synchronize bibliography"), JOptionPane.ERROR_MESSAGE);
                    LOGGER.debug("BibEntry not found", ex);
                } catch (Exception ex) {
                    LOGGER.warn("Could not update bibliography", ex);
                }
```

which probably is slightly better.

The main "problem" is that there is very limited exception handling locally in the OO/LO part. Everything is propagated to the calling function. Which is good from some perspectives but makes it hard to change some things as you do not know what is actually happening and how it affect things. (Unless you really understand the code...)

#1630 Review Comments 11:
Another option would be to convert the `Exception` thrown by `com.sun.star.lang.XMultiServiceFactory.createInstance` into a custom `JabRefException` (the class does already exist) and check for that. This  preserves stack trace and message of the original exception and is as simple as:

```
catch(Exception e) {
  throw new JabRefException(e);
}
```

Then you can only deal with `JabRefException` from that point on and avoid accidentally catching another one. It also doesn't clutter the code with handling code. You can do the handling as you did before, just on a more limited type of exception. Would this be an option for the OO/LO part?

#1630 Review Comments 12:
Well, there are quite a few Exception types already defined in OO/LO so defining one more (in case we want JabRefException to be used later for something else) shouldn't be a problem. It may be a problem naming it since I'm not really sure what the errors are, maybe `ThingsWentWrongException`? ;-)

#1630 Review Comments 13:
I see, there are indeed quite some customn exceptions. But I don't understand why you want to define yet another exception? Why not just use `net.sf.jabref.JabRefException`

#1630 Review Comments 14:
I can of course use that, but I'm still tempted to try to figure out
something more clever... ;-)

#1630 Review Comments 15:
I introduced `CreationException`... One should probably "group" the exceptions slightly earlier and not just propagate them, but at least there are no `catch (Exception ex)` in the OO/LO part of the code.

#1630 Review Comments 16:
Ok, then this is good enough! I'll merge now.

--------------------------------------------------------------
#1629 Review Comments 1:
A SAX...

#1629 Review Comments 2:
I was thinking of that as well. Is it pronounced "sax" or "s a x"? Since the previous code stated "An" I kept it, but it is easy to change.

#1629 Review Comments 3:
I'm not a native speaker but typically I'd say this has no vowel or vowel sound so it's an A.

#1629 Review Comments 4:
Although you are right with the S.A.X thingy, so we can also keep it like that...

#1629 Review Comments 5:
the replacement here and at a lot of other places in this file is wrong.

Please recheck the changes in this file!

#1629 Review Comments 6:
Sorry... reviewed the PR commit by commit and have not seen that you already fixed this...

#1629 Review Comments 7:
wrong to uppercase

#1629 Review Comments 8:
wrong to uppercase

#1629 Review Comments 9:
Google finds > 10.000 "a sax exception" but only 300 "an sax exception". 

#1629 Review Comments 10:
Underscore? The other examples use just BIB file

#1629 Review Comments 11:
Forgotten flaw from before I started with regex search and replace.

--------------------------------------------------------------
--------------------------------------------------------------
#1627 Review Comments 1:
Is this a real "field" with a field name and used as such?

#1627 Review Comments 2:
Okay it is... https://github.com/JabRef/jabref/pull/1627/files#diff-59eb0b0c47b8c7b57710bde78ec9f349L215

#1627 Review Comments 3:
I think so, yes.

From InternalBibtexFields:

``` java
         dummy = new BibtexSingleField(FieldName.NUMBER_COL, false, 32);
         dummy.setPrivate();
         dummy.setWriteable(false);
         dummy.setDisplayable(false);
         add(dummy);
```

--------------------------------------------------------------
#1626 Review Comments 1:
Instead of relying on the preferences within this class, could the preference value just be passed through a parameter? Then this class would be independent of the preferences package.

#1626 Review Comments 2:
See #1607. :-) Not sure what is the best merging order...

#1626 Review Comments 3:
@simonharrer Good idea
@oscargus Oh no, now I have already rewritten `GlobalLabelPattern` :-(

However, it seems you did not really touch the class in #1607? From what I have seen and tested with the GUI, you can completely drop the static part of `GlobalLabelPattern`. It is just initialized in two places (the gui and the preferences) and both of these places have access to the gui, so you can provide the correct parameters right away.

Regarding merging order: I'd prefer mine to be merged first :P Anyway, let Simon decide!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1623 Review Comments 1:
Can these two lines be separated into a utility method, which gets `tree` passed? (At the other places, the appropriate other object; `table`, ...)

#1623 Review Comments 2:
I realized that as well after changing everywhere... ;-)

#1623 Review Comments 3:
Is it also possible to pass [JComponent](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html) and merge this method with `correctRowHeight(JTree tree)`?

#1623 Review Comments 4:
No. JComponent doesn't have a setRowHeight method (I checked it before writing the code) and I do not think it is possible to cast from `JTree` to `JTable` or the opposite.

--------------------------------------------------------------
--------------------------------------------------------------
#1621 Review Comments 1:
Rename class to MergeEntryDialog?

#1621 Review Comments 2:
I would restructure the flow a bit: The dialog just gets two BibEntries which should be compared/merged. So it's the callers responsibility to provide the second entry (i.e. fetch from ISBN / DOI /...).
Then also change the output messages so something more generic (i.e. Merge entries).

Background: I like your idea and would like to add even more fetchers, for example one based on arXiv-id or mathscinet. 

#1621 Review Comments 3:
Could you please implement the new `IdBasedFetcher` interface (i.e. throw a `FetcherException` whenever the output printer was used). I think this makes in particular sense since you pass `null` as the second argument above.

#1621 Review Comments 4:
Now all the translations with changed key but unchanged value are invalid.

#1621 Review Comments 5:
Yes, that was my main reason for not putting "Ready for review". I'll sort it out eventually.

#1621 Review Comments 6:
There is already one with that name. :-)

#1621 Review Comments 7:
The main difference between MergeEntryDialog and this is the number of options one has at the end. However, one may of course call the MergeEntryDOIDialog something like `MergeFetchedEntryDialog` to make it more generic and, as you say, use an entry from a database and a fetch, temporary, entry.

#1621 Review Comments 8:
I think one should merge the two merge entries dialogs (pun intended :smile: ). They actually share a lot of common code and the differences are quite small (and can be controlled by passing a boolean as an option to the constructor)

#1621 Review Comments 9:
"with fetched information" ? since DOI, ISBN and now eprint is supported.

#1621 Review Comments 10:
maybe move this constant to FieldName.DOI_DISPLAY_NAME?

#1621 Review Comments 11:
"E-Print"?

#1621 Review Comments 12:
better print out error message as below

#1621 Review Comments 13:
Is there a similar button for the ArXiv?

#1621 Review Comments 14:
Simple one liner: `! Collections.disjoint(list1, list2);`
From the apidoc:  disjoint (a, b) Returns true if the two specified collections have no elements in common.  

#1621 Review Comments 15:
Great! There should have been an easier way...

--------------------------------------------------------------
#1620 Review Comments 1:
Aren't there any other translated strings for "yes" or "no"? Could we be more specific somehow? See our discussion on the database-changed-what-do-you-want-to-do-dialog.

#1620 Review Comments 2:
Maybe we just can use a checkbox for enabled/disabled?

#1620 Review Comments 3:
Checkboxes are now used.

#1620 Review Comments 4:
You are comparing strings with == here!
Use Objects.equals() 

#1620 Review Comments 5:
You could use a Stream with Files.lines and then apply a filter to filter out the comment line: Either directly or when the list is complete get the first/last occurrence of a comment.

http://stackoverflow.com/questions/19605151/using-java-8-what-is-the-most-preferred-and-concise-way-of-printing-all-the-lin
https://www.mkyong.com/java8/java-8-streams-filter-examples/

--------------------------------------------------------------
--------------------------------------------------------------
#1618 Review Comments 1:
Why is this field name moved from model to `JabRefPreferences`?

#1618 Review Comments 2:
Because the field name is configurable in the preferences, so bad idea to
hard code it in a file. ;-)

#1618 Review Comments 3:
Ok, I see. We might consider to drop this configuration option at some point in time. I don't really see why you might want to configure this.

#1618 Review Comments 4:
I agree. Moving ahead to date-added, date-modified (#1575, comment and https://github.com/koppor/jabref/issues/130) will sort this out.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1611 Review Comments 1:
I think the while-loop above this is already trying to check the current line for validity and tries to skip all the invalid ones. I would propose to extract a new method called `private boolean checkLineValidity(String line)` and do all the checks in there such as: empty line, line doesn't contain "-", "-" symbol not at 4th position, etc...
then the while loop above can also be replaced and you don't need to modify the counter variable "j". You can then simply skip any invalid lines with:

```
if (!checkLineValidity(lines[j])) {
    continue;
}
```

#1611 Review Comments 2:
This would also mean you don't need to modify as much code as you did now because then you don't have the if-clause around all the code.

#1611 Review Comments 3:
Add the empty line again to fix Travis build.

#1611 Review Comments 4:
But I wouldn't extract the while loop above, because in the while loop are also correcctions, like adding space if '-' is at third position. And putting the while loop into a method that returns a boolean could have side effects, since you don't expect, that this method is changing something.

#1611 Review Comments 5:
You could also extract to multiple methods, `private boolean first checkLineValidity(String line)`, if false try to correct it by calling another method that tries to insert spaces or similar things.

#1611 Review Comments 6:
`!(line.charAt(4) == '-')` this will throw an OutOfBoundsException if the length of the line is exactly 4. Please cover this case.

#1611 Review Comments 7:
Also please check the if statement again, I can't find a case where this will return `false`.

#1611 Review Comments 8:
`? true : false` is unnecessary.

#1611 Review Comments 9:
Why did you add this line?

#1611 Review Comments 10:
I think `line.contains("-")` is unnecessary when you also check for it's position.

#1611 Review Comments 11:
`return ((line.length() >= 5) && (line.charAt(4) == '-'))`  - why not as simple as that? :wink:

#1611 Review Comments 12:
When the bib file is in UTF8, then please set the Charset explicit to UTF8, too. `DefaultCharsets.UTF8` (or similar), otherwise test will fail on windows in gradle.

#1611 Review Comments 13:
done.

#1611 Review Comments 14:
Use the method Collections,emptyList() rather than the constant, because the constant does not return a generic list and is therefore not typesafe.
(In this case not so important, but could possinly produce an unchecked warning)

#1611 Review Comments 15:
For the codacy issue just remove the assignment 

#1611 Review Comments 16:
done.

#1611 Review Comments 17:
done.

--------------------------------------------------------------
#1608 Review Comments 1:
I would also include the `journalAbbreviationLoader` in `LayoutFormatterPreferences`.

#1608 Review Comments 2:
So if the OOPanel is open and I make some changes to the preferences, then `StyleLoader` is not changed, i.e. every action from the OOPanel still uses the old preferences, right?

#1608 Review Comments 3:
Currently, yes.

#1608 Review Comments 4:
Yes, that may make sense. I made an attempt including in JournalAbbreviationPreferences, but that wasn't the correct place it turned out. Will try again.

--------------------------------------------------------------
--------------------------------------------------------------
#1606 Review Comments 1:
Not sure that it should life in logic.

#1606 Review Comments 2:
I'm open for suggestions on location. No dependency issues either way.

#1606 Review Comments 3:
I merged it. We can discuss moving the class somewhere else somewhere else. ;)

--------------------------------------------------------------
#1605 Review Comments 1:
Please start comments with Capital letters.

#1605 Review Comments 2:
Same as above.

#1605 Review Comments 3:
Typo ig -> if

#1605 Review Comments 4:
Would be nice if you could add additional brackets here, that would make it clearer.

#1605 Review Comments 5:
Hm why do you set `NAME` as `public static final` and add this get method? Isn't this unnecessary then?

#1605 Review Comments 6:
done

#1605 Review Comments 7:
done

#1605 Review Comments 8:
done

#1605 Review Comments 9:
I extracted the second condition

#1605 Review Comments 10:
I need to access the name from the `SidePaneComponent`.
Sadly you cannot define an abstract static method

#1605 Review Comments 11:
Can one simply return `"fileUpdate"` here and replace all references to `NAME` with calls to `getSidePaneName`?
Applies also to the other side panes.
One probably needs to recode `getComponent` to not use the name but the class (as a generic version `<T> T getComponent(Class<T> clazz)`)

#1605 Review Comments 12:
Maybe rename getAction -> getToggleAction ?

#1605 Review Comments 13:
Make `getAction` an abstract method in SidePaneComponent ?

#1605 Review Comments 14:
Can you please extract this private class to a new file. Thanks.

#1605 Review Comments 15:
done

#1605 Review Comments 16:
Done, although `FileUpdatePanel` doesn't implements it.

#1605 Review Comments 17:
done

#1605 Review Comments 18:
I used the static `NAME` to change the state of the side panels without having an object of it at hand.
I changed the `SidePaneManager` to manage the side panels in a generic way.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1596 Review Comments 1:
"not be"

#1596 Review Comments 2:
Why is this declared outside of the try? (Just curious if there is a reason.)

#1596 Review Comments 3:
spelling: Null

#1596 Review Comments 4:
Are there cases where the result is explicitly checked for an empty `Set` and some warning related to permissions is shown?

#1596 Review Comments 5:
Sorry, I misread the code... It should be OK.

#1596 Review Comments 6:
No reason. Was from my first experiment without try-catch but throws.

#1596 Review Comments 7:
Could it be that it says png here but pdf in extensions? (Not sure why it would work on Windows though...)

#1596 Review Comments 8:
Oh, is said `assertFalse`. That explains things. :-)

#1596 Review Comments 9:
The problem is that under linux the first AssertEquals fails. because it says size is 1 but excepted 2.

#1596 Review Comments 10:
@oscargus  I think I found the error! Case Sensitivy. Windows is case insenstive, but Linux not!
`graphicsDir`vs g`raphicsdir`

#1596 Review Comments 11:
Seems reasonable! Well hunted!

#1596 Review Comments 12:
Files.walk creates a stream, which must be closed using try-with-resources, otherwise, this may affect another test as it will not free the directory resource.

#1596 Review Comments 13:
also Files.find must be closed

#1596 Review Comments 14:
close

#1596 Review Comments 15:
Maybe just use List here instead of Collection?

#1596 Review Comments 16:
Wow, this is complex here/ugly...Maybe split this up a little bit? Even consider not using streams here?

#1596 Review Comments 17:
Maybe the Windows/Linux thing is a file name casing thing? Just guessing here...!

#1596 Review Comments 18:
NUll -> Null

#1596 Review Comments 19:
I can maybe split the Bi-Predicate lambda in a new function..
The reason for streams is that is lazily walking the file system and increases performance for huge directories. 

#1596 Review Comments 20:
Yeah, that was previous  Error. Now the tests work on linux, too. But not on the CI Server.

#1596 Review Comments 21:
I think the proper way to handle temporary folders in tests is via 
`@Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();`,
which also takes care of deleting the folder after every test.

#1596 Review Comments 22:
I would prefer a smiple `Files.createFile` without the assertion for readability (and since I suspect that creating the file never fails...)

#1596 Review Comments 23:
Better create a `Map<BibEntry, List<File>> expected` and compare that it equals `results`

#1596 Review Comments 24:
compare `results` to emptyset

#1596 Review Comments 25:
the `Globals.prefs = null` is  not required.

#1596 Review Comments 26:
As far as I can see, there is no need to mock `Globals.prefs`. A simple `preferences = mock(...)` and `findAssociatedFiles(..., preferences)` should work.

Is it much work to refactor `findAssociatedFiles` to accept a boolean `AUTOLINK_EXACT_KEY_ONLY` instead of the preference class?

#1596 Review Comments 27:
In this case this is not the best idea, as the pahts to the file are os dependent resolved and differ on the location of the temp file etc.

--------------------------------------------------------------
--------------------------------------------------------------
#1594 Review Comments 1:
gui?

#1594 Review Comments 2:
No really enough to move HelpFile.

#1594 Review Comments 3:
Useful method!

--------------------------------------------------------------
#1593 Review Comments 1:
Why is it not possible to use the actual value for `USE_CONVERT_TO_EQUATION` here? After all, this is the preferences class?

#1593 Review Comments 2:
In case you need a set of configuration options from the preferences (as it is the case here), you could introduce a configuration object that takes all these configurations as parameters. By passing this object, you can avoid long parameter lists and get rid of the preferences dependency.

#1593 Review Comments 3:
It cannot be accessed. `prefs` is non-static and `Globals.prefs` is not yet set (and this is executed before it can be set).

#1593 Review Comments 4:
Maybe we should keep the Globals dependency here for now (`new HtmlToLatexFormatter(Globals.prefs.USE_CONVERT_TO_EQUATION)`), because this changes the behavior otherwise.

#1593 Review Comments 5:
Conceptually, yes. There are two problems (in general): 
1. that configuration object is in many cases a running target. You pass something that may or may not be used five calls from here. Layout is a good example, where some formatters use some preferences and you have to inject that in lots of methods. Adding a new formatter may change the object and so on.
2. That configuration object will depend on the preferences, so I do not really see where this disconnection should happen. At least not if the configuration of object should configure itself based on the preferences.

#1593 Review Comments 6:
1. This is actual no problem but a feature. If you add a new formatter, then you just need to add a variable to the configuration object and that's it. No need to modify lots of methods to just pass the dependency.
2. That's a good point. For now think about the configuration object as a place to collect the access to the preference class. Later we might rework these classes so that they no longer dependent on the preferences. Take for example `SavePreferences`. This class encapsulates (nearly) all configuration options for saving a bib-file. Right now it depends on the preference class via `SavePreferences.fromPreferences(JabRefPreferences)` but this is the only place. Now it is easy to invert this method and change it to `SavePreferences JabRefPreferences.getSavePreferences()`. 

#1593 Review Comments 7:
I think we need a general strategy for how preferences in these formatters are handled. The idea of save actions was that these are specified in the bib-file and can be invoked on every save without destroying the bibitems. For this it is really necessary that every user runs the same save actions for the same file. But this is might be no longer the case if some formatters depend on user preferences. For the moment I would not change them but document which formatter depends on which preferences.

#1593 Review Comments 8:
1. Makes sense. Passing an object may be a good idea, I agree.
2. Ahh, that's correct. Didn't think of that option. More the `SavePreferences.fromPreferences(JabRefPreferences)` version.

#1593 Review Comments 9:
Maybe this isn't needed and we just can decide on one way to convert subscripts and superscripts from HTML to LaTeX. It is there from historical reasons, where I first did it using equations and then someone wanted the `\textsuperscript` version. I would almost suggest always using `\textsuperscript` now that the table view can render it properly (earlier it was more compact with `$^2$` compard to `\textsuperscript{2}`.

This would also reduce the amount of settings.

#1593 Review Comments 10:
+1 for always using `\textsuperscript`

#1593 Review Comments 11:
The original reason here was actually to avoid an NPE rather than avoiding `Globals`. (That comment went missing it seems like.)

#1593 Review Comments 12:
OK, I added `LatexFieldFormatterPreferences` and `FieldContentParserPreferences`. More are clearly needed to cover the complete `logic`, but at least something.

#1593 Review Comments 13:
Could you include the `LatexFieldFormatterPreferences` in `SavePreferences` (and remove the explicit reference to `JabRefPreferences` from `BibtexDatabaseWriter`) 

#1593 Review Comments 14:
Yes, that would make sense. I just did something similar to AutoCompleterPreferences and JournalAbbreviationPreferences.

#1593 Review Comments 15:
is it possible to pass `jabRefPreferences.getBoolean(JabRefPreferences.GROUP_SHOW_DYNAMIC)` as a boolean parameter to getShortDescription?

Also try to remove the jabrefprefrences in AbstractGroup (since the only group which relies on preferences is the KeyWordGroup if I see it correctly)

#1593 Review Comments 16:
introduce a variable `separator = ', '` on class level and reuse it in every test.

#1593 Review Comments 17:
Just use constant `,` as second parameter. 

#1593 Review Comments 18:
see below

#1593 Review Comments 19:
Does that really make sense? I just had to add some stuff in `LatexFieldFormatterPreferences` as some other behaviour really relies on the preferences but it is not handled in the tests.

#1593 Review Comments 20:
How would you then run `fromString` if the result is a KeyWordGroup?

getShortDescription is not a problem. I'll fix that.

#1593 Review Comments 21:
`Globals.prefs` is not really initialized in tests (on your system, the current JabRef preferences are used while on Travis the default preferences are taken). Thus one should in general avoid it and use hard-coded input values.

#1593 Review Comments 22:
Well, there are many tests that rely on default preferences without
specifying it. For example, the begin and end symbols for field `{` and `}`
are from the preferences and using an empty `SavePreferences` will
indirectly cause a requirement of specifying these (and, hence, it would
have been better to initialize those from the preferences in all tests).
I'm not really sure about all the cases here but somehow it may be better
to avoid later surprises...

Either way: not very hard to search and replace later. I'm travelling so
most likely nothing will be changed until tomorrow evening at the latest.

#1593 Review Comments 23:
Well, if the KeywordGroup has problems with different separators, then one should write new tests for this separator. But then it would be easier to pass them directly to the method instead of setting a preference. Anyway, logic should be independent on the preferences and so should be their tests.

#1593 Review Comments 24:
That basically means that there shouldn't be any logic tests which initializes `Globals.prefs`. The question is just how long we should enforce that... I can remove the ones here, though.

#1593 Review Comments 25:
Right! Tests should try to never initialize `Globals.prefs`. Actually, your PR is one step in this direction since so far it was difficult to tell which preferences are accessed deep in the call chain.

--------------------------------------------------------------
--------------------------------------------------------------
#1590 Review Comments 1:
I would move this functionality to a separate `ISSN` class which does the parsing. For example, the code then might look as follows:

```
ISSN issn = ISSN.fromString(issnText);
if (issn.isValid()) {
   entry.setField("issn", issn.ToString())
}
```

Then you could reuse the same logic to add a ISSN integrity check. The same remark applies to your other ISBN PR. 

#1590 Review Comments 2:
I would be more vague and say `Reformat ISSN`.

#1590 Review Comments 3:
I would move these tests to a new ISSNCleanupTests class. Don't know why nearly all cleanup tests are bundled here in this class.

#1590 Review Comments 4:
How would you handle a string "3457345X"? Not set it? Add a dash? What about an arbitrary string?

Either way, I won't implement this at the moment.

#1590 Review Comments 5:
Could do that.

#1590 Review Comments 6:
Doable.

#1590 Review Comments 7:
I think the reason is all the dependency injections. Now it wasn't that hard, just mock both arguments, but it is clearly quicker to just add them to existing tests...

#1590 Review Comments 8:
I don't get your question, sorry. If the passed string is not matched by the regex, then `issn.isValid` returns false. So it is essentially just moving your code to three different methods. You may have a look at https://github.com/JabRef/jabref/blob/a6769dd81782a0010681fdd14622c1fcc43519fb/src/main/java/net/sf/jabref/logic/mods/PageNumbers.java

#1590 Review Comments 9:
So, what if it is a valid ISSN, but the dash is missing?

#1590 Review Comments 10:
An ISSN would then not be valid!
It must contain an dash:
https://en.wikipedia.org/wiki/International_Standard_Serial_Number

#1590 Review Comments 11:
Sure, but it can be cleaned up as opposed to all other cases.

Maybe I was focusing too much on your example, but to not set the field
based on a missing dash seemed quite stupid to me. Better then to add it.
Hence the questions how to handle that.

Still, I do not really see it happening at the moment though.

#1590 Review Comments 12:
So your problem is that for this PR you want to make sense of strings which look like ISSNs but are not quite in the standard format, right? What about creating `static Optional<ISSN> fromString(text)` which returns an ISSN object if JabRef could make sense of the input. Then the ISSN class has a constructor accepting the different parts of the ISSN (first part, second part and checkdigit), `isValid` returns true if the checksum is correct and toString formats it in the standard way using a separating dash. Would this be a solution?

#1590 Review Comments 13:
Something similar should be in `DOI.java` if I remember correctly.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1587 Review Comments 1:
One could argue if this should be in the change log as it is mainly a code issue. However, as there are some earlier entries like that and there is the need of antlr source regeneration it might just as well stay there.

#1587 Review Comments 2:
Perhaps just start the whole entry with "For developers: ..."

#1587 Review Comments 3:
@matthiasgeiger: Done. And I will of course squash the commits when merging

--------------------------------------------------------------
#1586 Review Comments 1:
See https://github.com/JabRef/jabref/pull/1590#discussion_r70992658

#1586 Review Comments 2:
Again, how to handle invalid data? Here it is slightly more obvious as the dashes are ignored, but should one store both version? Some people may prefer the dashes in particular positions...

I do not see this happening in this PR.

#1586 Review Comments 3:
I would simply create an ISBN class in the model which receives a String and then can verify whether this String is a valid ISBN or not. Hence, isolate the check logic. I would not care about storing here.

--------------------------------------------------------------
#1585 Review Comments 1:
Could you also fix the indent?

#1585 Review Comments 2:
Gah! Missed this comment... I'll sort it out.

--------------------------------------------------------------
#1584 Review Comments 1:
Can you remove this line, please?

--------------------------------------------------------------
#1583 Review Comments 1:
Maybe it would make sense to add a method `public static boolean isInternalField(String field)` to `EntryUtil` and use it for the second part of the condition statement?

Just so that the knowledge on the structure of internal fields moves into the model package.

#1583 Review Comments 2:
Makes sense.

#1583 Review Comments 3:
It ended up in `InternalBibtexFields` as that class had similar methods.

--------------------------------------------------------------
#1582 Review Comments 1:
Why did you set the columns to 20? In my opinion you can use more as it seems there is still space to the right in the preference dialog.

#1582 Review Comments 2:
Please try to use java nio methods.

#1582 Review Comments 3:
Please add a java doc comment. Also mention that this depends on the user settings.

#1582 Review Comments 4:
Please try to use java nio methods.

#1582 Review Comments 5:
👍 for not using `ProcessBuilder`

#1582 Review Comments 6:
Be careful with that! 
It was change to PB with intention in https://github.com/tschechlovdev/jabref/commit/73f69e6c2a6ddcaef8a14207a1967f813c3fdf24

#1582 Review Comments 7:
Updated to 25. It should be ok right now.

#1582 Review Comments 8:
Done.

#1582 Review Comments 9:
Undone.

#1582 Review Comments 10:
Done using `Paths`.

#1582 Review Comments 11:
Done using `Paths`.

#1582 Review Comments 12:
Do not include final `\:` in the language files

#1582 Review Comments 13:
Done.

#1582 Review Comments 14:
The preferences should be in "External programs", not in "Advanced", as "Console" is an external program.

#1582 Review Comments 15:
Done. Moved to `ExternalTab`.

#1582 Review Comments 16:
Maybe I shouldn't interfere at this time, but I think replacing "type in" with "enter" would make sense. 

#1582 Review Comments 17:
Done.

#1582 Review Comments 18:
No need for an empty line :innocent: 

#1582 Review Comments 19:
I liked "current" more than "opened": There is always one "current" database file (or zero if nothing is opened :)), but possibly more than one opened.

#1582 Review Comments 20:
Remove empty line here

#1582 Review Comments 21:
Do not localize LOGGER messages

--------------------------------------------------------------
#1581 Review Comments 1:
Please find a more speaking variable name  as "strings" here and below in the loop
e.g unicode_strings or whatever..

#1581 Review Comments 2:
Can you add a comment describing this string?

#1581 Review Comments 3:
@JabRef/developers Does java copies here the whole map or just point to the original one? If the map is copied, then one should inline `CHARS` and `ACCENTS`

#1581 Review Comments 4:
combody -> commandBody

#1581 Review Comments 5:
s -> unicodeText or something similar

#1581 Review Comments 6:
Please split tests so that the contain only one assertEquals (also for the next test), also `convertChi` is probably a better name (you can also reference the issue to give some context)

#1581 Review Comments 7:
It doesn't matter, as this is a kind of constant which gets replaced by the containing value on compile time, directly in the byte code.
In general, java is  by value,  it copies just the object reference (pointer).
**http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value**

--------------------------------------------------------------
#1577 Review Comments 1:
I don't think, it necessary to document trivial cases. Maybe, this teamscale finding should be ignored?

#1577 Review Comments 2:
OK

#1577 Review Comments 3:
Not necessary

#1577 Review Comments 4:
Trivial :innocent:  -> should be removed.

#1577 Review Comments 5:
if addKeyToSet is private, why is the opposite operation pacakge-private and not of the same visibility level?

#1577 Review Comments 6:
Because it is used in the class BibDatabse.java

#1577 Review Comments 7:
Ok I removed the unnecessary comments.

#1577 Review Comments 8:
Still not consistent with addKeyToSet

#1577 Review Comments 9:
Please remove the trivial comment

#1577 Review Comments 10:
Please remove the trivial comment

#1577 Review Comments 11:
Method comment missing

#1577 Review Comments 12:
Bitte keine obsoelten Leerzeilen

#1577 Review Comments 13:
The description does not contain the real semantics of the method.

#1577 Review Comments 14:
Param not described

#1577 Review Comments 15:
But then I have to set addKeyToSet protected, or public, although it can be declared private. Shouldn't it have the lowest possible visibility level? 

#1577 Review Comments 16:
Please rework comment. "Collects entries having the specified BibTeX key and returns these entries as list. The order of the entries is the order they appear in the database"

#1577 Review Comments 17:
Why adding empty lines?

#1577 Review Comments 18:
No `'` at the plural form of ID (IDs).

#1577 Review Comments 19:
Convert to JavaDoc format

#1577 Review Comments 20:
Please remove the empty lines in the comment

#1577 Review Comments 21:
Remove this empty comment line.

#1577 Review Comments 22:
Try to hyperlink the method with `{@link resolveString(String label, Set<String> usedIds)}` if you want to refer to a single one or use {@code resolveString(..)} if the method is heavily overloaded.

#1577 Review Comments 23:
I think those comments should be moved to the javadoc comment of this method or they should be removed.

#1577 Review Comments 24:
If you remove the `TODO:` label there shouldn't be an unanswered question in the comments anymore.

#1577 Review Comments 25:
Remove the empty comment lines.

#1577 Review Comments 26:
Remove this empty comment line.

#1577 Review Comments 27:
What happens if the string neither "bibtex" nor "biblatex". You can write in the description that this will invoke `{@link valueOf(Strring value)}`.

#1577 Review Comments 28:
Remove this empty comment line.

#1577 Review Comments 29:
Remove the empty comment lines.

#1577 Review Comments 30:
Typo at "inserted"

#1577 Review Comments 31:
This will be formatted as "Usage: isDuplicate=-......". If you really want a new line, use html elements such as `<br>` or `<p>` in the javadoc comments.

#1577 Review Comments 32:
The description is quite confusing when looking at the method name, please change it.

#1577 Review Comments 33:
What is the purpose of this note? The hashmap isn't even declared in this methode.

#1577 Review Comments 34:
Remove the empty comment lines.

#1577 Review Comments 35:
What does this mean?

#1577 Review Comments 36:
Please reword.

#1577 Review Comments 37:
Remove the empty comment lines.

#1577 Review Comments 38:
Would it be possible to add/move/use the `isInternalField` method here? Slightly clearer. (What I mean is, either move it to `BibDatabase` if that is a better location or simply copy it here.)

#1577 Review Comments 39:
You are sure that there are no unwanted side effects? ;-) (I've also looked at those lines quite a few times...)

#1577 Review Comments 40:
I coulnd't find any, so I thought this could be deleted, but I'm not 100% sure about that. Should I rather keep the comment? 

#1577 Review Comments 41:
I've added the isInternalField method here and used it.

#1577 Review Comments 42:
I have no idea when it was introduced, so hard to say. @JabRef/developers keep comment or remove (since we haven't found any drawbacks)?

#1577 Review Comments 43:
Remove empty lines.

#1577 Review Comments 44:
Reintegrate the method. 5 LOC for a method with 5 paramters. -- no extra method necessary.

#1577 Review Comments 45:
Please revert this change. No shortcut syntax.

#1577 Review Comments 46:
See above.

#1577 Review Comments 47:
Please revert the extraction of the method, as the new method is hard to understand because of too many parameters. It also requires a huge amount of comment, which is also a sign that it is not at good unit to be extracted.

#1577 Review Comments 48:
Remove this comment.

#1577 Review Comments 49:
Remove this comment.

#1577 Review Comments 50:
expand to if / else

#1577 Review Comments 51:
Remove empty line.

#1577 Review Comments 52:
Add "TODO" before line 515

#1577 Review Comments 53:
Remove empty line.

#1577 Review Comments 54:
done.

#1577 Review Comments 55:
done.

#1577 Review Comments 56:
done.

#1577 Review Comments 57:
done.

#1577 Review Comments 58:
done.

#1577 Review Comments 59:
done.

#1577 Review Comments 60:
done.

#1577 Review Comments 61:
done.

#1577 Review Comments 62:
done.

#1577 Review Comments 63:
Why do you remove the import of that class? - You did not say it in your comments https://github.com/JabRef/jabref/pull/1577#issue-165098695

#1577 Review Comments 64:
Why isn't `!Optional.isPresent()` used? The hack to convert to `null` is dirty. Optional has been introduced to avoid `null` at al..

#1577 Review Comments 65:
This comment in unclear and reveals some internal details. What is the consequence if the string is neither bibtex nor biblatex? Will it throw a RuntimeException?

#1577 Review Comments 66:
What does it return, if not?

#1577 Review Comments 67:
Either remove this comment or expand it by explaining, what the intention of the mode is etc. What is the idea of the detection etc.

#1577 Review Comments 68:
Do not present empty `@param`. Either remove them or explain them.

#1577 Review Comments 69:
Try to write a level above this level.

Helper function for counting the number of the key usages. Adds the given key to the internal keyset together with the count of it. The counter is increased if the key already exists, otherwise set to 1. Special case: If a null or empty key is passed, it is not counted and thus not added.

#1577 Review Comments 70:
copy and paste error.

Plesae use my text from above as basis.

#1577 Review Comments 71:
I would remove this comment completely, as this comment can be automatically derived from the JavaCode.

#1577 Review Comments 72:
Remove this comment or add some more information about the intended usage.

#1577 Review Comments 73:
I wrote the isInternalField method in that  class and not used it from InternalBibtexFields, because I thought that `isInternalField(field)` seems more readable then `InternalBibTexField.isInternalField(field)`.

#1577 Review Comments 74:
`entry.getCiteKeyOptional()` will not contain the old key now. Both arguments will be identical so will break the function of the call.

#1577 Review Comments 75:
Thanks a lot! I've searched at the wrong place for the failure ....

#1577 Review Comments 76:
I don't like Optionals as parameters here.

#1577 Review Comments 77:
Please remove this empty line.

#1577 Review Comments 78:
If I remember correctly, the caller may pass null for both oldKey and newKey. As JabRef moves away from `null` towards `Optional`, we thought, it would be a good idea to use `Optional` here, too.

#1577 Review Comments 79:
Personnaly I think Optional is only a good thing for return types. I also posted an article some time ago.

#1577 Review Comments 80:
Independent of Optional or not, wouldn't it be possible to write the code like:

``` java
boolean duplicate = false;
if (!oldKey.equals(newKey)) {  // If keys are not the same
if (!oldKey.isPresent()) { // No old key
duplicate = addKeyToSet(newKey.get());
} else {
 removeKeyFromSet(oldKey.get());  // Get rid of old key
 if (newKey.isPresent()) { // Add new key if any
  duplicate = addKeyToSet(newKey.get());          
 } 
}
}

if (duplicate) {
...
}
```

(Replace with corresponding non-optional calls (`Objects.equals()` for the first call).

#1577 Review Comments 81:
@stefan-kolb Do you have a deep link for the article? I checked https://github.com/JabRef/jabref/wiki/Code-Howtos, which points to https://github.com/cxxr/better-java#avoid-nulls, which uses Optional also in the parameters.

#1577 Review Comments 82:
Not the exacr one but what about these: https://dzone.com/articles/use-of-optional-is-optional, https://dzone.com/articles/java-8-optional-how-use-it

#1577 Review Comments 83:
Related discussion:
http://stackoverflow.com/questions/31922866/why-should-java-8s-optional-not-be-used-in-arguments

2016-08-26 8:25 GMT+02:00 Stefan Kolb notifications@github.com:

> In src/main/java/net/sf/jabref/model/database/DuplicationChecker.java
> https://github.com/JabRef/jabref/pull/1577#discussion_r76369435:
> 
> > -    //############################################
> > -    // if the newkey already exists and is not the same as oldkey it will give a warning
> > -    // else it will add the newkey to the to set and remove the oldkey
> > -    public boolean checkForDuplicateKeyAndAdd(String oldKey, String newKey) {
> > -        // LOGGER.debug(" checkForDuplicateKeyAndAdd [oldKey = " + oldKey + "] [newKey = " + newKey + "]");
> > -    /**
> > -     \* Usage:
> > -     \* <br>
> > -     \* isDuplicate=checkForDuplicateKeyAndAdd( null, b.getKey() , issueDuplicateWarning);
> > -     *
> > -     \* If the newkey already exists and is not the same as oldkey it will give a warning
> > -     \* else it will add the newkey to the to set and remove the oldkey
> > -     *
> > -     \* @return true, if there is a duplicate key, else false
> > -     */
> > -    public boolean checkForDuplicateKeyAndAdd(Optional<String> oldKey, Optional<String> newKey) {
> 
> Not the exacr one but what about these: https://dzone.com/articles/
> use-of-optional-is-optional, https://dzone.com/articles/
> java-8-optional-how-use-it
> 
> —
> You are receiving this because you are on a team that was mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1577/files/f9d6a1943a7bc023d8042f02c3c3922c38f34a66#r76369435,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AATi5Fj7w1jmaRe-PdgqNDMDsD1MeDS2ks5qjobDgaJpZM4JKeSe
> .

--------------------------------------------------------------
--------------------------------------------------------------
#1575 Review Comments 1:
I currently have no clear picture about private fields. This is the context of https://github.com/JabRef/jabref/issues/574 :smile: 

#1575 Review Comments 2:
Since we want to get away from using Globals.prefs in logic classes, I would propose to add constructors which takes the format as input. E.g.

``` java
EasyDateFormat(String dateFormat)
   this(DateTimeFormatter.ofPattern(dateFormat))

EasyDateFormat(DateTimeFormatter dateFormat)
   this.dateFormat = dateFormat;

static EasyDateFormat fromPreferences(JabRefPreferences preferences)
    return new EasyDateFormat(preferences.get(JabRefPreferences.TIME_STAMP_FORMAT));

static EasyDateFormat IsoDateFormat = new EasyDateFormat(DateTimeFormatter.ISO_LOCAL_DATE)
```

#1575 Review Comments 3:
Good idea! I changed it.

--------------------------------------------------------------
#1574 Review Comments 1:
This class is really independent of GUI code, so it should be in logic and not in gui.

#1574 Review Comments 2:
 `import javax.swing.filechooser.FileFilter;`

Had to restructure ExportFormat a bit because of that darn `FileFilter`...

#1574 Review Comments 3:
I see. You are correct! That means the PR is fine from my point of view.

--------------------------------------------------------------
--------------------------------------------------------------
#1572 Review Comments 1:
Is there a space after the = sign?

#1572 Review Comments 2:
It is best practice to init the class under test in the `@Before` method so that every test method gets a fresh class, i.e move the `= new HtmlToUnicodeFormatter` part to this method.

#1572 Review Comments 3:
Add this formatter also to the parametrized FormatterTest class (not sure about the exact name)

#1572 Review Comments 4:
I know I'm pedantic, but please create 4 tests for this.

#1572 Review Comments 5:
We should also add a corresponding entry in the help file (for LayoutFormatter)

#1572 Review Comments 6:
Is the prefs statement really necessary?

#1572 Review Comments 7:
Indeed! Thanks for spotting!

#1572 Review Comments 8:
You are correct. That comes from a copy paste from the other formatter tests, which all share this problem. I will fix all of them in this PR.

#1572 Review Comments 9:
Will do. And `FormatterTest` is indeed the correct class name.

#1572 Review Comments 10:
I'll separate it in two tests. One that tests for the different variants of `ä` (I think it makes sense to bundle those) and one that tests for the greek letter.

#1572 Review Comments 11:
No, I remove it.

#1572 Review Comments 12:
Refs: #8 None of the current formatters are documented and I won't build documentation for all as part of this PR. This has to go separately.

#1572 Review Comments 13:
I meant http://help.jabref.org/en/CustomExports under `Built-in export formatters` since the class is implementing LayoutFormatter and thus can be used for the exports too, right?

#1572 Review Comments 14:
Yes, but not a single class of the package `net.sf.jabref.logic.formatter.*` is listed in this section. I don't think a patchwork solution, where I document just one of those, would be a good idea. The whole page desperately needs updating.

--------------------------------------------------------------
--------------------------------------------------------------
#1570 Review Comments 1:
Create a new `BibEntry secondEntry` instead of reusing the first one.

#1570 Review Comments 2:
Remove second assert as already covered with first test.

#1570 Review Comments 3:
I would remove the setCiteKeyForEntry method. Half of its users does not need the return value and it definitely not clear from the name of the method that the return value gives you some information about duplicates.

#1570 Review Comments 4:
New test method pls.

#1570 Review Comments 5:
Init the entry with key `AAA` in the `@Before` method so that you can reuse it in every test.

#1570 Review Comments 6:
Please test only one aspect of the method per test, i.e. checking the return value and that the cite key was changed are two independent tests. This applies also to some of the test methods below.

#1570 Review Comments 7:
Don't reuse entry (or string below).

--------------------------------------------------------------
--------------------------------------------------------------
#1568 Review Comments 1:
Better `assertEquals(Optional.empty(), entry.getField(....))` in this way one gets a better failure message. Same applies to the other tests, i.e. `assertEquals(Optional.of("2003-03"), emptyEntry.getFieldOrAlias("date"))` below.

#1568 Review Comments 2:
Makes sense.

--------------------------------------------------------------
--------------------------------------------------------------
#1565 Review Comments 1:
My head is spinning by thinking about UndoRedoEvents, as undo and redo should cancel each other out, leaving only a event? Can you please document this? And the AddUndoEvent als well? What should be described in these events? When are they fired?

#1565 Review Comments 2:
Why is this necessary?

#1565 Review Comments 3:
Is this really necessary? I think the entry editor listens for changes to the displayed entry, right?

#1565 Review Comments 4:
only one `s`

#1565 Review Comments 5:
Hide these fields behind getters (no setters). And rename `undoText` to `undoDescription`

#1565 Review Comments 6:
In addition, I also don't get why UndoRedo derives from AddUndo. I would prefer if only one event `UndoableActionChangedEvent` would be needed, i.e. one event for adding a new undo action and the same event is fired when an action is "redoed". 

#1565 Review Comments 7:
To set the correct enable/disable state on the panel. Maybe a bit hacky,
but the alternative is to define another event type.

#1565 Review Comments 8:
Didn't try without it. Earlier it resided in the undo manager.

#1565 Review Comments 9:
I'll add comments. Quickly: AddUndoEvent when something is added to the
undo manager (update actions), UndoRedoEvent when something is
undone/redone (update actions and possibly entry editor).

#1565 Review Comments 10:
Basically to avoid copying code as they have exactly the same content but
two different types are needed. An alternative might be to add the type in
the event but that seemed worse.

#1565 Review Comments 11:
Just duplicate the code and do not introduce inheritance if it is semantically inadequate.

Maybe the meaning of "AddUndoEvent" gets clearer if it is named "AddUndoableActionEvent"?

#1565 Review Comments 12:
:+1: for code duplication in that case.
:+1: for "AddUndoableActionEvent", but still, is this just not something that is happening automatically because of other events? So do we really need this event as such? To add an undoable item to the undo manager seems a little bit too low from a granularity point of view. We should add the event that a save was triggered, and this would then be also the "AddUndoableActionEvent" as it was a save event. Does this make sense?
:+1: for "UndoOrRedoEvent"

#1565 Review Comments 13:
Another reason for inheriting was that there could be a shared function for
updating the text. I have copied that now though.

The reason that such an event is needed is that it is triggering the tool
tip changes. That is all it does.

Will push tomorrow. :-)

#1565 Review Comments 14:
You can create a common base event like `Undo(Manager?)ChangedEvent` and let both events derive from this new class.

#1565 Review Comments 15:
Sorry, I still don't get it. 
So I close the window, why should the undo manager care about it??

#1565 Review Comments 16:
It looks to me that a lot of events now have the same `getUndo/RedoPresentationName`. Can this be pushed to the parent class AbstractUndoableEdit ?

#1565 Review Comments 17:
Yes, that should indeed be possible. Didn't think of it. Earlier only some had a `getPresentationName` but based on the structure of the code, it made more sense to only change any significant text in one position.

#1565 Review Comments 18:
Except that `AbstractUndoableEdit` is in `javax.swing.undo`.

#1565 Review Comments 19:
The undoManager has the event bus. Any other suggestions for the location
of the undo event bus?

#1565 Review Comments 20:
Oh, it is actually not in `windowClosing()`. It is in the `tabbedPane`  changeListener in `init()`.

--------------------------------------------------------------
--------------------------------------------------------------
#1563 Review Comments 1:
I think the comment is wrong here.

#1563 Review Comments 2:
Rename to "Go to parent"?

#1563 Review Comments 3:
rename checkUrl

#1563 Review Comments 4:
Inline documentListener?

#1563 Review Comments 5:
just use getEntryByKey(key) != null.
By the way, I would welcome if you could change the return type of getEntryByKey to optional.

#1563 Review Comments 6:
Yes, a bit of copy paste coding, like checkURL...

I'll sort it out. "Go to parent" may be a better name, but I wasn't sure
how well defined "parent" actually is here and somehow what happens is that
the parent entry is selected. And couldn't figure out a good translation to
Swedish...

Another issue is that the button is enabled when the entry editor is
enabled. At least for new entries... Once something is typed it works
though. Guess one should try to trigger the documentListener once, but
didn't figure out how...

#1563 Review Comments 7:
My code checking tool already complains that the anonymous class is too
long. :-)

But, yes, could indeed be done.

#1563 Review Comments 8:
After checking that code I decided to write this method. I think it will be
noticeable on large databases. (getEntryByName always goes through the
whole database and returns the last entry with that key).

I was thinking about the optional thing though. :-)

#1563 Review Comments 9:
In that step you could make a lamdba from it...

#1563 Review Comments 10:
I'm not sure if I understand how. As I recall, lambda are only usable if there is a single method that is called? (Which there is, but through three different overridden methods.)

#1563 Review Comments 11:
Well, I think it is safe to change getEntryByKey to return the first entry with the key (instead of the last one). And if you at changing this method, then replace the comparison of hashcodes with real equals (like in getEntriesByKey)

#1563 Review Comments 12:
MIssed this comment, but getEntryByKeyOptional was introduced in #1568. It is an intermediate solution before figuring out the final conversion problem.

Makes sense to return the first, so I'll implement that later on tonight.

#1563 Review Comments 13:
Two-stage solution. Removed `containsEntryWithKey` here and will do the other changes in #1568.

--------------------------------------------------------------
#1562 Review Comments 1:
rename abstr -> abstract

#1562 Review Comments 2:
abstract is a Java keyword. ;-)

--------------------------------------------------------------
--------------------------------------------------------------
#1560 Review Comments 1:
Could you change your commit that these added spaces go away? :innocent: 

#1560 Review Comments 2:
see above :innocent: 

#1560 Review Comments 3:
This can be removed as it does not provide any additional information.

OK for me to move such a util class to here. As The DbImportAction will be gone soon (see #1451), this dependency on spin will go, too. :tada: 

#1560 Review Comments 4:
I do not understand why they show up... If you see some of my other PRs
these spaces are actually removed...

I'll fix these things and merge.

--------------------------------------------------------------
#1559 Review Comments 1:
I don't think, we need a changelog entry here, because the issue was introduced in the dev version.

#1559 Review Comments 2:
how much effort would it be to create a test case? :innocent: 
- set marking in the prefs to true
- Import an entry
- check if the entry is marked

#1559 Review Comments 3:
I do actually not think so. It was introduced March 25, so it is (should be) in both 3.3 and 3.4...

#1559 Review Comments 4:
I considered that, but I'm not really sure how to import something from code...

#1559 Review Comments 5:
@oscargus: Have a look at `test.java.net.sf.jabref.importer.*`. Thanks to @JabRef/stupro, we have a lot of tests for the importers. Ideally, you should just be able to extend one of the existing importer tests.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1555 Review Comments 1:
final

#1555 Review Comments 2:
I think the UpdateDialog also has some actions which might be replaced by this one.

#1555 Review Comments 3:
No. Only the `JabRefDesktop.openBrowserShowPopup(...)` method is used there - but not by an `AbstractAction` (which is used for menus and icon bars only).

--------------------------------------------------------------
#1552 Review Comments 1:
Could be optimized with Streams and anyMatch()
Or even better, you could directly compare the two collections: 
`ListA.stream().anyMatch(setB::contains)`

http://www.leveluplunch.com/java/examples/java-util-stream-find-match-example/

#1552 Review Comments 2:
Since this a rather performance-critical method, I decided to use the good old collections interface instead of having the stream overhead.

#1552 Review Comments 3:
Please document that decision in a comment 😇

#1552 Review Comments 4:
Ahh, reading the code makes the NPE a bit more understandable... Good to initialize the object... Still interesting that the earlier version worked though!

#1552 Review Comments 5:
Better to use the non-deprecated method getFieldOptional... ;-)

--------------------------------------------------------------
#1549 Review Comments 1:
This only disables the global search bar when the last database will be closed. But the search bar will be shown when one is starting jabref with no open database.

#1549 Review Comments 2:
I would remove this since the textfield already displays a search icon.

#1549 Review Comments 3:
good catch, I'll fix it quickly

#1549 Review Comments 4:
what happens if listener.contains(newListener) ? should't there be an else block with return? 

#1549 Review Comments 5:
There is, the logic is entirely the same as before, I just rearranged it (as I think it's  more understandable) and added the Builder pattern.

#1549 Review Comments 6:
Please use the `KeyBinding.CLEAR_SEARCH` key.

#1549 Review Comments 7:
I guess this only affects mac os x as it automatically adds a icon when you write
`
if (OS.OS_X) {
    searchField.putClientProperty("JTextField.variant", "search");
}
`

#1549 Review Comments 8:
`LOGGER.debug()` should be used to log error messages, here it seems more like a status update.

#1549 Review Comments 9:
Is it really necessary to display the found results in front of the search field? It takes up a lot of space in the toolbar and when having a small resoultion or small screen it might not even be visible as shown below.
![screen shot 2016-07-05 at 14 28 16](https://cloud.githubusercontent.com/assets/15340757/16584748/cec164a0-42bd-11e6-9680-959aa41d1e66.png)

So why not update the status text at the very bottom of the main frame?

#1549 Review Comments 10:
Remove this line please.

#1549 Review Comments 11:
Please do not change the format of lines you didn't modify.

#1549 Review Comments 12:
Please rename the variable "ae", same goes for the other listeners named "l"

#1549 Review Comments 13:
Please rename variable.

#1549 Review Comments 14:
Can you find an icon for this as well? Toolbars shouldn't include buttons with large strings.

#1549 Review Comments 15:
Can you use icons for this as well?

#1549 Review Comments 16:
This will cause the toolbar to jump around when typing and clearing a search query. To fit the searchbar in the first row I need to use full screen mode and than there is no space to the right at all. So once I start typing the result text will be displayed and the searchbar jumps to the second row, when I clear the search it jumps back to the 1st row since the text is invisible. In my opinion the text with the number of found results should be somewhere else. 

#1549 Review Comments 17:
I've set the preffered size of the lable to 100px which contains the standard `Found X entries`-Message.

#1549 Review Comments 18:
Which shortcut?

#1549 Review Comments 19:
I set it to `strg+shift+f` which performs and opens the global search result dialog.

#1549 Review Comments 20:
This comment is now unnecessary, please remove it.

#1549 Review Comments 21:
I can't find good Icons for this.

#1549 Review Comments 22:
Why this addition? -> plz remove this line

#1549 Review Comments 23:
Remove from your changes, it is already there (line 54)

#1549 Review Comments 24:
Start with capital letter

#1549 Review Comments 25:
Remove the GPL header

#1549 Review Comments 26:
Merge with the previous line:

```
Optional<String> fieldOptional = bibEntry.getFieldOptional(field);
if (fieldOptional.isPresent()) {
   ... remaining code...
```

Then, you also don't need the check on line 56.

#1549 Review Comments 27:
Remove GPL header

#1549 Review Comments 28:
Remove GPL header

#1549 Review Comments 29:
Remove GPL header :innocent: 

#1549 Review Comments 30:
Or you can simply use:

```
bibEntry.getFieldOptional.ifPresent(field->  {
do stuff 
} );
```

Then the else would be not necessary, because it would automatically continue with the next entry

#1549 Review Comments 31:
I don't know where it exactly is used, but we already have a resource for `Search_globally=Search_globally`
Think about if it could be used.

#1549 Review Comments 32:
Simpler: Use IconTheme.getImageIcon("IconName")

#1549 Review Comments 33:
I think the braces after URL_COL can be removed. Looks weird.

#1549 Review Comments 34:
Some devs don't like this for each version, so please use the old one.

#1549 Review Comments 35:
You could simpler use streams: `isHitSelected = selectedEntries.stream().anyMatch(  condtion )`

#1549 Review Comments 36:
They are there to define the scope for the `width` variable which are both in `DATABASE_COL` and `default`.

#1549 Review Comments 37:
What exactly is the reason that they do not like the new version?

#1549 Review Comments 38:
This applies only to the for each, because it's harder to debug. We had a discussion about it once. @koppor 

#1549 Review Comments 39:
Must have overlooked it while rebasing.
fixed

#1549 Review Comments 40:
Must have overlooked it while rebasing.
fixed

#1549 Review Comments 41:
fixed

#1549 Review Comments 42:
fixed

#1549 Review Comments 43:
fixed

#1549 Review Comments 44:
fixed

#1549 Review Comments 45:
fixed

#1549 Review Comments 46:
fixed

#1549 Review Comments 47:
fixed

#1549 Review Comments 48:
done

#1549 Review Comments 49:
fixed

#1549 Review Comments 50:
The lambda is not possible b/c of the `return` (or is it?).

#1549 Review Comments 51:
Can you please add a comment here about the css names? `earth` and `earth-off`

Will make it easier if they start moving the icons around in the font...

#1549 Review Comments 52:
done

#1549 Review Comments 53:
fix typos `user`, `maintable`

#1549 Review Comments 54:
Keyboard shortcuts should be rendered consistenly without space before and after `+`

#1549 Review Comments 55:
Would you mind not adding an empty line to prevent merge conflicts?

#1549 Review Comments 56:
fixed

#1549 Review Comments 57:
fixed

--------------------------------------------------------------
#1548 Review Comments 1:
One liner: `doi.isPresent ? DOO.build(doi.get()) : Optional.empty()`

#1548 Review Comments 2:
What about using an `&&` here? `!os1.isPresent() && ! os2.isPresnet()`

#1548 Review Comments 3:
I like it the way it is.

#1548 Review Comments 4:
what happens if no title is present?

#1548 Review Comments 5:
Use the new DOI.build(Optional) method here?

#1548 Review Comments 6:
Better names pls

#1548 Review Comments 7:
Better names pls

#1548 Review Comments 8:
I don't like the optional parameter here.

#1548 Review Comments 9:
try to use ifPresent instead of isPresent and get if possible. 

#1548 Review Comments 10:
Optionals shall only be used as return values, never as parameters.

#1548 Review Comments 11:
I kind of like it here since it leads to a more fluid API. See also the discussion at http://stackoverflow.com/questions/31922866/why-should-java-8s-optional-not-be-used-in-arguments

#1548 Review Comments 12:
Better would be if you have an optional string to use `optionalString.flatMap(string -> DOI.build(string))` as this would then return an Optional<DOI>, and the code would only fire if there is a string. 

#1548 Review Comments 13:
I'm in general not that fond of the `?:` syntax.

#1548 Review Comments 14:
One would still need three if-clauses:

`!os1.isPresent() && !os2.isPresent()` => `EMPTY_IN_BOTH`
`!os1.isPresent()`  => `EMPTY_IN_ONE`
`!os2.isPresent()`  => `EMPTY_IN_TWO`

Not sure which one is more readable.

#1548 Review Comments 15:
Me neither, but at the moment it looked like the better option (compared to blindly doing `get()` or explicitly adding `ifPresent()`). I realized another one now though.

#1548 Review Comments 16:
Yes, you are correct. A bit lazy there...

#1548 Review Comments 17:
Here it is not actually not possible.

#1548 Review Comments 18:
Even better:
`optionalString.flatMap(DOI::build)`
;-)

#1548 Review Comments 19:
Here I think the API simplification is so useful that I still use the Optional.

#1548 Review Comments 20:
I think the name of the parameter already states that one shouldn't use an optional here? Why should a newValue be optional?

#1548 Review Comments 21:
Well, I can of course add an `.orElse(null)`, but somehow it seems to remove the idea of `Optional` if every `getField()` is simply replaced with `getFieldOptional().orElse(null)`... 

#1548 Review Comments 22:
import model namespace?

#1548 Review Comments 23:
I also prefer that, but I am quite sure that someone else did indeed change it to look like this...

#1548 Review Comments 24:
Just use an import.

--------------------------------------------------------------
#1546 Review Comments 1:
Just an idea: Maps etc support Streams with Lambdas, too.
http://www.mkyong.com/java8/java-8-filter-a-map-examples/

#1546 Review Comments 2:
Out of my league at the moment, but most likely a good idea! :-)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1541 Review Comments 1:
Why did this change?

#1541 Review Comments 2:
Can you parameterize this with generics?

#1541 Review Comments 3:
Remove empty line

#1541 Review Comments 4:
If I click on an item in the list (without giving the focus to the list before), is then the clicked item selected or the first one?

#1541 Review Comments 5:
The clicked item is selected since the selection value is no longer null. I tested it to be sure.

--------------------------------------------------------------
#1539 Review Comments 1:
Since you are touching that code anyway: How about refactoring the names here according to Java code conventions? `m_name` -> `mName`. What does the `m` stand for, btw?

#1539 Review Comments 2:
You marked this method as deprecated above. Why are you still using it in new code?

#1539 Review Comments 3:
Shouldn't the preferences setting go into a `@BeforeClass`-annotated method? Or do you need this for every test?

#1539 Review Comments 4:
Once the other method is no longer used it can be inlined (or at least made private).

#1539 Review Comments 5:
It would also work with @BeforClass but I like to have only one setup method.

#1539 Review Comments 6:
Done.

#1539 Review Comments 7:
I would use a separate `@BeforeClass` method to distinguish code that is required only once, from code that is required to be executed for every test.

#1539 Review Comments 8:
what does sg stand for?

#1539 Review Comments 9:
searchGroup, I would make an exception here for the general rule of no abbreviations since `searchGroupRegualarExpressionCheckBox` is a bit to big ;)

#1539 Review Comments 10:
Not convinced. As `sg` is not really that common. Why not searchGroupRegExCheckBox?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1532 Review Comments 1:
I'm not sure if this is correct because of symmetry reasons?

#1532 Review Comments 2:
@koppor No need to extract the parameter into a variable `versionText` in these tests, right?

#1532 Review Comments 3:
@koppor Duplicates test above.

#1532 Review Comments 4:
@koppor duplicates test above but with opposite assertion. As outlined above, I think it is better to have unknown > valid versions since otherwise we developers constantly get "new update" notifications on startup. 

#1532 Review Comments 5:
Fixed

#1532 Review Comments 6:
Didn't we say that we want to have a single assert statement per test case and avoid multiple assert statements? Therefore, I duplicated the tests.

#1532 Review Comments 7:
Leftover from my parallel work :innocent:. Removed.

#1532 Review Comments 8:
Can you add `"${version}".equals(version)` as another disjunction?

When you compile the code without gradle (like directly in eclipse or IntelliJ IDEA) the versionnumber is not set (as it is set within the gradle processResources task) and `${version}` will be read in which will currently lead to an error.

#1532 Review Comments 9:
That was the quick fix I applied in parallel to the work of @tobiasdiez. He used exception handling at parsing to treat all kinds of errors. Please also note that testing for `${version}` has been added to the test cases: https://github.com/JabRef/jabref/pull/1532/files/8b14b0bb0c4b9c2069e4c81611ef9c33fccc8904#diff-6d5e38b382ea230b7f2b6184d9bcac76R35

--------------------------------------------------------------
--------------------------------------------------------------
#1526 Review Comments 1:
Try using  a lambda for the callback, makes the code more readable:
http://stackoverflow.com/questions/23978676/convert-callback-into-java-8-lambda-expression

Please use more speaking  variable names for s and b, for example like here:
http://code.makery.ch/blog/javafx-8-tableview-cell-renderer/

#1526 Review Comments 2:
Please use the nio Paths.get method 

#1526 Review Comments 3:
As mentioned above, please use nio methods 

#1526 Review Comments 4:
Why not simply use a Set?
No need for checking duplicates, as a Set implicitly ignores duplicates 

#1526 Review Comments 5:
see above, try using a set

#1526 Review Comments 6:
I used the list as I wanted to have the elements in an order and I can't find a `SortedSetProperty`

#1526 Review Comments 7:
https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashSet.html ?

#1526 Review Comments 8:
But there exists no Property for it which is needed in order to use the bindings.

#1526 Review Comments 9:
You could try the `SortedList`
Here is a quick example I found:
http://code.makery.ch/blog/javafx-8-tableview-sorting-filtering/

#1526 Review Comments 10:
You could simply use `Paths.get(filePath)` this is a shorthand for the FileSystems.getDefault...

What are you trying to do here? I do not understand the Replace stuff...  In case you are trying to escape sth like Slashes, that is absolutely not necessary, as the Path methods are able to handle both relative and absolute.
Have a look here for some examples
https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html

#1526 Review Comments 11:
Simpler: `Objects.equals(Object,Object)`

#1526 Review Comments 12:
Simpler:
`return Objects.hash(...)`

#1526 Review Comments 13:
The idea was indeed to escape the backslashes for windows systems...but thanks for the tip

#1526 Review Comments 14:
Could you add for all classes, that you've added, a short comment?

#1526 Review Comments 15:
please add short comment

#1526 Review Comments 16:
could you just use a explicity value instead of size +1?

#1526 Review Comments 17:
could you in general try to split up the test methods into more test methods? 

#1526 Review Comments 18:
is this really needed ? When can this be null?

#1526 Review Comments 19:
remove this unnecessary empty lines in the comments.

#1526 Review Comments 20:
remove empty line

#1526 Review Comments 21:
why don't put the if-statements together with `&&`? Then you have only one time `else { setGraphic(null) }`

#1526 Review Comments 22:
add an empty line here.

#1526 Review Comments 23:
else shouldn't be necessary here

#1526 Review Comments 24:
you can put the catch blocks together `FileNotFoundException | IOException e`  

#1526 Review Comments 25:
But I only need to call `setGraphic(null)` on two of the four if statements. However I can join the two if statements with no else block.

#1526 Review Comments 26:
I found out `FileNotFoundException` is even redundant if I catch the `IOException` first.

#1526 Review Comments 27:
Yes it is necessary because we have to call `setGraphic(null)` if the item to update is null. Otherwise we get some weird graphic bugs when switching from a custom list to a built in list since the graphics don't get reset.

![journalabb](https://cloud.githubusercontent.com/assets/15340757/17476618/31371e1e-5d61-11e6-92d3-621bf8192548.PNG)

#1526 Review Comments 28:
do not catch exception in tests, just throw them. In this case, you hide the exception from JUnit, and the user does not get the stack trace, only your short text.

#1526 Review Comments 29:
Make the different redesigned dialogs a sub-bullet of "Partly switched to ..."

#1526 Review Comments 30:
rename parameter "name"

#1526 Review Comments 31:
add suffix "ViewModel"

#1526 Review Comments 32:
Make path an `Optional<Path>`

#1526 Review Comments 33:
A NPE is thrown if this file is a built-in list.

#1526 Review Comments 34:
Maybe rename isPseudoFile -> isBuiltinList to better reflect what the actual purpose of this field is.

#1526 Review Comments 35:
This logic contains code which I would declare as "logic", namely how abbreviations are serialized. Please extract the code to a new method `writeAbbreviations(path, encoding?, List<Abbreviation>). This new method may life in`Abbrevation`or a new class`AbbrevationWriter`.

#1526 Review Comments 36:
Do we really want the user decide about the encoding? I would propose to always use UTF-8 if this works.

#1526 Review Comments 37:
This styling can't be done in FXML?

#1526 Review Comments 38:
JavaFX seems to have a new interface for background tasks: docs.oracle.com/javafx/2/threads/jfxpub-threads.htm
To be honest, I have no idea about its advantages/disadvantages. Could you pls do some research and maybe switch the code to `Task<...>`

#1526 Review Comments 39:
In the best case the viewModel also takes care of which item is selected (as usual through binding). Can you change this if it is not too hard.

#1526 Review Comments 40:
combine ifs

#1526 Review Comments 41:
Why is `isEditableAndRemovable` not part of the viewModel?

#1526 Review Comments 42:
Just notify the viewModel about the pressed key and let it decide what to do, i.e.
`if (event.getCode == KeyCode.DELETE) viewModel.deleteCurrentAbbreviation()` and the rest of the logic is in the viewModel.

#1526 Review Comments 43:
I really don't like these complicated cell factories...stupid javafx (not your fault and nothing to do 😺 )

#1526 Review Comments 44:
Remove negation from if statement and switch if and else blocks

#1526 Review Comments 45:
the braces are not necessary for one-line statements, i.e. `setOnMouseClicked(evt -> editAbbrevation)` is sufficient.

#1526 Review Comments 46:
Is it easy to change the icon class a bit so that you can write
`setGraphic(IconTheme.JabRefIcon.ADD.getGraphic())`?

#1526 Review Comments 47:
a bidirectional binding between `journalAbbreviationsTable.getSelectionModel().selectedItemProperty()` and `viewModel.currentFileProperty()` does not work?
This question also applies to the other listeners below.

#1526 Review Comments 48:
I would prefer if the disable property is bound to something in the viewmodel

#1526 Review Comments 49:
Localize "files", i.e. Localization.lang("%0 file", "TXT") + "(*.txt)"

#1526 Review Comments 50:
Again, in the best case all of this is handled by binding to the viewModel. (if it is not too difficult)

#1526 Review Comments 51:
Can these two set-lines also be moved to `viewModel.addAbbreviation`? Also localize the strings.

#1526 Review Comments 52:
I don't like that a generic `JabRefException` is thrown/catched.

#1526 Review Comments 53:
combine this into viewModel.saveEverthing() (or something like that) ?

#1526 Review Comments 54:
better names for arguments

#1526 Review Comments 55:
here too

#1526 Review Comments 56:
I stop here for now... (just a reminder for myself)

#1526 Review Comments 57:
I now moved them to subbullets and to ## JavaFX Changes

#1526 Review Comments 58:
done

#1526 Review Comments 59:
done

#1526 Review Comments 60:
done

#1526 Review Comments 61:
Now caught by `if (path.isPresent())` and if false, an appropriate `FileNotFoundException` is thrown

#1526 Review Comments 62:
done

#1526 Review Comments 63:
Extracted to new class AbbreviationWriter in logic package

#1526 Review Comments 64:
Changed to `StandardCharset.UTF_8`

#1526 Review Comments 65:
Hm I must have missed that somehow, yes it can (and now will) be done by fxml

#1526 Review Comments 66:
I extracted the methode to the viewmodel, the currently selected file is already bound.

#1526 Review Comments 67:
`Task` seems like a similar class as `Runnable`, while `Service` is the JavaFX equivalent to a `Thread` it seems. The JavaFX classes support continuous feedback of the state of the background task and work with data binding to show a progress bar for the current status. `Service` can only be run from the JavaFX Application `Thread`. Unlike Threads they can also be restarted multiple times and you can add event handlers if the execution was successfull/stopped/unsuccessfull/etc.

In this particular scenario it shouldn't matter though. For the moment I changed it to a `Task` running in a `Thread` but `Thread` and `Service` are easily interchangable if needed.

#1526 Review Comments 68:
done

#1526 Review Comments 69:
Good point I will try to move it

#1526 Review Comments 70:
done

#1526 Review Comments 71:
done

#1526 Review Comments 72:
done in all cases

#1526 Review Comments 73:
Created a new method in `JabRefIcon` class

#1526 Review Comments 74:
I will look into this

#1526 Review Comments 75:
I think the disable property is readonly for ui elements, therefore it can not be bound to other properties.

#1526 Review Comments 76:
Changed it, but the console says:

>  could not get message translation for "%0 file" for locale en

#1526 Review Comments 77:
The selection is already bound to the view model, unfortunately the table view doesn't automatically scroll to the selected row...maybe the `scrollTo()` call can be moved to the property listener of the current abbreviation property to always scroll if the current abbreviation changes.

#1526 Review Comments 78:
Yes I will change it tomorrow, the test also have to be adjusted then.

#1526 Review Comments 79:
I introduced three new Exception extending JabRefException in net.sf.jabref.logic.journals:
`DuplicatedJournalAbbreviationException`, `DuplicatedJournalFileException` and `EmptyFieldException`

#1526 Review Comments 80:
changed it

#1526 Review Comments 81:
done

#1526 Review Comments 82:
also done

#1526 Review Comments 83:
Thanks for doing the research. Can you please add the first paragraph to the Wiki?

#1526 Review Comments 84:
Should work after master is merged into JavaFX.

#1526 Review Comments 85:
Have a look at the new FileExtensions Enum I created in #1336. Already inlcudes the Loalization.

#1526 Review Comments 86:
Just realised there are two properties, disbaledProperty is read only the other one can be bound

#1526 Review Comments 87:
Moving the call of `scrollTo()` to the current abbreviation property listener means the view will always scroll so the selected row is the first row in the visible view of rows. This means if if I select a row in the middle of the view it will still scroll so the selected row is the first row. Therefore I would rather leave it like this.

#1526 Review Comments 88:
`journalAbbreviationsTable.getSelectionModel().selectedItemProperty()` is read only and can therefore not be bound. The `journalAbbreviationsTable.itemsProperty()` is a `ObjectProperty<ObservableList<AbbreviationViewModel>>` which unfortunately can not be bound to my `SimpleListProperty<AbbreviationsFileViewModel>`.

#1526 Review Comments 89:
Should I add it as a new chapter in the Code HowTos as something like "Working with Threads"?

#1526 Review Comments 90:
ok that is fine with me

#1526 Review Comments 91:
According to http://stackoverflow.com/questions/32349660/how-to-bidirectionally-bind-to-a-property-of-an-object-set-to-the-selected-item there should be a way to bind it using https://github.com/TomasMikula/EasyBind. This library seems really nice and thus I'm in favor of integrating it (if the stackoverflow answer is correct and it indeed works). 

#1526 Review Comments 92:
Ignore my comment above, the lists can actually be bound without an extra library as I just found out when playing around with the EasyBind Library... :expressionless:
But I don't think `journalAbbreviationsTable.getSelectionModel().selectedItemProperty().addListener(...`  and similar can be replaced.

#1526 Review Comments 93:
I think the stream interface is more readable here, i.e. something along the lines `abbreviations.stream().filter( !isPseudoAbbreviation).map( getAbbreviationObject).collect()`.

#1526 Review Comments 94:
Be careful. The path may be an empty optional. I would propose to change the return value to Optional<String> and write `return path.map(toAbsolutePath().toString());`

#1526 Review Comments 95:
Remove this merge marker, also applies to other language files

#1526 Review Comments 96:
We are trying to reduce the occurrences of `Globals.prefs`. Thus I would like to see that the view model is independent on `Globals.prefs`. At least inject a JabRefPrefences class as a dependency and work on this class. Probably better it is to just work on an injected `JournalAbbreviationPreferences`. @oscargus does it make sense to introduce a field in `JournalAbbreviationPreferences` corresponding to `EXTERNAL_JOURNAL_LISTS`?

#1526 Review Comments 97:
Remove the `java.util` part by using the proper import.

#1526 Review Comments 98:
Don't catch this exception here. If something goes wrong with the initialization, the tests should better fail.

#1526 Review Comments 99:
probably a better name: `addFilesToViewModel`

#1526 Review Comments 100:
I think you test two things here: files are read properly from the preferences and that duplicate entries are removed. -> make it two tests.

In general, as soon as you need to write comments in your tests, this is a good hint that the tests are getting to complex. Maybe the setup is to complicated (move to setup method or special init helper method) or you are testing too much. 

#1526 Review Comments 101:
please rename the tests so that they reflect what you are testing. here `addFileIncreasesCounterOfOpenFiles`

#1526 Review Comments 102:
You are starting with an empty viewModel and so size == 0, right? In this case just remove the size variable.

#1526 Review Comments 103:
size is always 1, so use hard-coded value.

#1526 Review Comments 104:
4?

#1526 Review Comments 105:
again remove size variable

#1526 Review Comments 106:
use map function, `viewModel.getAbbrevations().stream().map(getAbbrevaitonObject).collect()`

#1526 Review Comments 107:
see above

#1526 Review Comments 108:
again size variable, remove it everywhere pls

#1526 Review Comments 109:
no assertion?

#1526 Review Comments 110:
But the important thing here is that the files are getting saved to the preferences..maybe I change it to `addFourTestFileToViewModelAndPreferences`.

--------------------------------------------------------------
#1525 Review Comments 1:
"is now consistent"

#1525 Review Comments 2:
Why was that removed?

#1525 Review Comments 3:
Where does one find information (help page / blog post / ...) about what was changed and how the hotkeys are configured now?

#1525 Review Comments 4:
This change is not shown at your overview https://github.com/JabRef/jabref/pull/1525#issue-162928053

Furthermore, `p` sounds more like **p**reamble than `s`.. Why was it changed?

Furthermore, `alt`\+ letter is more accessing menus. What if the menu shortcut in some other language is `s`?

#1525 Review Comments 5:
Why not `F5` any more? Maybe you should really write a blog post to motivate your changes.

#1525 Review Comments 6:
The thin is called [LibreOffice](https://www.libreoffice.org/). Maybe use "Open/libre office connection". Have a look how it is handled in other places in JabRef.

#1525 Review Comments 7:
"OpenOffice/LibreOffice" is the currently used "name", so "OpenOffice/LibreOffice connection" is available as a translation string already.

#1525 Review Comments 8:
I wanted to add the Information when everything was finalized, do you think i should add it beforehand?

#1525 Review Comments 9:
@tobiasdiez suggested this change because i quote: 

> Remove default Toggle Toolbar shortcut  (can't imagine that this is useful for somebody, I would leave alt + num for toggling real panes)

#1525 Review Comments 10:
I have to agree with you, I'll revert that change. To be honost I don't remember why that was changed.

#1525 Review Comments 11:
We changed that so that all the sidepanes can be opened with `alt + Numberkey`, I think a blogpost is a good idea but I would wait untill the Github disucssion is over and eveeryone is in agreement.

#1525 Review Comments 12:
as @oscargus already mentioned `OpenOffice/LibreOffice` is the current used name, you can look that up in e.g. `JabRef_en.proberties`, hence I would change that name accordingly. Do you agree @koppor ? 

Edit: My suggestion is  changing:
`Open_office/libre_connection=Open_office/libre_connection`
into:
`Open_OpenOffice/LibreOffice_connection=Open_OpenOffice/LibreOffice_connection`

#1525 Review Comments 13:
Is it possible to throw a more specific exception? Probably there are some other implentations of the BaseAtion which have to be checked, too. 
If not then I would recommend to at least change it to Exception in call cases.

#1525 Review Comments 14:
Sorry I don't understand what you want to say. What do you mean by "call cases"?

#1525 Review Comments 15:
I checked some other implementations for `BaseAction`. The majority doesn't throw an excpetion. Some do throw `Throwable` or a specified exception.

#1525 Review Comments 16:
Throwing a throwable is usually a bad idea:
http://stackoverflow.com/questions/12564428/is-throws-throwable-good-practice
Change throwable to Exception, if no more specific exception is avaiable.

#1525 Review Comments 17:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1517 Review Comments 1:
No need to test for `!= null` since with #1487 this case is excluded by a test case (we have to wait with merging this in until #1487). Better test for emptyness.

#1517 Review Comments 2:
No need for == null

#1517 Review Comments 3:
Add comma and space after each extension? otherwise we get `*.bib*.txt`, right?

#1517 Review Comments 4:
Since almost no `ImportFormat` currently has this method implemented (asfaik only two have) it is.
If I remove this check this method will fail and won't update its view.

#1517 Review Comments 5:
I know, but your colleagues implemented `getExtensions` for all importers and activated the corresponding test in #1487. Hence we will merge #1487 first and then this PR (without the null checks)

#1517 Review Comments 6:
Please move to "Changed" section as this is no bugfix.

#1517 Review Comments 7:
Use new lines at the end of the files, please

#1517 Review Comments 8:
I would create these mocks in the corresponding test. As it is always a little bit annoying if the before part initializes a lot of different things, but the tests use always their own subset. In that case, you have a 1-1 relation between test and your mock classes. 

#1517 Review Comments 9:
fixed

#1517 Review Comments 10:
fixed

#1517 Review Comments 11:
Could you pls use Mockito for mocking the ImportFormat. This is more readable. (Just create a new small PR)

--------------------------------------------------------------
#1511 Review Comments 1:
Why don't you put that in the loop and simply do  
! keyword.equals.... ?

#1511 Review Comments 2:
Because then it could end up multiple times in the list.

#1511 Review Comments 3:
If you don't want keyword multiple times, then simply use a Set, which by default does not allow double values.
Then you could remove the check.

#1511 Review Comments 4:
Thanks for the tip. Now moved all the keyword-related stuff to sets instead of lists.

#1511 Review Comments 5:
Using a list was intentional to _preserve the order given by the user_. Is
that also possible by using a set? I fear that the ordering of the keywords
change when using another machine, JRE, ...

#1511 Review Comments 6:
LinkedHashSet also preserves the order.

#1511 Review Comments 7:
Set instead

--------------------------------------------------------------
#1501 Review Comments 1:
hashCode should not be tested

#1501 Review Comments 2:
I think testing a single importer suffices. Can you remove the other two?

#1501 Review Comments 3:
Pls use constructor to set values.

#1501 Review Comments 4:
Just `throws Exception`

#1501 Review Comments 5:
This is identical to the production code; change the expected assertion to something hard coded or remove it.

#1501 Review Comments 6:
Same as remark for testGetBasePathUrl

#1501 Review Comments 7:
Again, test against hard-coded values. So the best is probably to create a few private variables in `setUp` which you can use to test against.

#1501 Review Comments 8:
Only one assertion per test; also more descriptive test name, e.g `equalsReturnsTrueIf ...`. This is even described in the wiki...https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases

#1501 Review Comments 9:
Again: only one assertion per test

#1501 Review Comments 10:
Add constructor in CustomImport which wraps around an importer and use it everywhere.

#1501 Review Comments 11:
why do you need this variable ? Why not just assertTrue(importer......) ? Also test isn't a good name for it.

#1501 Review Comments 12:
same as above

#1501 Review Comments 13:
Hm, I'm not sure if you need this test case. In general it is the same as compareToSmaller. Is there any reason to keep it? 

#1501 Review Comments 14:
Split in two test cases. TestListConstructor and testImporterConstructor or something like that. Also don't use copac.getFormatName(), use the value. Also for the others.

#1501 Review Comments 15:
Because otherwise codacy wants me to use assertEquals(). But I want to test equals() from CustomImporter. not the normal equals().

#1501 Review Comments 16:
assertEquals relies upon the equals Method of the objects under test.

#1501 Review Comments 17:
Please call one of the other constructors instead of setting each variable here .

#1501 Review Comments 18:
Can't this replaced by equals? Also I think `equals` needs a rework, it only checks for the type of `CustomImporter` and its name.

#1501 Review Comments 19:
Either remove this, or add a @SuppressWarnings("SelfComparison"),  becaue ErrorProne will mark this as error in a newer version.
http://errorprone.info/bugpattern/SelfComparison

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1487 Review Comments 1:
Can you check whether there is an other source for the endnote format?

#1487 Review Comments 2:
if its also for inspec and medline, then .txt should also be an extension, shouldn't it? 

#1487 Review Comments 3:
Can this be declared as private or protected?

#1487 Review Comments 4:
extract the list as a field. Otherwise, everytime when the method is called, a list is initalized. You can extract the add also if you use Arrays.asList()

#1487 Review Comments 5:
extract list as a field (see above).

#1487 Review Comments 6:
extract list (see above)

#1487 Review Comments 7:
Have a look at the link for the MedlinePlainImporter, where the elements are described, then you will also find a link fpr the medline xml format. This link could be added here.

#1487 Review Comments 8:
add a link here.

#1487 Review Comments 9:
I think you can guess which extension should be here;)

#1487 Review Comments 10:
Why have you changed this? Why have you not kept the link?

#1487 Review Comments 11:
just compare the lists (in every test case).

#1487 Review Comments 12:
see above

#1487 Review Comments 13:
use arrays.asList

#1487 Review Comments 14:
use arrays.asList or Collections.singletonList( in every test case)

#1487 Review Comments 15:
line break

#1487 Review Comments 16:
that's the wrong link, you need the link for the [xml elements](https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html).

#1487 Review Comments 17:
do the todo :smile: 

#1487 Review Comments 18:
Pls don't use test-related stuff in the original class.

#1487 Review Comments 19:
No need for these tests for getExtensions and getDescription... you are just repeating static values here.

#1487 Review Comments 20:
I think, everything accessible by others should be tested, even though though the tests feel dump. Reason: We are trying to increase code coverage and these tests increase it, too.

#1487 Review Comments 21:
I like the bottomline `Test everything that could possibly break` of http://programmers.stackexchange.com/a/130926. 
But since these tests are already in place, we can leave them there. 

#1487 Review Comments 22:
Why the additonal `<p>`?

#1487 Review Comments 23:
Why the removed indent?

#1487 Review Comments 24:
Just use assertEquals(extensions, importer.getExtensions()) instead.

#1487 Review Comments 25:
OK for @JabRef/developers, but in the future, a small reasoning should be kept or the @JabRef/stupro-qa  comment should be deleted.

#1487 Review Comments 26:
I guess it happened due to reformatting the code in IntelliJ.

--------------------------------------------------------------
--------------------------------------------------------------
#1483 Review Comments 1:
Unnecessary comment in my opinion. Doesn't matter for which issue this test is. The test covers the old problem.

#1483 Review Comments 2:
See above.

#1483 Review Comments 3:
Why is this moved? I think it fits more into the group itself which carries around the search rule. Maybe this should even be moved to a search matcher?

#1483 Review Comments 4:
The (Abstract)Group does not know where it is sitting in the group tree but the GroupTreeNode does. But the position in the tree might influence the search result (since we support refining / independent / ... search modes)

#1483 Review Comments 5:
Ah  ok, the getSearchRule is automatically adjusting to the position in the group tree? Then this make sense. 

--------------------------------------------------------------
#1480 Review Comments 1:
put the pattern to the other patterns. Also you should have an order, so that final variables come first, then an empty line and then the patterns.

#1480 Review Comments 2:
change f to file. Those abbreviations are misleading.

#1480 Review Comments 3:
ce -> compoundEdit

#1480 Review Comments 4:
pan-> panel

#1480 Review Comments 5:
what is with marker and pattern? maybe you could also describe very short what marker and pattern are

#1480 Review Comments 6:
ind -> index or indexOfMarker

#1480 Review Comments 7:
m-> matcher

#1480 Review Comments 8:
For what stands pText? Maybe pageText?

#1480 Review Comments 9:
remove this comment

#1480 Review Comments 10:
mm-> monthMatcher

#1480 Review Comments 11:
be-> bibEntry

#1480 Review Comments 12:
Either you remove this comment or you describe what a problem it was, since the link isn't working

#1480 Review Comments 13:
remove out commented code

#1480 Review Comments 14:
jo-> jsonObject

#1480 Review Comments 15:
Order variables. ALL patterns together, then other static final variables and then empty line and variable piv

#1480 Review Comments 16:
remove one empty line

#1480 Review Comments 17:
remove emptyline

#1480 Review Comments 18:
put to other final static String variables

#1480 Review Comments 19:
why this comment? I think that can be removed

#1480 Review Comments 20:
This reads like code which should be placed into the logic, not in the UI

#1480 Review Comments 21:
This is also logic code.

--------------------------------------------------------------
#1479 Review Comments 1:
Typo

#1479 Review Comments 2:
Using `LOGGER.debug("Message", e)` writes the stacktrace to the error console with its stacktrace which could be useful to the user/developer to obtain more information. I would also directly notify the user by using `JabRefGUI.getMainFrame().output(Localization.lang("Error") + ": " + e.getLocalizedMessage());`

#1479 Review Comments 3:
Please rename

#1479 Review Comments 4:
Also cover multiple PMIDs in a single entry

#1479 Review Comments 5:
I would say rename it to `accessionNumbers` or `accessionNumberList` or `accessionNumbersList`. But since this applies to all auto generated files I don't know if it makes much sense to change it in all of the files.

#1479 Review Comments 6:
I think those comments are unnecessary.

#1479 Review Comments 7:
Can the names for the two lists be more specified?

#1479 Review Comments 8:
Please rename the Object

#1479 Review Comments 9:
Please rename the object.

#1479 Review Comments 10:
Why was this removed?

#1479 Review Comments 11:
Why wasn't this handled?

#1479 Review Comments 12:
Remove surrounding `[]`

#1479 Review Comments 13:
Without Springer

#1479 Review Comments 14:
Just to test the case, that PubMedArticleSet doesn't appear in a file.

#1479 Review Comments 15:
I weren't sure how to handle this. I thought that the PMID with the highest version should be added, since it is the newest version. Should the PMID with Version = 1 also be added? For example as pmid-version1? 

#1479 Review Comments 16:
Don't get the importer an OutputPrinter passed? That should be used instead
of directly communicating with the UI. Reason: Usage of JabRef in the
command line without UI

#1479 Review Comments 17:
The whole package is auto generated (isn't it?) -- the generation (based on
the XSD) should be triggered during the build and the source reside in
...gen... (similar to the ANTLR grammar)

#1479 Review Comments 18:
done.

#1479 Review Comments 19:
done.

#1479 Review Comments 20:
This needs to be executed at runtime, not during configuration time. Please have a look at the gradle documentation.

#1479 Review Comments 21:
could all this be extracted into a separate gradle file which we import? Similar to the eclipse stuff?

#1479 Review Comments 22:
Can you use a typed JAXBContext by passing the XXX.class, with XXX being the one with the `@XmlRootElement`?

#1479 Review Comments 23:
I would use `net.sf.jabref.importer.fileformat.medline`. 
Reasons:
-  Consistency with our ANTLR generation, which generates `src/main/gen/net/sf/jabref/bst/`. 
- The common prefix `generated` does not indicate anyhting about medline. What if other XSDs will be generated?

Alternatively, use a combinded solution: `net.sf.jabref.importer.fileformat.medline.generated`.

#1479 Review Comments 24:
It seems that PubmedBookArticle is another possibilty. This seems to be untested. Why?

#1479 Review Comments 25:
Keywords should be joined with the configured at `net.sf.jabref.JabRefPreferences.KEYWORD_SEPARATOR`. Also applies for line 278

#1479 Review Comments 26:
Why is this untested?

#1479 Review Comments 27:
Why did you change the test case?

Where does `MedlineImporterTestArticleID.xml` come from?

I think, you should NEVER change a REAL test input file coming from an external source.

#1479 Review Comments 28:
Remove surrounding brackes looks like a util method, and should maybe go into the StringUtil class?

#1479 Review Comments 29:
In the StringUtil class there is also a similar method for the curly braces.

#1479 Review Comments 30:
There is also RemoveBracesFormatter which does a similar job (and is a bit more intelligent, I think). For example your code turns `[te[st]` into `test` and not `te[st`.

#1479 Review Comments 31:
Shouldn't that be the same? 

#1479 Review Comments 32:
I'm not sure from where the xml file comes. This file was made in an earlier pull request by @mairdl.
But like it was before, the document wasn't parsed, because it wasn't even well formed (closing tag, but no opening tag). That's why I changed it.

#1479 Review Comments 33:
Why not adding a second test case? - Modified test files always cause a strange feeling

#1479 Review Comments 34:
The latest one is OK. I just forgot that agreement.

#1479 Review Comments 35:
Declare result variable here, not out of the loop

#1479 Review Comments 36:
Why was the complete test case changed? Can't the old test case be kept and an additional test case be added?

#1479 Review Comments 37:
Why isn't `-` used as separator? See also https://xkcd.com/1179/ and #1575

#1479 Review Comments 38:
Maybe String.format can be used to construct the string?

#1479 Review Comments 39:
No need for the comment here. I think it's more confusing than helping.

#1479 Review Comments 40:
make this static. Not sure, whether `Joiner.on(string).join(list)` should be just inlined as this is a oneliner.

#1479 Review Comments 41:
Not sure whether the "pattern" from the other methods should be used. `List` and `Joiner.join(list)`

#1479 Review Comments 42:
combine these two exeptions by `JAXBException | XMLStreamExeption e`

#1479 Review Comments 43:
I rather would discard assembling a String here Use some kind of Date Object and then use a toString method. Have a look at #1575, there were  introduced some new methods regarding Dates, 

#1479 Review Comments 44:
I would suggest renaming it, to make it more clear:_
putIfValueNotNull
Otherwise it could be confused with the jjava standard method putIfAbsent 

#1479 Review Comments 45:
I am not sure, but isn't there somewhere an Enum with all kind of BibTex/BibLatex fields?

#1479 Review Comments 46:
Hm, I could also use the  [SimpleDateFormat](http://stackoverflow.com/questions/882420/parse-string-to-date-with-different-format-in-java) in combinition with the EasyDateFormat. Then I can construct a date object with SimpleDateFormat and then get the date as String with the EasyDateFormat.getDateAt(...) method. Did you mean something like that? 

Also should I use this for the other dates as well ? 

#1479 Review Comments 47:
I'm not sure how I could use this here. I have a  list of Serializable and have to check if some of them is an instance of String and then I can add them to the result String.  
I had to do something like this `fields.put(medlineKey, join("", (List<String>) contentList);`. But I cannot cast a Serializiablle list to a String list.

#1479 Review Comments 48:
Kind of. But don't use SimpleDateFormat, as it was not threadsafe and got eplaced wiht a new Date and Time api in Java8. See Example 18 from this link:
http://javarevisited.blogspot.de/2015/03/20-examples-of-date-and-time-api-from-Java8.html

What exactly do you store in the ContributionDate and the other Date-Objects? The pattern?

#1479 Review Comments 49:
Since the parts are in separate Strings(?) already I think it is OK to concatenate. If they where ints it might have been a different thing. But I also think that - is a better separator.

#1479 Review Comments 50:
I just have the value of the year, month and the day as Strings in the Date-objects. In the xml it looks like this: 
`<year>2012<year>
<month>12<month>
<day>05<day>`
and I can use getYear(), getMonth(), getDay() to get them as separate Strings and I want to put them together as one date (as String). 

#1479 Review Comments 51:
Okay, then do what @koppor  suggested. Use a String.Format. Simplest solution. ;)

#1479 Review Comments 52:
We only have net.sf.jabref.model.entry.BibtexEntryTypes and `net.sf.jabref.Globals.FILE_FIELD`, but we want to get rid of Globals. Thus, there is none and it is OK to use the Strings as literals even though typos might occur.

#1479 Review Comments 53:
In #1579 we discussed this, and we aim to create a class with all the field names as constants in the model.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1472 Review Comments 1:
Maybe use the lambda version: ifPresent

#1472 Review Comments 2:
I think this is double code: First you check ! present and then you check the same with ifPresent..

#1472 Review Comments 3:
Maybe use optional?

#1472 Review Comments 4:
First: Why Object? And second: Better use getOrDefault, avoids the null check

#1472 Review Comments 5:
I would suggest making that a field, e.g. Writer writer and use that everywhere instead of getWriter()
Improves readability

#1472 Review Comments 6:
Use nio Path method above.

#1472 Review Comments 7:
Use nio methods 
e.g. File.exist
and  sth like Path.get(path, name, backup Extension)

#1472 Review Comments 8:
Use Files.copy...

#1472 Review Comments 9:
Paths.get

#1472 Review Comments 10:
same as above, Paths.,get

#1472 Review Comments 11:
Is the close necessary? When you use a try with resource (Autocloseable), normally all Streams are closed and freed

#1472 Review Comments 12:
You can use the apache commons StringUtil method for this

#1472 Review Comments 13:
Why did you remove all specific Exceptions?
Better let it throw the most specific exception. Otherwise stacktrace can be hard to find.

#1472 Review Comments 14:
Yeah, but I find the old-style version more readable.

#1472 Review Comments 15:
With a small difference: the first check is for `StandardType` (i.e. if it's a JabRef default type) and the second one a `KnownType` (i.e. standard or user-specfied).

#1472 Review Comments 16:
`requireNonNull` is even more appropriate, I think.

#1472 Review Comments 17:
Makes the tests more invariant under changes of the code-under-test. (and is default template for IntellliJ)

#1472 Review Comments 18:
indent?

#1472 Review Comments 19:
Optional only make sense if one uses ifPresent or map/flatMap. Otherwise, it does not really help that much, from my perspective, as one still requires an if check and a get, making it even more complicated to use instead of a null check and just using it.

--------------------------------------------------------------
#1471 Review Comments 1:
Change format of changelog entry to match the other ones.

#1471 Review Comments 2:
Idea: Move most of the code which determines the comment to `BibtexString.getUserComments` since in my opinion it is the responsibility of the BibtexString to store all the data in an accessible format.

Or even better: move it to the parser and just use `BibEntry.set/getUserComments()`. Otherwise the Writer (or BibEntry) has to know that comments are stored in the parsed serialization.
And then you can simplify some of the tests below and isolate parsing vs writing (instead of roundtrip tests). 

#1471 Review Comments 3:
Same as above: move to `BibEntry`

#1471 Review Comments 4:
the encoding "no" is missing in the new version

#1471 Review Comments 5:
Create expected bibentry and compare against it.

#1471 Review Comments 6:
Remove these asserts

#1471 Review Comments 7:
What happens to some random test in front of the entry? Bib(la)tex does not know the percentage symbol as a comment indicator... 

#1471 Review Comments 8:
Add test for entries starting on the same line as the comment, i.e. `some comment containing % and now the @article {...}`

#1471 Review Comments 9:
Also remove asserts here

#1471 Review Comments 10:
I don't like these files for round-trips. In my opinion it would suffice to add comments to `complex.bib` which already has round-trip tests (as integration test) and concentrate on unit test for the rest.

#1471 Review Comments 11:
Good idea, will do.

However, I am a little bit opposed to simplifying the roundtrip test. This is the discussion on whether we prefer unit over integration tests. We have been there before :)

#1471 Review Comments 12:
That does not matter for the test (so in a sense, I minimized the test ;-) ) Only the `ENCODING_PREFIX` is relevant. A line with it will be purged regardless of what encoding is set.

#1471 Review Comments 13:
I do not really understand your comment. The last line in the test method compares the expected serialization with the actual one: `assertEquals(bibtexEntry, entry.getParsedSerialization());`

#1471 Review Comments 14:
Why?

#1471 Review Comments 15:
This does not make a difference. Any non-whitespace text (except for the `ENCODING_PREFIX`) is treated as a comment. In a sense, the percentage sign here is a complete coincidence.

#1471 Review Comments 16:
As above: why?

#1471 Review Comments 17:
I tend to disagree. If I point all kinds of test to `complex.bib`, these tests are indirectly coupled to each other. I would rather like to keep them as separate as possible and that means separate files.

#1471 Review Comments 18:
I meant:

```
BibEntry expected = new BibEntry().withField("author", "Foo Bar).withField(.....)
assertEquals(Collections.singletonList(expected), entries)
```

#1471 Review Comments 19:
Since a test should only fail because of one reason (i.e. in the best case only one assert). This test should check if parsing -> writing yields the same string which was originally passed to it. Thus only the last assert is what you want. https://github.com/JabRef/jabref/pull/1471/files#diff-b4b7ca399d396eb3e62fc3416156c92aR437

#1471 Review Comments 20:
I think you missunderstood me. For complex.bib there are already round-trip tests in place. Thus you just need to modify `complex.bib` instead of writing a new round-trip test with a new bib file.

#1471 Review Comments 21:
The `withField` syntax is something new for me.

Anyway, this will not work here, unfortunately. The crucial part is the comment before the entry and this cannot be set as a field.

#1471 Review Comments 22:
I see. And `complex.bib` already has an epilog. That means the above test can simply be removed.

#1471 Review Comments 23:
Ok, I went through the class and removed all asserts I found redundant.

#1471 Review Comments 24:
Why is an install4j change part of this PR?

#1471 Review Comments 25:
I revert it later, sorry...

#1471 Review Comments 26:
This is now an exact copy of BibEntry.getUserComments right? Maybe add a superclass BibItem containing this method and then BibEntry and BibString derive from this superclass (maybe there is even more common code which could be extracted to the super class)

#1471 Review Comments 27:
This looks like an exact copy of https://github.com/JabRef/jabref/blob/304d2802162a7e75edda5fbc893666cc73efe669/src/test/java/net/sf/jabref/exporter/BibDatabaseWriterTest.java#L279

#1471 Review Comments 28:
So what you actually want to test is
assertEquals("% Some random comment that should stay here", entry.getUserComment());
right?

#1471 Review Comments 29:
Sorry to always slip into the role of your antagonist, but I am against creating a class hierarchy. In most cases, it makes the code harder to understand, and the code duplication savings are just not worth the effort. In addition, one has to adhere to the liskov substitution principle to create a good class hierarchy, but this is hard to do right. 

#1471 Review Comments 30:
No problem, having an experienced antagonist is probably the best way to learn something :smile: 

So now ignoring everything about the actual implementation and only speaking about "business objects": There are different items which can be contained in a bib file. For example `@Comments`, `@Strings` and normal bib entries. They all have a similar structure (e.g begin with `@`, followed by some identifier and then braces which surround the actual content) and all of them could have some text comments in front of them. Thus there is also a common behavior when it comes to parsing and writing.  
So how would my deer antagonist reflect this common structure and behavior in java code?

My idea would be: BibString, BibEntry, BibComment all derive from BibItem. BibItem has methods to parse and write at least the form `@something { abstract method to parse / write value }`. Then the writer just gets a list of BibItems and invokes the write method on them. Similarly the parser returns a list of BibItems while the parsing of every item was done in the subclass. But again...this idea somehow corresponds from a `service` implementation to a full-blown domain model....so yeah, maybe we should discuss this in the next dev call ;-)   

#1471 Review Comments 31:
Why did you removed this (suboptimal) assertions?

#1471 Review Comments 32:
assertEquals(Optional.of(BlaBla), entry.getFieldOptional("author"))

#1471 Review Comments 33:
Are you being serious? In this very same PR you asked me to reduce the number asserts as far as possible, aiming for one assertion per test. This is the reason.

#1471 Review Comments 34:
Implemented

--------------------------------------------------------------
#1470 Review Comments 1:
Please remove this comment. It's not relevant that this solved some issue.

#1470 Review Comments 2:
Why is there a else branch if it does nothing?

#1470 Review Comments 3:
Remove this comment. The test name should describe the use case.

#1470 Review Comments 4:
Same here: Remove hint to issue please.

#1470 Review Comments 5:
"Support separated names with colons" or something alike?

#1470 Review Comments 6:
separated

#1470 Review Comments 7:
separated

#1470 Review Comments 8:
why not describe the use case here? `allowConcatenationOfAuthorsWithCommas` or `testConcatenationOfAuthorsWithCommas` 

#1470 Review Comments 9:
Sourround the new block with

```
if (!value.containts(" and ")) {
```

#1470 Review Comments 10:
test also `{` as well as `;`

#1470 Review Comments 11:
For checking for  Curly Braces there is a String Util Method which also has
a Unit Test. Maybe you can reuse that.

2016-06-03 14:13 GMT+02:00 Tobias Diez notifications@github.com:

> In
> src/main/java/net/sf/jabref/logic/formatter/bibtexfields/NormalizeNamesFormatter.java
> https://github.com/JabRef/jabref/pull/1470#discussion_r65697196:
> 
> > @@ -36,6 +36,25 @@ public String getKey() {
> > 
> > ```
> >  @Override
> >  public String format(String value) {
> > ```
> > -        // Handle case names in order lastname, firstname and separated by ","
> 
> test also { as well as ;
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/JabRef/jabref/pull/1470/files/efdced6ec231b82f0f8e82a32a57a2f0fb454fb7#r65697196,
> or mute the thread
> https://github.com/notifications/unsubscribe/AATi5PDxbzRee0GVpU2oQWEe35bpUgUMks5qIBpNgaJpZM4Is5D7
> .

#1470 Review Comments 12:
Do not use arrays. Use Collections. [Collections.contains](https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#contains%28java.lang.Object%29) is your friend.

#1470 Review Comments 13:
Is "von", "zu", "van" also covered by test cases? My feeling is that the code might treat them wrong.

#1470 Review Comments 14:
Remove this unused method.

#1470 Review Comments 15:
replace by "avoidedTimes needs to be increased by the count of avoided terms for correct odd/even calculation"

#1470 Review Comments 16:
"Holds the index of each term which needs to be avoided"

#1470 Review Comments 17:
The variable is now called "valuePartsCount".
"valuePartsCount holds the count of name parts without the avoided terms"

#1470 Review Comments 18:
Space after `for` is missing

#1470 Review Comments 19:
Why isn't this called "affixesInLowerCase"? - Why is "von", "zu", "van" and "der" an affix? I think, only jr, sr, jnr, and snr are affixes. - As far as I can guess, "van" are not affixes

When reading https://en.wikipedia.org/wiki/Suffix_(name), it seems that jr is a name suffix, isn't it?

#1470 Review Comments 20:
Could you remove this method to make the tests being consistent with other tests?

Please be aware that the order of parameters has to be swapped!

#1470 Review Comments 21:
Can you please move all this code to `AuthorList.parse`. Thanks. Also split it into smaller methods, which are easier to understand and maintain. 

#1470 Review Comments 22:
Probably some merge problem.

#1470 Review Comments 23:
Union merge problems...

#1470 Review Comments 24:
Does it really make sense to use this in `AuthorList`? Isn't `NormalizeNameFormatter` quite a bit about guessing? I'd prefer if `AuthorList` didn't guess.

#1470 Review Comments 25:
@oscargus It doesen't matter in which class we put the new code. It will first be executed anyway. I think it belongs to AuthorList parse, because the other methods in authorlist will always be executed afterwards. Like this we have a better reading flow.

#1470 Review Comments 26:
Please add a java doc comment and describe what this formatter does.

#1470 Review Comments 27:
Remove the comment about `partCount`

#1470 Review Comments 28:
Please use more appropriate variable names than `value` or `valueParts` since it makes the code really hard to read.

#1470 Review Comments 29:
If you only need each value in a collection, please use a foreach loop as this is more readable in my opinion.
e.g.:

```
for (String name : allNames) {
    name = name.trim();
}
```

#1470 Review Comments 30:
Seems like a merge conflict to me.

#1470 Review Comments 31:
I recently ran into the same issue (after a user noted it) in the office xml export, make sure to check for and case independent : `nameList.toUpperCase(Locale.ENGLISH).contains(" AND "))`

And I would suggest adding a test for it, to make sure the behaviour stays the same in future ;)

#1470 Review Comments 32:
Make it a list with Arrays.asList(..split() ) 

#1470 Review Comments 33:
When you have list you can do a fancy one liner `originalStrings.replaceAll(String::trim);`
https://docs.oracle.com/javase/8/docs/api/java/util/List.html#replaceAll-java.util.function.UnaryOperator-

--------------------------------------------------------------
--------------------------------------------------------------
#1466 Review Comments 1:
Hard to read. Can you make it more ovious which three results are to be returned? Maybe only one level of indent would help here. Also what happens if I pass in null only and it is not a single value field?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1460 Review Comments 1:
Could this be replaced with Optional<Bibentry> as a return type? We try to minimize the usage of null. 

#1460 Review Comments 2:
I think the idea of the ParserResult variable is to communicate error messages. So users of this new overload method are not able to display meaningful error messages. Wouldn't it be better to change the corresponding places to something like:

```
ParserResult result = new ();
getEntryFromDOI(doi, result);
if(result.hasWarnings()) { displayThem() }
else { party() }
```

#1460 Review Comments 3:
Some places just don't display error but solely use the fetcher. previously only null was passed for the ParserResult. I thought overloading the method makes more sense, but we can just delete the overloaded method again.

--------------------------------------------------------------
#1459 Review Comments 1:
please make all the fields final

#1459 Review Comments 2:
what happens when I use a version which does not have a "."? Can you add a test for this class?

#1459 Review Comments 3:
Try to use Objects.equals instead

#1459 Review Comments 4:
Threads should be started via the JabRefExecutorService. But if you want to update the UI upon completion, you need a SwingWorker which ensures that one part is executed outside the EDT, and the second part is executed on the EDT. Another issue here is that this class in the logic package, but makes use of GUI classes - this is forbidden.

#1459 Review Comments 5:
The logic package has no notion of the preferences. This is only known in the GUI package. You should subdivide this class in a way that the GUI relevant code stays in the code package (using preferences and GUI classes) whereas the remaining stuff should be put in the logic package.

#1459 Review Comments 6:
I would extract a class which simply gets the latest version, e.g., a VersionChecker, with a method Optional<Version> getLatestVersion() as the request can fail returning no version at all. 

#1459 Review Comments 7:
A ' sign seems to be missing here. Also, an underscore/space is missing between update and server

#1459 Review Comments 8:
Would not this be a violation of the MVC pattern? When the GUI is accessing the date from the preferences, I only see two ways to check if I need to look for a new version. One would be to put the logic behind it into the GUI. Te other would be to access the GUI from within the logic. Am I getting it wrong?

#1459 Review Comments 9:
In the GUI you do the following:
- get current version
- use swing worker
  - (outside EDT) use a logic class to get the latest version, you can use another class which knows whether the latest version is the current version as the current version can be passed to the swing worker
  - (inside EDT) update UI by showing the user something and updating the preferences

I do not see any violation to the MVC pattern here. But we do not use MVC that clearly in JabRef. 

#1459 Review Comments 10:
I added some test cases for Version.
The version now only has to own the major part, the minor one is optional.

#1459 Review Comments 11:
Use the string without underscores. This applies for all localization strings you used. For more information see [using localization correctly](https://github.com/JabRef/jabref/wiki/Code-Howtos#using-localization-correctly).

#1459 Review Comments 12:
SwingWorker should infer generic type arguments. Since this method only returns `null` objects you should add the type arguments `Void` and change this methods signature to `protected Void doInBackground() throws Exception`

#1459 Review Comments 13:
Single line comments should use double slashes `//`

#1459 Review Comments 14:
Underscores are required here. Also "uptodate" looks weird, does this actually exist? I would replace it with "up to date" or "up-to-date".

#1459 Review Comments 15:
In my opinion you should create a new method `VersionChecker.goToLatestVersionDownload()` and put the `JabrefDesktop.openBrowserCatchException` method in there. This way `JABREF_DOWNLOAD_URL` can be private.

#1459 Review Comments 16:
This is unnecessary as you can use the `openBrowser(String url)` method. This way you can react with a more specific error message or further processing.

#1459 Review Comments 17:
Why does does this action exist if it does nothing? Or am I missing something?

#1459 Review Comments 18:
> "Error while opening following ling with a browser: "

Typo?

#1459 Review Comments 19:
This means a new `VersionWorker` is created and started each time the method is executed. Here it might not be as impact full because the user probably won't check the version a hundred times manually but you should always cancel a background task before creating the same one again. You can cancel a SwingWorker by creating an object and calling `cancel(true)` on it.

#1459 Review Comments 20:
Please move this to VersionWorker (or Version?) and rename to checkForNewVersion.

#1459 Review Comments 21:
Why did this changed?

#1459 Review Comments 22:
Please move this to the version class, so that you can call `Version.getLastIgnored(Globals.prefs)`

#1459 Review Comments 23:
Else on the same line as the closing bracket, i.e. `} else if (...)`  (I think)

#1459 Review Comments 24:
implement Version.toString() and use it here.

#1459 Review Comments 25:
I like that you add documenting comments!

#1459 Review Comments 26:
toString as above.

#1459 Review Comments 27:
As far as I can see, this method is not used?

#1459 Review Comments 28:
No need to have a bunch of classes for the action of each button, just use lambda expressions.

#1459 Review Comments 29:
Move to Version class so that you can call `Version.setAsLastIgnoredVersion(Globals.prefs)`.

#1459 Review Comments 30:
Close the dialog?

#1459 Review Comments 31:
toString as above.

#1459 Review Comments 32:
toString

#1459 Review Comments 33:
Remove "and can be updated now..."

#1459 Review Comments 34:
Maybe `Installed version` instead of current version (which may be mistaken for "current" = "latest")

#1459 Review Comments 35:
Shouldn't there already exist similar methods and translation strings
somewhere in JabRef? JabRef can open links since ages!

#1459 Review Comments 36:
Add fullstop and the ends.

#1459 Review Comments 37:
Yes, covered by our Eclipse formatter settings. Maybe, they can be imported
in IntelliJ. No clue about the current status though...

#1459 Review Comments 38:
maybe even latestVersion <= toBeIgnored (which shouldn't be necessary in most of the cases).

#1459 Review Comments 39:
Can one override `<=` for custom classes in java? If yes then I would prefer that.

#1459 Review Comments 40:
newer -> updateAvailable.

#1459 Review Comments 41:
isDevelopmentVersion

#1459 Review Comments 42:
UNK_n_OWN

#1459 Review Comments 43:
false in this case?

#1459 Review Comments 44:
I think this can be moved to the Version class (and grab -> get)

#1459 Review Comments 45:
Also use `older` and `newer` here and in the other tests.

#1459 Review Comments 46:
True here?

I would say (please add tests for this):
3.0 dev < 3.0
3.1 dev < 3.1
3.1.1 dev <= 3.1.1
but
3.9 < 4.0 dev
4.0 < 4.1 dev
4.1 < 4.1.1 dev

Or do I miss something?

#1459 Review Comments 47:
False?
If I'm on the 4.3dev then I don't want an update message about 4.2.1

#1459 Review Comments 48:
Currently the latest release is 3.4, and the version in the gradle file says im working on 3.5dev.
Does the minor version gets incremented if its a dev version or exactly is it done?

#1459 Review Comments 49:
sadly you cannot override Operators in Java (nor overload).

#1459 Review Comments 50:
Shouldn't be necessary.
The only way this could happen is if we revoke a Version, which shouldn't be done at all.

#1459 Review Comments 51:
Every line of code which uses `openBrowser(String url)` just reacts with a status update in the lower update bar which can be easily overseen by the user.
I extracted it all to this new method which now additionally has an error popup window.

#1459 Review Comments 52:
You are not allowed to access the EDT in the doInBackground method. There is a method which is called after the worker is completed, there, you can access the EDT. Instead of Void, use a class which contains all the info which is required to show the result to the user. Have a look at the JavaDoc of the SwingWorker, which details this.

#1459 Review Comments 53:
The logic is not allowed to know the preferences. Please move this to the GUI.

#1459 Review Comments 54:
You can move this and another method to a spearate class which handles just versions stored in the preferences. Have a look at the remote preferences.

#1459 Review Comments 55:
Cool tests. :)

#1459 Review Comments 56:
What about patch version? It might happen, that we use that.

#1459 Review Comments 57:
The patch number is in the version number only when it's non-zero, right?
Or do you now implement it all the time? e.g. 4.4.0

#1459 Review Comments 58:
Only when necessary.

#1459 Review Comments 59:
moved to its own class: `VersionPreferences`

#1459 Review Comments 60:
moved to its own class: `VersionPreferences`

#1459 Review Comments 61:
fixed

--------------------------------------------------------------
#1453 Review Comments 1:
I am not so happy with naming convention here (and below). After all, this returns no String as the name indicates. Could we make the convention a little more flexible to better describe the result, say: `getAsStringMap`, `getAsStringList`, etc.?

#1453 Review Comments 2:
I think that makes sense. Can you change that please @tobiasdiez and merge it in? :trophy: 

--------------------------------------------------------------
#1452 Review Comments 1:
Should be: "Britischer_Patentantrag"

#1452 Review Comments 2:
I am not sure where that string is used, but I don"t think that the translation is correct. As far as I am aware, a candidate thesis is a sort of pre-thesis you have to write in some countries (such as Sweden, where it is called licentiate thesis). There is no real correspondence to Germany, though...

#1452 Review Comments 3:
Mitarbeiter is more fitting here, I think.

#1452 Review Comments 4:
Europäischer_Patentantrag

#1452 Review Comments 5:
Vers

#1452 Review Comments 6:
Falsches_Format

#1452 Review Comments 7:
All these strings are possible extra fields for pagination, from the linked document:

```
Candidate thesis
Cand. thesis
An expression equivalent to the term <Candidate thesis>. Used for
<Candidate> degrees that have no clear equivalent to the Master’s or doctoral
level.
```

See here for a description:
http://tug.ctan.org/macros/latex/exptl/biblatex/doc/examples/03-localization-keys-bibtex.pdf
So I think it's a field you can use for any kind of Abschlussarbeit. 

--------------------------------------------------------------
#1451 Review Comments 1:
Could you please investigate if its possible to use a more concrete typ here and above then object?
Using Object in a generic type is making the whole concept of generics ad absurdum.

#1451 Review Comments 2:
To improve readability I would store that getDibDatabaseContext and getDatabase in a local variable

#1451 Review Comments 3:
Why don't you reuse the existing SQLUtil.createJDBCurl method?  It does also recognize addtional db parameters.
Especially the MultiQuery option is important. Have a look at the Mysql class. 

And for the ENUM DbType there is already an enum DatabaseType which also provides  a formatted name for display.

#1451 Review Comments 4:
Those lists are used to add actions. Unfortunately there are differnt types of them, such as `AbstractAction`, `GeneralActions` which extends `MnemonicAwareAction` or just the interface `Action`.
I think this could be a good stuff for a new PR.

#1451 Review Comments 5:
Done.

#1451 Review Comments 6:
Oracle hat another URL syntax. Therefore the previous function could not be used thus a new case differentiation is needed. The class `DBType` and the old one `DatabaseType` are nearly equivalent. What is ment by MultiQuery option? Unfortunately I didn't get that.

#1451 Review Comments 7:
MultiQuery option is a thing needed for mysql, which allows multiple queries executed in one Statement. Otherwise it would throw an SQlException.
See here for details:
http://stackoverflow.com/questions/10797794/multiple-queries-executed-in-java-in-single-statement

While I see the need for the syntax differences, I would still suggest using the DBPreferences class for host/port/name and additional parameters. 
And if you look closely at the existing DbType enum, it contains a formatted Name, which is used for displaying the names in the DBImporter/Exporter combo boxes. 

#1451 Review Comments 8:
List?

#1451 Review Comments 9:
Yep, should be List<BibEntry> remoteEntries = new ArrayList<>()
Always use the generic List Interface where possible. 

#1451 Review Comments 10:
Done.

#1451 Review Comments 11:
why is the entry and the id added, when there exists an entry with this id?

#1451 Review Comments 12:
Could you add an short doc for whhat this enum is necessary?

#1451 Review Comments 13:
In this case an exception (`KeyCollisionException` ) is going to be thrown. It is not going to reach the code below.

#1451 Review Comments 14:
you could replace this method with on line:
`return stringSet.stream().map(n-> n.toUpperCase(Locale.ENGLISH)).collect(Collectors.toSet());`

#1451 Review Comments 15:
oh yeah, I've overlooked that.

#1451 Review Comments 16:
this could be also done easier with streams

#1451 Review Comments 17:
Could you specify more, which exception should be catched? Respectively I think you can just add a throws declaration in the method header.

#1451 Review Comments 18:
You should add a Assert here I think. Even though when it's just an assert that the connection is not null.

#1451 Review Comments 19:
you should assert here, that the entry is inserted.

#1451 Review Comments 20:
 I think you should split this up in a new test method where you insert two entries with the same id and where you assert that only the first was inserted

#1451 Review Comments 21:
use Arrays.asList()

#1451 Review Comments 22:
Done.

#1451 Review Comments 23:
Thank you, very nice :+1: Done.

#1451 Review Comments 24:
Now I converted it to `Set<String>`, that made it quit shorter. Unfortunately I did not found a possibility to acces external variable out from a lambda expression. Do you know, how to do it?

#1451 Review Comments 25:
Here we have the opposite of the regular case. This test is positive only if no exception occured. It doesen't matter which one.

#1451 Review Comments 26:
The problem is that `DriverManager.getConnection(url, user, password);` in `DBConnector` never returns `null`. Unfortunately there is no opposite method to `Assert.fail()`. A test method passes when no fails occur.

#1451 Review Comments 27:
If you look closer at the line containing `Assert.assertFalse(resultSet.next());`, you'll see that this makes shure, that no other rows/entries are present. I could split that up, but the second method would look like the first one.

#1451 Review Comments 28:
Done.

#1451 Review Comments 29:
I think the description could be more expressive, maybe along the lines "automatic synchronization with external database (MySQL, ..)"

#1451 Review Comments 30:
Please search for a solution which leaves these fields private. We are trying to get away from storing metadata as a map.

#1451 Review Comments 31:
Creating a new metadata class using the `parse` method is probably better.

#1451 Review Comments 32:
As I said above, we are trying to get away from the map. So please look for another solution. There is already `getAsStringMap` which is probably what you want.

#1451 Review Comments 33:
Using the constructor https://github.com/obraliar/jabref/blob/c948c623fa212b29169f31f64b848fc1bf3bb9e8/src/main/java/net/sf/jabref/exporter/FieldFormatterCleanups.java#L44 does not work?

#1451 Review Comments 34:
I would move it to the File menu

#1451 Review Comments 35:
Please extract the parameters to variables first, e.g. `String password = new String(field.getPassword()`

#1451 Review Comments 36:
Move most of this code to a logic class (BibDatabseContext DBConnector.openRemoteDatabase(...) ?) 

#1451 Review Comments 37:
Move this code to `DBType` so that you can call `dbTypeDropDown.setSelectedItem(DBType.fromString(remoteDatabaseType))`

#1451 Review Comments 38:
Can you please introduce a `getAsOptional` in the preference class which returns `Optional<String>`. Then use this method here and above.

#1451 Review Comments 39:
Move setLocationRelativeTo to OpenRemoteDatabaseDialog  constructor if this works

#1451 Review Comments 40:
Why is public needed here?

#1451 Review Comments 41:
The BibDatabase class just represents a collection of entries and has no knowledge of how or where it is loaded from (so no location). All this context has to be stored in the BibDatabaseContext class. 

#1451 Review Comments 42:
I find the previous description better 

#1451 Review Comments 43:
It looks like this is an almost copy of the other insertEntry method. https://github.com/obraliar/jabref/blob/c948c623fa212b29169f31f64b848fc1bf3bb9e8/src/main/java/net/sf/jabref/model/database/BibDatabase.java#L228
Probably it is best to add `undo` as an event location.

#1451 Review Comments 44:
I would suggest to change it to `EventSource` with options `Local, Remote, UndoOperation (see below)`

#1451 Review Comments 45:
Rework description

#1451 Review Comments 46:
Why did you removed this?

#1451 Review Comments 47:
Remove additional space

#1451 Review Comments 48:
No underscores

#1451 Review Comments 49:
Use switch instead of if/else

#1451 Review Comments 50:
I don't understand the purpose of these `Class.forName` calls

#1451 Review Comments 51:
I don't like the `DB` prefix here and in the other classes since it reminds me on `BibDatabase`. Does `Remote` as a prefix would work?

#1451 Review Comments 52:
whole

#1451 Review Comments 53:
Simply delete empty fields?

#1451 Review Comments 54:
How do I make certain that there is a right database listening at `localhost` before I run the tests?

#1451 Review Comments 55:
In my opinion the `DBProcessor` shouldn't directly depend on the connection but only on the wrapper `DBHelper`. In this way you can mock `DBHelper` in your tests and check that the correct queries are generated (without actually invoking them against a real db). Similar to how the DatabaseWriter depends on an arbitrary `Writer` and not on a `FileStream`

#1451 Review Comments 56:
So the save actions are applied after every change?

#1451 Review Comments 57:
The calls initialize the driver: At least for mysql necessary
https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-connect-drivermanager.html

#1451 Review Comments 58:
Oh as I just saw, the Class.forName is no longer needed:
http://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html

#1451 Review Comments 59:
Done.

#1451 Review Comments 60:
Here you can see the remote structure of the metadata table.

![md_table](https://cloud.githubusercontent.com/assets/15609468/16564943/83bb95c4-420a-11e6-9f86-c7819a79ea48.png)

To insert and compare the data I need those attributes (see https://git.io/vKJbl).

Using the `getAsStringMap` method makes it even worse, as I have to parse the String manually. Here is the return value of `getAsStringMap` for the data above:

```
{databaseType=biblatex;, saveActions=enabled;
author[capitalize,html_to_latex]
title[title_case];, saveOrderConfig=specified;author;false;title;false;year;true;}
```

It returns similar result as `Map.toString()`...

#1451 Review Comments 61:
I would like to use another solution, but unfortunately there is no other. In my opinion there should exist appropriate classes and data structures for meta data which are not present (and my time capacity is exceeded to do that). The only thing I could do is to use `getAsStringMap` and `parse` but as I described above this would cause very uggly code (parsing the strings and compiling them to match the remote data structure).

#1451 Review Comments 62:
:+1: I didn't realize that, thans for the suggestion. This is going to be changed.

#1451 Review Comments 63:
Yes, it should work, but there is a boolean parameter required which does not have any effect. The constructor call looks a bit puzzling. What should I prefer?

#1451 Review Comments 64:
That seems better. Done.

#1451 Review Comments 65:
The this-Call? It is nothing more than overloading, only that in constructors you have to use this...
I think the boolean parameter is indicating  if the selected CleanUp is active or not...
At least there is a function: `public List<String> getAsStringList() {`
which apparently uses the value 

#1451 Review Comments 66:
What about using an Enum for the field values?

#1451 Review Comments 67:
So you would say to use the constructor with faked `enabled` value rather than make `parse` public?
`for (FieldFormatterCleanup cleanUp : new FieldFormatterCleanups(true, values.get(1))
                        .getConfiguredActions())` instead of https://github.com/JabRef/jabref/pull/1451/files#diff-1f5b83f0638c8e3856ca20333099555fR410

#1451 Review Comments 68:
Done.

#1451 Review Comments 69:
Done.

#1451 Review Comments 70:
Done.

#1451 Review Comments 71:
Done.

#1451 Review Comments 72:
Unfortunately it doesn't work.

#1451 Review Comments 73:
Oh, I've overseen that. I think that was temporarly changed.

#1451 Review Comments 74:
I would propose to simply store it in the same format as in the bib file, i.e. two columns:

| META_KEY | META_VALUE |
| --- | --- |
| databaseType | biblatex |
| saveActions | enabled; author[capitalize,html_to_latex] |

Are there any problems in storing metadata in this form?
In this way you can reuse the existing parsing/writing logic, although I have to admit that your solution is probably more adapted to a db.

#1451 Review Comments 75:
Ok, I think your solution is more readable. Ignore my comment and keep the parse method public.

#1451 Review Comments 76:
:+1: Done.

#1451 Review Comments 77:
I changed it to `EntryEventScope`.

#1451 Review Comments 78:
Done.

#1451 Review Comments 79:
Mhh...scope also implies that this event is only valid in some specific area, like you describe in the comment "the affected radius". 
But the event does not know if a listener should actually do something or not. It just knows where it comes from (source / origin / ?).
Example: an entry is added remotely (source = remote). The remote sync does not want to handle the event (scope = local). 

#1451 Review Comments 80:
Done.

#1451 Review Comments 81:
Okay I agree with that. Done.

#1451 Review Comments 82:
This method is used for example in https://github.com/JabRef/jabref/pull/1451/files#diff-1f5b83f0638c8e3856ca20333099555fR180. The old method ist quite applicable (see https://github.com/JabRef/jabref/pull/1451/files#diff-1f5b83f0638c8e3856ca20333099555fR517), cause `null` object is going to be translated to sql `NULL`. In my opinion the old method is still stable in some cases.

#1451 Review Comments 83:
Done.

#1451 Review Comments 84:
Done.

#1451 Review Comments 85:
Done.

#1451 Review Comments 86:
Done. All non-essential occurrences were removed.

#1451 Review Comments 87:
It sounds good for few  classes. But `RemoteSynchronizer` would suggest only a remote synchronizing class which isn't one. What about `RemoteDB` or `DBMS`? I've chosen`DBMS` but feel free to suggest some others.

#1451 Review Comments 88:
Done.

#1451 Review Comments 89:
No, cause we have to nullify already existing values (in case that there are some).

#1451 Review Comments 90:
Those systems are installed on travis (see `.travis.yml`) in project's root. If you want to run the tests locally, you have to install them. The complexity of those systems is too hight to mock and simulate them.

#1451 Review Comments 91:
Yes they are. This makes sure that data which is going to be pushed is formatted according to the meta data, which is always up-to-date.

#1451 Review Comments 92:
Done. `DBProcessor` is not longer depentent from the `Connection` class.

#1451 Review Comments 93:
Done.

#1451 Review Comments 94:
I don't see any reason why getField is necessary there. You can simply replace the null check in escapeValue https://github.com/JabRef/jabref/pull/1451/files#diff-044ee1a556d146810fd96d93f040505aR516 with optional.isPresent. 

#1451 Review Comments 95:
https://github.com/JabRef/jabref/pull/1451/files#diff-044ee1a556d146810fd96d93f040505aR514
I cannot write the method like this

``` java
public static String escapeValue(Optional<Object> obj) {
   String stringValue;
      if (obj.isPresent()) {
         if (obj.get() instanceof String) {
            stringValue = "'" + obj.get() + "'";
         } else {
            stringValue = String.valueOf(obj.get());
         }
      } else {
         stringValue = "NULL";
      }
      return stringValue;
}
```

... because `Optional<Object>` does not allow any assignment of `Optional<T>` where `T` is an arbitrary type. But we need the `escapeValue` method for `Integer` and other types.

#1451 Review Comments 96:
As far as I can see it you need it for int and string, right? so just overload the method (at least you can write a method accepting Optional<String>, which is what getFieldAsOptional is returning). Anyway, accepting a parameter of type `Object` smells bad. 

#1451 Review Comments 97:
Right, I can do that, I took `Object` cause `String.valueOf(...)` is also accepting that.

#1451 Review Comments 98:
Done. The synchronizer now uses an sql table with columns `META_KEY` and `META_VALUE`.

> Are there any problems in storing metadata in this form?

No, but it is an unusual way to do this with relational database system. But it works properly.

#1451 Review Comments 99:
Hmm, yea but in that case `DBMSSynchronizer` would have to be depentent on `BibDatabaseContext` which would create a bidirectional association as `BibDatabaseContext` already depends on `DBMSSynchronizer`. This would hinder the tests etc.

Now I extracted the method `setData(...)` from the constructor to achieve the goal.

#1451 Review Comments 100:
Done.

#1451 Review Comments 101:
What happens in this case? Shouldn't there be an exception be thrown, because the implementation is faulty

#1451 Review Comments 102:
What kind of exception do you mean? It just returns the path for each type. Let say:

``` java
//...
DBMSType type = DBMSType.MYSQL;
Class.forName(type.getDriverClassPath());
//...
```

Should I define a new Exception, something like `UnavaillableDBMSTypeException`?

#1451 Review Comments 103:
Done with `throw new Error();`.

#1451 Review Comments 104:
You should add a case for the empty class type.

#1451 Review Comments 105:
@obraliar  throw new Error() is a bad idea in this case. An error normally indicates a non-fetchable abnormal behaviour of a program. Maybe better an UnsupportedOperationException?

Did you write a test for that method? I am not sure what happens when you do Class.forName with an empty string.
I am sure it gives an Exception.

#1451 Review Comments 106:
Better introduce a kind of Default/NONE-Database Type instead of NULL

#1451 Review Comments 107:
What about extending the enum with the driver name as 2nd parameter?
e.g. `MYSQL(MySql, "com.com.mysql.jdbc")`
That would be easier to add new DBs and Drivers/change driver names.

#1451 Review Comments 108:
Is this really necessary? I mean can't you use the enum Type everywhere instead of passing a string here?

#1451 Review Comments 109:
Or use `Optional<DPMSType>`

#1451 Review Comments 110:
Yeah, that's a good idea. Done.

#1451 Review Comments 111:
It is necesarry due to `Global.prefs`. There you can't store them except the strings.

#1451 Review Comments 112:
Done using `EnumSet.allOf(DBMSType.class)` and `Optional<DBMSType>`.

#1451 Review Comments 113:
Done. See above.

#1451 Review Comments 114:
You shouldn't catch generic exceptions. [JavaWorld](http://www.javaworld.com/article/2073800/testing-debugging/beware-the-dangers-of-generic-exceptions.html) has a detailed blog about the dangers of using the generic `Exception` class for error handling.

#1451 Review Comments 115:
You shouldn't throw generic exceptions. Please use `JabRefException` instead.

#1451 Review Comments 116:
You shouldn't throw generic exceptions. Please use `JabRefException` instead.

#1451 Review Comments 117:
You shouldn't throw generic exceptions. Please use `JabRefException` instead.

#1451 Review Comments 118:
You shouldn't throw generic exceptions. Please use `JabRefException` instead.

#1451 Review Comments 119:
You shouldn't throw generic exceptions. Please use `JabRefException` instead.

#1451 Review Comments 120:
Please move this line to the OpenDatabaseDialog class so you can remove this line here and the one in `OpenRemoteDatabaseAction`

#1451 Review Comments 121:
See previous comment.

#1451 Review Comments 122:
Remove one "insert"

#1451 Review Comments 123:
Is the error code important? If you only want to check for a `SQLException` use the following 

```
@Test (expected=SQLException.class)
public void testGetNewConnectionFail() throws SQLException {
...
}
```

#1451 Review Comments 124:
Done.

#1451 Review Comments 125:
Done.

#1451 Review Comments 126:
Done.

#1451 Review Comments 127:
Done.

#1451 Review Comments 128:
Done.

#1451 Review Comments 129:
Done.

#1451 Review Comments 130:
Moved to `OpenRemoteDatabaseDialog`'s constructor.

#1451 Review Comments 131:
Done.

#1451 Review Comments 132:
Done.

#1451 Review Comments 133:
Yeah, that's enough. :+1: 

#1451 Review Comments 134:
Please use Optional

#1451 Review Comments 135:
Why is only the first entry returned? Shouldn't there be at least a warning using LOGGER.info()?

#1451 Review Comments 136:
Done.

#1451 Review Comments 137:
Because `remoteId` is unique within the remote database. Now it returns only `Optional.empty()` if the entry was not found.

#1451 Review Comments 138:
If possible it would be nice to reuse the existing translations of Port and Database. (One can consider reusing "Server hostname" and possibly "Username" as well, to not add more strings.)

#1451 Review Comments 139:
make these parameters final

#1451 Review Comments 140:
Always use prepared statement, please.

#1451 Review Comments 141:
This escape method should be an instance method of the DBMSType, as it only depends on this. 

#1451 Review Comments 142:
Does the helper really help that much? Most methods are only one line long. Could be a hint that something can be improved.

#1451 Review Comments 143:
Why not create a class containing the host, database, user and password? I think that are also things the user has to put into the gui at some point.

#1451 Review Comments 144:
As both version and sharedID are used for the same thing, we should create a final immutable class containing both fields so that the relationship between them is shown clearly. 

#1451 Review Comments 145:
Instead of long if clauses, one can leverage the strategy pattern so that the current instance just knows what to do. In that case, there should be a Oracle, MySQL and Postgres object somehow that just knows how to set up the database, and escape stuff even. So that the dbms specific code is in a dbms specific class, and the other code is in a more general class like this. 

#1451 Review Comments 146:
Simpler: use `DBMSType type = Enum.valueOf(typeName)`

#1451 Review Comments 147:
Better throw the exception so that we get the full stracktrace on failure

#1451 Review Comments 148:
Done.

#1451 Review Comments 149:
Done.

#1451 Review Comments 150:
Done. Functionality moved to `DBMSType`.

#1451 Review Comments 151:
Done.

#1451 Review Comments 152:
Done.

#1451 Review Comments 153:
There is a possibility to use an abstract class or sth. like that. The question is whether it's worth to do this, because `setUpSharedDatabase()` is the only one method which has a significant differentiation between `DBMSType`s.

#1451 Review Comments 154:
Good! But I recommend adding Locale.ENGLISH in the toUpperCase method.
Here is a nice explanation why it is sometimes necessary (the infamous Turkish Locale bug)
http://mattryall.net/blog/2009/02/the-infamous-turkish-locale-bug

#1451 Review Comments 155:
Define the Escape-Char as private final String/Char somewhere, makes it easier to identify it and to possible change it.

#1451 Review Comments 156:
`DBMSHelper` removed. `Connection` moved to `DBMSProcessor`.

#1451 Review Comments 157:
Done. See `DBMSConnectionProperties`.

#1451 Review Comments 158:
Done. `SharedBibEntryData` added.

#1451 Review Comments 159:
Done. The pattern was changed. `DBMSProcessor` functions as an abstract class for `MySQLProcessor`, `PostgreSQLProcessor` and  `OracleProcessor`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1447 Review Comments 1:
Use a locale when using toLowerCase. 

#1447 Review Comments 2:
Rewrite this as a real JUnit test?

#1447 Review Comments 3:
I find the new validity check rather strict. Is CrossRef really returning that many false positives? 

#1447 Review Comments 4:
We already have tests for the Crossref fetcher. This is a "tool" to analyze the accuracy of the algorithm.

#1447 Review Comments 5:
As we base a lot of things on the DOI, e.g., full text retrieval we decided that we need a high accuracy here.

#1447 Review Comments 6:
Maybe add a short JavaDoc to describe the purpose and the usage of the tool?

#1447 Review Comments 7:
must be added to https://github.com/JabRef/jabref/blob/master/external-libraries.txt

#1447 Review Comments 8:
Should I remove it from the git repo?

#1447 Review Comments 9:
I don't know :wink: If it will be useful for further improvements leave it - if it has already done its part remove it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1440 Review Comments 1:
So the field `bibtexKey` is no longer required, right?

#1440 Review Comments 2:
bibtexkey is used inside createFileNameFromPattern

--------------------------------------------------------------
#1438 Review Comments 1:
New class should be in a new file

#1438 Review Comments 2:
New class should be in a new file

#1438 Review Comments 3:
I think it would be better to define a global stylesheet when changing the style of JavaFX predefined style classes such as `.tree-table-view` and use the `@import "/path/to/global.css";`. This way all JavaFX components will have a consistent look and feel.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1426 Review Comments 1:
I would add a small comment as to why this class is needed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1409 Review Comments 1:
This comment is placed wrongly, I think. 

#1409 Review Comments 2:
Hm, maybe use a try-finally here instead?

#1409 Review Comments 3:
I do not understand this. Why move a constant to JabRefPreferences which is not a preference?

#1409 Review Comments 4:
Another comment: the method getDisplayName is called quite often. If we would query a preference for each field in each row having 10k rows, this would lead to performance issues. 

#1409 Review Comments 5:
The code is wrong anyway and somehow slipped my attention, thanks for noticing! It should have been `Globals.prefs.getValue(JabRefPreferences.COL_DEFINITION_FIELD_SEPARATOR)` of course. 

Regarding the migration of constants into preferences: that is what _you_ asked me to do in #1408 ;-) However, it is no hassle to move this particular constant back into `GUIGlobals`. 

Will do, as with the rest of your comments

#1409 Review Comments 6:
Remove prefix `Export dialog` in the names?

#1409 Review Comments 7:
Not necessary as a separate variable and can be merged with next line, right?

#1409 Review Comments 8:
or in teardown method

--------------------------------------------------------------
--------------------------------------------------------------
#1403 Review Comments 1:
Can you please explain why this solves this issue? From a quick look, it essentially seems to be only the conversion to Optional code and no semantic changes. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1397 Review Comments 1:
Why did you change these lines? IMO the old layout was easier to read.

#1397 Review Comments 2:
You should do a general renaming refactoring, it is hard to follow statements like this and with all the abbreviations, hm, lab, val,...

#1397 Review Comments 3:
Why article-id and not doi here?

#1397 Review Comments 4:
I wasn't sure if it is right if there stands `doi:`. [Here](https://www.nlm.nih.gov/bsd/mms/medlineelements.html#aid) it says, that doi has to come at the end in brackets. That's why I thought it would be wrong to add this as doi. Should I keep both possibilities ?

#1397 Review Comments 5:
Sorry, but I don't really get what you're trying to say :smile: .
Check out `DOI.java` it includes the regex for a valid DOI. Typically all our DOIs are just the DOI starting with the vendor code, i.e., 10.1016/j.cpr.2005.02.002.
From my understanding the removed line is the right result, except that the key should be lowercase but correct me if I'm wrong and don't understand the use case here!

#1397 Review Comments 6:
Oh ok. The problem I thought is, that in the [medline description](https://www.nlm.nih.gov/bsd/mms/medlineelements.html#aid)  for the AID element there come an example like this: `AID - 10.1016/j.cpr.2005.02.002 [doi]`.
 So that `[doi]` has to come at the end.
That's why I thought that something like `doi:10.1016/j.cpr.2005.02.002` would be wrong. My question now is, whether both incidents of the doi should be possible or just one of them ?
Was this a little bit more understandable ? :) 

#1397 Review Comments 7:
Actually the DOI should be extracted by the importer to a correct format like I pointed out.

#1397 Review Comments 8:
Ok, I've changed it to doi in lowercase.

#1397 Review Comments 9:
You can specify in regex how often a specific expression should match, instead of repeating it over and over. 

#1397 Review Comments 10:
e.g., `\\d{8}` exactly 8 times.

#1397 Review Comments 11:
done

#1397 Review Comments 12:
Could you please store the conversation as a `map<MedlineKey, Bibtexkey>` and then iterate over this map. Should be more readable. 

#1397 Review Comments 13:
Again, a switch or map should be more readable.

#1397 Review Comments 14:
done.

#1397 Review Comments 15:
done (hope that I unterstood it right).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1390 Review Comments 1:
if statement is not necessary, this could be done in one line `return combination.equals(pressedCombination)`

#1390 Review Comments 2:
add a new line at the end of the file.

#1390 Review Comments 3:
why do you need  `modifiers.isEmpty() ?`
wouldn't `modifiers + " shift"` be enough? 

#1390 Review Comments 4:
I would prefer if you move this code to the `KeyBindingPreferences` class. Than you can write something like `if(Globals.getKeyPrefs().checkKeyCombinationEquality(KeyBinding.CLOSE_DIALOG, event)`

#1390 Review Comments 5:
write the above with space at the end, i.e `modifiers = "ctrl "` and `"shift "`. Then a simple `newShortcut = modifiers.trim() + code` should work.

#1390 Review Comments 6:
Reuse the new KeybindingAction defined below?

#1390 Review Comments 7:
FX suffix required? 
`bindName`-> `binding`

#1390 Review Comments 8:
Moving the methods to the initialize() method does not work?

#1390 Review Comments 9:
Rename `Wrapper` -> `ViewModel` (wrapping a datamodel for display is exactly the purpose of a view model)

#1390 Review Comments 10:
Correct naming of `bind` in the whole class.

#1390 Review Comments 11:
In the best case you just need the `KeyBinding` parameter and get/set the rest from it.

#1390 Review Comments 12:
If I understand the code correctly, then something as `Crtl + C` is written to the `bind` property. But previously the code (the KeyBindingPreference class) expected something as `ctrl c`, correct? Does this lead to problems?

#1390 Review Comments 13:
Add constructor to KeyBindingWrapper which only accepts a category. 

#1390 Review Comments 14:
Also make `Name` a (readonly) property in the KeyBindingWrapper class and bind to it.

#1390 Review Comments 15:
Correct naming of `bind` in the whole class.

#1390 Review Comments 16:
Can be replaced by https://github.com/boceckts/jabref/blob/a559e058c065fe58cb5ced1380dda4f7ed889f51/src/main/java/net/sf/jabref/gui/FXAlert.java#L146 ?
In this case it may be worthwhile to add a closeDialog method to FXAlert.

#1390 Review Comments 17:
Pass the KeyPreference class to this viewmodel instead of the `keyBindingRepository` so that you don't need to access the Globals object here (we want to get rid of it in the end).

#1390 Review Comments 18:
Extract these statements to new class `Dialogs` (or something like that). So you can simply call `Dialogs.showSuccess( title , text )`.

#1390 Review Comments 19:
Similar to above, move to `boolean Dialogs.showAndWaitForConfirmation( title, text, buttonText)`

#1390 Review Comments 20:
I find it counterintuitive that the same button sometimes resets only a few bindings and sometimes all.
 Proposal: add a third column to the table which contains a small reset button (only icon, light gray by default, dark gray on hovering the row) which resets the corresponding binding. Then the button at the button is a `Reset all bindings` button. 

#1390 Review Comments 21:
rewrite second check as `selectedEntry.isCategory()`

#1390 Review Comments 22:
Move the rest of this method to `selectedEntry.setNewBinding(event)`.

#1390 Review Comments 23:
I have seen this code somewhere else too. Try to reuse it.

#1390 Review Comments 24:
Try if disabling the grid line (the separator between the columns) with `-fx-table-cell-border-color: transparent;` looks good.

#1390 Review Comments 25:
All items in a `TreeTableView` are fom the same type, also the expandable ones. Since those are no real KeyBindings but rather only their category, I created the this wrapper class as view model to include the categories as well as the keyBindings.

#1390 Review Comments 26:
No the problem is that we need the keycode combination to be in a blank separated string to ensure compatibility with AWT's `KeyStroke` as well as JavaFX's `KeyCombination`.

#1390 Review Comments 27:
unfortuntely not

#1390 Review Comments 28:
I don't see how as I don't have a hold to the dialog object but only its content.

#1390 Review Comments 29:
Can you please also introduce an overload so that you can simply write `if keyPreferences.checkKeyCombinationEquality(KeyBinding.CLOSE_DIALOG, evt)`.

#1390 Review Comments 30:
add "create"

#1390 Review Comments 31:
Make private as well as setKeyBinding? 
I suspect the proper way to change the keybinding is via `setNewBinding`
Are these get/set/property methods for all fields really required?

#1390 Review Comments 32:
just set this in the constructor. Also rename to `displayName`

#1390 Review Comments 33:
The third parameter is not required as far as I can see (if it's a binding, then its category is stored in it)

#1390 Review Comments 34:
This is because the keyBindingRepository is not yet initialized, right?
In this case, just call the initializeView in setKeyBindingPreferences (and make it private)

#1390 Review Comments 35:
Ok.

#1390 Review Comments 36:
Move this code to KeyBindingViewModel, so that you simply can write keyBindingViewModel.resetToDefault(); maybe passing the repository as a parameter to the method (or to the constructor)

#1390 Review Comments 37:
Just create a new field `selectedKeyBinding` and bind it to keyBindingsTable.getSelectionModel().selectedItemProperty().

#1390 Review Comments 38:
Yes you are right, I forgot to remove it when adding the category constructor.

#1390 Review Comments 39:
It only gets called in the constructors that's why it's `private`.

#1390 Review Comments 40:
Can this be set in the fxml file?

#1390 Review Comments 41:
Well the minimum size of the dialog pane is already set to this dimension in the fxml file. However if you omit these lines you are able to resize the dialog window to whatever you like but not the dialog content. So all properties set in the fxml file only affect the dialog content but not the dialog window itself. With these lines omitted you could resize the dialog to a point where the content doesn't resize and it may look bugged.

![screen shot 2016-06-07 at 15 04 46](https://cloud.githubusercontent.com/assets/15340757/15858524/415e49b4-2cc1-11e6-84e9-ceaf7a1c5cde.png)

#1390 Review Comments 42:
Try to pass a mockito mock of the preferences to the keybindingpreferences (see wiki) or mock the repository itself.

#1390 Review Comments 43:
Please change the name so that it reflects what is tested and what is the expected output (here `invalidKeyBindingIsNotSaved`), see wiki for conventions.

#1390 Review Comments 44:
I would split this method, so only create a shortcut for setting the selected keybinding.

#1390 Review Comments 45:
Split into 3 tests. In general, test only one thing in a test (so at best you have only one assert per test)

#1390 Review Comments 46:
Also split

#1390 Review Comments 47:
No need to clear it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1386 Review Comments 1:
Replace by scheduleUpdate();

#1386 Review Comments 2:
done

--------------------------------------------------------------
--------------------------------------------------------------
#1384 Review Comments 1:
I would have made it simpler and using the four different group types instead of mocking the abstract class to test more stuff. But I think this is OK as well. 

#1384 Review Comments 2:
Does the removal of this method introduce some performance issues? Or is iterating over all entries still fast enough?

#1384 Review Comments 3:
For my database of around 500 entries this is no problem. 

#1384 Review Comments 4:
I tried it now with a bigger database and although the population of the group tree was not "instantaneously", the performance was acceptable. So I merge this in.

--------------------------------------------------------------
#1383 Review Comments 1:
Suggestion: don't use a refresh thread but data binding.
So you add a property to ErrorConsoleViewModel to return a FX-observable list of output/errormessages which are always up-to-date and then bind the text property of the textarea to it.

#1383 Review Comments 2:
how can i bind the observable list to this outputStream. The problem is that all output gets written to a stream which in my opinion is incompatibe with a observable List.

#1383 Review Comments 3:
You can register a custom PrintStream as a TeeStream, similar to what is done in https://github.com/JabRef/jabref/blob/144c03c8140737e5c8cac86b6f9156c71ac2bda7/src/main/java/net/sf/jabref/logic/error/StreamEavesdropper.java#L49.
This custom PrintStream writes to a (observable) list. 

```
new PrintStream(System.out) {
List<String> messages = new blabla();
@Override  
public void println(String s) {
    messages.add(s);
    super.println(s); //needed?
  }
```

#1383 Review Comments 4:
I think there is no need to replace the items in `allMessage`, just use `filteredData.setPredicate`. Have a look at http://stackoverflow.com/questions/30915007/javafx-filteredlist-filtering-based-on-property-of-items-in-the-list

#1383 Review Comments 5:
Please use an enum as a return value.

#1383 Review Comments 6:
Call the other constructor using this(...) here.

#1383 Review Comments 7:
Only copy what is displayed in the list view

#1383 Review Comments 8:
add here 

```
} else {
   setText("");
}
```

to solve your problem. Source: http://stackoverflow.com/questions/28384803/listview-using-custom-cell-factory-doesnt-update-after-items-deleted

#1383 Review Comments 9:
Remove comment

#1383 Review Comments 10:
Add an empty line between description and parameters in java docs.

#1383 Review Comments 11:
There shouldn't be an empty line between java doc comments and the method.

#1383 Review Comments 12:
The view model should only provide the data so the view class can decide how to display it.
Therefore I would change the method signature to something like `public ObservableList<ObservableMessageWithPriority> setUpListView(boolean isDeveloperInformationActive)` and set the returned list in the view class.

#1383 Review Comments 13:
extract to a new method like setUpListView and move to the view class.

#1383 Review Comments 14:
Don't print stacktraces, use the Logger class to log errors.

#1383 Review Comments 15:
Add the copyright notice to the beginning of every file you created.

#1383 Review Comments 16:
Please add a brief description as java doc comment.

#1383 Review Comments 17:
Remove empty lines between fields.

#1383 Review Comments 18:
I can't see any usage for this..

#1383 Review Comments 19:
Is this really not needed anymore (also the synchronized)? If so, you should delete the method `ensureCacheIsFresh()` as it is now unused.

#1383 Review Comments 20:
Please also add a java doc comment.

#1383 Review Comments 21:
Please rework some of the language strings keeping in mind that:
- in english you usually write in lower case except at the start of an sentence and proper names such as GitHub. 
- exclamation marks ("!") are rather intusive and shouldn't be used too often, maybe replace some dot (".")
- use the past form if you display if you want to use it in error/info/warning dialogs as something has already happened
- can `Detail_information\:` and `Details_information` be merged?
- the last key and translation don't match

#1383 Review Comments 22:
Underscore ("_") is missing.

#1383 Review Comments 23:
You don't need localization here as this gets pasted on github.

#1383 Review Comments 24:
Please use localized strings with by adding a percent sign ("%") in front of the strings. E.g. text="%Ok"

#1383 Review Comments 25:
Please fix typo, "diagonalize" should be "diagnose"

#1383 Review Comments 26:
Why is there an underscore ("_") at the end? Please remove it.

#1383 Review Comments 27:
Also remove underscore.

#1383 Review Comments 28:
Don't use graphics from external resources such as urls. Have a look at #1390 to see how to use the material design icons in JavaFX.

#1383 Review Comments 29:
Same as with the Console image.

#1383 Review Comments 30:
Please reword to "Issue on GitHub successfully reported".

#1383 Review Comments 31:
I guess this isn't needed anymore, please remove it.

#1383 Review Comments 32:
Since you already set style classes to the rows and specify their style in the stylesheet, maybe you can also set the icon there?

#1383 Review Comments 33:
Why did this change?

#1383 Review Comments 34:
I would leave all the old constructors and call the new overloads with `isModal=true` since this looks like the default behavior. For example:
`public FXAlert(AlertType type, String title) { this(type, title, true); }`.

#1383 Review Comments 35:
"Developer information" is better then "error console", but maybe one would expect to get information about becoming a developer for JabRef (instead of information for us developer). What about a more general `Troubleshoot problems` or `View event log` or `Problem reporting`?

#1383 Review Comments 36:
See above regarding "developer info"

#1383 Review Comments 37:
I think the convention for comments is `// With space and capital first letter`

#1383 Review Comments 38:
In one of the recent FX-PRs (I hope it is already merged), a new method in `JabRefIcon` was introduced which gives you directly the `Text` control with the right style class. 

#1383 Review Comments 39:
Unfortunately not yet merged.
https://github.com/JabRef/jabref/pull/1526/files#diff-714bc6a7e9d4aca70ed8b733a7c75ed8R204

#1383 Review Comments 40:
"give you insight" (without "an")

#1383 Review Comments 41:
These information might be helpful to diagnose the root cause of a problem.

#1383 Review Comments 42:
"Please feel free to inform ...".
Maybe make the part "inform the developers" a hyperlink-like button, which also invokes `errorViewModel.reportIssue();`

#1383 Review Comments 43:
Is there a reason why you set the text here in the view instead of in the FXML file?

#1383 Review Comments 44:
indention (here and in some other places)

#1383 Review Comments 45:
Use switch statement.

#1383 Review Comments 46:
rename omp -> message

#1383 Review Comments 47:
Since they represent not really a priority, but more a type of message, I would rename:
priority -> type and low -> log, medium -> output, high -> exception.

#1383 Review Comments 48:
Now it is merged 😄 

#1383 Review Comments 49:
I think there is no need to filter the before copying it to the clipboard.

#1383 Review Comments 50:
Use StringBuilder

#1383 Review Comments 51:
"Log copied to clipboard."

#1383 Review Comments 52:
Use JavaDoc-style comments for method descriptions.

#1383 Review Comments 53:
great :smile: 
@motokito please also adjust the changelog according to the new pattern

#1383 Review Comments 54:
Use apache's URIBuilder to create the URL.

#1383 Review Comments 55:
"Issue report successful"

#1383 Review Comments 56:
Rename to LogMessage?

#1383 Review Comments 57:
you can reference a different class using `@link` in javadoc.

#1383 Review Comments 58:
Again, I think the filtering business is no longer needed, right?

#1383 Review Comments 59:
why is this an enum and not a normal (singleton) class?
I would also propose to rename it to LogMessages

#1383 Review Comments 60:
"property"

#1383 Review Comments 61:
I don't think that's needed, because of the sentence already stating where you can report the issue. Maybe change the sentence to: "Please feel free to inform the developers with the below button "Report Issue"." this would clearify where to click. 

#1383 Review Comments 62:
Yes, but I don't like the "click the button below"-part. It feels a bit outdated similar to the old-school "if you want something to happen, then click >here< " text in websites. 
But if there is no easy solution to turn the text into a hyperlink, then its also no big deal (but in this case please also remove the "button below" part)

#1383 Review Comments 63:
The reason it is 3 sentence and it will be throw a IllegalStateException, if i try to insert this sentences in FXML.
Like (%We now give you insight into the inner workings of JabRef's brain. These information might be helpful to diagnose the root cause of a problem. Please use the button below to inform the developers about an issue.)

#1383 Review Comments 64:
Did you tried the text without the fullstops / points and apostrophe? What was the error message? I can't see why a longer text might lead to problems.

#1383 Review Comments 65:
Now i have tried this text in FXML file to implement without error. But this text will display on one line. So i can not format this sentence in two line in FXML. If you know how to do it, then please give me a tip :smirk:
- take a look to this screenshot:

![2016-09-07_14h06_54](https://cloud.githubusercontent.com/assets/13031192/18311410/670de562-7504-11e6-9546-18ce88b79ee2.png)

#1383 Review Comments 66:
I have not tried it but accordingly to http://stackoverflow.com/questions/15977295/control-for-displaying-multiline-text you can specify line breaks by `\n`. But probably the best way is to set a maxWidth and wrapText =true (http://stackoverflow.com/a/38622468/873661 but in the fxml of course) and let javafx decide where to break the text (also accounts for possible space-issues in different languages).

#1383 Review Comments 67:
i should get only the log entry or ? i must get this about a filter. Or how i should implement it ? 😄 

#1383 Review Comments 68:
Just combine all messages in `masterData` to a string? I don't see the need to filter some messages.

#1383 Review Comments 69:
i will copy all message incl. exception and output or ? because masterdata is a list of all message with different priority 😄 

#1383 Review Comments 70:
yes, especially the exceptions and output are important.

#1383 Review Comments 71:
`true` is default, right? If so, remove it.

#1383 Review Comments 72:
Please move this to FXML: http://stackoverflow.com/a/32427404/873661

#1383 Review Comments 73:
`setGraphic(IconTheme....getGraphicNode())`

#1383 Review Comments 74:
The view shouldn't know about the datasource (in this case `LogMessage`) but ask the viewmodel. Could you please add a pass-through getter in errorViewModel.
Also inline `masterData`, i.e. `allMessages.setItems(errorViewModel.getMessages())`

#1383 Review Comments 75:
add plural `s`

#1383 Review Comments 76:
this should be localized

#1383 Review Comments 77:
I think you use exactly the same code in `copyLog`. Please extract the code in a new private method `getLogMessagesAsString`

#1383 Review Comments 78:
Remove `true`

#1383 Review Comments 79:
Is this still used?

#1383 Review Comments 80:
As I said before, please rename
LOW -> LOG
MEDIUM -> OUTPUT
HIGH -> EXCEPTION

and MessagePriority -> MessageType as well as LogMessageWithPriority -> LogMessage

#1383 Review Comments 81:
I think `TeeStream` is the wrong place to add this code. There should be a central error logger somewhere. Sorry for being a bit unspecific about this, but I right now I have no time for digging into the details.
@JabRef/developers can someone help?

#1383 Review Comments 82:
Rename to LogMessage_s_

#1383 Review Comments 83:
Please fix English. Proposal:

This call saves all messages in a list. The list is used in ErrorConsoleViewModel to filter messages according to their priority.

#1383 Review Comments 84:
Do not use "JabRef's brain". Use "JabRef's internals".

Do not use "These information" use "This information".

#1383 Review Comments 85:
Formatting.

#1383 Review Comments 86:
rename s -> message (also above)

#1383 Review Comments 87:
If I understand it correctly, then everything from systemErr is also written to consoleErr. With your implementation all messages to consoleErr are posted to the cache (`addToLog`).
So far so good. But they also get posted as well as to the underlying `errByteStream`, which is no longer required (is it?). Thus could you remove the byte stream part? 

#1383 Review Comments 88:
Please replace this class by `org.apache.logging.log4j.core.LogEvent` and `Log4jLogEvent.newBuilder().setMessage(message).build()` if you need to convert a string to the `LogEvent`.

#1383 Review Comments 89:
Please use `org.apache.logging.log4j.Level` instead.

#1383 Review Comments 90:
I think this was for test purposes, right? Please remove it.

#1383 Review Comments 91:
pls use a switch statement here and show an info by default (instead of nothing with `null/null`)

#1383 Review Comments 92:
Please go through the code that all `priority` and `prio` are properly renamed to `level`.

#1383 Review Comments 93:
Is this kind of message-rework really necessary? 
I had the hope that here a simple `LogMessages.getInstance().add(event)` would satisfy and then maybe use `event.getMessage().getFormattedMessage()` in the view (https://github.com/JabRef/jabref/pull/1383/commits/d6c8eb16d9dd0f964d0840c29a615bd19ece3819#diff-d08231c1b1e93f3d52d35f72f3b55821R112).

If this is not possible, please move the code to the view, i.e. determine there how a LogEvent should be displayed.

#1383 Review Comments 94:
@tobiasdiez if i don't split this it will be show me not so nice in list view. It looks like this, because in append-method of GuiAppender I get only one LogEvent entry with all information by insert a log entry like Log.error (e). It is not like System.err:

![2016-09-19_07h12_28](https://cloud.githubusercontent.com/assets/13031192/18623035/70c3dbba-7e38-11e6-803e-1e4b61f12877.png)
And if i don't replace System.lineseparator with "" then i will get 2 line each list cell.

That is the reason, why i have reformat this log event entry. That look better. 😄 

#1383 Review Comments 95:
I see. What happens if you use setText(logMessage.getMessage().getFormattedMessage()) to show the message instead of setText(logMessage.getMessage().toString()) ?

#1383 Review Comments 96:
I have tried it, but i get the same effect like that screenshot 😄 

#1383 Review Comments 97:
Ok, then keep your code but move it to the view if this is possible.

#1383 Review Comments 98:
Sorry I have tried it, but it doesn't let me extract to view. 😢. Other feedback I have done it 😄 

#1383 Review Comments 99:
Ok, then we leave it like that for the moment and maybe fix it later.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1378 Review Comments 1:
The progress bar will never be shown, you need to add something like this

``` java
else if (newState == Worker.State.RUNNING) {
    progress.setVisible(true);
}
```

#1378 Review Comments 2:
Maybe not the best choice, the progress bar will always be in the center but also on top of the `WebView`. In my opinion a `BorderPane` with the browser in the center and the progress bar in the bottom area would be more suitable.

#1378 Review Comments 3:
Maybe also display a message if there is no internet connection available (right now its just blank) 

#1378 Review Comments 4:
I now switched to the ProgressIndicator (instead of bar) and already hide it at 70% completion. 

--------------------------------------------------------------
--------------------------------------------------------------
#1376 Review Comments 1:
Doesn't our Parser and Writer always trim fields?

#1376 Review Comments 2:
just remove not removes to be consistent?

#1376 Review Comments 3:
Yes they do. I added this test also to make sure that single pages are detected. 

#1376 Review Comments 4:
Yeah, keep it :+1: 

#1376 Review Comments 5:
Done

#1376 Review Comments 6:
Do we really want to use stuff from mysql library here?

#1376 Review Comments 7:
Is com.google.common.base.Strings better?

#1376 Review Comments 8:
Good question :smile: I was just noticing this proprietary import that seemed like strongly mysql-related too me.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1361 Review Comments 1:
If I see right, you just want the file path as a string. So I don't think you need getTestFilePath method if you're using java.nio.path. 
See [here](http://www.java2s.com/Tutorials/Java/java.nio.file/Path/Java_Path_getFileName_.htm) for an example.

#1361 Review Comments 2:
why is the clip in a new line?

#1361 Review Comments 3:
would be nice if you would found out a way to always select the first cell and that it not depends on the content.

#1361 Review Comments 4:
`throws ...` is not necessary

#1361 Review Comments 5:
why is this field not declared final static?

#1361 Review Comments 6:
I tried using entryTable().selectRows(0) but that did not set the focus right. The pattern seems to be the easiest way to get the cell object.

#1361 Review Comments 7:
Please try to use Path instead of File

#1361 Review Comments 8:
can you assert that the selected value is the actual number X from the bib file?

#1361 Review Comments 9:
:+1: for extracting this

#1361 Review Comments 10:
Is it sufficient to check if the value in the selected row is the same as in the row with the next index? 

#1361 Review Comments 11:
Yes, you need to be sure that the next entry is selected, not that any entry is selected.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1355 Review Comments 1:
Can you create a try-finally with unlocking the lock in the finally part? This should be done in the other part of the code as well. 

#1355 Review Comments 2:
Will look at it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1348 Review Comments 1:
Could you create a constant for the regex to give it a name, something like REJECT_LONG_DASHES?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1343 Review Comments 1:
Please remove the empty lines. Makes it easier for auto-merging

--------------------------------------------------------------
#1336 Review Comments 1:
List?

#1336 Review Comments 2:
Normally I would agree with you, but in this case an Array is better, because a) varargs (...) as parameter is handled as array and  b) the array is then passed again as varags parameter to the FileNameFilterExtension.
A list would have to be converted back to array again to be passed as paramter.
And the decison for varargs was to support  multiple file extension for one type in the enum e.g. `Import_Format("Sample input format",xml,bib,dat)`
http://docs.oracle.com/javase/1.5.0/docs/guide/language/varargs.html

#1336 Review Comments 3:
OK! Makes sense!

#1336 Review Comments 4:
Get rid of print-debugging. :-)

#1336 Review Comments 5:
And here.

#1336 Review Comments 6:
Now files are always overwritten? 

#1336 Review Comments 7:
Here

#1336 Review Comments 8:
And here

#1336 Review Comments 9:
remove

#1336 Review Comments 10:
Custom layout file

#1336 Review Comments 11:
terms

#1336 Review Comments 12:
database

#1336 Review Comments 13:
BibTeXML? 

#1336 Review Comments 14:
PubMed?

#1336 Review Comments 15:
Should these be translatable?

#1336 Review Comments 16:
Below you create a `File newFile` from it, so probably no need to first convert it to a string. This actually happens in a lot of places.

#1336 Review Comments 17:
important with only one `n` (and probably add this as a javadoc comment)

#1336 Review Comments 18:
AUX file? I actually like "Aux" more but we recently had this discussion about uniform file type names 

#1336 Review Comments 19:
rename owner -> parent

#1336 Review Comments 20:
to cite Oscar: here too 💃 

#1336 Review Comments 21:
plural s: withExtensions and probably accept an arbitrary collection (not just a set)

#1336 Review Comments 22:
Inline this method

#1336 Review Comments 23:
I would make this a void method witch accepts a JabRefPreferences class

#1336 Review Comments 24:
Inline these 2 methods

#1336 Review Comments 25:
I'm not sure if it clear from the names that some of the methods actually open a dialog. Do you think something like `showDialogToGetMutlipleFileNames` is to verbose?

#1336 Review Comments 26:
Return Optional<Path> to indicate if no file was selected / dialog was aborted? Applies to this method and the ones below.

#1336 Review Comments 27:
No abbreviations pls and probably convert it directly to a path here.

#1336 Review Comments 28:
Remove debug output

#1336 Review Comments 29:
I think there was a better way to add an extension to a path using nio path methods (i.e. something like `file.toPath().concatenate(extension)` )

#1336 Review Comments 30:
No abbreviation pls

#1336 Review Comments 31:
Accept JabRefPreferences instead of operating on Globals.prefs

#1336 Review Comments 32:
Remove comments if they are not needed anymore

#1336 Review Comments 33:
no abbreviation, please check this everywhere

#1336 Review Comments 34:
I think most of the description values should actually be localized.

#1336 Review Comments 35:
Nope, the overwrite dialog is implemented as part of the JFileChooser (overriden method), so it needs not to be handled everywhere 

#1336 Review Comments 36:
I was not sure about this, so I wanted to wait for feedback. But I agree that it probably makes sense.

#1336 Review Comments 37:
Not sure, but you mean sth like this:
`JabRefPreferences.getInstance().get(JabRefPreferences.WORKING_DIRECTORY);`

#1336 Review Comments 38:
The decision against a void method is that you then can't chain it together.
You would have to create a second call.

#1336 Review Comments 39:
This is gui code so no need to inject `JabRefPreferences`? (I think @tobiasdiez means `private static String getWorkingDir(JabRefPreferences prefs) {`)

#1336 Review Comments 40:
Yes, all gui code, but still a bit confused about the Pref stuff :confused:  
The getWorkingDir() is only called from the constructor.

```
public NewFileDialogs(JFrame owner) {
        this(owner, getWorkingDir());
    }
```

So here I would need to pass the JabRefPreferences.getInstance()? 

#1336 Review Comments 41:
Yes I thought about injecting the JabRefPreferences class. So
̀`getWorkingDir(JabRefPreferences preferences)` and `NewFileDialogs(JFrame owner, JabRefPreferences preferences)` which then is called via `new NewFileDialogs(owner, Globals.prefs)`. 

Just because its GUI code doesn't mean that it is ok to work on `Globals.prefs`. We are just not as strict in enforcing the rule since sometimes it is very hard to implement. But here it is relatively simple.

#1336 Review Comments 42:
Yes you are right that you can't chain in it. But in for this method, I think chained code is harder to understand.
I have no idea what `updateWorkingDirectory` does here (since it looks like that the working directory of the dialog is updated, but thats not the case):
`new FileDialog(...).withExtensions(...).updateWorkingDir().showDialog()` 
versus

```
FileDialog dialog = new FileDialog(...).withExtensions(...);
dialog.updateWorkingDir();
dialog.showDialog();
```

is more understandable in my opinion. But I have no strong opinion on this.

#1336 Review Comments 43:
I agree that it is simple here, but I'm still under the impression that it indeed is OK. With that said, I also happens to inject it in gui code every now and then.

I guess here one may actually inject the preference value rather than the complete preferences as well?

#1336 Review Comments 44:
Oh, injecting the correct value in this particular case wouldn't make much sense. :-)

#1336 Review Comments 45:
I thought about this again and I see no advantages over injecting the Preferences or passing everytime the working directory.
The goal of the redesign was that the developer does not have to care about setting/passing the working directory every time.  Passing the Preferences every time would not make any sense to me. Addtionally, it would create some extra dependencies of Globals.prefs  to the caller class. 

#1336 Review Comments 46:
Please rewrite to `Localization.lang("%0 file", "Endnote/Refer"), "ref"),`

#1336 Review Comments 47:
Please remove this.

#1336 Review Comments 48:
Please remove this, too. "Endnote" and "Refer" are fixed names.

The other translations are OK.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1325 Review Comments 1:
Don't use underscore.

#1325 Review Comments 2:
Bah! Quick hack, so clearly didn't spend much time thinking about those
things... Will fix!

I found an ISSN where the checker claims to give an incorrect control
digit. It happens when there's a zero control (final) digit and it makes
sense that the current code doesn't work then. One more if-statement
needed...

--------------------------------------------------------------
--------------------------------------------------------------
#1318 Review Comments 1:
Wrong indent? (also the other lines)

#1318 Review Comments 2:
Hm. Will look into that. And I use gradlew Eclipse.

#1318 Review Comments 3:
@JabRef/developers Can these irrelevant statements for the other languages be removed?

--------------------------------------------------------------
--------------------------------------------------------------
#1316 Review Comments 1:
Is it possible to throw a more concrete type of `Exception` here?

#1316 Review Comments 2:
In reference to my above comment: We could certainly throw a better type of Exception here. What about an `IllegalArgumentException`?

#1316 Review Comments 3:
same here

#1316 Review Comments 4:
Even better: There is `java.util.IllegalFormatException`

#1316 Review Comments 5:
see above

#1316 Review Comments 6:
I introduced a new checked `ParseException` since the `IllegalFormatException` is "thrown when a format string contains an illegal syntax" according to the documentation (so the format string is illegal and not the string in an ill-formed format).

#1316 Review Comments 7:
Could you clarify that we can still read the old format, hence, automatically convert it to the new group format?

#1316 Review Comments 8:
No this is not true. With this PR exactly this migration code is removed, so groups in 10 years old bib files are not read correctly. But every version between 1.7 and 3.3 converted the old format to the current one.

#1316 Review Comments 9:
Ah ok. Can you provide a hint in the changelog that one can still use a JabRef version 3.3 or older to read it and convert the group format to a newer one so that it is usable for 3.4+?

#1316 Review Comments 10:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1309 Review Comments 1:
:+1: for creating JavaDoc - but please add the second parameter, too :wink: 

#1309 Review Comments 2:
@param?

#1309 Review Comments 3:
I think set/getKey would work too and might be preferable.

#1309 Review Comments 4:
I wanted to be explicit to avoid confusion, because someone might think that a key is an id. And keys are used in SQL-based databases, too. "primary key", "foreign key", etc.

#1309 Review Comments 5:
Why not introduce classes like BibTeXKey vs. InternalJabRefKey to distinguish them? Both can wrap a String inside. 

#1309 Review Comments 6:
Are you talking about the general naming of the method or about the concrete usage of `setBibTeXKey(...)` in this class? :confused: 

I think the proposed naming and reasoning of @koppor is fine. ID for internal usage - "BibTeXKey" used as in the UI...
Using additional classes for this seems to be an overkill for me.

#1309 Review Comments 7:
Hm, what is your problem with getCiteKey or getKey and getID? The description makes it clear what are the differences. Also the entry is a BibEntry, so so why clutter the method name with BibTeX again? It's not a big deal, but I think a crisper method name is nicer here.

#1309 Review Comments 8:
According to [WikiPedia's BibTeX article](https://en.wikipedia.org/wiki/BibTeX), there is a bibtex field `key`, which is ...

> A hidden field used for specifying or overriding the alphabetical order of entries (when the "author" and "editor" fields are missing). Note that this is very different from the key (mentioned just after this list) that is used to cite or cross-reference the entry.

BibTeX key is defined as follows:

> In addition, each entry contains a key (Bibtexkey) that is used to cite or cross-reference the entry. This key is the first item in a BibTeX entry, and is not part of any field
- Biber offers the `id` field and refers to the bibtex key as "citatoin key" ("Citation key aliases for the main citation key.")
- [citation key is more common than cite key](http://www.googlefight.com/cite+key-vs-citation+key.php)

Since "citation key" is longer than the old Cite key", I will undo this renaming and keep `CiteKey`.

--------------------------------------------------------------
#1308 Review Comments 1:
Please update your Eclipse settings. See https://github.com/JabRef/jabref/issues/1091

#1308 Review Comments 2:
Why is this method removed?

#1308 Review Comments 3:
Do not update data value without notifying the user. If you want to propose such a change, please open a new PR.

#1308 Review Comments 4:
Do not readd these things. See https://github.com/JabRef/jabref/pull/1297

#1308 Review Comments 5:
see above

#1308 Review Comments 6:
Unfortunately, this is not what is requested at https://github.com/JabRef/jabref/issues/759

I want to select a single field in the UI to hide or unhide (second bullet point).

The third bullet point means that I want to unhide all fields in the cleanup dialog. This is an request, which should come at last, the coloring and the hide/unhide functionality is more important.

#1308 Review Comments 7:
Why is this code removed? See https://github.com/JabRef/jabref/pull/1281#discussion_r60948627 for a discussion about the addition of this code.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1304 Review Comments 1:
Why Globals.NONE? Why not simply an empty string? Seems to be an unecessary dependency. 

#1304 Review Comments 2:
Yes, you are right. Interestingly the Globals.NONE was used before. I will look into that this evening.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1298 Review Comments 1:
why the indent here?

#1298 Review Comments 2:
Don't use underscores here and remove String.format (or is this necessary?)

#1298 Review Comments 3:
No it's not necessary this was from a previous version and is now removed.

#1298 Review Comments 4:
Creating this info version string along with the static variables should be moved to the BuildInfo class. 

#1298 Review Comments 5:
I moved them into the BuildInfo class and made them static

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1282 Review Comments 1:
Thanks!

#1282 Review Comments 2:
Is this the correct abbreviation or should one deal with parts without capitals in a special way?

#1282 Review Comments 3:
Thinking again, maybe it is better to just leave it like this and work on the TODO above.

#1282 Review Comments 4:
Not sure I understand this Java code, but, for the record, the regular abbreviation of Tse-tung is T. 

#1282 Review Comments 5:
I think it depends a bit on the convention / citation style which abbreviation is "correct". In the end I decided to leave it like that because it is not a big deal.

@mlep thanks for reporting this issue in the first place. I think the author formatting has still some problems with not-so-common-cases.

--------------------------------------------------------------
#1281 Review Comments 1:
This change should be places somewhere else, shouldn't it?

#1281 Review Comments 2:
Sure? - Wie wanted to force the caller to use clearField and not this setField method. Therefore Objects.requireNonNull

Shouldn't we add a test of non emptiness and throw an IllegalParameterException?

#1281 Review Comments 3:
<s>What about the comments before the entry? I thought, these are also stored in the entry, aren't they?</s> Comments are not (yet) stored (see #1026). Thus, this seems to be OK.

#1281 Review Comments 4:
When there are non equal entries, how do I see the differences easily? With the old implementation, I could see the differences in string representations. What about the new way?

![grabbed_20160425-190925](https://cloud.githubusercontent.com/assets/1366654/14792190/71bdf97a-0b19-11e6-87e2-911218e771de.png)

#1281 Review Comments 5:
This is another change. Sure, that this should go into this PR?

#1281 Review Comments 6:
Why not (`!o instance of BibEntry`)?

#1281 Review Comments 7:
After thinking a bit more, I would keep the other changes in this PR, but not do this change here. This eases writing test cases. Possibly, one should add your assertEquals additionally to be 100% sure that both the canoncial representation and th eentry themselves equal.

#1281 Review Comments 8:
No, every time JabRef writes a newline somewhere it uses Globals.NEWLINE...except here.

#1281 Review Comments 9:
I do not see any value in storing empty fields. They are not written anyway. Throwing an exception complicates things as the user might set the text to the empty string in the bibentry editor.

#1281 Review Comments 10:
This change was the whole point of the PR :smiling_imp: 
If the entries are not equals, then JUnit calls the toString method and says `expected a.ToString but got b.ToString` so you still get a meaningful message in this case. 

#1281 Review Comments 11:
Yeah, I got some failing tests due to empty cite keys and while investigating replaced these calls. Its some additional code cleanup and I did not saw any value in opening an extra PR for this commit.  

#1281 Review Comments 12:
Since I do not want to include subclasses, these should implement a proper equals method themselves. 

#1281 Review Comments 13:
Yep, this way is the right approach. However I would prefer this template (recommend by java Expert Michael Inden in his book "Der Weg zum Java Profi")

``` java
@Override
public boolean equals(Object other)
        {
            if (other == null) // Null-Akzeptanz
                return false;

            if (this == other) // Reflexivität 
                return true;

            if (this.getClass() != other.getClass()) // Typgleichheit sicherstellen 
                return false;
final BibEntry = (BibEntry) other;
return .....
```

@koppor  For more info see here: https://www.artima.com/intv/bloch17.html
Equals with instanceof would additionally violate symmetry. 

#1281 Review Comments 14:
@tobiasdiez  Maybe it is useful to override the toString method implementation?

#1281 Review Comments 15:
At the moment it is 
@Override
    public String toString() {
        return CanonicalBibtexEntry.getCanonicalRepresentation(this);
}
which is probably what we want.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1273 Review Comments 1:
Please do not remove the action here. Use it as it was used before. 

#1273 Review Comments 2:
The thing is that it only makes sense if the new Action inherits GeneralAction, which is a private class in JabRefFrame. Then it just is stored in a field. Since there seems to be little reason storing it in an unused field in the new Action and it was only used there, I didn't see any point in keeping the String.

#1273 Review Comments 3:
In GeneralAction, the idea is to run a command based on this (which you probably are aware of). However, the earlier implementation didn't use that as actionPerformed was overridden, so it didn't have any effect at all.

#1273 Review Comments 4:
I would prefer if the entry is used as a reference and not its cite key (in case of duplicate cite keys...)

#1273 Review Comments 5:
I would use a dedicated table model here, see http://stackoverflow.com/questions/7378013/connect-a-list-of-objects-to-a-jtable

#1273 Review Comments 6:
I think a simple model as this suffices in that case. If it gets bigger, we can switch a dedicated table model class. 

#1273 Review Comments 7:
This would require a dedicated table model (I think) and currently it seems like a bit of overkill. But, yes, it would make sense to have some reference to the entry. The method called will not open the entry if there are duplicate keys though.

--------------------------------------------------------------
#1269 Review Comments 1:
Remove comment

#1269 Review Comments 2:
currentID++;

#1269 Review Comments 3:
You used SQLException before?!

#1269 Review Comments 4:
Maybe take a look at what I did in #1265
I replaced all throws Exception with their typed ones 

--------------------------------------------------------------
#1265 Review Comments 1:
@mlep  That are all help pages I could find in the code.

#1265 Review Comments 2:
The indention seems to be a bit off in the whole file.

#1265 Review Comments 3:
@Siedlerchr Thanks. Diagnosis is here: JabRef/help.jabref.org#11

#1265 Review Comments 4:
@Siedlerchr Below I found

>   private final JButton help = new
>   HelpAction(Localization.lang("OpenOffice/LibreOffice integration"),
>            HelpFiles.OPENOFFICE_LIBREOFFICE).getHelpButton();

So, I am wondering if it is ok the line above is empty (out of curiosity, since I am no Java programmer).

#1265 Review Comments 5:
Oh, thanks for the info!  I oversaw that the corresponding help page already exists. Will add this now. :sweat_smile: 
Just for info, at that line I added a new String for Localization in the properties file. (A tooltip).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1250 Review Comments 1:
Why do you remove the user file dir individual default values? 

#1250 Review Comments 2:
`USER_FILE_DIR_INDIVIDUAL` was never a real preference and only used as a key to some other preference, i.e. the code read `pref.get(pref.get(USER_FILE_DIR_INDIVIDUAL))` before and now takes the form `pref.get(pref.getUser())`. Moreover, `USER_FILE_DIR_INDIVIDUAL` was never set and so stayed at the default value.

--------------------------------------------------------------
#1246 Review Comments 1:
Dont call it 1245 please :smile: Name it by what it does check.

#1246 Review Comments 2:
Yeah, I do not really know what it checks. ;-) (But I'll figure something out.)

#1246 Review Comments 3:
Something with empty strings as values?! maybe the oxford comma is even a separate test case?

#1246 Review Comments 4:
I was considering a separate test case, but it would (could) look exactly the same, so I thought it made more sense to have both in one.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1241 Review Comments 1:
I think this is kind of double code:
Your first collect all files and then filter on them, but you are only searching for some specific files:
You could instead use: Stream stream = Files.list(Paths.get) and then apply the filters directly on it or you directly use Files.find(...) to only find the bib files

Have a look here at Listing Files / Finding Files:
http://winterbe.com/posts/2015/03/25/java8-examples-string-number-math-files/

#1241 Review Comments 2:
please just throw the exceptions

#1241 Review Comments 3:
what about trying to import the previously exported document and then just compare the databases? This should ensure that they behave correctly together.

#1241 Review Comments 4:
Why not use Files.readAllLines and just compare the list? This code is very hard to read as it is very technical.

#1241 Review Comments 5:
abstracts are copyright protected ......... this has come up in so many of the stupro PRs, please do communicate such things within your group.

#1241 Review Comments 6:
why no indention?

#1241 Review Comments 7:
In the wiki, we have at the moment 2 databases that could be used for testing.
This list could be complemented with custom-made entries fitting the purpose of the tests (for example, the listed BibTeX database does not contains an "abstract" field). This would avoid having to create entries over and over again.

#1241 Review Comments 8:
I think our importer and exporter are not good enough to handle such roundtrips. However, comparing the files just as plain strings should work without any problems and should reduce the complexity of the test.

#1241 Review Comments 9:
Can you please add a overload to the performExport method in the export ExportFormats which accepts the file as an nio.Path instead of a stringy pathname. 

#1241 Review Comments 10:
The temp File can be created in the setUp method.

#1241 Review Comments 11:
Inline the entries field since it is not used across tests or initialized in the setup method. 

#1241 Review Comments 12:
The problem with using the database is, that when there are more than one entry, the order of the elements in the exported xml file is somehow changing everytime. So I cannot make one xml document for all entries in the database, but have to make a xml file for every entry. So if you're fine with it, I wouldn't use the database here.

#1241 Review Comments 13:
No need to copy the javadoc comments when overwriting a method.

#1241 Review Comments 14:
Use Collections.emtyList()

#1241 Review Comments 15:
Use assertEquals(expected, exported)

#1241 Review Comments 16:
This won't work here. The order of the entries, that are exported, is not always the same. So just assertEquals(expected, exported) sometimes goes through and sometimes fail.

#1241 Review Comments 17:
Why is this a field instead of a local variable?

#1241 Review Comments 18:
everything that you set in methods marked `@Before` should not be stored in static fields. Please check in your other tests as well. 

#1241 Review Comments 19:
Do not mix static and non-static fields here. Group them together and add an empty line between them. Please check in your other tests as well. 

#1241 Review Comments 20:
Abstracts are copyright protected...

#1241 Review Comments 21:
Abstracts are copyright protected...

#1241 Review Comments 22:
I've wrote the abstract myself, so I don't think that this should be copyrigthed?

#1241 Review Comments 23:
I've changed it to a local variable.

#1241 Review Comments 24:
I've changed them to non-static.

#1241 Review Comments 25:
done.

#1241 Review Comments 26:
expected is the first parameter
always use Collections.emptyList() instead

#1241 Review Comments 27:
replace `files =` with return

#1241 Review Comments 28:
Then sort them so that the order is the same. 

#1241 Review Comments 29:
This does not always hold true. Often, when you publish something, you have to sign a lot of paperwork which may influence your rights to publish parts of it anywhere. Please replace this with dummy text, as we do not want to keep track which abstracts in our test data are OK to be included and which are not. 

#1241 Review Comments 30:
ok I've changed it to a dummy text.

#1241 Review Comments 31:
done.

#1241 Review Comments 32:
done

#1241 Review Comments 33:
done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1231 Review Comments 1:
I don't understand the changes in this file, especially the added underscore.

#1231 Review Comments 2:
The added underscore was just an ugly way to do search and replace in both Java and properties-files. (The translator replaces spaces with underscores, finds the correct property and then replaces the underscores with spaces, so adding it initially doesn't matter.)

The translation changes was primarily finding better wording ("FontSelector" is probably a worse tile compared to "Font selection", most strings do not use title case, so "Font family" instead of "Font Family" etc).

Removed exceptions were not thrown by the methods.

UPPER/LOWER made sense in the old dialog, now LEFT/RIGHT is more intuitive.

Variable names flds, s1, s2 were not that descriptive.

Lambdas

Commented out code was removed.

#1231 Review Comments 3:
String only used in this class.

#1231 Review Comments 4:
Bad case of search and replace...

#1231 Review Comments 5:
fields should not start with capital letter.

#1231 Review Comments 6:
Most translations doesn't follow the capitalization anyway.

#1231 Review Comments 7:
SchriftenWähler? (If it should have followed the old naming.)

#1231 Review Comments 8:
Ok, so can you please remove the underscore again?

--------------------------------------------------------------
#1230 Review Comments 1:
instead of extracted methods, I would prefer separate classes.

#1230 Review Comments 2:
Why can this check be removed?

#1230 Review Comments 3:
I just saw there is a throwable in thrown in saveAs() (some lines above, can't mark it here directly)
Can you please check if this is necessary or if it can be replaced by some more specific exception type?

#1230 Review Comments 4:
Try using the new nio Path methods.
You could see my latest commit  #1218 as an example.

#1230 Review Comments 5:
The loop above will only exit when file != null.

#1230 Review Comments 6:
Oh, I prefer to not go into the Throwable-business... It seems to be easily replaceable, but there's a clear risk that eventually something will break...

#1230 Review Comments 7:
You can always change a Throwable to an Exception, as Errors cannot be handled by JabRef. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1227 Review Comments 1:
The type is GroupTreeNodeViewModel

#1227 Review Comments 2:
OK! I just let Eclipse decide. :-)

#1227 Review Comments 3:
In that case, I would move the requireNonNull check to the first usage as a the requireNonNull also returns the passed object.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1218 Review Comments 1:
The condition has been removed which may cause trouble. I think using the folder if a file has been deleted should still be done.

#1218 Review Comments 2:
Exception spelling

#1218 Review Comments 3:
@simonharrer  The thing is about the Search Directory, not individual files
If accidentally a file (e.g.  xyz.pdf)  is selected or stored in the settings, the parent (e..g the directory) of this file is used.
And the FileChooser dialog only allows to select a directory, not a single file (not visible).
I tested all kind of cases and also when the folder is deleted etc.
That is also why I decided to implement the checks here, when the scan Button is clicked

--------------------------------------------------------------
#1217 Review Comments 1:
I think the sorting of the imports differs from https://github.com/JabRef/jabref/issues/1091

#1217 Review Comments 2:
I think there is a method BibEntry.getFields which returns the map.

#1217 Review Comments 3:
I would refer to # as the number sign, because "hash" reminds me too much of the hash code. Maybe use some more functional name like `BibStringChecker`

#1217 Review Comments 4:
I tried to find it, but either field names or field content as far as I can
tell. Would clearly be more convenient/cleaner.

#1217 Review Comments 5:
If it not yet exists, then just create it.

#1217 Review Comments 6:
Maybe. However, in this context "number sign" seems incorrect. HashMarkChecker?

#1217 Review Comments 7:
I use Eclipse, so it should behave as we want it to if nothing else... I changed it manually though.

#1217 Review Comments 8:
OK. I assumed that there was a reason that it didn't exist, but I created it now.

#1217 Review Comments 9:
Now I read and understood the complete comment. BibStringChecker is good.

#1217 Review Comments 10:
The latest comment by @koppor in #1091 does not reflect the correct settings for Eclipse. See the comment by Simon for IntelliJ.

#1217 Review Comments 11:
OK! I didn't follow it that much, but got the impression that those were the correct settings (I use another version btw, so slightly different look).

--------------------------------------------------------------
#1216 Review Comments 1:
Instead of passing booleans to constructors, it is better to use an enum instead. Because I have no idea what the true in that case means. 

#1216 Review Comments 2:
Could this method be extracted into a separate class, something like a AutosaveAwareParser?

#1216 Review Comments 3:
We could move this method and other code to a JabRefGUI class which then loads the gui, sets the look and feel, etc.

#1216 Review Comments 4:
true ;-)

#1216 Review Comments 5:
Remove Optional. I think it is cleaner to return an empty list instead of Optional.empty

#1216 Review Comments 6:
Rename to `getFilesToOpen`?

#1216 Review Comments 7:
Extract export matches to new method.

#1216 Review Comments 8:
Return a list of loaded files instead of accepting it as a parameter?

#1216 Review Comments 9:
Move to OpenDatabaseAction?

#1216 Review Comments 10:
I was thinking about that, but as there is a return in that part it was a bit of a hassle to rework the logic...

#1216 Review Comments 11:
Done (not the renaming though).

#1216 Review Comments 12:
I moved it there, not sure if it is better or not.

#1216 Review Comments 13:
Good idea!

#1216 Review Comments 14:
Returning a boolean which indicates whether the call was successful or not does not work?

#1216 Review Comments 15:
I think this method should be renamed and get a more meaningful javadoc.

#1216 Review Comments 16:
Does this really have to be public?

#1216 Review Comments 17:
I think so as it is accessed and compared against in quite a few places. The alternative would be to provide a method that compares against it (or rather check that the three parameters are null). In general, I do not really get the logic for all these comparisons...

#1216 Review Comments 18:
Better name for sure. Any suggestion? Javadoc: I see the point, but not really sure what to write than, more or less, combine the argument descriptions "Open bib-file and possibly ignore autosave file", sort of.

#1216 Review Comments 19:
Btw, an empty list can be returned although the call is correct and valid, e.g. everytime JabRef is started without any argument, so some additional logic was required to deal with the erroneous cases (which is why the Optional was there in the first place).

#1216 Review Comments 20:
+1 for encapsulating the check as a a pblic method in ParserResult.

#1216 Review Comments 21:
Something like `loadDatabaseOrAutoSave`? I have no idea what this method actually tries to do and how it compares against the other methods in the OpenDatabaseAction class. This was also the point of me wanting a more descriptive javadoc.

#1216 Review Comments 22:
I have no idea either. ;-) But let me see what I can figure out.

#1216 Review Comments 23:
Yes, that is indeed an option.

--------------------------------------------------------------
#1215 Review Comments 1:
This can be a simple string, right?

#1215 Review Comments 2:
I would prefer a simple hard-coded input. Mainly because it reduces code complexity. Moreover, it serves as a good baseline and then you might add some variations (like format of strings which need cleanup vs strings which don't).

#1215 Review Comments 3:
Except that each run converts 1000 strings. But if a static string should
be used I guess it is enough to create a single (quite long) string.

#1215 Review Comments 4:
Why 1000? I don't see a for loop in your code.

#1215 Review Comments 5:
You are right... Forgot to do that part... Anyway, maybe better to have a single longer hard-coded string.

#1215 Review Comments 6:
What is the function of all these brackets and escaped backslash? I would have expected `$\Epsilon$` (or even better `\( \Epsilon \)` )

#1215 Review Comments 7:
Well, ä is correctly written as  {\"{a}} which as a Java String becomes
that.

\Epsilon is only valid in math mode and for the \Epsilon to stay a capital
\Epsilon double {} are needed in the title field, see #405.

#1215 Review Comments 8:
In my opinion the capitalization shouldn't be handled by the HtmlToLatex formatter; we have a special cleanup for preserving capitalization. BibLatex has absolutely no problem with a simple $\Epsilon$. Similarly, I don't see any reason to not write ä as `{\"a}` (so removing the brackets around the a). Maybe, Biblatex don't even need the outer brackets.

#1215 Review Comments 9:
It is not actually capitalization. It is about replacing the HTML/Unicode symbol with the correct LaTeX command. Consider `\Leftrightarrow`. And see #405. Btw, the cleanup doesn't handle this case so it isn't a solution (try `\AA`). I cannot say anything about Biblatex, but for BibTeX it is an actual problem.

For the umlaut, see:
http://tex.stackexchange.com/questions/57743/how-to-write-%C3%A4-and-other-umlauts-and-accented-letters-in-bibliography
https://en.wikibooks.org/wiki/LaTeX/Special_Characters
and consider using another accent, like `\k`. so `{\ka}` based on your suggestion. I read a very good explanation about why `{\"{a}}` and the like is the correct way, although other cases work in specific situations, but I cannot find the link right now. I doubt Biblatex has solved the final case, unless it is at the end of a word (LaTeX will complain if nothing else. Again, imagine `{\ka}` (which you can write `{\k a}` to get around the first problem), inside a word, so `b\kab` or `b\k ab` or `b\k a b`. I'm quite sure none of these will give the correct result.

#1215 Review Comments 10:
I do use a lot of `\"a` in the bin files without braces. Is this handled with this Mapping as well? Or do we need a Checker for detecting the usage without Curly braces?

#1215 Review Comments 11:
Yes, and the correct latex command is `$\Epsilon$` without any braces! The reason I'm insisting on this is that BibLatex/Biber can automatically convert Latex code to Unicode, but then of course `{{\"a}}` is converted to `{ä}` which is not the desired output.

By the way, it is better to preserve the capitalization of `Ägypten` by `{{\"{A}}gypten}` (i.e. the braces enclose the whole word and not just the capital letter so that kerning works as expected), see http://tex.stackexchange.com/a/140071/34554. If the preserve capitalization cleanup is not able to do this right now, then it should be improved...

Finally, have a look at https://github.com/plk/biber/blob/dev/lib/Biber/LaTeX/recode_data.xml which provides a huge map from latex to unicode (and I like their data scheme more then our internal maps!). Finally, https://github.com/plk/biber/blob/dev/lib/Biber/LaTeX/Recode.pm may also be helpful.

#1215 Review Comments 12:
We should also think about having a LaTeX free Version of the field value in the bibentry required for searching without braces. This class should be able to provide this.

#1215 Review Comments 13:
Writing `\"a` is OK, but it is not wise for a piece of software to replace ä with `\"a` as there are many situations where it will lead to errors. So, if a single context independent string should be used it is `{\"{a}}` as that will always give the correct output. Same thing with `&Epsilon;`, if we want to guarantee that Ε is produced under all circumstances, we should use `{{$\Epsilon$}}`. Yes, kerning will not be perfect, but I'd rather take that than ε.

One should probably differ between two cases here. The Ägypten example is actually quite good. Somehow, I would think that this should be converted to {\"{A}}gypten as we cannot know that the Ä should always be capital (in the general case). On the other hand, in most cases, if we get &Delta; we can be quite sure that we actually want  Δ  as this is most likely used as a symbol rather than a character in a word. So, yes, somehow that is a bit inconsistent.

Automatically adding {} will never work properly as _it is completely OK to have capital letters without {} in a .bib-file._ One should just be aware of the fact that the .bst determines the outcome. I'm therefore quite doubtful about that checker and will never add {} to any capital letters unless I know for sure that they always should be capital as the .bst-file will take care of it (and that is the purpose of the .bst-file). That is the reason of the CaseKeeper using a list of words that should be kept in capital form rather than just blindly adding to any capital words as that is not discriminant enough. An improvement here would be to either extend these lists and/or support a user-defined list (that would solve the Ägypten case in a clearly better way).

If someone wants to write a better converter feel free to do so, but please make sure that it is indeed better and produces consistent code yielding correct output in the final document. The current one is far from perfect, but it does its job quite well when looking at the end result (it has saved me an immense amount of time if nothing else) and not merging these things in because someone might write a better converter at some stage seems quite stupid to me.

Again, feel free to update the internal format, but make sure you also add the HTML stuff. And one can wonder how often ✎ is really needed...

#1215 Review Comments 14:
And one will need to distinguish between LaTeX and BibTeX. It is like writing "the correct way to write JabRef in LaTeX is `JabRef` not `{JabRef}`!".

Finally, do not forget that lots of people still use BibTeX and not Biblatex. For lots of reasons. And if Biblatex had a good enough converter it would produce `ä` not `{ä}`. JabRef will convert `{{{{{{{\"{{{{a}}}}}}}}}}}`to `ä`. Despite using a non-XML format of the conversion table.

#1215 Review Comments 15:
Well, if you think these extra braces are that important then go for it and hope every biblatex user actually uses Unicode...

#1215 Review Comments 16:
But do these braces end up in the final (dvi/ps/pdf) document? The only way for that to happen is if Biblatex escapes them...

#1215 Review Comments 17:
Yes, they end up in the output the same way as they do for bibtex: as kerning problems. 

#1215 Review Comments 18:
OK. Talking about kerning problems one shouldn't use `{\"{a}}` etc at all
(which is why Biblatex converts to Unicode first). But again, choosing
between kerning problems and wrong symbol, I'd pick kerning problems any
day of the week.

And in that particular example the only potential kerning problems is for
Epsilon, not for ä, which is most likely not part of a word anyway (I have
a hard problem believing that Greek people write their references using
equations...).

It is indeed a bit annoying that the extra braces are only needed in the
title field though.

#1215 Review Comments 19:
Please remove these conflict markers.

#1215 Review Comments 20:
I did that. Manually merged this.

--------------------------------------------------------------
#1214 Review Comments 1:
According to https://github.com/JabRef/jabref/issues/1091, there should be an empty line before the JabRef-specific imports.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1207 Review Comments 1:
Why return null here (and in similar places)?

#1207 Review Comments 2:
Since I have no idea for which extensions these importers support. 

See above:

> Remark: The methods getExtension and getDescription are not implemented by almost any importer. This should be done. Maybe this is something for the stupro?

#1207 Review Comments 3:
Ah, OK. Tired... Somehow, the questions was also, why not an empty list?

--------------------------------------------------------------
#1206 Review Comments 1:
Please start the sentence with a capital letter. Also, I'd say this is not a fix but a change?!

#1206 Review Comments 2:
done, and I would definitely say that this is a bug (look at the steps to reproduce in the first post).

#1206 Review Comments 3:
:+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1201 Review Comments 1:
Such a method already exists in Guava: http://docs.guava-libraries.googlecode.com/git-history/v10.0.1/javadoc/com/google/common/base/Strings.html#repeat%28java.lang.String,%20int%29
Should we use this method instead?
If not I would propose to change the name of `nCharacters` to `repeat(char, int)` and similarly `repeatSpaces(int)`

#1201 Review Comments 2:
Init StringBuilder with the right capacity `n`

#1201 Review Comments 3:
I've seen references to it when googling, but wasn't sure which libraries we already use (there's also one in Apache StringUtils).

#1201 Review Comments 4:
Good idea!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1190 Review Comments 1:
Unwanted space before "toolbar"

#1190 Review Comments 2:
Wrong slash?

#1190 Review Comments 3:
Slash at wrong position?

#1190 Review Comments 4:
Missing slash?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1170 Review Comments 1:
I find it more readable without the brackets...

#1170 Review Comments 2:
Think, this is the eclipse setting we agreed about half year ago. We add brackets as much as possible to help readers not familiar with operator precedence to understand the code.

#1170 Review Comments 3:
That is an automatic Eclipse addition... All brackets or outer brackets? Outer brackets I find quite useful, but I agree that the ones surrounding i + 1 could be skipped. There are even some more annoying cases of these brackets, e.g. (or a quite similar case)

```
j = k - l + m;
```

becomes

```
j = (k - l) + m;
```

#1170 Review Comments 4:
Oh ok, you already had a discussion about it, never mind.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1161 Review Comments 1:
not formatExample? The empty string should be covered by the general tests.

--------------------------------------------------------------
--------------------------------------------------------------
#1159 Review Comments 1:
Since this is a cleanup PR, could you please also move these test cases to separate test files for the respective CaseChanger (e.g. LowerCaseFormatterTests)

#1159 Review Comments 2:
Using the setup method is the preferred way to init objects under test (since then every test method gets a new object and possible modifications from a previous test are erased). This is probably not a big deal for the formatters but I wouldn't break the pattern here.
Same applies to the other formatters too.

#1159 Review Comments 3:
This is an actual test :smile_cat: 

#1159 Review Comments 4:
Replace layout by formatter?

#1159 Review Comments 5:
Quoting [Junit's JavaDoc](http://junit.sourceforge.net/javadoc/org/junit/Test.html) (referenced from http://stackoverflow.com/a/16714168/873282).

> To run the method, JUnit first constructs a fresh instance of the class then invokes the annotated method

Thus, the effects should be the same and my proposal the one with less LOC for the same effects.

#1159 Review Comments 6:
Fixed (via changing the commit "Formatters tests: Remove methods already covered by FormatterTest" from 9de60b5b8cf04 into 1262c2551e266.

#1159 Review Comments 7:
Fixed by changing the commit "Unify formatter tests" from 4f8fe59423896e1645 to 529bdab7aa900563

#1159 Review Comments 8:
See also commit note at "Unify formatter tests" (529bdab7aa900563)

#1159 Review Comments 9:
Done in 8e0ce84

#1159 Review Comments 10:
I am OK with the changes.

#1159 Review Comments 11:
Yes, for each test method a new instance of the test class is used. However, all the different instances are created before any test is run. So if the constructor and a test method modify some global objects, then these changes might carry over to the next test.
Some discussion about this can be found here http://stackoverflow.com/questions/512184/best-practice-initialize-junit-class-fields-in-setup-or-at-declaration.
But in the end it is just a minor conventional thing...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1149 Review Comments 1:
How does this method compare to expandAll (?) in StringUtil? Could that be replaced by this (later) as this seems more competent?

#1149 Review Comments 2:
Ahh, I know the answer for that... Somehow I didn't see StringUtil in the diff the first time. :-)

#1149 Review Comments 3:
Nice additional tests! Will "{\'{E}}" work? As in a dot is added.

#1149 Review Comments 4:
Hmm, I'm wondering if it is possible to skip this expansion... Probably we will have to decide on either hardcoding MD (medical doctor) and disappoint people with Marie David as middle names or just live with it.

#1149 Review Comments 5:
No it will not. The dot will be added only if the uppercase letter is followed by a whitespace, dash or tilde. I think it would be to hard to detect all the latex stuff.

#1149 Review Comments 6:
Yeah... you are right it is a bit annoying. But I think the majority of author names does not contain the degree (MD, PHD, ...) of the author or set it up properly as the Jr part. 

#1149 Review Comments 7:
Makes sense. It might be possible to run RemoveLatexFormatter  (or whatever it is called) and do the detection on the stripped string but probably not worth it for such a corner case.

#1149 Review Comments 8:
It might (eventually) make sense to replace expandAuthorInitials with the name formatter. Even though they doesn't do exactly the same thing, if I recall correctly expandAuthorInitials is used in two importers only and it should be OK to possible change the complete formatting of those author fields.

#1149 Review Comments 9:
Not obvious why they need to brag about their titles in the first place. :-) (And I know that some of you might end up to write Herr Prof. Dr. Ing. Hab. Prof. Dr.)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1144 Review Comments 1:
One could create a Map<String, Formatter> which contains the mapping.

#1144 Review Comments 2:
I would return a NotFoundFormatter here as well, avoiding this evil null value :)

#1144 Review Comments 3:
At first, I thought so, too. However a map would require that all formatters are initialized although only one of them is returned (and a static map is not possible since some of the formatters have constructor arguments).

#1144 Review Comments 4:
Done.

#1144 Review Comments 5:
ok

--------------------------------------------------------------
--------------------------------------------------------------
#1142 Review Comments 1:
Please use containsKey(Key), because a HashMap allows to have a Null Key and this is therefore not a valid indicator.  I just read about that today.
There might be also other pieces in the code that use the same logic. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1138 Review Comments 1:
Is the resetImportFormats really necessary? I would have expected that the constructor takes care of initializing a correct importformatreader.

#1138 Review Comments 2:
Yes. There is no explicit constructor. Maybe has something to do with the
preferences not being initialized? resetImportFormat() is called quite
early in JabRef.start

--------------------------------------------------------------
#1137 Review Comments 1:
Duplicates are no longer allowed. Please just add your translation in an existing line, do not create new key value pairs. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1133 Review Comments 1:
Alternative: falscher_Eintragstyp,_weil_'Konferenzbericht'_Feld_mit_Seitenzahlen_hat

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1126 Review Comments 1:
Would you mind removing your name here? All contributors are of course listed in https://github.com/JabRef/jabref/blob/master/AUTHORS.

#1126 Review Comments 2:
There is a method `isProtected` (or something like that) in `MetaData` which is (now) the preferred way to receive this information.

#1126 Review Comments 3:
Could you please split your addition in multiple, smaller methods so that the code is easier to read/understand. Thanks. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1117 Review Comments 1:
Ahh, you also picked the wrong ones... ;-) I merged duplicate-free versions for sv, da, and es quite recently.

#1117 Review Comments 2:
what do you mean by that? is there something wrong?

#1117 Review Comments 3:
BibTex vs BibTeX...

--------------------------------------------------------------
--------------------------------------------------------------
#1114 Review Comments 1:
Is there a particular reason for using the exact type in the variable declaration? Why not just `Formatter`?

#1114 Review Comments 2:
Not really. I had some issue with it and decided to go down the easiest path... (It doesn't implement LayoutFormatter anymore, do not know what I tried as an intermediate solution.)

#1114 Review Comments 3:
Maybe I was simply confused which caused the problem solved by the exact type.

#1114 Review Comments 4:
The problem was a name clash with `java.util.Formatter` which could be solved by importing `net.sf.jabref.logic.formatter.Formatter` explicitly. I've done that and will merge the PR when the checks are completed.

#1114 Review Comments 5:
Here, I would use `LatexToUnicodeFormatter`, because this class really depends on that formatter.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1103 Review Comments 1:
formatting

I would use more elements, e.g., 10k as this should be more helpful for finding the issues.

#1103 Review Comments 2:
can we define any thresholds?

#1103 Review Comments 3:
Nice configuration in gradle :)

#1103 Review Comments 4:
this method should be inlined, as it is very simple. 

#1103 Review Comments 5:
The writing operation takes per iteration over 2 minutes with 10k items. So this would result in > 30 min benchmark time.

#1103 Review Comments 6:
Not that I'm aware of. In the end JMH only runs the benchmarks and writes a result file.

I found plugins for [jenkins](https://github.com/blackboard/jmh-jenkins) and for [teamcity](https://github.com/presidentio/teamcity-plugin-jmh) but apparently there is nothing similar for circleci or travis.

#1103 Review Comments 7:
Hm, ok. Then leave it as is. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1097 Review Comments 1:
I think it would make sense to add a method `isPersonName(field)` to InternalBibtexFields since this is check occurs quite often.

#1097 Review Comments 2:
I think a slightly cleaner solution would be to add and use a method `InteralBibtexFields.getPersonFields()`.

#1097 Review Comments 3:
I would move these lists to InternalBibtexFields.

#1097 Review Comments 4:
Mhhh...according to https://en.wikipedia.org/wiki/Date_format_by_country this format is only used by Korea and Mongolia. And it also does not show up on https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx. Do you think it is really worth adding?

#1097 Review Comments 5:
I was considering that, but at the same time there may be quite a few different methods of that type provided that one supports all properties. But I agree that the call is quite long considering that there are long class names etc and that this is probably the most frequent call.

#1097 Review Comments 6:
That list would typically be longer, so more iterations. Also, if we have e.g. a DateChecker, one can add a simple if-clause below this. Probably one should add the JOURNAL_NAME property to a few more fields and run that checker for those fields.

#1097 Review Comments 7:
I was considering that and am open to input here. I can see the point of keeping model clean, but on the other hand, it seems to make sense to keep the information "close to" the source. (In IEEETranEntryTypes the corresponding fields are there.)

#1097 Review Comments 8:
Almost all my .bib-files have that format (or rather uuuu.MM.dd, but this seems to cover that as well). Not sure why, but the files are created on both Linux and Windows and some are from my (non-Swedish) PhD students, so for some reason it seems quite common. Default in older versions of JabRef? (I would never select that format myself, so I haven't configured it for sure.)

#1097 Review Comments 9:
I think performance is no issue here as you iterate over like 10 items, so I would put my priority on readability. On second thought, I would even propose to move the code to AuthorNameChecker and remove its constructor argument.

#1097 Review Comments 10:
One way to enhance readability would obviously be to have shorter class names. I honestly think that it is the major concern here. `Internal.get(field).contains(NAME)` is pretty much more readable... However, in this case, moving to AuthorNameChecker clearly makes more sense and is probably what I had done with more insight into the Checkers. I'll give it a go.

#1097 Review Comments 11:
Are not all kinds of BibTex fields already  somewhere defined  globally as
constants?
e.g. author, editor. Then it would be easy to just use them,. e.g
GlobalFields.AUTHOR or somehow...

And is "editora" a correct field?

2016-04-04 22:46 GMT+02:00 Tobias Diez notifications@github.com:

> In src/main/java/net/sf/jabref/model/entry/BibLatexEntryTypes.java
> https://github.com/JabRef/jabref/pull/1097#discussion_r58445744:
> 
> > @@ -871,4 +871,10 @@ public String getName() {
> >      public static Optional<EntryType> getType(String name) {
> >          return ALL.stream().filter(e -> e.getName().equalsIgnoreCase(name)).findFirst();
> >      }
> > +
> > -    public static final List<String> BIBLATEX_PERSON_NAME_FIELDS = Arrays.asList("author", "editor", "editora",
> 
> I would move these lists to InternalBibtexFields.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1097/files/4fabed3c696dbdb33c4283183705ffecccd645a8#r58445744

#1097 Review Comments 12:
No, not all field, only some (configurable?). Yes, editora, editorb, editorc are defined in BibLatex. There are also namea, nameb, ... if one would like but these are not general fields in the standard but are defined by certain styles.

#1097 Review Comments 13:
Is this class still in use?

#1097 Review Comments 14:
Yes, that is the new class for this. Now renamed to FieldProperties (it might be that the removal was not done, on my office machine it isn't enough to do git add . to include all changes...).

--------------------------------------------------------------
#1096 Review Comments 1:
I also tried around with pdfbox and came to that solution:
      XMPSchemaBibtex bib =  (XMPSchemaBibtex) meta.get().getSchema(XMPSchemaBibtex.class);
Edit// From my understanding the code was simply looking for the BibTexSchema and the pdfbox internal method already does that traversing.

#1096 Review Comments 2:
I would completely remove that code and all related  as a) it is inconsistent and uncessary b)  From the javadoc: getUnqualified...() does not need the namespace to acces the property. However, with calling MakeProperty, you are explicit adding a namespace. c) Callin these  methods on the class would  automatically call the super methods via polymorphism

Edit2::// The prefix is already set in the constructor

#1096 Review Comments 3:
Same as above.

#1096 Review Comments 4:
Either you apply the constructor or have a look at the DublinCore Property Annotation:
`@StructuredType(preferedPrefix = "dc", namespace = "http://purl.org/dc/elements/1.1/")`

```
    public XMPSchemaBibtex(XMPMetadata parent) {
        super(parent,  XMPSchemaBibtex.NAMESPACE, XMPSchemaBibtex.KEY);
    }
```

--------------------------------------------------------------
--------------------------------------------------------------
#1093 Review Comments 1:
Spelling mistake

#1093 Review Comments 2:
Just out of interest: what is the difference between `file.toPath().toAbsolutePath()` and `file.getAbsolutePath()`?

#1093 Review Comments 3:
`File` is part of the old Java IO API. `Path` is its new replacement in the Java NIO (New IO) API. With file.toPath() or path.toFile() one can convert between these two APIs. The Java NIO has a lot of benefits to offer, which may be the reason why it is used here. 

#1093 Review Comments 4:
The functionality "if recognized type, then open with special application" should be added to all OS in a consistent way. I would propose to implement a corresponding method in `NativeDesktop`, which calls a new method `openFileDirectly` (or better named). This new method is then overwritten by the specific OS implementations.

#1093 Review Comments 5:
Yep. The nio.Path was introduced with Java SE 7 and further extended with Java 8 (e,g Stream support). The Old File ist regarded as legacy

#1093 Review Comments 6:
Thanks for the explanation!

#1093 Review Comments 7:
Why the empty line?

#1093 Review Comments 8:
The Changelog entry is NOT needed. JabRef worked fine in 3.2. Please remove the line.

#1093 Review Comments 9:
I don't like the new method name. For me it is clear that the parameter opens the console inside this directory.

#1093 Review Comments 10:
See comment above

#1093 Review Comments 11:
What happens when application is null?

#1093 Review Comments 12:
Empty line

#1093 Review Comments 13:
Why explorer here now?

#1093 Review Comments 14:
(Repetition of another comment - just to be sure, it doesn't get lost)

Please remove that line. It worked fine at the last released version 3.2. Thus, no CHANGELOG entry required.

#1093 Review Comments 15:
Because explorer also can open URLs. e.g. explorer.exe "www.jabref.org" 

#1093 Review Comments 16:
application is never null. a) it is only called when it has a registered application and b) getOpenWithApplication returns an empty String if nothing is found

#1093 Review Comments 17:
Ok, verified that :+1: 

#1093 Review Comments 18:
:+1: 

#1093 Review Comments 19:
Can you use an interface with default methods instead?

#1093 Review Comments 20:
Never pass an optional. Create two methods instead, one with and one without a file type.

#1093 Review Comments 21:
I  don't really like having an interface with default methods. I chose the abstract class because from my point of view a class hierarchy better represents the is-a hierarchy in this case. e.g. a OSX(Desktop) is a Native Desktop. An Interface is more a kind of Role-based thing and in this case not the best way.

#1093 Review Comments 22:
In that case, the concrete method hasRegisteredApplication is never overridden by their sub classes, and could be made static. From my point of view, It should be a method of the class `ExternalFileType` (without the Optional parameter of course). 

The other concrete method is also never overridden and has only two very simple lines of code. It is only required in two places in the JabRefDesktop class which are only a few lines apart in the same method. Hence, I would move this method to the calling side, as it does not really help. 

With this said, I would convert the abstract class back to an interface without default methods which can be handled more easily (favor composition over inheritance). 

#1093 Review Comments 23:
Okay, convinced ;)

--------------------------------------------------------------
#1090 Review Comments 1:
hasEntries()? (Or whatever it is called...)

#1090 Review Comments 2:
Is there a corresponding method that does this? I assume that it was unused, but I guess that there are a number of situations where one would like to use it: click on ParserResult warnings, incorrect encoding on save etc.

On the other hand, it should be quite easy to reimplemented and ideally one would like to call it with an entry I assume.

#1090 Review Comments 3:
I assume that your editor does this, but in this case I think java.util.\* would make more sense.

#1090 Review Comments 4:
Yes, this method was not used. Probably a similar logic is implemented in the places you mentioned and thus it would be easy to refactor-out a corresponding method. But even then BasePanel is probably not the right place for this method.

#1090 Review Comments 5:
Surprisingly, the method is called `hasNoEntries`. Maybe we should rename that to `isEmpty` directly? So we can call `getDatabase().isEmpty()`. @tobiasdiez Could you do this in this PR?

#1090 Review Comments 6:
No! There are also strings and a preamble in a database. :-)

(It was called isEmpty for a while though...)

#1090 Review Comments 7:
Since this is a cleanup PR, could you also remove those commented-out lines?

#1090 Review Comments 8:
Ah, good point, thanks! In that case just use `hasNoEntries`.

#1090 Review Comments 9:
I think the positive version `hasEntries` is more convenient and avoids the double negative `! hasNoEntries()`. If nobody veto against it, I will change it to `hasEntries` later. 

--------------------------------------------------------------
#1089 Review Comments 1:
Please change as little of the imports as possible. For example your remove the IOException and add it later again.

#1089 Review Comments 2:
See comment above. Also please don't add unnecessary blank lines. Try to change only the lines that are really necessary.

#1089 Review Comments 3:
My guess is that it is some switch in the IDE that does this as the result is sorted. A bit "annoying" now, but might simplify things in the longer run.

Personally, I do not have strong opinions on what is the correct thing here, but others might... (And I know it is only for internal StuPro review so far... ;-))

#1089 Review Comments 4:
I'm using the standard style from IntelliJ IDEA, maybe someone should create a template for that (I thought there was one, but I can't find it right now).

#1089 Review Comments 5:
Eclipse has an option to sort and manage imports (e.g. delete unused).
And one important thing: Only add the specific imports, e.g. java.util.List instead of whole packages. 

@bartsch-dev  Have a look at here:
http://stackoverflow.com/questions/14716283/is-it-possible-for-intellij-to-organize-imports-the-same-way-as-in-eclipse
http://stackoverflow.com/questions/11704327/intellij-idea-how-to-optimize-imports-automatically-after-each-save

#1089 Review Comments 6:
I do not know what the "official" standpoint on \* vs specific packages is.
I sort of prefer specific packages as you can see what dependencies you add
or remove, but I know that many of the other developers like (or at least
use) *.

(In this case both util.\* and util.List looks a bit weird, but is required
as there is awt.List...)

#1089 Review Comments 7:
I would recommend only using full qualified imports, easier to avoid conflicts, e.g. you import java.a\* and google.com.b\* and both contain different classes with the same name. 

#1089 Review Comments 8:
As #672 is no bug this should be added to the "Changes" section.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1086 Review Comments 1:
Add that the action was aborted.

#1086 Review Comments 2:
just remove `document`?

#1086 Review Comments 3:
We should look over that in general. The next action (in the BasePanel (?) code) has exactly the same message. There are also a few related translations strings. For example ~"You must select exactly one entry".

Also, one can consider if a dialog should be shown, possibly with a "do not show this again check box", for this and many other issues. Drawback is that the check box selection must be stored somehow, but maybe one can create a dedicated dialog type for that?

#1086 Review Comments 4:
For consistency I think document should be there (and that document is the correct word). Many of the translations already use document by the way.

#1086 Review Comments 5:
I would prefer if you could clean up all the related messages as well in this PR. Right now the output is just a statement and not an error message.

#1086 Review Comments 6:
I changed this text to "This operation requires exactly one item to be selected." (new string) and also replaced "No entries selected." with "This operation requires one or more entries to be selected." (already existing).

--------------------------------------------------------------
--------------------------------------------------------------
#1084 Review Comments 1:
Nur "andere schließen", um konsistent zu sein?

#1084 Review Comments 2:
Konferenzbericht

#1084 Review Comments 3:
Doppelte?!

#1084 Review Comments 4:
Zeitschriftentitel

#1084 Review Comments 5:
Was ist mit den ...?

#1084 Review Comments 6:
LaTeX zweimal oben

#1084 Review Comments 7:
BibTeX

#1084 Review Comments 8:
BibTeX

#1084 Review Comments 9:
LaTeX

#1084 Review Comments 10:
LaTeX zweimal

#1084 Review Comments 11:
Ist beim Linken-Englischen-String teilweise auch BibTex. 
Das betrifft dann vermutlich alle anderen Lang-Dateien auch

#1084 Review Comments 12:
What is going on in this class? Why and what did you change here? Didn't someone recently remove the hasWritten stuff? @tobiasdiez ?

#1084 Review Comments 13:
Es wurde eine Sicherungsdatei für diese Datenbank gefunden. Genau umgekehrt!

#1084 Review Comments 14:
Eine Volltextsuche für %0 wird ...

#1084 Review Comments 15:
...das Installationsverzeichnis manuell aus.

#1084 Review Comments 16:
verknüpfungen? anstatt links?

#1084 Review Comments 17:
Yeah, I removed it in https://github.com/JabRef/jabref/commit/d2db24e749b25babd3e854670f09cc7c9a9c0011. So probably a merge problem.

#1084 Review Comments 18:
verknüpfen?

#1084 Review Comments 19:
Eintragseditor

#1084 Review Comments 20:
Eintragstabelle fokussieren?

#1084 Review Comments 21:
Buchkapitel?

#1084 Review Comments 22:
Dissertation?

#1084 Review Comments 23:
Neues Unveröffentlichtes Werk

#1084 Review Comments 24:
Sollte eventuell klein? scheint als würde das in einem Zusammenhang verwendet?

#1084 Review Comments 25:
Der zweite Teil des Satzes fehlt extra?

#1084 Review Comments 26:
eig ist das für alle Einträge ja überflüssig?!

#1084 Review Comments 27:
die EINMALIG vorkommen (oder so ähnlich)

#1084 Review Comments 28:
I thought those fixed things like names were removed from the Strings? @oscargus @matthiasgeiger 

#1084 Review Comments 29:
besitzt?

#1084 Review Comments 30:
Das ist ja ein lustiger EIntrag :)

#1084 Review Comments 31:
Tabellenschriftgröße

#1084 Review Comments 32:
verfügbaren

#1084 Review Comments 33:
Schreibt alle Wörter groß... (denke man kann hier ruhig Verben verwenden, siehe auch weiter unten)

#1084 Review Comments 34:
@matthiasgeiger Komischer englischer Text...sollten wir vll ändern? Soll das clear field sein?

#1084 Review Comments 35:
BibTeX, das sollten wir auch im Key bzw english ändern.

#1084 Review Comments 36:
BibTeX

#1084 Review Comments 37:
BibTeX

#1084 Review Comments 38:
I do not think that it is completely generic yet.

#1084 Review Comments 39:
So he added it back?

#1084 Review Comments 40:
Alright!

#1084 Review Comments 41:
Dateilinks wird überall verwendet, Kann es aber ändern

#1084 Review Comments 42:
Ist doch korrekt oder überseh ich grad was`?

#1084 Review Comments 43:
Muss nicht zwangsläufig ein Kapitel sein, habe mich an Wikipedia orientiert:
https://de.wikipedia.org/wiki/BibTeX#Literaturtypen_.28Entry_Types.29

#1084 Review Comments 44:
Uups copy paster fehler^^
mind. EINMAL vorkommen

#1084 Review Comments 45:
Irgendwo da in der Nähe hatte ich nen Buchstabendreher gesehen dachte ich.

#1084 Review Comments 46:
Aber es müsste dann Neu**er** Teil **e**ines Buches heißen, oder?

--------------------------------------------------------------
#1083 Review Comments 1:
I don't like the toArray stuff. I suggest you change the Array in The GlobalPrefs to a type of List<String>, as Array also implements the List Interface. Then you can omit the toArray stuff. 
And for that 
`dirs = new String[] {Globals.prefs.get(Globals.FILE_FIELD + Globals.DIR_SUFFIX)};
`
simply use Arrays.asList

#1083 Review Comments 2:
Yes you are right this should be a list. I even think this field should be removed completely. However, since its usage is hidden deeply in some layout logic, this will be a bigger project...

--------------------------------------------------------------
#1082 Review Comments 1:
I would recommend at least logging the exception instead of ignoring it. 

#1082 Review Comments 2:
Does the caller of getCitations somewhere catches the runtimeException? If yes, then this should be adopted too.

--------------------------------------------------------------
#1081 Review Comments 1:
The punctuation should be part of the language string as some languages have different symbols for the full stop (Chinese comes to my mind as an example). This comment applies to many other changes you did.

#1081 Review Comments 2:
I know the concept, but in this case I removed one of

"Move file to file directory"
"Move file to file directory."
"Move file to file directory?"

Not sure how to balance the number of strings and correctness...

#1081 Review Comments 3:
I would remove the first one and keep the other ones. Some languages also have a different sentence structure for questions...

#1081 Review Comments 4:
Fair enough. A dialog title will end with a period, but I can live with that.

#1081 Review Comments 5:
Turned out it was a menu item, so better to actually remove the period for the radio button option.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1077 Review Comments 1:
make suggestions final and unmodifyable.

#1077 Review Comments 2:
Use Objects.requireNonNull for both values like this.field = requireNonNull(field);

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1072 Review Comments 1:
I so prefer it to stay here (as well). This has been one of my most used features recently.

#1072 Review Comments 2:
I'm wondering if the comment is correct for "pdf" nowadays...

#1072 Review Comments 3:
This seems to be yet another ordering of imports. Not a problem as such, just interesting.

#1072 Review Comments 4:
Next step would be to add https://github.com/JabRef/jabref/issues/1098, so I prefer not to add it back in this context menu.

#1072 Review Comments 5:
Hm, maybe rename it differently using "autocomplete with BibTeX data from DOI"?

#1072 Review Comments 6:
I'm not really seeing the problem. A button somewhere else won't help the (superior) habit of right-clicking on an entry and selecting in a menu compared to double-clicking to open the editor, change to the right tab and clicking a button. Marking, click on another button is slightly better, but I still do not see what the problem with the right-click menu staying is. "New from DOI" is not going to end up in the right-click menu? 

I thought the purpose of #1098 was to add e new entry (which IMHO would be better splitting web search and "add/fetch") so I do not see marking and clicking that button as a replacement. 

The context here is that one do get slightly different information when searching and when adding information from DOI, so I usually do both at once. Not to mention improving all my old bib-files.

#1072 Review Comments 7:
No worries. :) Action in right click menu stayed in there. :trophy: 

The right click menu now only contains actions related to selected entries in the table. Hence, the "new from doi" was moved to the menu. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1061 Review Comments 1:
These indent changes destroy the formatting as a list. 

#1061 Review Comments 2:
Eclipse... It is a bit annoying indeed...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1056 Review Comments 1:
Should really only the selected entries be exported or all (getDatabase().getEntries)? Previously `null` indicated the latter. 

#1056 Review Comments 2:
Okay, then I think I take better all entries to be consistent 

--------------------------------------------------------------
#1054 Review Comments 1:
I'm not really sure I'm commenting on the right thing, but I am sure that the consensus is that the default should be to save in original order. It might be that this switch cannot be changed in the preferences, but then that issue should be solved.

#1054 Review Comments 2:
That is true. If no explicit sort order is set in the meta data, the entries should be saved in the original order (to modify as little in the file as possible). 

As far as I can see there is currently no test for that. Could you perhaps add one in this PR?

#1054 Review Comments 3:
I added a corresponding test. If `saveInOriginalOrder` is set to true, then even the save order specified in the metadata is ignored.

#1054 Review Comments 4:
Hm, do I understand you correctly @tobiasdiez: The preference `saveInOriginalOrder` overwrites meta data in the file? If so, then this is a problem, because the serialization can differ between machines. That harms version-controllability, our top aim regarding the serialization.

I think meta data that is explicitly written into the file should always be followed above user-specific preferences.

#1054 Review Comments 5:
Yes `saveInOriginalOrder = true` let JabRef ignore the save order specified in the metadata. It was a bug that this was set for the save procedure (fixed in this PR). So now the metadata is taken into account for saves. For exports, user can choose to always export in the original order (see Preference dialog) regardless of what was specified in the metadata (and this preference option is the whole purpose of the boolean variable). 

#1054 Review Comments 6:
Ok, great! Then, I'll have a last check and merge this PR.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1050 Review Comments 1:
Maybe also rename this.

#1050 Review Comments 2:
Do you think the ,selected, might lead to confusion since user think that only the selected formatter and not all listed ones are used?

#1050 Review Comments 3:
There is an a missing in textarea

#1050 Review Comments 4:
I am missing an assertion here and in the next test. Probably you want to check that the model still contains the same items and use `verifyZeroInteractions(mockObject)` to verify that no change event was raised. Please also change the test name to reflect the expected outcome, i.e. removedAtIndexMinus1DoesNothing

#1050 Review Comments 5:
Maybe: Run listed formatters?

--------------------------------------------------------------
--------------------------------------------------------------
#1047 Review Comments 1:
You could make use of the new JAVA 8 Feature for a Directory as Stream:
 java.nio.file.Files list(Path) returns a Stream<Path> and loads the content successive on demand, only when needed. Also useful for searching specified files:
http://eherrera.net/ocpj8-notes/09-java-file-io-%28NIO.2%29.html#use-stream-api-with-nio-2

#1047 Review Comments 2:
Thanks!

My plan right now is to skip this "get all files in a directory subtree"
and require the user to point at every file (once). All available style
files (including those supplied by default, which are planned to increase
in number) will be available in a single list with add/remove buttons.

--------------------------------------------------------------
#1046 Review Comments 1:
AuthorList.getAuthorList() sounds really redundant from naming.
Together with the next line it is confusing on the first read.
What about a simple  `getAuthors()`

#1046 Review Comments 2:
So the one-liner to get a `List <Auhtor>` is

`AuthorList.getAuthors(String).getAuthors()`?

Maybe not a huge difference but I sort of liked the previous naming better...

#1046 Review Comments 3:
At least the first call could still well be getAuthorList() as that is more accurate.

#1046 Review Comments 4:
Is there an `isEmpty()` (or corresponding) method? Maybe there should be.

#1046 Review Comments 5:
This is actually done in a latter commit.

#1046 Review Comments 6:
previously it was AuthorList.getAuthorList.getAuthorList...has also a duplication. Mhh...what do you think about renaming the first getAuthor to parse? I.e `AuthorList.parse(String).getAuthors`. That the parsing is actually cached shouldn't be a worry for the name.

#1046 Review Comments 7:
OK! Sounds good! I use some tool on the phone to check it so maybe that has
problems. I can for example not see your comment in the tool...

#1046 Review Comments 8:
Yes there is an isEmpty...should be used here you are right.

#1046 Review Comments 9:
I think I introduced the second getAuthorList... Didn't think of it then...

Or getAuthorList().getListOfAuhtors() which in some sense is more
self-explanatory but maybe also open for more confusion. Your suggestion
works for me, so as long as they are different I'm OK with it.

#1046 Review Comments 10:
I now renamed it to `parse` which reads quite well in my opinion.

#1046 Review Comments 11:
:+1:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1039 Review Comments 1:
The check `if fieldFormatter != null` was obsolet?

#1039 Review Comments 2:
Yes, the fieldFormatter is initialized on construction. I think it is a
left-over from the plugin time.

(Of course, the initialization can fail, but then one should null check
after every new-call...)

#1039 Review Comments 3:
Ah okay! Thanks for clearing that out.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1035 Review Comments 1:
Is the StandardCharset really ISO and not UTF of that file?

#1035 Review Comments 2:
I see now that the encoding is stated as UTF in the file. However since ISO is the first code page of UTF it is hard to actually determine the difference here... (And if I'm not wrong US_ASCII would also have worked for this file...)

I'll change it if there are other things to change as it is working and is sort of correct.

#1035 Review Comments 3:
I would move these two initial assert to a new test `newDatabaseHasNoStrings` 

#1035 Review Comments 4:
fail is not required here I think

#1035 Review Comments 5:
I would prefer if the entry is setup in the SetUp method using `setField` methods and not parsed from a string.

#1035 Review Comments 6:
I will consistently add those as Codacy reports it as an issue. Conceptually you are correct though.

#1035 Review Comments 7:
fail should not be required.

#1035 Review Comments 8:
I would move these hasChanged test to a new test

#1035 Review Comments 9:
Same

#1035 Review Comments 10:
nameing without the last 2

#1035 Review Comments 11:
Couldn't you disable the corresponding codacy rule instead?

#1035 Review Comments 12:
That is indeed an idea. The question is just what is worse? Adding tests without asserts or an additional line?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1030 Review Comments 1:
rename back to pageInfo?

#1030 Review Comments 2:
Could you please use the opportunity and split these tests into two. Thanks.

#1030 Review Comments 3:
1 equals 3? Looks kind of strange.

#1030 Review Comments 4:
I think this is no good use of Optional. This should be done by overloading the method.

#1030 Review Comments 5:
https://dzone.com/articles/java-8-optional-use-cases

#1030 Review Comments 6:
I wouldn't have changed it unless I changed the method generating the argument. If I get you correct there should be two different constructors? One with Optional (for convenience) and one for String (for actual use)?

#1030 Review Comments 7:
Indeed it should read pageInfo...

#1030 Review Comments 8:
Only the first argument is used for comparison, so I thought it was a good idea to create two different CitEntry with identical first arguments...

#1030 Review Comments 9:
No, I think Stefan meant one constructor with String pageInfo and one without any pageInfo. I can only second this suggestion.

#1030 Review Comments 10:
Ok...if it makes sense to compare citentries only by the first key...

#1030 Review Comments 11:
OK, the thing is this:

``` java
            list.add(new CitEntry(name,
                    "<html>..." + ooBase.getCitationContext(nameAccess, name, 30, 30, true) + "...</html>",
                    ooBase.getCustomProperty(name)));
```

since getCustomProperty now returns an Optional it makes sense to have an Optional as a parameter, if nothing else for brevity.

#1030 Review Comments 12:
Yeah, that I have no idea about... My guess is that it is used for sorting a table and then this is a quicker way (the refMarks should be separate anyway, although I'm not sure what happens if you create two with the same name...).

#1030 Review Comments 13:
I have added two more constructor, one (String, String), one (String, String, String). However, those are only used for testing. The only place where a constructor is used in the code is the above one and then I do not think it makes sense to add a .orElse(null) to remove the Optional-constructor.

--------------------------------------------------------------
--------------------------------------------------------------
#1028 Review Comments 1:
Why not use https://docs.oracle.com/javase/7/docs/api/java/util/EventObject.html for this?

#1028 Review Comments 2:
Should probably inherit from https://docs.oracle.com/javase/7/docs/api/java/util/EventListener.html

#1028 Review Comments 3:
Oh, I didn't know that there is a existing class for this purpose :)

#1028 Review Comments 4:
I see no reason for using java-util. We are implementing something contrary when using Guava. The only argument I see is that we can trace which events are existing. For that thing, I would agree to define an abstract class JabRefEvent.

#1028 Review Comments 5:
How does the TestEventListener signals that it only wants to listen for testevents and not arbitrary events?

#1028 Review Comments 6:
`TestEventListener` does not signal anything cause it implements the interface `EventListener`. `EventListener` signals with `@Subscribe` that it's accepting all events of type `Event` (subclasses included).

#1028 Review Comments 7:
I agree with @koppor  From the api doc the EventObject looks like that is's main purpose is to be used in GUI swing/awt events.

#1028 Review Comments 8:
Do not introduce a generic Event object. This is not necessary.

#1028 Review Comments 9:
An Entry is always a BibEntry. Please rely on Java's type checking and do not use generic types and cast internally.

Also applies for all other events.

#1028 Review Comments 10:
Do not add comments, which an automatically be derived from the variable name.

#1028 Review Comments 11:
Do not introduce this event. -> No hierarchy.

If one wants to listen to both Add and Change, then one implements two subscribe methods internally calling a generic method.

This makes it much more easier for the publisher of the event. In your case, if one adds an entry, one has to call both, AddEntryEvent and AddOrChangeEntryEvent.

#1028 Review Comments 12:
Too many empty lines ;)

#1028 Review Comments 13:
Why not directly comparing the entries?

#1028 Review Comments 14:
I think, this is calls is only used in testing and does not test code in the main JabRef code. Just remove it.

#1028 Review Comments 15:
Done.

#1028 Review Comments 16:
Done.

#1028 Review Comments 17:
Done.

#1028 Review Comments 18:
Done. (Hierarchy & hierarchy tests dissolved)

#1028 Review Comments 19:
Done.

#1028 Review Comments 20:
I thought about that, but the codacy test fails every time, when not using JUnit-Assert. Can this be fixed?

#1028 Review Comments 21:
Done.

#1028 Review Comments 22:
Is this method necessary? I would remove it and inline the setting in the constructor.

Reason: the event is set in the constructor

#1028 Review Comments 23:
Please make this final

#1028 Review Comments 24:
The comments for AddEntryEvent also apply here.

#1028 Review Comments 25:
The comments for AddEntryEvent also apply here.

#1028 Review Comments 26:
The idea was to leave possibility for setting `bibEntry` later. I can imagine that updating the `bibEntry` to another (within one event) is needed. But this situation didn't occur yet, so I'm going to remove it.

#1028 Review Comments 27:
Done.

#1028 Review Comments 28:
Done.

#1028 Review Comments 29:
Done.

#1028 Review Comments 30:
please remove this empty line.

#1028 Review Comments 31:
remove empty line

#1028 Review Comments 32:
too many empty lines

#1028 Review Comments 33:
see above

#1028 Review Comments 34:
why not using BibtexEntryAssert.assertEquals?

#1028 Review Comments 35:
see https://github.com/JabRef/jabref/pull/1028#discussion_r60878805

#1028 Review Comments 36:
This also appeared in other PR's and they still were merged. So I don't think that this should be a problem.

#1028 Review Comments 37:
It would be nice if we could fix that, because BibtexEntryAssert uses JUnit-Assert internally too. @koppor: Is it possible?

#1028 Review Comments 38:
What is the test failure message here? Did you tried out the with the latest master branch because the BibtexEntryAssert was changed recently. There is also an open PR by Olly about this.

#1028 Review Comments 39:
Can't remember exactly, but the message was about using a test method without Assert (that means JUnit-Assert). I just fetched and rebased on current master... Can you post the link to the PR, please?

#1028 Review Comments 40:
Already merged https://github.com/JabRef/jabref/pull/1296. So now using Assert.assertEquals(bibentry1, bibentry2) should work.

#1028 Review Comments 41:
When constructing an entry using the default constructor, `IdGenerator.next()` is already called. No need to do an additional call.

#1028 Review Comments 42:
insertEntry and removeEntry are two different events. The event listener should be reset inbetween. Otherwise, the local variable storing the bibentry might not be changed. Maybe just subscribe AFTER the insertion of an entry.

Adapt (and rename) this combined test and add another test testing the removal only.

#1028 Review Comments 43:
Please introduce a new abstract class `EntryEvent` which has a constructor accepting a BibEntry and contains the getBibEntry method. Use this new class as the base for the Add/Change/RemoveEntryEvent.

#1028 Review Comments 44:
dont't abbreviate, just use `event` as name. Applies also to many other cases.

#1028 Review Comments 45:
I wouldn't expose the EventBus but provide a `register` (or `listenForChanges` or `subscribeToChanges` or whatever) method.

#1028 Review Comments 46:
You are actually retesting the EventBus class which is not required. Only test our code.

#1028 Review Comments 47:
Please all add in the JavaDoc which events are thrown

#1028 Review Comments 48:
Yeah, this is the really right implementation. I discussed away the old inheritance, because there was Object casting, but this proposal sounds great.

#1028 Review Comments 49:
I'm not sure whether we should really do information hiding here. I think, we also want to publish changes on the bus. Maybe, if the entry editor changes something?

Possibly, its the best way not to expose the event bus here, but expose it when working on the eventBus for a specific entry.

Currently, I don't know what requirements we have because of #970.

#1028 Review Comments 50:
For me the Eventbus is an implementation-specific thing and so far nobody outside of the database class has to know about it. Thus hide it. If it is really needed, then the getEventBus can be readded later.

#1028 Review Comments 51:
Done.

#1028 Review Comments 52:
Done.

#1028 Review Comments 53:
Done.

#1028 Review Comments 54:
Done. (for all)

#1028 Review Comments 55:
register/unregister provided.

#1028 Review Comments 56:
Removed.

#1028 Review Comments 57:
Done.

#1028 Review Comments 58:
Is the private class really necessary or can `PreviewPanel` contain the listen method directly and above `this` is passed to the newEntry.registerListener?

Also applies to other places.

#1028 Review Comments 59:
Just register the listener after inserting the entry, then no reinit of the listener is needed.

#1028 Review Comments 60:
The problem here was to avoid already set `bibEntry` in `TestEventListener` while calling `removeEntry()`. Is we register it again, the same listener would be used again.

#1028 Review Comments 61:
Yes it is necessary, cause there is only one `PreviewPanel` for all entries. There should be a possibility to replace the listener and to set new listener for new entries. Furthermore passing small objects (like `ChangeFieldUpdateEvent`) is more efficient than passing the hole `PreviewPanel` object.

#1028 Review Comments 62:
Yes, but this problem can also be circumvented by calling the methods in this order

```
database.insertEntry(...);
TestEventListener listener = new ...;
database.registerListener()

database.remove()

assertEquals()
```

#1028 Review Comments 63:
Done.

#1028 Review Comments 64:
Could you rename `value` to `newValue`? Also at the getter? Otherwise, it is not straight forward understandable whether it is the new value or the old value.

Please also add as comment that if `null` is provided as value, that it means that the field has been removed. Maybe the Event should be called `AddChangeRemoveFieldEvent` as it is called in each of these three cases (added, changed, removed). 

Not sure about the verb form here. My gut feeling says "Added", "Changed", "Removed", but you use "Add", "Change", "Remove" and @tobiasdiez seems to have liked it, too.

BTW: the old code also had the `d` inside: `firePropertyChangedEvent`.

(One could ask for adding `oldValue` and `bibEntry` as paramter. Since this is not yet required, we can add it )later.

#1028 Review Comments 65:
Maybe add this as JavaDoc comment above this place.

#1028 Review Comments 66:
Done.

#1028 Review Comments 67:
Why not keeping the old JavaDoc comment "Update the JTextArea when a field has changed."?

#1028 Review Comments 68:
This is obsolete, isn't it? - The method signature itself states that it is a constructor.

#1028 Review Comments 69:
Why is the code moved in this class? Could you keep the old position? I think, the move was on purpose. See https://github.com/JabRef/jabref/pull/1309

#1028 Review Comments 70:
could you use `expected` and `actual` as prefixes instead of `shouldBe` and `is`? I know, that old JabRef code uses `shouldBe` and `asIs`, but this is not in line with JUnit.

#1028 Review Comments 71:
Done.

#1028 Review Comments 72:
Removed constructor an added attribute definition instead.

#1028 Review Comments 73:
Done. Moved to old position.

#1028 Review Comments 74:
Done.

#1028 Review Comments 75:
Sorry, but I still don't get why the private class is necessary. As soon as some entry is changed you call PreviewPanel.update. Why should this call be in a private subclass? Can you please provide an example.

#1028 Review Comments 76:
getNewValue and rename private variable.

#1028 Review Comments 77:
The first comment is a bit superfluous. The second is more appropriate as a `@param` comment for the constructor. I would just keep the last line, i.e. `Event fired when a BibEntry was added to the db`

#1028 Review Comments 78:
Same as above.

#1028 Review Comments 79:
Add doc.

#1028 Review Comments 80:
I cant find any instance where this event is actually fired.

#1028 Review Comments 81:
doc

#1028 Review Comments 82:
same as above

#1028 Review Comments 83:
Have a look at `public void setEntry(BibEntry newEntry)`. This could help to understand why this private class is needed.

#1028 Review Comments 84:
I think, the registerListener should be moved after the if statement.

#1028 Review Comments 85:
No it doesnt. There I simply would write 

``` java
entry.ifPresent(e -> e.unregisterListener(this));
newEntry.registerListener(this);
```

The same comment applies also to the EntryEditor.

#1028 Review Comments 86:
Now I can understand You. Well this is possible but is the PreviewPanel object not too big for passing? I don't know how guava manages this... However I saw the following comment (https://github.com/JabRef/jabref/blob/master/src/main/java/net/sf/jabref/gui/PreviewPanel.java#L322). Now I cannot reconstruct the case where `vetoableChange(...)` method is called here. Probably we don't need such a listener here at all.

#1028 Review Comments 87:
Should we rename it to `FieldAddedChangedRemovedEvent`?

#1028 Review Comments 88:
With a check if newEntry is not null.

#1028 Review Comments 89:
The name is confusing. Why is "Change" and "Update" in the name? Is it only "Change"? The event should be called `FieldAddedChangedRemovedEvent` and this listener `FieldAddedChangedRemovedEventListener` (meaning `Listener` added to the name of the event class).

#1028 Review Comments 90:
I vote for renaming to `FieldAddedChangedRemovedEvent`, because this event is also fired when a field is removed or added.

#1028 Review Comments 91:
It should listen for `ChangeFieldEvent`, not for this special class. Please remove the class `ChangeSpecialFieldEvent`.

#1028 Review Comments 92:
This class can be removed. See https://github.com/JabRef/jabref/pull/1028/files#r62419955

#1028 Review Comments 93:
Vote against it. Adding a field is changing it from nothing to something, similar for removed. Thus I think `FieldChangedEvent` is enough.

#1028 Review Comments 94:
No its not too big...java passes objects by reference (kind of).

#1028 Review Comments 95:
Removed and replaced with existing `ChangedFieldEvent`.

#1028 Review Comments 96:
Done.

#1028 Review Comments 97:
All done.

#1028 Review Comments 98:
Or removed. Or added. See `eventBus.post(new ChangedFieldEvent(this, fieldName, null));`. Please add this as comment.

#1028 Review Comments 99:
Please extend ChangedEntryEvent and do the necessary modifications (calling super, removing the local bibEntry variable and removing getBibEntry).

#1028 Review Comments 100:
Done.

#1028 Review Comments 101:
Done.

#1028 Review Comments 102:
could be written simpler: `entry.filter(e -> e != newEntry).ifPresent(e -> e.unregisterListener(this));`

--------------------------------------------------------------
--------------------------------------------------------------
#1025 Review Comments 1:
Indentation

#1025 Review Comments 2:
Whoops!

#1025 Review Comments 3:
We don't need assert.fail() here, do we?

#1025 Review Comments 4:
Is the CI unreliable for IEEE? Only include this if we get problems with the test on CI.

#1025 Review Comments 5:
Same as above.

#1025 Review Comments 6:
Doesn't matter for the test what kind of paper it is, just keep the code clean.

#1025 Review Comments 7:
Unnecessary comment for the test.

#1025 Review Comments 8:
This test is very similar to ACSTest. ;-)

#1025 Review Comments 9:
Not really, but then some static code analysis tools complains, so no harm I guess.

#1025 Review Comments 10:
I thought that the point was that the CI server was unreliable for external net access, but I have removed it.

#1025 Review Comments 11:
It sort of does. I just wanted to state what the requirements for selecting that particular DOI was (in case it must be changed in the future). I have removed it though.

#1025 Review Comments 12:
I would invert some if statements and return an empty optional, so that you do not have 4 nested ones.

#1025 Review Comments 13:
Same as above.

#1025 Review Comments 14:
What is `firstResult`?

#1025 Review Comments 15:
The local variable is actually not needed, just return the appropriate value at the right place.

#1025 Review Comments 16:
The HTML page after resolving the DOI.

#1025 Review Comments 17:
Ah ok. Then I would suggest a rename of the variable.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1014 Review Comments 1:
Assign directly.

#1014 Review Comments 2:
Indentation

--------------------------------------------------------------
--------------------------------------------------------------
#1010 Review Comments 1:
It would probably be more readable code if you just skip the try-catch here. The tests will fail anyway if the method is terminated by an exception and we will get all the exception info we need. There is no need to explicitly build an exception string as you do here. 

Some code quality tools might unnecessarily complain about missing assertions, though...

#1010 Review Comments 2:
Also here the try-catch can be omitted from my point of view.

#1010 Review Comments 3:
Makes sense. I guess one can figure out some sort of assertion, such as the
generated file actually existing...

#1010 Review Comments 4:
Not sure how strict we are, but `db` is an abbreviation.

#1010 Review Comments 5:
There is a slightly more preferable way to deal with temporary files in form of a rule, see the wiki.

#1010 Review Comments 6:
I probably copies that line from the exactly same code that was later
commented on. I'll fix it. :-)
Den 21 mar 2016 18:03 skrev "Tobias Diez" notifications@github.com:

> In src/test/java/net/sf/jabref/exporter/ExportFormatTest.java
> https://github.com/JabRef/jabref/pull/1010#discussion_r56858544:
> 
> > +import net.sf.jabref.model.database.BibDatabase;
> > +import net.sf.jabref.model.entry.BibEntry;
> > +
> > +public class ExportFormatTest {
> > +
> > -    @Before
> > -    public void setUp() {
> > -        Globals.prefs = JabRefPreferences.getInstance();
> > -        ExportFormats.initAllExports();
> > -        Globals.journalAbbreviationLoader = new JournalAbbreviationLoader(Globals.prefs);
> >   +
> > -    }
> >   +
> > -    @Test
> > -    public void testExportingEmptyDatabaseLayoutBasedFormat() throws Exception {
> > -        BibDatabase db = new BibDatabase();
> 
> Not sure how strict we are, but db is an abbreviation.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1010/files/7e0bd7c2e6254337ce04085bd5eb3ebd86479c43#r56858544

#1010 Review Comments 7:
@lenhard  That should be a general rule in my opinion, not to catch Exceptions ins Tests.
Edit// At the moment there are tests that fail but omit stacktrace. I'lll create a new issue for this

#1010 Review Comments 8:
You can use parametrized tests instead of the for loop. Then also the the string argument to assertEquals is no longer needed.

#1010 Review Comments 9:
Not necessary. Will be deleted after the test.

#1010 Review Comments 10:
with parametized tests a simple @Test(expected = ...) should work

#1010 Review Comments 11:
Any good pointer/example? (It seemed like it should be possible somehow...)

#1010 Review Comments 12:
I sort of assumed it, but better safe than sorry. :-) Will remove.

#1010 Review Comments 13:
https://github.com/junit-team/junit4/wiki/Parameterized-tests and the tests in FormatterTests

#1010 Review Comments 14:
```
@Test(expected = NullPointerException.class)
```

Have a look at the CleanUpWorkerTest

#1010 Review Comments 15:
I think before is preferable to beforeclass since then every test gets a fresh database and the potentially modifications of the previous test do not influence the next test.

#1010 Review Comments 16:
OK! I do not fully understand the difference and usually use Before. Now I just mimicked FormatterTest to see if it helped (but the problem was not related to that).

#1010 Review Comments 17:
http://stackoverflow.com/questions/20295578/difference-between-before-and-beforeclass

#1010 Review Comments 18:
And regarding providing an actual database, the current method is not the best approach (with statics). However, it seems like the tests needs to be rather specific anyway for the different export formats so maybe they can't be parameterized in a good way anyhow.

#1010 Review Comments 19:
Yes, I second this. Every export format should have its own test class, which tests the actually export.

#1010 Review Comments 20:
Btw, is there a way to add a test which is not included in the coverage check? It would make sense to try to export a non-empty database for every export format just to make sure that no exceptions are thrown, but probably one wouldn't like to include these test in the coverage report...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#1003 Review Comments 1:
I think this shouldn't accept an optional, or if it accepts one that there should be some safeguard instead of a simple `get` call. Some for the overload method.

#1003 Review Comments 2:
same as above.

#1003 Review Comments 3:
same

#1003 Review Comments 4:
Follow the pattern of the other methods and return Optonial.of(...) here?

#1003 Review Comments 5:
Would it make sense to use .orElse(UnknownExternalFileType) here?

#1003 Review Comments 6:
I'll look more into it, but there is not less checking now. With the
assumption, where checking is not explicit, that if it worked before it
will work as well now.

#1003 Review Comments 7:
Hmm, I must have missed that. (Or it was a method only called once with a constant input, do not remember fully.)

#1003 Review Comments 8:
I just tried to copy the current behavior. One could also return
UnknownExternalFileType instead of empty() in the case where it is not
found. This is done in one (?) method, but I wasn't sure enough of the
exact mechanisms to do this right now. Drawback is maybe that one will need
to check instance type rather than is present, which somehow voids the use
of Optional...
Den 20 mar 2016 19:14 skrev "Tobias Diez" notifications@github.com:

> In src/main/java/net/sf/jabref/util/Util.java
> https://github.com/JabRef/jabref/pull/1003#discussion_r56768868:
> 
> > @@ -498,12 +498,12 @@ public void run() {
> >                          }
> >                          if (!alreadyHas) {
> >                              foundAny = true;
> > -                            ExternalFileType type;
> > -                            Optional<ExternalFileType> type;
> >                            Optional<String> extension = FileUtil.getFileExtension(f);
> >                            if (extension.isPresent()) {
> >                                type = ExternalFileTypes.getInstance().getExternalFileTypeByExt(extension.get());
> 
> Would it make sense to use .orElse(UnknownExternalFileType) here?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/JabRef/jabref/pull/1003/files/f8850929a0c8189645ace0583efb7e3dad0ef0e7#r56768868

#1003 Review Comments 9:
Yes, for the moment it is not a problem. However, the method is public and so in the future somebody might pass `Optional.empty` which fails immediately. 

#1003 Review Comments 10:
Sure, in the same way it would fail if someone passed null.

#1003 Review Comments 11:
No. First, I missed the point of your comment, got confused by the shaded text stating that ExternalFileType was returned. Here there's a mechanism (unknown why), which honours the longest extension string. Therefore, all types must be checked.

#1003 Review Comments 12:
Won't happen with added check in handleDroppedfile

#1003 Review Comments 13:
Only called with an ExternalFileType obtained from hardcoded "pdf", but I added a test that we have a valid type.

#1003 Review Comments 14:
I still don't get why an optional argument is necessary here instead of a simple ExternalFileType (which has to be non-null). The method apparently needs the fileType, so the argument is not optional...

#1003 Review Comments 15:
It just seemed to make sense to use Optional as default instead of using Optional.of and get() just to pass ExternalFileType around (since all(?) ExternalFileTypes are obtained as Optionals now). For these two methods one may just as well do the get() in the previous method (since the ExternalFileType is obtained from one of the ExternalFileTypes methods, returning an Optional, which is already checked for content). Not sure if it matters.

--------------------------------------------------------------
--------------------------------------------------------------
#999 Review Comments 1:
Shouldn't the error message just be logged or is it often the case that the index parameter is given "out of bounds"?

#999 Review Comments 2:
It is always the case when you click the button and nothing is selected in the ListBox or you just deleted the last entry.
So I thought: Nothing selected/nothing to remove -> Do nothing

#999 Review Comments 3:
Change the grow to the third column? Now, the browse button is resized. better if the text field is resized.

#999 Review Comments 4:
Add fill/grow to the row corresponding to the save action panel. Makes sense that it is expanded if the dialog is resized.

--------------------------------------------------------------
--------------------------------------------------------------
#997 Review Comments 1:
I don't understand this change. Previously, the coded added always an entry, now only if it would be position < 0 ? Could you maybe add a test here?

#997 Review Comments 2:
This relates to a rather strange thing that I do not really understand. When I played around with changing the file in a separate editor to trigger change detection, I found out a problem that lead to the fix in EntryChange (when removing a field you need to use clearField, not setField with null). After fixing that, the detection code behaved differently (there's a potential reason though). Before, removing a field leads to a changed entry. After, removing a field leads to a removed and an added entry. I _think_ it depends on which field is removed since duplicate detection is used to determine if the entry is similar enough to be considered as modified or two completely different entries.

To answer your question, I think this makes more sense. If an ADDED_ENTRY event is triggered, it is checked if the entry already exists. If not, it is added. The problem with the previous code was that it only worked if the entry didn't exist (otherwise pos would be negative and an exception was thrown). I guess a fundamental reason behind the problem here is that similarity is checked with duplicate detection in the other place and a comparator here. Note that the only time the entry is not added is when it already exists... To be honest, I do not really understand why the search is done in the first place.

Regarding testing, one would like to trigger a change in the file which seems a bit complicated. Or is there another way to test this mechanism?

#997 Review Comments 3:
Thank you for your explanation. Now it makes kind of sense. 
A minimal test just would call databaseChanged. A more elaborate way is to register the EntrySorter to a test database and then remove or add items there. Both tests should be more or less straightforward.  

#997 Review Comments 4:
Ahh, I was a bit wrong here. The old code didn't work and the current code at least doesn't throw IndexOutOfBoundExceptions but doesn't behave as the old code did (when it worked)...

--------------------------------------------------------------
#996 Review Comments 1:
Ahh, I just fixed that (but worse, just removed the getId()-part). Will removed that commit from my PR.

#996 Review Comments 2:
I think you should create a issue and reference to it as this would be more consistent and compact.

#996 Review Comments 3:
There is no need for a changelog entry in this case at all: The bug does not appear in a released version. Development versions may be broken. The text is OK for the commit. For a changelog, only the text is OK (without the commit id). However, the commit happend **after** the last release of JabRef and thus did not appear to the end user. If an enduser wondered, he would report an issue. Since no issue has been reported, one does not need to create a "fake" issue.

Nevertheless, it might be that #991 could be fixed with that PR.

#996 Review Comments 4:
Yes, this PR will fix #991 (just tested it; I overlooked that issue, thanks for mentioning).
I'll adjust the Changelog.

#996 Review Comments 5:
Possibly, this "assertion" for the subsequent test should be made as separate test. This test is repeated in `testInsertEntryKeyCollision`. Therefore, I vote for extracting these lines.

#996 Review Comments 6:
This should be a separate test case so that this test case can really concentrate on the KeyCollisionException.

#996 Review Comments 7:
See above :innocent: 

#996 Review Comments 8:
Why not two different test cases? One for insert null and one for null removal?

#996 Review Comments 9:
Because the Test is very small and tests similar things, I'll extract it.

#996 Review Comments 10:
nitpicking: There is no `entry1` in this test case. Therefore, I propose to name this variable `entry`.

#996 Review Comments 11:
done

#996 Review Comments 12:
I think Objects.requireNonNull is more appropriate here.

#996 Review Comments 13:
Also Objects.requireNonNull

#996 Review Comments 14:
I think there is no need for this.

#996 Review Comments 15:
So do I.

#996 Review Comments 16:
Done, didn't knew that trick.

#996 Review Comments 17:
I second this comment. One test should check that insertEntry really inserts the entry and a second test to check that containsEntryWithId works, finally a third test with 2 items.

#996 Review Comments 18:
Use the BibtexEntryAssert.assertEquals to check for equality. 

#996 Review Comments 19:
I would prefer a `expected` argument to the test instead of the thrown.expect construction.

#996 Review Comments 20:
Please add in the javadoc comment that the entry is removed based on the id.

#996 Review Comments 21:
The advantage of the `thrown.expect` construct is, that the test expects the exception after the statement.
When using `@Test(expected = ... )` the exception can occur anywhere within the Method.

#996 Review Comments 22:
I thought so too, but I'm unsure whether JUnit really cleans up everything. Is it possible that `Globals.prefs` survives each test run?

#996 Review Comments 23:
@koppor is right.
I just printed `Globals.prefs` right before it is set in the `setUp()`-Method. Before the first test it is `null`, but at any test after that is alredy set.
I undo it.

#996 Review Comments 24:
done

#996 Review Comments 25:
Yes @koppor is right, it survives the test. But this is no reason to worry since you overwrite it anyway in the setup method.

#996 Review Comments 26:
Yeah, but as I just noticed that doesn't matter.
`JabRefPreferences` is a Singleton; every test gets the same instance, every change in the prefs are carried to the next test.

#996 Review Comments 27:
use names without underscore, for example `insertEntryWithSameIdThrowsException`

#996 Review Comments 28:
Well, in the end it is not that important. By the way, which of these methods actually needs an initialized preference class, i.e. which test fails if you remove the setup method

#996 Review Comments 29:
do not abbreviate database

#996 Review Comments 30:
Only the test-method for resolveStrings (which was already present) needs the preferences set.

--------------------------------------------------------------
#994 Review Comments 1:
Is it possible to keep the plain  UTF-8 characters instead of using `\u....`?

--------------------------------------------------------------
--------------------------------------------------------------
#988 Review Comments 1:
The first field now has focus ...

#988 Review Comments 2:
I think this is new line happened by accident.

#988 Review Comments 3:
Strange "diff"

--------------------------------------------------------------
#987 Review Comments 1:
You are using IntelliJ(?), right? I'm wondering if the settings there and Eclipse's are the same? I think I formatted that complete block when I introduced the lambda... But not fully sure.

#987 Review Comments 2:
Can be removed.

#987 Review Comments 3:
I think it is better to change the return type to `DatabaseType` instead of the string value.

#987 Review Comments 4:
Is the internal string serverType and `build` really necessary? Why is it not enough to use the `valueOf` method?

#987 Review Comments 5:
Return an enumSet here? `EnumSet.allOf(...)`

#987 Review Comments 6:
Good idea. 

#987 Review Comments 7:
In the GUI, I need a list of strings.

#987 Review Comments 8:
valueOf is case sensitive and throws exceptions if it cannot find an entry. Mine returns an optional and handles case insensitive comparison.

#987 Review Comments 9:
Hm, compiler requires it. I think this may be related to the \* imports, and probably two List types in two \* imports requiring the specific import. 

#987 Review Comments 10:
Yes, I am an IntelliJ addict. Formatting seems to differ. I reverted it. 

#987 Review Comments 11:
Ok, then I would maybe move this part to the UI and/or rename it to DisplayNames or something like that.

#987 Review Comments 12:
done

#987 Review Comments 13:
At this point I would suggest better creating a method for each case  
e.g. createhabRefDatabase 
That would better follow the principle of a single purpose method and additionally reduces the length of the method. Furthermore better readability

#987 Review Comments 14:
Hm, to me, the method is still quite simple despite being long in lines as it comes with almost no complexity. Hence, I would not gain that much by splitting it up. From my perspective, I would have the hassle of maintaining 9 methods, which have to be put in the interface, and I cannot iterate over these 9 methods in the caller (which is currently done as I can iterate over the Table enum to call the method for each table). 

#987 Review Comments 15:
Make it non-static and move to the constructor since it is only used there as far as I can see?

#987 Review Comments 16:
I would suggest to store the enum by name and not by formatted name (the latter might change in the future...although not likely)

#987 Review Comments 17:
I don't like these static Util classes... couldn't you find a better home for these methods?

#987 Review Comments 18:
Hm, to me, this is a constant, and therefore should be static (and even made final as I see now). 

#987 Review Comments 19:
Yes, good point. Previously, these methods I changed to static ones have been in the root class of a three layered inheritence hierarchy. I just moved them out. I think this is subject to another PR someday by someone. 

And I do not have a good idea what to do with them at the moment :)

#987 Review Comments 20:
Yes, y not. 

#987 Review Comments 21:
Just one thing I got in mind while looking through an old PR I created a while ago:
There is a potential resource leak in here:
If the Create Database query fails and throws an SQLException, the connection does not get closed and remains open.
That was  one thing I fixed in my old PR #910 because it was discovered from coverity amalysis.
My solution was to catch the exception and close the conn. Then re throw the ex.
https://github.com/Siedlerchr/jabref/blob/reworkedCoverityFixes/src/main/java/net/sf/jabref/sql/exporter/MySQLExporter.java

#987 Review Comments 22:
Hm, you are talking about managing the connection itself. I am not sure if we do handle the connection resource at all, mostly only the statements and result sets. 

--------------------------------------------------------------
--------------------------------------------------------------
#985 Review Comments 1:
Could we introduce the typical `"Connection to %0 failed", "IEEE"`? - See https://github.com/JabRef/jabref/pull/948. Maybe in a separate PR, but I just wanted that this is not forgotten.

#985 Review Comments 2:
Would it be possible to use constant names, which differ more than one character. `P` vs. `B`? :innocent: 

#985 Review Comments 3:
I could change SUP to SUPER. :-)

#985 Review Comments 4:
Changed it to (already existing) "Could not connect to %0". Waiting with removal until the automatic one is done. ;-)

#985 Review Comments 5:
For performance reasons, you should create Patterns as static variables and then use them to perform the replace all.

#985 Review Comments 6:
Good idea! I'm actually wondering if these replacements (and quite a bit of the other cleanups) are useful any more, after the HTML-parsing has been replaced... Not sure how to fully determine it...

--------------------------------------------------------------
#983 Review Comments 1:
Could you please exclude this file from your commit as I am currently working with this file for #957  and #958?
I included your changes already.

#983 Review Comments 2:
Sure, it was only line 233 which I personally changed, Eclipse took care of the rest.

#983 Review Comments 3:
I would suggest just delete this commented out code. 

#983 Review Comments 4:
Maybe. However, in that case we can also remove addEntryDataFromPDDocumentInformation and  addEntryDataFromXMP (if I recall correctly) and it seems like those could be useful if they are used. Of course we can recreate those if/when needed.

#983 Review Comments 5:
Ok, then we leave it in for now. 

--------------------------------------------------------------
#982 Review Comments 1:
Why is a new variable introduced?

#982 Review Comments 2:
No space...

#982 Review Comments 3:
Further down it is used in an anonymous method, which is only possible if it final. 

--------------------------------------------------------------
--------------------------------------------------------------
#980 Review Comments 1:
Also this PR is already merged, does this work with newer OO/LO Versions?
Anyone tried this?

#980 Review Comments 2:
I think I tried uncommenting that part at some stage, but do not remember exactly what happens. As I recall it nothing. So it seems like the part that doesn't work is that setting the OO/LO property the way it is done in the code doesn't change the font to a monospace font. The JabRef part works though as far as I can tell, it is only how to make OO/LO change it that is the problem.

--------------------------------------------------------------
#979 Review Comments 1:
Have a look at the comments and try to use JavaDoc instead.

#979 Review Comments 2:
Such lines can simply be removed

#979 Review Comments 3:
should be flags as a set contains more than one flag

#979 Review Comments 4:
would it be possible to only set the flags in the constructor and not allow it to be changed later?

#979 Review Comments 5:
You could introduce optional here

#979 Review Comments 6:
could the default field lenght moved to this class as well?

#979 Review Comments 7:
Possibly. However, the way the current code looks it is a bit of work and since this is primarily used for the special fields, I think it is better to wait until that is reworked.

#979 Review Comments 8:
Can you remove these lines? There are some others in this file similar to this as well.

#979 Review Comments 9:
Ahh, I missed some...

--------------------------------------------------------------
#975 Review Comments 1:
I liked to read the JabRef version first. Maybe we should reuse your idea from the PR template:

```
JabRef version <version as shown in the about box> on <Windows 10|Ubuntu 14.04|Mac OS X 10.8|...>
```

#975 Review Comments 2:
I like that. May be we should add `motivation, considered alternatives, ...`. Not sure if that is too much.

#975 Review Comments 3:
In favor of also the why, because this is often forgotten ...

#975 Review Comments 4:
Describe the changes is enough, maybe just add a simple:
Why did you make the changes?  -> The one could add here the issue ref or just describe a one liner.
I think motivation, considered alternatives are only usefuil for major architecture changes

--------------------------------------------------------------
--------------------------------------------------------------
#968 Review Comments 1:
Just use normal spaces instead of underscore. Then the circleci test should pass.

#968 Review Comments 2:
don't use abbreviation here. img-> image

#968 Review Comments 3:
specify which Exception should be catched

#968 Review Comments 4:
mainWidth is not such a meaningful name. I think that mainWindowWidth for example would be better

#968 Review Comments 5:
remove the comment

#968 Review Comments 6:
Do not catch NPEs. 

#968 Review Comments 7:
Since the Changelog should be understandable for the average user, I would propose something like `Partly switched to new UI technology (JavaFX). Redesigned about dialog.̀  

#968 Review Comments 8:
I think it is worthwhile to extract the previous line to a new method `getDialogWindow/stage`

#968 Review Comments 9:
In my opinion it would be slightly cleaner if all this FXAlert stuff is moved to a new `show` method in `AboutDialogView`.
Or maybe it is possible to let FXAlert extend FXMLView ?

#968 Review Comments 10:
Can you please check if Globals.Build_Info is used somewhere else? If not then this global variable can be removed and its initialization moved here.

#968 Review Comments 11:
Copied instead of copy? Maybe `Copied version information to clipboard`

#968 Review Comments 12:
The margin can be handled via css, right?

#968 Review Comments 13:
Remove empty lines.

#968 Review Comments 14:
When adding a new library, please also add it to [external-libraries.txt](https://github.com/JabRef/jabref/blob/master/external-libraries.txt).

#968 Review Comments 15:
Are the years correct?

#968 Review Comments 16:
I would call it "Contributing"

#968 Review Comments 17:
Indent messed up?

#968 Review Comments 18:
Indent? (Please check for all tags)

#968 Review Comments 19:
Please change it back to `%Copy Version` in the fxml file. We will later provide a proper fix for this issue.

--------------------------------------------------------------
--------------------------------------------------------------
#965 Review Comments 1:
At the moment, this cannot be moved to the logic package, as it uses preferences @tobiasdiez . Maybe we should pass this setting as well as to this method/class?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#955 Review Comments 1:
There should not be a whitespace in front of the "?", or?

#955 Review Comments 2:
Whitespace " ?"=

#955 Review Comments 3:
Whitespace: "... :" ?

#955 Review Comments 4:
Whitespace?

#955 Review Comments 5:
Whitespace?

#955 Review Comments 6:
Whitespace?

#955 Review Comments 7:
Okay I just found out, that you french guys place a whitespace in front of question marks ;-)
So forget about my comments...

--------------------------------------------------------------
#954 Review Comments 1:
Missing _?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#947 Review Comments 1:
why ce here and not de for delete entry? think de would be a better name

#947 Review Comments 2:
`ce` is the abbreviation for `CompoundEdit`, the super class for `NamedCompound`.

#947 Review Comments 3:
ok then it looks good for me

#947 Review Comments 4:
I vote for nc instead, as this is the abbreviation for NamedCompound. The typical reader will be confused with ce, as he does not realize that there is an inheritance relationship. 

#947 Review Comments 5:
I don't like such short names in general, why not namedCompound or compound? Also with be, why not entry?

#947 Review Comments 6:
I used this abbreviation because they are used everywhere in this class.
But I'll change them when they're creating such great discomfort.

#947 Review Comments 7:
why is this line necessary?

#947 Review Comments 8:
Ultimately it shouldn't.
I took it over from `UndoableRemoveEntry`.

But the main Idea is OK?

#947 Review Comments 9:
I think, compound.end() is not necessary. The object is thrown away anyhow.

--------------------------------------------------------------
#946 Review Comments 1:
No abbreviation

#946 Review Comments 2:
Return optional instead?

#946 Review Comments 3:
p -> path

#946 Review Comments 4:
Directly pass the string to the fail() method and remove Logger

#946 Review Comments 5:
Better use TemporyFolder as described in the wiki https://github.com/JabRef/jabref/wiki/Code-Howtos#files-and-folders-in-tests

#946 Review Comments 6:
I knew that someone will complain :cry: 

#946 Review Comments 7:
See above

#946 Review Comments 8:
See abve

#946 Review Comments 9:
I'll replace it by [deleteOnExit](https://docs.oracle.com/javase/7/docs/api/java/io/File.html#deleteOnExit%28%29).

#946 Review Comments 10:
As you prefer. The TemporyFolder rule has the advantage, that the temp-file is directly deleted after the test (not sure what happens if I stop the test process mid-way if you use deleteOnExit).

#946 Review Comments 11:
Collections.empyList() is preferred

#946 Review Comments 12:
inputStream instead of inputsStream

--------------------------------------------------------------
#945 Review Comments 1:
I wouldn't write this as a for loop and use parametrized tests instead.

#945 Review Comments 2:
Do you really think it is more readable to have the entry as a bib-file? 
I would just construct it via `enty = new BibEntry(); entry.setFields`.

#945 Review Comments 3:
Is this necessary?

#945 Review Comments 4:
Yes, I think so. :innocent:. Think, it is easier for writing tests and debugging. The should-be-data is more close to the thing the user sees, but also close to the data generated by the importer.

#945 Review Comments 5:
Like

```
public void testImport(sourcePdfName, shouldBeBibFileName) {
...
}

public void testLNCS() {
    testImport("LNCS-minimal.pdf", "LNCS-minimal.bib")
}
```

#945 Review Comments 6:
Yes, otherwise the resolution of fields in the database fails.

#945 Review Comments 7:
Like https://github.com/junit-team/junit/wiki/Parameterized-tests and see the FormatterTest for an example.

#945 Review Comments 8:
Done.

#945 Review Comments 9:
I would not use a class which is part of the util package of log4j. 

#945 Review Comments 10:
You can use something like here https://github.com/uniba-dsg/BPELlint/blob/master/src/test/java/bpellint/SAViolationTestData.java which allows for a much nicer structure of the input paramters. 

--------------------------------------------------------------
--------------------------------------------------------------
#942 Review Comments 1:
No need to define an external bib file here...

#942 Review Comments 2:
Fixed :innocent:. - I've been in a mode that I read the resulting bib files and not interpret code. The code is ca. 6 lines longer, but we have one file less. Hope, that is OK now. https://github.com/JabRef/jabref/pull/942/commits/a39f11f8c4e66eef2921e16dbe01d325662228d4#diff-4538b7a42e8c15776dcbb34bca7c25d3R882

#942 Review Comments 3:
Use Collections.singletonList

#942 Review Comments 4:
Fixed in 82b5b7c

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#931 Review Comments 1:
Why don't you use the runtime variable you created at the start of the methode? Same goes for os_x case

#931 Review Comments 2:
Could you pls fix the formatting and remove the comment?

#931 Review Comments 3:
Why should the JabRefDesktop class has a reference to the whole frame? Would a File reference not suffice of the folder in which the console should be openend?

#931 Review Comments 4:
no snake_case for variable names

#931 Review Comments 5:
please no abbreviations, use absolutePath instead

#931 Review Comments 6:
Could you please add the css code here (as for the other icons)

#931 Review Comments 7:
Can you extract the next two lines to a new method `getSelectedPanel` any maybe replace other occurrences of the same code with this method.

#931 Review Comments 8:
No abbreviation. active/selectedPanel

#931 Review Comments 9:
Or maybe pass the database context. This would correspond more to the semantic `open console for this database`

#931 Review Comments 10:
and process

#931 Review Comments 11:
Done.

#931 Review Comments 12:
Done. New method extracted. Unfortunately there were other occurrences where it could be used.

#931 Review Comments 13:
Done.

#931 Review Comments 14:
Done.

#931 Review Comments 15:
use getSelectedPanel ?

#931 Review Comments 16:
I just discovered that there is already a getCurrentBasePanel which does the same as the newly created `getSelectedPanel`. 

#931 Review Comments 17:
Done. Yes, I only looked for appearances in JabRefFrame.java, I apologize for that.

#931 Review Comments 18:
Done replacing.

#931 Review Comments 19:
please add if(file == null) { return;} so that no exception occurs if this method is called wrongly. 

#931 Review Comments 20:
Done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#928 Review Comments 1:
maybe just name it changeTypeOfEntries or changeType

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#922 Review Comments 1:
Maybe replace with Arrays.asList(':', '-', .... ).contains(character). But I'm not sure which one is more readable.

--------------------------------------------------------------
#918 Review Comments 1:
Can you please check that no one calls this code expecting that the input string is changed, i.e simply as `removeSortCharacters(input)` instead of `output = removeSortCharacters(input)`.

#918 Review Comments 2:
I don't like the name. Maybe something more expressive as `increaseCountOfNestedAuxFiles()`?

#918 Review Comments 3:
Done!

#918 Review Comments 4:
To long to type with one hand (in my bed)... :-) I can sort out tomorrow though.

#918 Review Comments 5:
Why did you changed the test input?

#918 Review Comments 6:
To make the tests pass... But I might not have analysed that carefully exactly where it should be changed, but changed all keywords to contain ', ' as separator. You are probably correct that here it is better not to change it.

#918 Review Comments 7:
To simplify the tests I kept it like that. If not, one would need to have two different "correct" results. As we use `,` as separator at the moment it seems like an OK thing to do.

#918 Review Comments 8:
The problem is that one of the test simply copies the keywords field as is and one parses it resulting in two differently looking fields at the end.

#918 Review Comments 9:
Ok, sounds reasonable!

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#910 Review Comments 1:
Why did you rename entries to group entries? It is relatively clear from the context that these entries belong to the explicit group.

#910 Review Comments 2:
you definitely don't want this change.

#910 Review Comments 3:
Objects.isNull exists more or less just to be used as a predicate (e.g. filter(Objects::isNull). The previous version with == null is more readable in general.

#910 Review Comments 4:
I'd guess it is because some methods use `entries` as variables, see e.g. line 82.

@Siedlerchr I've tried to avoid touching the groups package since there's a big PR in the waiting to be merged after 3.3 is released, #847, just to avoid conflicts there.

#910 Review Comments 5:
I think the Serializable is not necessary (same also below)

#910 Review Comments 6:
Do you need to specify `FieldFormatterCleanup` on the right hand side or is it enough to write `<>`? I have no idea...

#910 Review Comments 7:
That is probably what is causing the failing test as well.

#910 Review Comments 8:
I renamed it, because nearly every method uses entries and therefore would be hiding/overriding this.

#910 Review Comments 9:
Oops. I oversaw this from the Rename. Will correct it.

#910 Review Comments 10:
Okay. Noted. Will change it back.

#910 Review Comments 11:
I meant not to change this. Seems like the files were not correctly overwritten when I deleted the old branch from the previous PR.

#910 Review Comments 12:
In this case it's necessary, it can't be derived automatically.
Previously all references to the type where non-generic

#910 Review Comments 13:
Javadoc should be human readable, and not contain internal field names. Hence, I vote for entries instead of the internal groupEntries. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#905 Review Comments 1:
Does this really work? Because you close the input stream afterwards and I am not sure whether the `stream` is reused for different importers. Can you please investigate upon that?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#900 Review Comments 1:
```
asList(T... a)
Returns a fixed-size list backed by the specified array.
```

So it won't work to add file names later on.

#900 Review Comments 2:
I think it would make sense to move the copyDatabaseConfiguration method to the BibDatabase class (since the db class knows best what to copy).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#887 Review Comments 1:
Or should one simply add panel.getDatabase() here? Or pass Globals.journalAbbreviationLoader.getRepository() to doCleanup() as well?

Guess it doesn't really matter...

#887 Review Comments 2:
You are right! The new `BibDatabaseContext` is nicer than that quick hack.

--------------------------------------------------------------
#886 Review Comments 1:
Maybe rename the parameter to startIndex and actualIndex > index

#886 Review Comments 2:
Good idea! Changed it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#877 Review Comments 1:
I do not like the EraseFormatter. I think this should not be seen as a formatter as it clearly violates the interface. Maybe use something like a BibEntryFormatter?

#877 Review Comments 2:
You are right, clearing a field is not really a Formatter. I could introduce an interface SingleFieldCleanup which the FormatterCleanup and RemoveFieldCleanup can implement. This new interface can then be used by the SaveActions. Does this sounds like a good solution? 

#877 Review Comments 3:
Hm, what happens when a field is empty? Is it removed? I could live with an EraseFormatter if it would always return `""`. Does this make sense?

I do not have all the classes and their reponsibilities in mind for both the formatter and the cleanup. If you need more feedback, you will have to wait as I have to look this stuff up. 

#877 Review Comments 4:
Not really following the discussion, but it struck me that a functionality that removes all empty fields, i.e., where the field is `""` (or even whitespace) could be useful...

#877 Review Comments 5:
I aggree with @oscargus That might be useful as a cleanup action.

#877 Review Comments 6:
The save actions are not widely used yet (no UI in a official release), so we might get away with changing the meta key. If we unify the cleanup and save actions, maybe something like "cleanupActions" would be better?

#877 Review Comments 7:
I now changed the eraseFormatter to always returns an empty string. Thus it now meets the Formatter contract.

The RemoveEmptyFieldsCleanup is a good suggestion, which is now tracked at #911.

#877 Review Comments 8:
But nonetheless the cleanup actions would be only invoked when the database is saved. So saveActions is also appropriate. If you want I can change it to the common denominator `saveCleanupActions` ?

#877 Review Comments 9:
You are right. In that case it is probably best to leave the name as it is and to avoid the creation of potential migration problems.

--------------------------------------------------------------
--------------------------------------------------------------
#875 Review Comments 1:
Do not throw an Exception and catch it later on to program control flow.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#869 Review Comments 1:
Why are'nt they repleaced here? - I don't get how the comment matches with the code.

#869 Review Comments 2:
I agree that the comment is not really clear, still correct, but for
consistency it made sense to add the new escaped characters.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#864 Review Comments 1:
No need for fully qualified path?

#864 Review Comments 2:
switch?

#864 Review Comments 3:
switch?

#864 Review Comments 4:
Added twice (subject to only seeing fractions of the code...).

#864 Review Comments 5:
Good point. Will fix this. 

#864 Review Comments 6:
Will have a look, thanks.

#864 Review Comments 7:
Na, I don't like switch statements, as one can miss the break.

--------------------------------------------------------------
#863 Review Comments 1:
Please split the test

#863 Review Comments 2:
Wouldn't it make sense to extract the interface and the checker classes to external files?

#863 Review Comments 3:
I would simplify the interface to 
List<IntegrityMessage> check(BibEntry, BibDatabaseContext)
the rest of parameters can be inserted via the constructor.

This would make some of the checkers more readable. For example the ProceedingsChecker can then check if the page field is present and the type is proceedings and don't have to outsource one part of the check.

#863 Review Comments 4:
Is there a need for these public static fields? There seems to be no value in keeping a static reference...

#863 Review Comments 5:
At the moment, we do have a nice parallel structure, as each integrity check has its own test method in a single test class. If I would split this one test, I would loose this structure. Hence, I think it would make matters worse. 

#863 Review Comments 6:
At the moment, the checker classes are all private, hiding their implementation. I do not want to expose this currently private information, except if I have to. 

#863 Review Comments 7:
They are currently needed, as the caller cannot access the class directly because it is private.

#863 Review Comments 8:
The problem is that the ProceedingsChecker is the exception, not the rule. With your change, the ProceedingsChecker would be more readable, but I would loose the statelessness of the checkers. I am not sure, if this improves the situation. What is more, the check whether the field is there as to be implemented in each checker over and over again, creating noise in the check logic. 

Passing the list as a collector I also like because otherwise one has to create a lot of lists and combine them. The collector pattern is used by most test frameworks as well, e.g., JUnit does this internally. 

#863 Review Comments 9:
Mhhh...the only checker which operates on two fields is the AuthorNameChecker (and maybe the BracketChecker), so the parameter "fieldName" is in most cases redundant. Moreover, the value parameter is always entry.getField(fieldName). I would also move the code
entry.getFieldOptional("year").ifPresent( ... )
to the checker.

#863 Review Comments 10:
But right now the checker are not completely private but exposed via the public fields. So a user of IntegretyCheck does know about underlying Checker. 
If these checker are in separate files, maybe with package-private, then nobody in the outside world knows about these checkers.

But anyway, this is just a small thing...

#863 Review Comments 11:
I will try it out locally and see how it compares to the previous code. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#853 Review Comments 1:
Keep and add (expected...)?

#853 Review Comments 2:
Ahh, now I saw the next file... ;-)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#849 Review Comments 1:
asserts can be removed. 

#849 Review Comments 2:
OK! I'll do that.

--------------------------------------------------------------
--------------------------------------------------------------
#847 Review Comments 1:
Introduce isEmpty()?

#847 Review Comments 2:
There is already `isLeaf()` which indicates whether a node as children or not. Not sure if `! root.isLeaf()` is easier to understand than `root.numberOfChildren > 0`. Will keep your comment in mind when I`ll revisit the code.

#847 Review Comments 3:
OK! You are probably right that isLeaf is harder to understand. Since at
least Collection and String use isEmpty it may be worthwhile. But then it
is not that crucial as one clearly can understand the current code
(obviously).

(Saw at least one more place where isEmpty/isLeaf can be used.)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#842 Review Comments 1:
pStat? What does this mean?

#842 Review Comments 2:
please use pasteAction as the variable name. 

#842 Review Comments 3:
Please return "" instead. Returning null should be reduced as much as possible. 

#842 Review Comments 4:
Assuming cStat means copy status pStat means paste status...

#842 Review Comments 5:
I change copyAct as well. :-)

--------------------------------------------------------------
#841 Review Comments 1:
Why does a HTMLChars() formatter format latex to unicode and not to HTML?
Is there something wrong with the implementation or is the naming just suboptimal?

#841 Review Comments 2:
Historical reasons. Earlier the huge conversion list resided in that file, so adding a method "formatUnicode" was simple. Indeed there should (very soon) be a UnicodeToLatexConverter extracted... Doing this is steps...

#841 Review Comments 3:
Ah, sorry, wrong answer. :-) The answer above holds for HTMLConverter...

I think HTMLChars format to HTML? Now, since there are named entities these are used, if not, the numerical are used.

#841 Review Comments 4:
Ah my mistake! Sorry....

--------------------------------------------------------------
#837 Review Comments 1:
I would use here Default as the type instead of ParamLayoutFormatter. This makes is very immediate which class is tested...
Applies also to other tests.

#837 Review Comments 2:
Could you please use more real-world examples as arguments, like " < , > ". Makes the tests more readable.

#837 Review Comments 3:
I see the point. However, I believe that the file name naming makes it quite clear. (And the reason for keeping it is to quicker test new formatters...)

#837 Review Comments 4:
I've tried to make it more relevant/real world/readable now. :-)

--------------------------------------------------------------
#836 Review Comments 1:
Operating system

#836 Review Comments 2:
- JabRef version
- steps to reproduce

#836 Review Comments 3:
- tests are green
- changes explained briefly in pull request message

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#832 Review Comments 1:
I would rename these methods since they are not returning anything and so "get" is misleading.

#832 Review Comments 2:
can be deleted completely ;-)

--------------------------------------------------------------
#831 Review Comments 1:
;;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#827 Review Comments 1:
Why do we need a reusable AuxSubGenerator? It would be easier to maintain a one time usable class with final fields instead of passing them to the `generate` method. Then, the AuxSubGenerator could return a new class like AuxSubGeneratorResult which contains all the methods to query it, e.g., getFoundKeysInAux. 

#827 Review Comments 2:
I agree. Not sure if I'm up for the refactoring at the moment though...

Also, I do not really see why the wizard package exists.

--------------------------------------------------------------
--------------------------------------------------------------
#821 Review Comments 1:
Objects.requireNonNull?

#821 Review Comments 2:
Replace by Objects.requireNonNull ?

#821 Review Comments 3:
Wouldn't it be better to save this "2D"-array as a 2D-array instead of the even/odd thing? I'm thinking that the save format to the preferences is quite sensitive to get right first time to avoid migration hassle.

#821 Review Comments 4:
Require metaData to be non null?

#821 Review Comments 5:
Or maybe the meta data format is not so suitable for this...

#821 Review Comments 6:
Yes, it would make sense to get that right the first time :) I am open to improvements regarding the format. Currently, it looks like this 

```
@comment{jabref-meta: saveActions:enabled;title;LowerCaseChanger;}
```

Do you have a suggestion for a better format?

#821 Review Comments 7:
mhh... maybe something like 
`title [LowerCaseChanger, SecondFormatter], abstract [Formatter1, Formatter2]` but this is harder to parse. Or maybe use a different symbol for separating the field and the formatter. Something like `title: LowerCaseChanger, title: SecondFormatter`. 
But I'm not sure that these suggestions are really improvements.  

#821 Review Comments 8:
The thing is, we would have to change `MetaData` for that. I am not explicitly creating that structure, but just using the access via `MetaData` to the file. I can set a key (`saveActions`) and a list of values. `MetaData` takes care of the separators (`:`,`;`). All I could do would be to encode everything in a custom string or to use multiple `jabref-meta` entries.

#821 Review Comments 9:
Coverity will complain about inefficient iterator (and I will change it...), so you might want to do (something like):

``` java
for (Entry<String, List<String>> entry : groupedByField.entrySet()) {
result.append(entry.getValue().stream().collect(Collectors.joining(",", entry.getKey() + "[" , "]")));  // Or use StringJoiner, not sure if stream() is really needed here.
}
```

#821 Review Comments 10:
Enough to use `Map` for the variable.

#821 Review Comments 11:
Suggestion: change the constructor so that it accepts a boolean enabled and a list of save actions. Then the parse methods could be implemented as a static method returning a new SaveActions class.
(would make testing easier since no metadata class has to be constructed)

#821 Review Comments 12:
I would change the method signature to return nothing (void). Otherwise the signature suggests that the input entry is not changed and the returned BibEntry contains all the changes. 

#821 Review Comments 13:
I think the first part of this test should be moved to the parser (since it tests the parser more then the save actions). It is more an integration test, that the parser invokes the right methods. 
Here in this test file I would suspect tests like 
`SaveActions saveActions = SaveActions.parse("some test string"); 
Assert.something(expected, saveActions.theRealThing);`

#821 Review Comments 14:
Move to new test (and construct the save actions as well as the test entry by hand)

#821 Review Comments 15:
As above.

#821 Review Comments 16:
As above

#821 Review Comments 17:
Please avoid capitals in package names.

--------------------------------------------------------------
#817 Review Comments 1:
Move to new test method

#817 Review Comments 2:
Create a new `expected` bibentry and compare the parsed list against it using the methods of BibtexEntryAssert (see the recent discussion in the other importer PR)

#817 Review Comments 3:
Better name the test to reflect what the issue was

#817 Review Comments 4:
Same as above

#817 Review Comments 5:
Better use BibtexEntryAssert.assertequals method

#817 Review Comments 6:
Better test name

#817 Review Comments 7:
see above

#817 Review Comments 8:
Better name

#817 Review Comments 9:
Done.

#817 Review Comments 10:
Done.

#817 Review Comments 11:
Done.

#817 Review Comments 12:
Done.

#817 Review Comments 13:
Done.

#817 Review Comments 14:
Done.

#817 Review Comments 15:
Done.

#817 Review Comments 16:
Done.

#817 Review Comments 17:
Wait until #982 is merged in, then a simpler BibtexEntryAssert.assertEquals() should work.

#817 Review Comments 18:
Why do you use the BibtexImporter here as well? I would recommend to have a look at the already merged classes which do not rely on this importer for their tests. 

#817 Review Comments 19:
Please compare the whole entry here as well (it does not hurt). 

#817 Review Comments 20:
I would recommend to use data driven (parameterized) tests here as well. See comment https://github.com/JabRef/jabref/pull/508#issuecomment-196202065

#817 Review Comments 21:
Done.

#817 Review Comments 22:
Done.

#817 Review Comments 23:
Now we are using parametrized test class, which should be better.

#817 Review Comments 24:
make this private

#817 Review Comments 25:
make this private, and just name it importer

--------------------------------------------------------------
#814 Review Comments 1:
I would add here a ifPresent check. (the previous code did not throw an exception if expandFilename returned null, but now it does throw an error in this case)

#814 Review Comments 2:
Same as above

--------------------------------------------------------------
--------------------------------------------------------------
#812 Review Comments 1:
Why not log it in case it does happen? Actually, it is relatively probable that no folder is found: just copy the file to a different pc with completely different file disk layout. 

#812 Review Comments 2:
You're probably correct. I just copied the "This should not happen" from the corresponding place in `doMove`.

#812 Review Comments 3:
What is wrong with the the previous code? I think there is no need to convert the array to a list since we just iterate over it anyway.

#812 Review Comments 4:
As above.

#812 Review Comments 5:
There's a problem if `directory.listFiles(ff)` returns `null`. If we know that it won't happen then the previous code can indeed be simplified further (but as I recall it, iterating over `null` doesn't work as well as iterating over an empty list). I got a warning in Eclipse, so that is why I tried to solve it.

#812 Review Comments 6:
Ah ok, I see...maybe replace it completely by DirectoryStream.

#812 Review Comments 7:
Would make sense, but also requires rewriting `UnlinkedPDFFileFilter`, so I will not get into this in the current PR.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#807 Review Comments 1:
Please make this final and use UPPER_CASE_NAMING. 

--------------------------------------------------------------
--------------------------------------------------------------
#805 Review Comments 1:
You can remove the preferences argument if it is not stored and used. 

#805 Review Comments 2:
OK! Now, I see the bigger picture of how it is used. But could indeed be remove here.

--------------------------------------------------------------
#804 Review Comments 1:
Replace is not very descriptive. What about PageReplacePattern or if you want ReplacePattern?

#804 Review Comments 2:
Same as above. Also the comment would be better for line 63 I think

#804 Review Comments 3:
I actually found the previous code more readable.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#797 Review Comments 1:
You can even use a Collectors.joining(";") instead of the String.join

#797 Review Comments 2:
Hm, I do not like a ternary construct within an if condition, as it makes this code extremely hard to read. Could you extract the result of the ternary expression into a separate variable, please?

#797 Review Comments 3:
Sure! I don't like it either. (The "edit" was automatically done by
Eclipse.)

#797 Review Comments 4:
Since these are always non-null (see the constructor), the statements could be significantly simplified.

#797 Review Comments 5:
I would separate these test cases in separate tests.

#797 Review Comments 6:
I'll have a look at it. There will be a few more tests as well as there
will be more than one quote method (these tests were only moved from
StringUtil).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#787 Review Comments 1:
This should have been removed...

#787 Review Comments 2:
Indeed. :)

--------------------------------------------------------------
--------------------------------------------------------------
#784 Review Comments 1:
Is there a reason to the fully qualified class name here? Why not add `import java.util.List;` to the class header? Is there a conflict with `java.awt.List`?

#784 Review Comments 2:
Not really. I guess it was Eclipse's choice as I usually try to avoid it. But you are probably right about java.awt.List.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#760 Review Comments 1:
Collections.emptyList(); should be used instead as it uses the correct generics. 

#760 Review Comments 2:
You can simply write `Arrays.asList("A", "B");`

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#755 Review Comments 1:
You will need to do `texFields.addAll(type.get().getAllFields());` as the List returned from getAllFields can not be edited. I fixed this bug in the old version in #760 (which will collide with this PR...).

#755 Review Comments 2:
Good point! I edited the PR accordingly. So you can just remove the corresponding statement in #760 and both PRs should be merged in without problems.

#755 Review Comments 3:
Not sure how I do that in practice. Rebasing once this is merged seems to be easier. :-)

#755 Review Comments 4:
Maybe we should add a test for this branch evaluation.

#755 Review Comments 5:
See above.

#755 Review Comments 6:
See above.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#746 Review Comments 1:
Why is getFieldValue returning keyword and not field?

#746 Review Comments 2:
@koppor maybe you can shed some light on this?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#718 Review Comments 1:
Why did you delete this? What happens if you load a bib file and save it afterwards - is there a comment about the type stored in the file then still?

#718 Review Comments 2:
666/669

#718 Review Comments 3:
I removed the line because otherwise the biblatex mode would be written every time even if it is the default one. In addition, I found it irritating that a constructor changed values in the parameters passed to it (just using a metadata in a specific context shouldn't change it values).

But yes, the biblatex mode is correctly written. I added a test for it now.

#718 Review Comments 4:
Thanks. Corrected.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#715 Review Comments 1:
Mhhh.... I really like the idea to combine database and its metadata. Why didn't you just embedded the metadata as a field in the database? Is there a case where a database has no metadata?

#715 Review Comments 2:
MetaData is not part of the model right now. :)

#715 Review Comments 3:
Personally, I would separate the pathToBeSavedTo and the loaded database in the saveDatabase method. Then this hack wouldn't be necessary.

#715 Review Comments 4:
Make loadedDatabase private since it can be accessed via getLoadedDatabase()

#715 Review Comments 5:
Indeed. Good point. 

#715 Review Comments 6:
"article" instead of BibtexEntryTypes.ARTICLE.getName()?

#715 Review Comments 7:
Replace the while() loop by foreach?

#715 Review Comments 8:
I need the number/index

#715 Review Comments 9:
done

#715 Review Comments 10:
done

#715 Review Comments 11:
Done

#715 Review Comments 12:
Not sure what is correct here. getTypeForDisplay is slightly different from captializeFirst (for example it returns InProccedings instead of Inproceedings). Maybe even returning the type as a plain lowercase string is enough/better?

#715 Review Comments 13:
Maybe all these misc strings should be collected in a static field "DefaultType" 

#715 Review Comments 14:
Directly call the other constructor?

#715 Review Comments 15:
Yes, but the TypedBibEntry requires the BibDatabaseType. And this is quite cumbersome to pass to this method. So I decided this should suffice for must cases. But it may be problematic still. 

#715 Review Comments 16:
nice idea!

#715 Review Comments 17:
done

#715 Review Comments 18:
Move this constant to MetaData?

#715 Review Comments 19:
Mhhh another type :) I would prefer a rename to getMode. If not then isBibLatexMode should be renamed to isBiblatexType.

#715 Review Comments 20:
There are quite a few places with "getName" instead of the string literal (in the test for example).

#715 Review Comments 21:
Then this method should maybe be moved to the loadedDatabase?

#715 Review Comments 22:
Done

#715 Review Comments 23:
Done

#715 Review Comments 24:
Which method?

#715 Review Comments 25:
The getResolvedField method 

#715 Review Comments 26:
Is problematic as this method is called from a lot of places where I recall we do not have a LoadedDatabase.

#715 Review Comments 27:
So LoadedDatabase is just a temporary construct and will disappear in the long term?

#715 Review Comments 28:
No, it is the context of a single .bib file. Maybe we should rename it to DatabaseContext. 

#715 Review Comments 29:
:+1: for BibDatabaseContext

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#700 Review Comments 1:
Hm, this looks strange. 

#700 Review Comments 2:
Indeed. Should one keep the definition as a LinkedList then? (I have to cast it to get access to removeLast().)

#700 Review Comments 3:
In that case, I would leave it at LinkedList as we make explicit use of this data structure. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#693 Review Comments 1:
I think StringBuilder is enough here (no mulit-threading required)

#693 Review Comments 2:
I confuse those... I'll have a look!

--------------------------------------------------------------
#692 Review Comments 1:
I think this should  be res.append(getLastOnly) ?

#692 Review Comments 2:
Actually, it should be removed (as it is appended later). Just kept it in the code to remember what to write later and forgot to remove it... :-)

Thanks! Will update in a while.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#677 Review Comments 1:
Please always use curly braces as this makes the semantics explicit. 

--------------------------------------------------------------
#663 Review Comments 1:
I think the new format is now `Fixed [#num](link to github)`

#663 Review Comments 2:
Why did you deleted this entries?

#663 Review Comments 3:
Can this catch block also be merged with the next one?

#663 Review Comments 4:
Is it possible to catch only a few specific exceptions then everything?

#663 Review Comments 5:
Because there are identical ones further down (sort of my bad that they showed up there, as I changed the format of them, but somehow some other PR managed to restore the old ones...).

#663 Review Comments 6:
Probably. Not sure why an Error is thrown here though and if there's a practical difference.

#663 Review Comments 7:
Sure. However, as the same thing was done both for IOException and Exception, it seemed to make more sense to only catch Exception (which, of course, is bad in itself). Not sure why the code looks like it does and which exceptions make sense to catch.

#663 Review Comments 8:
OK! Wasn't sure if that was something that was edited before a release only.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#652 Review Comments 1:
you can use addAll

#652 Review Comments 2:
I do not think so. I do not want to add the elements but the array. `EventList<String[]>`. Or am I missing something?

#652 Review Comments 3:
Ah, sorry. You are right. But why are arrays stored in a list? But this is probably due for another PR. ;)

--------------------------------------------------------------
#648 Review Comments 1:
Since Olifair in #647 is content with the `Copy of preview` (and the other suggestions are now tracked at #119), I would just remove the "partly" and close #647 after merging this PR.

#648 Review Comments 2:
Can you name it CopyPreviewAction as we have a lot of other copy actions there as well. 

--------------------------------------------------------------
--------------------------------------------------------------
#641 Review Comments 1:
Is this still required for the exporter?

#641 Review Comments 2:
Yes, the ExportFormat class uses the Layout class which itself needs the JournalAbbreviation. Thus also the interface has to know about it... I don't like it since also all the other exports have now a dependency on JournalAbbreviation. Any idea how to solve it? Pass the JournalAbbreviationLoader to the constructor of ExportFormat?

#641 Review Comments 3:
As neither Exporter nor Layouter are part of the logic package yet, I would not pass the loader around there. 

#641 Review Comments 4:
With this attitude they will never accomplish to be in the logic department :)
But you are right, for now this is the easier solution.

Done.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#619 Review Comments 1:
Make them private and generate getter methods.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#611 Review Comments 1:
Why not make them final?

#611 Review Comments 2:
ZIIP typo

#611 Review Comments 3:
do not use variables starting with underscore. What does the `_in` variable contain? Is it the bibtex key? Is it the whole bibtex souce of a field?

#611 Review Comments 4:
As this is a regex, it is better to extract this is a pattern which is then used for the matching. Because then the pattern can be reused and must not be compiled every thing it is used. 

#611 Review Comments 5:
indention is broken here

#611 Review Comments 6:
why e3? und e2? All exception can be called `e`.

#611 Review Comments 7:
Because there are set-methods for them. (And Eclipse does it automatically if possible.)

#611 Review Comments 8:
Follow up question: are the set methods used? Can the code be rewritten so that they are not needed anymore? The class is much simpler to use when you know that the fields do not change. And to me the class looks like it can be achieved without too much effort. 

#611 Review Comments 9:
I can have a look at it. I do not think I checked if they were used (sometimes I check all public methods to see if they are used somewhere).

#611 Review Comments 10:
Also, this String array constructor may be reevaluated.

#611 Review Comments 11:
It wasn't that easy it turned out (at least not for me). The reason is that the imported class is loaded within the class and the result of that is used to set the remaining fields.

--------------------------------------------------------------
#610 Review Comments 1:
Can one not just iterater over the keySet using foreach/extended for syntax sugar?

#610 Review Comments 2:
I think the magical 19 is more irritating than the performance would justify. 

#610 Review Comments 3:
AuthorLF_FF?
You can actually delete the comment since the test name should say everything :)

#610 Review Comments 4:
Shouldn't there be an `and` between Neumann and Smith?

#610 Review Comments 5:
Then the test wouldn't pass. :-) (That is AuthorFirstFirst I think.)

#610 Review Comments 6:
Oh yeah, I forgot to change the comments...

#610 Review Comments 7:
Could be. But is it really irritating? I do not really have an opinion.

#610 Review Comments 8:
I was also a bit confused why an iterator was used. But then I'm not really good at iterators, so I didn't want to touch it to much...

#610 Review Comments 9:
I changed the comments (didn't remove the comments for consistency with all the other test files).

#610 Review Comments 10:
I changed it now.

#610 Review Comments 11:
Can you remove the underscores at the end of the fields?

#610 Review Comments 12:
Same issue here with the underscore. 

#610 Review Comments 13:
maybe write in one line

#610 Review Comments 14:
remove commented out line

#610 Review Comments 15:
remove underscore prefix, please

#610 Review Comments 16:
remove underscore prefixes

#610 Review Comments 17:
I agree with @tobiasdiez that this optimization is probably more confusing than helping. 

#610 Review Comments 18:
can you put the bracket on the previous line, please?

#610 Review Comments 19:
Test methods do not really need a JavaDoc comment. 

--------------------------------------------------------------
#606 Review Comments 1:
Why is this better? I do like the previous version much better. 

#606 Review Comments 2:
I do not like this equals implementation as only two of the five attributes are used. What is more, when you override equals, you should also override hashcode.

#606 Review Comments 3:
You could use optional here: String uriPath = Optional.ofNullable(uri.getPath()).or("/");

#606 Review Comments 4:
It may not be better... PMD claims that line.charAt(0) is "better" than startsWith, but in this case the additional line.isEmpty may cancel the benefit.

#606 Review Comments 5:
For unknown reasons (as in I didn't bother to dig deeper into it), it seems like equals is not overridden. It may be better to call it something different though. The main purpose was to make the fields private and the only place the fields were accessed was a when checking name and domain for equality.

#606 Review Comments 6:
Ahh, nice! I'll think about that when I'm not so tired... :zzz: 

#606 Review Comments 7:
:) Good night.

#606 Review Comments 8:
I suggest to use startsWith instead, and also in the other places of this PR. 

#606 Review Comments 9:
Hm, then maybe name it equalsNameAndDomain to make this clear. 

#606 Review Comments 10:
Looking at the use case for the function, it seems a bit weird that single square brackets are removed. So I removed these tests as the current implementation will not remove single brackets.

#606 Review Comments 11:
Could you keep the line as `assertNotEquals`? - The documentation in the tests should be self-contained and not rely on the discussion we do on GitHub ^^

#606 Review Comments 12:
I readded similar tests in a later commit.

--------------------------------------------------------------
--------------------------------------------------------------
#604 Review Comments 1:
why not static?

#604 Review Comments 2:
Maybe use a foreach loop there instead?

#604 Review Comments 3:
No idea. :-)

#604 Review Comments 4:
Didn't know that one can have a foreach loop for Enumerations (there are these iterator-whiles everywhere in the code), but now I googled and it wasn't that hard...

--------------------------------------------------------------
#603 Review Comments 1:
Both o1 and o2 are Integers (otherwise an Exception would have been thrown on line 179), so should be safe to only compare them using `compareTo`.

#603 Review Comments 2:
Both o1 and o2 are Integers (otherwise an Exception would have been thrown on line 160), so should be safe to only compare them using `compareTo`.

#603 Review Comments 3:
The if statement on line 201 checks if exactly one of o1 and o2 is null. If both are non-null line 211 takes care of the comparison, so the only remaining case is if both are null. (Trying to avoid Object == Object.)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#600 Review Comments 1:
Does something like 
`List<String> colNames = this.readColumnNames(conn).stream().filter(!columnsNotConsideredForEntries.contains);`
or

`List<String> colNames = this.readColumnNames(conn).stream().filter(s -> !columnsNotConsideredForEntries.contains(s));`
works?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#572 Review Comments 1:
During the run method, NO swing class must be accessed. You use panels and option panes. 

#572 Review Comments 2:
 Is the method makePathsRelative used more than once? Otherwise it could be inlined here

#572 Review Comments 3:
I do not get why a CleanupPreset class is necessary. Why not use a CleanupPreferences class which is a thin wrapper around the preferences as this has been done before?

#572 Review Comments 4:
The idea was to allow for multiple presets. So for example, there could be a preset for the cleanup upon save action and a completely different preset for the cleanup dialog. Both have to be stored in the preferences in different locations...

#572 Review Comments 5:
It is not used everywhere else. However it contains Swing code and for this reason could not be inlined here.

#572 Review Comments 6:
The method contains nearly the same code as the previous run method. The code somehow needs to get the selected cleanup actions. What would be the proper way to do this?

#572 Review Comments 7:
I would move some of the code in the init part and some of it in the update part. You can have a look at the `SearchWorker`, which separate this correctly. The issue is that the run method is always executed outside of the EDT, and the update method always on the EDT. And swing only works correctly if all methods on all swing classes are executed on the EDT. 

This change may require a lot of work. If you think this is too much, we can leave it as is and improve that in another PR. 

#572 Review Comments 8:
Ah ok. 

I would not add the flexibility before it is actually used. I would only introduce something like this if the current code does not handle the situation perfect anymore. Do it as simple as possible until you feel the pain - and only then change it. 

To me, it feels more complex to manage a class with state (multiple booleans) in addition to the preferences, which have to be kept in sync. The JabRefPreferences class must also know this CleanupPreset, making the JabRefPreferences class also more complicated to understand as we would introduce another dependency. And the JabRefPreferences class should be kept as simple as possible as it is so core to JabRef - it is used by almost the whole JabRef code, and this code now all depend on the CleanupPreset as well. 

My suggestion is, use a simple wrapper class and when we want to store these values also for onSave and onOpen, we can simply use different versions of the wrapper class. 

#572 Review Comments 9:
Hm, ok, not good. We should rewrite the code so that it no longer contains swing code to get the dependencies right. Could be done in another PR. 

#572 Review Comments 10:
I'll have a look at it tomorrow.

#572 Review Comments 11:
Hehe, actually the whole point of the PR was that I felt the pain :). I wanted to implement cleanup actions for onSave but then quickly realized that I would replicate a lot of code. Thus first this refactoring. 

In some way or another the cleanup process has to know a bunch of boolean values and so I figured it would be best to encapsulate them in a simple data class. Not sure if I like the wrapper idea or not. In this case you have one interface and a bunch of wrapper classes. Also the wrapper classes depend on the JabRefPreference class and thus all other classes using these wrapper also implicitly depend on the omipresent preference class. In my implementation you have one data class and a bunch of methods in the preferences class. Also after receiving the CleanupPreset the rest of the code is independent of the JabRefPreference class.  Mhhh... you think a wrapper is the way to go?

#572 Review Comments 12:
:) I agree that the booleans should be encapsulated in a class. This really helps. But I would use a wrapper instead. 

#572 Review Comments 13:
What do you think about a hybrid wrapper similar to #658 ? That is, still store the boolean values in a class (with "state"), but move the methods to load/save from the preferences also to this new CleanupPreset class. This has the advantage that the Cleanup process has no dependency on the preferences and it brings some performance improvements with it (no 10*number of entries calls to getBoolean). 

#572 Review Comments 14:
The run method asks the user if he wants to continue with autogenerating pdf names. I'm not sure how to implement this properly with the Worker interface. Maybe the problem disappears automatically after migration to javafx?

#572 Review Comments 15:
It was relatively easy to implement them using the new FileField class! Thank you for pointing that out.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#560 Review Comments 1:
That class might have been useful as a future formatter, but nevermind. We can rewrite it if needed.

#560 Review Comments 2:
Please do not simply rewrite the tests this way! I used this test to ensure that a rewrite without modification does not change the serialization. Your change eliminates this information! Please only change the test that modify an entry (which results in a reformatting on write)

#560 Review Comments 3:
See above.

#560 Review Comments 4:
If camel casing is turned off, you should propably also rename this method.

#560 Review Comments 5:
See above. Please do not modify casing here!

#560 Review Comments 6:
See above. please do not modify casing here!

#560 Review Comments 7:
I also found the class a good example for good code. However, we decided to remove unused code. :neckbeard:

#560 Review Comments 8:
The current PR changes the serialization. **All** field names will be written lower case. - Ah, I got it. No modification in the entry should result in the same serialization. Mhh...

#560 Review Comments 9:
Done. `roundTripWithCamelCasingInTheOriginalEntryAndResultInLowerCase`

--------------------------------------------------------------
#557 Review Comments 1:
just add a `@Text(expected = NumberFormatException.class)` to test that a specific exception has to occur. The test itself is only one line long then. 

#557 Review Comments 2:
Ahh, didn't know that!

#557 Review Comments 3:
use a for-each-loop instead. 

#557 Review Comments 4:
Do we really call this method so often that a optimized version is needed? `Integer.parseInt()` seems to be efficient enough. 

#557 Review Comments 5:
See #270 

#557 Review Comments 6:
Or rather #269 

#557 Review Comments 7:
Ok, didn't know about its history :+1: 

#557 Review Comments 8:
Can you rename and split the test please. For example, `InfValueOfParses Small/Large NumberCorrectly`.

#557 Review Comments 9:
Rename test, e.g. `InfValueOfThrowsExceptionIfStringContainsLetter`. Same applies to the other tests.

#557 Review Comments 10:
If I understood you correctly, then this method is extracted from the `FileListTableModel` right? Then probably you should delete the code there, too?

Moreover, is there no better way to return a meaningful value here? A list of a list sounds rather cryptic. I would add a `LinkedFile` class which has the right properties (description, link, file type) and return here a list of these objects.

#557 Review Comments 11:
It can't be deleted (but you are otherwise correct), as the added code is much more limited. However, with some thinking the code in FileListTableModel can be simplified and the added code used (primary problem is the code "optimized" for getting the first item only).

The code in FileListTableModel uses FileListEntry which consists of description, link, and ExternalFileType. Although ExternalFileType resides in external, so FileListEntry only includes from there, ExternalFileType has both a JPanel and an Icon. Although, it was my original plan to extract the whole thing setting up a list of FileListEntry, I thought that introducing (hidden) dependencies on Swing/GUI components in logic was a bad idea (although the independence tests might have passed).

One could possibly introduce another class, FileItem(?) which consists of the description, link, and filetype name. This is really enough for serialization and may be enough in some of the cases where now the whole FileListTableModel machinery is included (as you state in #572).

#557 Review Comments 12:
I wouldn't use a new class to wrap `List<SimpleFileListEntry>`. All the decode methods should be moved to the `FileUtil` class.

#557 Review Comments 13:
Why it is just a simplified version? I thought it contains all the data of a file link. Should probably be moved to the `model` package. 
I don't like the class name. What do you think about `LinkedFile` or `FileItem` (not sure if they are better :-) ).

#557 Review Comments 14:
A `FileListEntry`, as used in `FileListTableModel` has an `ExternalFileType` as the third parameter. This results in bindings to the GUI package etc. A `SimpleFileListEntry` has the "correct" type name (as specified by an existing `ExternalFileType`) as the third parameter, which is enough for serialization but not for GUI.

As stated above, the difference between a plain `List<SimpleFileListEntry>` and `SimpleFileList` is that `ExternalFileType` is consulted via the preferences when the entries are generated and that it has methods required for simple drop-in replacement of `FileListTableModel`, including serialization.

Yes, maybe these methods should go to `model`. However, it is not clear exactly what should go where. Also, looking at the time perspective, it wasn't obvious from the start that I would end up here. Finally, there's a bit of discussion how many methods should be added to the entries. Now, parts of this is rather JabRef specific and should maybe stay away from `model` (which I think is aimed to be as "clean" as possible). 

Naming: yes, I agree that they are not exceptionally well chosen. One should also take into consideration that `FileListEntry` now extends`SimpleFileListEntry`, and that there's a `FileListEntryEditor` (and a `FileListTableModel`).

#557 Review Comments 15:
Ok, thanks for you clarification. 
So `FileListEntry` is the gui version of `SimpleFileListEntry`. Ok this makes sense and it is good that these two purposes are clearly separated. 

So the only difference between `List<SimpleFileListEntry>` and `SimpleFileList` is the method `setContent`, right? In other words, just the initialization differs. Thus my idea was to use the Builder design pattern and move `setContent` to a builder class (along with changing its signature to `String -> List<SimpleFileListEntry>`). In this way you can separate the initialization from the data-holding and, moreover, move the dependence on the preferences to a separate class.  

#557 Review Comments 16:
`setContent` (especially calling the method `decodeEntry`) and `getStringRepresentation`.

To be honest, I have no idea about Builder design patterns, so I cannot really say anything about it. (I'm actually quite bad at programming Java, but have picked up a bit at least recently.)

#557 Review Comments 17:
The `SimpleFileList` class right now has two purposes. For one, it contains the list of linked files, and secondly, it has the `setContent` method which parses a string to proper list of `SimpleFileListEntries`. So the idea was to move the latter functionality to a separate class. In detail:
1. Move `setContent` to a new class (maybe called `FileListBuilder` or `FileListFactory`) or move it to `FileUtil` as you want. In order to make the method work in its new home, you need to return the generated list of file entries (instead of writing it to a private field).
2. Now nothing is left in `SimpleFileList`. So it can be replaced by `List<SimpleFileListEntry>`.

#557 Review Comments 18:
Except for `getStringRepresentation` (and the fact that it relies on static methods rather than keeping things as a class). I'll wait and see what the other guys have to say about it. I could in fact think that it may make sense to provide the file field directly to the constructor. May not change the fundamental discussion, but from other perspectives one probably would like that anyway.

#557 Review Comments 19:
From a refactoring point of view, I would suggest to create a class which contains all the external file type methods as JabRefPreferences should manage the preferences, but not external file types. 

#557 Review Comments 20:
Check koppor/jabref#115 :-)

#557 Review Comments 21:
I'm giving it a go within this PR.

#557 Review Comments 22:
I do not like the current implementation of FileListEntry, SimpleFileListEntry and SimpleFileList. 

The thing is that the current implementation suffers as it comes directly from dependency hell. ;)

What I would expect to be there as classes:
- ExternalFileType defines the type of the ExternalFile (currently named FileListEntry). A class (could be bibenty, but I am not sure if it should not be another class) should be able to decode a List<ExternalFile> from its file attribute. 
- ExternalFileType should be independent from the GUI, and then the ExternalFile would be GUI independent as well - then both ExternalFile and ExternalFileType can be put in the model. At the moment ExternalFileType contains a label and an icon field. Hence, this should be split up into a GUIDependentExternalFileType which contains both the JLabel and the Icon plus a reference to the ExternalFileType which contains all the information which is serialized. Then, the SimpleFileListEntry is not necessary anymore. The issue here is that the current mapping of an ExternalFileType to an Icon is currently hard-coded, so we need a large switch statement in the convertion code of an ExternalFileType to a GUIDependentExternalFileType. 

#557 Review Comments 23:
I'll get back with a more detailed answer, but that is basically the
current implementation, subject to naming and a few details.

When it comes to the actual lists, should there be classes or static
utility methods filling the lists? Main benefit of a class is that the
serialisation formatting can be included.

#557 Review Comments 24:
When a utility method is only used once, it should not be in a utility class. And that case, it would only be used for this call. 

What is more, I do not like utility classes for domain specific things like external file types. It is OK for IO methods like reading from a file or interfacing with the file system, or for type conversion such as String to int. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#547 Review Comments 1:
Do not use abbreviations. Either use `medlineImporter` or `importer` as the context is clear by being in the `MedlineImporterTest` class. 

#547 Review Comments 2:
This is not a good assertion, you need to verify as well all the fields of the BibEntry. 

#547 Review Comments 3:
You do not need the if-condition here, just set the `Globals.prefs`

#547 Review Comments 4:
Mind the formatting, please. 

#547 Review Comments 5:
Beware of copy-and-paste errors, as the message here is completely wrong. A message of an assert should add additional information, which in this case, it does not, it adds misleading information.

#547 Review Comments 6:
this assertion is not necessary, it is done in `BibtexEntryAssert.assertEquals(InputStream, List <BibEntry>)` 

#547 Review Comments 7:
use `BibtexEntryAssert.assertEquals(InputStream, List<BibEntry>)`

#547 Review Comments 8:
See above. 
Assert.assertNotNull is not necessary as well if you use `assertEquals(InputStram, List<BibEntry>)`

#547 Review Comments 9:
Use assertEquals(Collections.EMPTY_LIST, emptyMedline) instead

#547 Review Comments 10:
why is here no assertion?

#547 Review Comments 11:
Please use a dummy abstract instead of an actual one

#547 Review Comments 12:
use a dummy abstract

#547 Review Comments 13:
If you split, you should join afterwards using `String.join(" ", elems);`

#547 Review Comments 14:
I am not sure if that's needed here, because the whole method `expandAuthorInitials()` doesn't use it all. This might be the case because the string that gets splitted is used to build a new string via `StringBuilder`.

#547 Review Comments 15:
Can you please shortly outline why this change is necessary?

#547 Review Comments 16:
A test case revealed this issue. The importent lines were these:
 `<Author>
                    <CollectiveName>ASTRO-CM Team</CollectiveName>
                </Author>` 
Bewteen ASTRO-CM and Team it would add an additional whitespace. With this change the whitespace won't be added.

#547 Review Comments 17:
@mairdl The code you provided is the same as

``` java
String[] splittedNames = names[j].split(" ");
List<String> innerNameList = Arrays.asList(splittedNames);
String innerNames = innerNameList.stream().map(n -> Author.addDotIfAbbreviation(n)).collect(Collectors.joining(" "));
sb.append(innerNames);
```

(untested, please double check if it really works :innocent:)

This is much shorter than your code, probably more readable (if one is used to Java8) and less error prone.

See also http://stackoverflow.com/a/22577565/873282

According to http://howtodoinjava.com/core-java/string-class/4-ways-to-split-tokenize-strings-in-java/ (4th solution) in combination with http://stackoverflow.com/a/23936723/873282, it should even be possible to do the following instead of your whole code

``` java
Splitter spaceSplitter = Splitter.on(' ').omitEmptyStrings().trimResults();
Iterable<String> innerNameList = niceCommaSplitter.split(names[j]);
String innerNames = StreamSupport.stream(innerNameList.spliterator(), false).map(n -> Author.addDotIfAbbreviation(n)).collect(Collectors.joining(" "));
sb.append(innerNames);
```

(not checked if it compiles; give it a try)

#547 Review Comments 18:
The first verson passes all test. Can't say that for you 2nd example.

I agree  that it's more readable, shall i change it? The code i used was inspired by the `else`part of this method.

#547 Review Comments 19:
For simplicity, I would probably use the StringJoiner class without streams. 

#547 Review Comments 20:
Ah, I see. According to [the JAvaDoc of StringJoiner](https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html), one can also transform the inputs (achieved by `map` in my proposal). Since the iteration on the split result (an array) is easy via an foreach, this should easily work without some if checking for non-emptyness (`splittedNames.length > 0`) etc.

#547 Review Comments 21:
The problem here is that atleast to my experience, that a `StringJoiner` and `StringBuilder` or another `StringJoiner` has to be used. This is due to the reason that it first has to put the last name and first name together with a `", "` after that it should add that `"last name, first name"` with a `" and "` to the `String` that gets returned. I don't know if that increases simplicity. I suggest using one of koppor's propasals.

PS: Sorry for the stall, I had an operation this week and was resting. 

#547 Review Comments 22:
The StringBuilder has nothing to do with the StringJoiner in that case. Just use this solution:

``` java
String innerNames = Arrays.stream(names[j].split(" "))
    .map(Author::addDotIfAbbreviation)
    .collect(Collectors.joining(" "));
sb.append(innerNames);
```

#547 Review Comments 23:
This leads to some errors in the `StringUtilTest.java` because the suffix gets ignored.

#547 Review Comments 24:
We decided to completely remove the "expand author initials" functionality in #1373.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#541 Review Comments 1:
in that case, use the following:

```
optional.ifPresent(value -> value.setToOpenTab(true));
```

The function is only executed if the optional is present. 

#541 Review Comments 2:
Just delete commented out code. 

#541 Review Comments 3:
if author is null, a NPE will be thrown. 

#541 Review Comments 4:
Yes, there are a few more cases like that. I'll change them (now that I learned more about how to use Optional, didn't want to update during possible review...).

#541 Review Comments 5:
Yes, bad comment. I had null check earlier, but then I realized that the method is never(?) called with a null argument anyway. Let me double check and come back with the correct solution. :-)

#541 Review Comments 6:
As this method will at worst be called with an empty String, I just changed the comment. Also, the same holds for the methods `removeDiacritics()` and `generateInstitutionKey()` so I changed the null test to `isEmpty()` there.

--------------------------------------------------------------
#540 Review Comments 1:
or replace by `fieldName.isEmpty()`

#540 Review Comments 2:
Good point!

--------------------------------------------------------------
#538 Review Comments 1:
Hm, I do not like that null is returned in some cases. Could this just be converted to returning an Optional? Would also apply to the getExtra method. Or just return the field editor itself. 

--------------------------------------------------------------
#536 Review Comments 1:
use this(...) to call the other constructor

#536 Review Comments 2:
use Objects.requireNonNull for the two references

#536 Review Comments 3:
you can also put this in one line, as this is probably more readable. 

`new ParserResultWarningDialog(pr, frame).show()`

#536 Review Comments 4:
Please use `List` instead and create a new list if possible to not let a caller change the warnings from the outside. 

#536 Review Comments 5:
Aha,  `this` was the magic that I didn't recall...

#536 Review Comments 6:
what does `dbCount` mean?

#536 Review Comments 7:
Database number (which tab to activate when showing the warning dialog).

I'll fix all things later on and comment where appropriate. Out of laptop battery now. :-)

Thanks for the feedback!

#536 Review Comments 8:
I changed it to a static method showing the dialog. Is this a better or worse method than the previous?

#536 Review Comments 9:
for the two int values, you do not need to add a requireNonNull check, as they are primitive types which can never be null. 

#536 Review Comments 10:
I would use `warnings` instead of `wrns` as names should not be shortened. And instead of `wrn` I would use `dialogContent` which is in line with `dialogTitle` which is computed below. 

#536 Review Comments 11:
Makes sense. :-)

#536 Review Comments 12:
I would again use fail fast, namely, return quickly if there are no warnings in this method. 

#536 Review Comments 13:
Is there a difference between

``` Java
if (...) {
   return
}
Lots of code
```

and

``` Java
if (!...) {
    Lots of code
}
return
```

?

#536 Review Comments 14:
Semantically, there is no difference. 

But the normal control flow should be obvious to the reader and not hidden in some if branch. The issue with indention is that you always have to remember which condition has lead to this if branch, and you have to have it in mind to understand it. For the normal control flow or the most-used and typical control flow path, it should be obvious and we can put all failures on top, reducing the level of indention and putting the focus on the default control flow. 

#536 Review Comments 15:
OK, makes sense!

(The question was actually from a performance perspective, but I see you point.)

#536 Review Comments 16:
Performance wise, it probably makes no difference as well. But I cannot offer any facts. :)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#515 Review Comments 1:
The if test can be removed.

#515 Review Comments 2:
Add assertion that the length of `entries` is 1

#515 Review Comments 3:
why does the filename contain a `.git.` part?

#515 Review Comments 4:
Because the content is about `git`.

#515 Review Comments 5:
See also https://github.com/JabRef/jabref/wiki/Code-Howtos#preferences-in-tests

#515 Review Comments 6:
There are multiple calls of  `entries.get(0)`. Replace them by creating a new entry with `BibEntry entry = entries.get(0)`.

#515 Review Comments 7:
This can be deleted.

#515 Review Comments 8:
@bartsch-dev The `ExpectedException` IMHO delares a variable which can be used for checking exceptions. See http://junit.org/apidocs/org/junit/rules/ExpectedException.html, http://stackoverflow.com/a/16725280/873282, and http://blog.codeleak.pl/2014/03/junit-expectedexception-rule-beyond.html.

#515 Review Comments 9:
As far as I understand the [javadoc](http://junit.org/javadoc/latest/org/junit/rules/ExpectedException.html) it just declares the standard expected Exception for all tests in that class (which usually is none). 
I will remove it if you think otherwise.

#515 Review Comments 10:
Please remove it. It only has an effect when the variable is used. See "This doesn't affect your existing tests" in the javadoc :innocent: 

--------------------------------------------------------------
--------------------------------------------------------------
#513 Review Comments 1:
No need for the if check.

#513 Review Comments 2:
Split test in tests for recognize vs non-recognized format.

#513 Review Comments 3:
Split test into multiple tests, each of which just covers on test file.
Moreover, test also that all parsed entries have the correct fields. For this you better don't import a file with 29 entries :)

#513 Review Comments 4:
Have a look at the [expected exception rule](http://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests)

#513 Review Comments 5:
Better test the parsed entries directly instead of comparing them with a bib file.

#513 Review Comments 6:
We asked the students to use `bib` files to avoid endless `assertEquals` lines. I agree that for small tests (maybe <= 3 assertEquals), it makes sense to directly compare it. In contrast, for larger entries, I would vote to keep comparing with `bib` files. If someone starts to change the importer, the tests will ensure that nothing breaks. It won't help development, which is OK for me.

#513 Review Comments 7:
The problem with tests like this is that they can break because of three reasons:
1. The actual importer has a bug
2. The comparison logic has a bug
3. The bib-parser has a bug
Using direct assertEquals on the resulting bibentries (almost) eliminates possibilities 2+3.
I think the main problem is that the entries are so big. In an idea world, you have many tests with small entries. Then if a tests fails you know exactly which feature has a bug.

On the other hand, I can see why it might be good idea to compare with the bibfile. And since the importer are relatively stable, I think it is ok to leave the tests as they are right now.

Ps: Something which worries me a little bit: while adding all these tests for the importer almost no bug where found. I find this strange.

#513 Review Comments 8:
There seems to be an issue with the indention.

#513 Review Comments 9:
What is this `Jel`?

#513 Review Comments 10:
The month seems to be wrong. It should be 8, right?

#513 Review Comments 11:
https://ideas.repec.org/j/
Here are top classification for JEL. The D for example means, that it is classified as Microeconomics. But I'm not sure what the meaning of the number behind is.

#513 Review Comments 12:
you're right. I don't know why it is imported wrong. In the other test the month was also wrong. In both it was one to low. So I've added  +1 for the month.
Now it should be correct. 
I've also added a field for the day.

--------------------------------------------------------------
#512 Review Comments 1:
There is no need for the if statement.

#512 Review Comments 2:
No need for the size check if you compare with an empty list later.

#512 Review Comments 3:
As above.

#512 Review Comments 4:
Not sure that it is correct to reject an empty file.

#512 Review Comments 5:
Could you pls also test the type of the entry.

#512 Review Comments 6:
Test for title and publisher here?

#512 Review Comments 7:
Here a few asserts are missing.

#512 Review Comments 8:
Do you want the Empty.txt file removed from the test or do you want it to be a recognized method?
Because the isRecognized() Method just returns true if he finds a String that matches "<[0-9]+>". 

#512 Review Comments 9:
You can leave it as it is right now. The other importers also treat empty files as "rejected", so it is ok.

#512 Review Comments 10:
Something is wrong here. It should only state one line change. 

#512 Review Comments 11:
why not use startsWith? I think this is more readable as a combination of indexOf and index comparison to 0. 

--------------------------------------------------------------
#511 Review Comments 1:
Rename file to something more meaningful (indicating that this is an incomplete file)

#511 Review Comments 2:
There is no need to test files which are rejected.

#511 Review Comments 3:
What is this "person" field? 

#511 Review Comments 4:
Normally an article does not have a field "article" (in similarly for the other types). What is saved in this field?

#511 Review Comments 5:
I searched for all available fields in the type Book. There was this field person. So I took it to test whether JabRef can read the value of this type.
I guess a correct use is:

``` xml
    <bibtex:editor>
      <bibtex:person>Mustermann, M.</bibtex:person>
    </bibtex:editor>
```

In this and the following way JabRef wouldn´t have found the value of the field "editor".

``` xml
    <bibtex:editor>Muster, M.</bibtex:editor>
    <bibtex:editor>
      <bibtex:person>Mustermann, M.</bibtex:person>
    </bibtex:editor>
```

Only if I would use this format JabRef would read both values correctly.

``` xml
    <bibtex:editor>
      <bibtex:person>Mustermann, M.</bibtex:person>
    </bibtex:editor>
    <bibtex:editor>Muster, M.</bibtex:editor>
```

So my goal was only to get the values of the available fields. This way there is less code and a better overview over the field values.

To answer your question. If the first code example is correct it´s a way to add persons to the group authors or editors. But when I tested it, only the last entry is returned. And I can only reach the field person. There is no "editors" field to get a list of all person who are the editors.
If I am wrong please correct me.

#511 Review Comments 6:
Just now I realise that there were a few changes since I merged with master. 
Because before that I could read with getFieldNames() and getOptionalFieldNames() all available fields for any kind of entry. In this case every entry had the same fields except the one field. The field named after the type. So I used it to see whether JabRef can read the fields. Still when I use getFieldNames() I get the fields "article" and "bibtexkey". getOptionalFieldNames() was removed. So in this case it´s just to test if the value is readable.

#511 Review Comments 7:
Isn't there a X missing, i.e Bibtex_X_ML

#511 Review Comments 8:
I would prefer if you the test files are explicitly mentioned. Moreover, there is no need to specify 20 files if they are essentially the same.

#511 Review Comments 9:
The authors also name it that strange :see_no_evil: - see http://bibtexml.sourceforge.net/ and https://github.com/Zearin/BibTeXML

#511 Review Comments 10:
I like the idea to ensure that all newly added test files are automatically tested that they are NOT recognized.

#511 Review Comments 11:
Ok, now I understand the test :). Then it is a good idea!

#511 Review Comments 12:
Is it really true that all test files are not working? Isn't there a single file working? All files carry `bibtex:` as prefix. Please elaborate more why the tests are ignored. Or, better, add working files only and keep the non-working files at your fork. We should really focus to keep the JabRef codebase clean. It might happen that the results of the discussion at #938 reveals, that we will drop BibTeXML support.

#511 Review Comments 13:
Why is this deleted? We want to make sure that getItems can NEVER return null. Alternatively, you could set an initial value to bibitems directly when it is declared.

#511 Review Comments 14:
Please do not reuse a variable name. Just create a new one. 

#511 Review Comments 15:
There are a lot of empty lines in this method. Try to use the empty lines to separate important things from each other. For instance, place one empty line between the action under test (the import in this case) and the assertions (the creation of the filename and the actual assertion in that case). I would remove the other empty lines as they make it harder to understand the code. 

#511 Review Comments 16:
Use NIO instead. The property is not required here. 

#511 Review Comments 17:
It ensures that a user will never not follow the protocol. The protocol of the usage states that first the entries have to be parsed, then the result retrieved. However, this is not explicitly documented. Should we create another exception "DetectedWrongUsageOfTheAPI"?

Initializing the variable before is a work around, then at EndDocument, this variable has to be reset to ensure that parsing of a second document does not lead to entries added to the result of the first run. - I know, that this is an edge case, but also not following the protocol. If we treat the first wrong usage (getResults before parsing), the we also have to tret the second wrong usage (using the parser twice), don't we?

#511 Review Comments 18:
During startDocument a new list will be created. Hence, it can be used twice without any issues. 

#511 Review Comments 19:
Then, we add a ridiculous test case for covering these three lines of code? Currently, these lines are never used.

#511 Review Comments 20:
Personal discussion: quick fix: keep the if check; initialization at class variable; - Test case is obsolete, but you can add it to achieve 100% coverage.

A good redesign is a private static class.

--------------------------------------------------------------
#510 Review Comments 1:
The if statement is not necessary. 

#510 Review Comments 2:
Split the test into two tests (one for recognized formats, one for not recognized)

#510 Review Comments 3:
Please combine the items in one bib file. You should also test all items present in the text file. Please also add a similar test for the second txt file (and then remove testImportEntries)

#510 Review Comments 4:
I would expect here "40(6)" without the leading space.

#510 Review Comments 5:
Volume should be just `40(6)` without the space (i.e add trim() in importer)

#510 Review Comments 6:
Shouldn't it be an article? At least `PT- JOURNAL-ARTICLE` suggests it.

#510 Review Comments 7:
check entry type

#510 Review Comments 8:
Ideally 40(6) should be split to `volume={40}` and `issue={6}`.

#510 Review Comments 9:
Better use the BibTexAssert.assertEquals(Collections.singletonList(shouldBeEntry), entries). See the other PRs

#510 Review Comments 10:
No need for this, as this test actually does not add any extra value. Same for cliid.

#510 Review Comments 11:
Is there an overload which accepts `entries` as a parameter instead of a single entry? If yes, then use it. Otherwise create it first. :)

#510 Review Comments 12:
why is the rest of the title deleted in comparison to the txt file?

#510 Review Comments 13:
The title will only be saved till an " in comes. The code herefore is 
`int inPos = title.indexOf("\" in ");
                         if (inPos > 1) {
                             h.put("title", title.substring(1, inPos));
                         }`
in the SilverplatterImporter.
If there isn't " in in the title then the whole title is saved.

#510 Review Comments 14:
wrong indent

#510 Review Comments 15:
wrong indent

#510 Review Comments 16:
The count is already asserted in the assertion below. 

--------------------------------------------------------------
--------------------------------------------------------------
#508 Review Comments 1:
Please check the codecov reports, as you do not have 100% code coverage in this importer. 

And also check why the git diff tries to replace all lines in this file. Probably wrong setting with line endings. 

#508 Review Comments 2:
If statement is not necessary.

#508 Review Comments 3:
Split this test in one for recognized formats and one for rejected ones.

#508 Review Comments 4:
Split test into many tests which only check one file.

#508 Review Comments 5:
You should check that the values of all these 12 fields are correct.

#508 Review Comments 6:
Better use a string here instead of a file. (Have a look at the other pull request how to do this)

#508 Review Comments 7:
Have a look at the `expected` rule of JUnit.

#508 Review Comments 8:
Check that only one entry is in the list of entries.

#508 Review Comments 9:
Where does this bib come from?

It is shown as new, but the header says JabRef 2.10. Where id you have it from? And where is the bibliography data from?

I thought, you were creating these test files for yourself.

#508 Review Comments 10:
The team decided not to put `@author` tags: `git blame` gives the authors even though [git does not directly support multiple authors](http://stackoverflow.com/q/7442112/873282).

#508 Review Comments 11:
Why did you insert an empty line?

#508 Review Comments 12:
You should not reformat code if you do not change anything else in the class. That leads to `git blame` outputting something wrong.

--------------------------------------------------------------
--------------------------------------------------------------
#506 Review Comments 1:
What about this comment?

#506 Review Comments 2:
Why is this commented out?

#506 Review Comments 3:
Why is this long comment in the code? There are also other comments there. Why are they necessary? Or can they be removed?

#506 Review Comments 4:
Try to use empty lines to group statements together. Like in a book where a paragraph groups together sentences. 

--------------------------------------------------------------
--------------------------------------------------------------
#504 Review Comments 1:
Simon Harrer: Remove catch clause. 

#504 Review Comments 2:
Remove variable

#504 Review Comments 3:
How do you assert that the right seven entries with the right values are read correctly?

#504 Review Comments 4:
Put into appropriate place - JavaDoc.

#504 Review Comments 5:
If check not necessary. 

#504 Review Comments 6:
change the ending of the comparefile to bib

#504 Review Comments 7:
Use the appropriate method in BibtexAssert (not sure about the exact name of the class) to compare the lists

#504 Review Comments 8:
Move to new test method

#504 Review Comments 9:
Move to new test method

#504 Review Comments 10:
Why did you decided to write the tests in this way? Is the `bibtex-typ` a standard field in a Biblioscape file?

#504 Review Comments 11:
No, but `--NT--` (note). Therefore we use this field to carry the information about the bib-type, cause there is no appropriate field in Biblioscape.

#504 Review Comments 12:
Ok, I see. I would prefer a parametrized test here with pairs of strings like
`+--RT-- proceedings`
as input and `inproceedings` as output.
Then the test creates a proper Biblioscape entry (for example by adding `+--AU-- Baklouti, F.
+--YP-- 1999
+--KW-- Cells; Rna; Isoforms`) and calls the parser. Finally it creates a bib entry instance and compares it against the parsed one.

#504 Review Comments 13:
Done.

#504 Review Comments 14:
Done.

#504 Review Comments 15:
The problem about this is that the entry sequence is not unique.
So it is not guaranteed that the right entries are going to be compared.
BibtexEntryAssert compares the list like: `list1.get(i) == list2.get(i)`.
The best method we discovered is to compare the `isbn` field for all combinations (see l. 73) to get proper objects to compare.

#504 Review Comments 16:
Done.

#504 Review Comments 17:
I tried to implement this but while doing I realized that it will become too complicated for a test, cause there are also entries which differ from the other.
Loop based reading (for example with `BufferedReader`) would be too dangerous, cause the sequence the importer uses to save entries is not clear.
Now I made the test a little bit safer by removing the keyword `bibtex-typ:` in field `--NT--`, so we only need to query the `note` field instead of 
splitting the string. I hope it looks a little bit better.

#504 Review Comments 18:
Done.

#504 Review Comments 19:
Can you please handle this comment as well?

#504 Review Comments 20:
Have a look at the other PRs how to compare two lists of bibentries for equality. 

#504 Review Comments 21:
Then you can sort it and then compare it.

#504 Review Comments 22:
I still do not get it: is the `--NT--` field used for storing the bibtex type in there? Or is this just some guess from JabRef?

#504 Review Comments 23:
Yes, it is used to store the bibtex entry type because there is no appropriate field in Biblioscape. Once the object is parsed as bib-entry we use this field value to compare the Biblioscape type with. The Biblioscape format stores the type in `--WT--` or `--RT--` tags.

#504 Review Comments 24:
Ok, but then the comparison scheme of the previous method can be reused as well, as one can also create a .bib file which matches the import, simplifying the test logic even further. 

#504 Review Comments 25:
If I "hard code" the entry type check (e.g.  `Assert.assertEquals("inbook", be.getType());`), then yes. Otherwise we have to get the type from the source, because there is a mapping between the types of Biblioscape and Bibtex (e. g. `conference <->inproceedings`, `report <-> techreport`,...).

#504 Review Comments 26:
create a bib file which contains what you expect. You can use it similarly to the previous test. This expected should assert also the mapping logic.

#504 Review Comments 27:
Regarding "realized that it will become too complicated for a test, cause there are also entries which differ from the other.": the whole point of this test should be to test the bib type. So just normalize all entries and only differ the type. All other items should be tested separately. 

#504 Review Comments 28:
not required anymore. 

#504 Review Comments 29:
Done.

#504 Review Comments 30:
Done. See testImportEntries3().

#504 Review Comments 31:
@simonharrer I don't know why but the `BibtexImporter` does not return the Bibentries from the `List` in same order as they are saved in origin bib file. But `BiblioscapeImporter` does. Therefore I inserted a sort of ID for each entry, so that I can compare correctly (line 144). Comparing them manually will blow up the method, cause there are at least 10 entries.

#504 Review Comments 32:
#982 is now merged in so that a simple `BibtexEntryAssert.assertEquals` should be enough. 
Next time something didn't work as you would have expected, then just create an issue. The whole point of writing tests is to find and fix strange behavior.

#504 Review Comments 33:
I think, this test does not depend on the parameters. Please separate parameterized tests from non-parameterized.

Maybe move the parameterized ones to `BiblioscapeImporterTestTypes.java`.

#504 Review Comments 34:
Is it possible to give the file names more speaking names. Meaning: The names should be self-explanary. For instance, for ttest `1`, you could use `BakloutiEtAl1996`. Oh, I see that all articles are from him. Maybe, you can state the real difference of the test cases using the file name. - Maybe a suffice `Article` or similar should be appended to `BakloutiEtAl1996` if I get the last comments from the other developers right.

#504 Review Comments 35:
Done.

#504 Review Comments 36:
Done.

#504 Review Comments 37:
"Abortion" indicates an exception or a real worst case. (Double check: [dict.cc's translation of Programmabbruch](http://www.dict.cc/deutsch-englisch/Programmabbruch.html))

Maybe "InvalidFile" is the right suffix?

#504 Review Comments 38:
Does it really have to be `te`? Couldn't you use `invalidStringMakingTheImporterFail`?

#504 Review Comments 39:
the length should be less than 7 to reach the max. possible coverage.

#504 Review Comments 40:
The thing is: If you test with real data, you should not manipulate it to contain wrong values. Why not creating a really different test file with artificial, but readable test data. For instance: `booktitle = {The Booktitle}`, `author = {Firstname Lastname}`, `pages = {2}`, etc?

#504 Review Comments 41:
Maybe the filename suffix "Standard" is bad. When reading the test, I might think, that the importer always imports to `@misc` type. Why not calling it `UnkownType`, because the test is for an unknown type now.

#504 Review Comments 42:
Why "--"?

#504 Review Comments 43:
See `BiblioscapeImporterTestUnknownType.txt`. The tag `--PE--` tag means "page end". Cause there is no start page tag (`--PS--`) the pages are interpreted as `--11` in bibtex. This was the purpose of this test file.

#504 Review Comments 44:
Thanks for the clarification!

I thought the test was created to "test unknown types" :wink:

But it's okay imho that you test this here, too.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#491 Review Comments 1:
Nice FIXME. Any idea what this could mean here?

#491 Review Comments 2:
Nope, I forgot what it meant :smile: 

#491 Review Comments 3:
Maybe it is even fixed by calling this method and I added the FIXME because we must make sure that this is called every time we remove something, i don't know...

#491 Review Comments 4:
what about this TODO?

#491 Review Comments 5:
Can be removed as this doesn't work with our current impl.

--------------------------------------------------------------
#488 Review Comments 1:
With the try-with-resources construct, you do not need to call close() anymore.

#488 Review Comments 2:
Why did you comment this out?

#488 Review Comments 3:
You do not need to pass a String array, just present the two parameters as additional parameters to the lang method. 

#488 Review Comments 4:
I have seen this code in the Util, maybe create a util method for opening a url with the default user agent?

#488 Review Comments 5:
Can you try to convert the field variables as local variables in the method? With a quick check, I realized that this works for at least two fields. 

#488 Review Comments 6:
Maybe the methods should be better put into `URLUtil`.

#488 Review Comments 7:
You can just call return getPostResult... as you call a method within this class. 

#488 Review Comments 8:
This method is really large. Can you split it up a little bit? May be creating a method to compute the bibtexQueryURL can help.

#488 Review Comments 9:
It was giving strange results I thought it might not be required any longer. But today I dug deep for some records with Jr. Sr. in the name and confirmed it is still an issue.  I just added new code for proper parsing for this Jr. Sr. re-ordering and managed to find a few samples to confirm the new code is working.

#488 Review Comments 10:
This was left over from previous code, but fixed!

#488 Review Comments 11:
Moved the code to the Util method since I suspect nearly all requests will want it.

#488 Review Comments 12:
Done!

#488 Review Comments 13:
I left it in Util for now, since this is where I saw all the other URL accesses.  But I suppose future work would be to move all these to URLUtil?

#488 Review Comments 14:
Great!

#488 Review Comments 15:
Thanks, this was copied from the existing methods as well. Fixed.

#488 Review Comments 16:
Done!

#488 Review Comments 17:
I am pretty sure you do not need the reflection API in your code. Maybe you imported the wrong class?

#488 Review Comments 18:
Hm, why is this list not private?

#488 Review Comments 19:
Pattern should be private final static fields because it is very expensive to compile them. And in this case, it would have to be compiled for each fetch. 

#488 Review Comments 20:
you do not need to call flush and close, as try-with-resources will call close which in turn will also call flush. 

#488 Review Comments 21:
Allowing that a parameter of a method can be null is not our preferred way, as we want to avoid null as much as possible. I would vote for removing that option - as an encoding should always be used. 

#488 Review Comments 22:
Yes, was being dumb about array size.  Turns out there is a length member.  I have coded some Java a long time ago, but clearly still a newb :)

#488 Review Comments 23:
Not sure, existing code. But I can't find it anywhere else in the project, so I removed it.

#488 Review Comments 24:
Ok makes sense, reverted it.  But does that mean we should do the same for all the regex's here?  There are a lot of them...

#488 Review Comments 25:
Great! Very useful

#488 Review Comments 26:
Sure, I was keeping consistency with previous code.  It seems that if you don't specify then the "system default" is used.  Not an encoding expert, but I hard coded UTF-8 for now.  If folks have a better idea let me know!

#488 Review Comments 27:
Not sure if this is a valid comment, but it looks like you wrote `#1146` etc, which I think should be `feature 1146` (see top of the file).

--------------------------------------------------------------
#487 Review Comments 1:
The if test can be removed.

#487 Review Comments 2:
Replace the `thrown` statement by adding a expected tag to the test, i.e. 
`@Test(expected=IOException.class)`

#487 Review Comments 3:
Rename tests to reflect the expected behavior. For example, this here could be `ImportEncryptedFileThrowsException`.

#487 Review Comments 4:
Add test that bibtexEntries has length 1.

#487 Review Comments 5:
See also https://github.com/JabRef/jabref/wiki/Code-Howtos#preferences-in-tests

#487 Review Comments 6:
Replace the four `bibtexEntries.get(0)` calls by creating an instance `BibtexEntry entry = bibtexEntries.get(0)` and use this.

#487 Review Comments 7:
Split into two tests.

#487 Review Comments 8:
Isn't it better to leave the thrown part so that jUnit only expects the exception at line 43?
When I write `@Test(expected = IOException.class)` the test will also pass if the exception occurs at line 41.

#487 Review Comments 9:
Convinced. Leave as is.

--------------------------------------------------------------
#486 Review Comments 1:
Please always use the precise version.

#486 Review Comments 2:
please compare the array with an empty array, because then the failure message will be much more helpful than 1 instead of 0. 

#486 Review Comments 3:
Mhhh... do you really find the test failure message `AssertionError: array lengths differed, expected.length=0 actual.length=1` more expressive? I have more problems understanding the line `Assert.assertArrayEquals(new String[] {}, result);`. 

Maybe I should just replace the array by an `ArrayList`, then one could simply check `isEmpty()`. Best solution?

#486 Review Comments 4:
Hm, normally, I do not use arrays but lists instead. Then, I get a detailed message comparing two lists by Assert.assertEquals(Collections.emptyList(), actualList);

#486 Review Comments 5:
I now completely removed arrays and used lists instead, which overall resulted in cleaner code.

#486 Review Comments 6:
Would it make sense to change the method signature to List<String> instead of converting a list into an array?

#486 Review Comments 7:
What is the contract here, can candidates ever be null or is always != null but may be empty?

#486 Review Comments 8:
If you need an empty list which is never modified but only read, you can use Collections.emptyList() which should be faster. 

#486 Review Comments 9:
Would it make sense to change the fieldNames array to a List<String> as well? If you only pass a list with one element, you can use Collections.singletonList("element");

#486 Review Comments 10:
Yes it would make sense. However I see `AutoCompleteListener` as deprecated and it should be replaced by `AutoCompleteSupport` in the future.

#486 Review Comments 11:
Normally one shouldn't return null as a list, right? As far as I see, only empty lists are returned. Should I remove the null check or leave it to be on the safe side?

#486 Review Comments 12:
Yes, I wondered about that too. In the end I have chosen the new list since I saw no reason to prohibit that the caller adds further strings afterwards. 

#486 Review Comments 13:
Good idea. Will change it this evening.

#486 Review Comments 14:
Yes, one should never return null - which is true for lists as well. ;)

Please remove the null check, as it is obsolete. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#474 Review Comments 1:
Pattern is: this.var = Objects.requireNonNull(var);

#474 Review Comments 2:
Can you solve this before we merge this in, please?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#468 Review Comments 1:
This line is untested. 

#468 Review Comments 2:
Correct, I haven't added any tests, just enabled the old ones. There are probably quite a bit more things to test, like complete entries, to get complete code coverage.

I can do that, but somehow, the interesting thing would be to see how it behaves in practice.

(Those lines would just return that the strings are identical in case both are `""`.)

#468 Review Comments 3:
I would tend to add the logger always in the first line after class declaration..

--------------------------------------------------------------
#467 Review Comments 1:
Nice! Last comment: I think we should make this class also null-reference robust. I suggest to use Objects.requireNonNull for the preferences and for the file references just provide a special routine in case null is set. Why? At the moment, we have so many cases in which a reference can be null, I rather would avoid that this code is the cause of another bug report. 

#467 Review Comments 2:
One last remark. ;)

I would use fail fast, that is, write the method as follows:

```
if(file == null) {
  return false;
}
String lastFocusedDatabase ...
// remaining code
```

This has the advantage that input checks do not have to be found somewhere in the code. Furthermore, you reduce the number of indention by 1 for the typical use case, you separate the typical use case from the failure case. And if/else should be used when both branches are equally likely - but typically, we have one case which is very likely and one which is very unlikely - and the code should reflect that as well. 

#467 Review Comments 3:
Good point, changed it.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#460 Review Comments 1:
Maybe use StringJoiner instead of StringBuilder. This would then allow you to remove this iterator stuff. 

#460 Review Comments 2:
Can you please remove the TODO tags?

#460 Review Comments 3:
I do not really understand how to use a StringJoiner with a Map.

#460 Review Comments 4:
But I got an idea now, so let's see of ot works...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#452 Review Comments 1:
You could use Collections.singletonList instead. 

#452 Review Comments 2:
Collections.emptyList

#452 Review Comments 3:
Use StringJoiner instead, which should handle this more readable. 

#452 Review Comments 4:
fail fast:

```
if(...isEmpty()) {
  return null;
}

// other code
```

#452 Review Comments 5:
can we make this list final?

#452 Review Comments 6:
Is this method every called with more than one field? Could it be simplified to just passing one field? (I don't like arrays :)

#452 Review Comments 7:
List<String> you probably mean. 

#452 Review Comments 8:
You probably mean `List<String>` :smirk:

#452 Review Comments 9:
Yes. Interestingly, when you type in `List<String>` without the quotation marks, the `<String>` part is not shown, only when editing the post. 

#452 Review Comments 10:
Yes, for "DOI/URL" resp. "URL/DOI".

#452 Review Comments 11:
Idea: use optional instead to avoid null checks.

#452 Review Comments 12:
I would put this right at the beginning of the method. So that the rest of the code does not have think about null at all.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#440 Review Comments 1:
Please remove this constructor. 

#440 Review Comments 2:
This method and the field is unused. Please remove. 

#440 Review Comments 3:
Empty setup methods can be removed. 

#440 Review Comments 4:
Empty setup methods can be removed. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#432 Review Comments 1:
Could you create a Unit test which tests this method pair?

#432 Review Comments 2:
Done and rebased.

--------------------------------------------------------------
--------------------------------------------------------------
#427 Review Comments 1:
Please try to create a formatter without any dependencies to a BibtexEntry. The setting of the new value should be done in the `Cleanup` class whereas the formatter should also implement the `Formatter` interface. Have a look at other formatters already created, e.g., PageNumberFormatter. 

#427 Review Comments 2:
Oh, quite a few of these things were already done... I'll get back with an updated PR. (I looked at PageNumberFormatter, but clearly not good enough...)

#427 Review Comments 3:
You might also have a look at #305 

#427 Review Comments 4:
Yes, that PR changed things a bit! :+1: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#422 Review Comments 1:
Should be localized.

#422 Review Comments 2:
Why "file" and not "View" menu?

#422 Review Comments 3:
Why not "You have toggled_the_%0_mode" which can be used with "BibLaTeX" and "BibTeX" ?

#422 Review Comments 4:
should not be removed as it is needed for the Window title localization

#422 Review Comments 5:
(...) a file based thing in the future #167

#422 Review Comments 6:
Ok.

#422 Review Comments 7:
Sure, but i want to remove this dialog in the future anyway.

#422 Review Comments 8:
Which window? This is now `Localization.lang("Switch edit mode")`

#422 Review Comments 9:
Yes. But this breaks translations in the current/upcoming release.

#422 Review Comments 10:
See https://github.com/JabRef/jabref/pull/422#discussion_r46247118

--------------------------------------------------------------
#418 Review Comments 1:
Is the `Authenticator` always needed? Can we add it only in the case we really know for sure that username/password credentials are required?

#418 Review Comments 2:
Why not use empty string as default? Otherwise, we would have to copy with null values, I think. 

#418 Review Comments 3:
Could you perhaps add a message to the user stating that passwords are stored in plaintext upon save?

#418 Review Comments 4:
Because I followed the defaults for hostname and port I didn't get the idea behind populating it with "my proxy ...".

#418 Review Comments 5:
Is a tooltip enough? Maybe, if permantly shown?

#418 Review Comments 6:
We don't have to cope with null values because NetworkTab.validateSettings ensures that the properties are neither null nor empty, as long as `useProxyAuthentication` is enabled.

#418 Review Comments 7:
I'd prefer a JLabel underneath the password text field.

#418 Review Comments 8:
Can we remove the defaults for `PROXY_HOSTNAME`?  `PROXY_PORT` can be set to 80.

#418 Review Comments 9:
Yes, makes sense. 

#418 Review Comments 10:
You can delete this line, as JLabels must not be disabled. 

#418 Review Comments 11:
This code is in there two times. Can you extract that into a method?

#418 Review Comments 12:
It would be perfect if you could extract these lines related to the proxy settings into a separate class (named `ProxyConfigurator` or something like that), as the JabRef class is already too big to handle well. 

#418 Review Comments 13:
Indeed, but it is in general a good practice to disable irrelevant labels to not disturb/irritate the user. I can change it to be kept enabled as long as the password is not empty. That is IMHO the best compromise. Do you agree?

#418 Review Comments 14:
Ah, ok, you enable it with the other fields. I overlooked this fact. Leave it as it is. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#403 Review Comments 1:
Move these tests to the LocalizationTest or a new class?

#403 Review Comments 2:
Some of the tests should have more expressive names which describe what they test (probably also without the `test` prefix). 
I also find that some assertion are hard to read/understand and in my opinion they would profit if they are written over multiple lines (so that occurring objects get a name :) )

#403 Review Comments 3:
Hm, yes, should be better to move them out. 

#403 Review Comments 4:
Agreed. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#391 Review Comments 1:
I would rename this (and the corresponding methods, of course) as it is always used as "if not changed then..." to "useParsedSerialization" or even to "hasChanged".

#391 Review Comments 2:
should be `if(!...)` ?

#391 Review Comments 3:
Good point, I'll do some renaming. On second thought, I will also replace the `Deque` with a `Stack`, because this is the way in which it is used.

--------------------------------------------------------------
#390 Review Comments 1:
Why not use Could not save file %0. to print out the file name as well?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#379 Review Comments 1:
I do not like that we remove the logic to detect a bibtex file. On the contrary, we should extend this as we also want to detect whether a file is a bibtex or a biblatex file. This should not be removed. 

#379 Review Comments 2:
I prefer interfaces over class extension. Would a Comparator<EntryType> also work for the use case here?

#379 Review Comments 3:
Comparison should be done using the canonical bibtex format. Then, we can a) detect more errors, and b) the tests itself are getting easier to read. 

#379 Review Comments 4:
The check equaled more or less to a search of the `@` symbol. So it was purely semantic. Moreover, there is difference between a Bibtex and a Biblatex file on this semantic level. As I have explained above, in my opinion there is no easy way to tell if a file is a valid bibtex file or not. This is why I have deleted this method (which, by the way was only called upon importing a bibtex file, but not on opening one).

#379 Review Comments 5:
I think `Comparator` is not applicable here. What is actually required is a proper equals method, the comparison is just an extra.

#379 Review Comments 6:
What is the canonical bibtex format? Do you mean, that the `BibtexEntry` should be converted to a bibtex string? I strongly oppose this change as then the parser tests could fail for two different reasons: the parser logic is wrong or the export to bibtex has a flaw.

#379 Review Comments 7:
Have a look at `CanonicalBibtexEntry`. This format will never change and can be used to compare bibtex entries with predefined texts.

#379 Review Comments 8:
why did you comment out this line?

#379 Review Comments 9:
why did you change to Exception here? The code above does not state that Exception is required. 

#379 Review Comments 10:
If a bibtex field has for example no closing bracket, then another exception is thrown (not sure which concrete one, something along the lines of "I got something, but expected something else"). So I changed `IOException` to a general exception to handle also these cases. Without this change the test `parseIgnoresAndWarnsAboutCorruptedEntry` fails.

#379 Review Comments 11:
Not sure why. I'll revert it.

#379 Review Comments 12:
I think it would be better to find out the exact Exception (should be easy with the test) and then write a multi-catch block: `} catch (IOException | ThatOtherException ex) {`

If you catch `Exception`, you also catch Exceptions we do not want to catch, such as `NullPointerException`, `ArrayIndexOutOfBoundsException`, etc.

#379 Review Comments 13:
I remember (or better: the tests reminded me): This line was commented out because there were some null point exceptions due to uninitialized preferences. Fixed this in the new commit.

#379 Review Comments 14:
Yes you are right. I changed it to only catch `RuntimeExceptions`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#375 Review Comments 1:
String.join(", ", keywords) should do the same as these lines. 

#375 Review Comments 2:
Use List (the abstraction) instead

#375 Review Comments 3:
Use List instead. 

#375 Review Comments 4:
I would move the method + constants in separate class because they should be kept together and are independent of all the other methods. Maybe create a class `Keywords`. 

Please use List here as well. 

#375 Review Comments 5:
tests are missing for the putKeywords method. 

#375 Review Comments 6:
use Objects.requireNonNull(keywords) at the beginning to ensure that a null value is detected early on.

--------------------------------------------------------------
--------------------------------------------------------------
#373 Review Comments 1:
String.valueOf is the typical function for this. 

#373 Review Comments 2:
You can use for(String s : old) { list.addFirst(s); } instead. The check for old.length > 0 is also not necessary as the loop would ignore the case in which the array is empty. 

#373 Review Comments 3:
String[] names = history.toArray(new String[history.size()]);

#373 Review Comments 4:
a simple history.remove(filename) should suffice for this case. Then the entry would have been removed if it was in the list. This can replace the whole while loop. 

#373 Review Comments 5:
String.valueOf = 60 hits, Integer.toString = 32 hits. So I kept it, but can make a general search-and-replace if that is deemed to be the correct solution.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#362 Review Comments 1:
1) Please use Arrays.asList instead of adding all the entries with their list.add line. 
2) please have a look at how try-with-resources work. In #310 this is implemented more concisely. 

--------------------------------------------------------------
#361 Review Comments 1:
We try to eliminate null. Would it be possible to use Optional<String> as a return type instead?

--------------------------------------------------------------
--------------------------------------------------------------
#357 Review Comments 1:
theoretically, `\r` was also used for line breaks on MAC OS before OS-X. 

#357 Review Comments 2:
Can you please create the expected text without the replaceAll action? We want to have fast tests, and replaceAll compiles a regular expression internally when used. 

--------------------------------------------------------------
#356 Review Comments 1:
try-with-resources please to ensure that the input stream is closed.

#356 Review Comments 2:
just annotate the testImportEntries3 with throws IOException. We want to avoid e.printStackTrace() at all cost as it is evil. ;)

#356 Review Comments 3:
Have a look at #310 for handling the tests for format recognition. 

#356 Review Comments 4:
shall i do the same for the other testImportEntries test as well?

#356 Review Comments 5:
:+1: 

#356 Review Comments 6:
I editet the format recognition, so that it equals the one of #310 

#356 Review Comments 7:
Hm, I do not see this in the current PR. 

#356 Review Comments 8:
Can you remove this comment, please? The name of the class name says exactly that. 

#356 Review Comments 9:
An empty method should be removed. 

#356 Review Comments 10:
Of course i can remove that, but isn't giving classes a JavaDoc comment in the sense of SE?

#356 Review Comments 11:
Yes, but only when it has more information as the class name. The class name already states that this class contains tests of the InspecImporter. Why should I duplicate this in a comment? Especially in a test class which always has the purpose to include tests for the methods of the class it is created to test. 

JavaDoc is especially useful for application code. But, then again, one should only add comments that have value, e.g., contain examples, metaphors, explanation on how to use this method and class, pre/post conditions, invariants, ... 

#356 Review Comments 12:
thanks for clearing that up :+1:

#356 Review Comments 13:
Why is the year imported with a space in front, this is strange.

#356 Review Comments 14:
Why is there a space in front in the volume? This is strange.

#356 Review Comments 15:
My bad I understood it the wrong way. I'll fix it in the next commit.

#356 Review Comments 16:
Have a look at the test files (line 8), there are spaces between the ". ; :". If there was no space it would return ".1992". 

#356 Review Comments 17:
Have a look at the test files (line 8), there are spaces between the ". ; :". If there was no space it would return ";19"

#356 Review Comments 18:
I assume, the test files reflect real files. Then, please improve the importer by stripping white spaces from the fields "volumes" (and other fields where white spaces were added).

#356 Review Comments 19:
In the beginning i though we weren't allowed to change the Import classes, that's why i created the test like this, I'll fix that in the next commit, so that it strips the white spaces off.

#356 Review Comments 20:
If statement not necessary.

#356 Review Comments 21:
If this is everything you want to test, then the test file can be simplified (i.e. strip everything except the RT line). Then it is also possible to inline the file content as a string and load the stream from the string. In this case please adapt the test name to something more meaningful, like `importConferencePaperGivesInproceedings`.

However, probably it is better to add more test assertions proofing that the entry is parsed correctly.

#356 Review Comments 22:
Same as for the test above.

#356 Review Comments 23:
Pleas use compare the canonical bibentry format with one written in a file. With the current code, the expected and the actual bibentry is hard to see, and it does not detect if the actual bibentry has more key/value pairs than the expected one.

Same holds for the two test methods below.

#356 Review Comments 24:
No, Simon, this is the better way to test for equality. You really test that the result is what you want and not just that the 'canonical serialization' is correct (I could cheat and just store a serialization in the bib entry without filling the actual fields. Then all the tests would pass but of course this is not what you want). Especially, the two methods below are way more readable then two separate input-output files. 

You are right, that this test doesn't fail if more fields are present, but this is #625.

#356 Review Comments 25:
write directly "article" here (same also below)

#356 Review Comments 26:
"testGetFormatName failed" can be removed (it doesn't add any information...) same below

#356 Review Comments 27:
You can have the input/output file pairs inline, if you like. That is not an issue. 

Well, you could cheat but why would you? For me, a test is much easier to understand if I can reduce it to a simple input/output system. If I have to rely on a canonical format, this is not a unit test anymore, I admit. But testing only the input/output pairs you have an acceptance test which could be shown to a user as well and the user would understand this. And the higher a test, the more stable it will be. A unit test in this regard may be modified if you change any of the methods of the bibentry. 

To me, the input/output is much more maintainable, as this could be easily applied to all importers. Hence, we could just add triples of (importer, input, output) and this could be used to test the importer. Even users could create test cases and a single test class could implement this as a data driven tests. 

#356 Review Comments 28:
I don't understand what you are trying to say. Right now the test is of the format "input -> processing -> compare against expected output". So it perfectly fits the setting you described. 

So, I think the only question is how "compare against expected output" should be defined. In an ideal world, I would just write `parsedEntry.equals(expectedEntry)` and let the BibEntry class take care of what "equality" should mean. Since this is not possible right now, the next best thing for me is to compare that I get the data I want from the entry (which is what the test is doing).
In the end, it comes down to the type of the "expected output". For me it is an BibEntry and for you a string. I really like the typed version more! (And by the way, I have a really strong opinion about this one :smile: ...so maybe we should shift the discussion to the next dev call)

#356 Review Comments 29:
In production code, I completely agree: To compare one BibEntry with another one, a BibEntry must provide an equals method. We should implement one in the near future. Same holds for a BibDatabase which basically is a List of BibEntries. 

In test code, such an equals method does not help as it can only either give you true or false. Because of this, one uses Assert.assertEquals("a", "b") instead of Assert.assertTrue("a".equals("b")). Hence, we need a more sophisticated comparison method which can also show the difference, giving reasons why it failed. I think, we also agree on this one. 

I think we have to distinguish between the representation of the expected output and the comparison. 

We can represent the expected output using the canonical format in a file, in a String or by using the API to build up a BibEntry. I think using a file is more maintainable, as even normal users could provide us with test cases - but I do not have a strong opinion about this. All three alternatives are OK. 

So it boils down to how to achieve the comparison of two entries, or even two databases (list of entries) as the importers import a file which can contain more than one entry. I can also live with a comparison method which takes in two lists of BibEntries and compares them internally (while I personally prefer the canonical serialization as well as one would see all differences between two BibEntries quickly instead of only getting the single difference which caused the test to fail without knowing what other fields were also the problem). But nevertheless, we should require and use such a comparison method to ensure that no additional (and suprising) fields are found during the import. I thought we had such a comparison method already available, but I can only find `BibtexEntryAssert.assertEquals(List<BibEntry> expected, List<BibEntry> actuals)` which uses the canonical format internally for the comparison instead of calling the BibEntry methods directly.

#356 Review Comments 30:
Ok, I think we both want the same thing in the end!

As far as I know, the assertEquals method just compares the objects by calling the `equals` method and if they differ returns the values of `toString`. So to have a proper support we need to overwrite equals (compare the internal fields arrays) and toString (return the canonical serialization). 

However, we also need a solution until the corresponding #625 is implemented.
I would propose to create the bib entry via 
`BibEntry expectedEntry = new BibEntry()` and `expectedEntry.setField("field", "data")`. Then call `assertEquals(parsedEntry.getCanonicalSerialization(), expectedEntry.getCanonicalSerialization())` to compare them.
As soon as we have a proper implementation of the equals method, the `getCanonicalSerialization` part can be removed.
What do you think about this solution?

#356 Review Comments 31:
The used method should be `net.sf.jabref.bibtex.BibtexEntryAssert.assertEquals(BibEntry, BibEntry)`, shouldn't it? This is IMHO exactly what your example code does.

If #625 is resolved, the BibEntryAssert class can possibly be removed. Not sure though: Using `equals` does not really show where the BibEntries, but "failed" only, doesn't it?

Do you think, we should modify `net.sf.jabref.bibtex.BibtexEntryAssert.assertEquals(List<BibEntry>, List<BibEntry>)` to iterate through each field? I find the current implementation very nice. If an assertion fails, one can directly see in the diff which field is wrong. No need for additional code IMHO.

We also have `net.sf.jabref.bibtex.BibtexEntryAssert.assertEquals(InputStream, BibEntry)` to enable comparison of a file in `src/test/resources` and a BibEntry generated from an importer.

#356 Review Comments 32:
@tobiasdiez One cannot cheat and store a canonical representation as `net.sf.jabref.model.entry.CanonicalBibtexEntry.getCanonicalRepresentation(BibEntry)` walks through the fields.

Or did I get something wrong?

Maybe we should write down the motivation for `CanonicalBibtexEntry` and `BibtexEntryAssert` somewhere to make it clear. This current discussion is a great input for that. See also https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md#when-making-an-architectural-decision :innocent: 

#356 Review Comments 33:
Good point @koppor. Then use `BibtexEntryAssert.assertEquals(BibEntry, BibEntry)`.
And yes, in my opinion we should remove this class completely. If two entries are (or lists of them) are equal in some sense for the tests, then the production code should also regard them as equal.

Regarding your second point: "cheating" was maybe a wrong word. My point was that other code is used to compare the entries, which is outside of the control of the BibEntry class. So if the CanonicalBibtexEntry class has some implementation issue, these problems are propagated to all imported tests although they in principal shouldn't even depend on `CanonicalBibtexEntry`.

Taking the "driven" in TDD literally, then the tests definitely drive the design in the direction that the BibEntry class has to implement a proper equals method. 

#356 Review Comments 34:
I like the idea of having a toString as canonical representation and equals method. Good idea!

Hence, we can conclude that in this PR `BibtexEntryAssert.assertEquals(BibEntry, BibEntry)` should be used which is later changed accordingly. 

#356 Review Comments 35:
@mairdl can you change the code accordingly? Thanks!

#356 Review Comments 36:
Am I getting it right that the BibtexEntryAssert makes the other assertions obsolete?

#356 Review Comments 37:
Yes instead of 

```
assertEqual("bla", entry.getField("field"));
assertEqual("foo", entry.getField("field2"));
```

you now write

```
BibEntry expectedEntry = new Entry();
expectedEntry.setField("field1", "bla")
expectedEntry.setField("field2", "foo")
BibtexEntryAssert.assertEqual(expectedEntry, entry);
```

#356 Review Comments 38:
The assertEquals(BibEntry shouldBeEntry, BibEntry entry) method is private. Is there any reason not to change this to public? 

#356 Review Comments 39:
With https://github.com/JabRef/jabref/commit/2a80e9c98d5940e4ef2276902a9b8a244c303893 It is public since 4 hours :) 

#356 Review Comments 40:
Replace this with BibtexEntryAssert.assertEquals(Arrays.ListOf(shouldBeEntry), entries).

#356 Review Comments 41:
Replace this with BibtexEntryAssert.assertEquals(Arrays.ListOf(shouldBeEntry), entries) as well.

#356 Review Comments 42:
remove this, it is not necessary in try-with-resoruces

#356 Review Comments 43:
Replace this with BibtexEntryAssert.assertEquals(Arrays.ListOf(shouldBeEntry), entries) as well.

#356 Review Comments 44:
remove empty lines

#356 Review Comments 45:
remove empty lines

#356 Review Comments 46:
Are you sure you mean "Arrays.ListOf(shouldBeEntry)"? Because I can't find this method.

#356 Review Comments 47:
Simon meant the `Arrays.asList`, but `Collections.singletonList` also works (I think IntelliJ even suggest replacing asList with singletonList)

#356 Review Comments 48:
If i try to solve it with `Arrays.asList` or with `Collections.singletonList`, I get an error from the assertion because I try to compare a list of BibEntry with a BibEntry.

#356 Review Comments 49:
But `entries` is a list, isn't it?

#356 Review Comments 50:
`entries` is a `BibEntry` as suggested in earlier comments

#356 Review Comments 51:
Please reference the comment. You can get the deep link to a comment using the time given at a commit. While scrolling through here, I don't see that comment directly. Please help the reader by clear references.

#356 Review Comments 52:
@koppor Here you go [comment](https://github.com/JabRef/jabref/pull/356#discussion_r55875576) 

#356 Review Comments 53:
please fix this

#356 Review Comments 54:
Use BibtexEntryAssert.assertEquals(Collections.singletonList(shouldbeEntry), entries);

--------------------------------------------------------------
--------------------------------------------------------------
#354 Review Comments 1:
Please see #310 for how to handle tests for this part. 

#354 Review Comments 2:
Why not use `Assert.assertEquals`? Expected and actual must be switched, as expected is the fixed output String you know is correct whereas actual is the result of the method under test. 

`Assert.assertEquals("medlineplain", importer.getCLIId());`

What is more, variables must always start with a lower case letter and camel case (except when they are constants). 

#354 Review Comments 3:
!contains is better readable then indexOf, I think.

#354 Review Comments 4:
Always use try-with-resources for `getResourceAsStream` usages.

#354 Review Comments 5:
what about `MedlinePlainImporterTest1.txt` ?

#354 Review Comments 6:
Always use try-with-resources for `getResourceAsStream` usages.

#354 Review Comments 7:
use this for naming the test method, e.g., `public void testMultipleEntriesInSingleImportFile`, because then you do not need the comment anymore. 

#354 Review Comments 8:
This empty line can be removed

#354 Review Comments 9:
Just remove the if-condition and only set `Globals.prefs = JabRefPreferences.getInstance();` as this must not be optimized here. 

#354 Review Comments 10:
You can write it more clearly by separating the input pairs from the logic. Make it obvious what is getting tested. For instance:

```
for (int n = 1; n <= 5; n++) {
    String medlineFile = "MedlinePlainImporterTest" + n + ".txt";
    String bibtexFile = "MedlinePlainImporterTestBib" + n + ".bib";
    assertImportOfMedlineFileEqualsBibtexFile(medlineFile, bibtexFile);
}
```

And the assert method you can implement based on the remaining logic code. 

What would even be better is to have a single test per file, describing what is special in this file to give the test a special name. You can still reuse the assertImportl... method, but instead of naming the files 1..5 and capturing all under a single test, you can create five tests with expressive names. 

#354 Review Comments 11:
Which line exactly do you mean?

#354 Review Comments 12:
Comments can be removed since it contains exactly the same information as the class name.

#354 Review Comments 13:
Split tests. Definitely a separate test for recognized and one for not-recognized files. I would even say that there should be a separate test for every file (maybe not for all files, just the ones which actually test a new behavior...say one for txt files and one for isi).

#354 Review Comments 14:
If there are 7 entries then you should also test that all entries are parsed correctly and not just the first two. Probably it is more convenient to reduce the number of entries in the test file and thus simplify the test case.

#354 Review Comments 15:
There is no need to create an empty file. Better create a stream from an empty string, see http://stackoverflow.com/questions/782178/how-do-i-convert-a-string-to-an-inputstream-in-java.

#354 Review Comments 16:
Test against an empty list as described here https://github.com/JabRef/jabref/wiki/Code-Howtos#test-cases. 

#354 Review Comments 17:
Please directly test that the imported entries are correct (as it is done above). The test as it stands could also fail because the bib-file import has a bug.

#354 Review Comments 18:
Split tests is a great idea. I think one test method for isRecognized and one for isNotRecognized should be enough since this methods should not test any data but only check if the format is recognized or not.

#354 Review Comments 19:
Yes, you are right, normally one should be enough. But have a look at the `isRecognized` method and see if you cover all cases. Also it does not harm to check edge cases, like empty files.

#354 Review Comments 20:
this test should only check if multiple entries in one file could be read and imported together. The specific test for an entry is being checked in the testImportSingleEntriesInSingleFiles methode using the methode suggested by @koppor with checking imported entry vs. bibtex file. 

#354 Review Comments 21:
Only the last (positive) assert statement is necessary.

#354 Review Comments 22:
Same as above.

#354 Review Comments 23:
You should verify all 7 entries or delete the last 5 in the test file.

--------------------------------------------------------------
--------------------------------------------------------------
#352 Review Comments 1:
final?

#352 Review Comments 2:
Idea: secondary optional only in biblatex, classes should reflect that. Boolean method if current class is biblatex class? Maybe interface + abstract classes for bibtex/biblatex?

#352 Review Comments 3:
only used once in the DBExporter, inline and remove. 

#352 Review Comments 4:
I think, this method is useful also in other cases. I remember that there was a pattern for that: data objects should not carry "extended" methods, but a visitor or something similar should be used. `BibtexEntryTypeUtil`?

#352 Review Comments 5:
I don't understand that.

--------------------------------------------------------------
#351 Review Comments 1:
One minor suggestion: the code to determine the title is distributed in two places. One could create a method in BasePanel which computes the title and just reuse the method from there.

#351 Review Comments 2:
Of course this should be done. I just don't know if the majority wants this feature so just demoing it here.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#342 Review Comments 1:
Do we need String arrays or can we use an instance of a class instead?

#342 Review Comments 2:
What does this regex mean? And why is it necessary?

#342 Review Comments 3:
It is stated a few lines down. The idea is to remove \r if the line breaking is \r\n, but it turned out that it didn't work on the first line, only on the remaining ones.

However, now I realize that if the line-breaking is only \r (MAC, right?) the complete function will fail its purposed. Still, the current version is at least slightly better than the earlier...

#342 Review Comments 4:
I was thinking about that as well. ArrayList<ArrayList<String>>? But then I wasn't sure which was the most suitable one.

This especially holds for the encode and decode functions in StringUtil.

#342 Review Comments 5:
I guess the actual question here is if we should line wrap fields when writing to the .bib-file or not? It can also be noted that there's a comment stating that this function should be "symmetric" to the parse function above, which doesn't exist... Hence, I guess that maybe one should wait a bit with sorting out this. @lenhard ?

#342 Review Comments 6:
The RegEx is `CharMatcher.WHITESPACE.trimTrailingFrom` (see http://www.leveluplunch.com/java/examples/right-trim-string/).

#342 Review Comments 7:
Regarding the wrapping: I think, the entry point for the discussion is https://github.com/JabRef/jabref/issues/114. Think we agreed not not wrap single-line fields and that multiline fields should not be merged into one line.

#342 Review Comments 8:
After reading the code a few times, I think that if the preference "Line wrap as in 2.9.2" is removed, so is this function. May be worth double-checking a few times though... :-)

#342 Review Comments 9:
make them static final

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#337 Review Comments 1:
why not using `else if` in those checks?

#337 Review Comments 2:
Yeah, I asked myself that as well in the back of my head, totally focused on replacing stuff. :-)

But I'll change it now. Good point!

--------------------------------------------------------------
#336 Review Comments 1:
Can you move this line so that instead of `Abbreviations.journalAbbrev.getNextAbbreviation(text).orElse(text);` one can call `Abbreviations.journalAbbrev.toggleAbbreviation(text);`?

The aim is to have as much code as possible in logic and independent of the GUI classes. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#330 Review Comments 1:
I think we can skip this long localization as the different options are self-explanatory. Just state that the Database %0 has changed. 

#330 Review Comments 2:
:+1: 

--------------------------------------------------------------
#329 Review Comments 1:
I will move this to model...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#321 Review Comments 1:
You do not need the if-condition here. Just set the `Globals.prefs`

#321 Review Comments 2:
Reference in the docs: https://github.com/JabRef/jabref/wiki/Code-Howtos#preferences-in-tests

#321 Review Comments 3:
Please split this in 3 different tests.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#310 Review Comments 1:
When comparing lists, it is better to do an assert that way:

`Assert.assertEquals(Collections.emptyList(), entries);`

Then, the message when the assertion fails is much better, as it contains the entries in the list using their toString method. 

Example:

``` java
List<String> values = new LinkedList<>();
values.add("asdf");

Assert.assertEquals(Collections.emptyList(), values);
```

results in 

```
Exception in thread "main" java.lang.AssertionError: expected:<[]> but was:<[asdf]>
    at org.junit.Assert.fail(Assert.java:88)
    at org.junit.Assert.failNotEquals(Assert.java:834)
    at org.junit.Assert.assertEquals(Assert.java:118)
    at org.junit.Assert.assertEquals(Assert.java:144)
    at Test.main(Test.java:13)
```

#310 Review Comments 2:
Do you want me to only edit the `testImportEntries3()` ? 
Or should I create two Lists on every `testImport()` and only make one Assert at the end? For example 

``` java
    @Test
    public void testImportEntries() throws IOException {
        Globals.prefs.put("defaultEncoding", "UTF8");

        CopacImporter importer = new CopacImporter();

        List<BibtexEntry> entries = importer.importEntries(
                CopacImporterTest.class.getResourceAsStream("CopacImporterTest1.txt"), new OutputPrinterToNull());
        Assert.assertEquals(1, entries.size());
        BibtexEntry entry = entries.get(0);

        List<String> idealValue = new LinkedList<>();
        idealValue.add("The SIS project : software reuse with a natural language approach");
        idealValue.add("Prechelt, Lutz and Universität Karlsruhe. Fakultät für Informatik");
        idealValue.add("Interner Bericht ; Nr.2/92");
        idealValue.add("1992");
        idealValue.add("Karlsruhe :  Universitat Karlsruhe, Fakultat fur Informatik");
        idealValue.add("Edinburgh");
        idealValue.add("TXT");

        List<String> isValue = new LinkedList<>();
        isValue.add(entry.getField("title"));
        isValue.add(entry.getField("author"));
        isValue.add(entry.getField("series"));
        isValue.add(entry.getField("year"));
        isValue.add(entry.getField("publisher"));
        isValue.add(entry.getField("HL"));
        isValue.add(entry.getField("documenttype"));

        Assert.assertEquals(idealValue, isValue);

        Assert.assertEquals(BibtexEntryTypes.BOOK, entry.getType());
    }
```

#310 Review Comments 3:
I meant only when checking that the size of the list should be 0. You do not get too much information that the list has size 1. It is much easier to debug when you know what values the element in the list has. 

#310 Review Comments 4:
Okay. Now I know what you mean. Thank you.
After I have changed `testImportEntries()` to the "two list model" I got a failure. I couldn't resolve it because it was one big Message and I didn't saw my mistake. 
This is why I asked before I changed the other one and pushed it.

#310 Review Comments 5:
I think it is slightly better to understand if you use `@Test(expect=IOException.class)` instead of the `thrown` construction.

#310 Review Comments 6:
I agree. In this case, no the whole method may throw an exception and not a single line (as IMHO discussed with @bartsch-dev in another PR)

#310 Review Comments 7:
What is `HL`? From the content, I would suspect it represents the location/city of the publisher. In this case it should  be written to the `address` field in bibtex.

#310 Review Comments 8:
This implementation of CopacImporter knows the tags TI, AU, PY, PU, SE, IS, KW, NT, PD and DT. In this case Copac doesn't know what HL is. So to address this field you have to use the tag HL as field. This ressources already existed. In this case this is a test to watch whether the importer correctly handles with unknown tags.

#310 Review Comments 9:
Please have a look at how the other successfully merged PRs compared bibentries after the import...

#310 Review Comments 10:
Please fix the formatting

#310 Review Comments 11:
Would it be possible to name the copac files `CopacImporter....txt` and the bib files `CopacImporter....bib`. The prefix `Bib` is not necessary.

Please remove the `Bib` prefix and adapt the filter on line 46: Add `.filter(n -> n.endsWith(".txt)` before `.collect`.

Adapt line 61 to replace `.txt` by `.bib` and just pass `fileName` here.

In case there are multiple entries in your list, possibly BibTexEntryAssert has to be modified. We have to discuss then.

#310 Review Comments 12:
Isn't that file really not used at the InspecImporter or SilverPlatterImportTests?

#310 Review Comments 13:
As far as I know only @tschechlovdev  used it in SilverPlatterImportTest.

#310 Review Comments 14:
Maybe, it should be renamed then. I wonder, why the test case do not fail when removing that file.

#310 Review Comments 15:
It is used in testIsNotRecognizedFormat. So there is no specific test for the fields. Does this answer your question?

#310 Review Comments 16:
I thought that Inspec and SilverPlatter are two different formats. Therefore, I would name the file accordingly. - Maybe `SilverPaltterGeneralFile.txt`

#310 Review Comments 17:
Personal discussion: test case covered by other files. Therefore, OK to remove. @tschechlovdev 

#310 Review Comments 18:
Then provide a method in the BibtexEntryAssert class which can do this, please. 

#310 Review Comments 19:
Why do you filter out InspecSilverPlatter files as well? This is quite unexpected.

#310 Review Comments 20:
Please use Java NIO instead. Moreover, you do not need `System.getProperty("user.dir")` as this is the default. 

#310 Review Comments 21:
After talking with @tschechlovdev we both agreed to delete the InspecSilverPlatterImporterTest.txt and replace it with another Inspec file which is not recognized by CopacImporter

#310 Review Comments 22:
a directory stream is a resource which must be closed. use a try-with-resources construct here, please. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#306 Review Comments 1:
Please format the file according to the Eclipse rules. The effect would be, among other things, that this line is formatted the following way: `Assert.assertEquals("cpc", importer.getCLIId());`

#306 Review Comments 2:
Can you please write this without an assignment? Then you do not need the `@SuppressWarnings` annotation anymore. 

#306 Review Comments 3:
@zellerdev Do you use eclipse and did you create the project using `gradlew eclipse`? Then, the formatting should be automatically be OK, shouldn't it?

--------------------------------------------------------------
#305 Review Comments 1:
Please use spaces instead of a tab.

#305 Review Comments 2:
Do we need to use these tags even inside Javadoc? For me, then the formatting is fundamentally flawed...

#305 Review Comments 3:
We should discuss this in the dev call. Again....

#305 Review Comments 4:
The dates cleanup class is not required. Have a look at the doConvertUnits method. It should simply call the formatter which formats the string. 

#305 Review Comments 5:
The formatter tags in comments can be removed as the new formatter rules do not format comments anymore. 

#305 Review Comments 6:
Instead of testing DatesCleanup, it would be better to test the formatter with simple input/output string pairs. 

--------------------------------------------------------------
--------------------------------------------------------------
#303 Review Comments 1:
Actions.UNDO == "undo" whereas you had "Undo" before. I am not sure which effects will this change have. We should be careful here. Does it still work for this special component?

#303 Review Comments 2:
I _think_ that it is just a arbitrary name, but it may be better to not change it... This naming vs Action.CONSTANT should be clarified somehow. Or maybe it is clear to other people than me...

I'll add the ChangeLog entry and also remove the other stuff discussed.

--------------------------------------------------------------
--------------------------------------------------------------
#301 Review Comments 1:
can you reverse the name changes in this PR as well, please?

#301 Review Comments 2:
Please try not no use these formatter tags as we want to have them as little as possible. A simple solution would be in this case to create the array in a line above using 

`String[] options = {Localization.lang("Save"), tryDiff, Localization.lang("Cancel")};`

instead.

#301 Review Comments 3:
Just delete it if it is unused. 

#301 Review Comments 4:
I think, the current `syncLang.py` can handle a single `Localization.lang` call per line. Therefore, the split among different lines is required.

We could use a [Java parser written in Python](https://github.com/musiKk/plyj/tree/java8) to improve `syncLang.py`, but I'm not sure, it's worth the effort.

#301 Review Comments 5:
Yes, that is one of the main causes for false positive obsolete translation strings. In @simonharrer's example, "Cancel" will not be found (which I guess is OK in the specific case, but in general there were ten or so false positives removed).

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#298 Review Comments 1:
please do not abbreviate variable names.

#298 Review Comments 2:
This is one of the actual cases where Eclipse warns. braceLevel is a variable in the BibTexCaseChanger class, so using the same name for a method argument seems like a bad idea. I can of course give it a longer name rather than abbreviate it. (Using the same name seems more incorrect here than in the earlier cases we've discussed: constructors and initfunctions.)

#298 Review Comments 3:
I could of course define it static, but not sure if that is a better option.

#298 Review Comments 4:
I read the code and decided to inline the methods as they were only called once. This also lead to warnings messages which made more sense, removal of an unused argument in BibtexWidth and change of the corresponding test.

--------------------------------------------------------------
#297 Review Comments 1:
Why the renaming?

#297 Review Comments 2:
To remove the "this" part. Not sure what the standpoint is on this, but I have removed quite a bit of warnings earlier where some inputs are hiding member variables, so I thought I may just do that to avoid any later warnings in case someone changes something else and so on.

#297 Review Comments 3:
Hm, I would leave it for setting something in the constructor/setter. What do the other @JabRef/developers think?

#297 Review Comments 4:
Yeah, have seen this in @oscargus' warning-removal-PRs. 
I don't have a strong opinion on this: I don't bother if a member name is reused in a method (especially not in a constructor/setter)...

#297 Review Comments 5:
I see the difference between these cases (assigning in the constructor/init). There was also a case discussed where, translated to this case, `PushToApplicationButton.frame` was discouraged. I just interpolated to this, but no problem to remove it. Not sure what is best practice (there are quite a few places where things like this occur in the constructor, so probably better not touch it and restore this one).

#297 Review Comments 6:
Please use JabRefPreferences.PUSH_TO_APPLICATION instead. As we do not want to access static variables on instances. Theoretically, Eclipse should issue a warning for these kinds of things.

#297 Review Comments 7:
Same problem as described in other comment about JabRefPreferences.CONSTANT.

#297 Review Comments 8:
That is exactly what I have done. :-)

#297 Review Comments 9:
But I found one place where it wasn't changed. Line 283.

#297 Review Comments 10:
Or actually not. That was a key binding, which is fixed in another PR.

#297 Review Comments 11:
Instead of 

`Globals.prefs.put(Globals.prefs.PUSH_TO_APPLICATION, toApp.getApplicationName());`

please write

`Globals.prefs.put(JabRefPreferences.PUSH_TO_APPLICATION, toApp.getApplicationName());`

because `PUSH_TO_APPLICATION` is a static variable of the `JabRefPreferences` class and should be accessed in a static way. And not through an instance as it would be when accessing it via `Globals.prefs`.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#291 Review Comments 1:
use !isEmpty

#291 Review Comments 2:
this is the String.join logic. 

#291 Review Comments 3:
A lot of the parser code is untested. 

#291 Review Comments 4:
You can use `com.google.common.base.Strings.isNullOrEmpty(isbn)` for that.

#291 Review Comments 5:
In https://github.com/JabRef/jabref/pull/378 we work out how to read files during test. I put the source files (`.xml`; `.json` in your case) and target files (`.bib`) into version control and the tests read the files and compare them. This makes maintenance IMHO easier. Furthermore, you can test all fields by one call and don't need to add `assertEquals` for each field. 

--------------------------------------------------------------
#287 Review Comments 1:
Wrong link? :hushed:

#287 Review Comments 2:
Bah! Copy-paste-programming should be more automated. ;-)

#287 Review Comments 3:
You can just write 

`String[] journalSingleFieldStrings = {"publisher", "number", "volume"};`

instead of 

`String[] journalSingleFieldStrings = new String[] {"publisher", "number", "volume"};`

--------------------------------------------------------------
#286 Review Comments 1:
Why do you turn this static? It is not called from a static context.

#286 Review Comments 2:
`@param` should be removed here completely

#286 Review Comments 3:
`/** */` block can be removed completely

#286 Review Comments 4:
To be checked: Is localization needed here? Should be only relevant if the exception message is shown somewhere in the UI.

#286 Review Comments 5:
Maybe renaming the variable to "fieldText" would be more intuitive. 

Side note: Why the hell has the method "field()" been introduced, which does nothing more than returning `field.getText()`? 

@oscargus Would you remove those rather useless methods (`field(), remove()`), too? Thanks! :wink:

#286 Review Comments 6:
Those were really weired line breaks... Good to see that fixed :+1: 

#286 Review Comments 7:
:+1:

#286 Review Comments 8:
"weiter" should be renamed to "continue" for people who don't speak German :wink:

#286 Review Comments 9:
param must be renamed to

#286 Review Comments 10:
No. However, there are some localized exception and log messages in the current code and these will be removed in one go and the translation files updated at the same time.

#286 Review Comments 11:
I do not speak enough German to be fully sure, but that was my interpretation of it as well. :-) (Except that continue is a quite bad choice... ;-))

--------------------------------------------------------------
#283 Review Comments 1:
`e` as second param

#283 Review Comments 2:
`e` as second param

#283 Review Comments 3:
`e` as second param

#283 Review Comments 4:
`e` as second param

#283 Review Comments 5:
`ex` as second param instead of ex.getMessage()

#283 Review Comments 6:
`ex` as second param instead of ex.getMessage()

#283 Review Comments 7:
`ex` as second param instead of ex.getMessage()

#283 Review Comments 8:
`ex` as second param instead of ex.getMessage()

#283 Review Comments 9:
`e` as second param instead of e.getMessage()

#283 Review Comments 10:
`ex` as second param

#283 Review Comments 11:
`e` as second param

Side note: `catch (Throwable e)` :scream_cat: 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#274 Review Comments 1:
why is this import the only change in this file?

#274 Review Comments 2:
Answer to my own question: GUIGlobals has been moved into `...util` package...

#274 Review Comments 3:
Yes, I created that package to contain gui-related "utility" classes and methods (i.e., small useful stuff...).

--------------------------------------------------------------
#273 Review Comments 1:
just return the new value

#273 Review Comments 2:
We want to return the initial value and not the cleaned value if page numbers regex does not match?!

#273 Review Comments 3:
ah ok. then leave this untouched. 

#273 Review Comments 4:
we should only create the undo action if anything was actually changed (oldValue != newValue). 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#266 Review Comments 1:
Should the `resort list` comment be removed, too? Or is the implementation below some kind of resorting?!

#266 Review Comments 2:
I interpreted the first line as a comment and the second as a comment-out. :-) But reading it, I see your point. Will fix.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#255 Review Comments 1:
Can you extract the logic of getting all the fields of a database and move this method in the database class itself? Maybe use getAllVisibleFields as a method, then you can also ignore the ones that start with "__". 

#255 Review Comments 2:
hm, strange that a generically typed combo box requires a cast to String. Is this really necessary?

#255 Review Comments 3:
Yeah, it is by design as arbitrary objects can be inserted if the ComboBox is editable: http://stackoverflow.com/a/7026724/873282

Solution: Replace the code by 

```
field.getItemAt(field.getSelectedIndex())
```

(or add a comment pointing to the stackoverflow answer :innocent:)

#255 Review Comments 4:
Okay, so we can leave it at this. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#248 Review Comments 1:
I suggest to add the context: "Merge Entries Dialog:" and "Use only one button to perform merge" might be a better description?

--------------------------------------------------------------
#246 Review Comments 1:
wrong indent

--------------------------------------------------------------
#242 Review Comments 1:
Can you please change your warning settings in eclipse? We never serialize an instance in a File or over the Network and therefore do not need these IDs. 

#242 Review Comments 2:
OK, sure! I've spent too much time on these then. :-)

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#235 Review Comments 1:
You just need `<>` in the right side of a statement. This is called the diamond operator. 

#235 Review Comments 2:
use try-with-resources instead. This is the idiom to ensure that any opened resource is closed for sure. 

``` java
try(InputStream in = source.openStream()) {
   // use in
}
```

#235 Review Comments 3:
OK! Most of the things I tried to solve was based on warnings in Eclipse. Just to make it clear, I should have written

`entries = new SortedList(entryList, new FieldComparatorStack<BibtexEntry>(comparators));`

as entries was already defined as `SortedList<BibtexEntry>`? I might just have seen the warning, changed in SortedList, seen that it was still there and then actually read the warning...

#235 Review Comments 4:
OK! I'll change that. I'd say that there are quite a few cases where this could be changed in JabRef. The ones I went for were only the warnings of missing `.close()`.

Again, just to understand, is it a difference when one open a resource which will "always" open? That is, not a file or network request, such as Scanner (which I guess has fewer potential problem sources)?

#235 Review Comments 5:
No, a correct solution would look like this:

`entries = new SortedList<>(entryList, new FieldComparatorStack<>(comparators));`

You still need the empty `<>`. But you do not have to retype the generic type, just indicate that the generic type of the variable declaration must be used. 

#235 Review Comments 6:
Yes, there are a lot of cases. But not every case is easily translated into try-with-resources. Especially when the opening and closing of the resource is split into completely different locations and points in the execution flow. 

With try-with-resources, you do not need to call `close` as this construct does this for you. 

I would do this always then the resource I am using implements the `AutoCloseable` interface. As you never know. :) But if a `Scanner` would only work on a `String`, this probably must not be closed. But I am not certain in that case. 

#235 Review Comments 7:
OK, thanks!

#235 Review Comments 8:
OK, thanks again!

#235 Review Comments 9:
this line is not necessary anymore and can be removed. 

#235 Review Comments 10:
To keep the semantics of this method the same, I would suggest to remove the catch block as before a FileNotFoundException was thrown when the file was not there. In the current code, a FileNotFoundException` is not thrown as a FileNotFoundException is a subtype of IOException it is caught by the catch block. 

#235 Review Comments 11:
Ahh, OK! Will fix that. I'll also include some more things in this PR, basically removed duplicate code from two files and moved to Util (which I know is a mess, but still slightly better than having duplicated code in lots of places...).

#235 Review Comments 12:
Sorry, missed that.

#235 Review Comments 13:
This block: reading a string from an Input stream is done also just below in the code in the same way. Hence, it is duplicated code. 

I would suggest that a util method is created for converting an InputStream to a String. Normally, a charset must be set when converting bytes to chars. I would think that IEEExplore always returns utf-8, hence, I would use that. Please see http://www.baeldung.com/convert-input-stream-to-string

#235 Review Comments 14:
Yes, that is the code I'm unifying. The block below reads from a file though (although it should be similar, I've kept it for now). Identical code in ACMFetcher and almost identical in Util.GetResultsWithEncoding. Will push in a few minutes.

#235 Review Comments 15:
Oh yeah, this I had a bit of confusion with:

Removing the catch block leads to an error as IOException is not caught. Removing the try completely (as in the original code) leads to a warning that there is a potential resource leak.

What about catching the IOException and throw a FileNotFoundException in the catch part?

#235 Review Comments 16:
Thanks for your reply. I was confused there as well. 

My proposal:

``` java
try(FileReader reader = new FileReader(Objects.requireNonNull(file))) {
            readJournalList(reader);
        } catch (FileNotFoundException e) {
            throw e;
        } catch (IOException e) {
            LOGGER.warn("Could not read journal list from file " + file.getAbsolutePath());
        }
```

#235 Review Comments 17:
Yes, of course! Sort of obvious in hindsight.

Thanks for reviewing code and helpful suggestions!

#235 Review Comments 18:
And it would clearly make sense to add an InputStream to String converter. Will look more into it eventually (but not tonight or the next few days). Thanks for the link!

--------------------------------------------------------------
--------------------------------------------------------------
#232 Review Comments 1:
Did you lose the correct encoding here? Persian (فارسی)

#232 Review Comments 2:
Thank you. I must have missed that. Somehow, Intellij has set up my project to not use UTF8 but some windows specific one. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#227 Review Comments 1:
can you please solve this without such labels? they really complicate maintainability.

#227 Review Comments 2:
these IDs are everywhere ;-)

#227 Review Comments 3:
why are entries removed directly from the DB, but the addition of entries is delayed until after the loop?

#227 Review Comments 4:
Hmm, I simply stole that piece of code from another JabRef source file... But, yes, probably.

#227 Review Comments 5:
At least I removed them from the files I edited today. :-) (Or so I tried.)

#227 Review Comments 6:
Not sure. Just kept the old behavior, but indeed it makes sense to delay it.

I should for sure have removed my print-debugging on line 1933 though...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#218 Review Comments 1:
undefined?

#218 Review Comments 2:
Abstract class has no abstract methods to override. Is this intended? Same methods just return null. Could they be converted to abstract methods the sub-classes must implement?

#218 Review Comments 3:
previoulsy CITE_COMMAND_TEXMAKER was used. Are you sure this can be replaced by a generic CITE_COMMAND?

#218 Review Comments 4:
Yes. All constants were having `\cite` as content. See discussion at https://github.com/JabRef/jabref/pull/204#commitcomment-13580247.

#218 Review Comments 5:
Yes, would make sense.

#218 Review Comments 6:
I had some different thoughts about that. Basically, I'm struggling with the trade-off between moving as much as possible to the abstract class and then create support for the special cases that may show up in the specific instances.

Indeed, one would expect some methods to be abstract. There is now one in the new version (still to be pushed), but I think it may make sense to have these "dummy" instances since not every specific PushTo class use all of them. Not sure if that is a sign of a bad design to start with though.

Partly, it also relatsd to the fact that I basically do not know how to program in Java and my Google karma wasn't good enough at the time...

#218 Review Comments 7:
Trade-off between supporting special cases in the abstract class and keeping almost identical code in the different PushTo classes, it should have read.

#218 Review Comments 8:
could we have a logging statement instead of a stackTrace?

#218 Review Comments 9:
The key stroke name should not be localised, as this is used to get the shortcut key binding for this action. 

#218 Review Comments 10:
It seems this method is overridden in each sub class. Thus, I would make this abstract. This also helps to remove `null` usage, which is a good thing. :)

#218 Review Comments 11:
It seems this method is overridden in each sub class. Thus, I would make this abstract. This also helps to remove null usage, which is a good thing. :)

#218 Review Comments 12:
This looks like it is never used as it would run into an infinite recursion.

#218 Review Comments 13:
According to Stack Overflow use have to use `System.getenv("%programfiles% (x86)");` instead. http://stackoverflow.com/questions/4851359/java-get-program-files-path

#218 Review Comments 14:
Yes!

#218 Review Comments 15:
Ah, OK!

#218 Review Comments 16:
No, not really. Some PushTo use different methods to communicate. For example, for LyX/Kile a pipe/file is used to communicate. Of course, one could add the corresponding method there (with null...), but since that would not be used, this still seemed to make more sense.

#218 Review Comments 17:
Yes, that is a bug, should be return guessProgramPath(programName, null). Just a convenience method to avoid having to provide a path in case there isn't a Windows version of the program (in which case maybe one doesn't have to guess, but assuming that guessProgramPath is eventually improved and more universal).

#218 Review Comments 18:
I'm quite sure the provided alternative is also OK (since it works and was in the original code, I stole the basic functionality from PushToTeXStudio).

In `openoffice.AutoDetectPaths` there is a method `findProgramFilesDir()` which use a manual method to find these two directories.

I believe that `guessProgramPath` could be improved quite a bit later on. Searching both locations and selecting the one where the file exists, search with arbitrary version numbers (at least WinEdt and OpenOffice have version numbers in their path) etc. Maybe it makes sense to get the full path in Linux as well? (Simply getting the result from `which xxx` would be a start...)

#218 Review Comments 19:
just remove this comment

#218 Review Comments 20:
Either we delete the comparator or we use it. I have no opinion about this, but we should do either of the two options.

#218 Review Comments 21:
I agree. It was commented out in the code I started working with, so I guess removing should be OK.

#218 Review Comments 22:
Bah! Talk about copy-paste-programming...

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#206 Review Comments 1:
Is 1st and 2nd really language independent? And can you please use constants instead of just the unicode as for me I do not know all unicode signs by hard :)

#206 Review Comments 2:
Look at the screenshot postet by Olly in the PR https://github.com/JabRef/jabref/pull/206#issuecomment-145379447 - "\u2190" is a leftarrow which should be language independent ;-) However, a comment or constant usage would improve understandability

#206 Review Comments 3:
Correct that those unicode codes (unicodes?) are left- and rightarrows. Seemed to make more sense than using 1st and 2nd, since in the DOI case it says (roughly) "Original" and "DOI" (although the screenshot doesn't show it for some reason). Comments can of course be added and I agree that they make sense.

Is there a better way to solve this, not from a programming perspective but from a GUI perspective? Better terms? I thought about "Use left" and "Use right", but not more clear (maybe less) and longer (a clearer version would be even longer).

#206 Review Comments 4:
From a GUI perspective, I would prefer to have a line above "use" with three options "left", "none", "right". 

#206 Review Comments 5:
OK! I can sort that out! 

Will need to rewrite this quite a bit anyway, to allow vertical scroll. My plan is to have vertical scroll on the item part, so: fixed column titles, scrollable (if needed) item list, fixed preview + source, where the labels are above the boxes, fixed buttons.

--------------------------------------------------------------
#205 Review Comments 1:
We have a script that automatically extracts the used language keys. This only works when we do not pass a variable to the `lang` method. Can you please inline the language keys as Strings?

#205 Review Comments 2:
Some lines below, the same strings are inlined. Therefore, a comment on the strings a few lines above is enough. (I hope to remember the setting correctly, currently on the road)

#205 Review Comments 3:
I'll sort this out. I have a better idea of the translation process now.

The reason for using variables in this way (in general, as it is not really the case implemented here I realize) would be to only need to change the original string in one position, if you for some reason do want to change it. For translations there is obviously only going to be one string to translate anyway, but for consistency it can make sense to do it like this.

I assume it may be better to do something like

``` Java
private final String editTitle = Localization.lang("Edit file type");
private final String newTitle = Localization.lang("New file type");
...
        String title = editTitle;       
        if(entry.getName().isEmpty()) {
            title = newTitle;
       }
```

and so on?

Regarding @koppor:s comment for lines 215-219, I'll look into the actual operation again. I had the impression that one can use the same dialog instance if you click on another item, but not sure if that was the case and that I forgot to change back. If that's not the case, I assume

``` Java
        String title = Localization.lang("Edit file type");       
        if(entry.getName().isEmpty()) {
            title = Localization.lang("New file type");
       }
```

is a slightly better solution? (Assuming that you more commonly edit than add file types.)

Will continue working on this PR tonight.

#205 Review Comments 4:
looks good to me. 

--------------------------------------------------------------
--------------------------------------------------------------
#200 Review Comments 1:
Should be spaces instead of a tabulator. I also see this in your other PRs.

--------------------------------------------------------------
#198 Review Comments 1:
I would love to see a comment here why this is necessary. So future developers can instantly see the reason behind this code and remove it if behaviour has changed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#193 Review Comments 1:
@koppor @stefan-kolb  @matthiasgeiger  this seems to be an issue with wrong formatting as this line is way too long. 

#193 Review Comments 2:
I already pointed that out somewhere... 77d1ea868c3381d78b19f5e15a1364de9033eb2a introduces this behavior... @koppor do you remember why you've changed this?

#193 Review Comments 3:
Again spaces instead of a tab.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#187 Review Comments 1:
I think the name `bibtexKey` is misleading, as I would think of it as the key of a bibtex entry. I would suggest to use `bibtexField` instead. 

#187 Review Comments 2:
You break functionality here, when a file path contains multiple whitespaces.

--------------------------------------------------------------
#183 Review Comments 1:
move `removeEntries` out of the condition as will always be executed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#172 Review Comments 1:
Maybe putting the upgrade mapping in a Map<String, String> would make the code a little bit more readable as the upgrade mapping is clearer to see. 

#172 Review Comments 2:
Good idea! I'll rewrite that part.

#172 Review Comments 3:
Hm, maybe use an enum here? But this requires more work. 

#172 Review Comments 4:
This should reference a constant from the Encodings class. 

#172 Review Comments 5:
Yes, this requires major changes, since all of the code relies on strings. I'd rather do this in a second issue / PR.

#172 Review Comments 6:
There are no constants in the Encodings class so far.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#150 Review Comments 1:
:see_no_evil:

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#140 Review Comments 1:
Should be DefaultAutoCompleteRenderer. Missing an e in Complete.

#140 Review Comments 2:
This class should be normalized. It is way to big at the moment. We try to refactor our current code to avoid such 1000+ lines classes.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#99 Review Comments 1:
I would recommend to make it final. 

#99 Review Comments 2:
would it make sense to use an instance of the DOI class for this method?

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#86 Review Comments 1:
Can you please use the full options for sort -uf, and place a comment what LC_ALL=C.UTF-8 is for. 
Maybe also explain the format string used in the log statement. 

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#71 Review Comments 1:
shouldn't this be `LOGGER.warn` instead of `LOGGER.debug`?

#71 Review Comments 2:
shouldn't this be `LOGGER.warn` instead of `LOGGER.debug`?

#71 Review Comments 3:
shouldn't this be `LOGGER.warn` instead of `LOGGER.debug`?

#71 Review Comments 4:
The log levels and practices of [commons.logging](http://commons.apache.org/proper/commons-logging/guide.html#Best_Practices_General) and [java.util.logging](http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html) are somewhat different. Since I converted the whole thing to commons, I tried to follow their guidelines. In many cases, such as the above, it is quite hard for me to decide the criticality of the event, and, hence, the log level. If you know that this event is really that critical, it is no problem to change the logging. Should I do that? Perhaps ``LOGGER.error` would also be appropriate?

#71 Review Comments 5:
see my message above.

#71 Review Comments 6:
see my message above.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#61 Review Comments 1:
please delete field if it is unused instead of adding a warning.

#61 Review Comments 2:
why can this be put into the if condition?

#61 Review Comments 3:
why not reuse this over all cookie instances?

#61 Review Comments 4:
Because the comment above the if says so. At least that is how I understood it. I guess this used to be an if without parantheses and they were added incorrectly.

#61 Review Comments 5:
indentation issue

#61 Review Comments 6:
nice! :) no strange static class anymore. :+1: 

#61 Review Comments 7:
Because DateFormats are not thread-safe.

#61 Review Comments 8:
Shouldn't be this action just offered in a menu than just being removed?

#61 Review Comments 9:
Shouldn't "brokenLinks" be output somehow than just be silently ignored?

#61 Review Comments 10:
As this class is not part of the shipped product because it is never called, we have no knowledge wether this feature works or not. 

I would delete this as well. Reasoning: slime done and becoming productive again is better than adding any features that may contain bugs and we are also not certain whether the user really want such features. 

#61 Review Comments 11:
We could log this as a warning. 

--------------------------------------------------------------
--------------------------------------------------------------
#59 Review Comments 1:
This should be logged rather than send to standard output.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
#21 Review Comments 1:
can you please remove this from the pull request as the default logging parameters should not be changed.

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
